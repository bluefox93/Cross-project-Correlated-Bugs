issue,id,reporter,closed_by,created_at,updated_at,closed_at,state,assignee,milestone,comments,label_name,url,title,body
5183,165924656,mhvk,mhvk,2016-07-16 11:07:44,2016-07-19 21:13:31,2016-07-18 18:42:51,closed,,v1.2.2,8,Affects-release;Bug;units,https://api.github.com/repos/astropy/astropy/issues/5183,b'Ensure that quantities are converted to Magnitude instances if needed.',"b'This fixes the second issue raised in #5178, allowing quantities to be converted to magnitudes as needed.\r\n\r\nIn current master:\r\n```\r\n(10.*u.STmag).physical.to(u.STmag)\r\n<Quantity 10.0 mag(ST)>\r\n```\r\nWith this PR:\r\n```\r\n(10.*u.STmag).physical.to(u.STmag)\r\n<Magnitude 10.0 mag(ST)>\r\n```'"
5178,165647648,pllim,mhvk,2016-07-14 20:10:02,2016-07-21 13:25:09,2016-07-21 13:00:59,closed,mhvk,,11,Affects-release;Bug;units,https://api.github.com/repos/astropy/astropy/issues/5178,b'STmag and ABmag conversions give ValueError',"b'The conversion test was done slightly differently in #5017, so this was not caught. Conversion works when `.to()` is invoked from the unit, not does not work when invoked from the `Quantity` but only if it was initialized using `Quantity`. Example below:\r\n\r\n```python\r\n>>> from astropy import units as u\r\n\r\n>>> wave = u.Quantity([4956.8, 4959.55, 4962.3], u.AA)\r\n>>> flux_stmag = [12.41858665, 12.38919182, 12.41764379]\r\n>>> photlam = u.photon / (u.cm ** 2 * u.s * u.AA)\r\n\r\n>>> u.STmag.to(photlam, flux_stmag, u.spectral_density(wave))\r\narray([ 0.0097654 ,  0.01003896,  0.00978473])\r\n\r\n>>> q = flux_stmag * u.STmag\r\n>>> q\r\n<Magnitude [ 12.41858665, 12.38919182, 12.41764379] mag(ST)>\r\n>>> q.to(photlam, u.spectral_density(wave))\r\n<Quantity [ 0.0097654 , 0.01003896, 0.00978473] ph / (Angstrom cm2 s)>\r\n\r\n>>> q = u.Quantity(flux_stmag, u.STmag)\r\n>>> q\r\n<Quantity [ 12.41858665, 12.38919182, 12.41764379] mag(ST)>\r\n>>> q.to(photlam, u.spectral_density(wave))\r\n.../astropy/units/quantity.py in to(self, unit, equivalencies)\r\n    707         unit = Unit(unit)\r\n    708         new_val = self.unit.to(unit, self.view(np.ndarray),\r\n--> 709                                equivalencies=equivalencies)\r\n    710         return self._new_view(new_val, unit)\r\n    711 \r\n\r\n.../astropy/units/core.py in to(self, other, value, equivalencies)\r\n--> 997         return self._get_converter(other, equivalencies=equivalencies)(value)\r\n    998 \r\n    999     def in_units(self, other, value=1.0, equivalencies=[]):\r\n\r\n.../astropy/units/core.py in _get_converter(self, other, equivalencies)\r\n   1740         raise ValueError(\r\n   1741             ""The unit {0!r} is unrecognized.  It can not be converted ""\r\n-> 1742             ""to other units."".format(self.name))\r\n   1743 \r\n   1744     def get_format_name(self, format):\r\n\r\nValueError: The unit \'mag(ST)\' is unrecognized.  It can not be converted to other units.\r\n```'"
5164,164507980,saimn,nden,2016-07-08 11:02:25,2016-07-19 10:07:08,2016-07-18 19:38:30,closed,,v1.2.2,12,Affects-release;Bug;wcs,https://api.github.com/repos/astropy/astropy/issues/5164,b'Fix conflict between WCSHDO_SIP and the WCSHDO_P* precision keywords',"b'Fix #5162, cc @nden '"
5162,164285515,saimn,nden,2016-07-07 11:13:51,2016-07-18 19:38:30,2016-07-18 19:38:30,closed,,,1,Affects-release;Bug;wcs,https://api.github.com/repos/astropy/astropy/issues/5162,b'Specifying precision in wcs.to_header() does not work',"b""Using `wcs.to_header(relax=WCSHDO_P17)` seems to have no effect, I get the same output if I don't use `relax` (with a default precision to `WCSHDO_P14`).\r\nThis was added in #4616, cc @nden \r\n\r\nI think there is a conflict with the default value for `WCSHDO_SIP`, though 81b9e94540bbcfd771a581874d3fb5ac338da639 was trying to avoid that."""
5158,163993101,larrybradley,pllim,2016-07-06 03:48:42,2016-07-11 21:12:05,2016-07-11 21:11:54,closed,,v1.3.0,4,Affects-dev;Bug;stats,https://api.github.com/repos/astropy/astropy/issues/5158,b'Fix biweight_midvariance',b'This fixes a slight regression introduced in #5127.\r\n\r\ncc: @crawfordsm'
5156,163949023,adrn,eteq,2016-07-05 21:17:35,2016-07-07 14:17:52,2016-07-06 21:52:02,closed,,v1.2.2,7,Affects-release;Bug;build;Docs;no-changelog-entry-needed,https://api.github.com/repos/astropy/astropy/issues/5156,b'Fix build_docs build path',"b""This adds a new section to `setup.cfg` for `build_docs` so that\r\n\r\n    python setup.py build_sphinx\r\n\r\nand\r\n\r\n    python setup.py build_docs\r\n\r\nbuild to the same location: `<root>/docs/_build/...`. Testing locally, this seems to be all it took. Not sure if this should be tested in some way -- thoughts?\r\n\r\nAlso, I'm not sold that we need two documentation build commands that do the same exact thing, but that can be discussed elsewhere...(I guess I should take it up with [robo-Erik](https://github.com/astropy/astropy/pull/4133#issuecomment-230601085)?)\r\n\r\nCloses #4133 \r\n\r\ncc @eteq @astrofrog """
5153,163573322,adrn,mhvk,2016-07-03 18:19:16,2016-07-09 13:36:18,2016-07-09 13:36:18,closed,mhvk,v1.2.2,10,Affects-release;Bug;units,https://api.github.com/repos/astropy/astropy/issues/5153,b'Hide numpy warnings for initial operations on unscaled quantity values',"b""This is an attempt to fix #3240.\r\n\r\nSummarizing my understanding of the problem: numpy ufuncs will first operate directly on a quantity's value before it is scaled properly. This can cause a warning for things that are valid operations. For example, arcsin of the quantity `15 pc / kpc` -- arcsin(15) will throw a warning, but after scaling, arcsin(0.015) is fine. This PR silences warnings like this by utilizing the `warnings.catch_warnings` context manager to silence numpy Runtime warnings in between `__array_prepare__` and `__array_wrap__`. (I use the context manager to do this because it seems that temporarily catching a warning and then returning to the previous state is actually a nontrivial task, e.g., http://stackoverflow.com/questions/2390766/how-do-i-disable-and-then-re-enable-a-warning)\r\n\r\ncc @mhvk \r\n\r\nCloses #3240"""
5125,161614059,astrofrog,eteq,2016-06-22 07:44:23,2016-06-22 17:09:56,2016-06-22 14:05:25,closed,,v1.2.1,3,Affects-release;Bug;io.fits,https://api.github.com/repos/astropy/astropy/issues/5125,b'Fix to CompImageHDU from 5118 with regression test',"b""I managed to reproduce the failure that #5118 fixes, so I'm starting by adding a regression test to make sure it fails, then I'll cherry-pick the fix from #5118. I think the data passed to ``CompImageHDU`` had to be integer so that the BSCALE and BZERO still applied.\r\n\r\ncc @parejkoj @eteq @embray\r\n\r\nEDIT: Closes #5118 """
5121,161230328,marcopigg,eteq,2016-06-20 15:56:17,2016-06-22 01:27:10,2016-06-22 01:26:32,closed,mhvk,v1.2.1,15,Affects-release;Bug;Critical;Python2;units,https://api.github.com/repos/astropy/astropy/issues/5121,b'Resolve v1.2 ImportError when a constant is imported before the units package',"b'I am getting a strange `ImportError` with `astropy` v1.2: \r\nthe following lines\r\n```\r\nfrom astropy.constants import G\r\nimport astropy.units as u\r\n```\r\ngive\r\n```\r\nTraceback (most recent call last):\r\n  File ""test.py"", line 9, in <module>\r\n    import astropy.units as u\r\n  File ""....../lib/python3.4/site-packages/astropy/units/__init__.py"", line 18, in <module>\r\n    from . import si\r\nImportError: cannot import name \'si\'\r\n```\r\nwhereas importing `astropy.units` first gives no error. The issue is absent in previous versions of `astropy`.'"
5118,161061762,parejkoj,eteq,2016-06-19 07:58:52,2016-06-22 14:07:29,2016-06-22 14:05:25,closed,,v1.2.1,2,Affects-release;Bug;Duplicate;io.fits,https://api.github.com/repos/astropy/astropy/issues/5118,"b""Fix CompImageHDU's made from ImageHDUs with BSCALE/BZERO.""","b""If an existing ImageHDU containing BSCALE/BZERO is turned into a CompImageHDU,\r\nthe TFIELDS keyword don't get placed in the correct location (immediately\r\nfollowing GCOUNT), resulting in an invalid CompImageHDU. This fixes this behavior in the file I originally had trouble with, but I was not able to come up with a minimal example to turn into a proper test. It passes all the io.fits tests on my local copy, but it appears CompImageHDUs don't have good test coverage, so I can't promise this change is safe (though I believe it more closely matches the FITS standard, which is the important thing).\r\n\r\nSaid minimal example should look something like the below, but this doesn't actually produce the failure on the old code:\r\n\r\n```python\r\nfrom astropy.io import fits\r\nimport numpy as np\r\n\r\nx = np.random.random((100, 100))*100\r\n\r\nx0 = fits.PrimaryHDU()\r\nx1 = fits.ImageHDU(x)\r\nx2 = fits.ImageHDU(np.array(x-50, dtype=int), uint=True)\r\nx2.header['BZERO'] = 32768\r\nx2.header['BSCALE'] = 1\r\nx3 = fits.ImageHDU(x*3)\r\nx4 = fits.BinTableHDU()\r\nhdus = fits.HDUList([x0, x1, x2, x3, x4])\r\nhdus.writeto('3hdus.fits')\r\n\r\n# fitsverify (based on cfitsio) should fail on this file, only seeing the first HDU.\r\ndata = fits.open('3hdus.fits')\r\nfor i in [1, 2, 3]:\r\n    data[i] = fits.CompImageHDU(data=data[i].data, header=data[i].header)\r\ndata.writeto('3hdus_comp.fits')\r\n```\r\n\r\nFor further details, see my recent emails to astropy and astropy-dev."""
5106,160513530,registerrier,astrofrog,2016-06-15 20:16:25,2016-06-17 13:48:08,2016-06-17 13:47:29,closed,mhvk,v1.0.11,4,Bug;units,https://api.github.com/repos/astropy/astropy/issues/5106,b'Correct Ci definition',b'Change defintion to  Ci = Bq * 3.7e10  instead of  Ci =  Bq / 3.7e10'
5098,160364855,saimn,saimn,2016-06-15 08:24:15,2016-06-20 07:17:38,2016-06-20 07:17:38,closed,taldcroft,,23,Bug;utils,https://api.github.com/repos/astropy/astropy/issues/5098,b'1.2RC1 - test failure in astropy/time/formats.py',"b'```\r\n___________________________________________ test_scale_conversion ____________________________________________\r\n\r\n    def test_scale_conversion():\r\n        if INTERNET_OFF:\r\n            # With internet off (which is the default for testing) then this will\r\n            # fall back to the bundled IERS-B table and raise an exception.  But when\r\n            # testing with --remote-data the IERS_Auto class will get the latest IERS-A\r\n            # and this works.\r\n            with pytest.raises(ScaleValueError):\r\n                Time(Time.now().cxcsec, format=\'cxcsec\', scale=\'ut1\')\r\n        else:\r\n>           Time(Time.now().cxcsec, format=\'cxcsec\', scale=\'ut1\')\r\n\r\nastropy/time/tests/test_basic.py:907: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\nastropy/time/core.py:213: in __init__\r\n    precision, in_subfmt, out_subfmt)\r\nastropy/time/core.py:263: in _init_from_vals\r\n    precision, in_subfmt, out_subfmt)\r\nastropy/time/core.py:301: in _get_time_fmt\r\n    return FormatClass(val, val2, scale, precision, in_subfmt, out_subfmt)\r\nastropy/time/formats.py:337: in __init__\r\n    in_subfmt, out_subfmt, from_jd)\r\nastropy/time/formats.py:131: in __init__\r\n    self.set_jds(val1, val2)\r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\n\r\nself = <astropy.time.formats.TimeCxcSec object at 0x7ff27a39f150>, val1 = array(582365171.0633501)\r\nval2 = array(0.0)\r\n\r\n    def set_jds(self, val1, val2):\r\n        """"""\r\n            Initialize the internal jd1 and jd2 attributes given val1 and val2.\r\n            For an TimeFromEpoch subclass like TimeUnix these will be floats giving\r\n            the effective seconds since an epoch time (e.g. 1970-01-01 00:00:00).\r\n            """"""\r\n        # Form new JDs based on epoch time + time from epoch (converted to JD).\r\n        # One subtlety that might not be obvious is that 1.000 Julian days in\r\n        # UTC can be 86400 or 86401 seconds.  For the TimeUnix format the\r\n        # assumption is that every day is exactly 86400 seconds, so this is, in\r\n        # principle, doing the math incorrectly, *except* that it matches the\r\n        # definition of Unix time which does not include leap seconds.\r\n    \r\n        # note: use divisor=1./self.unit, since this is either 1 or 1/86400,\r\n        # and 1/86400 is not exactly representable as a float64, so multiplying\r\n        # by that will cause rounding errors. (But inverting it as a float64\r\n        # recovers the exact number)\r\n        day, frac = day_frac(val1, val2, divisor=1. / self.unit)\r\n    \r\n        jd1 = self.epoch.jd1 + day\r\n        jd2 = self.epoch.jd2 + frac\r\n    \r\n        # Create a temporary Time object corresponding to the new (jd1, jd2) in\r\n        # the epoch scale (e.g. UTC for TimeUnix) then convert that to the\r\n        # desired time scale for this object.\r\n        #\r\n        # A known limitation is that the transform from self.epoch_scale to\r\n        # self.scale cannot involve any metadata like lat or lon.\r\n        try:\r\n            tm = getattr(Time(jd1, jd2, scale=self.epoch_scale,\r\n                              format=\'jd\'), self.scale)\r\n        except Exception as err:\r\n            raise ScaleValueError(""Cannot convert from \'{0}\' epoch scale \'{1}\'""\r\n                                  ""to specified scale \'{2}\', got error:\\n{3}""\r\n                                  .format(self.name, self.epoch_scale,\r\n>                                         self.scale, err))\r\nE           ScaleValueError: Cannot convert from \'cxcsec\' epoch scale \'tt\'to specified scale \'ut1\', got error:\r\nE           (some) times are outside of range covered by IERS table.\r\n\r\nastropy/time/formats.py:374: ScaleValueError\r\n___________________________________________ test_scale_conversion ____________________________________________\r\n\r\n    def test_scale_conversion():\r\n        if INTERNET_OFF:\r\n            # With internet off (which is the default for testing) then this will\r\n            # fall back to the bundled IERS-B table and raise an exception.  But when\r\n            # testing with --remote-data the IERS_Auto class will get the latest IERS-A\r\n            # and this works.\r\n            with pytest.raises(ScaleValueError):\r\n                Time(Time.now().cxcsec, format=\'cxcsec\', scale=\'ut1\')\r\n        else:\r\n>           Time(Time.now().cxcsec, format=\'cxcsec\', scale=\'ut1\')\r\n\r\nastropy/time/tests/test_basic.py:907: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\nastropy/time/core.py:213: in __init__\r\n    precision, in_subfmt, out_subfmt)\r\nastropy/time/core.py:263: in _init_from_vals\r\n    precision, in_subfmt, out_subfmt)\r\nastropy/time/core.py:301: in _get_time_fmt\r\n    return FormatClass(val, val2, scale, precision, in_subfmt, out_subfmt)\r\nastropy/time/formats.py:337: in __init__\r\n    in_subfmt, out_subfmt, from_jd)\r\nastropy/time/formats.py:131: in __init__\r\n    self.set_jds(val1, val2)\r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\n\r\nself = <astropy.time.formats.TimeCxcSec object at 0x7ff2793c0510>, val1 = array(582365211.867949)\r\nval2 = array(0.0)\r\n\r\n    def set_jds(self, val1, val2):\r\n        """"""\r\n            Initialize the internal jd1 and jd2 attributes given val1 and val2.\r\n            For an TimeFromEpoch subclass like TimeUnix these will be floats giving\r\n            the effective seconds since an epoch time (e.g. 1970-01-01 00:00:00).\r\n            """"""\r\n        # Form new JDs based on epoch time + time from epoch (converted to JD).\r\n        # One subtlety that might not be obvious is that 1.000 Julian days in\r\n        # UTC can be 86400 or 86401 seconds.  For the TimeUnix format the\r\n        # assumption is that every day is exactly 86400 seconds, so this is, in\r\n        # principle, doing the math incorrectly, *except* that it matches the\r\n        # definition of Unix time which does not include leap seconds.\r\n    \r\n        # note: use divisor=1./self.unit, since this is either 1 or 1/86400,\r\n        # and 1/86400 is not exactly representable as a float64, so multiplying\r\n        # by that will cause rounding errors. (But inverting it as a float64\r\n        # recovers the exact number)\r\n        day, frac = day_frac(val1, val2, divisor=1. / self.unit)\r\n    \r\n        jd1 = self.epoch.jd1 + day\r\n        jd2 = self.epoch.jd2 + frac\r\n    \r\n        # Create a temporary Time object corresponding to the new (jd1, jd2) in\r\n        # the epoch scale (e.g. UTC for TimeUnix) then convert that to the\r\n        # desired time scale for this object.\r\n        #\r\n        # A known limitation is that the transform from self.epoch_scale to\r\n        # self.scale cannot involve any metadata like lat or lon.\r\n        try:\r\n            tm = getattr(Time(jd1, jd2, scale=self.epoch_scale,\r\n                              format=\'jd\'), self.scale)\r\n        except Exception as err:\r\n            raise ScaleValueError(""Cannot convert from \'{0}\' epoch scale \'{1}\'""\r\n                                  ""to specified scale \'{2}\', got error:\\n{3}""\r\n                                  .format(self.name, self.epoch_scale,\r\n>                                         self.scale, err))\r\nE           ScaleValueError: Cannot convert from \'cxcsec\' epoch scale \'tt\'to specified scale \'ut1\', got error:\r\nE           (some) times are outside of range covered by IERS table.\r\n\r\nastropy/time/formats.py:374: ScaleValueError\r\n```'"
5096,160351899,olebole,astrofrog,2016-06-15 07:02:18,2016-07-05 09:56:32,2016-07-05 09:56:28,closed,,,4,Bug;Close?;wcs,https://api.github.com/repos/astropy/astropy/issues/5096,"b'1.2RC1 test_identity fails on arm64, powerpc, ppc64, ppc64el, s390x'","b'This is an issue in the same function as #3486; however with a different output. It was hidden for a while since I had to skip wcs doctests due to #3380.\r\n```\r\n_________________ [doctest] astropy.wcs.wcs.WCS.all_world2pix __________________\r\n2102         ...   print(""Best solution:\\\\n{{0}}"".format(e.best_solution))\r\n2103         ...   print(""Achieved accuracy:\\\\n{{0}}"".format(e.accuracy))\r\n2104         Indices of diverging points: [1]\r\n2105         Indices of poorly converging points: None\r\n2106         Best solution:\r\n2107         [[  1.00000238e+00   9.99999965e-01]\r\n2108          [ -1.99441636e+06   1.44309097e+06]\r\n2109          [  3.00000236e+00   9.99999966e-01]]\r\n2110         Achieved accuracy:\r\n2111         [[  6.13968380e-05   8.59638593e-07]\r\nDifferences (unified diff with -expected +actual):\r\n    @@ -6,5 +6,5 @@\r\n      [  3.00000236e+00   9.99999966e-01]]\r\n     Achieved accuracy:\r\n    -[[  6.13968380e-05   8.59638593e-07]\r\n    +[[  6.13968380e-05   8.59638595e-07]\r\n      [  8.59526812e+11   6.61713548e+11]\r\n    - [  6.09398446e-05   8.38759724e-07]]\r\n    + [  6.09398446e-05   8.38759723e-07]]\r\n\r\nastropy/wcs/wcs.py:2111: DocTestFailure\r\n```'"
5087,159958581,nden,astrofrog,2016-06-13 14:07:15,2016-06-14 12:01:14,2016-06-14 12:01:14,closed,,v1.2.0,9,Affects-release;Bug;io.fits,https://api.github.com/repos/astropy/astropy/issues/5087,b'astropy.io.fits regression?',"b""Assigning to fits.ImageHDU.data does not work any more. Was this intentional?\r\nIt's a recent change, it showed in our regression tests a couple of days ago.\r\n\r\n```\r\nar = np.arange(34)\r\nim = fits.ImageHDU()\r\nim.data = ar\r\n---------------------------------------------------------------------------\r\nAttributeError                            Traceback (most recent call last)\r\n<ipython-input-18-8ee0b26e686a> in <module>()\r\n----> 1 im.data = ar\r\n\r\n/grp/hst/ssb/rhel6/ssbdev/python/lib/python2.7/site-packages/astropy/utils/decorators.pyc in __set__(self, obj, val)\r\n    507         obj_dict = obj.__dict__\r\n    508         if self.fset:\r\n--> 509             ret = self.fset(obj, val)\r\n    510             if ret is not None and obj_dict.get(self._key) is ret:\r\n    511                 # By returning the value set the setter signals that it took\r\n\r\n/grp/hst/ssb/rhel6/ssbdev/python/lib/python2.7/site-packages/astropy/io/fits/hdu/image.pyc in data(self, data)\r\n    252             else:\r\n    253                 self._data_replaced = True\r\n--> 254             was_unsigned = _is_pseudo_unsigned(self.__dict__['data'].dtype)\r\n    255         else:\r\n    256             self._data_replaced = True\r\n\r\nAttributeError: 'NoneType' object has no attribute 'dtype'\r\n\r\n```\r\n\r\n\r\n"""
5085,159914492,StuartLittlefair,eteq,2016-06-13 10:03:21,2016-06-15 16:10:54,2016-06-15 00:57:18,closed,,v1.2.0,4,Affects-dev;Bug;coordinates;no-changelog-entry-needed,https://api.github.com/repos/astropy/astropy/issues/5085,b'Non scalar times',b'This PR makes changes which ensure that ```coordinates.get_moon``` can handle non-scalar times when using the builtin ephemeris. This PR fixes #5069. '
5079,159831729,bsipocz,astrofrog,2016-06-12 15:04:33,2016-06-13 17:57:58,2016-06-13 17:57:58,closed,eteq,v1.2.0,10,Affects-dev;Bug;coordinates,https://api.github.com/repos/astropy/astropy/issues/5079,b'Coordinates test failures in 1.2rc1 on Ubuntu 14.04 and py3.4',"b'There are 24 of these failures, full log (including fails due to #5076) is in this gist: https://gist.github.com/bsipocz/f42af5e837a7f270e0a27a1003dda427\r\n\r\n```\r\nplatform linux -- Python 3.4.3, pytest-2.8.3, py-1.4.30, pluggy-0.3.1\r\n\r\nRunning tests with Astropy version 1.2rc1.\r\nRunning tests in /home/gkovacs/.local/lib/python3.4/site-packages/astropy.\r\n\r\nDate: 2016-06-12T15:28:54\r\n\r\nPlatform: Linux-3.16.0-71-generic-x86_64-with-Ubuntu-14.04-trusty\r\n\r\nExecutable: /usr/bin/python3\r\n\r\nFull Python Version: \r\n3.4.3 (default, Oct 14 2015, 20:28:29) \r\n[GCC 4.8.4]\r\n\r\nencodings: sys: utf-8, locale: UTF-8, filesystem: utf-8\r\nbyteorder: little\r\nfloat info: dig: 15, mant_dig: 15\r\n\r\nNumpy: 1.11.0\r\nScipy: 0.16.1\r\nMatplotlib: 1.5.0\r\nh5py: not available\r\nPandas: 0.18.0                                                                                                                                                                                                                              \r\nUsing Astropy options: remote_data\r\n```\r\n\r\n```\r\n================================================================================================================= FAILURES =================================================================================================================\r\n__________________________________________________________________________________________________________ test_spherical_offsets __________________________________________________________________________________________________________\r\n\r\n    def test_spherical_offsets():\r\n        i00 = SkyCoord(0*u.arcmin, 0*u.arcmin, frame=\'icrs\')\r\n        i01 = SkyCoord(0*u.arcmin, 1*u.arcmin, frame=\'icrs\')\r\n        i10 = SkyCoord(1*u.arcmin, 0*u.arcmin, frame=\'icrs\')\r\n        i11 = SkyCoord(1*u.arcmin, 1*u.arcmin, frame=\'icrs\')\r\n        i22 = SkyCoord(2*u.arcmin, 2*u.arcmin, frame=\'icrs\')\r\n    \r\n>       dra, ddec = i00.spherical_offsets_to(i01)\r\n\r\n/home/gkovacs/.local/lib/python3.4/site-packages/astropy/coordinates/tests/test_sky_coord.py:1193: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\n/home/gkovacs/.local/lib/python3.4/site-packages/astropy/coordinates/sky_coordinate.py:746: in spherical_offsets_to\r\n    aframe = self.skyoffset_frame()\r\n/home/gkovacs/.local/lib/python3.4/site-packages/astropy/coordinates/sky_coordinate.py:1056: in skyoffset_frame\r\n    return SkyOffsetFrame(origin=self, rotation=rotation)\r\n/home/gkovacs/.local/lib/python3.4/site-packages/astropy/coordinates/builtin_frames/skyoffset.py:199: in __new__\r\n    newcls = make_skyoffset_cls(origin_frame.__class__)\r\n/home/gkovacs/.local/lib/python3.4/site-packages/astropy/coordinates/builtin_frames/skyoffset.py:110: in make_skyoffset_cls\r\n    {\'__doc__\': SkyOffsetFrame.__doc__})\r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\n\r\ncls = <class \'astropy.coordinates.builtin_frames.skyoffset.make_skyoffset_cls.<locals>.SkyOffsetMeta\'>, name = \'SkyOffsetFrame\'\r\nbases = (<class \'astropy.coordinates.builtin_frames.skyoffset.SkyOffsetFrame\'>, <class \'astropy.coordinates.builtin_frames.icrs.ICRS\'>)\r\nmembers = {\'__doc__\': \'\\n    A frame which is relative to some specific position and oriented to match\\n    its frame.\\n\\n    Sk...at\', framename=\'dec\', defaultunit=\'recommended\')]}, \'default_representation\': <property object at 0x7f02cd6f0958>, ...}\r\n\r\n    def __new__(cls, name, bases, members):\r\n        # Only \'origin\' is needed here, to set the origin frame properly.\r\n        members[\'origin\'] = CoordinateAttribute(frame=framecls, default=None)\r\n    \r\n        # This has to be done because FrameMeta will set these attributes\r\n        # to the defaults from BaseCoordinateFrame when it creates the base\r\n        # SkyOffsetFrame class initially.\r\n        members[\'_frame_specific_representation_info\'] = framecls._frame_specific_representation_info\r\n        members[\'_default_representation\'] = framecls._default_representation\r\n    \r\n        newname = name[:-5] if name.endswith(\'Frame\') else name\r\n        newname += framecls.__name__\r\n    \r\n        res = super(SkyOffsetMeta, cls).__new__(cls, newname, bases, members)\r\n    \r\n        # now go through all the component names and make any spherical names be ""lon"" and ""lat""\r\n        # instead of e.g. ""ra"" and ""dec""\r\n    \r\n        lists_done = []\r\n        for nm, component_list in res._frame_specific_representation_info.items():\r\n            if nm in (\'spherical\', \'unitspherical\'):\r\n                gotlatlon = []\r\n                for i, comp in enumerate(component_list):\r\n                    if component_list in lists_done:\r\n                        # we need this because sometimes the component_\r\n                        # list\'s are the exact *same* object for both\r\n                        # spherical and unitspherical.  So looping then makes\r\n                        # the change *twice*.  This hack bypasses that.\r\n                        continue\r\n    \r\n                    if comp.reprname in (\'lon\', \'lat\'):\r\n                        dct = namedtuple_asdict(comp)\r\n                        # this forces the component names to be \'lat\' and\r\n                        # \'lon\' regardless of what the actual base frame\r\n                        # might use\r\n                        dct[\'framename\'] = comp.reprname\r\n>                       component_list[i] = type(comp)(**dct)\r\nE                       TypeError: __new__() missing 1 required positional argument: \'reprname\'\r\n\r\n/home/gkovacs/.local/lib/python3.4/site-packages/astropy/coordinates/builtin_frames/skyoffset.py:95: TypeError\r\n```'"
5074,159773278,astrofrog,astrofrog,2016-06-11 13:22:12,2016-06-11 14:22:48,2016-06-11 14:22:48,closed,taldcroft,v1.2.0,1,Affects-dev;Bug;Critical;utils,https://api.github.com/repos/astropy/astropy/issues/5074,b'Don\xa1\xaft skip download if iers_table is already defined (Alternative to #5072)',"b""This is a simpler alternative to #5072, and it's my preferred solution.\r\n\r\ncc @taldcroft @pllim"""
5072,159772271,astrofrog,astrofrog,2016-06-11 12:54:40,2016-06-11 15:36:04,2016-06-11 15:36:04,closed,astrofrog,v1.2.0,7,Affects-dev;Bug;Critical;utils,https://api.github.com/repos/astropy/astropy/issues/5072,b'Make sure we re-download the IERS table if the URL has changed.',"b""This is the solution to the issues reported in #5051 (took a few hours to figure out...). I'm surprised you didn't see the issue when running the tests (I don't see how they could pass before this PR).\r\n\r\nThe issue is that tests run before ``astropy.utils.iers`` cause the IERS file to be downloaded, which sets ``IERS_Auto.iers_table``. When you then later change the URL to a local file in ``test_iers.py``, it did not try and get the local file because ``cls.iers_table is not None`` and it was then using the real downloaded file instead of the local file. This also explains why the test did not fail when running just the IERS tests. With this PR, if the URL has changed, the file is retrieved again.\r\n\r\nAnother solution would be to simply not cache ``.iers_table`` and rely only on the ``download_file`` caching mechanism.\r\n\r\n@taldcroft - can you review this and let me know what you think?\r\n\r\ncc @pllim"""
5070,159717005,mhvk,mhvk,2016-06-10 20:33:00,2016-07-04 23:55:21,2016-07-04 16:36:43,closed,,v1.2.2,8,Affects-release;Bug;Refactoring;units,https://api.github.com/repos/astropy/astropy/issues/5070,"b'Quantities with specific types -> use in Angle, Distance'","b""We have two `Quantity` subclasses that are for specific physical types, `Angle` and `Distance`. These are each set up such that if operations change the unit, they loose their type. Currently, this has some loop-holes, however (which led me to label this as a bug, since it is unintended):\r\n```\r\nIn [5]: a = Angle(10., 'deg')\r\n\r\nIn [6]: a *= 'm'\r\n\r\nIn [7]: a\r\nOut[7]: <Angle 10.0 deg m>\r\n\r\nIn [8]: (10. * u.m).view(Angle)\r\nOut[8]: <Angle 10.0 m>\r\n```\r\nThe first commit in this PR closes these loopholes by ensuring that all setting of units goes through a single `_set_unit` method, which checks that a given unit is consistent with the class. It also moves common code from `Angle` and `Distance` to a new `SpecificTypeQuantity` subclass\r\n\r\nNote that I also use this to also define a `DimensionlessQuantity` class, whose main difference from other classes is that if one does `array.view(DimensionlessQuantity)` the unit will automatically be dimensionless (rather than unset). I can remove this if need be to keep this just a pure bug-fix PR.\r\n\r\nThe second commit uses the new `_set_unit` also for function quantities (magnitudes, etc.), which turns out to rather greatly simplify the code there. As part of this, it now also ensures that those can only be viewed as regular quantities if their physical dimension is dimensionless unscaled.\r\n\r\ncc @eteq (as it touches coordinates) and @astrofrog."""
5069,159714513,bmorris3,eteq,2016-06-10 20:18:04,2016-06-15 00:58:16,2016-06-15 00:57:18,closed,,,3,Affects-dev;Bug;coordinates,https://api.github.com/repos/astropy/astropy/issues/5069,b'get_moon does not support non-scalar times',"b'`get_moon` is [only tested with scalar times](https://github.com/astropy/astropy/blob/59f1ea2295a7ddde3fcee21b1158c7dcb0621f91/astropy/coordinates/tests/test_solar_system.py#L168), and fails for non-scalar times, \r\n```\r\nIn [16]: import numpy as np\r\n\r\nIn [17]: from astropy.coordinates import get_moon\r\n\r\nIn [18]: from astropy.time import Time\r\n\r\nIn [19]: import astropy.units as u\r\n\r\nIn [20]: get_moon(Time.now() + np.linspace(0, 1)*u.day)\r\n---------------------------------------------------------------------------\r\nValueError                                Traceback (most recent call last)\r\n<ipython-input-20-7d6db65d30c7> in <module>()\r\n----> 1 get_moon(Time.now() + np.linspace(0, 1)*u.day)\r\n\r\n/Users/bmmorris/anaconda/lib/python3.5/site-packages/astropy-1.2.dev15671-py3.5-macosx-10.5-x86_64.egg/astropy/coordinates/solar_system.py in get_moon(time, location, ephemeris)\r\n    376     """"""\r\n    377\r\n--> 378     return get_body(\'moon\', time, location=location, ephemeris=ephemeris)\r\n    379\r\n    380 get_moon.__doc__ += indent(_EPHEMERIS_NOTE)[4:]\r\n\r\n/Users/bmmorris/anaconda/lib/python3.5/site-packages/astropy-1.2.dev15671-py3.5-macosx-10.5-x86_64.egg/astropy/coordinates/solar_system.py in get_body(body, time, location, ephemeris)\r\n    336         location = time.location\r\n    337\r\n--> 338     cartrep = _get_apparent_body_position(body, time, ephemeris)\r\n    339     icrs = ICRS(cartrep)\r\n    340     if location is not None:\r\n\r\n/Users/bmmorris/anaconda/lib/python3.5/site-packages/astropy-1.2.dev15671-py3.5-macosx-10.5-x86_64.egg/astropy/coordinates/solar_system.py in _get_apparent_body_position(body, time, ephemeris)\r\n    283     # used.\r\n    284     if ephemeris == \'builtin\' and body.lower() == \'moon\':\r\n--> 285         return get_body_barycentric(body, time, ephemeris)\r\n    286\r\n    287     # Calculate position given approximate light travel time.\r\n\r\n/Users/bmmorris/anaconda/lib/python3.5/site-packages/astropy-1.2.dev15671-py3.5-macosx-10.5-x86_64.egg/astropy/coordinates/solar_system.py in get_body_barycentric(body, time, ephemeris)\r\n    214             cartesian_position_body = earth_pv_bary[..., 0, :]\r\n    215         elif body == \'moon\':\r\n--> 216             cartesian_position_body = calc_moon(time).cartesian.xyz.to(u.au).value\r\n    217         else:\r\n    218             sun_bary = earth_pv_bary[..., 0, :] - earth_pv_helio[..., 0, :]\r\n\r\n/Users/bmmorris/anaconda/lib/python3.5/site-packages/astropy-1.2.dev15671-py3.5-macosx-10.5-x86_64.egg/astropy/coordinates/orbital_elements.py in calc_moon(t)\r\n    245                                           equinox=t)\r\n    246\r\n--> 247     return SkyCoord(ecliptic_coo.transform_to(ICRS))\r\n\r\n/Users/bmmorris/anaconda/lib/python3.5/site-packages/astropy-1.2.dev15671-py3.5-macosx-10.5-x86_64.egg/astropy/coordinates/baseframe.py in transform_to(self, new_frame)\r\n    847             msg = \'Cannot transform from {0} to {1}\'\r\n    848             raise ConvertError(msg.format(self.__class__, new_frame.__class__))\r\n--> 849         return trans(self, new_frame)\r\n    850\r\n    851     def is_transformable_to(self, new_frame):\r\n\r\n/Users/bmmorris/anaconda/lib/python3.5/site-packages/astropy-1.2.dev15671-py3.5-macosx-10.5-x86_64.egg/astropy/coordinates/transformations.py in __call__(self, fromcoord, toframe)\r\n    913\r\n    914             curr_toframe = t.tosys(**frattrs)\r\n--> 915             curr_coord = t(curr_coord, curr_toframe)\r\n    916\r\n    917         # this is safe even in the case where self.transforms is empty, because\r\n\r\n/Users/bmmorris/anaconda/lib/python3.5/site-packages/astropy-1.2.dev15671-py3.5-macosx-10.5-x86_64.egg/astropy/coordinates/transformations.py in __call__(self, fromcoord, toframe)\r\n    704\r\n    705     def __call__(self, fromcoord, toframe):\r\n--> 706         res = self.func(fromcoord, toframe)\r\n    707         if not isinstance(res, self.tosys):\r\n    708             raise TypeError(\'the transformation function yielded {0} but \'\r\n\r\n/Users/bmmorris/anaconda/lib/python3.5/site-packages/astropy-1.2.dev15671-py3.5-macosx-10.5-x86_64.egg/astropy/coordinates/builtin_frames/ecliptic_transforms.py in geoecliptic_to_gcrs(from_coo, gcrs_frame)\r\n     42 @frame_transform_graph.transform(FunctionTransform, GeocentricTrueEcliptic, GCRS)\r\n     43 def geoecliptic_to_gcrs(from_coo, gcrs_frame):\r\n---> 44     rmat = _ecliptic_rotation_matrix(from_coo.equinox)\r\n     45     newrepr = cartrepr_from_matmul(rmat, from_coo, transpose=True)\r\n     46     gcrs = GCRS(newrepr, obstime=from_coo.equinox)\r\n\r\n/Users/bmmorris/anaconda/lib/python3.5/site-packages/astropy-1.2.dev15671-py3.5-macosx-10.5-x86_64.egg/astropy/coordinates/builtin_frames/ecliptic_transforms.py in _ecliptic_rotation_matrix(equinox)\r\n     27     rnpb = erfa.pnm06a(jd1, jd2)\r\n     28     obl = erfa.obl06(jd1, jd2)*u.radian\r\n---> 29     return np.asarray(np.dot(rotation_matrix(obl, \'x\'), rnpb))\r\n     30\r\n     31\r\n\r\n/Users/bmmorris/anaconda/lib/python3.5/site-packages/astropy-1.2.dev15671-py3.5-macosx-10.5-x86_64.egg/astropy/coordinates/angles.py in rotation_matrix(angle, axis, unit)\r\n    716         return np.matrix(((1, 0, 0),\r\n    717                           (0, c, s),\r\n--> 718                           (0, -s, c)))\r\n    719     else:\r\n    720         axis = np.asarray(axis)\r\n\r\n/Users/bmmorris/anaconda/lib/python3.5/site-packages/numpy/matrixlib/defmatrix.py in __new__(subtype, data, dtype, copy)\r\n    268\r\n    269         # now convert data to an array\r\n--> 270         arr = N.array(data, dtype=dtype, copy=copy)\r\n    271         ndim = arr.ndim\r\n    272         shape = arr.shape\r\n\r\nValueError: setting an array element with a sequence.\r\n```\r\n\r\nThis is a blocker on the astroplan switch from PyEphem to astropy solar system ephemerides (i.e. astropy/astroplan#35).\r\n\r\ncc @StuartLittlefair @eteq '"
5068,159709860,mhvk,eteq,2016-06-10 19:53:03,2016-06-12 06:26:04,2016-06-12 06:24:29,closed,,v1.2.0,4,Bug;coordinates;units,https://api.github.com/repos/astropy/astropy/issues/5068,b'Quantity latex repr change to ensure EarthLocation can be done',"b'This is a simpler alternative to #5049 which allows `EarthLocation._repr_latex_()` to work by not changing any exponentials. This mainly to avoid introducing a new representation which is different from both `Quantity` and  `CartesianRepresentation`.\r\n\r\nAs a side effect, it ensures complex numbers are now not mangled up (but exponentials are still in`e+??` form).'"
5063,159613683,embray,eteq,2016-06-10 11:18:58,2016-06-12 18:34:19,2016-06-12 05:19:32,closed,,v1.0.11,17,Affects-dev;Bug;Effort-low;Priority-Low,https://api.github.com/repos/astropy/astropy/issues/5063,b'fits convenience functions close open file objects',"b'This is actually a pretty bad bug, but I marked it ""Priority-low"" since I don\'t think it\'s come up much before.  I feel like I\'ve heard of this bug before actually, but I couldn\'t find an open ticket for it.\r\n\r\nThe issue is that the ""convenience"" functions in `astropy.io.fits` like `getheader`, `getdata`, and the like, when passed an *open* file object they close that file object when they\'re done with it.  They should not be assuming that it\'s safe for them to close the given file object (that\'s kind of the point of passing around file objects).\r\n\r\nBy contrast, when passed a filename, they open the file and then close it when they\'re done with it, correctly.  This is probably the far more common use case which is why this hasn\'t come up before.'"
5056,159535981,larrybradley,astrofrog,2016-06-10 00:16:05,2016-06-10 06:42:39,2016-06-10 06:42:38,closed,,v1.0.11,0,Bug;Docs;no-changelog-entry-needed;wcs,https://api.github.com/repos/astropy/astropy/issues/5056,b'Update non_celestial_pixel_scales docs',"b'The one-line description in the original docs was truncated after the ""e.g."" (apparently the one-liners get truncatated after "". [space]"").  See here near the bottom of the page: http://docs.astropy.org/en/stable/wcs/index.html\r\n\r\nThis PR rewords the doc.'"
5053,159521083,mwcraig,astrofrog,2016-06-09 22:16:54,2016-06-10 17:49:04,2016-06-10 17:49:04,closed,,v1.2.0,7,Affects-release;Bug;io.fits,https://api.github.com/repos/astropy/astropy/issues/5053,b'Delete scaling keywords from header when unsigned int data converted to another type',"b'Ideally this would get into 1.2 (not necessary into the RC, but before the final release). It addresses #4974 but involved a fair bit of monkeying around with the internals of scaling.\r\n\r\n@embray, if you could take a look that would be great.\r\n\r\nChangelog as soon as I find out which section to put the entry in....'"
5051,159483185,taldcroft,astrofrog,2016-06-09 19:00:17,2016-06-11 13:37:15,2016-06-10 22:35:18,closed,mhvk,v1.2.0,22,Affects-dev;Bug;no-changelog-entry-needed;utils,https://api.github.com/repos/astropy/astropy/issues/5051,b'Fix IERS test following update of IERS-B',"b'Fixes the IERS-related error in #4896.  CI is skipped here because the only change is in a test that does not get run on CI.\r\n\r\nIt seems like the IERS-B update PR(s) were merged without running --remote-data tests locally.  Maybe we need something like a ""requires --remote-data testing"" tag (""Remote testing needed""?).'"
5038,159100310,saimn,astrofrog,2016-06-08 07:49:34,2016-06-08 14:03:42,2016-06-08 11:21:44,closed,,v1.2.0,0,Affects-dev;Bug;no-changelog-entry-needed;visualization,https://api.github.com/repos/astropy/astropy/issues/5038,b'Fix zscale when the image size is smaller than nsamples',"b'When the image size is smaller than nsamples, the current code fails because it computes a stride to 0. The original code makes sure that stride is a least 1, but it seems I missed this. \r\nSo this fix should go in 1.2 ...'"
5036,159036163,MSeifert04,mhvk,2016-06-07 22:06:59,2016-06-08 15:28:09,2016-06-08 15:25:36,closed,,v1.0.10,13,Affects-release;Bug;Docs;units,https://api.github.com/repos/astropy/astropy/issues/5036,"b'duplicate unit aliases (pixel, counts, photon and voxel)'","b'I just noticed that ``astropy.units.astrophys.pix`` ([link to documentation](http://docs.astropy.org/en/latest/units/index.html#module-astropy.units.astrophys)) has two aliases, both are ``pixel``. The same for ``counts``, ``photon`` and ``voxel``.\r\n\r\nWas the original intention to accept the capitalized names?'"
5030,158408987,mhvk,eteq,2016-06-03 16:50:07,2016-06-22 01:26:31,2016-06-22 01:26:31,closed,,v1.2.1,13,Bug;units,https://api.github.com/repos/astropy/astropy/issues/5030,b'Make magnitude zero points available on demand.',"b'In #5015, @pllim noted that special magnitudes like `STmag` do not roundtrip via `Unit(STmag.to_string())`. This is because the underlying reference fluxes for magnitude 0 are not normally exposed. This PR exposes those, though they are still not enabled by default, since it is not obvious that one would pollute the namespace with, e.g., `u.ST`. But they are included by default if one defines a magnitude, and can be added to the enabled units on demand.  With this PR:\r\n```\r\nIn [1]: import astropy.units as u\r\n\r\nIn [2]: u.mag(\'ST\')  # did not work before\r\nOut[2]: Unit(""mag(ST)"")\r\n\r\nIn [3]: u.magnitude_zero_points.enable()\r\nOut[3]: <astropy.units.core._UnitContext at 0x7f4b2dd0dd30>\r\n\r\nIn [4]: u.Unit(\'mag(ST)\')  # only works with above (can be a context)\r\nOut[4]: Unit(""mag(ST)"")\r\n```'"
5024,158297771,eteq,eteq,2016-06-03 06:08:48,2016-06-08 12:18:06,2016-06-07 22:01:24,closed,,v1.0.10,6,Affects-dev;Bug;coordinates;no-changelog-entry-needed;Ready-for-final-review,https://api.github.com/repos/astropy/astropy/issues/5024,b'Restore get_sun broadcasting to fix coordinate gallery example',"b'This PR fixes #4996.  The root cause of this was #4979, which fixed some bugs in `get_sun` but also inadvertently broke broadcasting for calls to `get_sun` with array times.  This PR simply restores the previous broadcasting behavior. (@StuartLittlefair, you might want to take a quick look here and make sure you don\'t see a way to get the broadcasting to work right while still maintaining the somewhat cleaner look of #4979... but at least right now it looks to me like `keepdims` doesn\'t actually do the right broadcasting as advertised...)\r\n\r\nAt any rate, with this PR the example gallery now builds without any big red ""broken"" coming up.\r\n\r\nIt also adds two tests - one is a regression test for #4996 that basically mocks up the offending part of the example (a call to `get_sun` with a `Time` object with an array of times).  The other is a `get_sun` accuracy test that compares the built-in `get_sun` to the de432s ephemerides.  @mhvk might want to have a look, as it was his observation of that in #4920 that started the path to #4952/#4979 in the first place.\r\n\r\nNote that this needs to be backported to both 1.0.x *and* 1.2.x, as #4979 was also backported to both.'"
5021,158285631,eteq,astrofrog,2016-06-03 03:46:46,2016-06-06 22:43:09,2016-06-03 22:58:42,closed,,v1.0.10,7,Affects-release;Bug;coordinates,https://api.github.com/repos/astropy/astropy/issues/5021,b'Fix SkyCoord AttributeError when a new frame is created after a SkyCoord has been inited',"b'While working on #5002 I encountered a curious problem. If you do ``python setup.py test -P coordinates`` everything works just fine.  *But*, if you do ``python setup.py test -P coordinates --args=""-k spherical_offsets""``, you get:\r\n```\r\nE       AttributeError: \'SkyCoord\' object has no attribute \'_origin\'\r\n\r\nastropy/coordinates/sky_coordinate.py:441: AttributeError\r\n```\r\n\r\nTracking the origin (pun intended) of this problem led to realization of a problem with SkyCoord: the ``FRAME_ATTR_NAMES_SET()`` function in ``sky_coordinate.py`` is dynamic, meaning it figures out what all the possible frame attributes are when it gets run... But that dynamic list does *not* get updated on any already-created `SkyCoord` objects.  So if you create a new frame dynamically (e.g., the first time an `AstrometricFrame` gets created), it gets added to what `FRAME_ATTR_NAMES_SET()` returns, but the existing `SkyCoord`s do not have one of them. Hence the above error.\r\n\r\nThis PR addresses the problem pretty straightforwardly by just letting a SkyCoord stuck in this limbo-like state to just pass through frame attributes as None when necessary, thereby effectively ""dodging"" the problem. This also adds a regression test that should catch any similar problems that might arise in the future.\r\n\r\ncc @astrofrog @taldcroft '"
5017,158248026,mhvk,astrofrog,2016-06-02 21:51:10,2016-06-17 08:34:29,2016-06-17 08:34:29,closed,,v1.2.0,5,Bug;Ready-for-final-review;units,https://api.github.com/repos/astropy/astropy/issues/5017,b'Better interaction between function units and equivalencies',"b'An alternative solution to #5012 that ensures that magnitudes and other functional units can be converted to even if also an equivalency is needed. I think it is a better approach, being more general, but it does leave a few questions:\r\n\r\n1. Would this be better implemented by letting non-units have the ability to convert `from` a unit (rather than just `to`)? Or perhaps have a `_get_converter` staticmethod that allows one to give the units in arbitrary order.\r\n2. Would it be better to have a general ability to chain equivalencies (as is effectively done here).\r\n\r\nMy sense would be to leave these questions for the future (can raise a separate issue), and just merge this as this is simple and just extends what worked already in a logical fashion.\r\n\r\nWith this PR, the following works; @pllim - is this indeed good enough for you?\r\n```\r\nIn [2]: t = 1.*u.erg/u.s/u.cm**2/u.AA\r\n\r\nIn [3]: u.add_enabled_equivalencies(u.spectral_density(5500*u.AA))\r\nOut[3]: <astropy.units.core._UnitContext at 0x7f5caf5a3f60>\r\n\r\nIn [4]: t.to(u.ABmag)\r\nOut[4]: <Quantity -21.109761690151405 mag(AB)>\r\n```'"
5015,158230885,pllim,pllim,2016-06-02 20:22:08,2016-06-22 14:32:42,2016-06-22 14:32:30,closed,mhvk,v1.2.1,6,Bug;units,https://api.github.com/repos/astropy/astropy/issues/5015,b'STmag and ABmag cannot be initialized from string',"b'When constructing a Unit using FITS header keyword (say, `TUNITn`), it is convenient to pass in the unit name into `Unit` constructor:\r\n\r\n```python\r\n>>> from astropy import units as u\r\n>>> u.Unit(u.AA.to_string())\r\nUnit(""Angstrom"")\r\n```\r\n\r\nBut I cannot figure out how to do this with `STmag` or `ABmag`:\r\n\r\n```python\r\n>>> u.Unit(u.STmag.to_string())\r\n.../astropy/units/core.pyc in __call__(self, s, represents, format, namespace, doc, parse_strict)\r\n   1798                            .format(s, format_clause, six.text_type(e)))\r\n   1799                     if parse_strict == \'raise\':\r\n-> 1800                         raise ValueError(msg)\r\n   1801                     elif parse_strict == \'warn\':\r\n   1802                         warnings.warn(msg, UnitsWarning)\r\n\r\nValueError: \'mag(ST)\' did not parse as unit: At col 4, ST is not a valid unit.\r\nDid you mean St, YSt, ZSt, ySt or zSt?\r\n\r\n>>> u.Unit(u.ABmag.to_string())\r\n.../astropy/units/core.pyc in __call__(self, s, represents, format, namespace, doc, parse_strict)\r\n   1798                            .format(s, format_clause, six.text_type(e)))\r\n   1799                     if parse_strict == \'raise\':\r\n-> 1800                         raise ValueError(msg)\r\n   1801                     elif parse_strict == \'warn\':\r\n   1802                         warnings.warn(msg, UnitsWarning)\r\n\r\nValueError: \'mag(AB)\' did not parse as unit: At col 4, AB is not a valid unit.\r\nDid you mean aB, aWb, ab, daB or dab?\r\n```\r\n\r\n@mhvk , any idea?'"
5010,158145265,taldcroft,mhvk,2016-06-02 13:49:09,2016-06-02 17:19:20,2016-06-02 17:19:15,closed,hamogu,v1.0.10,6,Affects-release;Bug;io.ascii,https://api.github.com/repos/astropy/astropy/issues/5010,b'Fix problem reading a zero-length ECSV table with a bool type column',b'Fixes #5009.'
5009,158103739,samverstocken,mhvk,2016-06-02 10:03:37,2016-06-02 17:19:15,2016-06-02 17:19:15,closed,taldcroft,,2,Bug;io.ascii,https://api.github.com/repos/astropy/astropy/issues/5009,b'Error opening ECSV table with empty boolean column',"b'Hi,\r\n\r\nI am experiencing an annoying bug with the Table class.\r\nWhen I save an empty Table with an arbitrary number of columns, where at least one column is of boolean type, with the ascii.ecsv format, re-opening this table will result in the following error: ""ValueError: Column column_name failed to convert"".\r\nThis does not happen if there is no column of type \'bool\'.'"
5001,157850859,cdeil,mhvk,2016-06-01 08:31:50,2016-06-02 17:30:28,2016-06-02 17:30:28,closed,mhvk,v1.3.0,7,Affects-dev;Bug;no-changelog-entry-needed;units,https://api.github.com/repos/astropy/astropy/issues/5001,b'Angle hms construct UnitsError',"b'This way to create an Angle used to work with Astropy 1.1 (taking the tuple to mean hms format) but now errors with Astropy 1.2.dev15520 :\r\n```python\r\n>>> from astropy.coordinates import Angle\r\n>>> angle = Angle((1, 2, 3), unit=\'hour\')\r\nTraceback (most recent call last):\r\n  File ""<stdin>"", line 1, in <module>\r\n  File ""/Users/deil/code/astropy/astropy/coordinates/angles.py"", line 94, in __new__\r\n    angle = cls._tuple_to_float(angle, unit)\r\n  File ""/Users/deil/code/astropy/astropy/coordinates/angles.py"", line 141, in _tuple_to_float\r\n    .format(angle, unit))\r\nastropy.units.core.UnitsError: Can not parse \'(1, 2, 3)\' as unit \'hour\'\r\n```\r\nThese work with the dev version:\r\n```python\r\n>>> Angle((1, 2, 3), unit=\'hourangle\')\r\n<Angle 1.0341666666666667 hourangle>\r\n>>> Angle(\'1 2 3 hour\')\r\n<Angle 1.0341666666666667 hourangle>\r\n>>> Angle((1, 2, 3), unit=\'deg\')\r\n<Angle 1.0341666666666667 deg>\r\n```\r\n\r\nLooks like all of those treat the tuple as dms:\r\n```\r\n>>> 1 + 2/60 + 3/60/60\r\n1.0341666666666667\r\n```\r\nAccording to the Angle docs, it\'s possible to create from an hms tuple (although it isn\'t said what unit one should pass to do that):\r\nhttp://astropy.readthedocs.io/en/latest/api/astropy.coordinates.Angle.html#astropy.coordinates.Angle\r\n\r\nAssuming dms for unit=\'hourangle\'` or \'hour\' in the unit string is a bug, no?\r\n\r\nI didn\'t check if this was introduced in #4970 or where the change in behaviour originated.\r\n\r\ncc @mhvk @eteq'"
4991,157544489,mhvk,mhvk,2016-05-30 18:50:39,2016-05-31 13:44:44,2016-05-31 13:42:47,closed,,v1.2.0,5,Bug;coordinates;time;utils,https://api.github.com/repos/astropy/astropy/issues/4991,"b'Re-update IERS B, to be sure it is the correct file.'","b'It seems I did something wrong with #4933 (or there was something wrong with the files at that time), since the latest IERS B seems inconsistent with what I uploaded at the time from 19 May 2015 onwards. For this one, I checked that the various links we found give the same result:\r\nhttp://hpiers.obspm.fr/iers/eop/eopc04/eopc04_IAU2000.62-now\r\nhttp://datacenter.iers.org/eop/-/somos/5Rgv/latest/214'"
4986,157220179,StuartLittlefair,eteq,2016-05-27 14:33:43,2016-06-07 22:10:08,2016-06-07 21:55:30,closed,eteq,v1.2.0,8,Affects-release;Bug;coordinates,https://api.github.com/repos/astropy/astropy/issues/4986,b'Make GCRS transforms actually do something for GCRS frames with different ```obsgeoloc```',"b'This PR fixes #4964, which can be closed once this is merged.\r\n\r\nPreviously the GCRS self-transform did nothing if two GRCS frames had different ```obsgeoloc``` attributes. As a consequence, transforms to ```GeocentricTrueEcliptic```, and ```CIRS``` were only correct for geocentric observers. Since this is a parallax effect it is only significant for coordinates near Earth.'"
4979,156856410,eteq,mhvk,2016-05-25 21:38:02,2016-06-03 04:42:22,2016-05-26 00:18:06,closed,,v1.0.10,3,Affects-release;Bug;coordinates,https://api.github.com/repos/astropy/astropy/issues/4979,b'First part of fix to get_sun',"b'As discussed in much more detail in #4952, it turns out there are two slightly different changes that need to be made to `get_sun` - one that is clearly a fix, and another which may lead to some behavior change.\r\n\r\nThis issue fixes the first part, and hence should be backported to 1.0.x.  The second part will be in #4952, and should only go into 1.2.x.\r\n\r\nThis should be set to go if the tests pass, as it was already reviewed in #4952 (although @mhvk and/or @StuartLittlefair might want to have a quick look)'"
4977,156842591,pllim,astrofrog,2016-05-25 20:27:11,2016-06-10 13:20:01,2016-06-10 11:53:49,closed,,v1.0.11,9,Affects-release;Bug;io.fits,https://api.github.com/repos/astropy/astropy/issues/4977,b'Catch TypeError during FITS_rec deletion',"b'Fixes #4912 as per [this comment](https://github.com/astropy/astropy/issues/4912#issuecomment-221191001) by @embray. I was at a stage where I could reproduce the problem consistently (running `test_spectrum.py` for spacetelescope/stsynphot_refactor#16. I find that this makes those pesky messages disappear at least for my case.\r\n\r\n@weaverba137, can you please give this a spin?\r\n\r\nSee also: #4690, #4694, #4948'"
4974,156616361,mwcraig,astrofrog,2016-05-24 21:42:25,2016-06-10 17:49:16,2016-06-10 17:49:16,closed,,,0,Bug;io.fits,https://api.github.com/repos/astropy/astropy/issues/4974,b'io.fits writes incorrect data values in some cases if original image was uint16',"b""The following sequence of actions results in a FITS file in which the data values are arguably incorrect, and in which reading the file with `io.fits` definitely produces incorrect values.\r\n\r\nI didn't set a milestone but would argue this should be fixed for 1.2.\r\n\r\nI believe it is due to the changes in https://github.com/astropy/astropy/pull/3916 (see the comments for some discussion that happened at the time).\r\n\r\nCode to reproduce is below, but conceptually:\r\n\r\n1. Read in a FITS file that has unsigned int16 data in it. After the read the dtype of the data is `uint16`, `BITPIX=16` and `BZERO=32768`. \r\n2. Do something that converts the data to a float (e.g. multiply by `1.0`). After this operation, `BITPIX=-64` but also `BZERO=32768`. **This is the key error, I think.** \r\n3. Write the data to a new fits file. The correct value is written for each pixel, and the value of `BZERO` is written to the header of the fits file.  \r\n4. That new fits file, when reopened in astropy or in the couple of other programs I tried, has data value 32768 bigger than the original data because it (sensibly) follows the instructions in the FITS header, adding BZERO to each value.\r\n\r\nTo reproduce (ipython session, plain code is the block following):\r\n\r\n```python\r\nIn [1]: from astropy.io import fits\r\nIn [2]: import numpy as np\r\nIn [3]: # make a FITS file and save it, all data values are 1\r\nIn [4]: fake_hdu = fits.PrimaryHDU(data=np.ones((100, 100), dtype='uint16'))\r\nIn [5]: fake_hdu.writeto('fake_uint16.fits')\r\nIn [6]: f = fits.open('fake_uint16.fits')   # Open the fits file we made\r\nIn [7]: print(f[0].header['bitpix'], f[0].header['bzero'])\r\n16 32768\r\nIn [8]: assert (f[0].data == 1).all()       # Is the data still 1?\r\nIn [9]: f[0].data = f[0].data * 1.0         # Make the data floating point\r\nIn [10]: assert (f[0].data == 1).all()       # Is the data still 1?\r\nIn [11]: print(f[0].header['bitpix'], f[0].header['bzero'])\r\n-64 32768\r\nIn [12]: # ^^^^^^^^^^ bad!  ^^^^^^^^^^^^^\r\nIn [13]: f.writeto('fake_bad.fits')          # Write data out...maybe it will round trip.\r\nIn [14]: bad = fits.open('fake_bad.fits')\r\nIn [15]: assert (bad[0].data == 1).all()     # Is the data still 1?\r\n---------------------------------------------------------------------------\r\nAssertionError                            Traceback (most recent call last)\r\n<ipython-input-15-14ad38116ad0> in <module>()\r\n----> 1 assert (bad[0].data == 1).all()     # Is the data still 1?\r\n\r\nAssertionError:\r\nIn [16]: # No, it is not...\r\nIn [17]: # Check header...\r\nIn [18]: print(bad[0].header['bitpix'], 'bzero' in bad[0].header)\r\n-64 False\r\nIn [19]: assert(bad[0].data == 32768 + 1).all()  # Data is BZERO + 1\r\n\r\n```\r\n\r\nPlain code for reproducing:\r\n```python\r\nfrom astropy.io import fits\r\nimport numpy as np\r\n# make a FITS file and save it, all data values are 1\r\nfake_hdu = fits.PrimaryHDU(data=np.ones((100, 100), dtype='uint16'))\r\nfake_hdu.writeto('fake_uint16.fits')\r\nf = fits.open('fake_uint16.fits')   # Open the fits file we made\r\nprint(f[0].header['bitpix'], f[0].header['bzero'])\r\nassert (f[0].data == 1).all()       # Is the data still 1?\r\nf[0].data = f[0].data * 1.0         # Make the data floating point\r\nassert (f[0].data == 1).all()       # Is the data still 1?\r\nprint(f[0].header['bitpix'], f[0].header['bzero'])\r\n# ^^^^^^^^^^ bad!  ^^^^^^^^^^^^^\r\nf.writeto('fake_bad.fits')          # Write data out...maybe it will round trip.\r\nbad = fits.open('fake_bad.fits')\r\nassert (bad[0].data == 1).all()     # Is the data still 1?\r\n# No, it is not...\r\n# Check header...\r\nprint(bad[0].header['bitpix'], 'bzero' in bad[0].header)\r\nassert(bad[0].data == 32768 + 1).all()  # Data is BZERO + 1\r\n```\r\n\r\n"""
4964,156006837,StuartLittlefair,eteq,2016-05-20 16:54:57,2016-06-07 21:55:30,2016-06-07 21:55:30,closed,,,0,Bug;coordinates,https://api.github.com/repos/astropy/astropy/issues/4964,b'Transforms into and out of GCRS are not properly handling non-geocentric observers',"b'The transformations from the ```GCRS``` frame to the ```GeocentricTrueEcliptic```, and ```CIRS```  frames do not properly account for the cases where the ```obsgeoloc``` property of the ```GCRS``` frame is non-zero. This also affects the self-transformation between ```GCRS``` frames. It is only an issue for nearby objects.\r\n\r\nAn example of this is to transform two measurements of the lunar position into the ```CIRS``` frame. First we create two ```GCRS``` coordinates pointing towards the Moon:\r\n\r\n```python\r\nIn [1]: t = Time(""2014-06-25T00:00"")\r\n\r\nIn [2]: lapalma = coord.EarthLocation.of_site(\'lap alma\')\r\n\r\nIn [3]: moon = coord.get_moon(t)\r\n\r\nIn [4]: moon_withloc = coord.get_moon(t, lapalma)\r\n```\r\n\r\nThen we transform them to the same CIRS coordinate:\r\n\r\n```python\r\nIn [5]: moon.transform_to(coord.CIRS(obstime=t))\r\nOut[5]: \r\n<SkyCoord (CIRS: obstime=2014-06-25T00:00:00.000): (ra, dec, distance) in (deg, deg, km)\r\n    (65.31190968, 18.19485652, 394613.64467457)>\r\n\r\nIn [6]: moon_withloc.transform_to(coord.CIRS(obstime=t))\r\nOut[6]: \r\n<SkyCoord (CIRS: obstime=2014-06-25T00:00:00.000): (ra, dec, distance) in (deg, deg, km)\r\n    (65.45350828, 17.53097523, 398930.93837105)>\r\n```\r\nThe two outputs should be the same, but they are not. I believe that it is parallax and ```obsgeoloc``` that\'s causing the problems because the transform to ```ICRS``` *does* take account of this, and transforming to ```ICRS``` first fixes the problem:\r\n\r\n ```python\r\nIn [7]: moon.transform_to(coord.ICRS).transform_to(coord.CIRS(obstime=t))\r\nOut[7]: \r\n<SkyCoord (CIRS: obstime=2014-06-25T00:00:00.000): (ra, dec, distance) in (deg, deg, km)\r\n    (65.31190968, 18.19485652, 394613.64467454)>\r\n\r\nIn [8]: moon_withloc.transform_to(coord.ICRS).transform_to(coord.CIRS(obstime=t))\r\nOut[8]: \r\n<SkyCoord (CIRS: obstime=2014-06-25T00:00:00.000): (ra, dec, distance) in (deg, deg, km)\r\n    (65.31190968, 18.19485652, 394613.64467454)>\r\n```\r\n\r\nI believe this can be fixed by making these transforms correctly shift the GCRS to the geocenter before applying the rotations to ```CIRS``` or ```GeocentricTrueEcliptic``` frames. The best way of doing this maybe to fix the ```GCRS``` self transformation and then transform the input ```GCRS``` coordinate to a true geocentric frame before transformation to another frame. \r\n\r\nThis issue is to remind me to put a fix in place.  \r\n\r\n\r\n'"
4962,155963230,keflavich,astrofrog,2016-05-20 13:28:39,2016-06-03 18:26:52,2016-06-03 18:26:52,closed,,v1.2.0,2,Bug;wcs,https://api.github.com/repos/astropy/astropy/issues/4962,b'Do not allow WCSes to be reverse-indexed',"b'Addresses https://github.com/astropy/astropy/issues/4529\r\n\r\nIt would be nice to have access to this sort of functionality, but it requires having access to NAXIS to compute correctly (see https://github.com/astropy/astropy/issues/4669).'"
4957,155822940,amaurea,eteq,2016-05-19 20:05:30,2016-06-03 00:44:18,2016-06-03 00:44:18,closed,,,2,Bug;wcs,https://api.github.com/repos/astropy/astropy/issues/4957,b'wcs bounds_check broken if called before the first wcs transformation',"b'If `wcs.bounds_check` is called before the first coordinate transformation, regardless of its arguments, the output of the following transformations will be `NaN`. Performing a single transformation before calling it avoids the problem, and results in correct behavior. The example below illustrates this. Uncomment the commented line to go from broken to correct behavior:\r\n\r\n    from astropy.wcs import WCS\r\n    wcs = WCS(naxis=2)\r\n    wcs.wcs.ctype = [""RA---CAR"",""DEC--CAR""]\r\n    wcs.wcs.cdelt = [10,10]\r\n    wcs.wcs.crval = [-90,90]\r\n    wcs.wcs.crpix = [10,1]\r\n\r\n    #wcs.wcs_pix2world(0,0,0)\r\n    wcs.wcs.bounds_check(False, False)\r\n\r\n    for i in range(40):\r\n            x, y = i, 0\r\n            ra, dec = wcs.wcs_pix2world(x,y,0)\r\n            print ""%2d %8.3f %8.3f %8.3f %8.3f"" % (i, x, y, ra, dec)\r\n\r\nWith the first `wcs_pix2world` in place, this should print `NaN` for every output coordinate. After uncommenting, every line should be valid.\r\n\r\nI guess that wcslib is not properly initialized before the first coordinate transformation is performed.'"
4954,155712062,astrofrog,mhvk,2016-05-19 11:13:53,2016-05-20 15:23:15,2016-05-20 15:23:15,closed,,,2,Affects-dev;Bug;stats;Upstream Fix Required,https://api.github.com/repos/astropy/astropy/issues/4954,b'stats.lombscargle failures with Numpy-dev',"b'Some of the tests for the ``stats.lombscargle`` sub-package are failing with the latest developer version of Numpy, e.g.:\r\n\r\n```\r\n____________________________________________________________________________ test_all_methods[psd-True-False-True-True-chi2] _____________________________________________________________________________\r\n\r\ndata = (array([ 10.97627008,  14.30378733,  12.05526752,  10.89766366,\r\n         8.47309599,  12.91788226,   8.75174423,  17.8...84375,  0.68619301,  1.44437239,  1.2395508 ,\r\n        0.99045881,  0.72741463,  0.75435648,  0.55802916,  0.93441663]))\r\nmethod = \'chi2\', center_data = True, fit_mean = True, with_errors = False, with_units = True, normalization = \'psd\'\r\n\r\n    @pytest.mark.parametrize(\'method\', ALL_METHODS_NO_AUTO)\r\n    @pytest.mark.parametrize(\'center_data\', [True, False])\r\n    @pytest.mark.parametrize(\'fit_mean\', [True, False])\r\n    @pytest.mark.parametrize(\'with_errors\', [True, False])\r\n    @pytest.mark.parametrize(\'with_units\', [True, False])\r\n    @pytest.mark.parametrize(\'normalization\', NORMALIZATIONS)\r\n    def test_all_methods(data, method, center_data, fit_mean,\r\n                         with_errors, with_units, normalization):\r\n        if method == \'scipy\' and (fit_mean or with_errors):\r\n            return\r\n    \r\n        t, y, dy = data\r\n        frequency = 0.8 + 0.01 * np.arange(40)\r\n        if with_units:\r\n            t = t * units.day\r\n            y = y * units.mag\r\n            dy = dy * units.mag\r\n            frequency = frequency / t.unit\r\n        if not with_errors:\r\n            dy = None\r\n    \r\n        kwds = dict(normalization=normalization)\r\n        ls = LombScargle(t, y, dy, center_data=center_data, fit_mean=fit_mean)\r\n        P_expected = ls.power(frequency, **kwds)\r\n    \r\n        # don\'t use the fft approximation here; we\'ll test this elsewhere\r\n        if method in FAST_METHODS:\r\n            kwds[\'method_kwds\'] = dict(use_fft=False)\r\n        P_method = ls.power(frequency, method=method, **kwds)\r\n    \r\n        if with_units:\r\n            if normalization == \'psd\' and not with_errors:\r\n                assert P_method.unit == y.unit ** 2\r\n            else:\r\n                assert P_method.unit == units.dimensionless_unscaled\r\n        else:\r\n            assert not hasattr(P_method, \'unit\')\r\n    \r\n>       assert_quantity_allclose(P_expected, P_method)\r\n\r\nastropy/stats/lombscargle/tests/test_lombscargle.py:67: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\nastropy/tests/helper.py:480: in assert_quantity_allclose\r\n    **kwargs)\r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\n\r\nx_id = array([False, False, False, False, False, False, False, False, False,\r\n       False, False, False, False, False, False,...,\r\n       False, False, False, False, False, False, False, False, False,\r\n       False, False, False, False], dtype=bool)\r\ny_id = array([ True,  True,  True,  True,  True,  True,  True,  True,  True,\r\n        True,  True,  True,  True,  True,  True,...,\r\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\r\n        True,  True,  True,  True], dtype=bool)\r\nhasval = \'+inf\'\r\n\r\n    def chk_same_position(x_id, y_id, hasval=\'nan\'):\r\n        """"""Handling nan/inf: check that x and y have the nan/inf at the same\r\n            locations.""""""\r\n        try:\r\n            assert_array_equal(x_id, y_id)\r\n        except AssertionError:\r\n            msg = build_err_msg([x, y],\r\n                                err_msg + \'\\nx and y %s location mismatch:\'\r\n                                % (hasval), verbose=verbose, header=header,\r\n                                names=(\'x\', \'y\'), precision=precision)\r\n>           raise AssertionError(msg)\r\nE           AssertionError: \r\nE           Not equal to tolerance rtol=1e-07, atol=0\r\nE           \r\nE           x and y +inf location mismatch:\r\nE            x: array([  5.379997e-01,   9.984607e-01,   2.911666e+00,   3.905607e+00,\r\nE                    2.454666e+00,   2.022995e-01,   1.302772e+00,   6.637232e+00,\r\nE                    1.201750e+01,   1.447837e+01,   1.600839e+01,   1.972033e+01,...\r\nE            y: array([ inf,  inf,  inf,  inf,  inf,  inf,  inf,  inf,  inf,  inf,  inf,\r\nE                   inf,  inf,  inf,  inf,  inf,  inf,  inf,  inf,  inf,  inf,  inf,\r\nE                   inf,  inf,  inf,  inf,  inf,  inf,  inf,  inf,  inf,  inf,  inf,\r\nE                   inf,  inf,  inf,  inf,  inf,  inf,  inf])\r\n\r\n/Users/tom/miniconda3/envs/dev35/lib/python3.5/site-packages/numpy-1.12.0.dev0+cd96464-py3.5-macosx-10.5-x86_64.egg/numpy/testing/utils.py:677: AssertionError\r\n```\r\n\r\n@jakevdp - do you have time to investigate this?'"
4952,155670039,StuartLittlefair,eteq,2016-05-19 07:24:17,2016-06-03 04:41:35,2016-05-26 15:13:03,closed,,v1.2.0,39,Affects-release;Bug;coordinates,https://api.github.com/repos/astropy/astropy/issues/4952,b'fixed bugs in get_sun',"b""@mhvk spotted a discrepancy between the coordinates reported by ```get_sun``` and the JPL ephemerides in #4920.\r\n\r\nThis discrepancy is predominantly caused by using the incorrect units for velocity in the call to ```erfa.ab```. In addition, the velocity had an incorrect sign and should have been the barycentric, not heliocentric velocity. \r\n\r\nThe routine now returns positions accurate to ~0.15 arcsec and 100 km compared to the JPL ephemerides, over the time range CE 1950 to 2050.\r\n\r\nOne problem I haven't been able to understand is that these changes cause the tests to fail at [this function](https://github.com/astropy/astropy/blob/master/astropy/coordinates/tests/test_intermediate_transformations.py#L326). \r\n\r\nI think the failure is something to do with the GCRS-ICRS transforms. For other bodies, the roundtrip GCRS-ICRS-GCRS ends back where it started. For the Sun it does not; however I'm not sure why. This test is now failing because the position returned by ```get_sun``` is now close enough to the Sun to fall foul of this."""
4950,155642213,jakevdp,mhvk,2016-05-19 02:32:55,2016-05-20 19:09:54,2016-05-20 19:09:54,closed,,v1.2.0,25,Affects-dev;Bug;stats,https://api.github.com/repos/astropy/astropy/issues/4950,b'BUG: fix integer roundoff corner case in Lomb-Scargle',b'EDIT: Fixes #4954'
4948,155597200,pllim,mhvk,2016-05-18 20:44:53,2016-06-10 13:09:52,2016-05-19 00:23:07,closed,,v1.0.11,4,Affects-release;Bug;io.fits;Priority-High,https://api.github.com/repos/astropy/astropy/issues/4948,"b""Removed raising of AssertionError from 'io.fits.fitsrec.__del__' (rebased version of #4694)""","b'Fixes #4690 \r\n\r\nCloses #4694 \r\n\r\n@astrofrog , this is a rebased version of #4694 for the release. I found that I needed this for my project, so might as well...'"
4946,155553081,pllim,taldcroft,2016-05-18 17:00:49,2016-05-25 15:38:16,2016-05-23 14:31:28,closed,taldcroft,v1.0.10,13,Affects-release;Bug;Python2;table,https://api.github.com/repos/astropy/astropy/issues/4946,b'Table pprint() to handle unicode in Python 2',"b""This fixes #4944. That is, `pprint()` now handles unicode in Python 2 properly. Also expanded test to include special character and rearranged Python 2/3 logic to handle Python 4.\r\n\r\np.s. I optimistically milestoned this to 1.2. Feel free to remove milestone if it is not possible.\r\n\r\np.p.s. My Emacs also automatically removed trailing whitespace.\r\n\r\nExample use case:\r\n```python\r\nIn [1]: from astropy.table import Table, Column\r\n\r\nIn [2]: tab = Table()\r\n\r\nIn [3]: tab.add_column(Column(data=['blah','blh'], name='ok'))\r\n\r\nIn [4]: tab.pprint()\r\n ok \r\n----\r\nblah\r\nblh\r\n```"""
4944,155435022,keflavich,taldcroft,2016-05-18 07:36:40,2016-05-23 14:31:28,2016-05-23 14:31:28,closed,,,3,Bug;io.votable;Python2;table,https://api.github.com/repos/astropy/astropy/issues/4944,"b""astropy tables containing unicode characters don't print in 2.7 (sometimes)""","b""Astropy tables containing unicode sometimes fail to print with UnicodeDecodeErrors.  An example is in this issue: https://github.com/astropy/astroquery/issues/689\r\n\r\nHowever, I can't reproduce this with a simple MWE:\r\n\r\n```\r\n# in py3:\r\nT = Table()\r\nT.add_column(table.Column(data=['blah','blh'], name='ok'))\r\nT.write('blah2.xml', format='votable') # votables seem to be the only format that support unicode?\r\n```\r\n\r\nthen:\r\n```\r\n# in py2:\r\nIn [1]: from astropy.table import Table\r\n\r\nIn [2]: T = Table.read('blah2.xml')\r\n\r\nIn [3]: T\r\nOut[3]:\r\n<Table masked=True length=2>\r\n   ok\r\nunicode4\r\n--------\r\n    blah\r\n    blh\r\n```\r\n\r\nIt looks like maybe there is a type mismatch between the dtype and the data in the astroquery column.  I haven't tracked this down fully yet, but I suspect it is a bug in the votable parser?  Or worse, yet another incorrectly specified votable... but might it be possible to automatically detect unicode in a votable column to prevent this sort of issue?"""
4933,155100313,mhvk,mhvk,2016-05-16 19:16:53,2016-05-18 20:02:40,2016-05-17 23:15:29,closed,,v1.2.0,13,Affects-dev;Bug;coordinates;time;utils,https://api.github.com/repos/astropy/astropy/issues/4933,b'Update IERS B',"b""This is partially to ensure that when we test using recent times, we don't automatically download IERS A, but also just to make sure we have recent final values in 1.2 (pending auto-download of IERS B)."""
4930,155011520,taldcroft,taldcroft,2016-05-16 11:30:56,2016-05-17 18:05:21,2016-05-16 13:01:26,closed,taldcroft,v1.2.0,2,Affects-release;Bug;Ready-for-final-review;table,https://api.github.com/repos/astropy/astropy/issues/4930,b'Make Table inherit primary_key attribute from its parent Table.',b'This is just a rebased version of #4711.\r\n\r\nCloses #4711.\r\nFixes #4672.\r\n'
4929,155010055,StuartLittlefair,eteq,2016-05-16 11:20:39,2016-05-18 19:59:55,2016-05-18 19:57:56,closed,,v1.2.0,9,Affects-dev;Bug;coordinates;no-changelog-entry-needed,https://api.github.com/repos/astropy/astropy/issues/4929,b'added transforms between HCRS and ICRS frames',"b'This PR addresses #4922 by adding transforms between the HCRS and ICRS frames in both directions, and adding tests to check that these frames work correctly for the case of the Sun, where the HCRS coordinates should always be 0!'"
4922,154931014,mhvk,mhvk,2016-05-15 21:21:00,2016-05-22 18:02:07,2016-05-22 18:02:07,closed,,,3,Bug;coordinates,https://api.github.com/repos/astropy/astropy/issues/4922,b'HRCS cannot be converted to other coordinate systems',"b'While looking into heliocentric coordinates in the context of the `plan94` work (#4920), I thought I would try initializing `HRCS` coordinates, but it seems those cannot be tranformed into any other frame: only grcs -> hcrs is defined, not the reverse. Is this intentional?\r\n'"
4915,154869795,eteq,eteq,2016-05-14 18:55:10,2016-05-17 20:15:07,2016-05-16 02:09:10,closed,,v1.2.0,7,Bug;Critical;no-changelog-entry-needed,https://api.github.com/repos/astropy/astropy/issues/4915,b'Fix RTD build',"b""The initial impetus for this was to fix ReadTheDocs, which was broken some time in the freature freeze flurry yesterday.  The root cause is that the docs now require `sphinx-gallery` (and possibly `jplephem`), both of which are not on conda (which is used by RTD in our current setup to install dependencies).  \r\n\r\nThey *are* on pip, so this PR tries to solve the problem by ressurrecting the pip requirements file and using that *in addition to* the conda requirements.  The problem is... it doesn't seem to work.  If you check out [this build report](https://readthedocs.org/projects/eteq-astropy/builds/4002312/), you'll see that it's still refusing to use the pip requirements file, despite it being added to the RTD YAML file.  I think it was @astrofrog that first set this up, right?  Any ideas on how to fix this?\r\n\r\nAnother possible solution is to just put sphinx-gallery (and jplephem if needed) on the astropy conda channel.  Then the pip stuff is no longer necessary.  @mwcraig or @bsipocz, any thoughts on that?"""
4910,154847672,taldcroft,taldcroft,2016-05-14 11:02:24,2016-05-17 18:07:24,2016-05-15 10:37:27,closed,taldcroft,v1.2.0,1,Affects-release;Bug;Enhancement;io.ascii;Ready-for-final-review,https://api.github.com/repos/astropy/astropy/issues/4910,b'Ascii sextractor parse',b'This is a squashed / fixed version of #4603 which merged master and had the wrong astropy-helpers.\r\n\r\nCloses #4603.'
4907,154833333,jakevdp,mhvk,2016-05-14 04:18:00,2016-05-17 20:15:19,2016-05-15 15:03:20,closed,,v1.2.0,15,Affects-dev;Bug;build;stats;Windows,https://api.github.com/repos/astropy/astropy/issues/4907,b'update integer type in cython lombscargle to prevent compiler warnings',b'Responding to #4904'
4894,154721529,StuartLittlefair,StuartLittlefair,2016-05-13 14:14:30,2016-05-17 18:15:32,2016-05-13 20:55:35,closed,,,12,Bug;coordinates;invalid,https://api.github.com/repos/astropy/astropy/issues/4894,b'Fix gcrs transforms for non geocentric frames',"b'There was a bug when transforming to and from GCRS frames with non-geocentric coordinates (i.e those with non-zero values of ```obsgeoloc``` and ```obsgeovel```. This is because the ```erfa``` routine ```apcs13``` expects a position and velocity in GCRS coordinates.\r\n\r\nPreviously  ```obsgeoloc``` and ```obsgeovel``` were being passed naively, but these are defined in ITRS coordinates. I have added a helper routine ```get_gcrs_posvel``` to ```icrs_cirs_transforms``` to compute the proper pv array to supply to ```apcs13```.'"
4867,154312389,lauralwatkins,taldcroft,2016-05-11 18:36:22,2016-05-25 18:31:32,2016-05-25 18:31:32,closed,,,3,Bug;table,https://api.github.com/repos/astropy/astropy/issues/4867,b'QTable has problems reading in ipac format when a file has both units and strings',"b'I\'m having a problem where I cannot read in an ipac-formatted file as a QTable when at least one column contains strings and at least one column has a unit.\r\n\r\nFor example...\r\n\r\nLet\'s create a QTable with a column of strings and a column with a unit:\r\n```python\r\nfoo = table.QTable()\r\nfoo[""name""] = [""thing1"", ""thing2"", ""thing3""]\r\nfoo[""mass""] = np.random.rand(3)*u.Msun\r\nfoo.write(""myfile.dat"", format=""ascii.ipac"")\r\n```\r\n\r\nThis creates a file that looks like this:\r\n```\r\n|  name|          mass|\r\n|  char|        double|\r\n|      |       solMass|\r\n|  null|          null|\r\n thing1 0.667003071472 \r\n thing2 0.474236083016 \r\n thing3 0.778330921581 \r\n```\r\n\r\nNow let\'s read the file in again:\r\n```python\r\nbar = table.QTable.read(""myfile.dat"", format=""ascii"")\r\n```\r\n\r\nAnd enjoy the error message:\r\n```\r\n---------------------------------------------------------------------------\r\nTypeError                                 Traceback (most recent call last)\r\n<ipython-input-15-9a2bb1608e08> in <module>()\r\n----> 1 bar = table.QTable.read(""myfile.dat"", format=""ascii"")\r\n\r\n~/Library/Python/2.7/lib/python/site-packages/astropy/table/table.pyc in read(cls, *args, **kwargs)\r\n   2259         passed through to the underlying data reader (e.g. `~astropy.io.ascii.read`).\r\n   2260         """"""\r\n-> 2261         return io_registry.read(cls, *args, **kwargs)\r\n   2262 \r\n   2263     def write(self, *args, **kwargs):\r\n\r\n~/Library/Python/2.7/lib/python/site-packages/astropy/io/registry.pyc in read(cls, *args, **kwargs)\r\n    353                 except:\r\n    354                     raise TypeError(\'could not convert reader output to {0} class\'\r\n--> 355                                     .format(cls.__name__))\r\n    356             else:\r\n    357                 raise TypeError(""reader should return a {0} instance"".format(cls.__name__))\r\n\r\nTypeError: could not convert reader output to QTable class\r\n```'"
4852,153562169,MSeifert04,mhvk,2016-05-07 00:27:58,2016-05-08 17:34:36,2016-05-08 15:35:34,closed,mhvk,v1.2.0,3,Affects-dev;Bug;Docs,https://api.github.com/repos/astropy/astropy/issues/4852,"b'Getting rid of ""unknown section \'Note\'"" in sphinx builds'","b'In current sphinx builds there is a Warning:\r\n\r\n```\r\nreading sources... [ 48%] api/astropy.stats.circvar\r\n\r\n/home/travis/build/astropy/astropy/astropy_helpers/astropy_helpers/sphinx/ext/docscrape.py:120: UserWarning: Unknown section Note\r\n\r\n  warn(""Unknown section %s"" % key)\r\n```\r\n\r\nthis PR renames the section title to ``Notes`` to avoid this Warning.\r\n\r\nAlso the ``Notes`` section should now be visible in the [documentation](http://astropy.readthedocs.io/en/latest/api/astropy.stats.circvar.html#astropy.stats.circvar)'"
4822,152018047,astrofrog,mhvk,2016-04-30 08:36:04,2016-05-12 18:57:26,2016-05-02 18:19:44,closed,mhvk,v1.0.10,8,Affects-release;Bug;Python3;testing,https://api.github.com/repos/astropy/astropy/issues/4822,b'Fix paths in .coverage file in Python 3',"b'Fixes paths in .coverage file in Python 3 like we do in Python 2, otherwise coverage reporting to e.g. coveralls does not work in Python 3. This will not work in Python 3 for packages that still use 2to3, but this never worked anyway since the temporary files got deleted before.\r\n\r\nThis should fix https://github.com/astropy/package-template/issues/151'"
4815,151642200,pllim,astrofrog,2016-04-28 13:33:35,2016-05-10 09:21:27,2016-05-10 09:21:27,closed,,,1,Bug;Docs,https://api.github.com/repos/astropy/astropy/issues/4815,b'Doc text not showing on Chrome',b'Is it just me? I cannot see any contents under [Updating to the latest template files](http://astropy.readthedocs.io/en/latest/development/affiliated-packages.html#id3) in Chrome on Windows 7. But the text is there in [RST file](https://raw.githubusercontent.com/astropy/astropy/master/docs/development/affiliated-packages.rst).'
4810,151440867,taldcroft,mhvk,2016-04-27 17:19:10,2016-05-12 01:24:00,2016-05-12 01:23:59,closed,mhvk,v1.0.10,11,Affects-release;Bug;utils,https://api.github.com/repos/astropy/astropy/issues/4810,b'Fix two problems related to clear_download_cache',"b""This fixes two problems:\r\n\r\n- clear_download_cache() does not work in Python 2.7: fixes #4427\r\n- Download cache shelve file is same on Python 2.7 and 3.5 => crash: fixes #4426\r\n\r\nUnfortunately I don't know of any automated test that can verify that the second is fixed, but I have done this manually.\r\n\r\nThe download cache directory / file structure is changed from \r\n```\r\n<root_cache_dir>/download/  <download files>\r\n<root_cache_dir>/urlmap.db\r\n```\r\nto:\r\n```\r\n<root_cache_dir>/download/py2/  <download files>\r\n<root_cache_dir>/download/py2/urlmap.db  # actual name depends on shelf backend\r\n<root_cache_dir>/download/py3/  <download files>\r\n<root_cache_dir>/download/py3/urlmap.db\r\n```\r\nThe `2` or `3` is just `sys.version_info.major` (so this is Python 4 compatible).\r\n\r\ncc: @eteq """
4792,149553713,MSeifert04,eteq,2016-04-19 19:09:51,2016-05-17 18:08:53,2016-04-19 21:20:53,closed,,v1.2.0,10,Affects-release;Bug;io.fits;no-changelog-entry-needed;testing;Windows,https://api.github.com/repos/astropy/astropy/issues/4792,b'Windows msvc14 has no useful find_msvcrt() method anymore.',"b""Also contained: Trying to pass appveyor python3.5\r\n\r\nI hope this doesn't break anything and fixes something (on my computer at least it fixed 15 test failures for windows10 with python 3.5)"""
4786,149250880,saimn,pllim,2016-04-18 19:38:58,2016-04-27 13:16:00,2016-04-27 13:16:00,closed,,v1.0.10,7,Affects-release;Bug;io.fits,https://api.github.com/repos/astropy/astropy/issues/4786,b'Fix FITS convenience functions to actually close files.',"b""Ref #2824 for an older bug report. On Python 3 `ResourceWarning` warnings were raised because the FITS convenience methods (`getdata`, `getheader`, `append`, `update`) were not closing files as they were supposed to.\r\n\r\nAccording to @embray's comment (https://github.com/astropy/astropy/issues/2824#issuecomment-51381335) this could be due to some changes but I didn't find which one.\r\n\r\nThis was hidden because `ResourceWarning` are filtered by default (https://docs.python.org/3.4/library/warnings.html#default-warning-filters), but can be shown by unittest or in my case by nosetest. It seems that they are also hidden with py.test."""
4770,147462790,MSeifert04,mhvk,2016-04-11 15:22:23,2016-05-17 18:00:20,2016-04-14 14:02:31,closed,mhvk,v1.2.0,14,Affects-release;Bug;units,https://api.github.com/repos/astropy/astropy/issues/4770,b'Allow base with dimensionless quantity as base for np.power.',b'Fixes #4764\r\n\r\nThe rationale for this change is explained in https://github.com/astropy/astropy/issues/4764#issuecomment-208371504.'
4764,146937416,adonath,mhvk,2016-04-08 14:01:51,2016-04-14 14:02:31,2016-04-14 14:02:31,closed,,,9,Bug;units,https://api.github.com/repos/astropy/astropy/issues/4764,"b'Allow non-scalar power for quantities, when dimensionless?'","b""The following minimal example currently throws an error:\r\n```\r\nfrom astropy import units as u\r\nimport numpy as np\r\na = np.array([2, 2, 2, 2]) * u.Unit('cm/cm')\r\nb = np.array([1, 2, 3, 4]) * u.Unit('')\r\na ** b\r\n```\r\nWhich results in a `ValueError: Quantities and Units may only be raised to a scalar power`.\r\n\r\nWhile the same example works, when `a` is explicitly transformed to dimensionless units:\r\n```\r\na.to('') ** b\r\n``` \r\nIs this behaviour intended? Or is this a bug? \r\n\r\nIt might be more reasonable to try to transform to dimensionless units before raising the power and only when this fails, the error is thrown."""
4752,145232649,jenniferyee,pllim,2016-04-01 17:05:27,2016-04-01 17:45:31,2016-04-01 17:45:30,closed,,,3,Bug;modeling,https://api.github.com/repos/astropy/astropy/issues/4752,b'Problem with compound models using AiryDisk2D',"b'Hi,\r\n\r\n(re-post from the astropy mailing list. Response below.)\r\n\r\nI am trying to fit a PSF with an Airy function. If I use AiryDisk2D alone,\r\nit works fine, but if I try to create a compound model, for example a\r\nconstant+AiryDisk2D, the compound model cannot be evaluated because it has\r\n""no attribute _rz"". Is this a bug? Does anyone know how to fix it? (Note I\r\nhave no problems creating compound models with Gaussian2D).\r\n\r\nExample code and full error message below.\r\n\r\npython version: 2.7.5\r\nnumpy version:  1.10.4\r\nastropy version:  1.1.2\r\n\r\nThanks,\r\n\r\nJennifer\r\n\r\nEXAMPLE CODE:\r\n\r\nfrom astropy.modeling import models\r\n\r\nclass Airy_with_Background(models.Const2D+models.AiryDisk2D):\r\n    pass\r\n\r\nx,y = np.mgrid[:200,:200]\r\nairy_init = Airy_with_Background()\r\nairy_init(x,y)\r\n\r\nERROR MESSAGE:\r\n\r\nTraceback (most recent call last):\r\n  File ""test_airy.py"", line 20, in <module>\r\n    airy_init(x,y)\r\n\r\n  File ""/Path/lib/python2.7/site-packages/astropy/modeling/core.py"", line\r\n407, \\\r\nin __call__\r\n    __call__, args, [(\'model_set_axis\', None)])\r\n\r\n  File ""/Path/lib/python2.7/site-packages/astropy/modeling/core.py"", line\r\n403, \\\r\nin __call__\r\n    return super(cls, self).__call__(*inputs, **kwargs)\r\n\r\n  File ""/Path/lib/python2.7/site-packages/astropy/modeling/core.py"", line\r\n708, \\\r\nin __call__\r\n    outputs = self.evaluate(*chain(inputs, parameters))\r\n\r\n  File ""/Path/lib/python2.7/site-packages/astropy/modeling/core.py"", line\r\n2514,\\\r\n in evaluate\r\n    return self.__class__.evaluate(*args)\r\n\r\n  File ""/Path/lib/python2.7/site-packages/astropy/modeling/core.py"", line\r\n1997,\\\r\n in evaluate\r\n    result = cls._evaluate(inputs, params)\r\n\r\n  File ""/Path/lib/python2.7/site-packages/astropy/modeling/utils.py"", line\r\n448,\\\r\n in <lambda>\r\n    g(inputs, params)))\r\n\r\n  File ""/Path/lib/python2.7/site-packages/astropy/modeling/core.py"", line\r\n2438,\\\r\n in <lambda>\r\n    (evaluate(*chain(inputs, islice(params, n_params))),)\r\n\r\n  File\r\n""/Path/lib/python2.7/site-packages/astropy/modeling/functional_models.py\\\r\n"", line 1622, in evaluate\r\n    r = np.sqrt((x - x_0) ** 2 + (y - y_0) ** 2) / (radius / cls._rz)\r\n\r\nAttributeError: type object \'AiryDisk2D\' has no attribute \'_rz\'\r\n-----------------------\r\n\r\nHi Jennifer,\r\n\r\nCould you file an issue on github.\r\nAiryDisk2D defines one of the class attributes inside the __init__ function.\r\nThis was done to work around a problem with older versions of scipy and python3.\r\nPerhaps drop support for those older versions.\r\n\r\nMeanwhile if you don\'t have to inherit from the model classes you can do something like\r\n\r\nmodel = Const2D() + AiryDisk2D()\r\n\r\nand evaluate and fit this model.\r\n\r\nCheers,\r\nNadia'"
4750,145079396,joshuajoseph,embray,2016-04-01 03:44:53,2016-04-01 12:22:00,2016-04-01 12:22:00,closed,,,1,Bug;Duplicate,https://api.github.com/repos/astropy/astropy/issues/4750,b'circular dependency in astropy.io.misc',"b""I want to import the `hdf5` package into my code and use the function `read_table_hdf5`, but when I do, I get this error:\r\n\r\nafter having this line of code:\r\n\r\n`from astropy.io.misc import hdf5 as hdf`\r\n\r\n`/Users/joshuajd/Library/Enthought/Canopy_64bit/User/lib/python2.7/site-packages/astropy/io/misc/hdf5.py` in <module>()\r\n     15 from ...utils.exceptions import AstropyUserWarning\r\n     16 from ...extern import six\r\n`---> 17 from ...table import meta`\r\n\r\n`/Users/joshuajd/Library/Enthought/Canopy_64bit/User/lib/python2.7/site-packages/astropy/table/__init__.py` in <module>()\r\n     30 from ..io.ascii import connect\r\n     31 from ..io.fits import connect\r\n`---> 32 from ..io.misc import connect`\r\n\r\n`/Users/joshuajd/Library/Enthought/Canopy_64bit/User/lib/python2.7/site-packages/astropy/io/misc/connect.py` in <module>()\r\n      6                         unicode_literals)\r\n      7 \r\n`----> 8 from .hdf5 import read_table_hdf5, write_table_hdf5, is_hdf5`\r\n      9 \r\n     10 from .. import registry as io_registry\r\n`ImportError: cannot import name read_table_hdf5`\r\n\r\n\r\nSo as you see, hdf5 depends on table, which depends on connect, which depends on hdf5... so I can't import the function I would like to!\r\n"""
4711,142086696,rirze,taldcroft,2016-03-19 17:57:45,2016-05-16 13:01:26,2016-05-16 13:01:26,closed,taldcroft,v1.0.10,4,Affects-release;Bug;Ready-for-final-review;table,https://api.github.com/repos/astropy/astropy/issues/4711,b'Make Table inherit primary_key attribute from its parent Table. Fix for [#4672]',"b""This is a fix for issue #4672.\r\n\r\nIn the issue, running an example from the astropy docs for [Table indexing](http://astropy.readthedocs.org/en/latest/table/indexing.html) would run into an error. The error was a missing `primary_key` for the table in question. The error arises when a new Table is made from an existing one, either by slicing or reference, but the `primary_key` attribute is not transferred to the new Table. This PR fixes that.\r\n\r\nI added one test for this case, but I couldn't figure out a way to test for `.loc` as @taldcroft suggested in the issue. I'm actually not that familiar with Tables or with writing test cases (this is my first attempt to do so), so any feedback would be appreciated.   """
4694,140850082,rirze,mhvk,2016-03-15 02:08:08,2016-05-23 13:44:59,2016-05-19 00:23:07,closed,,,13,Bug;Duplicate;io.fits;Priority-High,https://api.github.com/repos/astropy/astropy/issues/4694,"b""Removed raising of AssertionError from 'io.fits.fitsrec.__del__'""","b'`io.fits.fitsrec.__del__` does not print an array if it fails to delete `_coldefs`. The AssertionError is replaced with a if-statement that checks if `_coldefs` exists before trying to delete it. The bug in question is #4690.\r\n\r\nWith the example file given in #4690, this change prints:\r\n`before close f`\r\n`closed f`\r\nThat is, with no AssertionError being raised, there is no large output as shown in #4690.\r\n'"
4690,140560194,rmjarvis,mhvk,2016-03-14 02:41:55,2016-05-19 00:23:07,2016-05-19 00:23:07,closed,,,4,Bug;io.fits,https://api.github.com/repos/astropy/astropy/issues/4690,b'Rice compression emits spurious text when closing',"b""Starting with astropy version 1.1.2, closing a rice-compressed file emits a bunch of spurious text along the lines of: `Exception AttributeError: AttributeError('_coldefs',) in <bound method FITS_rec.__del__ of FITS_rec .... ignored`.\r\n\r\nFrom what I understand, this means there is an exception that is trying to be raised in the `__del__` method, but you're not allowed to do that, so it emits text rather than raising the exception.\r\n\r\nHere is a minimal example to reproduce the problem:\r\n```\r\nimport astropy.io.fits as pyfits\r\n\r\n# from http://fits.gsfc.nasa.gov/registry/tilecompression/m13real_rice.fits\r\nfname = 'm13real_rice.fits'\r\n\r\nf = pyfits.open(fname)\r\nd = f[1].data\r\nprint 'before close f'\r\nf.close()\r\nprint 'closed f'\r\n```\r\n\r\nUsing astropy-1.1.1, this works, but with astropy-1.1.2, I get the following output:\r\n```\r\nbefore close f\r\nException AttributeError: AttributeError('_coldefs',) in <bound method FITS_rec.__del__ of FITS_rec([(array([277,   0], dtype=int32), 0.0926625, 111.83617401123047),\r\n       (array([314, 277], dtype=int32), 0.0699219339609146, 110.81782531738281),\r\n       (array([316, 591], dtype=int32), 0.0926625, 110.81782531738281),\r\n       (array([326, 907], dtype=int32), 0.0926625, 110.836181640625),\r\n       (array([ 328, 1233], dtype=int32), 0.09351261792182922, 110.836181640625),\r\n       (array([ 328, 1561], dtype=int32), 0.09351261792182922, 111.836181640625),\r\n       (array([ 321, 1889], dtype=int32), 0.0926625, 111.836181640625),\r\n       (array([ 307, 2210], dtype=int32), 0.09436273584365844, 111.83617401123047),\r\n       (array([ 297, 2517], dtype=int32), 0.09436273584365844, 111.83617401123047),\r\n       (array([ 295, 2814], dtype=int32), 0.0926625, 111.83617401123047),\r\n       (array([ 289, 3109], dtype=int32), 0.0926625, 111.83617401123047),\r\n       (array([ 290, 3398], dtype=int32), 0.0926625, 110.836181640625),\r\n       (array([ 277, 3688], dtype=int32), 0.0926625, 111.83617401123047),\r\n       (array([ 274, 3965], dtype=int32), 0.0926625, 111.83617401123047),\r\n       (array([ 276, 4239], dtype=int32), 0.0926625, 111.83617401123047),\r\n       (array([ 283, 4515], dtype=int32), 0.0926625, 111.836181640625),\r\n       (array([ 290, 4798], dtype=int32), 0.0926625, 112.836181640625),\r\n       (array([ 284, 5088], dtype=int32), 0.0926625, 111.83617401123047),\r\n       (array([ 286, 5372], dtype=int32), 0.0926625, 111.83617401123047),\r\n       (array([ 278, 5658], dtype=int32), 0.0926625, 112.836181640625),\r\n       (array([ 277, 5936], dtype=int32), 0.0926625, 111.836181640625),\r\n       (array([ 270, 6213], dtype=int32), 0.0926625, 111.83617401123047),\r\n       (array([ 272, 6483], dtype=int32), 0.0926625, 111.83617401123047),\r\n       (array([ 284, 6755], dtype=int32), 0.0926625, 111.83617401123047),\r\n       (array([ 288, 7039], dtype=int32), 0.0926625, 111.83617401123047),\r\n       (array([ 285, 7327], dtype=int32), 0.0926625, 111.83617401123047),\r\n       (array([ 280, 7612], dtype=int32), 0.0926625, 111.83617401123047),\r\n       (array([ 273, 7892], dtype=int32), 0.0926625, 111.83617401123047),\r\n       (array([ 276, 8165], dtype=int32), 0.0926625, 111.83617401123047),\r\n       (array([ 291, 8441], dtype=int32), 0.0926625, 112.836181640625),\r\n       (array([ 301, 8732], dtype=int32), 0.0926625, 111.836181640625),\r\n       (array([ 303, 9033], dtype=int32), 0.0926625, 111.83617401123047),\r\n       (array([ 297, 9336], dtype=int32), 0.0926625, 111.83617401123047),\r\n       (array([ 293, 9633], dtype=int32), 0.0926625, 111.83617401123047),\r\n       (array([ 277, 9926], dtype=int32), 0.0926625, 111.83617401123047),\r\n       (array([  265, 10203], dtype=int32), 0.0926625, 111.83617401123047),\r\n       (array([  259, 10468], dtype=int32), 0.0926625, 111.83617401123047),\r\n       (array([  264, 10727], dtype=int32), 0.0926625, 111.836181640625),\r\n       (array([  268, 10991], dtype=int32), 0.0926625, 111.836181640625),\r\n       (array([  271, 11259], dtype=int32), 0.0926625, 110.81782531738281),\r\n       (array([  273, 11530], dtype=int32), 0.0926625, 110.81782531738281),\r\n       (array([  267, 11803], dtype=int32), 0.0926625, 110.81782531738281),\r\n       (array([  264, 12070], dtype=int32), 0.0926625, 110.81782531738281),\r\n       (array([  264, 12334], dtype=int32), 0.0926625, 111.836181640625),\r\n       (array([  259, 12598], dtype=int32), 0.09436273584365844, 111.836181640625),\r\n       (array([  265, 12857], dtype=int32), 0.0926625, 112.85452270507812),\r\n       (array([  271, 13122], dtype=int32), 0.0926625, 112.85452270507812),\r\n       (array([  253, 13393], dtype=int32), 0.185325, 112.836181640625),\r\n       (array([  272, 13646], dtype=int32), 0.185325, 112.836181640625),\r\n       (array([  281, 13918], dtype=int32), 0.185325, 111.83617401123047),\r\n       (array([  285, 14199], dtype=int32), 0.185325, 111.83617401123047),\r\n       (array([  290, 14484], dtype=int32), 0.185325, 111.83617401123047),\r\n       (array([  291, 14774], dtype=int32), 0.185325, 111.83617401123047),\r\n       (array([  308, 15065], dtype=int32), 0.09351261792182922, 112.836181640625),\r\n       (array([  284, 15373], dtype=int32), 0.0926625, 112.836181640625),\r\n       (array([  269, 15657], dtype=int32), 0.0926625, 111.83617401123047),\r\n       (array([  265, 15926], dtype=int32), 0.0926625, 111.83617401123047),\r\n       (array([  288, 16191], dtype=int32), 0.09351261792182922, 110.81782531738281),\r\n       (array([  285, 16479], dtype=int32), 0.1398438679218292, 110.81782531738281),\r\n       (array([  286, 16764], dtype=int32), 0.185325, 112.85452270507812),\r\n       (array([  290, 17050], dtype=int32), 0.185325, 112.85452270507812),\r\n       (array([  289, 17340], dtype=int32), 0.185325, 112.836181640625),\r\n       (array([  282, 17629], dtype=int32), 0.185325, 112.836181640625),\r\n       (array([  276, 17911], dtype=int32), 0.185325, 111.836181640625),\r\n       (array([  274, 18187], dtype=int32), 0.185325, 111.836181640625),\r\n       (array([  278, 18461], dtype=int32), 0.185325, 111.83617401123047),\r\n       (array([  279, 18739], dtype=int32), 0.185325, 111.83617401123047),\r\n       (array([  318, 19018], dtype=int32), 0.0926625, 112.836181640625),\r\n       (array([  282, 19336], dtype=int32), 0.185325, 112.836181640625),\r\n       (array([  284, 19618], dtype=int32), 0.185325, 112.85452270507812),\r\n       (array([  286, 19902], dtype=int32), 0.185325, 112.85452270507812),\r\n       (array([  294, 20188], dtype=int32), 0.185325, 111.836181640625),\r\n       (array([  295, 20482], dtype=int32), 0.185325, 111.836181640625),\r\n       (array([  282, 20777], dtype=int32), 0.185325, 112.836181640625),\r\n       (array([  276, 21059], dtype=int32), 0.185325, 112.836181640625),\r\n       (array([  270, 21335], dtype=int32), 0.185325, 111.83617401123047),\r\n       (array([  266, 21605], dtype=int32), 0.185325, 111.83617401123047),\r\n       (array([  270, 21871], dtype=int32), 0.185325, 112.85452270507812),\r\n       (array([  278, 22141], dtype=int32), 0.185325, 112.85452270507812),\r\n       (array([  287, 22419], dtype=int32), 0.185325, 113.836181640625),\r\n       (array([  296, 22706], dtype=int32), 0.185325, 113.836181640625),\r\n       (array([  301, 23002], dtype=int32), 0.185325, 112.836181640625),\r\n       (array([  300, 23303], dtype=int32), 0.185325, 112.836181640625),\r\n       (array([  288, 23603], dtype=int32), 0.185325, 113.836181640625),\r\n       (array([  275, 23891], dtype=int32), 0.185325, 113.836181640625),\r\n       (array([  274, 24166], dtype=int32), 0.185325, 112.836181640625),\r\n       (array([  294, 24440], dtype=int32), 0.185325, 113.836181640625),\r\n       (array([  316, 24734], dtype=int32), 0.2123161556482315, 112.85452270507812),\r\n       (array([  321, 25050], dtype=int32), 0.2779875, 112.85452270507812),\r\n       (array([  310, 25371], dtype=int32), 0.37065, 113.836181640625),\r\n       (array([  299, 25681], dtype=int32), 0.37065, 113.836181640625),\r\n       (array([  302, 25980], dtype=int32), 0.23335648584365842, 112.836181640625),\r\n       (array([  292, 26282], dtype=int32), 0.185325, 112.836181640625),\r\n       (array([  279, 26574], dtype=int32), 0.185325, 112.836181640625),\r\n       (array([  281, 26853], dtype=int32), 0.18702523584365843, 112.836181640625),\r\n       (array([  289, 27134], dtype=int32), 0.185325, 113.836181640625),\r\n       (array([  291, 27423], dtype=int32), 0.185325, 113.836181640625),\r\n       (array([  285, 27714], dtype=int32), 0.185325, 114.836181640625),\r\n       (array([  280, 27999], dtype=int32), 0.185325, 114.836181640625),\r\n       (array([  271, 28279], dtype=int32), 0.185325, 113.87287139892578),\r\n       (array([  254, 28550], dtype=int32), 0.2779875, 113.87287139892578),\r\n       (array([  298, 28804], dtype=int32), 0.185325, 112.85452270507812),\r\n       (array([  272, 29102], dtype=int32), 0.37065, 112.85452270507812),\r\n       (array([  302, 29374], dtype=int32), 0.23335648584365842, 112.85452270507812),\r\n       (array([  298, 29676], dtype=int32), 0.23335648584365842, 112.85452270507812),\r\n       (array([  304, 29974], dtype=int32), 0.185325, 113.836181640625),\r\n       (array([  285, 30278], dtype=int32), 0.23335648584365842, 113.836181640625),\r\n       (array([  282, 30563], dtype=int32), 0.185325, 112.836181640625),\r\n       (array([  281, 30845], dtype=int32), 0.185325, 112.836181640625),\r\n       (array([  283, 31126], dtype=int32), 0.18702523584365843, 113.836181640625),\r\n       (array([  285, 31409], dtype=int32), 0.185325, 113.836181640625),\r\n       (array([  290, 31694], dtype=int32), 0.18872547168731688, 112.85452270507812),\r\n       (array([  276, 31984], dtype=int32), 0.2805378537654877, 112.85452270507812),\r\n       (array([  270, 32260], dtype=int32), 0.37065, 113.836181640625),\r\n       (array([  279, 32530], dtype=int32), 0.37065, 113.836181640625),\r\n       (array([  275, 32809], dtype=int32), 0.42038172168731686, 112.85452270507812),\r\n       (array([  251, 33084], dtype=int32), 0.7413, 112.85452270507812),\r\n       (array([  268, 33335], dtype=int32), 0.555975, 114.836181640625),\r\n       (array([  275, 33603], dtype=int32), 0.37405047168731687, 114.836181640625),\r\n       (array([  265, 33878], dtype=int32), 0.37065, 114.836181640625),\r\n       (array([  249, 34143], dtype=int32), 0.50964375, 114.836181640625),\r\n       (array([  265, 34392], dtype=int32), 0.50964375, 112.85452270507812),\r\n       (array([  281, 34657], dtype=int32), 0.46331249999999996, 114.836181640625),\r\n       (array([  293, 34938], dtype=int32), 0.37065, 114.836181640625),\r\n       (array([  285, 35231], dtype=int32), 0.37065, 114.836181640625),\r\n       (array([  273, 35516], dtype=int32), 0.37065, 113.836181640625),\r\n       (array([  272, 35789], dtype=int32), 0.37065, 113.836181640625),\r\n       (array([  291, 36061], dtype=int32), 0.37065, 113.836181640625),\r\n       (array([  305, 36352], dtype=int32), 0.37065, 113.836181640625),\r\n       (array([  307, 36657], dtype=int32), 0.37745094337463375, 113.87287139892578),\r\n       (array([  302, 36964], dtype=int32), 0.3740497647285461, 113.87287139892578),\r\n       (array([  285, 37266], dtype=int32), 0.42038172168731686, 113.87287139892578),\r\n       (array([  295, 37551], dtype=int32), 0.32686910376548767, 113.87287139892578),\r\n       (array([  308, 37846], dtype=int32), 0.2796877358436584, 114.836181640625),\r\n       (array([  281, 38154], dtype=int32), 0.555975, 114.89122009277344),\r\n       (array([  287, 38435], dtype=int32), 0.555975, 114.836181640625),\r\n       (array([  274, 38722], dtype=int32), 0.6949687499999999, 114.836181640625),\r\n       (array([  283, 38996], dtype=int32), 0.555975, 113.87287139892578),\r\n       (array([  293, 39279], dtype=int32), 0.41698124999999997, 113.87287139892578),\r\n       (array([  296, 39572], dtype=int32), 0.32686910376548767, 114.89122009277344),\r\n       (array([  303, 39868], dtype=int32), 0.2779875, 114.89122009277344),\r\n       (array([  316, 40171], dtype=int32), 0.23335648584365842, 114.836181640625),\r\n       (array([  296, 40487], dtype=int32), 0.37065, 114.836181640625),\r\n       (array([  300, 40783], dtype=int32), 0.37065, 114.836181640625),\r\n       (array([  293, 41083], dtype=int32), 0.42038172168731686, 114.836181640625),\r\n       (array([  295, 41376], dtype=int32), 0.37065, 113.836181640625),\r\n       (array([  288, 41671], dtype=int32), 0.37065, 113.836181640625),\r\n       (array([  300, 41959], dtype=int32), 0.25694716980457305, 113.836181640625),\r\n       (array([  282, 42259], dtype=int32), 0.37065, 113.836181640625),\r\n       (array([  266, 42541], dtype=int32), 0.50964375, 113.836181640625),\r\n       (array([  271, 42807], dtype=int32), 0.41698124999999997, 113.836181640625),\r\n       (array([  280, 43078], dtype=int32), 0.28053820724487305, 112.836181640625),\r\n       (array([  300, 43358], dtype=int32), 0.18702523584365843, 112.836181640625),\r\n       (array([  297, 43658], dtype=int32), 0.18872547168731688, 113.87287139892578),\r\n       (array([  300, 43955], dtype=int32), 0.18872547168731688, 113.87287139892578),\r\n       (array([  279, 44255], dtype=int32), 0.2796877358436584, 114.836181640625),\r\n       (array([  277, 44534], dtype=int32), 0.2805375002861023, 114.836181640625),\r\n       (array([  280, 44811], dtype=int32), 0.2805375002861023, 112.85452270507812),\r\n       (array([  278, 45091], dtype=int32), 0.32431875, 113.836181640625),\r\n       (array([  305, 45369], dtype=int32), 0.23335648584365842, 113.836181640625),\r\n       (array([  302, 45674], dtype=int32), 0.2779875, 113.836181640625),\r\n       (array([  295, 45976], dtype=int32), 0.37065, 113.87287139892578),\r\n       (array([  302, 46271], dtype=int32), 0.37405047168731687, 113.87287139892578),\r\n       (array([  295, 46573], dtype=int32), 0.41698124999999997, 113.836181640625),\r\n       (array([  263, 46868], dtype=int32), 0.6486375, 113.836181640625),\r\n       (array([  262, 47131], dtype=int32), 0.5138943396091461, 113.87287139892578),\r\n       (array([  273, 47393], dtype=int32), 0.37065, 113.87287139892578),\r\n       (array([  280, 47666], dtype=int32), 0.37065, 113.836181640625),\r\n       (array([  286, 47946], dtype=int32), 0.37065, 113.836181640625),\r\n       (array([  281, 48232], dtype=int32), 0.42038172168731686, 112.836181640625),\r\n       (array([  288, 48513], dtype=int32), 0.37065, 112.836181640625),\r\n       (array([  300, 48801], dtype=int32), 0.2805378537654877, 113.836181640625),\r\n       (array([  294, 49101], dtype=int32), 0.32686910376548767, 113.836181640625),\r\n       (array([  321, 49395], dtype=int32), 0.18872547168731688, 114.836181640625),\r\n       (array([  288, 49716], dtype=int32), 0.32686910376548767, 114.836181640625),\r\n       (array([  278, 50004], dtype=int32), 0.37065, 113.836181640625),\r\n       (array([  263, 50282], dtype=int32), 0.46331249999999996, 113.836181640625),\r\n       (array([  275, 50545], dtype=int32), 0.37065, 114.836181640625),\r\n       (array([  255, 50820], dtype=int32), 0.46331249999999996, 114.89122009277344),\r\n       (array([  248, 51075], dtype=int32), 0.46331249999999996, 114.89122009277344),\r\n       (array([  262, 51323], dtype=int32), 0.37065, 113.87287139892578),\r\n       (array([  273, 51585], dtype=int32), 0.2805378537654877, 113.87287139892578),\r\n       (array([  291, 51858], dtype=int32), 0.18872547168731688, 113.87287139892578),\r\n       (array([  291, 52149], dtype=int32), 0.18872547168731688, 114.89122009277344),\r\n       (array([  272, 52440], dtype=int32), 0.2830878540515899, 113.87287139892578),\r\n       (array([  263, 52712], dtype=int32), 0.32431875, 112.85452270507812),\r\n       (array([  291, 52975], dtype=int32), 0.18702523584365843, 112.85452270507812),\r\n       (array([  286, 53266], dtype=int32), 0.185325, 113.87287139892578),\r\n       (array([  282, 53552], dtype=int32), 0.185325, 113.87287139892578),\r\n       (array([  289, 53834], dtype=int32), 0.18872547168731688, 113.836181640625),\r\n       (array([  283, 54123], dtype=int32), 0.2779875, 113.836181640625),\r\n       (array([  283, 54406], dtype=int32), 0.37065, 112.836181640625),\r\n       (array([  284, 54689], dtype=int32), 0.3740497647285461, 112.836181640625),\r\n       (array([  277, 54973], dtype=int32), 0.37065, 111.836181640625),\r\n       (array([  263, 55250], dtype=int32), 0.37065, 111.836181640625),\r\n       (array([  288, 55513], dtype=int32), 0.185325, 113.836181640625),\r\n       (array([  277, 55801], dtype=int32), 0.185325, 113.836181640625),\r\n       (array([  275, 56078], dtype=int32), 0.185325, 113.836181640625),\r\n       (array([  288, 56353], dtype=int32), 0.185325, 113.836181640625),\r\n       (array([  305, 56641], dtype=int32), 0.185325, 113.87287139892578),\r\n       (array([  295, 56946], dtype=int32), 0.2779875, 113.87287139892578),\r\n       (array([  326, 57241], dtype=int32), 0.18872547168731688, 113.836181640625),\r\n       (array([  329, 57567], dtype=int32), 0.18872547168731688, 113.836181640625),\r\n       (array([  288, 57896], dtype=int32), 0.37065, 112.85452270507812),\r\n       (array([  279, 58184], dtype=int32), 0.32431875, 112.85452270507812),\r\n       (array([  286, 58463], dtype=int32), 0.18702523584365843, 112.836181640625),\r\n       (array([  267, 58749], dtype=int32), 0.185325, 112.836181640625),\r\n       (array([  260, 59016], dtype=int32), 0.185325, 112.85452270507812),\r\n       (array([  259, 59276], dtype=int32), 0.185325, 111.836181640625),\r\n       (array([  272, 59535], dtype=int32), 0.185325, 109.836181640625),\r\n       (array([  280, 59807], dtype=int32), 0.185325, 109.836181640625),\r\n       (array([  279, 60087], dtype=int32), 0.185325, 110.836181640625),\r\n       (array([  277, 60366], dtype=int32), 0.18702523584365843, 110.836181640625),\r\n       (array([  275, 60643], dtype=int32), 0.185325, 112.836181640625),\r\n       (array([  274, 60918], dtype=int32), 0.185325, 112.836181640625),\r\n       (array([  280, 61192], dtype=int32), 0.185325, 111.836181640625),\r\n       (array([  281, 61472], dtype=int32), 0.185325, 111.836181640625),\r\n       (array([  285, 61753], dtype=int32), 0.185325, 112.836181640625),\r\n       (array([  283, 62038], dtype=int32), 0.185325, 112.836181640625),\r\n       (array([  283, 62321], dtype=int32), 0.185325, 112.836181640625),\r\n       (array([  285, 62604], dtype=int32), 0.185325, 112.836181640625),\r\n       (array([  294, 62889], dtype=int32), 0.185325, 112.85452270507812),\r\n       (array([  301, 63183], dtype=int32), 0.185325, 112.85452270507812),\r\n       (array([  282, 63484], dtype=int32), 0.2779875, 112.836181640625),\r\n       (array([  299, 63766], dtype=int32), 0.185325, 113.836181640625),\r\n       (array([  295, 64065], dtype=int32), 0.185325, 111.83617401123047),\r\n       (array([  305, 64360], dtype=int32), 0.185325, 111.83617401123047),\r\n       (array([  317, 64665], dtype=int32), 0.185325, 112.85452270507812),\r\n       (array([  318, 64982], dtype=int32), 0.185325, 112.85452270507812),\r\n       (array([  311, 65300], dtype=int32), 0.185325, 111.836181640625),\r\n       (array([  298, 65611], dtype=int32), 0.185325, 111.836181640625),\r\n       (array([  282, 65909], dtype=int32), 0.185325, 111.836181640625),\r\n       (array([  267, 66191], dtype=int32), 0.185325, 111.836181640625),\r\n       (array([  256, 66458], dtype=int32), 0.185325, 112.836181640625),\r\n       (array([  248, 66714], dtype=int32), 0.185325, 112.836181640625),\r\n       (array([  282, 66962], dtype=int32), 0.09436273584365844, 112.85452270507812),\r\n       (array([  287, 67244], dtype=int32), 0.09436273584365844, 112.85452270507812),\r\n       (array([  297, 67531], dtype=int32), 0.09436273584365844, 110.836181640625),\r\n       (array([  271, 67828], dtype=int32), 0.185325, 110.836181640625),\r\n       (array([  272, 68099], dtype=int32), 0.185325, 110.836181640625),\r\n       (array([  270, 68371], dtype=int32), 0.185325, 110.836181640625),\r\n       (array([  273, 68641], dtype=int32), 0.185325, 112.836181640625),\r\n       (array([  275, 68914], dtype=int32), 0.185325, 112.836181640625),\r\n       (array([  286, 69189], dtype=int32), 0.13984422140121458, 110.836181640625),\r\n       (array([  267, 69475], dtype=int32), 0.185325, 110.836181640625),\r\n       (array([  259, 69742], dtype=int32), 0.185325, 111.836181640625),\r\n       (array([  267, 70001], dtype=int32), 0.1398438679218292, 111.836181640625),\r\n       (array([  286, 70268], dtype=int32), 0.0926625, 111.83617401123047),\r\n       (array([  283, 70554], dtype=int32), 0.0926625, 111.83617401123047),\r\n       (array([  276, 70837], dtype=int32), 0.0926625, 110.836181640625),\r\n       (array([  273, 71113], dtype=int32), 0.0926625, 110.836181640625),\r\n       (array([  270, 71386], dtype=int32), 0.09351261792182922, 110.836181640625),\r\n       (array([  267, 71656], dtype=int32), 0.0926625, 110.836181640625),\r\n       (array([  266, 71923], dtype=int32), 0.0926625, 111.83617401123047),\r\n       (array([  263, 72189], dtype=int32), 0.0926625, 111.83617401123047),\r\n       (array([  259, 72452], dtype=int32), 0.0926625, 111.836181640625),\r\n       (array([  251, 72711], dtype=int32), 0.0926625, 111.836181640625),\r\n       (array([  254, 72962], dtype=int32), 0.0926625, 111.83617401123047),\r\n       (array([  253, 73216], dtype=int32), 0.0926625, 111.83617401123047),\r\n       (array([  249, 73469], dtype=int32), 0.0926625, 111.83617401123047),\r\n       (array([  250, 73718], dtype=int32), 0.0926625, 111.83617401123047),\r\n       (array([  254, 73968], dtype=int32), 0.0926625, 111.836181640625),\r\n       (array([  261, 74222], dtype=int32), 0.0926625, 111.836181640625),\r\n       (array([  214, 74483], dtype=int32), 0.25100032065542327, 111.836181640625),\r\n       (array([  212, 74697], dtype=int32), 0.28863560732668503, 111.836181640625),\r\n       (array([  276, 74909], dtype=int32), 0.0926625, 111.83617401123047),\r\n       (array([  286, 75185], dtype=int32), 0.0926625, 112.836181640625),\r\n       (array([  298, 75471], dtype=int32), 0.0926625, 111.836181640625),\r\n       (array([  308, 75769], dtype=int32), 0.09436273584365844, 111.836181640625),\r\n       (array([  309, 76077], dtype=int32), 0.0926625, 111.836181640625),\r\n       (array([  306, 76386], dtype=int32), 0.0926625, 111.836181640625),\r\n       (array([  291, 76692], dtype=int32), 0.0926625, 110.836181640625),\r\n       (array([  273, 76983], dtype=int32), 0.0926625, 110.836181640625),\r\n       (array([  273, 77256], dtype=int32), 0.0926625, 109.836181640625),\r\n       (array([  286, 77529], dtype=int32), 0.0926625, 109.836181640625),\r\n       (array([  299, 77815], dtype=int32), 0.0926625, 110.836181640625),\r\n       (array([  302, 78114], dtype=int32), 0.0926625, 110.836181640625),\r\n       (array([  296, 78416], dtype=int32), 0.0926625, 111.836181640625),\r\n       (array([  284, 78712], dtype=int32), 0.0926625, 111.836181640625),\r\n       (array([  270, 78996], dtype=int32), 0.0926625, 111.836181640625),\r\n       (array([  257, 79266], dtype=int32), 0.0926625, 111.836181640625),\r\n       (array([  252, 79523], dtype=int32), 0.0926625, 110.836181640625),\r\n       (array([  259, 79775], dtype=int32), 0.0926625, 110.836181640625),\r\n       (array([  272, 80034], dtype=int32), 0.0926625, 110.836181640625),\r\n       (array([  282, 80306], dtype=int32), 0.0926625, 110.836181640625),\r\n       (array([  224, 80588], dtype=int32), 0.2578451361001941, 110.836181640625),\r\n       (array([  231, 80812], dtype=int32), 0.2023181733913942, 111.83617401123047),\r\n       (array([  275, 81043], dtype=int32), 0.0926625, 110.836181640625),\r\n       (array([  280, 81318], dtype=int32), 0.0926625, 110.836181640625),\r\n       (array([  283, 81598], dtype=int32), 0.0926625, 110.836181640625),\r\n       (array([  280, 81881], dtype=int32), 0.0926625, 110.836181640625),\r\n       (array([  278, 82161], dtype=int32), 0.0926625, 109.836181640625),\r\n       (array([  271, 82439], dtype=int32), 0.0926625, 109.836181640625),\r\n       (array([  264, 82710], dtype=int32), 0.0926625, 109.836181640625),\r\n       (array([  254, 82974], dtype=int32), 0.0926625, 109.836181640625),\r\n       (array([  228, 83228], dtype=int32), 0.14637073640437456, 110.836181640625),\r\n       (array([  205, 83456], dtype=int32), 0.27372067173094833, 110.836181640625),\r\n       (array([  205, 83661], dtype=int32), 0.35533014593762313, 109.836181640625),\r\n       (array([  196, 83866], dtype=int32), 0.4991649365492337, 109.836181640625),\r\n       (array([  290, 84062], dtype=int32), 0.0926625, 109.836181640625)], \r\n      dtype=(numpy.record, [('COMPRESSED_DATA', '>i4', (2,)), ('ZSCALE', '>f8'), ('ZZERO', '>f8')]))> ignored\r\nclosed f\r\n```\r\n\r\nPlease fix this.  Thank you!"""
4677,139413194,mhvk,mhvk,2016-03-08 22:28:41,2016-03-10 14:04:25,2016-03-10 14:04:24,closed,,,2,Bug;testing;Upstream Fix Required,https://api.github.com/repos/astropy/astropy/issues/4677,b'Test failures with numpy 1.11 and up',"b'Currently, tests with 1.11 fail some of the table info tests because of a behaviour in how ""object"" arrays are treated by numpy, in particular what it means to do `np.sum(time-array)`. See https://github.com/numpy/numpy/issues/7393'"
4672,138970592,joleroi,taldcroft,2016-03-07 12:47:43,2016-05-16 13:01:26,2016-05-16 13:01:26,closed,,,4,Bug;Package-expert;table,https://api.github.com/repos/astropy/astropy/issues/4672,b'Bug in table indexing ',"b'http://astropy.readthedocs.org/en/latest/table/indexing.html\r\n\r\nContinuing the example from the docs page a little bit I get this\r\n\r\n```\r\nIn [96]: t = Table([(1, 2, 3, 4), (10, 1, 9, 9)], names=(\'a\', \'b\'), dtype=[\'i8\', \'i8\'])\r\n\r\nIn [97]: t.add_index(\'a\')\r\n\r\nIn [98]: t.loc[2]\r\nOut[98]:\r\n\r\n  a     b\r\nint64 int64\r\n----- -----\r\n    2     1\r\n\r\nIn [99]: test = t[[1, 3]]\r\n\r\nIn [100]: test.indices\r\nOut[100]:\r\n[ a  rows\r\n --- ----\r\n   2    0\r\n   4    1]\r\n\r\nIn [101]: test.loc[2]\r\n---------------------------------------------------------------------------\r\nTypeError                                 Traceback (most recent call last)\r\n in ()\r\n----> 1 test.loc[2]\r\n\r\n/home/kingj/Software/miniconda3/envs/headsherpa/lib/python2.7/site-packages/astropy/table/index.pyc in __getitem__(self, item)\r\n    794             key = self.table.primary_key\r\n    795\r\n--> 796         index = self.indices[key]\r\n    797         if len(index.columns) > 1:\r\n    798             raise ValueError(""Cannot use .loc on multi-column indices"")\r\n\r\n/home/kingj/Software/miniconda3/envs/headsherpa/lib/python2.7/site-packages/astropy/table/index.pyc in __getitem__(self, item)\r\n    756             raise IndexError(""No index found for {0}"".format(item))\r\n    757\r\n--> 758         return super(TableIndices, self).__getitem__(item)\r\n    759\r\n    760\r\n\r\nTypeError: list indices must be integers, not NoneType\r\n```\r\n\r\nSo it looks like the indices are updated correctly, but an error is thrown when calling ``loc``. This does not seem like the desired behaviour.'"
4658,137734627,MSeifert04,mhvk,2016-03-02 00:36:37,2016-03-02 18:18:00,2016-03-02 18:12:53,closed,mhvk,v1.0.9,8,Affects-release;Bug;stats,https://api.github.com/repos/astropy/astropy/issues/4658,b'Allow for masked arrays inside median_absolute_deviation',"b""Currently ``median_absolute_deviation`` ignores the mask when given masked arrays. I think that should be eventually fixed upstream (https://github.com/numpy/numpy/issues/7330) but I thought it might be worth it to include it here and later drop it again. I've noticed this problem during a recent PR for ``ccdproc`` (https://github.com/astropy/ccdproc/pull/311).\r\n\r\nThe problem is that ``np.median`` cannot handle masked-arrays:\r\n\r\n```\r\nfrom astropy.stats import median_absolute_deviation\r\narray = np.ma.array([[1, 4], [2, 2]], mask=[[1, 0], [0, 0]])\r\nmedian_absolute_deviation(array)\r\n# Returns 0.5\r\n\r\n# This is the same as if we just ignore the mask\r\nmedian_absolute_deviation(array.data)\r\n# Returns 0.5\r\n\r\n# but using np.ma.median (realized within this PR) the result is correct:\r\nmedian_absolute_deviation(array)\r\n# Returns 0\r\n```\r\nThis is also included as a test in the PR. I've assumed this is a Bugfix but depending on the point of view this could also be a new feature (or obsolete)."""
4656,137669812,mcara,eteq,2016-03-01 19:52:39,2016-03-10 17:01:52,2016-03-10 04:16:38,closed,,v1.1.2,15,Affects-release;Bug;modeling,https://api.github.com/repos/astropy/astropy/issues/4656,b'Fix a bug in modeling.parameters affecting setters with 2 parameters',b'Fixes a bug in modeling.parameters.Parameter due to which instantiation\nof a model class with custom setters having two parameters (expecting\nsecond parameter to be the model object) would fail. See issue #4586\nfor more details.'
4654,137629909,mhvk,eteq,2016-03-01 16:57:14,2016-03-02 19:15:15,2016-03-02 18:59:35,closed,,v1.1.2,2,Affects-release;Bug;visualization,https://api.github.com/repos/astropy/astropy/issues/4654,b'Ensure quantity_support works for numpy >=1.10',b'Split off from #4645.'
4653,137564424,olebole,astrofrog,2016-03-01 12:42:18,2016-06-08 16:24:28,2016-06-03 18:27:52,closed,,v1.2.0,13,Bug;io.fits;testing,https://api.github.com/repos/astropy/astropy/issues/4653,b'Make TFORMx keyword check more flexible',"b'The maximal column length for compressed data in cfitsio changed between version 3370 and 3380. This patch replaces the check with a specific length by a general check of the correct syntax of the keywords.\r\n\r\nThis fixes #4646, if @embray raises the green flag.'"
4650,137400690,eteq,astrofrog,2016-02-29 22:35:30,2016-03-09 16:41:10,2016-03-04 21:28:40,closed,,v1.0.9,16,Affects-release;Bug;utils,https://api.github.com/repos/astropy/astropy/issues/4650,"b""add missing check to ensure zest entry points aren't global""","b""This closes #4633 by adding the ``if data['name'] != 'astropy': return`` bit into the one zest.releaser hook that was missing it.\r\n\r\nTurns out that all the other entry points *do* have that bit.  But It looks like it was just an oversight that this one doesn't.  @embray, if you get a chance, can you confirm?"""
4646,137175605,olebole,astrofrog,2016-02-29 07:43:26,2016-06-03 18:27:52,2016-06-03 18:27:52,closed,,,9,Bug;io.fits,https://api.github.com/repos/astropy/astropy/issues/4646,b'test_compression_column_tforms failure with cfitsio 3.380',"b'With the latest relase of cfitsio (which just entered Debian unstable), there are two test failures. The first one:\r\n```\r\n_________ TestCompressedImage.test_compression_column_tforms ______________\r\n\r\nself = <astropy.io.fits.tests.test_image.TestCompressedImage object at 0x7fcf39d96210>\r\n\r\n    def test_compression_column_tforms(self):\r\n        """"""Regression test for https://aeon.stsci.edu/ssb/trac/pyfits/ticket/199""""""\r\n    \r\n        # Some interestingly tiled data so that some of it is quantized and\r\n        # some of it ends up just getting gzip-compressed\r\n        data2 = ((np.arange(1, 8, dtype=np.float32) * 10)[:, np.newaxis] +\r\n                 np.arange(1, 7))\r\n        np.random.seed(1337)\r\n        data1 = np.random.uniform(size=(6 * 4, 7 * 4))\r\n        data1[:data2.shape[0], :data2.shape[1]] = data2\r\n        chdu = fits.CompImageHDU(data1, compressionType=\'RICE_1\',\r\n                                 tileSize=(6, 7))\r\n        chdu.writeto(self.temp(\'test.fits\'))\r\n    \r\n        with fits.open(self.temp(\'test.fits\'),\r\n                       disable_image_compression=True) as h:\r\n>           assert h[1].header[\'TFORM1\'] == \'1PB(30)\'\r\nE           assert \'1PB(45)\' == \'1PB(30)\'\r\nE             - 1PB(45)\r\nE             + 1PB(30)\r\n\r\nastropy/io/fits/tests/test_image.py:1268: AssertionError\r\n```\r\nThis may be a bug in cfitsio as well; I would need your hint here.\r\nFull log [here](https://buildd.debian.org/status/fetch.php?pkg=python-astropy&arch=amd64&ver=1.1.1-3%2Bb1&stamp=1456707318).\r\nThis happens on all architectures.'"
4641,136842925,eteq,eteq,2016-02-26 23:23:28,2016-02-29 22:07:06,2016-02-29 21:27:18,closed,,v1.0.9,9,Affects-dev;Bug;io.ascii,https://api.github.com/repos/astropy/astropy/issues/4641,b'Fix AASTexData py2.6  incompatibility/performance boost',"b""This is a slight adjustment to the change introduced in #4561 .  It just pre-compiles the regex into an object that is then re-used in the ``re.sub`` call.  While this is probably a trivial improvement on it's own, it has a much more important effect when backported to v1.1.x and v1.0.x: it fixes a py2.6 incompatibility introcued in #4561.  It turns out that the ``flags`` keyword is not in ``re.sub`` in py2.6.  So this PR works around that by using the compiled regex instead of compiling it as part of the `re.sub` call.\r\n\r\nIn principal this could be put *only* in v1.0.x/v1.1.x... But I think it's better to put it in master, as it has no downside and might be a performance improvement.  Any opinions on that, @astrofrog or @taldcroft ?\r\n\r\n(note that no changelog entry is needed because #4561 has not been in a release yet)"""
4633,135994013,reinout,reinout,2016-02-24 08:41:22,2016-03-01 07:26:14,2016-03-01 07:26:14,closed,,,3,Bug;Release,https://api.github.com/repos/astropy/astropy/issues/4633,b'zest.releaser hooks should be limited to astropy',"b""I'm the author of zest.releaser and recently an issue got posted: https://github.com/zestsoftware/zest.releaser/issues/168\r\n\r\nBasically, someone released his own package and got bitten by a zest.releaser hook from astropy. Something wrong with python 2/3 unicode/str types.\r\n\r\nI assume the astropy hook is only meant for releasing astropy itself? In that case you could do something like at the top of your entry point function https://github.com/zestsoftware/zest.releaser/blob/6.6.2/zest/releaser/preparedocs.py#L16\r\n\r\n    if data['name'] != 'astropy':\r\n        # We're available everywhere, but we're only intended for\r\n        # astropy internal usage.\r\n        return\r\n\r\nWould that make sense? (Or otherwise, could you look at https://github.com/zestsoftware/zest.releaser/issues/168 to see if there's something else?)"""
4628,135746163,saimn,eteq,2016-02-23 14:06:34,2016-03-09 08:16:23,2016-03-08 20:10:09,closed,,v1.1.2,14,Affects-release;Bug;table,https://api.github.com/repos/astropy/astropy/issues/4628,b'Disable initial ordering in jsviewer.',"b'By default dataTables sort in ascending order with the first column, though it\r\nseems more appropriate to keep the original table order.\r\n\r\nRef http://datatables.net/reference/option/order\r\n\r\nAlso ref #4404 which added an index column. When this column is present the\r\noriginal order is respected, but then a useless sort is done by dataTables so it\r\nis also a good idea to disable the initial sort.\r\n\r\ncc @eteq @taldcroft '"
4627,135673844,astrofrog,astrofrog,2016-02-23 08:49:29,2016-02-23 09:54:08,2016-02-23 09:54:08,closed,,,1,Bug;invalid;table;time,https://api.github.com/repos/astropy/astropy/issues/4627,"b""'Time' object has no attribute 'dtype' with Numpy 1.11.0rc1""","b'Installing Numpy 1.11.0rc1 from the git tag, and running the Astropy tests, I get:\r\n\r\n```python\r\ntable_types = <astropy.table.tests.conftest.table_types.<locals>.TableTypes object at 0x1178a04a8>\r\n\r\n    def test_table_info_stats(table_types):\r\n        """"""\r\n        Test the info() method of printing a summary of table column statistics\r\n        """"""\r\n        a = np.array([1, 2, 1, 2], dtype=\'int32\')\r\n        b = np.array([1, 2, 1, 2], dtype=\'float32\')\r\n        c = np.array([\'a\', \'c\', \'e\', \'f\'], dtype=\'|S1\')\r\n        d = time.Time([1, 2, 1, 2], format=\'mjd\')\r\n        t = table_types.Table([a, b, c, d], names=[\'a\', \'b\', \'c\', \'d\'])\r\n    \r\n        # option = \'stats\'\r\n        masked = \'masked=True \' if t.masked else \'\'\r\n        out = six.moves.cStringIO()\r\n>       t.info(\'stats\', out=out)\r\n\r\nastropy/table/tests/test_info.py:75: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\nastropy/table/info.py:121: in __call__\r\n    return table_info(self._parent, option, out)\r\nastropy/table/info.py:81: in table_info\r\n    infos.append(col.info(option, out=None))\r\nastropy/utils/data_info.py:343: in __call__\r\n    info.update(option(dat))\r\nastropy/utils/data_info.py:116: in func\r\n    out = func(dat)\r\n/Users/tom/miniconda3/envs/production35/lib/python3.5/site-packages/numpy-1.11.0rc1-py3.5-macosx-10.5-x86_64.egg/numpy/core/fromnumeric.py:2992: in std\r\n    keepdims=keepdims)\r\n/Users/tom/miniconda3/envs/production35/lib/python3.5/site-packages/numpy-1.11.0rc1-py3.5-macosx-10.5-x86_64.egg/numpy/core/_methods.py:124: in _std\r\n    keepdims=keepdims)\r\n/Users/tom/miniconda3/envs/production35/lib/python3.5/site-packages/numpy-1.11.0rc1-py3.5-macosx-10.5-x86_64.egg/numpy/core/_methods.py:96: in _var\r\n    arrmean = arrmean.dtype.type(arrmean / rcount)\r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\n\r\nself = <Time object: scale=\'utc\' format=\'mjd\' value=[ 1.  2.  1.  2.]>\r\nattr = \'dtype\'\r\n\r\n    def __getattr__(self, attr):\r\n        """"""\r\n            Get dynamic attributes to output format or do timescale conversion.\r\n            """"""\r\n        if attr in self.SCALES and self.scale is not None:\r\n            cache = self.cache[\'scale\']\r\n            if attr not in cache:\r\n                if attr == self.scale:\r\n                    tm = self\r\n                else:\r\n                    tm = self.replicate()\r\n                    tm._set_scale(attr)\r\n                cache[attr] = tm\r\n            return cache[attr]\r\n    \r\n        elif attr in self.FORMATS:\r\n            cache = self.cache[\'format\']\r\n            if attr not in cache:\r\n                if attr == self.format:\r\n                    tm = self\r\n                else:\r\n                    tm = self.replicate(format=attr)\r\n                value = tm._shaped_like_input(tm._time.to_value(parent=tm))\r\n                cache[attr] = value\r\n            return cache[attr]\r\n    \r\n        elif attr in TIME_SCALES:  # allowed ones done above (self.SCALES)\r\n            if self.scale is None:\r\n                raise ScaleValueError(""Cannot convert TimeDelta with ""\r\n                                      ""undefined scale to any defined scale."")\r\n            else:\r\n                raise ScaleValueError(""Cannot convert {0} with scale ""\r\n                                      ""\'{1}\' to scale \'{2}\'""\r\n                                      .format(self.__class__.__name__,\r\n                                              self.scale, attr))\r\n    \r\n        else:\r\n            # Should raise AttributeError\r\n>           return self.__getattribute__(attr)\r\nE           AttributeError: \'Time\' object has no attribute \'dtype\'\r\n```\r\n\r\n@taldcroft - do you see that too?'"
4613,134594083,astrofrog,eteq,2016-02-18 14:25:35,2016-03-10 22:32:36,2016-03-10 22:32:36,closed,,v1.1.2,11,Affects-release;Bug;Critical;Release;wcs,https://api.github.com/repos/astropy/astropy/issues/4613,b'Release 1.1.2 with WCSLIB 5.14 and also 1.0.9',"b'As described in https://github.com/astropy/astropy/pull/4579#issuecomment-185742656, there is a major bug in the WCSLIB bundled with Astropy 1.1 and 1.1.1 which caused #4612. This is fixed in master by https://github.com/astropy/astropy/pull/4579 but should be backported to the 1.1.x and we should then release 1.1.2, since this is a bad bug (CRVAL1 gets truncated to ~arcminute precision!).\r\n\r\n* [x] Add regression test for #4612 \r\n* [x] Add changelog entry\r\n* [x] Release 1.1.2\r\n\r\ncc @keflavich @nden @eteq'"
4601,132993875,taldcroft,taldcroft,2016-02-11 14:54:50,2016-02-12 12:00:42,2016-02-12 12:00:38,closed,mhvk,v1.1.2,3,Affects-release;Bug;Ready-for-final-review;table,https://api.github.com/repos/astropy/astropy/issues/4601,b'Fix bug when replacing column with mixin (e.g. Quantity)',
4595,132723080,hamogu,taldcroft,2016-02-10 15:05:29,2016-02-12 14:15:34,2016-02-12 14:15:34,closed,taldcroft,v1.0.9,3,Affects-release;Bug;io.ascii,https://api.github.com/repos/astropy/astropy/issues/4595,b'Fix reading of Latex tables with ``\\tabular`` tag in the first line',"b'See #4295 for discussion, but this does not fully resolve that\r\nissue.'"
4586,132252608,mcara,eteq,2016-02-08 20:47:38,2016-03-10 04:57:31,2016-03-10 04:57:31,closed,,,14,Bug;modeling,https://api.github.com/repos/astropy/astropy/issues/4586,b'A possible bug when creating a wrapper for setter in astropy.modeling.Parameter',"b'I wanted to create a setter with two parameters: value and model. However, initialization of my example model class fails (note: my model is really for testing purposes and is not intended to do anything logical) :\r\n\r\n```python\r\nfrom astropy.modeling import FittableModel\r\nfrom astropy.modeling.parameters import Parameter\r\n\r\ndef mysetter(val, model):\r\n  return val + 1 + model.d\r\n\r\nclass A(FittableModel):\r\n\r\n  outputs = (\'z\',)\r\n\r\n  x = Parameter(default=1, setter=mysetter)\r\n  y = Parameter(default=1)\r\n\r\n  def __init__(self, x, y, d):\r\n    self.d = d\r\n    super(A, self).__init__(x, y)\r\n\r\n  def evaluate(self, x, y):\r\n    # do something:\r\n    return x**2+y**2\r\n```\r\nThen\r\n```python\r\n>>> a=A(1,1,2)\r\nTraceback (innermost last):\r\n  File ""<console>"", line 1, in <module>\r\n  File ""<console>"", line 7, in __init__\r\n  File "".../site-packages/astropy/modeling/core.py"", line 683, in __init__\r\n    self._initialize_constraints(kwargs)\r\n  File "".../site-packages/astropy/modeling/core.py"", line 1336, in _initialize_constraints\r\n    param = getattr(self, param_name)\r\n  File "".../site-packages/astropy/modeling/parameters.py"", line 186, in __get__\r\n    parameter._bind(obj)\r\n  File "".../site-packages/astropy/modeling/parameters.py"", line 597, in _bind\r\n    self._setter = self._create_value_wrapper(self._setter, model)\r\n  File "".../site-packages/astropy/modeling/parameters.py"", line 675, in _create_value_wrapper\r\n    model_arg = inputs.args[1].name\r\nAttributeError: \'list\' object has no attribute \'args\'\r\n```\r\n\r\n@embray Is this a bug or am I doing something wrong?'"
4563,131138587,larrybradley,mhvk,2016-02-03 20:10:56,2016-03-08 23:06:53,2016-02-22 18:30:32,closed,mhvk,v1.1.2,9,Bug;units,https://api.github.com/repos/astropy/astropy/issues/4563,b'Fix latex repr for function units',"b'This PR fixes a bug in the latex represention in the juypter notebook of function units (e.g. mag, dex) where the left and right parentheses are not rendered in math mode.  For example, `u.mag(u.ct)` renders as `""mag\\left(ctight)""`.'"
4561,131086983,anchitjain1234,taldcroft,2016-02-03 16:58:01,2016-07-06 16:59:21,2016-02-08 12:03:43,closed,taldcroft,v1.0.9,12,Affects-release;Bug;io.ascii,https://api.github.com/repos/astropy/astropy/issues/4561,b'Remove new line characters after last row of data in ascii.latex.AASTex',b'For #3888. Also fixed ``AASTex`` tests in ``test_write.py`` to incorporate these changes.'
4547,130026633,mwcraig,astrofrog,2016-01-30 19:19:46,2016-01-31 10:34:02,2016-01-31 10:33:16,closed,,v1.0.9,4,Bug;Docs,https://api.github.com/repos/astropy/astropy/issues/4547,b'Turn off syntax highlighting in one of the known issues',"b""Several recent doc builds have failed because the most recent release of sphinx made this change[1]:\r\n\r\n> #1565: Sphinx will now emit a warning that highlighting was skipped if the syntax is incorrect for code-block, literalinclude and so on.\r\n\r\nThe known issue at https://github.com/astropy/astropy/blob/master/docs/known_issues.rst#L324 contains `u.Angstrom?` because the issue was in IPython. Because the question mark isn't standard python syntax, sphinx now generates a warning, which fails the test.\r\n\r\n@eteq @astrofrog -- how should this be milestoned?\r\n\r\n[1]: [Release 1.3.5 (released Jan 24, 2016)](http://www.sphinx-doc.org/en/stable/changes.html#release-1-3-5-released-jan-24-2016)"""
4543,129773440,astrofrog,mhvk,2016-01-29 14:01:32,2016-05-12 19:28:45,2016-03-08 21:01:50,closed,,v1.0.9,7,Affects-release;Bug;Docs;no-changelog-entry-needed;units;Upstream Fix Required,https://api.github.com/repos/astropy/astropy/issues/4543,b'numpy.linspace broken with Quantities',"b'Numpy\'s linspace used to work nicely with quantities:\r\n\r\n**Numpy 1.9.3**\r\n\r\n```python\r\n>>> np.linspace(-1 * u.m, 1 * u.m, 10)\r\n<Quantity [-1.        ,-0.77777778,-0.55555556,-0.33333333,-0.11111111,\r\n            0.11111111, 0.33333333, 0.55555556, 0.77777778, 1.        ] m>\r\n```\r\n\r\n**Numpy 1.10**\r\n\r\n```\r\n>>> np.linspace(-1 * u.m, 1 * u.m, 10)\r\nTraceback (most recent call last):\r\n  File ""<stdin>"", line 1, in <module>\r\n  File ""/Users/tom/miniconda3/envs/np110/lib/python2.7/site-packages/numpy/core/function_base.py"", line 115, in linspace\r\n    y[-1] = stop\r\nValueError: setting an array element with a sequence.\r\n```\r\n\r\n@mhvk - is this a bug in Astropy, or a bug introduced in Numpy?\r\n\r\nA lot of user code might rely on this, so we should get a workaround out soon unless it has to be fixed in Numpy.'"
4542,129744596,MSeifert04,astrofrog,2016-01-29 11:52:20,2016-06-12 16:27:18,2016-06-12 16:25:29,closed,,,13,Affects-release;Bug;coordinates;units,https://api.github.com/repos/astropy/astropy/issues/4542,b'Ipython Notebook and EarthLocation representation warning/error',"b'I tried to get the ``EarthLocation`` and print the representation of it and it works (it returns the correct representation) but it also raises an Error:\r\n\r\n```\r\nfrom astropy.coordinates import EarthLocation\r\na = EarthLocation.of_site(\'Paranal Observatory\')\r\na\r\n---------------------------------------------------------------------------\r\nValueError                                Traceback (most recent call last)\r\nC:\\Programming\\Anaconda\\lib\\site-packages\\IPython\\core\\formatters.py in __call__(self, obj)\r\n    339             method = _safe_get_formatter_method(obj, self.print_method)\r\n    340             if method is not None:\r\n--> 341                 return method()\r\n    342             return None\r\n    343         else:\r\n\r\nC:\\Programming\\Anaconda\\lib\\site-packages\\astropy\\units\\quantity.py in _repr_latex_(self)\r\n   1030                                               style=Latex.format_exponential_notation,\r\n   1031                                               max_line_width=np.inf,\r\n-> 1032                                               separator=\',~\')\r\n   1033                 latex_value = latex_value.replace(\'...\', r\'\\dots\')\r\n   1034             finally:\r\n\r\nC:\\Programming\\Anaconda\\lib\\site-packages\\numpy\\core\\arrayprint.py in array2string(a, max_line_width, precision, suppress_small, separator, prefix, style, formatter)\r\n    439         if isinstance(x, tuple):\r\n    440             x = _convert_arrays(x)\r\n--> 441         lst = style(x)\r\n    442     elif reduce(product, a.shape) == 0:\r\n    443         # treat as a null array if any of shape elements == 0\r\n\r\nC:\\Programming\\Anaconda\\lib\\site-packages\\astropy\\units\\format\\latex.py in format_exponential_notation(cls, val)\r\n    103             The value in exponential notation in a format suitable for LaTeX.\r\n    104         """"""\r\n--> 105         if np.isfinite(val):\r\n    106             m, ex = utils.split_mantissa_exponent(val)\r\n    107 \r\n\r\nValueError: The truth value of an array with more than one element is ambiguous. Use a.any() or a.all()\r\n<EarthLocation (1946618.261025452, -5467645.090548764, -2642488.447714588) m>\r\n```\r\n\r\nI\'m using astropy 1.1.1, numpy 1.10.1.'"
4540,129532559,embray,embray,2016-01-28 18:18:39,2016-01-28 21:35:06,2016-01-28 21:35:00,closed,,v1.0.9,1,Affects-release;Bug;io.fits,https://api.github.com/repos/astropy/astropy/issues/4540,b'PR #4539 backport to v1.0.x with Python 2.6 support',"b'This backports #4539 to the v1.0.x and v1.1.x branch (the latter can be done via cherry-pick).  This required some extra work to support Python 2.6, which is still supported on those branches.'"
4539,129260349,embray,embray,2016-01-27 20:30:30,2016-05-12 19:30:35,2016-01-28 21:37:54,closed,,v1.0.9,1,Affects-release;Bug;io.fits,https://api.github.com/repos/astropy/astropy/issues/4539,b'Fix more reference leaks involving FITS_rec',"b'This fixes additional reference leaks involving `FITS_rec` and `Column` that I mentioned in #520.  Originally I wasn\'t going to spend any more time on this for now, but I had an ""Aha!"" moment for how to accomplish this.\r\n\r\nBefore this is merged I want to update this with more in-line comments, since otherwise this looks pretty mystifying.  I also want to backport this fix the release branches, which means I need to use something other than `WeakSet` (which is not available on Python 2.6....though maybe there\'s a backport?)\r\n\r\n*Update:* Yes, there is a backport of WeakSet for Python 2.6: https://pypi.python.org/pypi/weakrefset  I\'ll see if I can get that going, and the make a separate PR for backporting this fix.'"
4528,128544204,astrofrog,astrofrog,2016-01-25 14:08:00,2016-01-28 13:36:16,2016-01-28 13:36:07,closed,,,3,Affects-dev;Bug;Effort-low;io.misc;Package-novice;testing,https://api.github.com/repos/astropy/astropy/issues/4528,b'test_metadata_too_large should be skipped if yaml is not installed',"b'Currently, ``test_metadata_too_large`` fails if h5py is installed but not yaml, so the ``skipif`` directive needs to be updated to also include a check of yaml.'"
4517,127949851,saimn,taldcroft,2016-01-21 15:29:26,2016-03-02 08:20:25,2016-03-01 18:47:40,closed,taldcroft,v1.0.9,14,Affects-release;Bug;io.ascii,https://api.github.com/repos/astropy/astropy/issues/4517,"b""Fix format conversion in the fast writer with plain format strings ('.2f')""","b""Plain format strings (`'.2f'`) were not supported by the fast writer, whereas it is by the basic writer: http://docs.astropy.org/en/latest/table/construct_table.html#format-specifier\r\n\r\nWith the fast writer I get this error:\r\n```\r\nastropy/io/ascii/cparser.pyx in astropy.io.ascii.cparser.FastWriter.write (astropy/io/ascii/cparser.c:18549)()\r\n\r\nastropy/io/ascii/cparser.pyx in astropy.io.ascii.cparser.auto_format_func (astropy/io/ascii/cparser.c:20888)()\r\n\r\nValueError: Unable to parse format string .1f\r\n```\r\n\r\nThe basic writer use `astropy.table.pprint._auto_format_func` to try the different formatting syntaxes. And the fast writer was reimplementing this in `cparser.pyx` (`auto_format_func`). The comment on these function is not so clear about why the function is duplicated (*Mimics pprint._auto_format_func for non-numpy values.*), and the function does less than `astropy.table.pprint._auto_format_func` so this commit just use this function. But maybe there is a good reason for this duplication ?\r\n\r\ncc @taldcroft \r\n\r\n"""
4514,127773971,embray,embray,2016-01-20 20:13:11,2016-01-22 16:52:00,2016-01-22 16:51:53,closed,,v1.0.9,1,Affects-release;Bug;io.fits;Priority-Medium,https://api.github.com/repos/astropy/astropy/issues/4514,"b'Fix deepcopy/pickle of binary table columns with the X, P, or Q format'","b'Incidentally, I came across this bug in testing to see if #520 is still an issue.'"
4496,126851220,olebole,olebole,2016-01-15 10:58:02,2016-05-30 08:50:24,2016-05-30 08:50:24,closed,,,6,Bug;Effort-medium;modeling;Package-intermediate;Priority-Low;Upstream Fix Required,https://api.github.com/repos/astropy/astropy/issues/4496,b'1.1+: `TestFittable1DModels::test_input1D` often crash on MIPS architecture',"b""On MIPS, I often get the following output while testing with Python-2.7:\r\n```\r\nastropy/modeling/tests/test_models.py::TestFittable1DModels::test_input1D[model_class1-test_parameters1] PASSED\r\nastropy/modeling/tests/test_models.py::TestFittable1DModels::test_input1D[model_class2-test_parameters2] PASSED\r\nastropy/modeling/tests/test_models.py::TestFittable1DModels::test_input1D[model_class3-test_parameters3] PASSED\r\nastropy/modeling/tests/test_models.py::TestFittable1DModels::test_input1D[model_class4-test_parameters4] PASSED\r\nastropy/modeling/tests/test_models.py::TestFittable1DModels::test_input1D[model_class5-test_parameters5] debian/rules:56: recipe for target 'test-python2.7' failed\r\n```\r\n([`debian/rules`](https://sources.debian.net/src/python-astropy/1.1.1-2/debian/rules/) is actually the Debian Makefile that called the test.) The numbers in `model_class5-test_parameters5` where the crash appears vary, I also already had a [successfull compilation of astropy 1.1](https://buildd.debian.org/status/fetch.php?pkg=python-astropy&arch=mips&ver=1.1-1&stamp=1450010607)\r\nAll build logs for MIPS are [here](https://buildd.debian.org/status/logs.php?pkg=python-astropy&arch=mips). The crashes only appear on the big endian machines; for little endian everything for version 1.1+ is [fine](https://buildd.debian.org/status/logs.php?pkg=python-astropy&arch=mipsel).\r\nIt is, however, probably not an endianness problem; other big-endian architectures (like s390) compile [without problems](https://buildd.debian.org/status/logs.php?pkg=python-astropy&arch=s390x).\r\n\r\nIt is not unlikely that this is a problem of our build machines (I already experienced some flakiness there); so the bug report is more for completeness -- and if others observe similar."""
4492,126693805,Xarthisius,embray,2016-01-14 16:40:24,2016-01-19 22:12:33,2016-01-19 22:12:33,closed,,v1.1.2,7,Affects-release;Bug;Priority-High;wcs,https://api.github.com/repos/astropy/astropy/issues/4492,b'Use list of keywords instead of generator (py3 fix)',"b""On Python 3 header.keys() will iterate instead of return a list, and\r\nwe're modifying the dictionary inside the loop. See also:\r\nhttps://github.com/spacetelescope/PyFITS/issues/74 https://github.com/astropy/astropy/commit/6d4552e450129a003842af9fafd7184b2c788fe8#commitcomment-15453711"""
4491,126684702,pllim,pllim,2016-01-14 16:00:13,2016-01-15 03:08:03,2016-01-15 03:06:01,closed,pllim,v1.2.0,4,Affects-dev;Bug;config;testing;utils;vo.conesearch,https://api.github.com/repos/astropy/astropy/issues/4491,b'Fixed failed remote data tests due to presence of old config items',"b'Fixed failed remote data tests due to presence of old configuration items. Cleaned up `conf` imports in `vo`. Minor PEP8 stuff in `vo`.\r\n\r\nThis is a follow up for #4446.\r\n\r\nIf there are no objections, I will merge by COB today because this holds up my work for Cone Search, which uses dev version of Astropy.'"
4489,126646456,olebole,embray,2016-01-14 12:37:06,2016-01-20 15:28:55,2016-01-20 15:26:18,closed,,v1.0.9,2,Affects-release;Bug;io.fits,https://api.github.com/repos/astropy/astropy/issues/4489,b'Fix a potentially uninitialized variable `io/fits/src/compressionmodule.c`',"b'If `open_from_hdu()` failed, a `goto fail` would execute this place without `Fptr` being initialized.'"
4482,126383540,anchitjain1234,embray,2016-01-13 10:05:48,2016-01-14 15:44:51,2016-01-14 15:08:59,closed,embray,v1.0.9,5,Affects-release;Bug;modeling,https://api.github.com/repos/astropy/astropy/issues/4482,b'Displaying Compound model expressions when printing compound model instances',"b""Fix for #4414 .\r\nExample\r\n```\r\nIn [23]:  g1 = models.Gaussian1D(1, 0, 0.2)\r\n\r\nIn [24]:  g2 = models.Gaussian1D(2.5, 0.5, 0.1)\r\n\r\nIn [25]:  gg = g1 + g2\r\n\r\nIn [26]:  print(gg)\r\nModel: CompoundModel0\r\nInputs: (u'x',)\r\nOutputs: (u'y',)\r\nModel set size: 1\r\nExpression: [0] + [1]\r\nComponents: \r\n    [0]: <Gaussian1D(amplitude=1.0, mean=0.0, stddev=0.2)>\r\n\r\n    [1]: <Gaussian1D(amplitude=2.5, mean=0.5, stddev=0.1)>\r\nParameters:\r\n    amplitude_0 mean_0 stddev_0 amplitude_1 mean_1 stddev_1\r\n    ----------- ------ -------- ----------- ------ --------\r\n            1.0    0.0      0.2         2.5    0.5      0.1\r\n```\r\n"""
4478,126196942,astrofrog,astrofrog,2016-01-12 14:55:03,2016-05-17 20:42:54,2016-01-12 16:10:22,closed,,v1.1.2,1,Affects-release;Bug;no-changelog-entry-needed;testing,https://api.github.com/repos/astropy/astropy/issues/4478,b'Fix missing import in astropy.tests.runner',"b""The bug is present in 1.1.2, but ``runner.py`` didn't exist in the 1.0.x series."""
4474,126110821,anchitjain1234,taldcroft,2016-01-12 06:44:52,2016-01-19 22:08:30,2016-01-18 13:30:59,closed,taldcroft,v1.1.2,23,Affects-release;Bug;io.ascii,https://api.github.com/repos/astropy/astropy/issues/4474,b'Fix for CDS reader requiring at least two description characters',b'#4437 fix'
4468,126029900,larrybradley,embray,2016-01-11 20:29:57,2016-02-03 17:59:00,2016-01-20 15:30:30,closed,,v1.0.9,8,Affects-release;Bug;visualization,https://api.github.com/repos/astropy/astropy/issues/4468,b'Fixes some issues with fits2bitmap',b'Fixes #4453 to allow extension names and numbers.'
4465,125860409,mhvk,mhvk,2016-01-11 01:51:32,2016-05-25 20:23:01,2016-05-25 20:23:01,closed,,,4,astropy-helpers;Bug;build;Docs,https://api.github.com/repos/astropy/astropy/issues/4465,b'Sphinx on python3 does not appear to be able to link to SyntaxWarning',"b'In the context of #4456, I was trying to move the documentation build on travis to python 3.5, but found that sphinx raised a couple of warnings that do not appear on python 2 (see https://travis-ci.org/astropy/astropy/builds/101435099). I confirmed locally that one gets\r\n```\r\nio/votable/references.txt:4: WARNING: py:class reference target not found: SyntaxWarning\r\nio/votable/references.txt:4: WARNING: py:class reference target not found: SyntaxWarning\r\nio/votable/references.txt:4: WARNING: py:class reference target not found: SyntaxWarning\r\nio/votable/references.txt:4: WARNING: py:class reference target not found: RuntimeWarning\r\nio/votable/references.txt:4: WARNING: py:class reference target not found: ValueError\r\n```\r\nThis seems to be in the context of creating the description for the classes [1] where the links to those warnings cannot be found and are thus missing. Could there be something wrong in the astropy helper setup? (e.g., `astropy_helpers/sphinx/conf.py` -- definitely not obvious to me...).\r\n\r\n\r\n[1] http://docs.astropy.org/en/latest/io/votable/api_exceptions.html#exception-utilities'"
4460,125750730,olebole,olebole,2016-01-09 10:12:56,2016-02-09 13:09:49,2016-02-09 13:09:49,closed,embray,,17,Affects-release;Bug;wcs,https://api.github.com/repos/astropy/astropy/issues/4460,b'1.1.1: Testing astropy.wcs fails with Python-3.5 and wcslib-5.12',"b""On Debian, the `astropy.wcs` tests fails reproducible with some corrupted memory:\r\n```\r\nastropy/wcs/tests/test_wcs.py::test_calc_footprint_3 PASSED\r\nastropy/wcs/tests/test_wcs.py::test_sip PASSED\r\nastropy/wcs/tests/test_wcs.py::test_printwcs PASSED\r\nastropy/wcs/tests/test_wcs.py::test_invalid_spherical PASSED\r\nastropy/wcs/tests/test_wcs.py::test_no_iteration PASSED\r\nastropy/wcs/tests/test_wcs.py::test_sip_tpv_agreement PASSED\r\nastropy/wcs/tests/test_wcs.py::test_tpv_copy PASSED\r\nastropy/wcs/tests/test_wcs.py::test_hst_wcs *** Error in `/usr/bin/python3.5':\r\n    free(): corrupted unsorted chunks: 0x000000000bc2d530 ***\r\n```\r\nI wonder whether this is connected with #4441. wcslib is compiled here with flex-2.5.39 (the current version in Debian).\r\n\r\nVersion 1.1 compiles without this problem, so this is a regression."""
4457,125593788,saimn,embray,2016-01-08 11:30:19,2016-01-13 18:46:21,2016-01-13 18:45:18,closed,,,5,Bug;Duplicate;io.ascii,https://api.github.com/repos/astropy/astropy/issues/4457,b'Doctest failures',"b'When running `python setup.py test -R -V` I get these failures : \r\n\r\n```\r\n================================================================================================================== FAILURES ===================================================================================================================\r\n_____________________________________________________________________________________________ [doctest] astropy.time.core.Time.get_delta_ut1_utc ______________________________________________________________________________________________\r\n1164             >>> status == TIME_BEFORE_IERS_RANGE\r\n1165             array([ True, False], dtype=bool)\r\n1166 \r\n1167         To use an updated IERS A bulletin to calculate UT1-UTC\r\n1168         (see also ``astropy.utils.iers``)::\r\n1169 \r\n1170             >>> from astropy.utils.iers import IERS_A, IERS_A_URL\r\n1171             >>> from astropy.utils.data import download_file\r\n1172             >>> t = Time([\'1974-01-01\', \'2000-01-01\'], scale=\'utc\')\r\n1173             >>> iers_a_file = download_file(IERS_A_URL,\r\nUNEXPECTED EXCEPTION: URLError(timeout(\'timed out\',),)\r\nTraceback (most recent call last):\r\n\r\n  File ""/usr/lib64/python2.7/doctest.py"", line 1315, in __run\r\n    compileflags, 1) in test.globs\r\n\r\n  File ""<doctest astropy.time.core.Time.get_delta_ut1_utc[7]>"", line 2, in <module>\r\n\r\n  File ""astropy/utils/data.py"", line 1104, in download_file\r\n    raise urllib.error.URLError(e)\r\n\r\nURLError: <urlopen error timed out>\r\n\r\nastropy/time/core.py:1173: UnexpectedException\r\n______________________________________________________________________________________________________ [doctest] docs/io/ascii/read.rst _______________________________________________________________________________________________________\r\n212   Tues     --   --\r\n213    Wed    1.1 snow\r\n214 \r\n215 If you want to replace the masked (missing) values with particular values, set the masked\r\n216 column ``fill_value`` attribute and then get the ""filled"" version of the table.  This\r\n217 looks like the following::\r\n218 \r\n219   >>> dat[\'precip\'].fill_value = -999\r\n220   >>> dat[\'type\'].fill_value = \'N/A\'\r\n221   >>> print(dat.filled())\r\nDifferences (unified diff with -expected +actual):\r\n    @@ -2,4 +2,4 @@\r\n     ---- ------ ----\r\n      Mon    1.5 rain\r\n    -Tues -999.0  N/A\r\n    +Tues    -99  N/A\r\n      Wed    1.1 snow\r\n\r\n/tmp/simon/astropy-test-XKzZAA/docs/io/ascii/read.rst:221: DocTestFailure\r\n_____________________________________________________________________________________________________ [doctest] docs/table/operations.rst _____________________________________________________________________________________________________\r\n268 Any time this happens then `~astropy.table.groups.TableGroups.aggregate`\r\n269 will issue a warning and then\r\n270 drop that column from the output result.  Note that the ``name``\r\n271 column is one of the ``keys`` used to determine the grouping so\r\n272 it is automatically ignored from aggregation.\r\n273 \r\n274 From a grouped table it is possible to select one or more columns on which\r\n275 to perform the aggregation::\r\n276 \r\n277   >>> print(obs_by_name[\'mag_b\'].groups.aggregate(np.mean))\r\nUNEXPECTED EXCEPTION: TypeError(u""Cannot aggregate column \'mag_b\' with type \'|S4\'"",)\r\nTraceback (most recent call last):\r\n\r\n  File ""/usr/lib64/python2.7/doctest.py"", line 1315, in __run\r\n    compileflags, 1) in test.globs\r\n\r\n  File ""<doctest operations.rst[22]>"", line 1, in <module>\r\n\r\n  File ""astropy/table/groups.py"", line 262, in aggregate\r\n    par_col.info.dtype))\r\n\r\nTypeError: Cannot aggregate column \'mag_b\' with type \'|S4\'\r\n\r\n/tmp/simon/astropy-test-XKzZAA/docs/table/operations.rst:277: UnexpectedException\r\n================================================================================ 3 failed, 10188 passed, 100 skipped, 43 xfailed, 2 xpassed in 433.32 seconds =================================================================================\r\n```\r\n\r\nThough I can\'t reproduce if I run only the tests for the files failing above with `python setup.py test -V -t docs/io/ascii/read.rst` or `python setup.py test -V -t docs/table/operations.rst`\r\n'"
4453,125450692,cdeil,embray,2016-01-07 17:52:22,2016-01-20 15:30:30,2016-01-20 15:30:30,closed,,v1.1.2,5,Affects-release;Bug;Effort-low;Package-intermediate;Priority-Low;visualization,https://api.github.com/repos/astropy/astropy/issues/4453,b'fits2bitmap errors',"b'I wanted to use the [fits2bitmap](http://astropy.readthedocs.org/en/latest/visualization/index.html?highlight=fits2bitmap#scripts) command line tool you wrote and ran into the following errors.\r\n\r\n```\r\n$ fits2bitmap emin_0010_emax_1000.fits.gz \r\nTraceback (most recent call last):\r\n  File ""/Users/deil/Library/Python/3.4/bin/fits2bitmap"", line 9, in <module>\r\n    load_entry_point(\'astropy==1.1.dev14232\', \'console_scripts\', \'fits2bitmap\')()\r\n  File ""/Users/deil/Library/Python/3.4/lib/python/site-packages/astropy-1.1.dev14232-py3.4-macosx-10.11-x86_64.egg/astropy/visualization/scripts/fits2bitmap.py"", line 138, in main\r\n    power=args.power, asinh_a=args.asinh_a, cmap=args.cmap)\r\n  File ""/Users/deil/Library/Python/3.4/lib/python/site-packages/astropy-1.1.dev14232-py3.4-macosx-10.11-x86_64.egg/astropy/visualization/scripts/fits2bitmap.py"", line 87, in fits2bitmap\r\n    max_percent=max_percent, percent=percent)\r\n  File ""/Users/deil/Library/Python/3.4/lib/python/site-packages/astropy-1.1.dev14232-py3.4-macosx-10.11-x86_64.egg/astropy/visualization/ui.py"", line 102, in scale_image\r\n    return (stretch + interval)(image, clip=clip)\r\n  File ""/Users/deil/Library/Python/3.4/lib/python/site-packages/astropy-1.1.dev14232-py3.4-macosx-10.11-x86_64.egg/astropy/visualization/transform.py"", line 37, in __call__\r\n    return self.transform_2(self.transform_1(values, clip=clip), clip=clip)\r\n  File ""/Users/deil/Library/Python/3.4/lib/python/site-packages/astropy-1.1.dev14232-py3.4-macosx-10.11-x86_64.egg/astropy/visualization/interval.py"", line 36, in __call__\r\n    values = np.subtract(values, float(vmin))\r\nTypeError: float() argument must be a string or a number, not \'NoneType\'\r\n```\r\n\r\nIt\'s not clear from the help page what the default `vmin` should be:\r\n```\r\n$ fits2bitmap -h\r\nusage: fits2bitmap [-h] [-e hdu] [-o filename] [--scale SCALE] [--power POWER]\r\n                   [--asinh_a ASINH_A] [--min_cut MIN_CUT] [--max_cut MAX_CUT]\r\n                   [--min_percent MIN_PERCENT] [--max_percent MAX_PERCENT]\r\n                   [--percent PERCENT] [--cmap colormap_name]\r\n                   filename [filename ...]\r\n\r\nCreate a bitmap file from a FITS image.\r\n\r\npositional arguments:\r\n  filename              Path to one or more FITS files to convert\r\n\r\noptional arguments:\r\n  -h, --help            show this help message and exit\r\n  -e hdu, --ext hdu     specify the HDU extension number or name\r\n  -o filename           Filename for the output image (Default is a PNG file\r\n                        with the same name as the FITS file)\r\n  --scale SCALE         Type of image scaling (""linear"", ""sqrt"", ""power"",\r\n                        ""log"", or ""asinh"")\r\n  --power POWER         Power index for ""power"" scaling\r\n  --asinh_a ASINH_A     The value in normalized image where the asinh curve\r\n                        transitions from linear to logarithmic behavior (used\r\n                        only for ""asinh"" scaling)\r\n  --min_cut MIN_CUT     The pixel value of the minimum cut level\r\n  --max_cut MAX_CUT     The pixel value of the maximum cut level\r\n  --min_percent MIN_PERCENT\r\n                        The percentile value used to determine the minimum cut\r\n                        level\r\n  --max_percent MAX_PERCENT\r\n                        The percentile value used to determine the maximum cut\r\n                        level\r\n  --percent PERCENT     The percentage of the image values used to determine\r\n                        the pixel values of the minimum and maximum cut levels\r\n  --cmap colormap_name  matplotlib color map name\r\n```\r\n\r\nBut given that it\'s an option, there should be default and not `None`, no?\r\n\r\nThe docs also suggest that `--ext` can take a name.\r\nBut this doesn\'t work:\r\n```\r\n$ fits2bitmap emin_0010_emax_1000.fits.gz --ext SIGNIFICANCE\r\nusage: fits2bitmap [-h] [-e hdu] [-o filename] [--scale SCALE] [--power POWER]\r\n                   [--asinh_a ASINH_A] [--min_cut MIN_CUT] [--max_cut MAX_CUT]\r\n                   [--min_percent MIN_PERCENT] [--max_percent MAX_PERCENT]\r\n                   [--percent PERCENT] [--cmap colormap_name]\r\n                   filename [filename ...]\r\nfits2bitmap: error: argument -e/--ext: invalid int value: \'SIGNIFICANCE\'\r\n```\r\n\r\nOverall more tests / a few examples for `fits2bitmap` would be good.\r\n\r\n@larrybradley - Do you have time for this in the coming days / weeks? If no, I could take a stab at fixing these issues and improving tests / docs a bit.'"
4452,125444888,embray,embray,2016-01-07 17:24:45,2016-01-07 21:16:44,2016-01-07 21:16:40,closed,,v1.0.8,2,Affects-release;Bug;Critical;Effort-low;io.fits;Package-intermediate;Priority-High,https://api.github.com/repos/astropy/astropy/issues/4452,"b""FITS string columns can't be updated inplace on Python 3""","b""Warren Hack pointed this bug out to me.  It can be reproduced fairly simply:\r\n\r\n```python\r\nIn [1]: from astropy.io import fits\r\n\r\nIn [2]: import numpy as np\r\n\r\nIn [3]: r = np.array([('abc',)], dtype=[('a', 'S3')])\r\n\r\nIn [4]: fits.writeto('bug.fits', r)\r\n\r\nIn [5]: fits.getdata('bug.fits')\r\nOut[5]: \r\nFITS_rec([('abc')], \r\n      dtype=(numpy.record, [('a', 'S3')]))\r\n\r\nIn [6]: with fits.open('bug.fits', mode='update') as f:\r\n   ...:     f[1].data['a'][0] = 'XYZ'\r\n   ...:     print(f[1].data)\r\n   ...:     \r\n[('XYZ')]\r\n\r\nIn [7]: fits.getdata('bug.fits')\r\nOut[7]: \r\nFITS_rec([('abc')], \r\n      dtype=(numpy.record, [('a', 'S3')]))\r\n```\r\n\r\nThis is a pretty critical bug since it can result in data loss, so I would like to get some patch releases out as soon as it's fixed.  I'm just mystified that none of the copious table tests caught it.\r\n\r\nIncidentally, I believe I was previously aware of this issue.  It comes from the new [`_ascii_encode`](https://github.com/astropy/astropy/pull/4228/files#diff-703b4b625a97b7b26058e3e859bfe8d8R1225) function introduced in #4228, which is supposed to be able to update an array in-place.  However, right at the beginning of the function it calls `.flatten()` on the operands, which (to my surprise) *always* makes a copy (as opposed to a view).  This was in order to support a case where the input and output operands were different shapes.  This could happen in the case of supporting `TDIMn` keywords.  \r\n\r\nThis is actually what originally motivated me, as part of the same PR, to go ahead and change how `TDIMn` keywords are handled (in fdc1501454300c2db3d7d06063604e80f2a61fcb) such that the input and output arrays do *not* have different shapes.  That would allow me to fix `_ascii_encode` to not use `.flatten()`.  But it seems I forgot to actually go back and fix that--I became mostly focused on the `TDIMn` changes and forgot all about it."""
4443,125382117,astrofrog,mhvk,2016-01-07 12:09:12,2016-01-07 21:23:46,2016-01-07 18:03:16,closed,,v1.0.8,6,Affects-dev;Bug;wcs,https://api.github.com/repos/astropy/astropy/issues/4443,b'Change loop variable name to avoid conflict with key= argument to function',"b'I think that by luck this may actually never cause issues, but this should definitely be fixed anyway.'"
4442,125207233,mhvk,mhvk,2016-01-06 16:08:33,2016-01-07 19:43:06,2016-01-07 19:43:03,closed,mhvk,v1.0.8,5,Affects-release;Bug;units,https://api.github.com/repos/astropy/astropy/issues/4442,b'Ensure in-place ptp works on Quantities.',b'See title; addresses part of #1273 by ensuring that numpy functions called via quantity methods get numpy arrays to store output in.'
4441,125156591,astrofrog,nden,2016-01-06 11:06:52,2016-02-12 15:22:32,2016-02-12 15:22:32,closed,,,28,Affects-release;Bug;Upstream Fix Required;wcs,https://api.github.com/repos/astropy/astropy/issues/4441,b'Memory leak in WCS.to_header()',"b""If I run the following example:\r\n\r\n```python\r\nfrom astropy.wcs import WCS\r\n\r\nfor i in range(10000):\r\n    wcs = WCS(naxis=3)\r\n    wcs.to_header()\r\n```\r\n\r\nI get the following RAM usage:\r\n\r\n![memleak](https://cloud.githubusercontent.com/assets/314716/12141213/898fe9a6-b465-11e5-83e4-2f276f82a50d.png)\r\n\r\nI'll try and investigate.\r\n\r\nThere is also a memory leak in ``WCS()`` itself:\r\n\r\n```python\r\nfrom astropy.wcs import WCS\r\n\r\nfor i in range(100000):\r\n    wcs = WCS(naxis=3)\r\n```\r\n\r\ngives:\r\n\r\n![memleak](https://cloud.githubusercontent.com/assets/314716/12141274/01dc796a-b466-11e5-994d-f92f66068fd0.png)\r\n\r\n(note that the memory leak in ``to_header`` is more significant)\r\n"""
4437,124981722,taldcroft,taldcroft,2016-01-05 14:53:58,2016-01-18 13:31:13,2016-01-18 13:31:13,closed,,,0,Bug;Effort-low;io.ascii;Package-novice;Priority-Medium,https://api.github.com/repos/astropy/astropy/issues/4437,b'io.ascii CDS reader requires at least 2 description characters',"b'In the ReadMe, the Explanations column must have at least two characters to get properly recognized by the regex.  A column descriptor with no characters at all after the name is skipped entirely.  The example below will not read correctly:\r\n```\r\n================================================================================\r\nByte-by-byte Description of file: *\r\n--------------------------------------------------------------------------------\r\n   Bytes Format Units  Label  Explanations\r\n--------------------------------------------------------------------------------\r\n  1-   2   I2    ---     year         To get true calendar year, add 1900 for \r\n                                      MJD<=51543 or add 2000 for MJD>=51544)\r\n  3-   4   I2    ---     month\r\n```\r\nHere is the regex:\r\n```\r\n        re_col_def = re.compile(r""""""\\s*\r\n                                    (?P<start> \\d+ \\s* -)? \\s*\r\n                                    (?P<end>   \\d+)        \\s+\r\n                                    (?P<format> [\\w.]+)     \\s+\r\n                                    (?P<units> \\S+)        \\s+\r\n                                    (?P<name>  \\S+)        \\s+  # the \\s+ means spaces are *required*\r\n                                    (?P<descr> \\S.+)"""""",  # \\S.+ means at least two chars are needed\r\n                                re.VERBOSE)\r\n```\r\nIt isn\'t clear if this explanation column is required, but we should make it optional just in case.'"
4427,124546429,taldcroft,mhvk,2016-01-01 14:25:30,2016-05-12 01:23:59,2016-05-12 01:23:59,closed,,,3,Bug;utils,https://api.github.com/repos/astropy/astropy/issues/4427,b'clear_download_cache() does not work in Python 2.7',"b""In Python 2.7, clearing the download cache runs into two problems, related to #4426.  First:\r\n```\r\nIn [1]: astro\r\n1.1\r\n\r\nIn [2]: from astropy.utils import data\r\n\r\nIn [3]: !rm -rf /Users/aldcroft/.astropy/cache\r\n\r\nIn [4]: f = data.download_file('http://google.com', cache=True)\r\nDownloading http://google.com [Done]\r\n\r\nIn [5]: data.clear_download_cache()\r\n\r\nIn [6]: f = data.download_file('http://google.com', cache=True)\r\n\r\nIn [7]: import os\r\n\r\nIn [8]: os.path.exists(f)\r\nOut[8]: False\r\n```\r\nThis is because the shelve file name *without* the `.db` extension is removed if it exists (which it doesn't, but that is not caught in the code).  This relates to a fundamental issue with shelve on Python 2, which is that you don't know (and cannot determine in general) the name of the backing database file(s).  This could be fixed by putting them into a sub-directory with a known name and then clobbering that.\r\n\r\nNext, if I try harder (with the actual URL) it generates an exception:\r\n```\r\nIn [9]: data.clear_download_cache('http://google.com')\r\n---------------------------------------------------------------------------\r\nOSError                                   Traceback (most recent call last)\r\n<ipython-input-9-1e289daec783> in <module>()\r\n----> 1 data.clear_download_cache('http://google.com')\r\n\r\n/Users/aldcroft/anaconda/lib/python2.7/site-packages/astropy/utils/data.pyc in clear_download_cache(hashorurl)\r\n   1268                     filepath = url2hash[hash_key]\r\n   1269                     del url2hash[hash_key]\r\n-> 1270                     os.unlink(filepath)\r\n   1271                 else:\r\n   1272                     msg = 'Could not find file or url {0}'\r\n\r\nOSError: [Errno 2] No such file or directory: '/Users/aldcroft/.astropy/cache/download/42afb277772da0f1a943e37fd64ec317'\r\n```\r\n\r\ncc: @eteq"""
4426,124545701,taldcroft,mhvk,2016-01-01 14:02:13,2016-05-12 01:23:59,2016-05-12 01:23:59,closed,,,0,Affects-release;Bug;utils,https://api.github.com/repos/astropy/astropy/issues/4426,b'Download cache shelve file is same on Python 2.7 and 3.5 => crash',"b'When downloading a file with caching, first on Python 2.7 and then subsequently on Python 3.5, it generates an exception.  This is apparently related to https://github.com/astropy/astropy/commit/2f1a83e97aff21a3b474b41c1e625b1e8a18ee86, which adds the suffix `\'.db\'` to the file name for Python 3 only, whereas is appears the shelve backend I happen to be using does the same on Python 2.\r\n```\r\n# PYTHON 2.7\r\n\r\nIn [1]: astro\r\n1.1\r\n\r\nIn [2]: from astropy.utils import data\r\n\r\nIn [5]: ls /Users/aldcroft/.astropy/cache\r\n\r\nIn [10]: !rm -rf /Users/aldcroft/.astropy/cache\r\n\r\nIn [11]: f = data.download_file(\'http://google.com\', cache=True)\r\nDownloading http://google.com [Done]\r\n\r\nIn [12]: ls -l /Users/aldcroft/.astropy/cache\r\ntotal 32\r\ndrwxr-xr-x  3 aldcroft  staff    102 Jan  1 08:36 download/\r\n-rw-r--r--  1 aldcroft  staff  16384 Jan  1 08:36 download_urlmap.db  <== SAME as for Python 3\r\n\r\n# PYTHON 3.5\r\n\r\nIn [2]: from astropy.utils import data\r\n\r\nIn [3]: f = data.download_file(\'http://google.com\', cache=True)\r\n---------------------------------------------------------------------------\r\nerror                                     Traceback (most recent call last)\r\n<ipython-input-3-0fbf18f99ba3> in <module>()\r\n----> 1 f = data.download_file(\'http://google.com\', cache=True)\r\n\r\n/Users/aldcroft/anaconda/envs/py35/lib/python3.5/site-packages/astropy/utils/data.py in download_file(remote_url, cache, show_progress, timeout)\r\n   1024         if cache:\r\n   1025             # We don\'t need to acquire the lock here, since we are only reading\r\n-> 1026             with _open_shelve(urlmapfn, True) as url2hash:\r\n   1027                 if url_key in url2hash:\r\n   1028                     return url2hash[url_key]\r\n\r\n/Users/aldcroft/anaconda/envs/py35/lib/python3.5/site-packages/astropy/utils/data.py in _open_shelve(shelffn, withclosing)\r\n   1324         shelf = shelve.open(shelffn, protocol=2)\r\n   1325     elif six.PY3:\r\n-> 1326         shelf = shelve.open(shelffn + \'.db\', protocol=2)\r\n   1327 \r\n   1328     if withclosing:\r\n\r\n/Users/aldcroft/anaconda/envs/py35/lib/python3.5/shelve.py in open(filename, flag, protocol, writeback)\r\n    241     """"""\r\n    242 \r\n--> 243     return DbfilenameShelf(filename, flag, protocol, writeback)\r\n\r\n/Users/aldcroft/anaconda/envs/py35/lib/python3.5/shelve.py in __init__(self, filename, flag, protocol, writeback)\r\n    225     def __init__(self, filename, flag=\'c\', protocol=None, writeback=False):\r\n    226         import dbm\r\n--> 227         Shelf.__init__(self, dbm.open(filename, flag), protocol, writeback)\r\n    228 \r\n    229 \r\n\r\n/Users/aldcroft/anaconda/envs/py35/lib/python3.5/dbm/__init__.py in open(file, flag, mode)\r\n     86     elif result == """":\r\n     87         # db type cannot be determined\r\n---> 88         raise error[0](""db type could not be determined"")\r\n     89     elif result not in _modules:\r\n     90         raise error[0](""db type is {0}, but the module is not ""\r\n\r\nerror: db type could not be determined\r\n```\r\n'"
4417,123983279,taldcroft,eteq,2015-12-27 15:26:06,2016-03-10 04:04:04,2016-03-10 04:04:04,closed,,v1.0.9,3,Affects-release;Bug;io.ascii;Ready-for-final-review,https://api.github.com/repos/astropy/astropy/issues/4417,b'Fix bug writing space-delimited file when table has empty fields',"b""This fixes a fairly severe bug wherein a table that has empty (or entirely spaces) string values will not round-trip when written out in a space-delimited ASCII table.  The root cause is that `csv.writer` does not include a quoting option to handle this case, which is needed when reading back using `skipinitialspace=True`.  First noted in #4415, with simpler demonstration below.\r\n\r\nThis PR does constitute an interface change in that the file output will change.  However, the original file output is broken so I think this change is for the better.  I have successfully cherry-picked this commit onto v1.0.7 and v1.1, so this bug fix should be backported.\r\n\r\n```\r\nIn [1]: from six.moves import cStringIO as StringIO\r\nIn [2]: out = StringIO()\r\nIn [3]: from astropy.table import Table\r\nIn [4]: t = Table([['hello'], [''], ['world']])\r\nIn [5]: t\r\nOut[5]: \r\n<Table length=1>\r\n col0 col1  col2\r\n str5 str1  str5\r\n----- ---- -----\r\nhello      world\r\n\r\nIn [7]: t.write(out, format='ascii')\r\nIn [9]: print(out.getvalue())\r\ncol0 col1 col2\r\nhello  world\r\n\r\nIn [10]: Table.read(out.getvalue(), format='ascii.basic', guess=False)\r\n---------------------------------------------------------------------------\r\nInconsistentTableError                    Traceback (most recent call last)\r\n\r\nInconsistentTableError: Number of header columns (3) inconsistent with data columns (2) at data line 0\r\nHeader values: ['col0', 'col1', 'col2']\r\nData values: ['hello', 'world']\r\n```\r\n\r\nCloses #4415."""
4415,123902219,keflavich,eteq,2015-12-26 00:41:53,2016-03-10 04:04:04,2016-03-10 04:04:04,closed,,,3,Bug;io.ascii,https://api.github.com/repos/astropy/astropy/issues/4415,b'ecsv round trip failure',"b'I\'ve encountered a round-trip failure using ecsv files:\r\n\r\n```\r\nfrom astroquery.vizier import Vizier\r\nfrom astropy.table import Table\r\n\r\nVizier.ROW_LIMIT = 1e5\r\nmoxc = Vizier.query_constraints(catalog=\'J/ApJS/213/1/table3\', GLON=\'>49.0 & < 51.0\',)\r\nw51moxc = moxc[0][(moxc[0][\'Region\'] == b\'W51A\')]\r\n\r\nw51moxc.write(\'w51_moxc.ecsv\', format=\'ascii.ecsv\')\r\nTable.read(\'w51_moxc.ecsv\', format=\'ascii.ecsv\')\r\n```\r\n\r\nresulting error:\r\n```\r\n## -- End pasted text --\r\nTraceback (most recent call last):\r\n  File ""<ipython-input-1-c25aaff5a254>"", line 9, in <module>\r\n    Table.read(\'w51_moxc.ecsv\', format=\'ascii.ecsv\')\r\n  File ""/Users/adam/repos/astropy/astropy/table/table.py"", line 2261, in read\r\n    return io_registry.read(cls, *args, **kwargs)\r\n  File ""/Users/adam/repos/astropy/astropy/io/registry.py"", line 332, in read\r\n    data = reader(*args, **kwargs)\r\n  File ""/Users/adam/repos/astropy/astropy/io/ascii/connect.py"", line 37, in io_read\r\n    return read(filename, format=format, **kwargs)\r\n  File ""/Users/adam/repos/astropy/astropy/io/ascii/ui.py"", line 339, in read\r\n    dat = reader.read(table)\r\n  File ""/Users/adam/repos/astropy/astropy/io/ascii/core.py"", line 1069, in read\r\n    raise InconsistentTableError(errmsg)\r\nInconsistentTableError: Number of header columns (56) inconsistent with data columns (55) at data line 0\r\nHeader values: [\'_RAJ2000\', \'_DEJ2000\', \'Region\', \'p\', \'CXOU\', \'Label\', \'RAJ2000\', \'DEJ2000\', \'ePos\', \'PosType\', \'no-m\', \'no-t\', \'no-s\', \'no-h\', \'KS_S\', \'KS_M\', \'ExpNom\', \'ExpFrac\', \'Ct\', \'Nobs\', \'Nph\', \'Fdis\', \'b_theta\', \'theta\', \'B_theta\', \'PSFf\', \'Area\', \'aglow\', \'Oct-t\', \'Oct-s\', \'Oct-h\', \'bgScl\', \'bgct-t\', \'bgct-s\', \'bgct-h\', \'b_Nct-t\', \'Nct-t\', \'B_Nct-t\', \'b_Nct-s\', \'Nct-s\', \'B_Nct-s\', \'b_Nct-h\', \'Nct-h\', \'B_Nct-h\', \'Area-t\', \'Area-s\', \'Area-h\', \'E-t\', \'E-s\', \'E-h\', \'XFlx-t\', \'XFlx-s\', \'XFlx-h\', \'EFlx-t\', \'EFlx-s\', \'EFlx-h\']\r\nData values: [\'290.900776\', \'14.469873\', \'W51A\', \'192336.18+142811.5\', \'p1_253\', \'290.900776\', \'14.469873\', \'0.43\', \'AE mean data\', \'0.0006\', \'0.0074\', \'0.0006\', \'--\', \'--\', \'--\', \'70214.7\', \'0.96\', \'0.00015\', \'2\', \'2\', \'0.00\', \'3.23\', \'3.23\', \'3.23\', \'0.89\', \'20.16\', \'--\', \'3\', \'3\', \'0\', \'305.1\', \'125\', \'48\', \'77\', \'1.1\', \'2.6\', \'4.7\', \'1.4\', \'2.8\', \'5.0\', \'--\', \'-0.3\', \'1.1\', \'225.06\', \'323.32\', \'200.43\', \'1.23\', \'1.23\', \'--\', \'1.6e-07\', \'1.2e-07\', \'-1.8e-08\', \'3e-16\', \'3e-16\', \'--\']\r\n```'"
4414,123825293,embray,embray,2015-12-24 18:11:49,2016-01-14 15:09:10,2016-01-14 15:09:10,closed,,,3,Affects-release;Bug;Effort-low;modeling;Package-intermediate;Priority-Medium,https://api.github.com/repos/astropy/astropy/issues/4414,b'Compound model expressions not displayed when printing compound model instances',"b""Currently, if you create a compound model class and then print it out, the display of the class shows the expression that was used to create it:\r\n\r\n```\r\n<class '__main__.CompoundModel1'>\r\nName: CompoundModel1\r\nInputs: ('x',)\r\nOutputs: ('y',)\r\nFittable parameters: ('amplitude_0', 'mean_0', 'stddev_0', 'amplitude_1', 'mean_1', 'stddev_1')\r\nExpression: [0] + [1]\r\nComponents: \r\n    [0]: <class 'astropy.modeling.functional_models.Gaussian1D'>\r\n    Name: Gaussian1D\r\n    Inputs: ('x',)\r\n    Outputs: ('y',)\r\n    Fittable parameters: ('amplitude', 'mean', 'stddev')\r\n\r\n    [1]: <class 'astropy.modeling.functional_models.Gaussian1D'>\r\n    Name: Gaussian1D\r\n    Inputs: ('x',)\r\n    Outputs: ('y',)\r\n    Fittable parameters: ('amplitude', 'mean', 'stddev')\r\n```\r\n\r\nHere the expression is shown as `[0] + [1]`, where the numeric indices are used for terseness.  One can then look at the list of components to see what each component of the expression is.  I've long held that this display could be improved, but I don't have a great idea for how, yet.  Please suggest something! \r\n\r\nBut anyways the point of this bug is that while the *class* shows the components properly, if you print a compound model instance it doesn't give any useful information about the components:\r\n\r\n```\r\nIn [23]: TwoGaussians = Gaussian1D + Gaussian1D\r\n\r\nIn [24]: gg = TwoGaussians(1, 0, 0.1, 1, 0.5, 0.3)\r\n\r\nIn [25]: print(gg)\r\nModel: CompoundModel2\r\nInputs: ('x',)\r\nOutputs: ('y',)\r\nModel set size: 1\r\nParameters:\r\n    amplitude_0 mean_0 stddev_0 amplitude_1 mean_1 stddev_1\r\n    ----------- ------ -------- ----------- ------ --------\r\n            1.0    0.0      0.1         1.0    0.5      0.3\r\n```\r\n\r\nOne can certainly print the class of the model like: `print(type(gg))`, but that's rather obtuse.  The model instance should show all the components just as the model class does.\r\n\r\nI think this should be easy enough for a novice to fix, with a bit of effort."""
4393,121780613,embray,embray,2015-12-11 19:54:22,2015-12-23 16:41:41,2015-12-23 16:41:38,closed,,v1.1.1,8,Affects-release;analytic_functions;Bug;Upstream Fix Required,https://api.github.com/repos/astropy/astropy/issues/4393,b'Workaround to bug in #4171',"b""Adds workaround for buggy implementations of expm1--shouldn't slow things down on platforms that don't have this bug, but will add a little overhead otherwise.\r\n\r\nThis attempts to add a workaround to the issue reported in #4171 rather than outright disable the tests.  This puts a workaround in the function implementations so that they still return the correct results (at the cost of a little extra overhead on affected platforms).\r\n\r\nThis is also a possible alternative to #4275."""
4392,121578961,nden,eteq,2015-12-10 21:16:06,2015-12-12 00:48:38,2015-12-10 23:18:09,closed,,v1.1.0,7,Affects-dev;Bug;wcs,https://api.github.com/repos/astropy/astropy/issues/4392,"b'Keep ""-SIP"" in ctype when passed to wcslib'","b'This is a fix for #4387. My understanding is that the presence of SIP coefficients in the header is the only thing that wcslib looks for in the header to determine whether to create a SIP distortion. It ignores `CTYPE` as well as `A_ORDER`, ...\r\n\r\n`astropy.wcs` does SIP corrections in the wrapper, not in the core `wcslib`. So it must strip the coefficients from the header before passing it to `wcslib`. However, `CTYPE` should be kept unchanged.'"
4387,121359790,nden,eteq,2015-12-09 22:53:05,2015-12-11 02:26:18,2015-12-10 23:30:11,closed,,v1.1.0,14,Bug;wcs,https://api.github.com/repos/astropy/astropy/issues/4387,b'astropy.wcs does not read ctype correctly in the presence of SIP distortion',"b""Here's a failing example using one of the test data files:\r\n\r\n```\r\nh = fits.Header.fromfile('astropy/wcs/tests/data/sip.fits')\r\nh['CTYPE*']\r\n \r\nCTYPE1  = 'RA---TAN-SIP'       / Right ascension, gnomonic projection           \r\nCTYPE2  = 'DEC--TAN-SIP'       / Declination, gnomonic projection      \r\n\r\nw = wcs.WCS(h)\r\nw.wcs.ctype\r\n ['RA---TAN', 'DEC--TAN']\r\n```\r\nIt still applies the transformation, it simply deletes `SIP` from ctype."""
4382,121035597,eteq,pllim,2015-12-08 15:49:34,2016-04-07 14:03:56,2016-04-07 14:03:56,closed,pllim,,6,Bug;Priority-Low;testing;vo;vo.conesearch,https://api.github.com/repos/astropy/astropy/issues/4382,b'test_conesearch predictions non-deterministically fail',"b'I\'ve been noticing repeated instances of failures for `test_conesearch.py` along the lines of the traceback shown below.  I *suspect* this is because the service sometimes provides different answers depending on which mirror you get/whatever randomness applies to vizier, which yields different predictions.  But it might also be a sign of some sort of transient real error?\r\n\r\nTwo things I have noticed that may or may not be helpful:\r\n1. non-deterministic.  Sometimes I doesn\'t happen even if I run the test many times over, other times it\'s semi-repeatable.  It may also matter what network you\'re on (which probably helps determine what mirror of the server gets found first?)\r\n2. Seems to mostly (only?) happen on py 3.x\r\n\r\n(Note that this is a `remote_data` test, so to try to reproduce it you\'ll need that)\r\n\r\n@pllim, any ideas?\r\n\r\n```\r\n_______________ TestConeSearch.test_prediction[center1-radius1] ________________\r\n\r\nself = <astropy.vo.client.tests.test_conesearch.TestConeSearch object at 0x7f02f6530748>\r\ncenter = <ICRS Coordinate: (ra, dec) in deg\r\n    (0.0, 0.0)>\r\nradius = <Quantity 0.8 deg>\r\n\r\n    @pytest.mark.parametrize((\'center\', \'radius\'),\r\n                             [((SCS_RA, SCS_DEC), 0.8),\r\n                              (SCS_CENTER, 0.8 * u.degree)])\r\n    def test_prediction(self,  center, radius):\r\n        """"""Prediction tests are not very accurate but will have to do.""""""\r\n        t_1, tab_1 = conesearch.conesearch_timer(\r\n            center, radius, catalog_db=self.url,\r\n            pedantic=self.pedantic, verbose=self.verbose)\r\n        n_1 = tab_1.array.size\r\n    \r\n        t_2, n_2 = conesearch.predict_search(\r\n            self.url, center, radius,\r\n            pedantic=self.pedantic, verbose=self.verbose)\r\n    \r\n        assert n_2 > 0 and n_2 <= n_1 * 1.5\r\n>       assert t_2 > 0 and t_2 <= t_1 * 1.5\r\nE       assert (2.450000736077996 > 0 and 2.450000736077996 <= (1.5584416389465332 * 1.5))\r\n\r\nastropy/vo/client/tests/test_conesearch.py:182: AssertionError\r\n----------------------------- Captured stdout call -----------------------------\r\nINFO: conesearch_timer took 1.5584416389465332 s on AVERAGE for 1 call(s). [astropy.utils.timer]\r\n\r\n```'"
4379,120907501,eteq,embray,2015-12-08 01:18:06,2016-01-07 20:07:00,2016-01-07 20:07:00,closed,,v1.0.8,4,Affects-release;Bug;utils,https://api.github.com/repos/astropy/astropy/issues/4379,b'Fix find_api_page on py 3.x',"b""This closes #4378 by re-implementing the innards of `find_api_page` so that it doesn't use `HTTPResponse.readline`, which seems to be incompatible with `read`.\r\n\r\nThis should be backported to both v1.1.x and 1.0.x"""
4378,120902093,eteq,embray,2015-12-08 00:32:52,2016-01-07 20:07:00,2016-01-07 20:07:00,closed,eteq,v1.0.8,1,Affects-release;Bug,https://api.github.com/repos/astropy/astropy/issues/4378,b'find_api_page fails in py3.x',"b""The `astropy.utils.misc.find_api_page` function's test (`astropy.utils.tests.test_misc.test_api_lookup`) seems to be failing in py 3.x. I suspect this has been long-missed because it's a ``remote-data`` test and only fails in py3.x.\r\n\r\nThe problem seems to be that ``http.client.HTTPResponse`` (what `urlopen` returns in py3.x) doesn't behave well with `readline`.  If you do a `readline` followed by `read`, you get a `IncompleteRead` error.  Not sure if this is a feature or a bug, but it's pretty straightforward to patch it, so I'll do that shortly."""
4371,120315752,eteq,eteq,2015-12-04 02:04:03,2015-12-04 18:23:56,2015-12-04 18:20:15,closed,,v1.1.0,5,Affects-dev;Bug;coordinates,https://api.github.com/repos/astropy/astropy/issues/4371,b'Fix 4358 (replaces 4367)',"b'This PR is a replacement for #4367 - it starts from #4367 and fixes it to work both ways (ICRS->Ecliptic *and* vice versa), as well as adding the `GeocentricTrueEcliptic` frame to the tests (and note that doing this revealed a typo bug which is also fixed).\r\n\r\nSo this closes #4367 and closes #4358'"
4366,119979743,keflavich,eteq,2015-12-02 16:22:56,2016-03-10 05:56:50,2016-03-10 04:45:46,closed,,v1.0.9,11,Bug;convolution,https://api.github.com/repos/astropy/astropy/issues/4366,"b'Fix convolve_fft_parameters psf_pad and fft_pad, which were being ignored'","b'The parameters `psf_pad` and `fft_pad` were being ignored if `boundary!=None`,\nwhich was intentional but was opaque to users.  Now, errors will be raised if\nincompatible parameters are passed and the keywords will be respected when\nspecified.\n\n`psf_pad`, `fft_pad`, and `boundary` are somewhat redundant, but there is good\nreason to include both: `boundary` controls something ""physical"", i.e., it determines\nwhat the edge effects will be.  `psf_pad` is closely related to this, and perhaps\nis genuinely redundant.  However, both `psf_pad` and `fft_pad` can seriously affect\nthe performance of the convolution in non-obvious ways.  Therefore, I think they\nall deserve to be included.\n\nI have also included as a string a report on the performance of `convolve_fft`\nunder different conditions.  This came up because a user was complaining they\nwere waiting forever for a convolution of a 6000x6000 with a 3000x3000 array,\nwhich with the default parameters will create a set of 16384x16384 arrays!'"
4363,119819356,embray,astrofrog,2015-12-01 22:09:54,2016-04-19 10:05:50,2016-04-19 10:05:49,closed,embray,v1.2.0,15,Affects-release;Bug;Effort-medium;Enhancement;io.ascii;Package-intermediate;Priority-Low,https://api.github.com/repos/astropy/astropy/issues/4363,b'FastReader (with use_fast_converter=False) can fail on non-US locales',"b""This is actually the issue that led me to discover #4362 (or perhaps vice-versa).\r\n\r\nBecause FastReader uses `strtod` it will no properly parse floats when the user's locale is set to one that uses commas instead of dots for decimal notation (e.g. fr_FR).  This isn't a problem with `use_fast_converter` since it's hard-coded to pass `'.'` to `xstrtod` as the decimal character.\r\n\r\nThis could be fixed either by temporarily changing the locale when going into the reader.  Or possibly by just detecting the locale setting and doing a find replace if necessary (I think this is more what WCSLIB does)."""
4361,119796047,hamogu,embray,2015-12-01 20:03:28,2015-12-29 21:33:32,2015-12-29 21:33:32,closed,,v1.0.8,6,Affects-dev;Bug;Docs;Effort-low;Package-intermediate;Priority-Low,https://api.github.com/repos/astropy/astropy/issues/4361,"b'Some ""edit on github"" links lead to 404'","b'Look at, e.g. http://astropy.readthedocs.org/en/latest/api/astropy.stats.poisson_conf_interval.html#astropy.stats.poisson_conf_interval\r\n\r\nThere is a link in the top left saying [edit on github]. This link **does** work.\r\nHowever, there is also a ""edit this page on github"" link in the footer at the very bottom of the page. That link does **not** work. Presumably, that\'s true for all autogenerated API pages.\r\nI don\'t think it\'s urgent or really a problem, but I open an issue here, so that we can look at it, if we ever modify the sphinx templates again.\r\n\r\n'"
4358,119753304,dcunning11235,eteq,2015-12-01 16:22:42,2015-12-04 18:21:55,2015-12-04 18:21:00,closed,,v1.1.0,5,Affects-dev;Bug;coordinates,https://api.github.com/repos/astropy/astropy/issues/4358,b'Units error in icrs_to_helioecliptic (in icrs_to_helioecliptic)',"b'In [line 76 of ecliptic_transfprms.py](https://github.com/astropy/astropy/blob/v1.1.x/astropy/coordinates/builtin_frames/ecliptic_transforms.py#L76) there appears to be a bug:\r\n\r\nunits.au is multiplied with a result and then added to a scalar; I believe there are simply missing parentheses here.  This then creates/reveals a dimensions issue (at least when used with via calling `transform_to` on an array.)   What worked for me was adding two changes.  Replacing the current line 76 with:\r\n\r\n`heliocart = ((from_coo.cartesian.xyz).T + delta_bary_to_helio) * u.au`\r\n\r\nand then updating line 82 to be:\r\n\r\n`newrepr = cartrepr_from_matmul(rmat, ICRS(CartesianRepresentation(heliocart.T)))`\r\n\r\nI did some spot checking of this on a transformed array of coordinates and the handful I checked appear correct.'"
4354,119303798,astrofrog,eteq,2015-11-28 16:06:45,2015-12-02 21:44:55,2015-12-02 21:44:55,closed,,,1,Bug;units,https://api.github.com/repos/astropy/astropy/issues/4354,b'Electric charge base unit in cgs should not be Coulomb',"b'The following example returns a unit of Coulomb-centimeter, but Coulomb is an SI unit:\r\n\r\n```\r\nIn [1]: from astropy import units as u\r\n\r\nIn [2]: u.debye.decompose(bases=u.cgs.bases)\r\nOut[2]: Unit(""3.33333e-28 C cm"")\r\n```\r\n\r\n'"
4352,118994830,olebole,olebole,2015-11-26 08:18:08,2015-12-08 13:24:41,2015-12-08 13:24:41,closed,,,6,Bug;io.votable;testing,https://api.github.com/repos/astropy/astropy/issues/4352,b'1.1rc1: vo_test.py::TestThroughBinary::test_string_test fails on i386',"b""On i386, `vo_test.py::TestThroughBinary::test_string_test` fails without any further information ([full log](https://buildd.debian.org/status/fetch.php?pkg=python-astropy&arch=i386&ver=1.1~rc1-1&stamp=1448403295)):\r\n```\r\nastropy/io/votable/tests/vo_test.py::TestThroughTableData::test_schema PASSED\r\nastropy/io/votable/tests/vo_test.py::TestThroughBinary::test_string_test debian/rules:56: recipe for target 'test-python2.7' failed\r\nmake[1]: *** [test-python2.7] Error 245\r\n```\r\nDuring the test run, this happens when the test is executed the second time -- it seems that many VO tests are execute twice (for the same Python version).\r\nSince on another i386 architecture (GNU HURD) [all tests are fine](https://buildd.debian.org/status/fetch.php?pkg=python-astropy&arch=hurd-i386&ver=1.1~rc1-1&stamp=1448424911), I am not sure whether this is reproducible; it may be a one-time problem with our builder."""
4350,118921629,embray,embray,2015-11-25 20:49:22,2015-12-01 17:53:47,2015-12-01 17:53:47,closed,,v1.0.7,7,Affects-release;Bug;io.ascii,https://api.github.com/repos/astropy/astropy/issues/4350,"b""Fast ASCII writer doesn't correctly handle bytes columns on Python 3""","b'In the process of updating #3086 I got stuck on this test:\r\n\r\nhttps://github.com/astropy/astropy/blame/v1.1rc1/docs/io/ascii/write.rst#L79\r\n\r\nOn Python 3, the string column becomes bytes type, and outputs with the ugly `b\'\'` formatting:\r\n\r\n```\r\nIn [1]: import numpy as np\r\n\r\nIn [2]: from astropy.io import ascii\r\n\r\nIn [3]: data = np.array([(1, 2., \'Hello\'), (2, 3., ""World"")], dtype=(\'i4,f4,a10\'))\r\n\r\nIn [4]: ascii.write(data)\r\nf0 f1 f2\r\n1 2.0 b\'Hello\'\r\n2 3.0 b\'World\'\r\n```\r\n\r\nThis is only with the fast writer:\r\n\r\n```\r\nIn [5]: ascii.write(data, fast_writer=False)\r\nf0 f1 f2\r\n1 2.0 Hello\r\n2 3.0 World\r\n```\r\n\r\nIt seems to have to do with the use of `csv.writer`, for which this is the default behavior for bytes values.  I see the normal writer has a workaround for this, but I don\'t know if or how that same workaround should be implemented for the fast writer (or if it should just do something else).'"
4329,118051193,olebole,eteq,2015-11-20 14:24:04,2015-11-23 12:53:43,2015-11-22 20:47:03,closed,,,7,Bug;visualization,https://api.github.com/repos/astropy/astropy/issues/4329,b'1.1b1 fails on test_hist_autobin',"b'When buildng the 1.1b1 release, the `test_hist_autobin` function fails on Python 2.7:\r\n```\r\n=================================== FAILURES ===================================\r\n______________________________ test_hist_autobin _______________________________\r\n\r\nrseed = 0\r\n\r\n    @pytest.mark.skipif(\'not HAS_PLT\')\r\n    def test_hist_autobin(rseed=0):\r\n        rng = np.random.RandomState(rseed)\r\n        x = rng.randn(100)\r\n    \r\n        for bintype in [10, np.arange(-3, 3, 10),\r\n                        \'knuth\', \'scott\', \'freedman\', \'blocks\']:\r\n            for range in [None, (-3, 3)]:\r\n                n1, bins1 = histogram(x, bintype, range=range)\r\n>               n2, bins2, patches = hist(x, bintype, range=range)\r\n\r\nastropy/visualization/tests/test_histogram.py:57: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\nastropy/visualization/hist.py:63: in hist\r\n    return ax.hist(x, bins, **kwargs)\r\n/usr/lib/python2.7/dist-packages/matplotlib/__init__.py:1808: in inner\r\n    return func(ax, *args, **kwargs)\r\n/usr/lib/python2.7/dist-packages/matplotlib/axes/_axes.py:6082: in hist\r\n    color=c, **{bottom_kwarg: bottom})\r\n/usr/lib/python2.7/dist-packages/matplotlib/__init__.py:1808: in inner\r\n    return func(ax, *args, **kwargs)\r\nself = <matplotlib.axes._subplots.AxesSubplot object at 0x7fe18db4ecd0>\r\nleft = array([], dtype=float64), height = array([], dtype=float64)\r\nwidth = array([], dtype=float64), bottom = array([], dtype=float64), kwargs = {}\r\ncolor = [array([ 0.  ,  0.75,  0.75,  1.  ])], edgecolor = []\r\nlinewidth = [None], tick_label = [None], label_ticks_flag = False, xerr = None\r\nyerr = None\r\n\r\n    @unpack_labeled_data(replace_names=[""left"", ""height"", ""width"", ""bottom"",\r\n                                        ""color"", ""edgecolor"", ""linewidth"",\r\n                                        ""tick_label"", ""xerr"", ""yerr"",\r\n                                        ""ecolor""],\r\n                         label_namer=None)\r\n    @docstring.dedent_interpd\r\n    def bar(self, left, height, width=0.8, bottom=None, **kwargs):\r\n        """"""[...]""""""\r\n    [...]\r\n        if len(tick_label) != nbars:\r\n            raise ValueError(""incompatible sizes: argument \'tick_label\' ""\r\n>                            ""must be length %d or string"" % nbars)\r\nE           ValueError: incompatible sizes: argument \'tick_label\' must be length 0 or string\r\n\r\n/usr/lib/python2.7/dist-packages/matplotlib/axes/_axes.py:2100: ValueError\r\n```'"
4312,117041944,taldcroft,mhvk,2015-11-16 03:03:30,2015-11-17 18:55:45,2015-11-17 18:55:45,closed,mhvk,v1.0.7,11,Affects-release;Bug;time,https://api.github.com/repos/astropy/astropy/issues/4312,b'Time value attribute incorrect when scale != epoch_scale',"b""For `TimeFromEpoch` subclasses there is a bug with the `value` attribute:\r\n```\r\nIn [3]: x = Time(1, format='unix', scale='tt')  # epoch_scale is UTC\r\n\r\nIn [4]: x.value\r\nOut[4]: 41.184082029998414\r\n\r\nIn [5]: x.unix\r\nOut[5]: 0.9999999999921627\r\n```\r\nThe problem is that the comment below in `TimeFormat.value` doesn't apply when accessing `Time.value` directly (it *is* correct when `Time.__getattr__` gets run for a format attribute):\r\n```\r\n    def value(self):\r\n        # when we get here, getattr will already have ensured our scale\r\n        # equals epoch scale, so we can just subtract the epoch and convert\r\n        time_from_epoch = ((self.jd1 - self.epoch.jd1) +\r\n                           (self.jd2 - self.epoch.jd2)) / self.unit\r\n        return time_from_epoch\r\n```\r\nOptions include patching `Time.value` to do the same munging that `Time.__getattr__` does, or fixing the `TimeFromEpoch.value` property.  The latter is conceptually nicer, but I think it requires that the contained `TimeFormat` object or `TimeFormat.value()` method has access to the parent `Time` object since scale transformations take place at that level.\r\n\r\nIt looks like it might be pretty clean to change the `TimeFormat.value` property into a normal method that takes an optional `parent` arg.  Since `Time._time` is not public this should be OK, and the footprint of this change actually looks quite small.\r\n\r\nThe `Time.__getattr__` munging definitely a hack since it requires that `Time` has specific knowledge about one kind of `TimeFormat` object:\r\n```\r\n        elif attr in self.FORMATS:\r\n            tm = self.replicate(format=attr)\r\n            if hasattr(self.FORMATS[attr], 'epoch_scale'):\r\n                tm._set_scale(self.FORMATS[attr].epoch_scale)\r\n            return tm.value\r\n```\r\n\r\n"""
4307,116445957,yannick1974,embray,2015-11-11 23:40:45,2015-11-20 21:41:34,2015-11-20 21:41:31,closed,,v1.0.7,20,Affects-release;Bug;io.fits,https://api.github.com/repos/astropy/astropy/issues/4307,b'Saving large table FITS may lead to a truncated file',"b'While handling large catalogue FITS files, I sometimes encounter problems when saving them: the newly saved file is truncated whereas no error is raised at saving time. For instance, I have a 37GiB file and if I open it and save it just after, this leads to a 2GiB file.\r\n\r\nI tried to write a script to generate a big FITS file and expose the bug. During this, I found that if read a big file and count the rows before saving it, the newly save file is OK.\r\n\r\nHere is the script. Of course, you need a lot of memory and a lot of disk space to run it.\r\n\r\n```python\r\nimport os\r\n\r\nimport numpy as np\r\nfrom astropy.io import fits\r\n\r\n# Let\'s generate a BIG fits file (~25 GiB).\r\nprint(""> Generating a 500x13,000,000 random table FITS file."")\r\nlist_cols = []\r\nfor i in range(500):\r\n    list_cols.append(\r\n        fits.Column(\r\n            name=""{}"".format(i),\r\n            format=\'E\',\r\n            array=np.random.random(13000000)\r\n        )\r\n    )\r\ncols = fits.ColDefs(list_cols)\r\nhdu = fits.BinTableHDU.from_columns(cols)\r\nhdu.writeto(""bigfile.fits"")\r\nprint(""> bigfile.fits file saved."")\r\n\r\n# If we count read the file and count the rows before saving it to another\r\n# file, everything is OK.\r\nprint(""> Read. Count rows. Save."")\r\nhdu_list = fits.open(""bigfile.fits"")\r\nprint(""bigfile.fits: {} rows"".format(len(hdu_list[1].data)))\r\nhdu_list.writeto(""bigfile2.fits"")\r\nprint(""> bigfile2.fits saved."")\r\n\r\nprint(""> Comparing the file sizes."")\r\nprint(""bigfile.fits: {}"".format(os.stat(""bigfile.fits"").st_size))\r\nprint(""bigfile2.fits: {}"".format(os.stat(""bigfile2.fits"").st_size))\r\n\r\nprint(""Reading bigfile2.fits and counting the rows."")\r\nhdu_list = fits.open(""bigfile2.fits"")\r\nprint(""bigfile2.fits: {} rows"".format(len(hdu_list[1].data)))\r\n\r\n# If we read the file and right after save it to another file, the later is\r\n# truncated.\r\nprint(""> Read the file and save it to another file just after."")\r\nhdu_list = fits.open(""bigfile.fits"")\r\nhdu_list.writeto(""bigfile3.fits"")\r\nprint(""> bigfile3.fits saved."")\r\n\r\nprint(""> Comparing the file sizes."")\r\nprint(""bigfile.fits: {}"".format(os.stat(""bigfile.fits"").st_size))\r\nprint(""bigfile3.fits: {}"".format(os.stat(""bigfile3.fits"").st_size))\r\n\r\nprint(""> Reading bigfile3.fits produce a warning."")\r\nhdu_list = fits.open(""bigfile3.fits"")  # Produces a warning.\r\nprint(""> Accessing the data raises an error."")\r\nprint(""bigfile3.fits: {} rows"".format(len(hdu_list[1].data)))  # Fails.\r\n```\r\n\r\nThe output of the script is:\r\n```\r\n> Generating a 500x13,000,000 random table FITS file.\r\n> bigfile.fits file saved.\r\n> Read. Count rows. Save.\r\nbigfile.fits: 13000000 rows\r\n> bigfile2.fits saved.\r\n> Comparing the file sizes.\r\nbigfile.fits: 26000087040\r\nbigfile2.fits: 26000087040\r\nReading bigfile2.fits and counting the rows.\r\nbigfile2.fits: 13000000 rows\r\n> Read the file and save it to another file just after.\r\n> bigfile3.fits saved.\r\n> Comparing the file sizes.\r\nbigfile.fits: 26000087040\r\nbigfile3.fits: 2147565952\r\n> Reading bigfile3.fits produce a warning.\r\nWARNING: File may have been truncated: actual file length (2147565952) is smaller than the expected size (26000087040) [astropy.io.fits.file]\r\n> Accessing the data raises an error.\r\nTraceback (most recent call last):\r\n  File ""/opt/anaconda3/lib/python3.4/site-packages/astropy/utils/decorators.py"", line 339, in __get__\r\n    return obj.__dict__[self._key]\r\nKeyError: \'data\'\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\nTraceback (most recent call last):\r\n  File ""big_table_FITS_bug.py"", line 52, in <module>\r\n    print(""bigfile3.fits: {} rows"".format(len(hdu_list[1].data)))  # Fails.\r\n  File ""/opt/anaconda3/lib/python3.4/site-packages/astropy/utils/decorators.py"", line 341, in __get__\r\n    val = self._fget(obj)\r\n  File ""/opt/anaconda3/lib/python3.4/site-packages/astropy/io/fits/hdu/table.py"", line 399, in data\r\n    data = self._get_tbdata()\r\n  File ""/opt/anaconda3/lib/python3.4/site-packages/astropy/io/fits/hdu/table.py"", line 168, in _get_tbdata\r\n    self._data_offset)\r\n  File ""/opt/anaconda3/lib/python3.4/site-packages/astropy/io/fits/hdu/base.py"", line 556, in _get_raw_data\r\n    return self._file.readarray(offset=offset, dtype=code, shape=shape)\r\n  File ""/opt/anaconda3/lib/python3.4/site-packages/astropy/io/fits/file.py"", line 271, in readarray\r\n    buffer=self._mmap)\r\nTypeError: buffer is too small for requested array\r\n```\r\n\r\nThe main problem is that astropy does not raise an error when the saving leads to a truncated file. The second problem is that astropy should be able to handle large files.\r\n\r\nI have no idea on how to debug this but I\'m willing to help.\r\n\r\nYannick'"
4304,116152627,scottransom,astrofrog,2015-11-10 17:05:43,2015-11-13 21:41:36,2015-11-13 18:31:14,closed,mhvk,v1.0.7,12,Bug;coordinates;Ready-for-final-review,https://api.github.com/repos/astropy/astropy/issues/4304,"b""EarthLocation instances can't be pickled on python2""","b'The title of the issue is self explanatory.  Note that this relates to #4098 as well, as if a column in a table has a location in it (i.e. for astropy Times with location set), then the column can\'t be pickled either.\r\n\r\nHere are some simple examples:\r\n\r\n```python\r\nIn [1]: import cPickle\r\n\r\nIn [2]: from astropy.time import Time\r\n\r\nIn [3]: from astropy.table import Table\r\n\r\nIn [4]: times = [\'1999-01-01T00:00:00.123456789\', \'2010-01-01T00:00:00\']\r\n\r\nIn [5]: t = Time(times, format=\'isot\', scale=\'utc\')\r\n\r\nIn [6]: cPickle.dump(t, open(""test.pickle"",\'wb\'))\r\n\r\nIn [7]: cPickle.load(open(""test.pickle""))\r\nOut[7]: <Time object: scale=\'utc\' format=\'isot\' value=[\'1999-01-01T00:00:00.123\' \'2010-01-01T00:00:00.000\']>\r\n\r\nIn [8]: t2 = Time(times, format=\'isot\', scale=\'utc\', location=(-50.0, 40.0, 100))\r\n\r\nIn [9]: cPickle.dump(t2, open(""test.pickle"",\'wb\'))\r\n\r\nIn [10]: cPickle.load(open(""test.pickle""))\r\n---------------------------------------------------------------------------\r\nValueError                                Traceback (most recent call last)\r\n<ipython-input-10-3f124c359ee8> in <module>()\r\n----> 1 cPickle.load(open(""test.pickle""))\r\n\r\nValueError: non-string names in Numpy dtype unpickling\r\n\r\nIn [11]: loc = t2[0].location\r\n\r\nIn [12]: loc\r\nOut[12]: <EarthLocation (3145021.063533541, -3748090.1512505603, 4078049.850961345) m>\r\n\r\nIn [13]: cPickle.dump(loc, open(""test.pickle"",\'wb\'))\r\n\r\nIn [14]: cPickle.load(open(""test.pickle""))\r\n---------------------------------------------------------------------------\r\nValueError                                Traceback (most recent call last)\r\n<ipython-input-14-3f124c359ee8> in <module>()\r\n----> 1 cPickle.load(open(""test.pickle""))\r\n\r\nValueError: non-string names in Numpy dtype unpickling\r\n```\r\n'"
4302,115984667,eteq,eteq,2015-11-09 22:44:40,2015-11-17 16:25:08,2015-11-17 13:27:21,closed,,v1.1.0,7,Bug;coordinates;Ready-for-final-review,https://api.github.com/repos/astropy/astropy/issues/4302,b'Safer use of jd1/jd2 times when using erfa',"b'This was inspired by, subsumes, and closes #4290 (and it includes its commit history).\r\n\r\nThere, @StuartLittlefair pointed out (and fixed) the fact that the intermediate rotation transforms often expect tt, and most obstimes and such are given as utc.  This PR extends that further to the whole `coordinates` module where `erfa` is used, doing a transformation to whatever the appropriate scales when needed.\r\n\r\nNote that in many cases (perhaps all here?) this is a small effect - e.g. the TT vs. TDB difference is unimportant for most coordinates, and just about all of these scale shifts are in the machine noise for secular things like the location of the Earth relative to the Sun (except maybe for some corner cases that I\'m not aware of).  But this is definitely more ""right"" than it was before.\r\n\r\nTwo questions about this, though:\r\n* @mhvk, I think you\'re probably best equipped to answer this: do you see anywhere here that a UT1-UTC operation might need additional information not already contained in the `Time` object? (I think this is a non-issue, but I just wanted to check to be sure...)\r\n* There\'s at least one place where UT1-UTC is now needed when it wasn\'t before.  So this means users will get more of the DUT1 warnings.  I don\'t think this is really an issue (because it\'s a *real* problem, so it should be warned about), but it\'s something to at least consider.'"
4301,115901183,robcross,eteq,2015-11-09 15:34:23,2015-11-21 08:11:10,2015-11-20 21:59:41,closed,crawfordsm,v1.1.0,20,Affects-dev;Bug;stats,https://api.github.com/repos/astropy/astropy/issues/4301,b'Fixes implementation of prior function in Bayesian Blocks algorithm',b'Fixes #4252 \r\nMy first PR :)'
4297,115286088,saimn,saimn,2015-11-05 13:44:02,2015-11-16 15:11:50,2015-11-16 15:11:50,closed,,,4,Affects-release;Bug;Effort-low;Package-novice;visualization,https://api.github.com/repos/astropy/astropy/issues/4297,b'quantity_support and unit formatter',"b'Quantity support for matplotlib was introduced in #3981, but in the general case it uses the unicode format: https://github.com/astropy/astropy/blob/master/astropy/visualization/units.py#L72\r\nWhich gives something ugly with complex units:\r\n![unit](https://cloud.githubusercontent.com/assets/311639/10969823/f1d22df6-83ca-11e5-9548-6192d694ab3c.png)\r\nIf I change this line to use the `latex_inline` formatter this is much better:\r\n![unit2](https://cloud.githubusercontent.com/assets/311639/10969765/9c21e7ac-83ca-11e5-9838-c137d691f919.png) ![unit3](https://cloud.githubusercontent.com/assets/311639/10969974/d785e568-83cb-11e5-9f09-1a8076c04edc.png)\r\n\r\nIt also works with the `latex` formatter, so maybe this should be an option of `quantity_support` ? Should it still be `unicode` by default ? \r\n*edit*: added image with the latex format'"
4290,114933759,StuartLittlefair,StuartLittlefair,2015-11-03 23:23:40,2015-11-16 19:28:37,2015-11-16 19:28:36,closed,eteq,v1.1.0,6,Bug;coordinates,https://api.github.com/repos/astropy/astropy/issues/4290,b'increased accuracy of intermediate rotation transforms',b'The era routines for calculating rotation matrices and earth rotation angle are specific about which timescale they want their inputs in. This pull request make sure that these transforms use the correct timescales.'
4279,113663387,larrybradley,embray,2015-10-27 19:33:09,2015-11-12 20:10:13,2015-11-12 20:09:18,closed,astrofrog,v1.0.7,3,Affects-release;Bug;utils,https://api.github.com/repos/astropy/astropy/issues/4279,b'Do not try to import IPython.kernel for ipython >= 4',"b'As reported by @keflavich (https://github.com/astropy/astropy/pull/4078#issuecomment-151397923), if `ipython` is installed but `ipykernel` is not installed then importing `astropy` from the `ipython` console gives a `IPython.kernel` deprecation warning (see #4078).  `ipykernel` is a required dependency for the `jupyter` notebook, but not for the `ipython` console.\r\n\r\nIn this PR an import of `IPython.kernel` will not be tried for `ipython >= 4`.  As a side effect, note that `OutStream` will now be `None` if using `ipython >= 4` and `ipykernel` is not installed.'"
4274,113430198,lpsinger,embray,2015-10-26 19:14:01,2015-12-04 19:58:53,2015-11-20 19:11:21,closed,astrofrog,v1.0.7,6,Affects-release;Bug;utils,https://api.github.com/repos/astropy/astropy/issues/4274,b'Make ProgressBar work with IPython 4',"b""On IPython 4.0.0, ProgressBar does not work as an IPython widget. This command:\r\n\r\n    astropy.utils.console.ProgressBar(10, ipython_widget=True)\r\n\r\nproduces this traceback:\r\n\r\n    ---------------------------------------------------------------------------\r\n    NameError                                 Traceback (most recent call last)\r\n    <ipython-input-8-988ccc943b20> in <module>()\r\n    ----> 1 astropy.utils.console.ProgressBar(10, ipython_widget=True)\r\n\r\n    /Users/foobar/local/lib/python2.7/site-packages/astropy/utils/console.pyc in __init__(self, total_or_items, ipython_widget, file)\r\n        497             # Import only if ipython_widget, i.e., widget in IPython\r\n        498             # notebook\r\n    --> 499             if ipython_major_version < 4:\r\n        500                 from IPython.html import widgets\r\n        501             else:\r\n\r\n    NameError: global name 'ipython_major_version' is not defined\r\n\r\nThis patch addresses the issue by attempting to import `get_ipython` from `IPython`."""
4266,112910830,embray,embray,2015-10-22 23:22:03,2015-11-24 17:09:23,2015-11-24 17:02:01,closed,,v1.0.7,12,Affects-release;Bug;io.fits,https://api.github.com/repos/astropy/astropy/issues/4266,b'One failing io.fits test on Numpy 1.10.1',"b""Not sure how, but I completely missed this somehow when I was finishing up testing for v1.0.6.  I don't have time to fix it right now so I've marked the test as xfail on Numpy 1.10 for now.  It's an obscure case that probably shouldn't affect any users.\r\n\r\nSee 06a53a1"""
4259,112677720,michaelaye,mhvk,2015-10-21 20:59:25,2015-10-27 18:55:52,2015-10-27 18:55:52,closed,embray,,34,Bug;io.fits;Performance;Upstream Fix Required,https://api.github.com/repos/astropy/astropy/issues/4259,b'FITS: Performance issue',"b'In this [FITS file](https://www.dropbox.com/s/r6qw7y8g5vvpnub/mvn_iuv_l1a_periapse-orbit01063-muvdark_20150417T234058_v02_r01.fits.gz?dl=0) reading out the `.data` object of the 6th (0-indexed counting), the HDU named ""Observation"" takes over 3 minutes  on my iMac 5K. \r\nThe table indicates a total size of 16 MB:\r\n\r\n```python\r\ndata.itemsize\r\n16777661\r\n```\r\nbut I don\'t believe that should be an issue, as indicated by our IDL reader, that has no noticeable delay in opening that file. \r\nIn case this is not an easy-to-fix performance bug with pyfits: Our group is creating these files, we can\'t change the structure of the files in terms of where is stored what, but maybe there are some `flags` that we can use to improve the structure internally on the binary level somehow?\r\n\r\nHere\'s the code I used to show the issue:\r\n```python\r\nfrom astropy.io import fits\r\nimport time\r\nfname = \'mvn_iuv_l1a_periapse-orbit01063-muvdark_20150417T234058_v02_r01.fits.gz\'\r\nhdulist = fits.open(fname)\r\nt0 = time.time()\r\ndata = hdulist[6].data\r\nprint(time.time() - t0)\r\n\r\n193.38006591796875\r\n```'"
4252,112375686,robcross,eteq,2015-10-20 14:02:24,2015-11-20 21:59:41,2015-11-20 21:59:41,closed,,v1.1.0,19,Affects-dev;Bug;stats,https://api.github.com/repos/astropy/astropy/issues/4252,b'Bayesian blocks gamma_prior() called incorrectly?',"b'```gamma_prior``` is defined as:\r\n\r\n    def gamma_prior(self, N, Ntot):\r\n        """"""\r\n        Basic prior, parametrized by slope gamma.\r\n        See eq. 3 in Scargle (2012)\r\n        """"""\r\n        if self.gamma == 1:\r\n            return 0\r\n        else:\r\n            return (np.log(1 - self.gamma)\r\n                    - np.log(1 - self.gamma ** (Ntot + 1))\r\n                    + N * np.log(self.gamma))\r\n\r\nand it is called in ```fit()``` in the following context:\r\n\r\n```\r\ndef fit(self, t, x=None, sigma=None):\r\n...\r\n    N = len(t)\r\n    ...\r\n    for R in range(N):\r\n        ...\r\n        A_R = fit_vec - self.prior(R + 1, N)\r\n```\r\n\r\nIf you look at Scargle\'s definition (eq. 4, Scargle 2012), astropy ```Ntot``` ~ Scargle\'s ""N"" and astropy ```N``` ~ Scargle\'s N_blocks.\r\n\r\nThe values being passed into ```N``` and ```Ntot``` are ""the number of data points *currently* in the fit"" and ""the *total* number of data points to be fit"".\r\n\r\nLooking at Scargle\'s definitions of these variables, I believe that ```N``` and ```Ntot``` should be ""the number of **blocks** currently in this realization of the fit"" and ""the number of data points *currently* in the fit"".\r\n\r\nI hope I have explained this correctly. It makes sense to me in that as you add more blocks, the prior probability is decreased, thus incurring a higher penalty as you add more change points. This is tweaked by adjusting gamma.'"
4251,112361535,astrofrog,embray,2015-10-20 12:52:28,2015-10-21 22:46:45,2015-10-21 22:46:45,closed,,v1.0.6,11,Affects-release;analytic_functions;Bug,https://api.github.com/repos/astropy/astropy/issues/4251,b'Fix blackbody_nu to accept arrays of temperatures',"b'I think this should be considered a bug fix to be included in 1.1 and backported to 1.0.x\r\n\r\n@embray - so just to be clear, I milestone this as 1.0.x?\r\n\r\ncc @pllim '"
4249,112288890,svr93,eteq,2015-10-20 05:19:09,2015-10-24 11:48:27,2015-10-23 19:31:33,closed,,,8,Bug;coordinates;Duplicate,https://api.github.com/repos/astropy/astropy/issues/4249,b'AltAz -> ITRS',"b""When I try to convert AltAz coordinates with distance, I get\r\n```python\r\nfrom astropy import units as u\r\nfrom astropy.time import Time\r\nfrom astropy.coordinates import SkyCoord, EarthLocation, AltAz\r\nn = EarthLocation(lat=41.3*u.deg, lon=-74*u.deg, height=390*u.m)\r\ntime = Time('2012-7-12 23:00:00')\r\nc = SkyCoord(alt=37*u.deg,az=25*u.deg,distance=7800*u.km,obstime=time,location=n,frame='altaz')\r\nc\r\n<SkyCoord (AltAz: obstime=2012-07-12 23:00:00.000, location=(1322772.7367951265, -4613056.748218293, 4187767.9533615136) m, pressure=0.0 hPa, temperature=0.0 deg_C, relative_humidity=0, obswl=1.0 micron): (az, alt, distance) in (deg, deg, km)\r\n    (25.0, 37.0, 7800.0)>\r\nc.transform_to('itrs')\r\n<SkyCoord (ITRS: obstime=2012-07-12 23:00:00.000): (x, y, z) in km\r\n    (139268182.96865937, 51622160.98614869, 412898505.580033)>\r\n```\r\nWhy calculated coordinates so high? I have similar problem in case of test converting AltAz -> AltAz\r\n```python\r\nc.transform_to('altaz')\r\n<SkyCoord (AltAz: obstime=2012-07-12 23:00:00.000, location=(1322772.7367951265, -4613056.748218293, 4187767.9533615136) m, pressure=0.0 hPa, temperature=0.0 deg_C, relative_humidity=0, obswl=1.0 micron): (az, alt, distance) in (deg, deg, m)\r\n    (25.0, 37.0, 501344127124.25921631)>\r\nc.transform_to('altaz').transform_to('altaz')\r\n<SkyCoord (AltAz: obstime=2012-07-12 23:00:00.000, location=(1322772.7367951265, -4613056.748218293, 4187767.9533615136) m, pressure=0.0 hPa, temperature=0.0 deg_C, relative_humidity=0, obswl=1.0 micron): (az, alt, distance) in (deg, deg, m)\r\n    (25.0, 37.0, 566987610424.75195312)>\r\n```\r\n"""
4240,111295463,mhvk,mhvk,2015-10-13 23:54:40,2016-05-26 21:28:42,2016-05-26 21:28:42,closed,,,11,Bug;io.votable;testing,https://api.github.com/repos/astropy/astropy/issues/4240,b'Travis random test suite interruptions in io.votable',"b'Travis regularly stops in the middle of `io.votable`, in ways [like] (https://travis-ci.org/astropy/astropy/jobs/85177508):\r\n```\r\nastropy/io/votable/tests/util_test.py ......................\r\n\r\nThe command ""$MAIN_CMD $SETUP_CMD"" exited with 245.\r\n\r\nDone. Your build exited with 1.\r\n```\r\n\r\nIs there anything suspicious in these particular tests? I suspect some type of connection problems. It would be nice to resolve those...'"
4234,110808430,MSeifert04,MSeifert04,2015-10-10 18:07:05,2016-01-18 22:39:13,2016-01-18 22:39:13,closed,mwcraig,,34,Bug;Enhancement;nddata,https://api.github.com/repos/astropy/astropy/issues/4234,b'WIP: NDData several bug fixes and added functionality (Refactoring it)',"b""These are just some things I have been changing on my local computer to get some more functionality out of NDDataBase and it's subclasses. This is not very complete (I haven't touched NDArithmeticMixin as much as I wanted so most of the tests will break for the latest commits) but I am still working on it.\r\n\r\nIn the next days I can provide some more information (if wanted) for now this is just to get some feedback if that kind of refactoring would be appreciated or not (there are some API changes in there but I tried to keep them low). Unfortunatly I have forgotten the skip ci on some of the commits but since these are very few I hope that's not too bad.\r\n\r\nI hope it is ok to just create a PR for such a large change."""
4231,110632748,JGoutin,embray,2015-10-09 10:36:40,2015-10-09 19:11:15,2015-10-09 19:11:15,closed,,v1.0.6,4,Affects-release;Bug;io.votable,https://api.github.com/repos/astropy/astropy/issues/4231,b'Import fail if Python is running with -OO',"b'\r\nHello,\r\n\r\nThis fix a crash on Astropy import if Python compilation optimization is set to 2 (Remove docstrings / Run python with -OO argument)'"
4229,110477739,mhvk,mhvk,2015-10-08 15:36:38,2015-11-13 00:38:53,2015-10-24 18:52:32,closed,,v1.1.0,34,Affects-release;Bug;constants;units,https://api.github.com/repos/astropy/astropy/issues/4229,"b'Ensure all unit definitions use constants only, not numerical values'","b'This removes the two cases in which constants were entered as numerical values in unit definitions, rather than using definitions from `constants`.'"
4228,110282959,embray,embray,2015-10-07 18:02:03,2015-10-22 20:31:03,2015-10-22 20:31:01,closed,,v1.0.6,18,Affects-release;Bug;io.fits,https://api.github.com/repos/astropy/astropy/issues/4228,b'String-related fixes for FITS tables',"b'This PR fixes a number of string-related issues with FITS tables, especially (but not limited to) Python 3.\r\n\r\nThis was originally motivated primarily by #3854, and does get all the existing io.fits tests passing when run with Numpy 1.10.  However, this required fixing a number of bugs that only started showing up in the tests with Numpy 1.10, but were in many cases real bugs in their own right.  It ended up making the most sense to fix them all together, since most of them were related.\r\n\r\n* One thing particular to Numpy 1.10 is that the recarray class was changed so that string fields are no longer returned as `chararray` objects (just normal string arrays).  However, there are several areas in which pyfits, and subsequently `astropy.io.fits` still rely on the `chararray` class for its behavior of automatically rstripping strings returned from the array (this is relevant for FITS, which dictates that trailing spaces in strings should be ignored).  This ensures that `chararray` usage is preserved for now, for backwards compatibility, until another solution can be provided.\r\n\r\n* This also fixes a bug which I have noted before, but can\'t for the life of me find an open issue for (I thought I made one, but maybe only mentioned this in comments somewhere...)  The bug is that when writing an Astropy `Table` out to FITS with `Table.write()`, if the table contained string columns those columns are most likely represented as unicode arrays on Python 3.  When writing to a FITS file the unicode was still converted properly to ASCII, but it kept the original width of the unicode arrays.  So for example a column of single character strings was written to FITS as a four character column.  Getting around this is a bit of a hack for now, and results in slower write times, but at least has the correct behavior.  All the more reason for a type of ""ASCII only \'unicode\'"" array.\r\n\r\n* Despite the above bullet point, this also improves performance of string writing  in some cases, in that it requires less memory for encoding unicode arrays as ASCII, due to a new `_ascii_encode` function which is improved over `np.char.encode` in that it can write to an existing output array.  This results in lower peak memory usage when writing out character arrays in some cases.\r\n\r\n* Removed the unfortunate monkey-patching of the `chararray` class in Numpy >= 1.10, where the issue that prompted that patching is now fixed :grinning: '"
4222,109874151,mhvk,mhvk,2015-10-05 19:58:49,2015-11-13 00:37:55,2015-11-08 16:55:20,closed,taldcroft,v1.1.0,14,Affects-dev;Bug;table,https://api.github.com/repos/astropy/astropy/issues/4222,b'Table indexing should not affect Mixin classes except through info',"b'#3915 introduced a very nice indexing system to `Table`, but as part of that `__getitem__` is being changed in indentical ways in `Quantity` and `Time`. Separation of concerns suggests this should be factored out and done explicitly in `Table` itself, or (somehow) made part of the `info` class.\r\n\r\np.s. Noticed this because it causes a merge conflict for my shape-changing PR #4123. Raising this partially as a reminder to myself, partially as a general call-out to try hard to avoid creating tangled messes.'"
4221,109861273,eteq,embray,2015-10-05 18:48:36,2015-10-22 20:21:09,2015-10-22 20:21:09,closed,eteq,v1.1.0,0,Affects-release;Bug;coordinates,https://api.github.com/repos/astropy/astropy/issues/4221,b'Fix bug in GCRS<->ICRS conversion for near-earth objects',"b""As has been discussed a fair amount in the astroplan project, as well as on the mailing list (the thread starting with https://mail.scipy.org/pipermail/astropy/2015-August/003907.html), there's a significant bug with the GCRS<->ICRS transformation for coordinates that are close to the earth (seems to be within <~1 AU).  For a regression test demonstrating the problem, see the first few commits in https://github.com/eteq/astropy/tree/fix-gcrs-trans \r\n\r\nI'm pretty sure I understand the source of this (basically, it's due to an incomplete workaround to some of ERFA's limitations), and hence am assigning it to myself.  Making this issue mainly so that we can try to get it fixed before a final v1.1 release.  \r\n\r\nAn item to consider, though: once fixed, should this be included in the 1.0.x branch?  While it is a bug in that the transforms aren't right, it is *technically* an API change in case someone worked around it already... (@astrofrog and/or @embray)?"""
4213,109515492,taldcroft,taldcroft,2015-10-02 15:30:55,2015-10-02 19:21:44,2015-10-02 18:28:00,closed,mhvk,v1.0.5,5,Affects-release;Bug;table,https://api.github.com/repos/astropy/astropy/issues/4213,b'Fix NameError in table stack exception message',"b""Fixes #4208.\r\n\r\nNote: no changelog entry.  This is a trivial fix, and I don't know if this would be in 1.1, 1.0.6 (which doesn't exist yet in CHANGES.rst) or 1.0.5.  I think that none of the above is fine.  @embray?\r\n"""
4208,109257748,cdeil,taldcroft,2015-10-01 09:04:20,2015-10-05 21:22:52,2015-10-02 18:28:00,closed,,v1.0.5,5,Affects-release;Bug;Effort-low;Package-novice;table,https://api.github.com/repos/astropy/astropy/issues/4208,b'NameError from table vstack',"b'@taldcroft I\'m getting this error:\r\n```python\r\n>>> from gammapy.data import EventListDataset\r\n>>> filenames = [\'hess_events_018406.fits.gz\', \'run_0018406_std_eventlist.fits.gz\']\r\n>>> EventListDataset.vstack_from_files(filenames)\r\nTraceback (most recent call last):\r\n  File ""<stdin>"", line 1, in <module>\r\n  File ""/Users/deil/code/gammapy/gammapy/data/event_list.py"", line 466, in vstack_from_files\r\n    total_event_list = vstack_tables(event_lists, metadata_conflicts=\'silent\')\r\n  File ""/Users/deil/Library/Python/3.4/lib/python/site-packages/astropy-1.1.dev13676-py3.4-macosx-10.10-x86_64.egg/astropy/table/operations.py"", line 252, in vstack\r\n    out = _vstack(tables, join_type, col_name_map)\r\n  File ""/Users/deil/Library/Python/3.4/lib/python/site-packages/astropy-1.1.dev13676-py3.4-macosx-10.10-x86_64.egg/astropy/table/operations.py"", line 734, in _vstack\r\n    out_descrs = get_descrs(arrays, col_name_map)\r\n  File ""/Users/deil/Library/Python/3.4/lib/python/site-packages/astropy-1.1.dev13676-py3.4-macosx-10.10-x86_64.egg/astropy/table/operations.py"", line 478, in get_descrs\r\n    raise TableMergeError(\'Key columns {0!r} have different shape\'.format(name))\r\nNameError: name \'name\' is not defined\r\n```\r\nLooks like a bug here:\r\n```\r\n$ pyflakes  astropy/table/operations.py \r\nastropy/table/operations.py:478: undefined name \'name\'\r\n```'"
4205,109162364,pllim,astrofrog,2015-09-30 19:31:12,2015-10-07 18:14:22,2015-10-05 22:15:10,closed,pllim,v1.0.6,4,Affects-dev;Bug;testing;vo;vo.conesearch,https://api.github.com/repos/astropy/astropy/issues/4205,b'Fixed failing VO Cone Search tests',"b""Fixed failing VO Cone Search tests by removing flaky service or replacing it with hopefully a more stable one. This needs to be merged so @embray can proceed with #2970.\r\n\r\nThis update goes hand-in-hand with a change in http://stsdas.stsci.edu/astrolib/vo_databases/conesearch_simple.json . This means, affected remote-data test(s) for *older* version of Astropy that used to pass will now fail.\r\n\r\nAll tests passed (with 1 `xfail`) when I do the following in Python 2.7.5:\r\n```python\r\n>>> import astropy\r\n>>> astropy.test('vo', remote_data=True)\r\n```\r\n\r\nI did not test it in Python 3 but I did not make changes where the Python version would matter anyway."""
4198,108785614,lpsinger,eteq,2015-09-29 03:03:56,2015-10-05 19:43:19,2015-10-05 15:53:20,closed,,v1.0.5,9,Affects-release;Bug;utils,https://api.github.com/repos/astropy/astropy/issues/4198,b'Immediately clean up downloaded files in get_readable_fileobj',"b'`astropy.utils.data.get_readable_fileobj` cleans up all temporary files that are generated while decompressing or decoding the target, but leaves the temporary file generated by calling `astropy.utils.data.download_file` to linger until the Python interpreter exits.\r\n\r\nThis patch causes `astropy.utils.data.get_readable_fileobj` to clean up the temporary downloaded file at the exit of the context handler (unless the downloaded file was cached).\r\n\r\nSee also:\r\nhttps://mail.scipy.org/pipermail/astropy/2015-September/003937.html'"
4197,108756733,saimn,eteq,2015-09-28 22:08:02,2015-10-12 19:13:14,2015-10-07 20:25:14,closed,,v1.1.0,7,Affects-release;Bug;Enhancement;table,https://api.github.com/repos/astropy/astropy/issues/4197,b'[WIP] Allow to show a table in the IPython notebook using dataTables. ',"b""This feature existed but was broken (https://github.com/astropy/astropy/issues/3937#issuecomment-131956530). cc @taldcroft @keflavich \r\nHere a new method `show_in_notebook` is added (it could replace the `_repr_html` but it is probably safer to use a separate method for now). \r\nThe dataTables js file is loaded with requirejs, and a lightweight css style is added using Bootstrap. About the CSS:\r\n- we could use directly the notebook's one but it is not very pretty,\r\n- here I use Bootstrap which is already available in the notebook, ~~so I need to add classes to the HTML table which I do with a ugly `.replace`, it would be cleaner with #4131~~ (done).\r\n- it could also be possible to use the dataTables CSS, but it requires one more external download and it seems not necessary.\r\n\r\n![ipynb](https://cloud.githubusercontent.com/assets/311639/10149989/6717d53a-663d-11e5-9e8c-ac6e2d70ff31.png)\r\n"""
4190,108561524,MSeifert04,MSeifert04,2015-09-27 21:18:09,2015-10-10 18:22:01,2015-10-10 18:22:01,closed,mwcraig,,3,Bug;nddata,https://api.github.com/repos/astropy/astropy/issues/4190,b'Uncertainty propagation with one uncertainty missing',b'The alternative for  #4177'
4186,108025229,bsipocz,embray,2015-09-23 23:08:14,2015-09-28 18:44:08,2015-09-28 18:44:08,closed,,v1.1.0,4,Affects-dev;Bug;utils,https://api.github.com/repos/astropy/astropy/issues/4186,b'Fixing py2 bug in is_url_in_cache',b'This was causing a remote test failure.'
4177,107494444,MSeifert04,MSeifert04,2015-09-21 11:46:40,2015-09-27 21:20:48,2015-09-27 21:20:48,closed,mwcraig,,8,Bug;nddata,https://api.github.com/repos/astropy/astropy/issues/4177,b'NDArithmetic: Use zero if no uncertainty is set in uncertainty propagation',b'But this produces additional computation time for addition/subtraction. But for multiplication and division the resulting uncertainty is now correct.\r\n\r\nCloses #4152 '
4173,107393558,bsipocz,embray,2015-09-20 13:59:18,2016-05-17 21:05:12,2015-09-28 16:37:42,closed,,v1.1.0,5,Bug;Docs;no-changelog-entry-needed;utils,https://api.github.com/repos/astropy/astropy/issues/4173,b'Acquire cache lock in notebook fails after kernel restart',"b'When in a notebook I try to rerun a cell after a kernel restart a ``RuntimeError`` is raised as the cache lock hasn\'t been removed during the restart.\r\n\r\nI\'m not sure whether this should be treated as a normal side effect of the notebook, or we can do something within astropy to handle it. \r\nMy current workaround is to delete the lock manually, but there must be a better way to deal with.\r\n\r\n```\r\n---------------------------------------------------------------------------\r\nRuntimeError                              Traceback (most recent call last)\r\n<ipython-input-1-f7724152a086> in <module>()\r\n      2 from photutils import datasets\r\n      3 \r\n----> 4 hdu = datasets.load_star_image()\r\n      5 image = hdu.data[500:700, 500:700]\r\n      6 image -= np.median(image)\r\n\r\n/Users/bsipocz/munka/devel/photutils/photutils/datasets/load.py in load_star_image()\r\n    146         plt.imshow(hdu.data, origin=\'lower\', cmap=\'gray\')\r\n    147     """"""\r\n--> 148     path = get_path(\'M6707HH.fits.gz\', location=\'remote\')\r\n    149     hdu = fits.open(path)[0]\r\n    150 \r\n\r\n/Users/bsipocz/munka/devel/photutils/photutils/datasets/load.py in get_path(filename, location)\r\n     46         url = (\'https://github.com/astropy/photutils-datasets/blob/master/\'\r\n     47                \'data/{0}?raw=true\'.format(filename))\r\n---> 48         path = download_file(url, cache=True)\r\n     49     else:\r\n     50         raise ValueError(\'Invalid location: {0}\'.format(location))\r\n\r\n/Users/bsipocz/munka/devel/astropy/astropy/utils/data.py in download_file(remote_url, cache, show_progress, timeout)\r\n   1067 \r\n   1068         if cache:\r\n-> 1069             _acquire_download_cache_lock()\r\n   1070             try:\r\n   1071                 with _open_shelve(urlmapfn, True) as url2hash:\r\n\r\n/Users/bsipocz/munka/devel/astropy/astropy/utils/data.py in _acquire_download_cache_lock()\r\n   1344             return\r\n   1345     msg = \'Unable to acquire lock for cache directory ({0} exists)\'\r\n-> 1346     raise RuntimeError(msg.format(lockdir))\r\n   1347 \r\n   1348 \r\n\r\nRuntimeError: Unable to acquire lock for cache directory (/Users/bsipocz/.astropy/cache/download/lock exists)\r\n```'"
4170,107375430,MSeifert04,MSeifert04,2015-09-20 06:01:19,2015-10-10 18:22:31,2015-10-10 18:22:30,closed,mwcraig,,12,Bug;nddata,https://api.github.com/repos/astropy/astropy/issues/4170,b'NDDataBase now (tries to) set the uncertainties parent_nddata attribute',"b""In #4152 I discovered that ``NDData`` togeter with the ``NDArithmeticMixin`` was not able to work with ``StdDevUncertainty`` as uncertainty. The problem was, that only the ``NDDataArray`` did set the ``parent_nddata`` attribute of the uncertainty while setting the uncertainty. Because the ``parent_nddata`` is necessary for ``StdDevUncertainty`` to work I added a few lines which at least try to set it in ``NDDataBase``.\r\n\r\nCurrently the ``except`` (when the uncertainty has no ``parent_nddata`` attribute) only makes a `pass` but it may also raise an Exception (which fails the current tests) or raise a warning (likewise) or be a case for the ``astropy.logging`` (but I only recently discovered this and I am not sure how to use it properly)\r\n\r\nSince this is only an aside issue of the original issue I hope this does not close the original issue.\r\n\r\nAny suggestions? And should I add a test case for the original problem (it's quite difficult, because all of ``nddata/mixins/tests/test_ndarithmetic.py``are based on ``NDDataArray`` not the different Mixins)"""
4164,107069824,embray,embray,2015-09-17 20:39:47,2015-10-01 14:00:55,2015-10-01 14:00:55,closed,,v1.0.5,23,Affects-dev;astropy-helpers;Bug;testing,https://api.github.com/repos/astropy/astropy/issues/4164,b'Overly verbose test result output',"b""A minor annoyance I'm finding since the switch to pytest 2.7.3 in #4027 is that during test running the results for each module list the full path to the module, as found it the temporary test directory, rather than a relative path, like:\r\n\r\n```\r\n//tmp/astropy-test-k8ciiv35/lib.linux-x86_64-3.4/astropy/_erfa/tests/test_erfa.py .....\r\n//tmp/astropy-test-k8ciiv35/lib.linux-x86_64-3.4/astropy/analytic_functions/tests/test_blackbody.py ....\r\n//tmp/astropy-test-k8ciiv35/lib.linux-x86_64-3.4/astropy/config/tests/test_configs.py .................\r\n//tmp/astropy-test-k8ciiv35/lib.linux-x86_64-3.4/astropy/constants/tests/test_constant.py ........\r\n...\r\n```\r\n\r\nas opposed to\r\n\r\n```\r\nastropy/_erfa/tests/test_erfa.py .....\r\nastropy/analytic_functions/tests/test_blackbody.py ....\r\nastropy/config/tests/test_configs.py .................\r\nastropy/constants/tests/test_constant.py ........\r\n...\r\n```\r\n\r\nThe double slash at the beginning is odd too.  It might in some way be related to a new line showing up at the beginning of the test output that wasn't there before:\r\n\r\n```\r\nrootdir: /, inifile:\r\n```"""
4162,106959057,lingxz,embray,2015-09-17 10:54:23,2015-10-22 19:15:24,2015-10-22 19:15:24,closed,embray,v1.0.6,11,Affects-release;Bug;io.fits,https://api.github.com/repos/astropy/astropy/issues/4162,b'allow fitsdiff to explicitly report type differences',"b'I added a bunch of code so that report_diff_values() checks for and explicitly reports type differences, as mentioned in #4122. Not sure if this is the best way to do it though. \r\nNot sure if a test is needed for this, but added it anyway. \r\n\r\nCloses #4122. '"
4160,106789327,josePhoenix,embray,2015-09-16 14:47:54,2015-09-23 17:34:52,2015-09-23 17:34:52,closed,,v1.0.5,7,Affects-release;Bug;io.ascii,https://api.github.com/repos/astropy/astropy/issues/4160,b'Unexpected exception type for empty file in astropy.ascii.read',"b'It was surprising to me that trying to read an empty file with `astropy.ascii.read` results in `IOError: [Errno 2] No such file or directory: \'\'` rather than a more descriptive error message. It might be worth it to raise a different exception in the case of a zero-length file.\r\n\r\nI\'m using astropy 1.0.1 on Python 2.7.10 with Mac OS X 10.10.4.\r\n\r\n```\r\nIn [10]: !touch foo.txt\r\n\r\nIn [11]: ascii.read(\'foo.txt\')\r\n---------------------------------------------------------------------------\r\nIOError                                   Traceback (most recent call last)\r\n<ipython-input-11-569f208f4a4d> in <module>()\r\n----> 1 ascii.read(\'foo.txt\')\r\n\r\n/Users/jlong/lib/python2.7/site-packages/astropy/io/ascii/ui.pyc in read(table, guess, **kwargs)\r\n    203         guess = _GUESS\r\n    204     if guess:\r\n--> 205         dat = _guess(table, new_kwargs, format, fast_reader_param)\r\n    206     else:\r\n    207         reader = get_reader(**new_kwargs)\r\n\r\n/Users/jlong/lib/python2.7/site-packages/astropy/io/ascii/ui.pyc in _guess(table, read_kwargs, format, fast_reader)\r\n    281             reader = get_reader(**guess_kwargs)\r\n    282             reader.guessing = True\r\n--> 283             return reader.read(table)\r\n    284\r\n    285         except (core.InconsistentTableError, ValueError, TypeError, AttributeError,\r\n\r\n/Users/jlong/lib/python2.7/site-packages/astropy/io/ascii/core.pyc in read(self, table)\r\n   1003\r\n   1004         # Get a list of the lines (rows) in the table\r\n-> 1005         self.lines = self.inputter.get_lines(table)\r\n   1006\r\n   1007         # Set self.data.data_lines to a slice of lines contain the data rows\r\n\r\n/Users/jlong/lib/python2.7/site-packages/astropy/io/ascii/core.pyc in get_lines(self, table)\r\n    181             if (hasattr(table, \'read\') or\r\n    182                     (\'\\n\' not in table + \'\' and \'\\r\' not in table + \'\')):\r\n--> 183                 with get_readable_fileobj(table) as file_obj:\r\n    184                     table = file_obj.read()\r\n    185             lines = table.splitlines()\r\n\r\n/Users/jlong/homebrew/Cellar/python/2.7.10_2/Frameworks/Python.framework/Versions/2.7/lib/python2.7/contextlib.pyc in __enter__(self)\r\n     15     def __enter__(self):\r\n     16         try:\r\n---> 17             return self.gen.next()\r\n     18         except StopIteration:\r\n     19             raise RuntimeError(""generator didn\'t yield"")\r\n\r\n/Users/jlong/lib/python2.7/site-packages/astropy/utils/data.pyc in get_readable_fileobj(name_or_obj, encoding, cache, show_progress, remote_timeout)\r\n    197             fileobj = io.FileIO(name_or_obj, \'r\')\r\n    198         elif six.PY2:\r\n--> 199             fileobj = open(name_or_obj, \'rb\')\r\n    200         close_fds.append(fileobj)\r\n    201     else:\r\n\r\nIOError: [Errno 2] No such file or directory: \'\'\r\n```'"
4159,106784922,pllim,embray,2015-09-16 14:27:13,2015-09-17 14:37:07,2015-09-16 20:30:54,closed,,v1.0.5,4,Bug;vo;vo.conesearch,https://api.github.com/repos/astropy/astropy/issues/4159,b'Fix Cone Search validator parse_cs() crashing on incomplete testQuery',"b""This fixes #4158. Also minor PEP-8 and doc fixes.\r\n\r\nI have no plans to add a test or change log. This is because `parse_cs()` is for internal use within the validator. And Cone Search services change from time to time, so there is no point to add a test for this.\r\n\r\n@embray , you can manually test this if you wish:\r\n```python\r\n>>> from astropy.vo.validator.tstquery import parse_cs\r\n>>> id = 'ivo://CDS.VizieR/J/ApJ/780/34'\r\n>>> parse_cs(id)\r\nWARNING: Incomplete testQuery for ivo://CDS.VizieR/J/ApJ/780/34, using default [astropy.vo.validator.tstquery]\r\nOrderedDict([(u'SR', u'0.1'), (u'DEC', u'0'), (u'RA', u'0')])\r\n```"""
4158,106652286,embray,embray,2015-09-15 21:30:22,2015-09-16 20:31:10,2015-09-16 20:30:54,closed,,v1.0.5,4,Affects-release;Bug;vo;vo.conesearch,https://api.github.com/repos/astropy/astropy/issues/4158,b'Some missing error handling in parse_cs',"b""In the process of investigating #2970 I ran across what I think is an unrelated buglet.\r\n\r\nIn my testing I ran\r\n```python\r\ncheck_conesearch_sites(url_list=None)\r\n```\r\nwhich seems to go on to download a whole bunch of different catalog resources and look up their conesearch test queries (I'm sort of learning how this all works as I go so please correct me @pllim :)  However, in the process it crashed `parse_cs` because at least *one resource*, given by the ID ivo://CDS.VizieR/J/ApJ/780/34 contains a testQuery element with only an `<sr>` parameter specified, and no `<ra>` or `<dec>`.  Based on my reading of [this](http://www.ivoa.net/documents/REC/DAL/ConeSearch-20080222.html), and some of the discussion [here](http://wiki.ivoa.net/bin/view/IVOA/SimpleDALRegExt10RFC) it seems the RA, DEC, and SR parameters *must* be provided for a valid cone search (duh), though the Resource schema itself doesn't make that entirely clear... :(\r\n\r\nIn any case I think we should:\r\na) Report the broken resource and\r\nb) Fix the code to catch this kind of error (the code is currently assuming any testQuery will at least have a valid set of parameters)."""
4152,106173786,MSeifert04,MSeifert04,2015-09-12 17:34:48,2016-01-31 19:19:47,2016-01-31 19:19:47,closed,,,5,Affects-release;Bug;nddata,https://api.github.com/repos/astropy/astropy/issues/4152,b'NDArithmeticMixin uncertainty propagation for multiplication/division',"b'I used the arithmeticMixin sometime now but only recently I realized that in some circumstances it makes the wrong ""decisions"". When multiplying something with an uncertainty with something that has no uncertainty it does not even want to propagate the uncertainty (why?)\r\n\r\nFor example\r\n```\r\nimport numpy as np\r\nfrom astropy.nddata import NDData, NDArithmeticMixin, StdDevUncertainty\r\nclass Test(NDArithmeticMixin,NDData):\r\n\tpass\r\nuncert = StdDevUncertainty([1,1,1])\r\na = Test([1,2,3], uncertainty=uncert)\r\nb = Test([1,2,3])\r\na.multiply(b).uncertainty.array\r\n#Output: array([1, 1, 1])\r\n#but it should be array([1,2,3]) since the uncertainty for \r\n#a constant times an uncertain value is just the constant times the uncertainty\r\n```\r\nThe problem is in https://github.com/astropy/astropy/blob/master/astropy/nddata/mixins/ndarithmetic.py#L149 . There it decides that the uncertainty should not be propagated if only self or operand has an uncertainty. Same problem also arises for division. \r\n\r\nThis is not easily fixed since for example the StdDevUncertainty (https://github.com/astropy/astropy/blob/master/astropy/nddata/nduncertainty.py#L329) also raises an Error if the other data has no uncertainty. (also there is a lot of duplicate code in each propagate_* method)'"
4151,106172127,lingxz,embray,2015-09-12 16:57:15,2015-09-17 18:30:25,2015-09-17 18:28:17,closed,,v1.1.0,5,Affects-dev;Bug;modeling,https://api.github.com/repos/astropy/astropy/issues/4151,b'Fixing the fit_deriv method for Voigt1D class',b'Switched the first two elements in the returned list of the fit_deriv method for the Voigt1D class. \r\n\r\nCloses #4144'
4147,106038149,DanielLenz,mhvk,2015-09-11 15:49:55,2015-09-14 14:35:19,2015-09-12 13:58:02,closed,,v1.0.5,7,Affects-release;Bug;constants,https://api.github.com/repos/astropy/astropy/issues/4147,b'Match __repr__ to attribute',b'Rename Error -> Uncertainty and Units -> Unit in `__repr__` to match the attributes.\r\nRequested in https://github.com/astropy/astropy/issues/4145\r\nHad to re-do the pull request because I messed up the branches.'
4145,105954964,astrofrog,mhvk,2015-09-11 06:55:24,2015-09-14 14:39:21,2015-09-12 15:11:02,closed,,v1.0.5,1,Affects-release;Bug;constants;Effort-low;Package-novice,https://api.github.com/repos/astropy/astropy/issues/4145,"b""Constant.__repr__ should be updated to say 'uncertainty' not 'error' and 'unit' not 'units'""","b""As highlighted in [this StackOverflow question](https://astronomy.stackexchange.com/questions/11769/how-to-get-error-out-of-astropy-constants), it's a bit confusing that the uncertainty on constants is referred to as 'uncertainty' when accessed as an attribute but 'error' in the ``repr`` (similarly 'units' in repr vs 'unit' as attribute). We should update ``__repr__`` to show ``unit=`` and ``uncertainty=``."""
4144,105899947,jrleja,embray,2015-09-10 21:19:27,2015-09-17 18:28:17,2015-09-17 18:28:17,closed,,,3,Affects-dev;Bug;Effort-low;modeling;Package-novice,https://api.github.com/repos/astropy/astropy/issues/4144,b'Voigt1D derivatives',"b""Hi,\r\n\r\nI've been trying to fit Voigt line profiles in Astropy. The LevMarLSQFitter was unable to return reasonable fits to the amplitude or the centroid. I checked into the Voigt1D model source code and noticed that it seems like two of the derivatives are switched in the RETURN call: x0 and amplitude. \r\n\r\nWhen I switched the first two elements of the returned list in the fit_deriv method of Voigt1D, the returned fit was quite reasonable. I'd suggest changing these around.\r\n\r\nThanks (and thanks for putting so much work into this very useful package!!),\r\nJoel Leja"""
4142,105827021,mdboom,astrofrog,2015-09-10 14:53:18,2015-10-04 15:09:45,2015-10-04 15:09:45,closed,,v1.1.0,3,Affects-dev;Bug;wcs,https://api.github.com/repos/astropy/astropy/issues/4142,b'Handle parser error in wcslib header parser',"b'Partial fix for #4089.\r\n\r\nThe header parsing functions in wcslib (`wcspih` and `wcsbth`) can return a ""parser error"" code (`WCSHDRERR_PARSER`) as of wcslib 5.x.\r\n\r\nThis was not being handled correctly, as it was assumed that any error code coming from those functions was a memory error.\r\n\r\nUnfortunately, wcslib doesn\'t give us any clues as to *why* the parsing failed, but at least it will provide some clue to the user that the error is due to the input data and not something else.'"
4137,105451064,jehturner,embray,2015-09-08 19:15:20,2015-09-11 14:31:39,2015-09-11 14:31:36,closed,,v1.0.5,3,Bug;nddata,https://api.github.com/repos/astropy/astropy/issues/4137,"b""Instantiating NDData subclass from parent object doesn't copy attributes""","b'In `NDData.__init__()`</a>, attributes get copied from an existing instance <a href=""https://github.com/astropy/astropy/blob/59cbe17ee75a34143bca38d064f561a075ca2099/astropy/nddata/nddata.py#L85"">only if it has the same `__class__`</a> as the object being instantiated. Shouldn\'t this instead do `isinstance(data, NDData)` explicitly? Requiring the same `__class__` prevents instantiating NDDataArray properly from an NDData instance (or a subclass from an NDDataArray etc.), eg.:\r\n\r\n    --> a=NDData([1,4,9], uncertainty=StdDevUncertainty([1,2,3]))\r\n    --> print a.uncertainty\r\n    <astropy.nddata.nduncertainty.StdDevUncertainty object at 0x3d8b510>\r\n    --> b=NDDataArray(a)\r\n    --> print b.uncertainty\r\n    None\r\n\r\nI\'d have thought it would be fair game for NDData\'s own `__init__` to accept *any* NDData instance and not just whatever sub-class you happen to be creating at the time ;-). Otherwise, it\'s difficult for sub-classes to delegate their own `__init__` to their parents if they want to be ""upwards-compatible"" (not sure whether I\'m overlooking some other consideration though).\r\n\r\nIf you agree, this would also imply changing my pull request #4130 to use `NDDataArray` <a href=""https://github.com/jehturner/astropy/blob/19f9adb828e14cdee61e6f62077ddd7db7a5639e/astropy/nddata/compat.py#L102"">instead of `__class__`</a>. I won\'t do that before you comment though.\r\n\r\nThanks!\r\n\r\nJames.\r\n'"
4132,105342347,saimn,embray,2015-09-08 09:49:13,2015-10-06 22:00:21,2015-09-10 16:53:03,closed,,v1.0.5,5,Affects-release;Bug;table,https://api.github.com/repos/astropy/astropy/issues/4132,b'Fix issue with webbrowser opening with an empty page.',"b'In `Table.show_in_browser`, if webbrowser is called inside the `with open` block, the file may not be written yet and the browser shows an empty page, after reloading the page is correctly displayed. So calling webbrowser after the with block solves the issue.'"
4130,105281200,jehturner,embray,2015-09-08 00:52:31,2015-09-11 23:55:14,2015-09-11 14:30:49,closed,mwcraig,v1.0.5,9,Affects-release;Bug;nddata,https://api.github.com/repos/astropy/astropy/issues/4130,"b'Candidate fix for issues #4129, #4137'","b""Issue #4129 (creating NDDataArray from another instance fails when uncertainty is set & flags don't get copied from the input). Also added issue #4137 (instantiation from parent object not setting attributes other than data).\r\n\r\nOr if you have a better solution, that's fine with me...\r\n\r\nI assume this will trigger a Travis test automatically? The nddata tests seem to be passing on my machine.\r\n"""
4129,105276860,jehturner,embray,2015-09-07 23:30:30,2015-09-11 14:31:22,2015-09-11 14:31:20,closed,,v1.0.5,2,Bug;nddata,https://api.github.com/repos/astropy/astropy/issues/4129,b'NDDataArray instantiation with another instance fails when uncertainty is set',"b'    --> from astropy.nddata import NDDataArray, StdDevUncertainty\r\n    --> n = NDDataArray([1,4,9], uncertainty=StdDevUncertainty([1,2,3]))\r\n    --> o = NDDataArray(n)\r\n    Traceback (innermost last):\r\n    File ""<console>"", line 1, in <module>\r\n    File ""/home/jturner/Ureka/variants/nddata/lib/python2.7/site-packages/astropy-1.1.dev13355-py2.7-linux-x86_64.egg/astropy/nddata/compat.py"", line 89, in __init__\r\n    super(NDDataArray, self).__init__(*arg, **kwd)\r\n    File ""/home/jturner/Ureka/variants/nddata/lib/python2.7/site-packages/astropy-1.1.dev13355-py2.7-linux-x86_64.egg/astropy/nddata/nddata.py"", line 89, in __init__\r\n    self.uncertainty = data.uncertainty\r\n    File ""/home/jturner/Ureka/variants/nddata/lib/python2.7/site-packages/astropy-1.1.dev13355-py2.7-linux-x86_64.egg/astropy/nddata/compat.py"", line 114, in uncertainty\r\n    if self.unit and value._unit:\r\n    File ""/home/jturner/Ureka/variants/nddata/lib/python2.7/site-packages/astropy-1.1.dev13355-py2.7-linux-x86_64.egg/astropy/nddata/compat.py"", line 138, in unit\r\n    return self._unit\r\n    AttributeError: \'NDDataArray\' object has no attribute \'_unit\'\r\n    --> \r\n\r\nThis happens because L89 of <a href=""https://github.com/astropy/astropy/blob/67748f15a39a80d8900b5e1bd4e073df824071af/astropy/nddata/compat.py#L89"">compat.py calls `NDData.__init__()`</a>, which <a href=""https://github.com/astropy/astropy/blob/67748f15a39a80d8900b5e1bd4e073df824071af/astropy/nddata/nddata.py#L89"">calls NDDataArray\'s uncertainty setter</a>, which <a href=""https://github.com/astropy/astropy/blob/67748f15a39a80d8900b5e1bd4e073df824071af/astropy/nddata/compat.py#L114"">calls the unit getter</a> when an NDUncertainty is defined, which <a href=""https://github.com/astropy/astropy/blob/67748f15a39a80d8900b5e1bd4e073df824071af/astropy/nddata/compat.py#L138"">accesses `self._unit`</a>, which isn\'t set until <a href=""https://github.com/astropy/astropy/blob/67748f15a39a80d8900b5e1bd4e073df824071af/astropy/nddata/nddata.py#L93"">L93 of nddata.py</a> (just a few lines lower down), nor in <a href=""https://github.com/astropy/astropy/blob/67748f15a39a80d8900b5e1bd4e073df824071af/astropy/nddata/compat.py#L87"">`NDDataArray.__init__()`</a>.\r\n\r\nAlso... when instantiating NDDataArray from another instance, the `flags` attribute does not get copied as expected from the input data. The class only <a href=""https://github.com/astropy/astropy/blob/67748f15a39a80d8900b5e1bd4e073df824071af/astropy/nddata/compat.py#L101"">copies flags if passed directly as a parameter</a> by the user. This attribute should get copied by NDDataArray separately from the `super().__init__()`, since its parent NDData doesn\'t have flags.\r\n\r\nThanks!\r\n\r\nJames.\r\n'"
4122,104784958,embray,embray,2015-09-03 21:24:37,2015-11-13 20:48:46,2015-11-13 20:48:38,closed,,v1.0.6,2,Affects-release;Bug;Effort-low;io.fits;Package-novice,https://api.github.com/repos/astropy/astropy/issues/4122,"b""fitsdiff doesn't properly report values with different type by same str()""","b""I've seen variations of this come up a few times before.  The problem is that [`report_diff_values`](https://github.com/astropy/astropy/blob/master/astropy/io/fits/diff.py#L1214) converts numeric values to strings before displaying the diff.  So if you have one card that contains the string value `'1.0'`, and one with the float `1.0`, although the cards will be reported as different the report doesn't show a useful diff since both values look the same as strings.\r\n\r\nA simple workaround would be to have `report_diff_values` also explicitly report type differences (it should also show the value and/or the diffs of the values, but make explicit when there's a type difference)."""
4120,104739269,taldcroft,taldcroft,2015-09-03 16:59:03,2015-11-19 23:30:48,2015-11-12 19:52:13,closed,hamogu,v1.1.0,10,Affects-release;Bug;io.ascii,https://api.github.com/repos/astropy/astropy/issues/4120,b'io.ascii inconsistency in expected exception classes',"b""The list of allowed or expected exception classes in the io.ascii guess process is initially:\r\n```\r\n        except (core.InconsistentTableError, ValueError, TypeError, AttributeError,\r\n                core.OptionalTableImportError, core.ParameterError, cparser.CParserError) as err:\r\n```\r\nBut then if everything fails there is a last-gasp try using the original read_kwargs without strict name checking, and there the exception list is:\r\n```\r\n        except (core.InconsistentTableError, ValueError, ImportError,\r\n                core.OptionalTableImportError, core.ParameterError, cparser.CParserError) as err:\r\n```\r\nThese should just be factored out into one common list.\r\n\r\nThis came up in a question on the astropy list where trying to read a CDS file resulted in an uncaught TypeError exception being raised:\r\n```\r\n/data/baffin/tom/git/astropy/astropy/io/ascii/ui.py in _guess(table, read_kwargs, format, fast_reader)\r\n    433         # Failed all guesses, try the original read_kwargs without column requirements\r\n    434         try:\r\n--> 435             reader = get_reader(**read_kwargs)\r\n    436             dat = reader.read(table)\r\n    437             _read_trace.append({'kwargs': read_kwargs,\r\n\r\n/data/baffin/tom/git/astropy/astropy/io/ascii/ui.py in get_reader(Reader, Inputter, Outputter, **kwargs)\r\n    162     if Reader is None:\r\n    163         Reader = basic.Basic\r\n--> 164     reader = core._get_reader(Reader, Inputter=Inputter, Outputter=Outputter, **kwargs)\r\n    165     return reader\r\n    166 \r\n\r\n/data/baffin/tom/git/astropy/astropy/io/ascii/core.py in _get_reader(Reader, Inputter, Outputter, **kwargs)\r\n   1239         del kwargs['fast_reader'] # ignore fast_reader parameter for slow readers\r\n   1240     reader_kwargs = dict([k, v] for k, v in kwargs.items() if k not in extra_reader_pars)\r\n-> 1241     reader = Reader(**reader_kwargs)\r\n   1242 \r\n   1243     if Inputter is not None:\r\n\r\nTypeError: __init__() got an unexpected keyword argument 'readme'\r\n```\r\nWe had a discussion once about why we should not just do `except Exception as err`, but I can't remember the answer.  This list of exception classes is already pretty broad and can certainly be hiding bugs (like the one fixed in #4115).  Do you remember @hamogu?"""
4117,104516932,ayshih,embray,2015-09-02 16:10:08,2015-09-21 12:15:41,2015-09-16 20:28:13,closed,,v1.0.5,5,Affects-release;Bug;visualization,https://api.github.com/repos/astropy/astropy/issues/4117,b'ImageNormalize needs to call autoscale_None',"b""`__call__()` for the `ImageNormalize` class does not currently include a call to the inherited `autoscale_None()` to be able to handle when `vmin` or `vmax` is set to `None`.  See the analogous call in matplotlib's `Normalize` class: https://github.com/matplotlib/matplotlib/blob/master/lib/matplotlib/colors.py#L913\r\n\r\nThis omission was not immediately apparent because matplotlib calls `autoscale_None()` behind the scenes when plotting in many \xa8C but not all! \xa8C cases."""
4116,104472821,mdboom,mdboom,2015-09-02 12:47:01,2015-09-08 15:05:54,2015-09-08 15:05:54,closed,,v1.1.0,5,Affects-dev;Bug;Critical;wcs,https://api.github.com/repos/astropy/astropy/issues/4116,"b""Don't pass SIP to wcslib -- it can segfault""","b""If a header has a secondary WCS (i.e. has an letter suffix such as `CTYPE1A`, rather than `CTYPE1`) and that header also has SIP keywords, wcslib will crash because it tries to write SIP distortion keywords into an uninitialized struct.\r\n\r\nThe problem is actually a lot more complicated than this and involves ambiguity around the SIP standard and whether it supports secondary WCSes at all.  That may take some time to resolve on wcslib's end, and in the meantime, I'd prefer to just hedge against it to prevent the segfault (so that this doesn't hold up the next astropy release)."""
4115,104387702,taldcroft,taldcroft,2015-09-02 01:50:04,2015-09-30 13:41:48,2015-09-30 13:41:46,closed,hamogu,v1.1.0,11,Affects-release;Bug;Enhancement;io.ascii,https://api.github.com/repos/astropy/astropy/issues/4115,b'Put FastBasic high in guess list and fix some latent bugs in fast readers',"b""I think we had intended to make the fast readers be used by default for Basic format tables, but the current guessing order was using the slow reader in most cases.  This PR changes that by inserting FastBasic high in the guess list.  As always messing around with the guess list is done with some trepidation, @hamogu.\r\n\r\nDoing this revealed a latent issue in the fast readers which was mostly preventing them from participating in the guess process, related to strict_names not being defined and always raising an exception.  This was interpreted as the reader having failed to parse the table.\r\n\r\nThere is one more latent problem which will show up as Travis failures here:\r\n```\r\nascii.read(['1 2', '3 4'], names=['a', 'b'], fast_reader='force', format='fast_basic')\r\nOut[6]: \r\n<Table length=1>\r\n  a     b  \r\nint64 int64\r\n----- -----\r\n    3     4\r\n```\r\nWhen the table is interpreted as a `basic` format then the column names are `1` and `2`.  However, somewhere along the way the `names` of `['a', 'b']` get set as the parsed column names *before* the test enabled by `strict_names=True` gets done.  With enough effort I might be able to tease out what's happening, but I'm hoping that @mdmueller will see the fix right away and maybe make a PR against my branch.  :pray:"""
4099,103393766,taldcroft,taldcroft,2015-08-27 00:31:04,2015-08-27 17:19:38,2015-08-27 17:19:37,closed,,v1.0.5,1,Affects-release;Bug;table,https://api.github.com/repos/astropy/astropy/issues/4099,b'Fix bug unpickling bare Column: _parent_table attr not set',"b""Previously after unpickling a Column the resultant object had no `_parent_table` attribute.  This wasn't a problem for accessing the data and meta values, but `repr` failed (and in general it is expected that a `Column` has a `_parent_table` attribute)."""
4098,103364963,scottransom,embray,2015-08-26 21:11:49,2015-11-16 14:01:42,2015-11-12 20:10:56,closed,mhvk,v1.0.7,11,Affects-release;Bug;table,https://api.github.com/repos/astropy/astropy/issues/4098,b'astropy tables with mixin columns cannot be pickled',"b'[EDIT by @taldcroft] - the problem described below is already fixed, but later another issue pickling a table with mixin columns is described.  This issue now relates to that problem.\r\n\r\nIt seems if the shape of a column is multidimensional, then pickling does not work.  Here is a toy example given version 1.1.dev13184\r\n\r\n```python\r\nIn [1]: from astropy.table import Table\r\n\r\nIn [2]: import cPickle as pickle\r\n\r\nIn [3]: a = zeros(3)\r\n\r\nIn [4]: t = Table([a], names=(\'a\'))\r\n\r\nIn [5]: pickle.dump(t, open(""table.pickle"", ""wb""))\r\n\r\nIn [6]: print t[\'a\']\r\n a \r\n---\r\n0.0\r\n0.0\r\n0.0\r\n\r\nIn [7]: a = zeros((3,2))\r\n\r\nIn [8]: t = Table([a], names=(\'a\'))\r\n\r\nIn [9]: pickle.dump(t, open(""table.pickle"", ""wb""))\r\n---------------------------------------------------------------------------\r\nPicklingError                             Traceback (most recent call last)\r\n<ipython-input-9-563cc76ba7b1> in <module>()\r\n----> 1 pickle.dump(t, open(""table.pickle"", ""wb""))\r\n\r\nPicklingError: Can\'t pickle <class \'astropy.table.column.Column\'>: it\'s not the same object as astropy.table.column.Column\r\n\r\nIn [10]: print t[\'a\']\r\n  a [2]   \r\n----------\r\n0.0 .. 0.0\r\n0.0 .. 0.0\r\n0.0 .. 0.0\r\n\r\nIn [11]: a = [[0,1],[1,2],[2,3]]\r\n\r\nIn [12]: t = Table([a], names=(\'a\'))\r\n\r\nIn [13]: pickle.dump(t, open(""table.pickle"", ""wb""))\r\n---------------------------------------------------------------------------\r\nPicklingError                             Traceback (most recent call last)\r\n<ipython-input-13-563cc76ba7b1> in <module>()\r\n----> 1 pickle.dump(t, open(""table.pickle"", ""wb""))\r\n\r\nPicklingError: Can\'t pickle <class \'astropy.table.column.Column\'>: it\'s not the same object as astropy.table.column.Column\r\n\r\nIn [14]: t[\'a\']\r\nOut[14]: \r\n<Column name=\'a\' dtype=\'int64\' shape=(2,) length=3>\r\n0 .. 1\r\n1 .. 2\r\n2 .. 3\r\n```'"
4089,102612535,keflavich,pllim,2015-08-23 12:06:22,2016-07-05 14:51:14,2016-07-05 14:51:14,closed,mdboom,,6,Affects-dev;Bug;wcs,https://api.github.com/repos/astropy/astropy/issues/4089,b'WCS WAT distortion with `wtype=tan` causes wcslib parser error',"b""I get a `MemoryAllocationError` when trying to create a WCS object from this header:\r\n\r\n```\r\nSIMPLE  =                    T / Fits standard\r\nBITPIX  =                  -32 / Bits per pixel\r\nNAXIS   =                    2 / Number of axes\r\nNAXIS1  =                 1024 / Axis length\r\nNAXIS2  =                 1024 / Axis length\r\nEXTEND  =                    T / File may contain extensions\r\nORIGIN  = 'NOAO-IRAF FITS Image Kernel July 2003' / FITS file originator\r\nIRAF-TLM= '19:37:34 (05/10/2006)' / Time of last modification\r\nOBJECT  = 'w51_hj_k'           / Name of the object observed\r\nDATE    = '2006-10-05T22:37:34' / Date this file was written\r\nEXPTIME =              20.0000          / Total integration time\r\nMJD-OBS =       52842.20221769          / MJD start (2003-07-22T04:51:11.608)\r\nDATE-OBS= '2003-07-22T04:51:11.6080'    / Observing date\r\nORIGFILE= 'NACO_0325.fits'              / Original File Name\r\nINSTRUME= 'NAOS+CONICA'                 / Instrument used\r\nTELESCOP= 'ESO-VLT-U4'                  / ESO Telescope Name\r\nRA      =           290.917360          / 19:23:40.1 RA (J2000) pointing\r\nDEC     =             14.51946          / 14:31:10.0 DEC (J2000) pointing\r\nEQUINOX =                2000.          / Standard FK5\r\nRADECSYS= 'FK5     '                    / FK5\r\nLST     =            72459.260          / 20:07:39.260 LST\r\nUTC     =            17468.000          / 04:51:08.000 UTC\r\nOBSERVER= 'UNKNOWN '                    / Name of observer\r\nPI-COI  = 'UNKNOWN '                    / Name(s) of proposer(s)\r\nALARM   = '        '                    / Active alarm(s), if any.\r\nAIRMASS =              1.31600          / Averaged air mass\r\nCRVAL1  =    290.9171447528058 / Coordinate at reference pixel in <axis\r\nCRVAL2  =    14.51930969275231 / Coordinate at reference pixel in <axis\r\nCRPIX1  =     478.319227457047 / Ref pixel in <axis direction>\r\nCRPIX2  =     588.740275621415 / Ref pixel in <axis direction>\r\nCDELT1  =  -7.5277800000000E-6 / Increment in <axis direction>\r\nCDELT2  =  7.52778000000000E-6 / Increment in <axis direction>\r\nCTYPE1  = 'RA---TAN'                    / Coordinate system of <axis direction>\r\nCTYPE2  = 'DEC--TAN'                    / Coordinate system of <axis direction>\r\nCD1_1   =         -7.52778E-06          / Translation matrix element\r\nCD2_2   =          7.52778E-06          / Translation matrix element\r\nARCFILE = 'NACO.2003-07-22T04:51:11.608.fits' / Archive File Name\r\nUT      = '04:51:08.000'                / UT at start\r\nST      = '20:07:39.260'                / ST at start\r\nIMAGETYP= 'OBJECT  '                    / Observation type\r\nWCSDIM  =                    2\r\nLTV1    =     9.31922745704651\r\nLTV2    =     2.74027562141418\r\nLTM1_1  =                   1.\r\nLTM2_2  =                   1.\r\nWAT0_001= 'system=image'\r\nWAT1_001= 'wtype=tan axtype=ra'\r\nWAT2_001= 'wtype=tan axtype=dec'\r\nNCOMBINE=                   31\r\nOVERLAP = '[335:684,329:681]'\r\nCRVAL1A =            290.91736\r\nCRVAL2A =             14.51946\r\nCOMMENT   487 blank lines\r\nEND\r\n```\r\non astropy 1.1.dev13127\r\n\r\n@mdboom - could this be related to the precision improvements in wcs 5.9?"""
4088,102392940,taldcroft,taldcroft,2015-08-21 14:36:20,2015-08-21 20:27:38,2015-08-21 20:27:31,closed,,v1.0.5,5,Affects-release;Bug;table,https://api.github.com/repos/astropy/astropy/issues/4088,b'Fix an issue with setting fill value when column dtype is changed',"b""As noted in email from Gregory Simonian on astropy@scipy.org:\r\n```\r\nt = Table({'a': ['1']}, masked=True)\r\nt['a'].set_fill_value('0')\r\nu = Table(t, names=['a'], dtype=[np.int])\r\n> TypeError: Cannot set fill value of string with array of dtype int64\r\n```\r\n\r\nThis fix updates the `fill_value` setter to always coerce the new fill_value to the column dtype (unless the fill value is `None`)."""
4084,101516212,embray,embray,2015-08-17 21:42:32,2015-08-17 21:44:57,2015-08-17 21:44:51,closed,,v1.0.5,1,Affects-release;Bug;utils,https://api.github.com/repos/astropy/astropy/issues/4084,b'Fix bug in resolve_name resulting in duplicate imports of numpy (or other packages)',"b'This fixes the bug that was originally fixed in #4083, but which has now been split off to a separate PR since it should be fixed for the v1.0.x branch.'"
4082,101498612,jeanconn,embray,2015-08-17 20:00:09,2015-10-02 19:20:41,2015-10-02 19:20:41,closed,eteq,,2,Affects-release;Bug;coordinates,https://api.github.com/repos/astropy/astropy/issues/4082,b'astropy.coordinates.search_around_sky breaks on storekdtree=False',"b""astropy.coordinates.search_around_sky doesn't seem to respect a boolean for storekdtree.  This looks inconsistent with the docs.  This following code example works fine if I don't include the storekdtree option and accept the default.\r\n\r\n```\r\ncat = SkyCoord([10.076,10.00455], [18.54746, 18.54896], unit='deg')\r\nsearch_around_sky(cat[0:1], cat, seplimit=astropy.units.arcsec * 60, storekdtree=False)\r\n\r\nin search_around_sky(coords1, coords2, seplimit, storekdtree)\r\n    333     kdt1 = _get_cartesian_kdtree(ucoords1, storekdtree)\r\n    334 \r\n--> 335     if hasattr(coords2, storekdtree):\r\n    336         #just use the stored KD-Tree\r\n    337         kdt2 = getattr(coords2, storekdtree)\r\n\r\nTypeError: hasattr(): attribute name must be string\r\n\r\n```"""
4076,101012795,nden,embray,2015-08-14 13:42:58,2015-08-14 14:46:04,2015-08-14 14:46:04,closed,embray,v1.0.5,2,Affects-release;Bug;modeling,https://api.github.com/repos/astropy/astropy/issues/4076,b'format_str for models without formal parameters.',b'A minor change to `_format_str` to handle models without parameters.\r\n'
4060,99904956,taldcroft,taldcroft,2015-08-09 15:17:35,2016-05-31 17:35:33,2015-08-10 14:08:05,closed,mhvk,v1.0.10,7,Affects-release;Bug;table,https://api.github.com/repos/astropy/astropy/issues/4060,b'Fix bug when doing outer join on multi-dim columns',b'This fixes a bug reported in #4059.\r\n\r\n@embray - would like to get this in 1.0.4 if possible.'
4059,99886808,richardgmcmahon,taldcroft,2015-08-09 10:54:10,2015-08-10 17:34:33,2015-08-10 17:03:24,closed,,v1.0.5,4,Affects-release;Bug;table,https://api.github.com/repos/astropy/astropy/issues/4059,b'ValueError: join requires masking column',"b""Hi, I am doing a 'outer' join on two FITs files that have been read in as tables and get the error below.\r\n\r\nValueError: join requires masking column 'MODEL_MAG' but column type MaskedColumn does not support masking.\r\n\r\nThis column has FITS format: 4E so maybe this is an edge case.\r\n\r\nAn 'inner' join works fine.\r\n\r\nregards, richard\r\n\r\n"""
4057,99695336,bmorris3,embray,2015-08-07 17:43:43,2015-09-04 19:37:43,2015-09-04 19:37:42,closed,,v1.0.5,11,Affects-release;Bug;coordinates,https://api.github.com/repos/astropy/astropy/issues/4057,b'Use .rindex instead of index to fix AltAz __repr__ bug for #4055',"b'The `SkyCoord.__repr__` scans the `repr` of the frame to collect frame attributes. A `SkyCoord` transformed to the `AltAz` frame has an `obstime` attribute which stores a time, which gets represented in ISO format and introduces a few colons to the frame attributes string. This breaks the parsing machinery which intends to put the frame attributes into the `SkyCoord.__repr__` string before the coordinate by searching for the first colon. \r\n\r\nThe fix is simply to search for the last colon instead of the first, and everything is peachy. This closes astropy/astropy#4055.'"
4056,99694331,embray,embray,2015-08-07 17:36:39,2015-08-07 21:17:16,2015-08-07 21:17:06,closed,,v1.0.4,1,Affects-release;Bug;logging,https://api.github.com/repos/astropy/astropy/issues/4056,b'Fix exception handler crash on Python 3',b'Fixes long-standing bug in exception hook on Python 3 (use of `unicode` builtin in the narrow case of message-less exceptions).'
4055,99685004,bmorris3,embray,2015-08-07 16:42:27,2015-09-04 19:37:42,2015-09-04 19:37:42,closed,,v1.0.5,1,Affects-release;Bug;coordinates,https://api.github.com/repos/astropy/astropy/issues/4055,b'SkyCoord.__repr__ misbehaves after transformation to AltAz frame',"b'After a SkyCoord is transformed to the `AltAz` frame, the `__repr__` becomes confusing, partially repeated: \r\n\r\n```python\r\n>>> from astropy.coordinates import SkyCoord, EarthLocation, AltAz\r\n>>> from astropy.time import Time\r\n>>> import astropy.units as u\r\n>>> vega = SkyCoord.from_name(""Vega"")\r\n>>> vega\r\n<SkyCoord (ICRS): (ra, dec) in deg\r\n    (279.23473479, 38.78368896)>\r\n# Now transform to AltAz\r\n>>> location = EarthLocation(-122*u.deg, 47*u.deg, 0*u.m)\r\n>>> vega.transform_to(AltAz(location=location, obstime=Time.now()))\r\n<SkyCoord (AltAz: obstime=2015-08-07 16:35:51.444048, location=(-2309222.664660742, \r\n-3695528.7655007695, 4641764.788820372) m, pressure=0.0 hPa, temperature=0.0 deg_C,\r\n relative_humidity=0, obswl=1.0 micron):35:51.444048, location=(-2309222.664660742, \r\n-3695528.7655007695, 4641764.788820372) m, pressure=0.0 hPa, temperature=0.0 deg_C, \r\nrelative_humidity=0, obswl=1.0 micron): (az, alt) in deg\r\n    (347.17661707, -2.93629961)>\r\n```\r\n\r\nI think this has to do with the fact that the `__repr__` for `SkyCoord` [searches for `):`](https://github.com/astropy/astropy/blob/master/astropy/coordinates/sky_coordinate.py#L484), which `AltAz` might introduce. I\'m going to see if I can make a fix. '"
4048,99495443,bmorris3,embray,2015-08-06 18:19:31,2015-08-07 20:58:39,2015-08-07 20:58:30,closed,,v1.0.4,3,Affects-release;Bug;time,https://api.github.com/repos/astropy/astropy/issues/4048,b'astropy.utils.misc.isiterable returns True for scalar times',"b""The `astropy.utils.misc.isiterable` tool misleadingly handles scalar times:\r\n\r\n```python\r\n>>> from astropy.time import Time\r\n>>> from astropy.utils.misc import isiterable\r\n>>> scalar_time = Time.now()    # Produce a scalar time\r\n>>> scalar_time.isscalar\r\nTrue\r\n>>> isiterable(scalar_time)    # Should not be iterable?\r\nTrue\r\n>>> scalar_time[0] \r\nTypeError: scalar 'Time' object is not subscriptable.\r\n```"""
4044,99229997,mdboom,mdboom,2015-08-05 15:23:14,2015-08-31 18:04:33,2015-08-31 18:04:33,closed,nden,v1.1.0,1,Affects-dev;Bug;wcs,https://api.github.com/repos/astropy/astropy/issues/4044,b'Fix #4041: Handle a list passed as naxis to WCS',b'This also revealed a memory allocation bug in wcslib itself when copying distortions that is fixed here and has been reported upstream.'
4041,99134966,bwinkel,mdboom,2015-08-05 06:32:04,2015-08-31 18:04:47,2015-08-31 18:04:47,closed,mdboom,v1.1.0,1,Affects-dev;Bug;wcs,https://api.github.com/repos/astropy/astropy/issues/4041,b'WCS sub-axes not working in constructor',"b'Choosing sub-projections seems broken:\r\n\r\n```python\r\n# wget http://www.atnf.csiro.au/people/mcalabre/data/WCS/1904-66_SIN.fits.gz\r\n\r\nfrom astropy.io import fits as pf\r\nfrom astropy import wcs\r\n\r\nheader = pf.getheader(\'1904-66_SIN.fits.gz\', 0)\r\nw = wcs.WCS(header, naxis=[\'celestial\'])\r\n```\r\n\r\n```python\r\nTypeError                                 Traceback (most recent call last)\r\n<ipython-input-12-19eb1f0c5d1d> in <module>()\r\n----> 1 w = wcs.WCS(header, naxis=[\'longitude\'])\r\n\r\n.../python2.7/site-packages/astropy-1.1.dev13153-py2.7-linux-x86_64.egg/astropy/wcs/wcs.pyc in __init__(self, header, fobj, key, minerr, relax, naxis, keysel, colsel, fix, translate_units, _do_set)\r\n    415             det2im = self._read_det2im_kw(header, fobj, err=minerr)\r\n    416             cpdis = self._read_distortion_kw(\r\n--> 417                 header, fobj, dist=\'CPDIS\', err=minerr)\r\n    418             sip = self._read_sip_kw(header)\r\n    419 \r\n\r\n.../python2.7/site-packages/astropy-1.1.dev13153-py2.7-linux-x86_64.egg/astropy/wcs/wcs.pyc in _read_distortion_kw(self, header, fobj, dist, err)\r\n    854 \r\n    855         tables = {}\r\n--> 856         for i in range(1, self.naxis + 1):\r\n    857             d_error_key = err_kw + str(i)\r\n    858             if d_error_key in header:\r\n\r\nTypeError: can only concatenate list (not ""int"") to list\r\n\r\n```\r\n\r\nApparently, the naxis option is not processed properly (self.naxis == [\'celestial\'] instead of 2).\r\n\r\nInterestingly, the following works\r\n\r\n```python\r\nw = wcs.WCS(header)\r\nw = w.sub(axes=[\'celestial\'])\r\n```\r\n\r\nIs there a reason, why different keywords are used (naxis vs. axes)?'"
4033,98838488,eteq,embray,2015-08-03 21:05:28,2015-08-06 13:39:11,2015-08-06 13:39:11,closed,eteq,v1.0.4,1,Affects-release;Bug;coordinates,https://api.github.com/repos/astropy/astropy/issues/4033,b'separation fails with recursion error for some coordinates',"b""This is a subtle bug that probably slipped through the tests because it depends on a particular set of inputs.  Specifically, if you ask for the `separation` between two `SkyCoord` objects when *both* have a `distance`, you get a strange error:\r\n\r\n```python\r\n>>> alb = SkyCoord.from_name('Albireo')\r\n>>> alb_wdist = SkyCoord(alb, distance=133*u.pc)\r\n>>> de = SkyCoord.from_name('Deneb')\r\n>>> de_wdist = SkyCoord(de, distance=802*u.pc)\r\n>>> aa = AltAz(location=EarthLocation(lat=45*u.deg, lon=0*u.deg), obstime='2010-1-1')\r\n>>> alb_wdistaa = alb_wdist.transform_to(aa)\r\n>>> de_wdistaa = de_wdist.transform_to(aa)\r\n>>> de_wdistaa.separation(alb_wdistaa)\r\nRuntimeError: maximum recursion depth exceeded while calling a Python object\r\n```\r\n\r\nThe particularly curious thing is that this does *not* happen if the one calling has no distance:\r\n```python\r\n>>> deaa = de.transform_to(aa)\r\n>>> albaa = alb.transform_to(aa)\r\n>>> deaa.separation(albaa)\r\n<Angle 22.28621055928645 deg>\r\n>>> deaa.separation(alb_wdistaa)\r\n<Angle [ 22.28621208] deg>\r\n>>> alb_wdistaa.separation(deaa)\r\nRuntimeError: maximum recursion depth exceeded while calling a Python object\r\n```\r\nThe second one there is probably related to #3920, so it's quite possible a fix for that will also fix this."""
4030,98758955,mdboom,embray,2015-08-03 14:41:16,2015-08-04 18:56:07,2015-08-04 18:56:07,closed,,v1.0.4,4,Affects-release;Bug;Docs;visualization,https://api.github.com/repos/astropy/astropy/issues/4030,b'Plot style should not set interactive',"b""A style should not tinker with the interactive mode.  Importantly, this means if you use it in a non-interactive context, such as building Sphinx docs or in a web server the plots take on the order of 10-20x longer to render.\r\n\r\nThis is somewhat a matplotlib bug that this even works in the first place (see matplotlib/matplotlib#4855).\r\n\r\nHowever, in the meantime, I think we should just remove this from `astropy_mpl_style`.\r\n\r\nNot exactly sure how to milestone this -- it probably belongs as a bugfix, but's it could trip someone up who was inadvertently depending on this behavior."""
4023,98286209,embray,embray,2015-07-30 23:31:59,2015-08-04 15:27:15,2015-08-04 15:27:07,closed,,v1.1.0,1,Affects-dev;Bug;utils,https://api.github.com/repos/astropy/astropy/issues/4023,b'classproperty docstring bug',"b""Workaround for a bug in Python that was causing the docstring of `classproperty` instances to not be set properly in some cases.\r\n\r\nI'll send a patch to CPython tomorrow (if it isn't already fixed there)."""
4022,98278929,embray,embray,2015-07-30 22:35:19,2015-08-04 15:25:52,2015-08-04 15:25:44,closed,,v1.1.0,0,Affects-dev;Bug;modeling,https://api.github.com/repos/astropy/astropy/issues/4022,b'Fixes minor bug in Parameter.validator methods',"b""Just fixes a small bug related to #3910.  Far as I can tell this didn't actually break any code, but it still has slightly funny effects if you don't explicitly pass the third arg to `MethodType` on Python 2."""
4021,98247565,mdboom,mdboom,2015-07-30 19:47:18,2015-07-30 20:30:12,2015-07-30 20:30:12,closed,,v1.1.0,3,Affects-dev;Bug;modeling;wcs,https://api.github.com/repos/astropy/astropy/issues/4021,b'Ensure projection param defaults are reasonable',"b'The ""projections that are wrappers of wcslib projections"" were previously being tested with sample data from the FITS WCS standard.  However, we weren\'t testing the *default* values of the parameters, which in some cases didn\'t match the defaults in the FITS WCS standard, and in others were unreasonable/nonsensical values for the particular projection.\r\n\r\nThis fixes the defaults and adds a test that instantiates and evaluates all of the models with the default parameter values.'"
4016,98008261,embray,embray,2015-07-29 19:11:33,2015-07-29 19:43:44,2015-07-29 19:43:38,closed,,v1.0.4,1,Affects-release;Bug;utils,https://api.github.com/repos/astropy/astropy/issues/4016,b'Fix minor bug in astropy.utils.decorators.wraps',"b""Fixes a bug in the wraps() decorator where the wrapper function inherited the wrapped function's name even if `__name__` is not included in the 'assigned' argument (which lists attributes that shoul be copied from the wrapped function to the wrapper function)."""
4015,97806043,astrofrog,embray,2015-07-28 21:30:49,2015-08-05 17:20:57,2015-07-29 19:44:27,closed,,v1.0.4,4,Affects-dev;Bug;io.fits,https://api.github.com/repos/astropy/astropy/issues/4015,b'RuntimeError in astropy.io.fits in del_col test',"b'@embray - I noticed the following sporadic failures in ``io.fits`` over in https://github.com/astropy/astropy/pull/3909:\r\n\r\n```python\r\n==================================== ERRORS ====================================\r\n_____________ ERROR at teardown of TestCore.test_add_del_columns2 ______________\r\n\r\nself = <CallInfo when=\'teardown\' exception: File(s) not closed:\r\n  /tmp/astropy-test-wsvFQg/lib.linux-x86_64-2.6/astropy/io/fits/tests/data/tb.fits>\r\nfunc = <function <lambda> at 0xcce17d0>, when = \'teardown\'\r\n\r\n >   ??? \r\n\r\n_pytest.runner:137: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\n\r\n >   ??? \r\n\r\n_pytest.runner:124: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\n\r\nkwargs = {\'item\': <Function \'test_add_del_columns2\'>, \'nextitem\': <Function \'test_uint\'>}\r\nplugins = [<Session \'lib.linux-x86_64-2.6\'>, <_pytest.config.PytestPluginManager object at 0x1991150>, <_pytest.config.Config ob...opy/extern/pytest.py/_pytest.main\'>, <module \'_pytest.terminal\' from \'astropy/extern/pytest.py/_pytest.terminal\'>, ...]\r\n\r\n >   ??? \r\n\r\n_pytest.main:161: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\n\r\nself = <HookCaller \'pytest_runtest_teardown\'>\r\nplugins = [<Session \'lib.linux-x86_64-2.6\'>, <_pytest.config.PytestPluginManager object at 0x1991150>, <_pytest.config.Config ob...opy/extern/pytest.py/_pytest.main\'>, <module \'_pytest.terminal\' from \'astropy/extern/pytest.py/_pytest.terminal\'>, ...]\r\nkwargs = {\'item\': <Function \'test_add_del_columns2\'>, \'nextitem\': <Function \'test_uint\'>}\r\nmethods = [<function pytest_runtest_teardown at 0x18868c0>, <function pdbitem at 0x19f46e0>, <function pytest_runtest_teardown a...2578>, <bound method CaptureManager.pytest_runtest_teardown of <_pytest.capture.CaptureManager instance at 0x2649b90>>]\r\n\r\n >   ??? \r\n\r\n_pytest.core:380: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\n\r\nself = <HookCaller \'pytest_runtest_teardown\'>\r\nmethods = [<function pytest_runtest_teardown at 0x18868c0>, <function pdbitem at 0x19f46e0>, <function pytest_runtest_teardown a...2578>, <bound method CaptureManager.pytest_runtest_teardown of <_pytest.capture.CaptureManager instance at 0x2649b90>>]\r\nkwargs = {\'item\': <Function \'test_add_del_columns2\'>, \'nextitem\': <Function \'test_uint\'>}\r\n\r\n >   ??? \r\n\r\n_pytest.core:387: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\n\r\nself = <MultiCall 0 results, 3 meths, kwargs={\'item\': <Function \'test_add_del_columns2\'>, \'nextitem\': <Function \'test_uint\'>}>\r\n\r\n >   ??? \r\n\r\n_pytest.core:288: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\n\r\nitem = <Function \'test_add_del_columns2\'>, nextitem = <Function \'test_uint\'>\r\n\r\n     def pytest_runtest_teardown(item, nextitem): \r\n         if hasattr(item, \'set_temp_cache\'): \r\n             item.set_temp_cache.__exit__() \r\n         if hasattr(item, \'set_temp_config\'): \r\n             item.set_temp_config.__exit__() \r\n      \r\n         # a ""skipped"" test will not have been called with \r\n         # pytest_runtest_setup, so therefore won\'t have an \r\n         # ""open_files"" member \r\n         if (not item.config.getvalue(\'open_files\') or \r\n                 not hasattr(item, \'open_files\')): \r\n             return \r\n      \r\n         start_open_files = item.open_files \r\n         del item.open_files \r\n      \r\n         open_files = _get_open_file_list() \r\n      \r\n         # This works in tandem with the test_open_file_detection test to \r\n         # ensure that it creates one extra open file. \r\n         if item.name == \'test_open_file_detection\': \r\n             assert len(start_open_files) + 1 == len(open_files) \r\n             return \r\n      \r\n         not_closed = set() \r\n         open_files_ignore = item.config.getini(\'open_files_ignore\') \r\n         for filename in open_files: \r\n             ignore = False \r\n      \r\n             for ignored in open_files_ignore: \r\n                 if not os.path.isabs(ignored): \r\n                     if os.path.basename(filename) == ignored: \r\n                         ignore = True \r\n                         break \r\n                 else: \r\n                     if filename == ignored: \r\n                         ignore = True \r\n                         break \r\n      \r\n             if ignore: \r\n                 continue \r\n      \r\n             if filename not in start_open_files: \r\n                 not_closed.add(filename) \r\n      \r\n         if len(not_closed): \r\n             msg = [\'File(s) not closed:\'] \r\n             for name in not_closed: \r\n                 msg.append(\'  {0}\'.format(name)) \r\n >           raise AssertionError(\'\\n\'.join(msg)) \r\n \x1b[31mE           AssertionError: File(s) not closed: \r\n \x1b[31mE             /tmp/astropy-test-wsvFQg/lib.linux-x86_64-2.6/astropy/io/fits/tests/data/tb.fits \r\n\r\nastropy/tests/pytest_plugins.py:526: AssertionError\r\n=================================== FAILURES ===================================\r\n________________________ TestCore.test_add_del_columns2 ________________________\r\n\r\nself = <astropy.io.fits.tests.test_core.TestCore object at 0xb3f09d0>\r\n\r\n     def test_add_del_columns2(self): \r\n         hdulist = fits.open(self.data(\'tb.fits\')) \r\n         table = hdulist[1] \r\n         assert table.data.dtype.names == (\'c1\', \'c2\', \'c3\', \'c4\') \r\n         assert table.columns.names == [\'c1\', \'c2\', \'c3\', \'c4\'] \r\n >       table.columns.del_col(str(\'c1\')) \r\n\r\nastropy/io/fits/tests/test_core.py:83: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\n\r\nself = ColDefs(\r\n    name = \'c2\'; format = \'3A\'; disp = \'A3\'\r\n    name = \'c3\'; format =...40000000000000002; disp = \'G15.7\'\r\n    name = \'c4\'; format = \'1L\'; disp = \'L6\'\r\n)\r\ncol_name = \'c1\'\r\n\r\n     def del_col(self, col_name): \r\n         """""" \r\n             Delete (the definition of) one `Column`. \r\n      \r\n             col_name : str or int \r\n                 The column\'s name or index \r\n             """""" \r\n      \r\n         indx = _get_index(self.names, col_name) \r\n         col = self.columns[indx] \r\n      \r\n         del self._arrays[indx] \r\n         # Obliterate caches of certain things \r\n         del self.dtype \r\n         del self._recformats \r\n         del self._dims \r\n      \r\n         del self.columns[indx] \r\n      \r\n         col._remove_listener(self) \r\n      \r\n         # If this ColDefs is being tracked by a table HDU, inform the HDU (or \r\n         # any other listeners) that the column has been removed \r\n         # Just send a reference to self, and the index of the column that was \r\n         # removed \r\n >       self._notify(\'column_removed\', self, indx) \r\n\r\nastropy/io/fits/column.py:1403: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\n\r\nself = ColDefs(\r\n    name = \'c2\'; format = \'3A\'; disp = \'A3\'\r\n    name = \'c3\'; format =...40000000000000002; disp = \'G15.7\'\r\n    name = \'c4\'; format = \'1L\'; disp = \'L6\'\r\n)\r\nnotification = \'column_removed\'\r\nargs = (ColDefs(\r\n    name = \'c2\'; format = \'3A\'; disp = \'A3\'\r\n    name = \'c3\'; format =...40000000000000002; disp = \'G15.7\'\r\n    name = \'c4\'; format = \'1L\'; disp = \'L6\'\r\n), 0)\r\nkwargs = {}, method_name = \'_update_column_removed\'\r\nlistener = <astropy.io.fits.hdu.table.BinTableHDU object at 0xb318a10>\r\nmethod = <bound method BinTableHDU._update_column_removed of <astropy.io.fits.hdu.table.BinTableHDU object at 0xb318a10>>\r\n\r\n     def _notify(self, notification, *args, **kwargs): \r\n         """""" \r\n             Notify all listeners of some particular state change by calling their \r\n             ``_update_<notification>`` method with the given ``*args`` and \r\n             ``**kwargs``. \r\n      \r\n             The notification does not by default include the object that actually \r\n             changed (``self``), but it certainly may if required. \r\n             """""" \r\n      \r\n         if self._listeners is None: \r\n             return \r\n      \r\n         method_name = \'_update_{0}\'.format(notification) \r\n >       for listener in self._listeners.itervaluerefs(): \r\n             listener = listener()  # dereference weakref \r\n \x1b[31mE           RuntimeError: dictionary changed size during iteration \r\n\r\nastropy/io/fits/util.py:137: RuntimeError\r\n________ TestColumnFunctions.test_column_attribute_change_after_removal ________\r\n\r\nself = <astropy.io.fits.tests.test_table.TestColumnFunctions object at 0xd694f90>\r\n\r\n     def test_column_attribute_change_after_removal(self): \r\n         """""" \r\n             This is a test of the column attribute change notification system. \r\n      \r\n             After a column has been removed from a table (but other references \r\n             are kept to that same column) changes to that column\'s attributes \r\n             should not trigger a notification on the table it was removed from. \r\n             """""" \r\n      \r\n         # One way we can check this is to ensure there are no further changes \r\n         # to the header \r\n         table = fits.BinTableHDU.from_columns([ \r\n             fits.Column(\'a\', format=\'D\'), \r\n             fits.Column(\'b\', format=\'D\')]) \r\n      \r\n         b = table.columns[\'b\'] \r\n      \r\n >       table.columns.del_col(\'b\') \r\n\r\nastropy/io/fits/tests/test_table.py:2587: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\n\r\nself = ColDefs(\r\n    name = \'a\'; format = \'D\'\r\n), col_name = \'b\'\r\n\r\n     def del_col(self, col_name): \r\n         """""" \r\n             Delete (the definition of) one `Column`. \r\n      \r\n             col_name : str or int \r\n                 The column\'s name or index \r\n             """""" \r\n      \r\n         indx = _get_index(self.names, col_name) \r\n         col = self.columns[indx] \r\n      \r\n         del self._arrays[indx] \r\n         # Obliterate caches of certain things \r\n         del self.dtype \r\n         del self._recformats \r\n         del self._dims \r\n      \r\n         del self.columns[indx] \r\n      \r\n         col._remove_listener(self) \r\n      \r\n         # If this ColDefs is being tracked by a table HDU, inform the HDU (or \r\n         # any other listeners) that the column has been removed \r\n         # Just send a reference to self, and the index of the column that was \r\n         # removed \r\n >       self._notify(\'column_removed\', self, indx) \r\n\r\nastropy/io/fits/column.py:1403: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\n\r\nself = ColDefs(\r\n    name = \'a\'; format = \'D\'\r\n), notification = \'column_removed\'\r\nargs = (ColDefs(\r\n    name = \'a\'; format = \'D\'\r\n), 1), kwargs = {}\r\nmethod_name = \'_update_column_removed\'\r\nlistener = <astropy.io.fits.hdu.table.BinTableHDU object at 0xd694cd0>\r\nmethod = <bound method BinTableHDU._update_column_removed of <astropy.io.fits.hdu.table.BinTableHDU object at 0xd694cd0>>\r\n\r\n     def _notify(self, notification, *args, **kwargs): \r\n         """""" \r\n             Notify all listeners of some particular state change by calling their \r\n             ``_update_<notification>`` method with the given ``*args`` and \r\n             ``**kwargs``. \r\n      \r\n             The notification does not by default include the object that actually \r\n             changed (``self``), but it certainly may if required. \r\n             """""" \r\n      \r\n         if self._listeners is None: \r\n             return \r\n      \r\n         method_name = \'_update_{0}\'.format(notification) \r\n >       for listener in self._listeners.itervaluerefs(): \r\n             listener = listener()  # dereference weakref \r\n \x1b[31mE           RuntimeError: dictionary changed size during iteration \r\n\r\nastropy/io/fits/util.py:137: RuntimeError\r\n \x1b[31m 2 failed, 9136 passed, 390 skipped, 75 xfailed, 2 xpassed, 1 error in 415.64 seconds  \r\ntravis_time:end:02867130:start=1438115296196612299,finish=1438115804923683841,duration=508727071542\r\n\x1b[0K\r\n\x1b[31;1mThe command ""$MAIN_CMD $SETUP_CMD"" exited with 1. \r\n\r\nDone. Your build exited with 1.\r\n```'"
4012,97729634,embray,embray,2015-07-28 15:08:05,2015-07-28 20:00:16,2015-07-28 20:00:13,closed,,v1.0.4,1,Affects-release;Bug;io.fits,https://api.github.com/repos/astropy/astropy/issues/4012,b'Fix reference cycle in NotifierMixin._add_listener',"b'`NotifierMixin._add_listener` had a subtle reference cycle--the inline ""remove"" callback contained a reference to self which is held in a `__closure__`.  So the cycle is `self._listeners` :arrow_right: \r\n`self._listeners[n]` :arrow_right: `self._listeners[n].__callback__` :arrow_right: `self._listeners[n].__callback__.__closure__` :arrow_right: `self`.\r\n\r\nOne possible fix was to change the callback so that it only references the `listeners` list directly, instead of through `self`.  But a better fix was to use a `WeakValueDict` instead, which also helpfully simplifies the code.\r\n\r\n(The change in io.registry is mostly incidental--it removes an unused variable I found while hunting for reference cycles.)\r\n\r\nThis partially fixes the failing test in #4001, but it also depends on #4002 to fix reference cycles that occurred in PLY.'"
4010,97672621,astrofrog,taldcroft,2015-07-28 10:38:45,2015-08-07 01:50:22,2015-08-07 01:50:22,closed,taldcroft,,10,Affects-release;Bug;table,https://api.github.com/repos/astropy/astropy/issues/4010,"b""Constructing table from rows doesn't preserve column names""","b""I have a use case where I need to construct a new table from existing row objects (and where I can't use e.g. ``t[1,3,4,5,6]``), but column names are not preserved:\r\n\r\n```python\r\nIn [1]: from astropy.table import Table\r\n\r\nIn [2]: t = Table()\r\n\r\nIn [3]: t['a'] = [1,2,3]\r\n\r\nIn [4]: t['b'] = ['i','j','k']\r\n\r\nIn [5]: t2 = Table(rows=[t[0],t[1]])\r\n\r\nIn [6]: t2\r\nOut[6]: \r\n<Table masked=False length=2>\r\n col0  col1\r\nint64 str32\r\n----- -----\r\n    1     i\r\n    2     j\r\n```\r\n\r\nOf course, an easy workaround is to do ``t2 = Table(rows=[t[0],t[1]], names=t.dtype.names)`` but maybe we could make this work out of the box?"""
4007,97086864,mhvk,embray,2015-07-24 16:21:37,2015-09-03 16:34:50,2015-07-28 21:08:23,closed,embray,v1.0.4,2,Affects-release;Bug;units,https://api.github.com/repos/astropy/astropy/issues/4007,b'Correct checks for dtype preservation in in-place operations (closes #3976).',"b'This simplifies the check whether an in-place operation will be able to succeed, ensuring that it is true for any type of `float` *hence closes #3976), but false any time the result type is integer yet conversion has to be done (it is no longer attempted to check the conversion itself is an integer multiplication, as this is really rather fragile).'"
3998,96683559,bmorris3,embray,2015-07-22 22:43:59,2015-08-06 13:39:11,2015-08-06 13:39:11,closed,eteq,v1.0.4,2,Bug;coordinates,https://api.github.com/repos/astropy/astropy/issues/3998,b'get_sun returns vector solution for single time',"b""@eteq : Is this intended behavior? Shouldn't `get_sun` return a scalar sky coordinate for a scalar time?\r\n\r\n```python\r\n>>> time = Time.now()\r\n>>> time.isscalar\r\nTrue\r\n>>> sun = get_sun(time)\r\n>>> sun.isscalar\r\nFalse\r\n>>> sun[0]\r\n<SkyCoord (GCRS: obstime=2015-07-22 22:39:14.781846, obsgeoloc=[ 0.  0.  0.] m, obsgeovel=[ 0.  0.  0.] m / s):39:14.781846, obsgeoloc=[ 0.  0.  0.] m, obsgeovel=[ 0.  0.  0.] m / s): (ra, dec, distance) in (deg, deg, AU)\r\n    (122.76730836, 20.02852949, 1.01598715)>\r\n```"""
3997,96683310,embray,embray,2015-07-22 22:42:08,2015-07-23 16:55:17,2015-07-23 16:55:17,closed,,v1.0.4,1,Affects-release;Bug;utils,https://api.github.com/repos/astropy/astropy/issues/3997,b'Fix deprecated classes with a custom metaclass',
3993,96601346,mdboom,mdboom,2015-07-22 15:53:48,2015-07-25 12:15:46,2015-07-25 12:15:46,closed,,v1.1.0,15,Affects-release;Bug;units,https://api.github.com/repos/astropy/astropy/issues/3993,b'FITS unit format fixes',b'Fixes #3991.'
3991,96558848,saimn,mdboom,2015-07-22 12:36:54,2015-07-25 12:15:46,2015-07-25 12:15:46,closed,mdboom,v1.0.4,3,Affects-release;Bug;units,https://api.github.com/repos/astropy/astropy/issues/3991,"b'FITS, Units and numeric multiplier'","b'Hi,\r\nFor the MUSE Fits files, we use units of `10**(-20)*erg/s/cm**2/Angstrom` for the `BUNIT` keyword, and I was wondering how to handle these units with `astropy.unit`. Parsing this `BUNIT` string with `Unit` fails:\r\n\r\n```python\r\nIn [49]: u.Unit(\'10**(-20)*erg/s/cm**2/Angstrom\', format=\'fits\')\r\n---------------------------------------------------------------------------\r\nValueError                                Traceback (most recent call last)\r\n<ipython-input-49-85fbe5e89603> in <module>()\r\n----> 1 u.Unit(\'10**(-20)*erg/s/cm**2/Angstrom\', format=\'fits\')\r\n\r\n/home/simon/lib/astropy/astropy/units/core.pyc in __call__(self, s, represents, format, namespace, doc, parse_strict)\r\n   1808                            .format(s, format_clause, six.text_type(e)))\r\n   1809                     if parse_strict == \'raise\':\r\n-> 1810                         raise ValueError(msg)\r\n   1811                     elif parse_strict == \'warn\':\r\n   1812                         warnings.warn(msg, UnitsWarning)\r\n\r\nValueError: \'10**(-20)*erg/s/cm**2/Angstrom\' did not parse as fits unit: Syntax error parsing unit \'10**(-20)*erg/s/cm**2/Angstrom\'\r\n```\r\nIf I change the separator for the multiplier to a space, then it works:\r\n```python\r\nIn [50]: u.Unit(\'10**(-20) erg/s/cm**2/Angstrom\', format=\'fits\')\r\nOut[50]: Unit(""1e-20 erg / (Angstrom cm2 s)"")\r\n```\r\nLooking at the [FITS standard 3.0](http://fits.gsfc.nasa.gov/standard30/fits_standard30aa.pdf), both seems valid. It is not clear that using a star for the separator of the multiplier is forbidden. I think the star/space equivalence should work also here.\r\n\r\nThen, another issue happens if I want to convert back these units to strings:\r\n```python\r\nIn [52]: u.Unit(\'erg/s/cm**2/Angstrom\', format=\'fits\').to_string(\'fits\')\r\nOut[52]: u\'Angstrom-1 cm-2 erg s-1\'\r\n\r\nIn [53]: u.Unit(\'10**(-20) erg/s/cm**2/Angstrom\', format=\'fits\').to_string(\'fits\')\r\n---------------------------------------------------------------------------\r\nUnitScaleError                            Traceback (most recent call last)\r\n<ipython-input-53-87d586bdb87d> in <module>()\r\n----> 1 u.Unit(\'10**(-20) erg/s/cm**2/Angstrom\', format=\'fits\').to_string(\'fits\')\r\n\r\n/home/simon/lib/astropy/astropy/units/core.pyc in to_string(self, format)\r\n    593         """"""\r\n    594         f = unit_format.get_format(format)\r\n--> 595         return f.to_string(self)\r\n    596 \r\n    597     def __format__(self, format_spec):\r\n\r\n/home/simon/lib/astropy/astropy/units/format/fits.pyc in to_string(cls, unit)\r\n    119                 raise core.UnitScaleError(\r\n    120                     ""The FITS unit format is not able to represent scale. ""\r\n--> 121                     ""Multiply your data by {0:e}."".format(unit.scale))\r\n    122 \r\n    123             pairs = list(zip(unit.bases, unit.powers))\r\n\r\nUnitScaleError: The FITS unit format is not able to represent scale. Multiply your data by 1.000000e-20\r\n```\r\nWhy should I multiply my data by 1e-20 (we don\'t want this ;)) while astropy was able to parse this unit ? (and putting the `10**-20` in the unit string is valid).\r\n'"
3983,96309277,mdboom,nden,2015-07-21 12:58:37,2015-07-21 16:17:25,2015-07-21 16:17:25,closed,nden,v1.1.0,0,Affects-dev;Bug;modeling,https://api.github.com/repos/astropy/astropy/issues/3983,b'Fix striding of values in C projections',b'Fixes the bug reported by @nden here: https://github.com/astropy/astropy/pull/3906#issuecomment-123287022'
3982,96172437,embray,embray,2015-07-20 22:03:21,2015-07-21 16:27:28,2015-07-21 16:27:26,closed,,v1.1.0,1,Affects-release;Bug;Enhancement;io.fits;utils,https://api.github.com/repos/astropy/astropy/issues/3982,b'Fix botched deprecation of class attribute in _ImageBaseHDU',"b""Back in #3916 I deprecated a couple of old class attributes `NumCode` and `ImgCode`.  However, it seems there is some old code that actually used these attributes (yay for deprecation!) as found by @mcara.  However, I screwed up my attempt to deprecate those class attributes, by leaving them as methods.  I think I meant to put a `@property` on top of them, but that still wouldn't have worked correctly since they are used at the class level as well.\r\n\r\nAlthough this is a bug fix to v1.1.dev only, I've marked this Affects-release since it also includes a potentially useful new `@classproperty` decorator in order to fix this."""
3979,96094620,mdboom,mdboom,2015-07-20 15:54:09,2015-07-21 15:11:31,2015-07-20 17:24:02,closed,mhvk,,3,Bug;units,https://api.github.com/repos/astropy/astropy/issues/3979,b'Fix numpy.testing.utils.assert_* for Quantities.',"b""Fix #3978.\r\n\r\nI'm not happy about this, but I couldn't come up with anything better than monkeypatching.\r\n\r\n@mhvk: Any thoughts about how better to deal with this?"""
3970,95573152,mwcraig,embray,2015-07-17 02:52:06,2015-08-19 14:34:36,2015-08-19 14:34:36,closed,embray,v1.0.5,5,Affects-release;Bug;io.fits,https://api.github.com/repos/astropy/astropy/issues/3970,b'Correctly handle adding commentary cards in Header.extend in edge cases',"b'This PR fixes #3967, an error that comes up when calling `io.fits.Header.extend` with `unique=True` when the header being extended does not contain a commentary card but the header it is being extended by does.\r\n\r\nIt also adds one line to the test `test_header_extend_unique` to ensure it is testing a case with a keyword in both headers.'"
3968,95490691,mdboom,nden,2015-07-16 18:01:06,2015-07-16 20:14:43,2015-07-16 20:14:43,closed,nden,v1.1.0,3,Affects-dev;Bug;wcs,https://api.github.com/repos/astropy/astropy/issues/3968,"b""Don't include comments WCS.to_header()""",b'Not including blanks or COMMENT in the output of WCS.to_header() a little easier to deal with.\r\n\r\nSee discussion here:\r\n\r\nhttps://github.com/astropy/astropy/pull/3905/files#r34798842'
3967,95490469,mwcraig,embray,2015-07-16 17:59:55,2015-08-19 14:34:36,2015-08-19 14:34:36,closed,mwcraig,,1,Bug;io.fits,https://api.github.com/repos/astropy/astropy/issues/3967,b'FITS header.extend fails under some circumstances',"b'Specifically, if `h1` is a header without commentary cards and `h2` is a header with commentary cards, then `h1.extend(h2, unique=True)` fails with a key error (at least in python2). If `unique=False` the error does not occur.\r\n\r\n@embray  -- if you would like me to work on this today please assign me to it.\r\n\r\n Full code to reproduce is below; for the case where `h2` has a `COMMENT`. Behavior is similar for `HISTORY`, but no error is raised for blank (`\'\'`):\r\n\r\n```python\r\n>>> from astropy.io import fits\r\n>>> h1 = fits.PrimaryHDU().header  # to get a non-empty header\r\n>>> h2 = fits.Header()\r\n>>> h2[\'my_key\'] = 42\r\n>>> h2[\'comment\'] = \'tricky\'\r\n>>> h1.extend(h2, unique=True)\r\n---------------------------------------------------------------------------\r\nKeyError                                  Traceback (most recent call last)\r\n<ipython-input-1-f5d1fb8a0714> in <module>()\r\n      4 h2[\'my_key\'] = 42\r\n      5 h2[\'comment\'] = \'tricky\'\r\n----> 6 h1.extend(h2, unique=True)\r\n\r\n/Users/mcraig/Development/astronomy/astropy-org/astropy-dev-latest/astropy/io/fits/header.pyc in extend(self, cards, strip, unique, update, update_first, useblanks, bottom, end)\r\n   1365                         continue\r\n   1366\r\n-> 1367                     for value in self[keyword]:\r\n   1368                         if value == card.value:\r\n   1369                             break\r\n\r\n/Users/mcraig/Development/astronomy/astropy-org/astropy-dev-latest/astropy/io/fits/header.pyc in __getitem__(self, key)\r\n    144             key = key.upper()\r\n    145             # Special case for commentary cards\r\n--> 146             return _HeaderCommentaryCards(self, key)\r\n    147         if isinstance(key, tuple):\r\n    148             keyword = key[0]\r\n\r\n/Users/mcraig/Development/astronomy/astropy-org/astropy-dev-latest/astropy/io/fits/header.pyc in __init__(self, header, keyword)\r\n   2250         super(_HeaderCommentaryCards, self).__init__(header)\r\n   2251         self._keyword = keyword\r\n-> 2252         self._count = self._header.count(self._keyword)\r\n   2253         self._indices = slice(self._count).indices(self._count)\r\n   2254\r\n\r\n/Users/mcraig/Development/astronomy/astropy-org/astropy-dev-latest/astropy/io/fits/header.pyc in count(self, keyword)\r\n   1393         # being a defaultdict, will create an entry for the nonexistent keyword\r\n   1394         if keyword not in self._keyword_indices:\r\n-> 1395             raise KeyError(""Keyword %r not found."" % keyword)\r\n   1396\r\n   1397         return len(self._keyword_indices[keyword])\r\n\r\nKeyError: ""Keyword \'COMMENT\' not found.""\r\n```'"
3957,94952114,mdboom,mdboom,2015-07-14 14:03:45,2015-07-14 19:31:13,2015-07-14 14:53:43,closed,mdboom,v1.0.4,2,Affects-dev;Bug;Docs,https://api.github.com/repos/astropy/astropy/issues/3957,b'Fix documentation warnings',b'This is an attempt to fix the current documentation warnings on master.'
3942,94481125,tomlouden,embray,2015-07-11 15:13:39,2015-07-14 18:16:51,2015-07-14 18:16:32,closed,,v1.1.0,5,Affects-dev;Bug;modeling,https://api.github.com/repos/astropy/astropy/issues/3942,b'Peak of Voigt1D profile is not at x_0',"b""```python\r\nimport numpy as np\r\nfrom astropy.modeling.models import Voigt1D\r\n%matplotlib inline\r\nimport matplotlib.pyplot as plt\r\n\r\nplt.figure()\r\nx = np.arange(0, 10, 0.01)\r\nv1 = Voigt1D(x_0=5, amplitude_L=10, fwhm_L=0.5, fwhm_G=0.9)\r\nplt.plot(x, v1(x))\r\nplt.axvline(v1.x_0, color='k',ls='--')\r\nplt.show()\r\n```\r\n\r\n![image](https://cloud.githubusercontent.com/assets/6517539/8634204/9e0ff912-27e7-11e5-9dfb-f3d8d8628195.png)"""
3938,94356322,bmorris3,embray,2015-07-10 17:42:52,2015-08-06 13:39:11,2015-08-06 13:39:11,closed,eteq,v1.0.4,10,Affects-release;Bug;coordinates,https://api.github.com/repos/astropy/astropy/issues/3938,b'AltAz transformation fails for vector SkyCoord',"b'I\'m calling a `coord.transform_to(AltAz(...))` transformation on a vector of coordinates, like this:\r\n```python\r\nfrom astropy.coordinates import SkyCoord, EarthLocation, AltAz\r\nfrom astropy.time import Time\r\n\r\n# Set up list of targets\r\nvega = SkyCoord.from_name(\'Vega\')\r\ncapella = SkyCoord.from_name(\'Capella\')\r\nsirius = SkyCoord.from_name(\'Sirius\')\r\ntargets = [vega, capella, sirius]\r\n\r\n# Feed list of targets into SkyCoord\r\ncombined_coords = SkyCoord(targets)\r\nprint(combined_coords)\r\n# Set up AltAz frame\r\ntime = Time(\'2015-01-01 00:00:00\')\r\nlocation = EarthLocation(\'10d\', \'45d\', 0)\r\naa = AltAz(location=location, obstime=time)\r\nprint(combined_coords.transform_to(aa))\r\n```\r\n\r\nand getting the following error:\r\n\r\n```\r\nIn [12]: run exp\r\n<SkyCoord (ICRS): (ra, dec, distance) in (deg, deg, )\r\n    [(279.23473479, 38.78368896, 1.0), (79.17232794, 45.99799147, 1.0),\r\n     (101.28715533, -16.71611586, 1.0)]>\r\n---------------------------------------------------------------------------\r\nUnitConversionError                       Traceback (most recent call last)\r\n/Users/bmorris/git/astroplan/exp.py in <module>()\r\n     22 location = EarthLocation(\'10d\', \'45d\', 0)\r\n     23 aa = AltAz(location=location, obstime=time)\r\n---> 24 print(combined_coords.transform_to(aa))\r\n     25 \r\n     26 \r\n\r\n/Users/bmorris/git/astropy/astropy/coordinates/sky_coordinate.pyc in transform_to(self, frame)\r\n    385         # Do the transformation, returning a coordinate frame of the desired\r\n    386         # final type (not generic).\r\n--> 387         new_coord = trans(self.frame, generic_frame)\r\n    388 \r\n    389         # Finally make the new SkyCoord object from the `new_coord` and\r\n\r\n/Users/bmorris/git/astropy/astropy/coordinates/transformations.pyc in __call__(self, fromcoord, toframe)\r\n    918 \r\n    919             curr_toframe = t.tosys(**frattrs)\r\n--> 920             curr_coord = t(curr_coord, curr_toframe)\r\n    921 \r\n    922         # this is safe even in the case where self.transforms is empty, because\r\n\r\n/Users/bmorris/git/astropy/astropy/coordinates/transformations.pyc in __call__(self, fromcoord, toframe)\r\n    706 \r\n    707     def __call__(self, fromcoord, toframe):\r\n--> 708         res = self.func(fromcoord, toframe)\r\n    709         if not isinstance(res, self.tosys):\r\n    710             raise TypeError(\'the transformation function yielded {0} but \'\r\n\r\n/Users/bmorris/git/astropy/astropy/coordinates/builtin_frames/icrs_cirs_transforms.pyc in icrs_to_cirs(icrs_coo, cirs_frame)\r\n     29         px = 0\r\n     30     else:\r\n---> 31         px = 1 / icrs_coo.distance.to(u.parsec).value\r\n     32     srepr = icrs_coo.represent_as(UnitSphericalRepresentation)\r\n     33     i_ra = srepr.lon.to(u.radian).value\r\n\r\n/Users/bmorris/git/astropy/astropy/units/quantity.pyc in to(self, unit, equivalencies)\r\n    619         unit = Unit(unit)\r\n    620         new_val = np.asarray(\r\n--> 621             self.unit.to(unit, self.value, equivalencies=equivalencies))\r\n    622         return self._new_view(new_val, unit)\r\n    623 \r\n\r\n/Users/bmorris/git/astropy/astropy/units/core.pyc in to(self, other, value, equivalencies)\r\n    970             If units are inconsistent\r\n    971         """"""\r\n--> 972         return self._get_converter(other, equivalencies=equivalencies)(value)\r\n    973 \r\n    974     def in_units(self, other, value=1.0, equivalencies=[]):\r\n\r\n/Users/bmorris/git/astropy/astropy/units/core.pyc in _get_converter(self, other, equivalencies)\r\n    871         except UnitsError:\r\n    872             return self._apply_equivalencies(\r\n--> 873                 self, other, self._normalize_equivalencies(equivalencies))\r\n    874         return lambda val: scale * _condition_arg(val)\r\n    875 \r\n\r\n/Users/bmorris/git/astropy/astropy/units/core.pyc in _apply_equivalencies(self, unit, other, equivalencies)\r\n    862         raise UnitConversionError(\r\n    863             ""{0} and {1} are not convertible"".format(\r\n--> 864                 unit_str, other_str))\r\n    865 \r\n    866     def _get_converter(self, other, equivalencies=[]):\r\n\r\nUnitConversionError: \'\' (dimensionless) and \'pc\' (length) are not convertible\r\n```\r\n\r\nAs you can see by the `print` statement that does not fail, the `SkyCoord` constructor unpacks the coordinates (which only have RA, Dec) into a vector with distances. What\'s that about? @eteq @cdeil @adrn '"
3934,94197352,JaiPEG,embray,2015-07-10 02:23:25,2015-08-04 04:35:14,2015-07-14 18:25:17,closed,,v1.0.4,7,Affects-release;Bug;cosmology,https://api.github.com/repos/astropy/astropy/issues/3934,b'fixed wCMD passing None to FLRW',b'`wCDM.__init__` was silently ignoring input parameter `Ob0` and uncondtionally passing None to super class `FLRW.__init__`'
3932,94072400,embray,embray,2015-07-09 15:03:15,2015-07-13 14:40:28,2015-07-13 14:40:26,closed,,v1.0.4,0,Affects-release;Bug;build,https://api.github.com/repos/astropy/astropy/issues/3932,b'Enable auto-inplace build in source distributions',"b""When running `import astropy` from within a source checkout, astropy will try to automatically build the extension modules inplace so that the package is fully importable and usable.  However, this relied on `.git` being present to work.  There's no reason it needs to be in git though--it's fine with me if this feature works for source tarballs as well (though really this feature should only be of use to developers, who should have a git repo anyways, at least the warning message that is displayed is informative).\r\n\r\nThe included `.astropy-root` file allows identification with this being the Astropy source tree fairly unambiguously.\r\n\r\nMight be worth adding something similar to the affiliated package template."""
3931,94060258,mdboom,nden,2015-07-09 14:12:33,2015-07-09 19:14:27,2015-07-09 19:14:27,closed,nden,v1.1.0,3,Affects-dev;Bug;Critical;wcs,https://api.github.com/repos/astropy/astropy/issues/3931,b'Fix #3926: Remove distortion parameters',"b'...on the special HST-style distortions, before passing them along to\r\nwcslib.'"
3927,93796828,mdboom,mdboom,2015-07-08 14:00:52,2015-09-10 14:31:59,2015-07-14 16:15:53,closed,nden,v1.1.0,3,Affects-dev;Bug;wcs,https://api.github.com/repos/astropy/astropy/issues/3927,b'Upgrade to wcslib 5.8',"b'This upgrades wcslib to get to the ""official"" fix for the iteration problem.\r\n\r\nAlso adds some more polynomial distortion types.'"
3923,93579501,embray,embray,2015-07-07 17:02:26,2015-07-13 14:46:00,2015-07-13 14:45:58,closed,embray,v1.0.4,5,Affects-release;Bug;build,https://api.github.com/repos/astropy/astropy/issues/3923,b'Fix running astropy with python -OO',"b""Motivated by [this stack overflow question](http://stackoverflow.com/questions/31182015/py2exe-with-import-pyfits-cause-error/31273526#31273526), fixes as many cases as I could find of code that assumes a method, class, or module's docstring will always be there, since when compiling the modules with python's -OO flag the docstrings can be removed, rendering Astropy inoperable due to these cases.\r\n\r\nI tested this manually on Python 2 and 3 by running (in clean repos) `python -OO setup.py test`.\r\n\r\nThere is also an associated change to astropy-helpers that is needed.  I would like to get that in first, then this PR can also include an update to the astropy-helpers submodule (which is overdue anyways).\r\n\r\nRelated: #960"""
3920,93431623,eteq,embray,2015-07-07 03:52:42,2015-08-06 13:39:11,2015-08-06 13:39:11,closed,eteq,v1.0.4,1,Affects-release;Bug;coordinates,https://api.github.com/repos/astropy/astropy/issues/3920,b'transform_to(AltAz) de-scalarizes if input has a distance',"b""Surprising behavior noted (indirectly) by @bmorris3 :\r\n\r\n```\r\n>>> aa = AltAz(location=EarthLocation.from_geodetic(0*u.deg, 0*u.deg, 0),obstime=Time('2015-1-1'))\r\n>>> m=SkyCoord(10*u.deg,3*u.deg)\r\n>>> m.transform_to(aa).shape\r\n()\r\n```\r\nThat part makes sense: the input is a scalar so the output is too\r\n```\r\n>>> aa = AltAz(location=EarthLocation.from_geodetic(0*u.deg, 0*u.deg, 0),obstime=Time('2015-1-1'))\r\n>>> m=SkyCoord(10*u.deg,3*u.deg, 1*u.AU)\r\n>>> m.transform_to(aa).shape\r\n(1,)\r\n```\r\noops!  For some reason it decided to switch to a length-1 array coordinate.  Definitely should still be a scalar.\r\n\r\nThis is definitely a bug and not at all intended, but changing it is breaking backwards-compatibility.  How do we want to address this?  Deprecation?  Or leave it in for 1.0.x but change it for 1.1.x?  \r\n\r\nI'm not sure how used this functionality is right now, so it may not be an issue to slip in the change...\r\n\r\ncc @adrn @astrofrog\r\n\r\n"""
3912,92722797,embray,embray,2015-07-02 19:59:36,2015-07-07 20:24:38,2015-07-07 20:24:34,closed,,v1.1.0,0,Affects-release;Bug;modeling,https://api.github.com/repos/astropy/astropy/issues/3912,b'Fix comparisons of parameters with arrays',"b"" (or of array-like parameters with scalars or other arrays) to return a Numpy bool array in a Numpy-like fashion.  Also wraps the parameter value and the value it is compared with using np.asanyarray so that Numpy subclasses can be returned (in anticipation of Quantity support).\r\n\r\nThis addresses a comment from @mhvk made [here](https://github.com/astropy/astropy/pull/3852).\r\n\r\nThis is unfortunately a backward-incompatible change, with no straightforward way to deprecate the old behavior.  Some could argue, however, that the old behavior was a bug anyways (or at least ill-conceived) and probably isn't relied on anywhere except with gritting of teeth.\r\n\r\nWhen this is merged I will rebase #3852 to incorporate it as well."""
3905,92111262,mdboom,mdboom,2015-06-30 14:35:47,2015-07-16 17:54:56,2015-07-07 20:33:38,closed,eteq,v1.1.0,5,Affects-dev;Bug;wcs,https://api.github.com/repos/astropy/astropy/issues/3905,b'Upgrade wcslib to 5.7',"b'This contains the ""official"" fix for the iteration bug in #3891, as well as a fix for the copying of distortion parameters in wcsprm objects in #3904.\r\n\r\nIn addition to vanilla 5.7, this includes a small fix for outputting FITS headers containing TPV distortions that in all likelihood will make it into wcslib 5.8.  I\'ve therefore designated the version 5.8.pre.  (As well as a test for the issue by round-tripping a TPV WCS).\r\n\r\nAs per a discussion with @eteq and @astrofrog, this also adds a check that will raise an `ImportError` if the version of wcslib is one of the known broken ones in the 5.x series (currently anything prior to to-be-released 5.8).  Unfortunately, there\'s no easy way to do this at build time -- it happens on the first import of a built astropy (which obviously includes running the tests).  There was no version specifier in versions prior to 5.x, so we just act as if all 4.x versions are fine (which isn\'t quite true).\r\n\r\nThis also adds a test for the issue in #3904.'"
3903,91976551,patti,embray,2015-06-30 04:22:07,2015-07-14 20:13:40,2015-07-14 20:13:40,closed,,v1.0.4,2,Affects-release;Bug;modeling,https://api.github.com/repos/astropy/astropy/issues/3903,b'Add default value for Ellipse2D model theta parameter.',"b'The Ellipse2D model parameter `theta` is optional in the docstring but no default is set. I think it makes sense to be optional, so I set `default=0` rather than editing the doc. '"
3893,91273488,mdboom,mdboom,2015-06-26 15:03:07,2015-06-29 12:25:32,2015-06-29 12:25:32,closed,astrofrog,v1.1.0,8,Affects-dev;Bug;Critical;wcs,https://api.github.com/repos/astropy/astropy/issues/3893,b'WIP: Fix iteration inside wcslib',"b""This is a fix for #3891, simply by reverting `sph.c` to an earlier version.  I think these changes were part of an attempt at optimization and not fixing any bug anyway.\r\n\r\nWe should wait and see what the official fix in wcslib will be (I've reported this to Mark Calabretta), but in the meantime, this provides us with an  alternative.\r\n\r\n@olebole: This is a critical enough bug that you may want to apply it to the Debian package of wcslib 5.x if there is one already."""
3891,91190526,astrofrog,mdboom,2015-06-26 08:37:11,2015-06-30 14:26:38,2015-06-30 14:26:38,closed,mdboom,v1.1.0,5,Affects-dev;Bug;Critical;wcs,https://api.github.com/repos/astropy/astropy/issues/3891,b'Bug in coordinate transform with WCSLib 5',"b""The change to WCSLib 5 has led to a bug in the following use case:\r\n\r\n```python\r\nimport numpy as np\r\nfrom astropy.wcs import WCS\r\nfrom astropy.utils.data import get_pkg_data_filename\r\n\r\nwcs = WCS(get_pkg_data_filename('galactic_center/gc_msx_e.fits'))\r\n\r\nworld = np.array(\r\n    [[-0.58995335, -0.5       ],\r\n     [ 0.00664326, -0.5       ],\r\n     [-0.58995335, -0.25      ],\r\n     [ 0.00664326, -0.25      ],\r\n     [-0.58995335,  0.        ],\r\n     [ 0.00664326,  0.        ],\r\n     [-0.58995335,  0.25      ],\r\n     [ 0.00664326,  0.25      ],\r\n     [-0.58995335,  0.5       ],\r\n     [ 0.00664326,  0.5       ]]\r\n)\r\n\r\npixel = wcs.wcs_world2pix(world, 1)\r\n\r\nprint(pixel)\r\n```\r\n\r\n**Before 7bac4706bb70c6eb973a528a1a592c63ee0e1a8b**\r\n\r\n```\r\n[[  1.64400000e+02  -1.51498185e-01]\r\n [  7.49105110e+01  -1.51498185e-01]\r\n [  1.64400000e+02   3.73485009e+01]\r\n [  7.49105110e+01   3.73485009e+01]\r\n [  1.64400000e+02   7.48485000e+01]\r\n [  7.49105110e+01   7.48485000e+01]\r\n [  1.64400000e+02   1.12348499e+02]\r\n [  7.49105110e+01   1.12348499e+02]\r\n [  1.64400000e+02   1.49848498e+02]\r\n [  7.49105110e+01   1.49848498e+02]]\r\n```\r\n\r\n**After 7bac4706bb70c6eb973a528a1a592c63ee0e1a8b**\r\n\r\n```\r\n[[  1.64400000e+02  -1.51498185e-01]\r\n [  1.50906998e+02  -1.51498185e-01]\r\n [  7.49105110e+01   3.73485009e+01]\r\n [  1.50906998e+02   3.73485009e+01]\r\n [  1.64400000e+02   7.48485000e+01]\r\n [  1.13406999e+02   7.48485000e+01]\r\n [  7.49105110e+01   1.12348499e+02]\r\n [  1.13406999e+02   1.12348499e+02]\r\n [  1.64400000e+02   1.49848498e+02]\r\n [  7.59070000e+01   1.49848498e+02]]\r\n```\r\n\r\nThis was discovered using the WCSAxes test suite: https://github.com/astrofrog/wcsaxes/pull/168\r\n\r\ncc @mdboom"""
3888,91038885,jrka,taldcroft,2015-06-25 18:20:12,2016-02-08 12:03:53,2016-02-08 12:03:53,closed,,,9,Affects-release;Bug;Effort-low;io.ascii;Package-novice,https://api.github.com/repos/astropy/astropy/issues/3888,"b""ascii.latex.AASTex: don't include new line characters after last row of data""","b'Very minor issue: writing a table in AASTex (deluxetable) format includes new line characters at the end of each line, including the last one. This results in a blank line at the end of each table. The last row of a table before ""\\enddata"" should not include the ""\\\\\\"" characters.\r\n\r\nExample:\r\n\r\n    from astropy.io import ascii\r\n    from astropy.table import Table\r\n    import sys    \r\n    t = Table([[1,2],[1.234e9,2.34e-12]], names = (\'a\',\'b\'))\r\n    ascii.write(t,sys.stdout,Writer=ascii.latex.AASTex)\r\n\r\nResult: \r\n\r\n    \\begin{deluxetable}{cc}\r\n     \\tablehead{\\colhead{a} & \\colhead{b}}\r\n    \\startdata\r\n    1 & 1234000000.0 \\\\\r\n    2 & 2.34e-12 \\\\\r\n    \\enddata\r\n    \\end{deluxetable}\r\n\r\nWhich looks like:\r\n![image](https://cloud.githubusercontent.com/assets/4870555/8362092/c5c2f72a-1b2b-11e5-98e5-d53a2110d9a0.png)\r\n\r\nBut if you got rid of the ""\\\\\\"" after 2.34e-12, you\'d get:\r\n![image](https://cloud.githubusercontent.com/assets/4870555/8362105/e005836e-1b2b-11e5-9d0d-997302f1d083.png)\r\n'"
3884,90768036,nparley,embray,2015-06-24 19:57:18,2015-06-30 19:13:54,2015-06-30 19:13:54,closed,,v1.0.4,3,Affects-release;Bug;io.fits,https://api.github.com/repos/astropy/astropy/issues/3884,b'Do not scale data',"b'When adding the checksum and ""updating"" a file do not scale the image data.'"
3883,90703795,nparley,embray,2015-06-24 15:09:37,2015-07-07 13:41:10,2015-07-07 13:41:05,closed,,v1.0.4,11,Affects-release;Bug;io.fits,https://api.github.com/repos/astropy/astropy/issues/3883,b'Checksum inconsistent when BITPIX changes (io.fits)',"b""The checksum being calculated for a fits file I am testing is inconsistent. For example with a fits file test.fits which does not have a checksum:\r\n\r\n``` \r\n$ fitscheck -f -w -i test.fits\r\n$ fitscheck test.fits\r\nBAD 'test.fits' .. verification failed for HDU ('PRIMARY', 1).\r\n1 errors\r\n```\r\n\r\nThe problem seems to come from the fact that the datasum is calculated differently before and after the image data is loaded.\r\n\r\n```\r\n>>> from astropy.io import fits\r\n>>> hdu = fits.open('test.fits')\r\n>>> hdu[0]._calculate_datasum('standard')\r\n3044153422\r\n>>> data = hdu[0].data\r\n>>> hdu[0]._calculate_datasum('standard')\r\n2977440024\r\n```\r\n\r\nThis fits file has an original BITPIX of 16 and once updated by writeto has a BITPIX of -32 but the checksum is being calculated using the original data.  I am surprised that BITPIX is changing as I thought the image data would just be directly copied if the data is not loaded. But it seems the data is loaded in the writeto mehod and thus changed to -32.\r\n\r\n```\r\n>>> from astropy.io import fits\r\n>>> hdu = fits.open('test.fits')\r\n>>> hdulist[0]._data_loaded\r\nFalse\r\n>>> hdulist.writeto('test2.fits', clobber=True)\r\n>>> hdulist[0]._data_loaded\r\nTrue\r\n```\r\n\r\nI think the probable solution, if the data is going to be changed to a float on writeto, is changing the order of the checksum calculations to make sure it is calculated on the -32 data. I.e. this works with out problems:\r\n\r\n```\r\n>>> hdulist = fits.open('test_org.fits')\r\n>>> data = hdulist[0].data\r\n>>> hdulist.writeto('test.fits', clobber=True, checksum=True)\r\n\r\n$ fitscheck test.fits\r\n$\r\n```\r\n\r\n I have put the test fits file for this here: https://www.dropbox.com/s/mkvuohp7e2nhpe0/test_org.fits?dl=0 \r\nCheers, Neiil"""
3877,90400350,astrofrog,astrofrog,2015-06-23 14:09:31,2015-10-05 08:59:13,2015-10-05 08:59:13,closed,taldcroft,,15,Affects-release;Bug;table;Upstream Fix Required,https://api.github.com/repos/astropy/astropy/issues/3877,b'ValueError when vstacking tables with vector columns',"b'As reported by Brian Cherinka on the mailing list. Minimal example:\r\n\r\n```python\r\nimport numpy as np\r\nfrom astropy.table import Table, vstack\r\n\r\ndt1 = np.dtype([(\'a\', float)])\r\ndt2 = np.dtype([(\'b\', \'<f8\', (7,))])\r\n\r\ndata1 = np.zeros(10, dtype=dt1)\r\ndata2 = np.zeros(10, dtype=dt2)\r\n\r\nt1 = Table(data1)\r\nt2 = Table(data2)\r\n\r\nt3 = vstack([t1, t2], join_type=\'outer\')\r\n\r\nprint(t3[0])\r\n```\r\n\r\ngives\r\n\r\n```\r\nTraceback (most recent call last):\r\n  File ""debug_vstack.py"", line 16, in <module>\r\n    print(t3[0])\r\n  File ""/Users/tom/miniconda3/envs/production27/lib/python2.7/site-packages/astropy/table/row.py"", line 178, in __repr__\r\n    self.index, self.as_void(), self.dtype, self.__class__.__name__)\r\n  File ""/Users/tom/miniconda3/envs/production27/lib/python2.7/site-packages/numpy/ma/core.py"", line 5701, in __repr__\r\n    if not any(m):\r\n  File ""/Users/tom/miniconda3/envs/production27/lib/python2.7/site-packages/numpy/ma/core.py"", line 6091, in __call__\r\n    return method(MaskedArray(a), *args, **params)\r\n  File ""/Users/tom/miniconda3/envs/production27/lib/python2.7/site-packages/numpy/ma/core.py"", line 2651, in __new__\r\n    _data = np.array(data, dtype=dtype, copy=copy, subok=True, ndmin=ndmin)\r\nValueError: setting an array element with a sequence.\r\n```'"
3873,90136084,mdboom,embray,2015-06-22 15:43:49,2015-06-24 17:06:09,2015-06-24 17:06:09,closed,mhvk,v1.0.4,2,Affects-release;Bug;units,https://api.github.com/repos/astropy/astropy/issues/3873,"b'units.cds.enable() should replace, not add'",b'Fixes #3870.'
3870,89827833,jpinedaf,embray,2015-06-20 22:30:36,2015-06-24 17:06:09,2015-06-24 17:06:09,closed,mdboom,,2,Bug;units,https://api.github.com/repos/astropy/astropy/issues/3870,b'Problem loading cds constants',"b'I\'m trying to load and enable the constants from cds, but I get the following error message\r\n```\r\nIn [1]: from astropy.units import cds\r\n\r\nIn [2]: cds.enable()\r\n---------------------------------------------------------------------------\r\nValueError                                Traceback (most recent call last)\r\n<ipython-input-2-93d482e9a3d2> in <module>()\r\n----> 1 cds.enable()\r\n\r\n/opt/local/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/astropy/units/cds.pyc in enable()\r\n    182     # Local import to avoid polluting namespace\r\n    183     import inspect\r\n--> 184     return add_enabled_units(inspect.getmodule(enable))\r\n\r\n/opt/local/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/astropy/units/core.pyc in add_enabled_units(units)\r\n    374     context = _UnitContext(get_current_unit_registry())\r\n    375     # in this new current registry, enable the further units requested\r\n--> 376     get_current_unit_registry().add_enabled_units(units)\r\n    377     return context\r\n    378 \r\n\r\n/opt/local/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/astropy/units/core.pyc in add_enabled_units(self, units)\r\n    187                         ""Object with name {0!r} already exists in namespace. ""\r\n    188                         ""Filter the set of units to avoid name classes before ""\r\n--> 189                         ""enabling them."".format(st))\r\n    190 \r\n    191             for st in unit._names:\r\n\r\nValueError: Object with name u\'YG\' already exists in namespace. Filter the set of units to avoid name classes before enabling them.\r\n\r\nIn [3]: import astropy\r\n\r\nIn [4]: astropy.__version__\r\nOut[4]: u\'1.0.1\'\r\n```\r\n\r\nI guess this would point to something broken in my system. Astropy was installed using MacPorts, and the example above is following the code from the astropy documentation. Any ideas?'"
3867,89631198,wkerzendorf,embray,2015-06-19 18:37:15,2015-07-01 16:43:21,2015-07-01 16:43:19,closed,,v1.0.4,19,Affects-release;Bug;modeling;Python2.6,https://api.github.com/repos/astropy/astropy/issues/3867,b'Pickle compound models',"b""@embray It can be useful to be able to serialize compound models. In my case, I'm using ipython parallel and would like to send them through the network. I'm looking for a way to get the individual models of a compound_model and pickle them and then concatenate them on the other side. \r\n\r\n"""
3865,89584020,keflavich,embray,2015-06-19 14:56:36,2015-07-13 14:35:31,2015-07-13 14:35:30,closed,,v1.0.4,8,Affects-release;Bug;io.fits,https://api.github.com/repos/astropy/astropy/issues/3865,b'Problem with BLANK keyword in FITS file',"b'@embray, cc @eso-panda\r\n\r\nThis FITS file causes problems:\r\n```\r\nIn [50]: f = fits.open(\'fred.fits\')\r\n\r\nIn [51]: f.writeto(\'test.fits\', clobber=True)\r\nTraceback (most recent call last):\r\n  File ""<ipython-input-51-6f852bc3c99a>"", line 1, in <module>\r\n    f.writeto(\'test.fits\', clobber=True)\r\n  File ""/Users/adam/repos/astropy/astropy/io/fits/hdu/hdulist.py"", line 682, in writeto\r\n    hdu._writeto(hdulist._file)\r\n  File ""/Users/adam/repos/astropy/astropy/io/fits/hdu/base.py"", line 698, in _writeto\r\n    data_offset, data_size = self._writedata(fileobj)\r\n  File ""/Users/adam/repos/astropy/astropy/io/fits/hdu/base.py"", line 634, in _writedata\r\n    if self.data is not None:\r\n  File ""/Users/adam/repos/astropy/astropy/utils/decorators.py"", line 341, in __get__\r\n    val = self._fget(obj)\r\n  File ""/Users/adam/repos/astropy/astropy/io/fits/hdu/image.py"", line 239, in data\r\n    data = self._get_scaled_image_data(self._data_offset, self.shape)\r\n  File ""/Users/adam/repos/astropy/astropy/io/fits/hdu/image.py"", line 642, in _get_scaled_image_data\r\n    data.flat[blanks] = np.nan\r\nUnboundLocalError: local variable \'blanks\' referenced before assignment\r\n```\r\n\r\nIt has a header keyword:\r\n```\r\nBLANK   = -9223372036854775808\r\n```\r\n\r\nBeyond that, let me know if there\'s more you need - the data are proprietary but @eso-panda is probably willing to send it on privately if needed.'"
3860,89083616,mhvk,embray,2015-06-17 18:00:01,2015-06-30 20:32:01,2015-06-30 19:18:58,closed,mdboom,v1.0.4,5,Affects-dev;Bug;units,https://api.github.com/repos/astropy/astropy/issues/3860,b'Quantity updates for numpy dev',"b'WIth https://github.com/numpy/numpy/pull/5964 (for more discussion, see https://github.com/numpy/numpy/pull/5864), a lot of `NotImplemented` handling is removed from the ufuncs. As a result, `np.ufunc` does not return `NotImplemented` any more. This makes much more sense, but brought an inconsistency in our usage to the front, where in `Quantity.__mul__` we called `np.multiply` directly, rather than letting `ndarray.__mul__` take care (which can return `NotImplemented`). This PR corrects that oversight. (I wrote the original myself and am slightly worried there was a reason -- but travis will hopefully tell).\r\n\r\nIn addition, the above numpy PRs broke the use of `a * list`, where if `a` was integer it would be used to make multiple versions of the list. It was actually rather surprising this ever worked (see numpy PR discussion), and so it was decided not to continue to support that in numpy. Since there seems to be no reason really to support that in `Quantity` either, I changed the tests to more narrowly focus on whether `Quantity.__index__()` does the right thing.'"
3856,88489954,mhvk,taldcroft,2015-06-15 17:28:36,2015-09-03 16:38:01,2015-06-16 16:23:39,closed,taldcroft,v1.0.4,5,Affects-release;Bug;time,https://api.github.com/repos/astropy/astropy/issues/3856,b'Remove astropy_time from attributes and from formats one can change to.',"b""`astropy_time` can be used as an input format for `Time` to specify that the input is other `Time` instances, but it makes no sense to have it as an output format. Indeed, accessing the `t.astropy_time` attribute, or setting `t.format = 'astropy_time'` raises exceptions. This PR removes the attribute, and gives a more useful exception message for setting the format. It also updates the `format` docstring."""
3854,88092983,mhvk,embray,2015-06-14 00:53:36,2015-11-12 20:22:14,2015-11-12 20:22:14,closed,embray,v1.1.0,57,Bug;io.fits,https://api.github.com/repos/astropy/astropy/issues/3854,b'Numpy 1.10 issues for io.fits',"b'@embray - sadly, it appears in some recent change in numpy-dev again broke fits. I very much suspect https://github.com/numpy/numpy/pull/5947.'"
3848,87565329,mhvk,mhvk,2015-06-12 01:19:51,2015-06-20 19:39:05,2015-06-20 19:39:05,closed,,,3,Bug;io.votable;Upstream Fix Required,https://api.github.com/repos/astropy/astropy/issues/3848,b'Numpy-dev issues for votable',"b""There have been a number of changes to `MaskedArray` in numpy-dev, and it seems those are resulting in lots of failures in `io.votable` (see, e.g., https://travis-ci.org/astropy/astropy/jobs/66426936). Since numpy 1.10 is supposedly imminent, it would be good to try to resolve... (here's to hoping it is not my numpy PR that caused it...)."""
3844,87258793,jmccormac01,embray,2015-06-11 08:27:23,2015-06-12 19:39:17,2015-06-12 19:39:16,closed,eteq,v1.0.4,7,Affects-release;Bug;coordinates;Effort-low;Package-novice,https://api.github.com/repos/astropy/astropy/issues/3844,b'IERS issue when updating',"b'Hi guys,\r\nI am running astropy \'1.0.3\' with Python 2.7.8 and get the following error when making a polar plot with matplotlib.\r\n\r\n```\r\nWARNING: Tried to get polar motions for times after IERS data is valid. Defaulting to polar motion from the 50-yr mean for those.\r\nIf you need enough precision such that this matters (~<10 arcsec), you can download the latest IERS predictions by doing:\r\nfrom astropy.utils.data import download_file\r\nfrom astropy.utils import iers\r\niers.IERS.iers_table = iers.IERS_A.open(download_file(iers.IERS_A_URL, cache=True)) [astropy.coordinates.builtin_frames.utils]\r\n```\r\n\r\nWhen I do the steps it suggests, something doesn\'t seem quite right. I had to import astropy, then astropy.coordinates and then I get an error about using a module in a table. I removed the part in square brackets as I wasn\'t sure if that should be included or not. The third line in the error executed but when I rerun the plotting code I get the same error. \r\n\r\nAny ideas?\r\n\r\nCheers\r\nJames\r\n\r\n```\r\nfrom astropy.utils.data import download_file\r\nfrom astropy.utils import iers\r\niers.IERS.iers_table = iers.IERS_A.open(download_file(iers.IERS_A_URL, cache=True)) [astropy.coordinates.builtin_frames.utils]\r\nDownloading http://maia.usno.navy.mil/ser7/finals2000A.all\r\n|==========================================| 2.9M/2.9M (100.00%)         6s\r\nTraceback (most recent call last):\r\n  File ""<stdin>"", line 1, in <module>\r\nNameError: name \'astropy\' is not defined\r\nimport astropy\r\niers.IERS.iers_table = iers.IERS_A.open(download_file(iers.IERS_A_URL, cache=True)) [astropy.coordinates.builtin_frames.utils]\r\nTraceback (most recent call last):\r\n  File ""<stdin>"", line 1, in <module>\r\nAttributeError: \'module\' object has no attribute \'coordinates\'\r\niers.IERS.iers_table = iers.IERS_A.open(download_file(iers.IERS_A_URL, cache=True)) \r\nfrom astropy import coordinates\r\niers.IERS.iers_table = iers.IERS_A.open(download_file(iers.IERS_A_URL, cache=True)) [astropy.coordinates.builtin_frames.utils]\r\nTraceback (most recent call last):\r\n  File ""<stdin>"", line 1, in <module>\r\n  File ""/usr/local/lib/python2.7/site-packages/astropy/table/table.py"", line 868, in __getitem__\r\n    .format(type(item)))\r\nValueError: Illegal type <type \'module\'> for table item access\r\n```'"
3835,87034312,mhvk,embray,2015-06-10 16:49:59,2015-08-05 15:12:23,2015-08-05 15:12:22,closed,mdboom,v1.0.4,7,Affects-release;Bug;Docs;units,https://api.github.com/repos/astropy/astropy/issues/3835,"b'barn not listed as having prefixes in documentation, even though it does'","b'`u.barn` is defined as having prefixes, but it is not listed as such in the automatically generated unit summary. The problem seems to be related to how prefix units are handled in `generate_unit_summary`:\r\nhttps://github.com/astropy/astropy/blob/master/astropy/units/utils.py#L76\r\n\r\ncc @mdboom'"
3824,85774507,taldcroft,mhvk,2015-06-06 16:03:40,2015-06-11 13:09:31,2015-06-11 13:09:31,closed,eteq,v1.0.4,4,Affects-release;Bug;coordinates,https://api.github.com/repos/astropy/astropy/issues/3824,b'Coordinate representation lost in `__getitem__`',"b""When a SkyCoord or Frame is reduced via `__getitem__` then the representation always goes back to that of the internal representation data:\r\n```\r\nIn [2]: c = SkyCoord([90], [0], unit='deg')\r\n\r\nIn [3]: c.representation = 'cartesian'\r\n\r\nIn [4]: c\r\nOut[4]: \r\n<SkyCoord (ICRS): (x, y, z) [dimensionless]\r\n    (0.0, 1.0, 0.0)>\r\n\r\nIn [5]: c[0]\r\nOut[5]: \r\n<SkyCoord (ICRS): (ra, dec) in deg\r\n    (90.0, 0.0)>\r\n```\r\n\r\nThis is fixed in 8765e59 within #3731.  I didn't want to lose momentum on #3731 so I didn't stop to make a separate PR and wait for that to get merged.  We can cherry pick that commit to make a formal PR to fix this bug if everything looks fine."""
3817,85282263,mhvk,mdboom,2015-06-04 21:20:47,2015-06-17 16:36:14,2015-06-17 16:34:31,closed,mdboom,v1.0.4,4,Affects-release;Bug;units,https://api.github.com/repos/astropy/astropy/issues/3817,b'Redefine floor_divide to require quantities with equivalent units.',"b""Normally, `//` and `%` are defined such that it is guaranteed that:\r\n```\r\n(a // b) * b + (a % b) == a\r\n```\r\nFor `Quantity`, `divmod` gives consistent results but `//` and `%` do not:\r\n```\r\na = 1.230*u.km\r\nb = 100.*u.m\r\ndivmod(a, b)\r\n# (<Quantity 12.0>, <Quantity 0.029999999999999916 km>)\r\na % b\r\n# <Quantity 0.029999999999999916 km>\r\na // b\r\n# <Quantity 0.0 km / m>\r\n```\r\nThe problem is that `floor_divide` ignores the units. This PR ensures it is consistent with `divmod` and `%` by converting the second argument to unit of the first.\r\n\r\nThe above also implies that it is no longer possible to `floor_divide` two numbers for which the ratio is not dimensionless. This may be logical, since it is unclear what the meaning of `floor` is for quantities that are not dimensionless.\r\n\r\nThat said, in principle, it would be nice to do something like\r\n```\r\ndivmod(1.23 * u.m, 1.*u.m/u.s)\r\n# -> (<Quantity 1.0 s>, <Quantity 0.23 km>)\r\n```\r\nHowever, it is not quite clear what one should do when the units do not obviously have the same parts. E.g., \r\n```\r\ndivmod(1230*u.mm, 1.*u.m/u.s)\r\n# Probably should be (<Quantity 1.0 s>, <Quantity 230 mm>)\r\ndivmod(1230*u.mm, 1.*u.km/u.ks)\r\n# same?? Or (0 ks, 1230 mm)??\r\n```\r\nSo maybe best to leave that for further discussion, or rather insist that if one wants to do that, one is explicit about the units.\r\n\r\np.s.  Since we may decide that `unit1 // unit2` gets meaning based on such further discussion, I removed the part where `divmod(q1, unit) -> (q/unit, 0)`. I don't think anyone would want to do that anyway!"""
3816,85276318,bhilbert4,taldcroft,2015-06-04 21:03:33,2015-06-08 11:23:28,2015-06-08 11:23:28,closed,,,9,Bug;Duplicate;io.ascii,https://api.github.com/repos/astropy/astropy/issues/3816,b'ascii.read inconsistent treatment of data_start and header_start',"b""I ran across some strange behavior while trying to use ascii.read to read in a text file. It appears that lines containing only spaces in the file to be read in are counted differently with respect to the data_start and header_start keyword values. I'm using astropy version 1.0.1.\r\n\r\nHere is the file I was trying to read in (myfile.txt):\r\nData produced from myscript.py\r\nBox numbers and gain values for quadrant 3 of detector NRCA1, calculated from files:\r\nFile1.fits\r\nFile2.fits\r\n  \r\nThe locations and shapes of the boxes in this file are given in: boxmapfile.fits\r\n\r\nboxnumber   gain\r\n30002.0   2.04351925985\r\n30000.0   2.05034584049\r\n30003.0   2.05689883435\r\n30001.0   2.03117647546\r\n\r\nNote the blank lines after 'File2.fits' and after 'The locations...'\r\nWhen these are truly blank lines, ascii.read behaves as expected:\r\n    `from astropy.io import ascii`\r\n    `indtable = ascii.read('myfile.txt',header_start=7,data_start=8)`\r\n    `indtable.colnames`\r\n['boxnumber', 'gain']\r\n    `indtable.columns['boxnumber'].data`\r\narray([ 30002.,  30000.,  30003.,  30001.])\r\n\r\nBut if those two blank lines each contain a space, then ascii.read finds the column headers correctly, but skips the first two lines of data and reads only the last two.\r\n   `from astropy.io import ascii`\r\n   `indtable = ascii.read('myfile.txt',header_start=7,data_start=8)`\r\n`indtable.colnames`\r\n['boxnumber', 'gain']\r\n`indtable.columns['boxnumber'].data`\r\narray([ 30003.,  30001.])\r\n\r\nDecreasing the data_start keyword value by 2, I can make ascii.read work correctly in the case where the blank lines contain spaces:\r\nindtable = ascii.read('myfile.txt',header_start=7,data_start=6)\r\n`indtable.colnames`\r\n['boxnumber', 'gain']\r\n`indtable.columns['boxnumber'].data`\r\narray([ 30002.,  30000.,  30003.,  30001.])\r\n\r\nThis suggests that lines containing only spaces are counted as lines when moving through the file to reach the header, but these same lines are not counted when moving through the file to reach the data."""
3810,83794828,taldcroft,taldcroft,2015-06-02 02:24:08,2016-05-31 13:43:11,2015-06-04 19:33:17,closed,mhvk,v1.0.4,8,Affects-release;Bug;no-changelog-entry-needed;table,https://api.github.com/repos/astropy/astropy/issues/3810,b'Make Column repr and str work for scalar values',"b'Although `Column` is not designed to hold scalar values, in numpy 1.6 this can happen as a result of a bug in `np.std` in which the return value is a scalar `Column` object with the std dev value.  This results in a failure like below when printing value:\r\n```\r\nIn [2]: c = Column(1.5)\r\nIn [3]: c\r\nOut[3]: <repr(<astropy.table.column.Column at 0x10659fe60>) failed: TypeError: len() of unsized object>\r\n```\r\n'"
3803,82540770,embray,embray,2015-05-29 18:45:59,2015-06-02 22:09:34,2015-06-02 21:53:53,closed,,,6,Bug;io.fits;Upstream Fix Required,https://api.github.com/repos/astropy/astropy/issues/3803,b'Possibly include workarounds for remaining io.fits issues with Numpy 1.10',"b""In #3419 I fixed most of the bugs in io.fits with Numpy 1.10.dev.  There is a small remaining issue that will be fixed by numpy/numpy#5921.  If I can finish that PR and get it merged in time then no action is needed and this issue can be closed.  Otherwise we'll have to at least temporarily include a workaround."""
3800,81394642,ycopin,eteq,2015-05-27 10:43:29,2016-04-18 22:18:01,2016-04-18 22:18:01,closed,eteq,v1.2.0,22,Affects-release;Bug;coordinates,https://api.github.com/repos/astropy/astropy/issues/3800,b'Cannot use `coordinates.angle_utilities.position_angle` with `floats`',"b""While the documentation states that `position_angle` can be used with `float`s (in radians), it crashes during the conversion to `Angle`:\r\n```\r\nUnitsError: No unit was given - must be some kind of angle\r\n```\r\nShouldn't `position_angle` returns a `Quantity`, as `angular_separation`, rather than an `Angle`?"""
3798,81347887,cdeil,embray,2015-05-27 08:31:48,2015-07-09 18:26:07,2015-07-09 18:26:05,closed,,v1.0.4,2,Affects-release;Bug;Effort-low;io.fits;Package-novice,https://api.github.com/repos/astropy/astropy/issues/3798,b'BinTableHDU.copy generates AstropyDeprecationWarning',"b""As far as I can see the [astropy.io.fits.BinTableHDU.copy](http://astropy.readthedocs.org/en/latest/io/fits/api/tables.html#astropy.io.fits.BinTableHDU.copy) method is not deprecated, but it is implemented by calling the deprecated `new_table` function and thus generates a `AstropyDeprecationWarning`. Using the [example from the astropy.io.fits docs](http://astropy.readthedocs.org/en/latest/io/fits/index.html#creating-a-new-table-file):\r\n```python\r\n>>> from astropy.io import fits\r\n>>> import numpy as np\r\n>>> a1 = np.array(['NGC1001', 'NGC1002', 'NGC1003'])\r\n>>> a2 = np.array([11.1, 12.3, 15.2])\r\n>>> col1 = fits.Column(name='target', format='20A', array=a1)\r\n>>> col2 = fits.Column(name='V_mag', format='E', array=a2)\r\n>>> cols = fits.ColDefs([col1, col2])\r\n>>> tbhdu = fits.BinTableHDU.from_columns(cols)\r\n>>> tbhdu.copy()\r\nWARNING: AstropyDeprecationWarning: The new_table function is deprecated and may be removed in a future version.\r\n        Use :meth:`BinTableHDU.from_columns` for new BINARY tables or :meth:`TableHDU.from_columns` for new ASCII tables instead. [astropy.io.fits.hdu.table]\r\n<astropy.io.fits.hdu.table.BinTableHDU object at 0x107f4d710>\r\n```\r\n@embray - I guess this needs to be updated?\r\n\r\nThese seem to be the only calls to `new_table` :\r\n* https://github.com/astropy/astropy/search?utf8=%E2%9C%93&q=new_table\r\n* https://github.com/astropy/astropy/blob/e7c86f9de892c2f27a457162dd050960095ec78b/astropy/io/fits/fitsrec.py#L877\r\n* https://github.com/astropy/astropy/blob/5843241748c1f12c4c1da8ee6519680cf6a3bbe1/astropy/io/fits/hdu/table.py#L496"""
3795,79634005,taldcroft,embray,2015-05-22 22:24:28,2015-05-28 13:37:30,2015-05-28 13:37:30,closed,,v0.4.6,6,Affects-release;Bug;time,https://api.github.com/repos/astropy/astropy/issues/3795,b'Update local ERFA to include 2015-Jun-30 leap second (v0.4.x backport)',"b""This is basically the same as #3794 but in 0.4 the ERFA library was in the source repo as a single file, while in 1.0 it got changed to be one file per function.  I'm not sure if I'm doing this exactly right process wise."""
3794,79627265,taldcroft,taldcroft,2015-05-22 21:59:26,2015-05-28 21:59:38,2015-05-27 01:50:02,closed,,v1.0.3,11,Affects-release;Bug;time,https://api.github.com/repos/astropy/astropy/issues/3794,b'Update local ERFA to include 2015-Jun-30 leap second',b'This is a minimal patch to make astropy.time aware of the leap second on 2015-Jun-30.  This simply copies `liberfa/erfa/src/dat.c` to `cextern/erfa/dat.c` and replicates the change to `dat.c` in https://github.com/liberfa/erfa/pull/26.\r\n\r\nThe other option is to make a new release of ERFA and then include that new release in astropy.  The footprint would be much larger and the scope of changes would be much more than just the leap second.\r\n\r\nThis is a bit late in coming and we should not wait too long to get something merged and released.'
3792,79536498,larrybradley,pllim,2015-05-22 17:19:20,2015-06-03 18:53:43,2015-05-26 14:33:28,closed,,v1.1.0,5,Affects-release;Bug;stats,https://api.github.com/repos/astropy/astropy/issues/3792,b'Fix bug in sigma clip mask',"b'Recent changes to `sigma_clip` (#3595) made it possible for the `mask` to be scalar `False` in the returned masked array in the case where no values are clipped.  The problem with that is the advertised method for getting the good values, `good_only = filtered_data.data[~filtered_data.mask]`, does not work correctly with a scalar mask value.  If the `mask` is scalar `False` then `~mask` is scalar `True`, which is then translated to an index of simply `1`.\r\n\r\nThis PR ensures the returned `mask` always has the same shape as `data` and uses `np.ma.compressed` in `sigma_clipped_stats` instead of `filtered_data.data[~filtered_data.mask]` to get the good data values.\r\n\r\n'"
3790,78999816,mdboom,mhvk,2015-05-21 13:40:04,2015-05-21 18:41:55,2015-05-21 18:41:54,closed,mhvk,v1.0.3,2,Bug;units,https://api.github.com/repos/astropy/astropy/issues/3790,b'Fix loss of precision when multiplying powers together.',b'Fix #3788.'
3787,78243401,eteq,eteq,2015-05-19 20:41:39,2015-05-20 15:40:58,2015-05-20 15:40:56,closed,,v1.0.3,6,Bug;coordinates;testing,https://api.github.com/repos/astropy/astropy/issues/3787,b'Add remote_data to some doc examples that use from_name',"b'Prompted by a failure in #3756, I noticed a few places where ``SkyCoord.from_name`` is invoked in the docs but the line doesn\'t have the ``REMOTE_DATA`` tag.  This should hopefully address those.  In the ""Observation Planning"" example, I also changed invocations of ``from_name`` necessary for making some of the plots to instead build the ``SkyCoord`` from explicitly coordinates.\r\n\r\n@embray - there\'s a pytest plugin that I think you wrote that\'s supposed to check if the internet is accessed without remote_data being active... But it apparently failed in these cases.  Does that not run on docstrings?  And if so, do you think there\'s a way to make it do so?\r\n\r\n@mwcraig @jakevdp - In #3756 I think one of you noticed the sphinx error that lead to @embray\'s comment on this...  But it has since disappeared because the test was restarted.  Do you recognize it as one of the places I\'ve fixed here, or was there somewhere else that I missed?'"
3778,76859013,embray,embray,2015-05-15 21:13:53,2015-05-29 19:15:24,2015-05-29 19:15:21,closed,mhvk,v1.0.3,6,Affects-release;Bug;units,https://api.github.com/repos/astropy/astropy/issues/3778,b'Allow object arrays of mixed unit Quantities to be printed',"b'This partially addresses the issue raised in #3777 that printing/repr-ing an `ndarray` of `dtype=object` containing quantities of different units resulted in a crash.\r\n\r\nI still think it would be nice to have a class specifically for this purpose as discussed in #3777, but this solves the immediate problem, and I will need this for further work.'"
3772,76037523,embray,embray,2015-05-13 16:08:41,2015-05-14 21:21:36,2015-05-14 21:21:33,closed,,v1.0.3,6,Affects-release;Bug;modeling,https://api.github.com/repos/astropy/astropy/issues/3772,b'Fix bugs with evaluating models that accept no inputs.',"b'Fixes an issue pointed out by @wkerzendorf, where models with zero inputs did not work.  Incidentally the fix is almost exactly the one he put in temporarily.  Just fixed it in another case as well.'"
3766,75116067,apopping,embray,2015-05-11 07:09:51,2015-07-14 20:21:21,2015-07-14 20:17:57,closed,embray,v1.0.4,4,Affects-release;Bug;io.fits,https://api.github.com/repos/astropy/astropy/issues/3766,b'problem with memmap when using latest astropy on mac',"b'After upgrading astropy from version 0.4.2 to 1.0.2 I ran into a problem using memory mapped images which did not happen before\r\n\r\na fits file is being loaded using the following line:\r\n```\r\nf = astropy.open(inFile,memmap=True,do_not_scale_image_data=True)\r\n```\r\nor just:\r\n```\r\nf=astropy.open(weightsFile)\r\n```\r\n\r\nThe code runs fine when working on fits files of 500Mb, however the code crashes when using a larger fitsfile (e.g. 2Gb)\r\n\r\nThe following error message occurred:\r\n\r\n```\r\n  File ""/usr/local/lib/python2.7/site-packages/astropy/io/fits/hdu/image.py"", line 595, in _get_scaled_image_data\r\n    raise ValueError(""Cannot load a memory-mapped image: ""\r\nValueError: Cannot load a memory-mapped image: BZERO/BSCALE/BLANK header keywords present. Set memmap=False.\r\n```\r\n\r\nI am running my code on a Macbook pro with OS X 10.10\r\npython 2.7.6\r\nastropy 1.0.2\r\n\r\n\r\n'"
3753,73362294,embray,mdboom,2015-05-05 16:30:08,2015-05-19 19:18:58,2015-05-19 18:23:44,closed,,v1.0.3,6,Affects-release;Bug;Effort-low;Package-intermediate;Priority-Low,https://api.github.com/repos/astropy/astropy/issues/3753,"b'u.picobarn, u.femtobarn etc. missing'","b'Although the [`barn`](https://github.com/astropy/astropy/blob/master/astropy/units/astrophys.py#L46) unit accepts SI prefixes, the full names `picobarn`, `femtobarn`, etc. are missing from the units package namespace.  However, it does have ""pbarn"" and ""fbarn"".  \r\n\r\nThe bug here seems to be that most units that take SI prefixes have an abbreviation like ""m"", and a full name like ""metre"".  And so it\'s assuming that the first name for a unit is its abbreviation and so the prefix abbreviation should be used with it.  Unfortunately, although ""barn"" is abbreviated ""b"", we don\'t have that in the unit definition since it conflicts with ""b"" for ""bit"".  I\'m a little less concerned about that right now since if I\'m doing a lot of work with crosssectional areas I can define my own aliases.  But it took me a bit to realize ""fbarn"" was there but not ""femtobarn"".  We should try to find a workaround for this.  Maybe for the unit name it could be something like `[None, ""barn""]` to specify that ""barn"" is the full name, and that an abbreviation doesn\'t exist, or something.  This is complicated though by the fact that some units can have more than 2 names too.  I haven\'t looked into exactly what the logic is right now.'"
3750,72845213,eteq,eteq,2015-05-03 18:27:37,2015-05-15 20:27:26,2015-05-15 18:42:44,closed,,v1.0.3,9,Affects-release;Bug;coordinates,https://api.github.com/repos/astropy/astropy/issues/3750,b'Fix two bugs in get_sun and related bug in GCRS->ICRS transformation',"b""This fixes two bugs I found in ``astropy.coordinates.funcs.get_sun``:\r\n\r\n1. The GCRS frame that was being returned was not getting an ``obstime`` corresponding to the input times.  That's not strictly speaking wrong, but it probably is confusing.\r\n2. The ERFA function that's used to get the sun/earth vector says it's in BCRS.  That means it has *not* included the effects of aberration of light, which *is* included in the GCRS frame.  So this PR adds in the effect of abberation.\r\n\r\nThese effects are quite small for what actually ends up observable (i.e. the AltAz frame), so things like the observing example are unaffected, but this is slightly more correct.\r\n\r\nAlso included is a fix to a definite bug I uncovered while testing `get_sun` for this fix: the GCRS->ICRS transformation was computing the distance wrong, yielding strange incorrect results like a coordinate near the ICRS origin  comes back via the ICRS->GCRS->ICRS transformation as though it were 2 AU away from the barycenter. The actual fix is just the removal of a minus sign.\r\n """
3747,72241223,larrybradley,embray,2015-04-30 18:25:48,2015-06-03 18:53:57,2015-05-26 17:33:49,closed,,v1.0.3,10,Affects-release;Bug;convolution,https://api.github.com/repos/astropy/astropy/issues/3747,b'Fix Kernel normalization',"b""This PR fixes an issue with kernel normalization.  Currently the normalization factor is defined when the kernel is initialized and never updated.  Consequently, repeatedly running `.normalize()` will continue to apply the original normalization factor.  In this PR the normalization factor is recomputed each time `.normalize()` is called.\r\n\r\nHere's an example showing the current bug:\r\n```\r\nimport numpy as np\r\nfrom astropy.convolution import CustomKernel\r\n\r\nkernel = CustomKernel(np.ones(5))\r\nkernel.normalize()\r\nprint kernel.array\r\n[ 0.2  0.2  0.2  0.2  0.2]\r\n\r\nkernel.normalize()\r\nprint kernel.array\r\n[ 0.04  0.04  0.04  0.04  0.04]\r\n```"""
3736,71359595,larrybradley,embray,2015-04-27 18:09:22,2015-06-03 18:54:04,2015-05-05 20:39:13,closed,,v1.0.3,4,Affects-release;Bug;modeling,https://api.github.com/repos/astropy/astropy/issues/3736,b'Fix Ellipse2D model',b'This PR fixes the `Ellipse2D` model to be inclusive (`<=` instead of `<`) as documented and consistent with `Disk2D`.  This is my bug from when I originally added `Ellipse2D` in #3124.  Sorry!\r\n\r\nThis PR also turns off the `imshow` interpolation when plotting the example to not give the impression that pixels can be partially in the ellipse (they are either 1 or 0).'
3730,71040559,alexanjo,embray,2015-04-26 09:30:57,2015-06-09 13:48:42,2015-06-09 13:48:41,closed,embray,v1.0.4,4,Affects-release;Bug;io.fits,https://api.github.com/repos/astropy/astropy/issues/3730,b'AttributeError: record array has no attribute _data_field',"b'Hi Astropy\r\n\r\nMuch respect to all of you for creating the powerful and practical Astropy package--thank you!\r\n\r\nI have recently begun using it to read, manipulate and write FITS formatted radio visibility data.  The data was recorded at the ATCA interferometer (Australia) and then exported to FITS using the Miriad \'fits\' task.\r\n\r\nAfter successfully reading a FITS file into python using astropy.io.fits, an error occurs when writing it back out to a FITS file.\r\n\r\nBelow are the commands issued that lead to the error and below that is output from astropy.test()\r\n\r\nThank you, kindly, for considering this issue.\r\n\r\nJordan\r\n\r\n-----------\r\n\r\n```\r\n>>> from astropy.io import fits\r\n>>> hdulist = fits.open(\'if4_1253_055.fits\',mode=\'update\')\r\n>>> data = hdulist[0].data[\'data\']\r\n>>> hdulist.flush()\r\nTraceback (most recent call last):\r\n  File ""<stdin>"", line 1, in <module>\r\n  File ""/usr/local/lib/python2.7/dist-packages/astropy/utils/decorators.py"", line 517, in flush\r\n    **_get_function_args(wrapped))\r\n  File ""/usr/local/lib/python2.7/dist-packages/astropy/io/fits/util.py"", line 260, in wrapped\r\n    func(*args, **kwargs)\r\n  File ""/usr/local/lib/python2.7/dist-packages/astropy/io/fits/hdu/hdulist.py"", line 583, in flush\r\n    self.verify(option=output_verify)\r\n  File ""/usr/local/lib/python2.7/dist-packages/astropy/io/fits/verify.py"", line 74, in verify\r\n    errs = self._verify(opt)\r\n  File ""/usr/local/lib/python2.7/dist-packages/astropy/io/fits/hdu/hdulist.py"", line 915, in _verify\r\n    result = hdu._verify(option)\r\n  File ""/usr/local/lib/python2.7/dist-packages/astropy/io/fits/hdu/groups.py"", line 491, in _verify\r\n    errs = super(GroupsHDU, self)._verify(option=option)\r\n  File ""/usr/local/lib/python2.7/dist-packages/astropy/io/fits/hdu/image.py"", line 888, in _verify\r\n    errs = super(PrimaryHDU, self)._verify(option=option)\r\n  File ""/usr/local/lib/python2.7/dist-packages/astropy/io/fits/hdu/image.py"", line 482, in _verify\r\n    self.update_header()\r\n  File ""/usr/local/lib/python2.7/dist-packages/astropy/io/fits/hdu/groups.py"", line 420, in update_header\r\n    column = self.data._coldefs[self.data._data_field]\r\n  File ""/usr/lib/python2.7/dist-packages/numpy/core/records.py"", line 418, in __getattribute__\r\n    raise AttributeError(""record array has no attribute %s"" % attr)\r\nAttributeError: record array has no attribute _data_field\r\n```\r\n\r\n-----------\r\n\r\n\r\n```\r\nIn [1]: import astropy\r\n\r\nIn [2]: astropy.test()\r\n============================= test session starts ==============================\r\nplatform linux2 -- Python 2.7.6 -- pytest-2.5.1\r\n\r\nRunning tests with Astropy version 1.0.2.\r\nRunning tests in /usr/local/lib/python2.7/dist-packages/astropy.\r\n\r\nPlatform: Linux-3.16.0-34-generic-x86_64-with-Ubuntu-14.04-trusty\r\n\r\nExecutable: /usr/bin/python\r\n\r\nFull Python Version:\r\n2.7.6 (default, Mar 22 2014, 22:59:56)\r\n[GCC 4.8.2]\r\n\r\nencodings: sys: ascii, locale: UTF-8, filesystem: UTF-8, unicode bits: 20\r\nbyteorder: little\r\nfloat info: dig: 15, mant_dig: 15\r\n\r\nNumpy: 1.8.2\r\nScipy: 0.13.3\r\nMatplotlib: 1.3.1\r\nh5py: not available\r\n```'"
3728,71016534,keflavich,embray,2015-04-26 06:03:43,2015-07-08 20:44:23,2015-07-08 20:44:19,closed,,v1.0.4,6,Affects-release;Bug;units,https://api.github.com/repos/astropy/astropy/issues/3728,b'Check for appropriate equivalency of rest value in doppler equivalencies',"b""Without this, it is possible to declare an invalid equivalency, e.g.:\r\n`u.doppler_radio(None)` or `u.doppler_optical(5)`\r\n\r\nOnly open question: should this catch only `AttributeErrors`?  Probably, so I'll change that.  If anyone can think of other exceptions, let me know.\r\n\r\n"""
3713,70139617,mperrin,embray,2015-04-22 14:20:12,2015-05-05 17:13:55,2015-05-05 17:13:52,closed,,v1.0.3,9,Bug;testing,https://api.github.com/repos/astropy/astropy/issues/3713,"b""astropy test framework's disable_internet is incompatible with python 3.4 multiprocessing forkserver""","b'Attn @embray, @mdboom, @josephoenix - \r\n\r\nHere\'s another case of the astropy test framework customizations having unintended consequences for packages using the affiliated package template. \r\n\r\nFor [poppy](https://github.com/mperrin/poppy) on Python 3.4 when doing multiprocess parallelized calculations I just switched it to use the new (as of Python 3.4) `forkserver` method for starting additional processes. (See https://github.com/mperrin/poppy/issues/23 and https://github.com/numpy/numpy/issues/5752 for the reasons why).   The code works as intended in normal operations, but under testing it gets blocked by `astropy/tests/disable_internet.py`. Here\'s the tail end of the exception traceback:\r\n\r\n```python\r\n/Users/mperrin/software/macports/Library/Frameworks/Python.framework/Versions/3.4/lib/python3.4/multiprocessing/forkserver.py:108:\r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\r\n\r\nargs = (<socket.socket [closed] fd=-1, family=AddressFamily.AF_UNIX, type=SocketKind.SOCK_STREAM, proto=0>, \'/var/folders/wj/p62fp78j0z1b4xyr2yql1prw00042w/T/pymp-g72qatlv/listener-paqlzej6\')\r\nkwargs = {}, hostname = \'peregrine.stsci.edu\', fqdn = \'peregrine.stsci.edu\', valid_hosts = (\'localhost\', \'127.0.0.1\', \'::1\')\r\n\r\n    def new_function(*args, **kwargs):\r\n        hostname = socket.gethostname()\r\n        fqdn = socket.getfqdn()\r\n\r\n        if isinstance(args[0], socket.socket):\r\n            host = args[1][0]\r\n            valid_hosts = (\'localhost\', \'127.0.0.1\', \'::1\')\r\n            if host in (hostname, fqdn):\r\n                host = \'localhost\'\r\n                args = (args[0], (host, args[1][1])) + args[2:]\r\n        else:\r\n            host = args[0][0]\r\n            valid_hosts = (\'localhost\', \'127.0.0.1\')\r\n            if host in (hostname, fqdn):\r\n                host = \'localhost\'\r\n                args = ((host, args[0][1]),) + args[1:]\r\n\r\n        if any([h in host for h in valid_hosts]):\r\n            return original_function(*args, **kwargs)\r\n        else:\r\n>           raise IOError(""An attempt was made to connect to the internet ""\r\n                          ""by a test that was not marked `remote_data`."")\r\nE           OSError: An attempt was made to connect to the internet by a test that was not marked `remote_data`.\r\n\r\n```\r\n\r\nSo for some reason `forkserver` is using the fully qualified domain name of my computer instead of ""localhost"" and thus it\'s getting blocked. \r\n\r\nNot sure what the best solution here is. I\'d sort of like to be able to decorate that test function and say ""please run this anyway; it\'s allowed to use network sockets even if remote_data is off"". It feels slightly kludgy to turn on `remote_data` for this because it truly does not access any data remotely.  Also it\'s not obvious to me how one would set remote_data from the command line, in particular for our Travis CI build matrix. \r\n\r\n```\r\n > python setup.py test --remote_data\r\nerror: option --remote_data not recognized\r\n```\r\n\r\nWhat do you think is the best approach? '"
3702,70026288,nden,nden,2015-04-22 05:10:19,2015-05-12 19:34:38,2015-05-10 08:27:17,closed,embray,v1.0.3,3,Affects-release;Bug;modeling,https://api.github.com/repos/astropy/astropy/issues/3702,b'scale input when polynomials are used in compound models',b'Fixes #3699'
3699,69715203,nden,nden,2015-04-21 01:08:49,2015-05-12 19:35:19,2015-05-10 08:27:17,closed,,v1.0.3,2,Affects-release;Bug;modeling,https://api.github.com/repos/astropy/astropy/issues/3699,"b""compound models ignore polynomial classes' domain""","b'@embray Is `prepare_inputs` of orthogonal polynomial classes run when they are part of compound models? \r\n```\r\ncheb = models.Chebyshev2D(1,1)\r\ncheb.parameters = [1,2,3, 4]\r\ncheb.x_domain=[0, 1024]\r\ncheb.y_domain = [450, 1000]\r\nshift=models.Shift(3)\r\nmodel = cheb & shift\r\nprint(model(1, 2, 1))\r\n\r\n(17.0, 4.0)\r\n\r\nprint(cheb(1, 2), shift(1))\r\n\r\n1.61245738636 4.0\r\n```'"
3693,69145289,taldcroft,embray,2015-04-17 14:05:29,2015-06-04 21:51:10,2015-06-04 21:51:10,closed,,v1.0.3,37,Affects-release;Bug;Critical;Effort-low;io.ascii;Package-novice,https://api.github.com/repos/astropy/astropy/issues/3693,b'Remove HTML format from io.ascii guess list',b'From #3691 it appears that the HTML-format reader (with the libxml backend for beautifulsoup) can segfault for normal CSV-format input. \r\n\r\nI would suggest mitigating this by taking HTML out of the standard guess list.  It is a bit of an outlier and not something that would commonly appear in a data file of unknown format.\r\n\r\n@hamogu @ChrisBeaumont ?'
3688,68833293,taldcroft,taldcroft,2015-04-16 03:02:42,2015-05-14 01:57:51,2015-05-14 01:57:49,closed,hamogu,v1.1.0,9,Affects-release;Bug;Enhancement;io.ascii;Ready-for-final-review,https://api.github.com/repos/astropy/astropy/issues/3688,b'Add io.ascii.get_read_trace() that shows how table got read',"b'I\'ve always wanted to have some traceability into what readers got called and how when reading an ASCII table.  This implements that.  For example, without the second commit, which is (strictly speaking) off-topic, one sees there is a problem in that the fast readers are generally not getting called when guessing.  Note the ` ""TypeError: __cinit__() got an unexpected keyword argument \'strict_names\'""`.\r\n```\r\nIn [1]: from astropy.io.ascii.ui import READ_TRIES\r\n\r\nIn [2]: from astropy.io import ascii\r\n\r\nIn [3]: b = ascii.read([\'a b\', \'1 2\'])\r\n\r\nIn [4]: READ_TRIES\r\nOut[4]: \r\n[{\'kwargs\': {\'Reader\': astropy.io.ascii.ecsv.Ecsv,\r\n   \'fill_values\': [(\'\', \'0\')],\r\n   \'strict_names\': True},\r\n  \'status\': \'InconsistentTableError: ECSV header line like ""# %ECSV <version>"" not found as first line.  This is required for a ECSV file.\'},\r\n\r\n {\'kwargs\': {\'Reader\': astropy.io.ascii.fixedwidth.FixedWidthTwoLine,\r\n   \'fill_values\': [(\'\', \'0\')],\r\n   \'strict_names\': True},\r\n  \'status\': \'InconsistentTableError: Position line should only contain delimiters and one other character, e.g. ""--- ------- ---"".\'},\r\n\r\n {\'kwargs\': {\'Reader\': astropy.io.ascii.fastbasic.FastBasic,\r\n   \'fill_values\': [(\'\', \'0\')],\r\n   \'strict_names\': True},\r\n  \'status\': ""TypeError: __cinit__() got an unexpected keyword argument \'strict_names\'""},\r\n\r\n {\'kwargs\': {\'Reader\': astropy.io.ascii.basic.Basic,\r\n   \'fill_values\': [(\'\', \'0\')],\r\n   \'strict_names\': True},\r\n  \'status\': \'Success (guessing)\'}]\r\n```\r\n\r\nActually, there was *another* bug, which is that in the guess list the `Basic` reader was always before the `FastBasic` reader because of the default `fill_values` kwarg which is inserted by `ui.read()`.   So this PR fixes that as well.\r\n\r\nIn fact, once both commits in this PR are in place, then a third bug appears in that the fast reader doesn\'t handle a no-header table correctly when guessing and `names` is supplied.  More on that tomorrow.'"
3680,68047595,rubendv,embray,2015-04-13 09:02:33,2015-04-13 19:15:39,2015-04-13 19:15:36,closed,,v1.0.2,9,Affects-release;Bug;Effort-medium;io.fits;Package-expert,https://api.github.com/repos/astropy/astropy/issues/3680,b'Memory leak with compressed FITS file',"b'Under astropy 0.4.1, as well as under pyfits 3.3, the test case at https://github.com/rubendv/fits_memleak leaks a massive amount of memory. The provided testcase consumes about 6.5 GB on my computer by the end.'"
3662,66190210,augustfly,taldcroft,2015-04-03 17:13:14,2015-04-03 19:38:26,2015-04-03 19:20:21,closed,taldcroft,,12,Bug;io.ascii,https://api.github.com/repos/astropy/astropy/issues/3662,b'self._mask is undefined for MaskedColumn',"b""See traceback and ipdb output at the bottom of this example. \r\n \r\nhttp://nbviewer.ipython.org/github/AASJournals/Tutorials/blob/master/3D_Objects/HYG_Database/HYG.ipynb\r\n\r\nI'm at my limit to debug what is actually going on. \r\n\r\nBut if you ask me why I'm using masked column at all then i'd have to ask you (astropy) why astropy is using masked column for reading non-sparse (non-null containing or flagged) columns in the first place. """
3656,65742320,mdboom,embray,2015-04-01 17:54:08,2015-04-08 16:25:10,2015-04-08 16:25:10,closed,astrofrog,v1.0.2,2,Affects-release;Bug;wcs,https://api.github.com/repos/astropy/astropy/issues/3656,b'Fix #3652: Display warning when to_header excerpts',
3648,65353600,taldcroft,taldcroft,2015-03-31 03:07:56,2015-03-31 19:47:18,2015-03-31 19:44:04,closed,taldcroft,v1.0.2,12,Affects-release;Bug;Effort-low;time,https://api.github.com/repos/astropy/astropy/issues/3648,b'Cannot create Time object from a Column',"b'This is a regression introduced in 1.0.  The problem is [here](https://github.com/astropy/astropy/blob/f764be8a2e2e5312279fa7828d3dd4827335eba2/astropy/time/core.py#L1375)\r\n\r\nI\'m not a huge fan of duck-typing by simply looking for a `to` attribute (and *hoping* that object is sufficiently Quantity-like), but given the existing code the best way out might just be to handle the possibility of a `unit` attribute that is None.\r\n\r\n@mhvk \r\n\r\n```\r\nIn [1]: from astropy.table import Column\r\nIn [2]: from astropy.time import Time\r\nIn [3]: x = Column([1])\r\nIn [4]: Time(x, format=\'jd\')\r\n---------------------------------------------------------------------------\r\nUnitsError                                Traceback (most recent call last)\r\n<ipython-input-4-2acb9071d863> in <module>()\r\n----> 1 Time(x, format=\'jd\')\r\n\r\n/Users/aldcroft/anaconda/lib/python2.7/site-packages/astropy/time/core.pyc in __init__(self, val, val2, format, scale, precision, in_subfmt, out_subfmt, location, copy)\r\n    196                 self._set_scale(scale)\r\n    197         else:\r\n--> 198             self._init_from_vals(val, val2, format, scale, copy)\r\n    199 \r\n    200         if self.location:\r\n\r\n/Users/aldcroft/anaconda/lib/python2.7/site-packages/astropy/time/core.pyc in _init_from_vals(self, val, val2, format, scale, copy)\r\n    238 \r\n    239         # Parse / convert input values into internal jd1, jd2 based on format\r\n--> 240         self._time = self._get_time_fmt(val, val2, format, scale)\r\n    241         self._format = self._time.name\r\n    242 \r\n\r\n/Users/aldcroft/anaconda/lib/python2.7/site-packages/astropy/time/core.pyc in _get_time_fmt(self, val, val2, format, scale)\r\n    272             try:\r\n    273                 return FormatClass(val, val2, scale, self.precision,\r\n--> 274                                    self.in_subfmt, self.out_subfmt)\r\n    275             except (ValueError, TypeError):\r\n    276                 pass\r\n\r\n/Users/aldcroft/anaconda/lib/python2.7/site-packages/astropy/time/core.pyc in __init__(self, val1, val2, scale, precision, in_subfmt, out_subfmt, from_jd)\r\n   1296             self.jd2 = val2\r\n   1297         else:\r\n-> 1298             val1, val2 = self._check_val_type(val1, val2)\r\n   1299             self.set_jds(val1, val2)\r\n   1300 \r\n\r\n/Users/aldcroft/anaconda/lib/python2.7/site-packages/astropy/time/core.pyc in _check_val_type(self, val1, val2)\r\n   1323             # set possibly scaled unit any quantities should be converted to\r\n   1324             _unit = u.CompositeUnit(getattr(self, \'unit\', 1.), [u.day], [1])\r\n-> 1325             val1 = val1.to(_unit).value\r\n   1326             if val2 is not None:\r\n   1327                 val2 = val2.to(_unit).value\r\n\r\n/Users/aldcroft/anaconda/lib/python2.7/site-packages/astropy/table/column.pyc in to(self, unit, equivalencies, **kwargs)\r\n    686             ``unit``.\r\n    687         """"""\r\n--> 688         return self.quantity.to(unit, equivalencies)\r\n    689 \r\n    690     def _copy_attrs(self, obj):\r\n\r\n/Users/aldcroft/anaconda/lib/python2.7/site-packages/astropy/units/quantity.pyc in to(self, unit, equivalencies)\r\n    603         unit = Unit(unit)\r\n    604         new_val = np.asarray(\r\n--> 605             self.unit.to(unit, self.value, equivalencies=equivalencies))\r\n    606         return self._new_view(new_val, unit)\r\n    607 \r\n\r\n/Users/aldcroft/anaconda/lib/python2.7/site-packages/astropy/units/core.pyc in to(self, other, value, equivalencies)\r\n    943             If units are inconsistent\r\n    944         """"""\r\n--> 945         return self._get_converter(other, equivalencies=equivalencies)(value)\r\n    946 \r\n    947     def in_units(self, other, value=1.0, equivalencies=[]):\r\n\r\n/Users/aldcroft/anaconda/lib/python2.7/site-packages/astropy/units/core.pyc in _get_converter(self, other, equivalencies)\r\n    847         except UnitsError:\r\n    848             return self._apply_equivalences(\r\n--> 849                 self, other, self._normalize_equivalencies(equivalencies))\r\n    850         return lambda val: scale * _condition_arg(val)\r\n    851 \r\n\r\n/Users/aldcroft/anaconda/lib/python2.7/site-packages/astropy/units/core.pyc in _apply_equivalences(self, unit, other, equivalencies)\r\n    838         raise UnitsError(\r\n    839             ""{0} and {1} are not convertible"".format(\r\n--> 840                 unit_str, other_str))\r\n    841 \r\n    842     def _get_converter(self, other, equivalencies=[]):\r\n\r\nUnitsError: \'\' (dimensionless) and \'d\' (time) are not convertible\r\n```\r\n\r\n'"
3641,64863128,embray,embray,2015-03-27 22:30:25,2015-03-30 15:22:06,2015-03-30 15:22:04,closed,,v1.0.2,0,Affects-release;Bug;io.fits,https://api.github.com/repos/astropy/astropy/issues/3641,b'Fix PyFITS issue #99',"b""This should fix the issue reported in https://github.com/spacetelescope/PyFITS/issues/99  I have some refactoring in progress that should remove the need for this fix entirely (the problem is that the ColDefs class has a ._arrays attribute that is a list of all the column arrays, and is largely superfluous.  I'm trying to remove it altogether.  In the meantime this was very easy to add a workaround to."""
3637,64787252,mdboom,mdboom,2015-03-27 15:40:57,2015-04-07 16:25:59,2015-04-07 16:25:59,closed,taldcroft,v1.0.2,5,Affects-release;Bug;table,https://api.github.com/repos/astropy/astropy/issues/3637,b'Handle some array corner cases in Table constructor.',"b""@taldcroft: While investigating #3634, I discovered some corner cases when passing arrays to the `Table` constructor that I'm surprised didn't work.\r\n\r\n- Passing an empty non-recarray array (`np.array([])`) should be treated the same as `None`.\r\n\r\n- Passing a 1-D non-recarray could be treated as a single row.  (That's perhaps controversial -- I'd be just as happy raising an exception rather than failing in a confusing way).\r\n\r\n- Passing a scalar should raise a nicer exception.\r\n\r\nAny thoughts?"""
3636,64786119,mdboom,embray,2015-03-27 15:35:25,2015-03-27 21:24:42,2015-03-27 21:23:48,closed,astrofrog,v1.0.2,3,Affects-release;Bug;io.votable,https://api.github.com/repos/astropy/astropy/issues/3636,b'Correctly create TABLEs without TABLEDATA',
3634,64775467,astrofrog,mdboom,2015-03-27 14:37:50,2015-03-27 21:23:55,2015-03-27 21:23:55,closed,mdboom,v1.0.2,4,Bug;io.votable,https://api.github.com/repos/astropy/astropy/issues/3634,b'Printing empty astropy.io.votable.tree.Table results in error',"b'I have an empty VO table which is causing ``print`` to crash:\r\n\r\n```\r\nIn [41]: t.array\r\nOut[41]: \r\nmasked_array(data = [],\r\n             mask = False,\r\n       fill_value = 1e+20)\r\n\r\nIn [42]: print(t)\r\n---------------------------------------------------------------------------\r\nIndexError                                Traceback (most recent call last)\r\n<ipython-input-42-d6c4f5caf31e> in <module>()\r\n----> 1 print(t)\r\n\r\n/Users/tom/miniconda3/envs/production/lib/python3.4/site-packages/astropy/io/votable/tree.py in __unicode__(self)\r\n   2055 \r\n   2056     def __unicode__(self):\r\n-> 2057         return six.text_type(self.to_table())\r\n   2058     if six.PY3:\r\n   2059         __str__ = __unicode__\r\n\r\n/Users/tom/miniconda3/envs/production/lib/python3.4/site-packages/astropy/io/votable/tree.py in to_table(self, use_names_over_ids)\r\n   2871             names = [field.ID for field in self.fields]\r\n   2872 \r\n-> 2873         table = Table(self.array, meta=meta)\r\n   2874 \r\n   2875         for name, field in zip(names, self.fields):\r\n\r\n/Users/tom/miniconda3/envs/production/lib/python3.4/site-packages/astropy/table/table.py in __init__(self, data, masked, names, dtype, meta, copy, rows)\r\n    265             else:\r\n    266                 init_func = self._init_from_ndarray  # _homog\r\n--> 267                 n_cols = data.shape[1]\r\n    268 \r\n    269         elif isinstance(data, dict):\r\n\r\nIndexError: tuple index out of range\r\n```\r\n\r\nAstropy tables seem to deal better with printing empty tables:\r\n\r\n```\r\nIn [45]: t = Table()\r\n\r\nIn [46]: print(t)\r\n<No columns>\r\n```\r\n\r\ncc @mdboom'"
3627,64538267,mdboom,mdboom,2015-03-26 14:20:25,2015-03-26 21:46:24,2015-03-26 16:11:22,closed,,v1.0.2,7,Affects-release;Bug,https://api.github.com/repos/astropy/astropy/issues/3627,"b'Revert 7186664e, which broke the old config API.'","b'This was a performance enhancement only, so should have no other negative effects.'"
3620,64263300,mdboom,mdboom,2015-03-25 13:02:01,2015-03-25 17:00:53,2015-03-25 15:02:41,closed,,v1.0.2,7,Affects-release;Bug;units,https://api.github.com/repos/astropy/astropy/issues/3620,b'Change LaTeX representation of Angstrom symbol',b'Fix #3617'
3615,63772845,mdboom,mdboom,2015-03-23 16:49:19,2015-04-07 19:12:56,2015-04-07 15:26:36,closed,astrofrog,v1.0.2,19,Affects-release;Bug;Ready-for-final-review;vo.samp,https://api.github.com/repos/astropy/astropy/issues/3615,b'Fix #3613: Fix SAMP over SSL',
3613,63458131,astrofrog,mdboom,2015-03-21 21:52:30,2015-04-07 15:26:42,2015-04-07 15:26:42,closed,mdboom,,0,Bug;vo.samp,https://api.github.com/repos/astropy/astropy/issues/3613,b'SSL-related failure in vo.samp tests',"b'@mdboom - if I remove the ``xfail`` decorator from the two last classes in ``test_standard_profile.py``, I am seeing errors likely relating to the latest changes to do with the SSL protocols (the xfail was orginally only because the failure was sporadic). Would you have time to look into it?\r\n\r\n```\r\n    @property\r\n    def params(self):\r\n        """"""\r\n            The hub parameters (which are written to the logfile)\r\n            """"""\r\n    \r\n        params = {}\r\n    \r\n        # Keys required by standard profile\r\n    \r\n        params[\'samp.secret\'] = self._hub_secret\r\n        params[\'samp.hub.xmlrpc.url\'] = self._url\r\n        params[\'samp.profile.version\'] = __profile_version__\r\n    \r\n        # Custom keys\r\n    \r\n        params[\'hub.id\'] = self.id\r\n        params[\'hub.label\'] = self._label or ""Hub {0}"".format(self.id)\r\n    \r\n        if SSL_SUPPORT and self._https:\r\n    \r\n            # Certificate request\r\n            cert_reqs_types = [""NONE"", ""OPTIONAL"", ""REQUIRED""]\r\n            params[\'hub.ssl.certificate\'] = cert_reqs_types[self._cert_reqs]\r\n    \r\n            # SSL protocol version\r\n            ssl_protocol_types = [""SSLv2"", ""SSLv3"", ""SSLv23"", ""TLSv1""]\r\n>           params[\'hub.ssl.protocol\'] = ssl_protocol_types[self._ssl_version]\r\nE           TypeError: list indices must be integers, not NoneType\r\n\r\nastropy/vo/samp/hub.py:511: TypeError\r\n```'"
3606,63021383,rcbrgs,embray,2015-03-19 15:42:11,2015-03-27 20:30:09,2015-03-27 20:30:07,closed,embray,v1.0.2,5,Affects-release;Bug;modeling,https://api.github.com/repos/astropy/astropy/issues/3606,b'Getting errors while fitting polynomial model with tied  parameters',"b'Hi! Found two different errors, one for each kind of syntax suggested by the documentation (http://astropy.readthedocs.org/en/latest/modeling/fitting.html), while trying to get \'tied\' parameters to work while fitting a model.\r\n\r\nI\'m using Python 3 in Fedora 21 (therefore Astropy 0.3.2-2.fc20).\r\n\r\nI can fit without the ties using NonLinearLSQFitter over a model Polynomial2D, using:\r\n\r\n```python\r\nfrom astropy.modeling import models\r\nfrom astropy.modeling.fitting import NonLinearLSQFitter as LevMarLSQFitter\r\nPolynomial2D_model = models.Polynomial2D ( degree = 2 )\r\nLevMarLSQFitter_fit = LevMarLSQFitter ( )\r\npolynomial_fit = LevMarLSQFitter_fit ( model = Polynomial2D_model, x = iia_x_dimension, y = iia_y_dimension, z = self.__ffa_unwrapped )\r\n```\r\n\r\nBut this modified code fails:\r\n\r\n```python\r\ndef tied_c2_0 ( o_model ):\r\n  o_c2_0 = o_model.c0_2\r\n  return o_c2_0\r\n\r\nPolynomial2D_model = models.Polynomial2D ( degree = 2, tied = { \'c2_0\' : tied_c2_0 } )\r\nLevMarLSQFitter_fit = LevMarLSQFitter ( )\r\npolynomial_fit = LevMarLSQFitter_fit ( model = Polynomial2D_model, x = iia_x_dimension, y = iia_y_dimension, z = self.__ffa_unwrapped )\r\n```\r\n```\r\nTraceback (most recent call last):\r\n  File ""./eg_highres_pipeline.py"", line 111, in <module>\r\n    unwrap_phase_map ( )\r\n  File ""./eg_highres_pipeline.py"", line 40, in unwrap_phase_map\r\n    f_scanning_wavelength = 6616.895 )\r\n  File ""/home/nix/cloud_essential2/tuna/github/tools/phase_map/high_resolution.py"", line 112, in __init__\r\n    ffa_unwrapped = self.unwrapped_phase_map )\r\n  File ""/home/nix/cloud_essential2/tuna/github/tools/models/parabola.py"", line 80, in fit_parabolic_model_by_Polynomial2D\r\n    o_parabola.create_model_map_by_Polynomial2D ( )\r\n  File ""/home/nix/cloud_essential2/tuna/github/tools/models/parabola.py"", line 36, in create_model_map_by_Polynomial2D\r\n    tied = { \'c2_0\': tied_c2_0 } )\r\n  File ""/usr/lib64/python3.3/site-packages/astropy/modeling/polynomial.py"", line 672, in __init__\r\n    param_dim=param_dim, **params)\r\n  File ""/usr/lib64/python3.3/site-packages/astropy/modeling/polynomial.py"", line 131, in __init__\r\n    self._validate_params(**params)\r\n  File ""/usr/lib64/python3.3/site-packages/astropy/modeling/polynomial.py"", line 183, in _validate_params\r\n    assert(len(params) == numcoeff)\r\nAssertionError\r\n```\r\nThe other syntax also is problematic:\r\n\r\n```python\r\ndef tied_c2_0 ( o_model ):\r\n  o_c2_0 = o_model.c0_2\r\n  return o_c2_0\r\n\r\nPolynomial2D_model = models.Polynomial2D ( degree = 2 )\r\nPolynomial2D_model.c2_0.tied = tied_c2_0\r\nLevMarLSQFitter_fit = LevMarLSQFitter ( )\r\npolynomial_fit = LevMarLSQFitter_fit ( model = Polynomial2D_model, x = iia_x_dimension, y = iia_y_dimension, z = self.__ffa_unwrapped )\r\n```\r\n```\r\nTraceback (most recent call last):\r\n  File ""./eg_highres_pipeline.py"", line 111, in <module>\r\n    unwrap_phase_map ( )\r\n  File ""./eg_highres_pipeline.py"", line 40, in unwrap_phase_map\r\n    f_scanning_wavelength = 6616.895 )\r\n  File ""/home/nix/cloud_essential2/tuna/github/tools/phase_map/high_resolution.py"", line 112, in __init__\r\n    ffa_unwrapped = self.unwrapped_phase_map )\r\n  File ""/home/nix/cloud_essential2/tuna/github/tools/models/parabola.py"", line 80, in fit_parabolic_model_by_Polynomial2D\r\n    o_parabola.create_model_map_by_Polynomial2D ( )\r\n  File ""/home/nix/cloud_essential2/tuna/github/tools/models/parabola.py"", line 46, in create_model_map_by_Polynomial2D\r\n    z = self.__ffa_unwrapped )\r\n  File ""/usr/lib64/python3.3/site-packages/astropy/modeling/fitting.py"", line 465, in __call__\r\n    full_output=True)\r\n  File ""/usr/lib64/python3.3/site-packages/scipy/optimize/minpack.py"", line 369, in leastsq\r\n    _check_func(\'leastsq\', \'Dfun\', Dfun, x0, args, n, (m,n))\r\n  File ""/usr/lib64/python3.3/site-packages/scipy/optimize/minpack.py"", line 30, in _check_func\r\n    raise TypeError(msg)\r\nTypeError: leastsq: there is a mismatch between the input and output shape of the \'Dfun\' argument \'_wrap_deriv\'.\r\n```\r\nAt least one other person on the user ML can reproduce these errors.'"
3593,61160681,mhvk,astrofrog,2015-03-13 17:55:11,2015-03-31 15:31:27,2015-03-31 10:55:00,closed,,v1.0.2,7,Affects-dev;Bug;testing,https://api.github.com/repos/astropy/astropy/issues/3593,b'BUG Numpy dev version has different allclose',"b'This PR partially addresses #3584, that with the numpy development version there are many test errors because the default for `atol` in `np.allclose` and `np.testing.assert_allclose` has changed. Almost all problems were in coordinates (hence, cc @eteq) and cosmology (hence, cc @aconley), where comparisons were often done on quantities rather than on values. Note that the changes are not necessarily complete -- but at least the tests pass.\r\n\r\nOf course, it is *logical* to compare on quantities, not values (except perhaps in `units` itself), so I changed the tests to use `Quantity` aware versions where there were problems, adding a new `quantity_allclose` to join the existing `assert_quantity_allclose` in the process (hence, cc @astrofrog). '"
3590,61043105,zblz,taldcroft,2015-03-13 11:28:38,2015-03-25 16:23:17,2015-03-25 16:23:09,closed,taldcroft,v1.0.2,9,Affects-release;Bug;table,https://api.github.com/repos/astropy/astropy/issues/3590,b'QTable cannot be pickled',"b""While pickling an `astropy.table.Table` works fine, QTables are unable to be pickled:\r\n\r\n```python\r\nIn [3]: from astropy.table import QTable\r\nIn [4]: t=QTable()\r\nIn [5]: t['a']=np.linspace(1,10)*u.m\r\nIn [6]: t['b']=np.linspace(1,10)*u.s\r\nIn [7]: pickle.dumps(t)\r\n---------------------------------------------------------------------------\r\nPicklingError                             Traceback (most recent call last)\r\n<ipython-input-7-f90063f6658b> in <module>()\r\n----> 1 pickle.dumps(t)\r\n\r\nPicklingError: Can't pickle <class 'weakref'>: attribute lookup weakref on builtins failed\r\n```\r\n\r\nThis is not a problem in general use, but prevents QTables from being used with multiprocessing, which pickles all the objects it passes to the function calls. \r\n"""
3586,60847903,mhvk,mdboom,2015-03-12 16:30:51,2015-03-24 15:43:30,2015-03-23 00:41:30,closed,mdboom,v1.0.2,9,Affects-release;Bug;units,https://api.github.com/repos/astropy/astropy/issues/3586,b'Use converters in Quantity ufuncs instead of just scaling (closes #2496)',"b'In `ufunc` evaluations, quantities are converted to the correct unit by multiplying with a constant.  This is correct in most cases, but not if an equivalency like `u.doppler` is in place, which can not be described by a single scale factor. As a result, with such equivalencies in place, the code is wrong (see #2496). Here, the `ufunc` mechanism is replaced such that instead of a constant scale factor, one uses an actual unit converter function -- this was in fact already used to calculate the scale factor, so should not lead to any slowdown.\r\ncc @mdboom, @astrofrog\r\n'"
3584,60708187,mhvk,mhvk,2015-03-11 18:36:45,2015-03-31 13:42:22,2015-03-31 13:42:22,closed,,,6,Affects-dev;Bug;Effort-medium;Package-novice;testing,https://api.github.com/repos/astropy/astropy/issues/3584,b'BUG lots of errors with numpy development',"b'If one buids under numpy-dev, there are *lots* of failures, many related to a change where `np.allclose` now uses `isclose` internally (https://github.com/numpy/numpy/pull/5590), which, if one uses quantities, means one gets `UnitsError` because `atol` is a number without units and gets added to the difference between the two arguments. This can be solved by adding `atol=0` to all instances (or `.value` to the quantities), but better may be to just use `assert_allclose_quantity`  in all but the `units` test cases.'"
3580,60506032,jwoillez,embray,2015-03-10 14:18:37,2015-04-13 19:43:09,2015-04-07 20:57:02,closed,embray,v1.0.2,13,Affects-release;Bug;io.fits,https://api.github.com/repos/astropy/astropy/issues/3580,"b""Problem with fits files using TDIMn = '(1,1)    '""",b'Starting with a (hopefully) failing test. Fix on its way...'
3574,60141757,ycopin,embray,2015-03-06 18:47:05,2015-05-12 19:50:43,2015-05-12 19:50:43,closed,,v1.0.2,3,Affects-release;Bug;modeling,https://api.github.com/repos/astropy/astropy/issues/3574,b'Polynomial model of null degree',"b'For sake of consistency, would it be possible to allow the `PolynomialModel` to be of degree 0, i.e. constant with a single coefficient? \r\n\r\nFurthermore, while I agree the high-order polynomials are instable, is there a technical reason for a maximum degree of 16? '"
3573,59861020,nden,embray,2015-03-04 21:01:26,2015-03-23 18:27:50,2015-03-23 18:27:50,closed,embray,v1.0.2,2,Affects-dev;Bug;modeling,https://api.github.com/repos/astropy/astropy/issues/3573,b'Fix typo in exception name',"b""This perhaps doesn't need testing."""
3566,59667439,taldcroft,embray,2015-03-03 16:33:17,2015-03-04 20:42:37,2015-03-04 20:42:37,closed,taldcroft,v1.0.1,0,Affects-release;Bug;io.ascii,https://api.github.com/repos/astropy/astropy/issues/3566,b'Fix two problems in commented_header reader/writer',"b""This fixes two problems with the `io.ascii` `commented_header` format:\r\n\r\n- The reader was leaving the initial comment line which defines the column names in the output `comments` list (in `t.meta['comments']`).  This line is part of the table definition and is not a comment line.  Leaving it there makes the table not round-trip back when written out.\r\n- For the writer there is a problem when `comment=False` is supplied, because for this particular format a specification of the comment character is *required* in order to write the column names header line (#3562).  Fixing this in a fully general way would require a new parameter or else assuming a default for the comment character.  Instead this PR just issues an informative exception telling users to remove the `meta['comments']` in order to work around this.\r\n\r\nCloses #3562."""
3565,59648294,taldcroft,embray,2015-03-03 14:25:01,2015-03-04 20:40:33,2015-03-04 20:40:32,closed,taldcroft,v1.0.1,0,Affects-release;Bug;table,https://api.github.com/repos/astropy/astropy/issues/3565,b'Fix type names in incompatible stack error message',b'Noted in #2444.'
3562,59514797,mrkite92,embray,2015-03-02 17:39:31,2015-03-04 20:42:37,2015-03-04 20:42:37,closed,,v1.0.1,4,Affects-release;Bug;io.ascii,https://api.github.com/repos/astropy/astropy/issues/3562,"b""astropy.io.ascii.write: comment=False parameter yields an error with format=''commented_header'""","b'Hi Astropy gurus,\r\n\r\nUsing the latest 1.0 release, I experience the following:\r\n- I read data from an ascii file, format=\'commented_header\'\r\n- I add some_columns, with indexes all null. Then, the header is updated.\r\n- I write the resulting table in another ascii file, format=\'commented_header\'\r\n- the original header is written in this resulting table as comment just after the new commented header. This is quite unfortunate, as TOPCAT is unable to properly manage it, then the header is lost and all columns appear as ""coln\'\r\n- using the option comment=False to write the table yields this error:\r\n\r\nTraceback (most recent call last):\r\n  File ""/Applications/PyCharm CE.app/Contents/helpers/pydev/pydevd.py"", line 2222, in <module>\r\n    globals = debugger.run(setup[\'file\'], None, None)\r\n  File ""/Applications/PyCharm CE.app/Contents/helpers/pydev/pydevd.py"", line 1648, in run\r\n    pydev_imports.execfile(file, globals, locals)  # execute the script\r\n  File ""/Users/marquett/PycharmProjects/DGDF2014/match_blue.py"", line 254, in <module>\r\n    ascii.write(blue_data, blue_file[:-3] + \'calib.dat\', format=\'commented_header\', comment=False)\r\n  File ""/opt/local/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/astropy/io/ascii/ui.py"", line 443, in write\r\n    writer.write(table, output)\r\n  File ""/opt/local/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/astropy/io/ascii/fastbasic.py"", line 234, in write\r\n    self._write(table, output, {}, header_output=\'comment\')\r\n  File ""/opt/local/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/astropy/io/ascii/fastbasic.py"", line 138, in _write\r\n    writer.write(output, header_output, output_types)\r\n  File ""astropy/io/ascii/cparser.pyx"", line 952, in astropy.io.ascii.cparser.FastWriter.write (astropy/io/ascii/cparser.c:17215)\r\n  File ""astropy/io/ascii/cparser.pyx"", line 927, in astropy.io.ascii.cparser.FastWriter._write_header (astropy/io/ascii/cparser.c:16557)\r\nTypeError: expected a character buffer object\r\n\r\nThen, it seems there is no way no to write this comment, as this original header is fully useless.\r\n\r\nAny hint welcome,\r\nCheers,\r\nJB\r\n '"
3561,59440178,telegraphic,embray,2015-03-02 05:25:30,2015-03-28 21:03:20,2015-03-28 21:03:18,closed,embray,v1.0.2,8,Affects-release;Bug;io.fits,https://api.github.com/repos/astropy/astropy/issues/3561,b'Data mismatch when converting FITS random group data to binary table',"b'Hi -- was trying to convert a FITS random group into a binary table, and I went a bit crazy because the data in wasn\'t the same as the data out.\r\n\r\nHere\'s a script that will reproduce what I was seeing (it will wget a small file from the fits registry):\r\n\r\n``` python\r\nimport os\r\nfrom astropy.io import fits as pf\r\nimport numpy as np\r\n\r\nfilename_out = ""test_bin.fits""\r\n\r\n# Load random group data\r\n# here\'s one from the fits registry that\'s pretty small:\r\n# Shape of DATA is (7956, 1, 1, 1, 4, 3)\r\nos.system(""wget http://fits.gsfc.nasa.gov/samples/DDTSUVDATA.fits"")\r\na = pf.open(\'DDTSUVDATA.fits\')\r\nd_in = a[0].data[""DATA""]\r\n\r\n# Convert to column\r\nc_a =  pf.Column(name=\'TEST\', array=d_in, dim=""(3,4,1,1,1)"", format=""12E"")\r\nhdu = pf.BinTableHDU.from_columns([c_a])\r\n\r\n# Remove output files\r\nif os.path.exists(filename_out):\r\n    os.remove(filename_out)\r\n\r\n# Write to a file, then reload the file\r\nhdu.writeto(filename_out)\r\nhdul_b = pf.open(filename_out)\r\nd_out = hdul_b[1].data[""TEST""]\r\n\r\n# Compare the two files\r\nprint d_in.shape, d_in.dtype\r\nprint d_out.shape, d_in.dtype\r\n\r\nprint d_in[0]\r\nprint d_out[0]\r\n\r\nprint np.allclose(d_in[0], d_out[0])\r\n```\r\n\r\nThe print outputs are:\r\n\r\n```\r\n(7956, 1, 1, 1, 4, 3) >f4\r\n(7956, 1, 1, 1, 4, 3) >f4\r\n[[[[[ 12.4308672    0.56860745   3.99993873]\r\n    [ 12.74043655   0.31398511   3.99993873]\r\n    [  0.           0.           3.99993873]\r\n    [  0.           0.           3.99993873]]]]]\r\n[[[[[ -3.13737987e+13   7.20336838e+01              nan]\r\n    [ -7.43180390e+12  -2.16078206e-14              nan]\r\n    [  0.00000000e+00   0.00000000e+00              nan]\r\n    [  0.00000000e+00   0.00000000e+00              nan]]]]]\r\nFalse\r\n```\r\n\r\nIt seems to be related with endianess, as if I change the line to say \r\n\r\n`d_in = a[0].data[""DATA""].astype(\'<f4\')`\r\n\r\neverything is dandy.\r\n\r\nI would have thought that this kind of thing should be handled transparently?\r\n\r\nPS: I\'m running Python 2.7.6 on Mac yosemite, with astropy 1.0, numpy 1.9.2.'"
3557,59393451,vinayak-mehta,mdboom,2015-03-01 12:01:55,2015-03-27 19:01:28,2015-03-27 19:01:16,closed,mdboom,v1.1.0,4,Affects-release;Bug;Ready-for-final-review;wcs,https://api.github.com/repos/astropy/astropy/issues/3557,b'Fixes issue #3551: Improve documentation of WCS.calc_footprint',b'#3551 '
3546,58765712,mdboom,embray,2015-02-24 16:44:24,2015-03-06 20:14:22,2015-03-06 19:05:50,closed,mdboom,v1.0.1,14,Affects-release;Bug;io.ascii,https://api.github.com/repos/astropy/astropy/issues/3546,b'Fix segfault when column header is skipped',b'Hopefully addresses #3545.'
3545,58744692,martynbristow,mdboom,2015-02-24 14:23:12,2015-03-06 19:05:39,2015-03-06 19:05:39,closed,mdboom,v1.0.1,6,Bug;io.ascii,https://api.github.com/repos/astropy/astropy/issues/3545,b'astropy.io.ascii.read - segmentation fault when using names',"b""Hi\r\nI'm trying to run some code which worked on a previous astropy version but now won't work\r\nI'm running astropy 1.0 on python 2.6.6\r\nI'm trying to read a 3 line file and I get a Segmentation Fault.\r\nThis ONLY occurs it seems when I use the names keyword.\r\n\r\n![dump](https://cloud.githubusercontent.com/assets/3476872/6351093/a4256044-bc30-11e4-8231-94a586785a86.png)\r\n"""
3542,58664081,nden,nden,2015-02-23 22:58:07,2015-04-08 17:47:25,2015-04-08 17:29:34,closed,nden,v1.0.2,9,Affects-release;Bug;modeling,https://api.github.com/repos/astropy/astropy/issues/3542,"b""Compound models don't use custom_inverse on compound submodels""","b""Here's an example which illustrates the problem:\r\n```\r\npoly = models.Polynomial1D(1,  c0=1, c1=2)\r\nscale = models.Scale(1)\r\nshift = models.Shift(1)\r\n\r\nmodel1 = poly | scale\r\nmodel1.inverse = poly\r\nmodel2 = shift | model1\r\n```\r\n\r\n`model2.inverse` tries to traverse the tree of models looking for the inverse of each individual model and raises an error instead of using the custom inverse `model1.inverse`.\r\n"""
3541,58643382,josePhoenix,embray,2015-02-23 20:30:41,2015-03-09 17:59:27,2015-03-09 14:46:17,closed,,v1.0.1,31,astropy-helpers;Bug,https://api.github.com/repos/astropy/astropy/issues/3541,"b""Can't install astropy automatically as a dependency""","b'Since Astropy 1.0 was released, I\'ve been seeing problems installing [POPPY](https://github.com/mperrin/poppy) and [WebbPSF](https://github.com/mperrin/webbpsf) with pip. (It\'s possible this was true with the preceding Astropy release as well. The last time I went through this process of installing ""from scratch"" was Fall 2014.) They both refer to Astropy through `setup_requires` and `install_requires` in their `setup.py`, and the error seems to implicate astropy in both cases. (It could be something to do with the helpers/package template too, but I don\'t know enough to say.)\r\n\r\nThe relevant error: `distutils.errors.DistutilsError: Setup script exited with error: [Errno 2] No such file or directory: \'poppy/_compiler.c\'` (or likewise with s/poppy/webbpsf/)\r\n\r\n## Output from `pip install poppy`\r\n\r\n```\r\n(test032)15:22:26 kitsune:~ jlong$ pip install poppy\r\nDownloading/unpacking poppy\r\n  Downloading poppy-0.3.4.tar.gz (1.8MB): 1.8MB downloaded\r\n  Running setup.py (path:/Users/jlong/.virtualenvs/test032/build/poppy/setup.py) egg_info for package poppy\r\n    Searching for astropy\r\n    Reading https://pypi.python.org/simple/astropy/\r\n    Reading http://astropy.org\r\n    Best match: astropy 1.0\r\n    Downloading https://pypi.python.org/packages/source/a/astropy/astropy-1.0.tar.gz#md5=1f15b51eb7cbad3345a34770c87ef906\r\n    Processing astropy-1.0.tar.gz\r\n    Writing /var/folders/2t/m92rpkyn2ps064ffwv0qxrbm0001dr/T/easy_install-Y6iJZH/astropy-1.0/setup.cfg\r\n    Running astropy-1.0/setup.py -q bdist_egg --dist-dir /var/folders/2t/m92rpkyn2ps064ffwv0qxrbm0001dr/T/easy_install-Y6iJZH/astropy-1.0/egg-dist-tmp-dbr7m7\r\n    Traceback (most recent call last):\r\n      File ""<string>"", line 17, in <module>\r\n      File ""/Users/jlong/.virtualenvs/test032/build/poppy/setup.py"", line 122, in <module>\r\n        **package_info\r\n      File ""/Users/jlong/homebrew/Cellar/python/2.7.9/Frameworks/Python.framework/Versions/2.7/lib/python2.7/distutils/core.py"", line 111, in setup\r\n        _setup_distribution = dist = klass(attrs)\r\n      File ""/Users/jlong/.virtualenvs/test032/lib/python2.7/site-packages/setuptools/dist.py"", line 260, in __init__\r\n        self.fetch_build_eggs(attrs.pop(\'setup_requires\'))\r\n      File ""/Users/jlong/.virtualenvs/test032/lib/python2.7/site-packages/setuptools/dist.py"", line 285, in fetch_build_eggs\r\n        replace_conflicting=True\r\n      File ""/Users/jlong/.virtualenvs/test032/lib/python2.7/site-packages/pkg_resources.py"", line 631, in resolve\r\n        dist = best[req.key] = env.best_match(req, ws, installer)\r\n      File ""/Users/jlong/.virtualenvs/test032/lib/python2.7/site-packages/pkg_resources.py"", line 871, in best_match\r\n        return self.obtain(req, installer)\r\n      File ""/Users/jlong/.virtualenvs/test032/lib/python2.7/site-packages/pkg_resources.py"", line 883, in obtain\r\n        return installer(requirement)\r\n      File ""/Users/jlong/.virtualenvs/test032/lib/python2.7/site-packages/setuptools/dist.py"", line 335, in fetch_build_egg\r\n        return cmd.easy_install(req)\r\n      File ""/Users/jlong/.virtualenvs/test032/lib/python2.7/site-packages/setuptools/command/easy_install.py"", line 595, in easy_install\r\n        return self.install_item(spec, dist.location, tmpdir, deps)\r\n      File ""/Users/jlong/.virtualenvs/test032/lib/python2.7/site-packages/setuptools/command/easy_install.py"", line 625, in install_item\r\n        dists = self.install_eggs(spec, download, tmpdir)\r\n      File ""/Users/jlong/.virtualenvs/test032/lib/python2.7/site-packages/setuptools/command/easy_install.py"", line 822, in install_eggs\r\n        return self.build_and_install(setup_script, setup_base)\r\n      File ""/Users/jlong/.virtualenvs/test032/lib/python2.7/site-packages/setuptools/command/easy_install.py"", line 1028, in build_and_install\r\n        self.run_setup(setup_script, setup_base, args)\r\n      File ""/Users/jlong/.virtualenvs/test032/lib/python2.7/site-packages/setuptools/command/easy_install.py"", line 1016, in run_setup\r\n        raise DistutilsError(""Setup script exited with %s"" % (v.args[0],))\r\n    distutils.errors.DistutilsError: Setup script exited with error: [Errno 2] No such file or directory: \'poppy/_compiler.c\'\r\n    Complete output from command python setup.py egg_info:\r\n    Searching for astropy\r\n\r\nReading https://pypi.python.org/simple/astropy/\r\n\r\nReading http://astropy.org\r\n\r\nBest match: astropy 1.0\r\n\r\nDownloading https://pypi.python.org/packages/source/a/astropy/astropy-1.0.tar.gz#md5=1f15b51eb7cbad3345a34770c87ef906\r\n\r\nProcessing astropy-1.0.tar.gz\r\n\r\nWriting /var/folders/2t/m92rpkyn2ps064ffwv0qxrbm0001dr/T/easy_install-Y6iJZH/astropy-1.0/setup.cfg\r\n\r\nRunning astropy-1.0/setup.py -q bdist_egg --dist-dir /var/folders/2t/m92rpkyn2ps064ffwv0qxrbm0001dr/T/easy_install-Y6iJZH/astropy-1.0/egg-dist-tmp-dbr7m7\r\n\r\nTraceback (most recent call last):\r\n\r\n  File ""<string>"", line 17, in <module>\r\n\r\n  File ""/Users/jlong/.virtualenvs/test032/build/poppy/setup.py"", line 122, in <module>\r\n\r\n    **package_info\r\n\r\n  File ""/Users/jlong/homebrew/Cellar/python/2.7.9/Frameworks/Python.framework/Versions/2.7/lib/python2.7/distutils/core.py"", line 111, in setup\r\n\r\n    _setup_distribution = dist = klass(attrs)\r\n\r\n  File ""/Users/jlong/.virtualenvs/test032/lib/python2.7/site-packages/setuptools/dist.py"", line 260, in __init__\r\n\r\n    self.fetch_build_eggs(attrs.pop(\'setup_requires\'))\r\n\r\n  File ""/Users/jlong/.virtualenvs/test032/lib/python2.7/site-packages/setuptools/dist.py"", line 285, in fetch_build_eggs\r\n\r\n    replace_conflicting=True\r\n\r\n  File ""/Users/jlong/.virtualenvs/test032/lib/python2.7/site-packages/pkg_resources.py"", line 631, in resolve\r\n\r\n    dist = best[req.key] = env.best_match(req, ws, installer)\r\n\r\n  File ""/Users/jlong/.virtualenvs/test032/lib/python2.7/site-packages/pkg_resources.py"", line 871, in best_match\r\n\r\n    return self.obtain(req, installer)\r\n\r\n  File ""/Users/jlong/.virtualenvs/test032/lib/python2.7/site-packages/pkg_resources.py"", line 883, in obtain\r\n\r\n    return installer(requirement)\r\n\r\n  File ""/Users/jlong/.virtualenvs/test032/lib/python2.7/site-packages/setuptools/dist.py"", line 335, in fetch_build_egg\r\n\r\n    return cmd.easy_install(req)\r\n\r\n  File ""/Users/jlong/.virtualenvs/test032/lib/python2.7/site-packages/setuptools/command/easy_install.py"", line 595, in easy_install\r\n\r\n    return self.install_item(spec, dist.location, tmpdir, deps)\r\n\r\n  File ""/Users/jlong/.virtualenvs/test032/lib/python2.7/site-packages/setuptools/command/easy_install.py"", line 625, in install_item\r\n\r\n    dists = self.install_eggs(spec, download, tmpdir)\r\n\r\n  File ""/Users/jlong/.virtualenvs/test032/lib/python2.7/site-packages/setuptools/command/easy_install.py"", line 822, in install_eggs\r\n\r\n    return self.build_and_install(setup_script, setup_base)\r\n\r\n  File ""/Users/jlong/.virtualenvs/test032/lib/python2.7/site-packages/setuptools/command/easy_install.py"", line 1028, in build_and_install\r\n\r\n    self.run_setup(setup_script, setup_base, args)\r\n\r\n  File ""/Users/jlong/.virtualenvs/test032/lib/python2.7/site-packages/setuptools/command/easy_install.py"", line 1016, in run_setup\r\n\r\n    raise DistutilsError(""Setup script exited with %s"" % (v.args[0],))\r\n\r\ndistutils.errors.DistutilsError: Setup script exited with error: [Errno 2] No such file or directory: \'poppy/_compiler.c\'\r\n\r\n----------------------------------------\r\nCleaning up...\r\nCommand python setup.py egg_info failed with error code 1 in /Users/jlong/.virtualenvs/test032/build/poppy\r\nStoring debug log for failure in /Users/jlong/.pip/pip.log\r\n```\r\n\r\n## Output from `pip install webbpsf`\r\n\r\n```\r\n(test032)15:22:48 kitsune:~ jlong$ pip install webbpsf\r\nDownloading/unpacking webbpsf\r\n  Downloading webbpsf-0.3.2.tar.gz (15.6MB): 15.6MB downloaded\r\n  Running setup.py (path:/Users/jlong/.virtualenvs/test032/build/webbpsf/setup.py) egg_info for package webbpsf\r\n    Searching for astropy\r\n    Reading https://pypi.python.org/simple/astropy/\r\n    Reading http://astropy.org\r\n    Best match: astropy 1.0\r\n    Downloading https://pypi.python.org/packages/source/a/astropy/astropy-1.0.tar.gz#md5=1f15b51eb7cbad3345a34770c87ef906\r\n    Processing astropy-1.0.tar.gz\r\n    Writing /var/folders/2t/m92rpkyn2ps064ffwv0qxrbm0001dr/T/easy_install-3rxciS/astropy-1.0/setup.cfg\r\n    Running astropy-1.0/setup.py -q bdist_egg --dist-dir /var/folders/2t/m92rpkyn2ps064ffwv0qxrbm0001dr/T/easy_install-3rxciS/astropy-1.0/egg-dist-tmp-FL8U7K\r\n    Traceback (most recent call last):\r\n      File ""<string>"", line 17, in <module>\r\n      File ""/Users/jlong/.virtualenvs/test032/build/webbpsf/setup.py"", line 122, in <module>\r\n        **package_info\r\n      File ""/Users/jlong/homebrew/Cellar/python/2.7.9/Frameworks/Python.framework/Versions/2.7/lib/python2.7/distutils/core.py"", line 111, in setup\r\n        _setup_distribution = dist = klass(attrs)\r\n      File ""/Users/jlong/.virtualenvs/test032/lib/python2.7/site-packages/setuptools/dist.py"", line 260, in __init__\r\n        self.fetch_build_eggs(attrs.pop(\'setup_requires\'))\r\n      File ""/Users/jlong/.virtualenvs/test032/lib/python2.7/site-packages/setuptools/dist.py"", line 285, in fetch_build_eggs\r\n        replace_conflicting=True\r\n      File ""/Users/jlong/.virtualenvs/test032/lib/python2.7/site-packages/pkg_resources.py"", line 631, in resolve\r\n        dist = best[req.key] = env.best_match(req, ws, installer)\r\n      File ""/Users/jlong/.virtualenvs/test032/lib/python2.7/site-packages/pkg_resources.py"", line 871, in best_match\r\n        return self.obtain(req, installer)\r\n      File ""/Users/jlong/.virtualenvs/test032/lib/python2.7/site-packages/pkg_resources.py"", line 883, in obtain\r\n        return installer(requirement)\r\n      File ""/Users/jlong/.virtualenvs/test032/lib/python2.7/site-packages/setuptools/dist.py"", line 335, in fetch_build_egg\r\n        return cmd.easy_install(req)\r\n      File ""/Users/jlong/.virtualenvs/test032/lib/python2.7/site-packages/setuptools/command/easy_install.py"", line 595, in easy_install\r\n        return self.install_item(spec, dist.location, tmpdir, deps)\r\n      File ""/Users/jlong/.virtualenvs/test032/lib/python2.7/site-packages/setuptools/command/easy_install.py"", line 625, in install_item\r\n        dists = self.install_eggs(spec, download, tmpdir)\r\n      File ""/Users/jlong/.virtualenvs/test032/lib/python2.7/site-packages/setuptools/command/easy_install.py"", line 822, in install_eggs\r\n        return self.build_and_install(setup_script, setup_base)\r\n      File ""/Users/jlong/.virtualenvs/test032/lib/python2.7/site-packages/setuptools/command/easy_install.py"", line 1028, in build_and_install\r\n        self.run_setup(setup_script, setup_base, args)\r\n      File ""/Users/jlong/.virtualenvs/test032/lib/python2.7/site-packages/setuptools/command/easy_install.py"", line 1016, in run_setup\r\n        raise DistutilsError(""Setup script exited with %s"" % (v.args[0],))\r\n    distutils.errors.DistutilsError: Setup script exited with error: [Errno 2] No such file or directory: \'webbpsf/_compiler.c\'\r\n    Complete output from command python setup.py egg_info:\r\n    Searching for astropy\r\n\r\nReading https://pypi.python.org/simple/astropy/\r\n\r\nReading http://astropy.org\r\n\r\nBest match: astropy 1.0\r\n\r\nDownloading https://pypi.python.org/packages/source/a/astropy/astropy-1.0.tar.gz#md5=1f15b51eb7cbad3345a34770c87ef906\r\n\r\nProcessing astropy-1.0.tar.gz\r\n\r\nWriting /var/folders/2t/m92rpkyn2ps064ffwv0qxrbm0001dr/T/easy_install-3rxciS/astropy-1.0/setup.cfg\r\n\r\nRunning astropy-1.0/setup.py -q bdist_egg --dist-dir /var/folders/2t/m92rpkyn2ps064ffwv0qxrbm0001dr/T/easy_install-3rxciS/astropy-1.0/egg-dist-tmp-FL8U7K\r\n\r\nTraceback (most recent call last):\r\n\r\n  File ""<string>"", line 17, in <module>\r\n\r\n  File ""/Users/jlong/.virtualenvs/test032/build/webbpsf/setup.py"", line 122, in <module>\r\n\r\n    **package_info\r\n\r\n  File ""/Users/jlong/homebrew/Cellar/python/2.7.9/Frameworks/Python.framework/Versions/2.7/lib/python2.7/distutils/core.py"", line 111, in setup\r\n\r\n    _setup_distribution = dist = klass(attrs)\r\n\r\n  File ""/Users/jlong/.virtualenvs/test032/lib/python2.7/site-packages/setuptools/dist.py"", line 260, in __init__\r\n\r\n    self.fetch_build_eggs(attrs.pop(\'setup_requires\'))\r\n\r\n  File ""/Users/jlong/.virtualenvs/test032/lib/python2.7/site-packages/setuptools/dist.py"", line 285, in fetch_build_eggs\r\n\r\n    replace_conflicting=True\r\n\r\n  File ""/Users/jlong/.virtualenvs/test032/lib/python2.7/site-packages/pkg_resources.py"", line 631, in resolve\r\n\r\n    dist = best[req.key] = env.best_match(req, ws, installer)\r\n\r\n  File ""/Users/jlong/.virtualenvs/test032/lib/python2.7/site-packages/pkg_resources.py"", line 871, in best_match\r\n\r\n    return self.obtain(req, installer)\r\n\r\n  File ""/Users/jlong/.virtualenvs/test032/lib/python2.7/site-packages/pkg_resources.py"", line 883, in obtain\r\n\r\n    return installer(requirement)\r\n\r\n  File ""/Users/jlong/.virtualenvs/test032/lib/python2.7/site-packages/setuptools/dist.py"", line 335, in fetch_build_egg\r\n\r\n    return cmd.easy_install(req)\r\n\r\n  File ""/Users/jlong/.virtualenvs/test032/lib/python2.7/site-packages/setuptools/command/easy_install.py"", line 595, in easy_install\r\n\r\n    return self.install_item(spec, dist.location, tmpdir, deps)\r\n\r\n  File ""/Users/jlong/.virtualenvs/test032/lib/python2.7/site-packages/setuptools/command/easy_install.py"", line 625, in install_item\r\n\r\n    dists = self.install_eggs(spec, download, tmpdir)\r\n\r\n  File ""/Users/jlong/.virtualenvs/test032/lib/python2.7/site-packages/setuptools/command/easy_install.py"", line 822, in install_eggs\r\n\r\n    return self.build_and_install(setup_script, setup_base)\r\n\r\n  File ""/Users/jlong/.virtualenvs/test032/lib/python2.7/site-packages/setuptools/command/easy_install.py"", line 1028, in build_and_install\r\n\r\n    self.run_setup(setup_script, setup_base, args)\r\n\r\n  File ""/Users/jlong/.virtualenvs/test032/lib/python2.7/site-packages/setuptools/command/easy_install.py"", line 1016, in run_setup\r\n\r\n    raise DistutilsError(""Setup script exited with %s"" % (v.args[0],))\r\n\r\ndistutils.errors.DistutilsError: Setup script exited with error: [Errno 2] No such file or directory: \'webbpsf/_compiler.c\'\r\n\r\n----------------------------------------\r\nCleaning up...\r\nCommand python setup.py egg_info failed with error code 1 in /Users/jlong/.virtualenvs/test032/build/webbpsf\r\nStoring debug log for failure in /Users/jlong/.pip/pip.log\r\n```'"
3538,58564152,Cadair,embray,2015-02-23 09:51:59,2015-03-04 20:29:11,2015-03-04 20:29:09,closed,,v1.0.1,4,Affects-release;Bug;units,https://api.github.com/repos/astropy/astropy/issues/3538,b'assert_quantity_allclose breaks if you pass a constant',"b""```python\r\nassert_quantity_allclose(astropy.constants.c.to(u.m/u.s), astropy.constants.c)\r\n---------------------------------------------------------------------------\r\nTypeError                                 Traceback (most recent call last)\r\n<ipython-input-6-fda44ae261fc> in <module>()\r\n----> 1 assert_quantity_allclose(astropy.constants.c.to(u.m/u.s), astropy.constants.c)\r\n\r\n/usr/lib/python2.7/site-packages/astropy/tests/helper.pyc in assert_quantity_allclose(actual, desired, rtol, atol, err_msg, verbose)\r\n    629     actual = u.Quantity(actual, subok=True, copy=False)\r\n    630 \r\n--> 631     desired = u.Quantity(desired, subok=True, copy=False)\r\n    632     try:\r\n    633         desired = desired.to(actual.unit)\r\n\r\nTypeError: __init__() got an unexpected keyword argument 'subok'\r\n```\r\n\r\nping @astrofrog """
3537,58563963,Cadair,embray,2015-02-23 09:50:09,2015-03-04 21:13:41,2015-03-04 20:28:47,closed,,v1.0.1,9,Affects-release;Bug;constants;units,https://api.github.com/repos/astropy/astropy/issues/3537,b'Converting a constant to a Quantity breaks __repr__',"b""```python\r\nimport astropy.units as u\r\n\r\nimport astropy.constants\r\n\r\nu.Quantity(astropy.constants.c)\r\n/usr/lib/python2.7/site-packages/IPython/core/formatters.py:239: FormatterWarning: Exception in text/latex formatter: 'unicode' object has no attribute '_repr_latex_'\r\n  FormatterWarning,\r\nOut[3]: <repr(<astropy.units.quantity.Quantity at 0x7fba9bb288c0>) failed: AttributeError: 'Quantity' object has no '_unitstr' member>\r\n```"""
3531,58373220,calders,mdboom,2015-02-20 16:09:45,2015-02-21 19:02:02,2015-02-21 19:02:02,closed,mdboom,v1.0.1,2,Bug;io.votable,https://api.github.com/repos/astropy/astropy/issues/3531,"b""[astropy.io.votable.tree] Link class doesn't provide name attribute""","b'The VOTable 1.2 standard (ref.: http://www.ivoa.net/documents/VOTable/20091130/REC-VOTable-1.2.html#ToC22) describes that the LINK tag can contain a ""name"" attribute:\r\n\r\n>  In addition to the referencing href attribute and to the naming name and ID attributes (see name and ID), [...]\r\n\r\nIt seems not supported by astropy:\r\n\r\n>  AttributeError: \'Link\' object has no attribute \'name\''"
3530,58372411,mhvk,mhvk,2015-02-20 16:03:41,2015-02-24 15:21:21,2015-02-24 15:21:16,closed,,v1.0.1,9,Affects-release;Bug;time,https://api.github.com/repos/astropy/astropy/issues/3530,b'Define Time.__bool__ and add tests (closes #3520)',b'This ensures any time object evaluates to `True` unless it is empty (see #3520). Also adds tests for both `__bool__` and `__len__`.'
3520,58170941,mtbannister,mhvk,2015-02-19 05:55:16,2015-02-24 15:21:23,2015-02-24 15:21:23,closed,,,8,Affects-release;Bug;time,https://api.github.com/repos/astropy/astropy/issues/3520,b'time.Time __bool__ and __len__ unexpected behaviour',"b'I noticed this behaviour of time.Time in 0.4.4 and was able to replicate it in 1.0:\r\n````python\r\n>>> t = time.Time(\'2015-01-01\')\r\n>>> len(t)\r\nTraceback (most recent call last):\r\n  File ""<stdin>"", line 1, in <module>\r\n  File ""/Users/michele/Library/Enthought/Canopy_64bit/User/lib/python2.7/site-packages/astropy/time/core.py"", line 940, in __len__\r\n    return len(self.jd1)\r\nTypeError: object of type \'float\' has no len()\r\n````\r\nFor behaviour consistent with the standard Python `datetime.datetime`, `len(t)` should instead throw an `AttributeError`.\r\n\r\nThis further comes in when one tries:\r\n````python\r\n>>> if t:\r\n...     print(t)\r\nTraceback (most recent call last):\r\n  File ""<stdin>"", line 1, in <module>\r\n  File ""/Users/michele/Library/Enthought/Canopy_64bit/User/lib/python2.7/site-packages/astropy/time/core.py"", line 940, in __len__\r\n    return len(self.jd1)\r\nTypeError: object of type \'float\' has no len()\r\n````\r\n\r\nFor behaviour consistent with `datetime`, `bool(t)` for a `time.Time` would always return `True`.'"
3506,57747947,astrofrog,eteq,2015-02-15 21:55:22,2015-02-17 19:39:29,2015-02-16 13:18:40,closed,,v1.0.0,8,Affects-dev;Bug;coordinates,https://api.github.com/repos/astropy/astropy/issues/3506,b'Bug in Angle.to_string with Numpy 1.6',"b""Since we are still supporting Numpy 1.6, here is a bug that occurs with that version:\r\n\r\n```\r\n>>> from astropy.coordinates import Angle\r\n>>> a = Angle(3.3333333, unit='deg')\r\n>>> a.to_string()\r\nu'3d19m59.9999s'\r\n>>> a = Angle([3.3333333,3.3333333], unit='deg')\r\n>>> a.to_string()\r\narray([u'3d19m59.', u'3d19m59.'], \r\n      dtype='<U8')\r\n```\r\n\r\nNote that when the angle is an array, the strings get truncated to 8 characters. I think this is a bug in ``np.vectorize`` but we should work around it since we support that Numpy version."""
3499,57535714,bsipocz,eteq,2015-02-12 23:20:30,2016-02-12 20:00:53,2016-02-12 20:00:53,closed,,,16,Bug;testing,https://api.github.com/repos/astropy/astropy/issues/3499,b'v1.0rc2 testing errors in modeling during second test run',"b""~~I got errors on all the systems I tested when testing with the option ``remote_data=True``~~ unrelated to ``remote_data``\r\n\r\n```\r\n========================================================================================= ERRORS =========================================================================================\r\n_________________________________________________________________ ERROR collecting astropy/modeling/tests/test_models.py _________________________________________________________________\r\n_pytest.runner:137: in __init__\r\n>   ???\r\n_pytest.main:418: in _memocollect\r\n>   ???\r\n_pytest.main:295: in _memoizedcall\r\n>   ???\r\n_pytest.main:418: in <lambda>\r\n>   ???\r\n_pytest.python:527: in collect\r\n>   ???\r\n_pytest.python:321: in collect\r\n>   ???\r\n_pytest.python:333: in makeitem\r\n>   ???\r\n_pytest.main:161: in call_matching_hooks\r\n>   ???\r\n_pytest.core:380: in pcall\r\n>   ???\r\n_pytest.core:387: in _docall\r\n>   ???\r\n_pytest.core:288: in execute\r\n>   ???\r\n_pytest.python:227: in pytest_pycollect_makeitem\r\n>   ???\r\n_pytest.python:349: in _genfunctions\r\n>   ???\r\n_pytest.core:380: in pcall\r\n>   ???\r\n_pytest.core:387: in _docall\r\n>   ???\r\n_pytest.core:288: in execute\r\n>   ???\r\n_pytest.python:145: in pytest_generate_tests\r\n>   ???\r\n_pytest.python:817: in parametrize\r\n>   ???\r\n_pytest.python:698: in setmulti\r\n>   ???\r\n_pytest.python:681: in _checkargnotcontained\r\n>   ???\r\nE   ValueError: duplicate u'model_class'\r\n_________________________________________________________________ ERROR collecting astropy/modeling/tests/test_models.py _________________________________________________________________\r\n_pytest.runner:137: in __init__\r\n>   ???\r\n_pytest.main:418: in _memocollect\r\n>   ???\r\n_pytest.main:295: in _memoizedcall\r\n>   ???\r\n_pytest.main:418: in <lambda>\r\n>   ???\r\n_pytest.python:527: in collect\r\n>   ???\r\n_pytest.python:321: in collect\r\n>   ???\r\n_pytest.python:333: in makeitem\r\n>   ???\r\n_pytest.main:161: in call_matching_hooks\r\n>   ???\r\n_pytest.core:380: in pcall\r\n>   ???\r\n_pytest.core:387: in _docall\r\n>   ???\r\n_pytest.core:288: in execute\r\n>   ???\r\n_pytest.python:227: in pytest_pycollect_makeitem\r\n>   ???\r\n_pytest.python:349: in _genfunctions\r\n>   ???\r\n_pytest.core:380: in pcall\r\n>   ???\r\n_pytest.core:387: in _docall\r\n>   ???\r\n_pytest.core:288: in execute\r\n>   ???\r\n_pytest.python:145: in pytest_generate_tests\r\n>   ???\r\n_pytest.python:817: in parametrize\r\n>   ???\r\n_pytest.python:698: in setmulti\r\n>   ???\r\n_pytest.python:681: in _checkargnotcontained\r\n>   ???\r\nE   ValueError: duplicate u'model_class'\r\n```\r\n\r\nOne of the full logs: https://gist.github.com/bsipocz/7880e511664a5c30abd1"""
3491,57495232,mdboom,astrofrog,2015-02-12 17:54:14,2016-05-31 15:52:53,2015-02-12 22:42:50,closed,mdboom,v1.0.0,2,Bug;config;no-changelog-entry-needed,https://api.github.com/repos/astropy/astropy/issues/3491,b'Fix #3490: Fix faulty warning about changed config file',b'This bug was introduced in d6b11fcd0cac16781940c0c4d08e0f09c733ce95 in an attempt to reduce unnecessarily overwriting the config file.'
3490,57492155,astrofrog,mdboom,2015-02-12 17:30:27,2015-02-12 22:42:58,2015-02-12 22:42:58,closed,mdboom,v1.0.0,2,Bug;config,https://api.github.com/repos/astropy/astropy/issues/3490,b'1.0rc2: ConfigurationChangedWarning',"b""When running the tests for 1.0rc2 I get the following warning:\r\n\r\n```\r\nWARNING: ConfigurationChangedWarning: The configuration options in astropy 1.0rc2 may have changed, your configuration file was not updated in order to preserve local changes.  A new configuration template has been saved to '/Users/tom/.astropy/config/astropy.1.0rc2.cfg'. [astropy.config.configuration]\r\n```\r\n\r\nHowever, the ``astropy.cfg`` file is identical to the ``astropy.1.0rc2.cfg`` one that is generated:\r\n\r\n```\r\nMD5 (astropy.1.0rc2.cfg) = 95c4622670671d97b4bd17bf33166a4e\r\nMD5 (astropy.cfg) = 95c4622670671d97b4bd17bf33166a4e\r\n```\r\n\r\nso I don't understand why it thinks it has changed. Haven't had a chance to investigate yet.\r\n\r\ncc @mdboom"""
3481,57266627,andycasey,embray,2015-02-11 01:52:50,2015-03-05 00:30:04,2015-03-05 00:30:01,closed,embray,v1.0.1,6,Affects-release;Bug;modeling,https://api.github.com/repos/astropy/astropy/issues/3481,"b'Inheriting `bounds`, `fixed`, and `tied` properties for compound models'","b'Hi,\r\n\r\nI tried to find a discussion related to this previously, but I could not find one. Apologies if this has already been brought up before. This relates to the `modeling` package on `1.0rc1`.\r\n\r\nI am wondering if the `bounds`, `fixed`, and `tied` properties should be inherited from their parent models when a compound model is created. The parameter names get compiled together in a sensible way, but the `bounds`, `fixed`, and `tied` properties do not get passed on to the child.\r\n\r\nWhen I run this code on 1.0rc1:\r\n````\r\nfrom astropy.modeling import models\r\n\r\na = models.Gaussian1D(mean=1, stddev=0.2)\r\na.bounds[""stddev""] = (0, 0.3)\r\na.fixed[""mean""] = True\r\n\r\nb = models.Gaussian1D(mean=2, stddev=0.5)\r\nb.fixed[""mean""] = True\r\n\r\ncombined = a * b\r\n\r\nprint(""Before combination"")\r\nprint(a.bounds[""stddev""])\r\nprint(b.fixed[""mean""])\r\n\r\nprint(""After combination"")\r\nprint(combined.bounds[""stddev_0""])\r\nprint(combined.fixed[""mean_1""])\r\n\r\nprint(""Making sure they are not hiding.."")\r\nprint(combined.bounds)\r\nprint(combined.fixed)\r\n````\r\n\r\nI observe the following behaviour (spaced for clarity):\r\n````\r\nBefore combination\r\n(0, 0.3)\r\nTrue\r\n\r\nAfter combination\r\n(None, None)\r\nFalse\r\n\r\nMaking sure they are not hiding..\r\n{u\'mean_0\': (None, None), u\'amplitude_0\': (None, None), u\'stddev_1\': (None, None), u\'stddev_0\': (None, None), u\'amplitude_1\': (None, None), u\'mean_1\': (None, None)}\r\n{u\'mean_0\': False, u\'amplitude_0\': False, u\'stddev_1\': False, u\'stddev_0\': False, u\'amplitude_1\': False, u\'mean_1\': False}\r\n````\r\n\r\nIs this behaviour intentional for some deep, deep reason, or is it an oversight? At the moment my work-around is to re-apply the `bounds`, `fixed`, and `tied` behaviour to each compound model (which is frequent).\r\n\r\nThanks,\r\nAndy'"
3480,57260418,eteq,eteq,2015-02-11 00:30:29,2015-02-18 22:14:01,2015-02-18 00:55:51,closed,,v1.0.0,10,Affects-release;Bug;coordinates,https://api.github.com/repos/astropy/astropy/issues/3480,b'Fix array Angle _repr_latex_ to make IPython notebooks look nicer',"b""I've noticing for a while that array `coordinates.Angle` (and subclasses) don't render correctly in ipython notebooks.  Specifically, they look like this:\r\n![before](https://cloud.githubusercontent.com/assets/346587/6139506/a3607e54-b15a-11e4-92e2-d47441952be9.png)\r\n\r\nThe problem seems to have been that the `Angle._repr_latex_` method (which is what IPython uses to get what it displays) was converting numpy arrays of strings into single strings in a way that makes ``\\`` turn into ``\\\\``.  This PR fixes that, so that now this is what you see:\r\n![after](https://cloud.githubusercontent.com/assets/346587/6139509/a9ddd5ce-b15a-11e4-90c2-f438d511ad2f.png)\r\n\r\nI put this in the changelog for v1.0 because it's a bug, but it can be moved if this doesn't bet merged in time.\r\n\r\nNote: this closes #3332"""
3479,57237352,embray,embray,2015-02-10 21:12:57,2015-02-11 19:36:54,2015-02-11 15:39:45,closed,,v1.0.0,7,Affects-dev;Bug;build;utils,https://api.github.com/repos/astropy/astropy/issues/3479,b'Ensure that NUMPY_LT_ constants are always defined',b'@mdboom -- does this fix #3478 for you?'
3478,57234521,mdboom,embray,2015-02-10 20:49:51,2015-02-11 17:47:31,2015-02-11 15:39:45,closed,,v1.0.0,2,Affects-dev;Bug,https://api.github.com/repos/astropy/astropy/issues/3478,b'#3389 breaks an affiliated package',"b'pyasdf\'s `setup.py` ends up importing `astropy.units` for reasons that aren\'t entirely good (so I plan to fix that).  But this worked until #3389, when `astropy.units` is no longer importable during setup, because:\r\n\r\nWhen `_ASTROPY_SETUP_` is in builtins (it\'s set in the `setup.py` in the package template) [1] the `NUMPY_LT_X_X` constants don\'t get imported into `astropy.utils.compat` [2], then when `astropy.units.quantity` tries to use one of those constants [3], it blows up.\r\n\r\n[1] https://github.com/astropy/package-template/blob/master/setup.py#L16\r\n[2] https://github.com/astropy/astropy/blob/master/astropy/utils/compat/__init__.py#L13\r\n[3] https://github.com/astropy/astropy/blob/master/astropy/units/quantity.py#L24\r\n\r\nNot sure how to resolve this other than requiring affiliated packages to be ""careful"":\r\n\r\nThere seems to be only one case where `_ASTROPY_SETUP_` matters to affiliated packages:\r\n\r\nhttps://github.com/astropy/astropy/blob/master/astropy/config/configuration.py#L665\r\n\r\nMaybe we use a different variable for ""affiliated package setup"" vs. ""astropy setup""?'"
3475,57198044,wcleveland,eteq,2015-02-10 16:27:08,2015-02-12 16:19:13,2015-02-12 05:07:46,closed,,v0.4.5,20,Affects-release;astropy-helpers;Bug;installation,https://api.github.com/repos/astropy/astropy/issues/3475,b'Astropy returns error when imported by Python 3.4 within an empty git repo',"b'Python version: 3.4\r\nAstropy version: 0.4.4\r\n\r\n**Problem:**\r\n When the project directory (really working directory) is under git version control, you can not import the astropy library. After removing the \'.git\' directory (eliminating the version control), the library can be imported without errors.\r\n\r\n**Steps to recreate the problem:**\r\n```\r\n(install astropy via pip)\r\n$ mkdir test\r\n$ cd test\r\n$ git init\r\n$ echo ""import astropy"" > test.py\r\n$ echo ""print(\\""Astropy version = %s\\"" % (astropy.__version__))"" >> test.py\r\n$ python3 test.py\r\n(Error appears)\r\n\r\n$ rm -rf .git\r\n$ python3 test.py\r\nAstropy version = 0.4.4\r\n```\r\n\r\n**Error message:**\r\n```\r\nPython 3.4.2 (default, Dec 30 2014, 18:34:07)\r\n[GCC 4.2.1 Compatible Apple LLVM 6.0 (clang-600.0.56)] on darwin\r\nType ""help"", ""copyright"", ""credits"" or ""license"" for more information.\r\n>>> import astropy\r\nTraceback (most recent call last):\r\n  File ""<stdin>"", line 1, in <module>\r\n  File ""/Users/TestUser/venv/trigcat3/lib/python3.4/site-packages/astropy/__init__.py"", line 23, in <module>\r\n    from .version import version as __version__\r\n  File ""/Users/TestUser/venv/trigcat3/lib/python3.4/site-packages/astropy/version.py"", line 151, in <module>\r\n    version = update_git_devstr(_last_generated_version)\r\n  File ""/Users/TestUser/venv/trigcat3/lib/python3.4/site-packages/astropy/version.py"", line 34, in update_git_devstr\r\n    devstr = get_git_devstr(sha=True, show_warning=False, path=path)\r\n  File ""/Users/TestUser/venv/trigcat3/lib/python3.4/site-packages/astropy/version.py"", line 144, in get_git_devstr\r\n    return _decode_stdio(stdout)[:40]\r\n  File ""/Users/TestUser/venv/trigcat3/lib/python3.4/site-packages/astropy/version.py"", line 17, in _decode_stdio\r\n    text = stream.decode(stdio_encoding)\r\nAttributeError: \'str\' object has no attribute \'decode\'\r\n```\r\n\r\n'"
3471,57144988,olebole,olebole,2015-02-10 08:36:12,2015-02-11 15:52:11,2015-02-11 15:46:19,closed,,v1.0.0,7,Affects-release;Bug,https://api.github.com/repos/astropy/astropy/issues/3471,b'test_quantity_array_methods error with numpy release candicate',"b'If the numpy version number has an ""rc"" in it, some tests give errors because of:\r\n```\r\n_____ ERROR collecting astropy/units/tests/test_quantity_array_methods.py ______\r\nastropy/units/tests/test_quantity_array_methods.py:11: in <module>\r\n>   NUMPY_LT_1P9P1 = [int(x) for x in np.__version__.split(\'.\')[:3]] < [1, 9, 1]\r\nE   ValueError: invalid literal for int() with base 10: \'0rc1\'\r\n```\r\nHere, Numpy is 1.9.0rc1, Platform is Debian (inofficial) on x32. [Full log](http://buildd.debian-ports.org/status/fetch.php?pkg=python-astropy&arch=x32&ver=1.0~rc1-3&stamp=1423526976)'"
3456,56938425,haussel,mdboom,2015-02-08 04:24:28,2015-02-19 17:11:16,2015-02-19 17:11:16,closed,mdboom,,8,Bug;units,https://api.github.com/repos/astropy/astropy/issues/3456,b'units are not updated after a conversion',"b'Hello, \r\n\r\nI needed to converted the critical density in cosmology to Msun/Mpc^3 and stumbled on a problem:\r\n\r\nI run python 2.7.9 and IPython 2.3.1\r\n\r\n```python\r\nimport numpy as np\r\nprint ""numpy version "" + np.__version__\r\nimport astropy\r\nimport astropy.units as u\r\nprint ""astropy version "" + astropy.__version__\r\nfrom astropy.cosmology import Planck13\r\n\r\nmsun_per_mpc3 = u.solMass / u.Mpc / u.Mpc / u.Mpc\r\ng_per_cm3 = u.g / u.cm / u.cm / u.cm\r\ngcm3_to_mpc3 =  g_per_cm3.get_converter(msun_per_mpc3)\r\nprint Planck13.critical_density(1)\r\nprint gcm3_to_mpc3(cosmo.critical_density(1))\r\n```\r\n\r\nThe output is: \r\nnumpy version 1.9.1\r\nastropy version 0.4.4\r\n2.7270262927e-29 g / cm3\r\n4.01453517314e+11 g / cm3\r\n\r\nWhile the values are correct, the units are still shown as g/cm3...\r\n'"
3447,56725552,olebole,embray,2015-02-05 20:35:09,2015-02-07 07:16:32,2015-02-06 00:04:52,closed,,v1.0.0,4,Affects-dev;Bug;io.ascii,https://api.github.com/repos/astropy/astropy/issues/3447,b'Catch also NotImplementedError and AttributeError in multiprocessing.Queue()',"b""Fixes #3416 for Python 3.4\r\n\r\nWhile Python 2.7 raises an `ImportError`, Python 3.4 raises an `AttributeError`. To me, it seems that the correct error would be a `NotImplementedError`; that's why I added it as well. This behaviour is not documented in the Python doc.\r\nThis is tested to work with current Debian unstable, python version 2.7.9 and 3.4.2."""
3443,56668142,olebole,astrofrog,2015-02-05 13:11:05,2015-02-11 09:53:25,2015-02-11 09:53:25,closed,,v1.0.0,8,Bug;config;testing,https://api.github.com/repos/astropy/astropy/issues/3443,b'Return False on update if there is no default configuration file.',"b""Closes #2841 (seems to be forgotten?)\r\n\r\nIf there is no default configuration file, the update function should do nothing, which means it should return `False` (and not `None`).\r\n\r\nHowever, for me this still looks not perfect: formally, the patch fixes the problem and the function behaves as described in its doc. But we have now three cases:\r\n\r\n* default config available, first call --> update and return `True`\r\n* default config available, subsequent calls --> no update **but write an alternative file** and return `False`\r\n* no default config available --> no update, just return `False`\r\n\r\nSo, if the return value is really used as indicator whether something was updated, then it is fine.\r\nBut when it factically is used to determine whether there is an alternative file, the it will fail:\r\n```\r\nif assert configuration.update_default_config('astropy', config_dir) == False:\r\n  # force updating\r\n  os.rename('astropy.{1}.cfg'.format(astropy.__version__, 'astropy.cfg')\r\n```\r\nit will fail if the default file does not exist. I, however, do not understand why the error is not raised here anymore -- updating the configuration of a package that has no template is IMO nothing that should just pass through.\r\n\r\nI also fixed the documentation (since the missing default does not raise the `ConfigurationDefaultMissingError` anymore); however it now becomes clear that the choice of this error class for the remaining case (missing version number of the package) is not really fortunate..."""
3442,56659438,taldcroft,embray,2015-02-05 11:40:10,2015-02-09 04:10:56,2015-02-06 22:46:21,closed,taldcroft,v1.0.0,8,Affects-release;Bug;table,https://api.github.com/repos/astropy/astropy/issues/3442,"b'Table item access with [], (), or np.array([]) returns no rows'",b'Inspired by and closes #2856.\r\n'
3432,56433876,mwcraig,astrofrog,2015-02-03 20:41:21,2015-02-04 15:36:33,2015-02-04 10:45:02,closed,,v1.0.0,0,Affects-dev;Bug;nddata,https://api.github.com/repos/astropy/astropy/issues/3432,b'1.0rc1: NDData converts input data to numpy.ndarray in some cases',"b""When ``NDData`` is initialized with an ``NDData`` object it converts the data to a numpy array. In the new ``NDData`` the `data` isn't supposed to be converted to a numpy array in most circumstances.\r\n\r\nI can do a PR for this in the couple of hours..."""
3425,56349931,olebole,taldcroft,2015-02-03 08:54:50,2015-02-03 21:11:54,2015-02-03 20:10:28,closed,,v1.0.0,5,Affects-dev;Bug;io.ascii,https://api.github.com/repos/astropy/astropy/issues/3425,b'Raise a CParserError if sem_open is not available',"b'closes #3416 as alternative to #3417 \r\nOn Hurd, there is still no implementation of sem_open available. This\r\ncauses multiprocessing.Queue() (in cparser.pyx) to fail with an\r\nImportError which is just translated into a CparserError.'"
3422,56256245,toastmaker,eteq,2015-02-02 16:14:33,2015-02-09 18:03:56,2015-02-09 06:17:07,closed,,v1.0.0,8,Affects-release;Bug;io.fits,https://api.github.com/repos/astropy/astropy/issues/3422,b'float decimal format not understood by astropy.io.fits',"b""When trying to read data in a fits file I got the following error, while old good pyfits understood data types correctly.\r\n\r\n    from astropy.io import fits\r\n    f = fits.open('file.fits')\r\n    f[0].data\r\n    $> Format 'F9.0' is not valid--field width and decimal precision must be positive integers\r\n\r\nIs there a fix or workaround? Many fits files uses this convention."""
3421,56244620,mdboom,embray,2015-02-02 14:43:42,2015-03-03 16:20:12,2015-02-02 18:29:46,closed,mdboom,v1.0.0,2,Affects-dev;Bug;vo,https://api.github.com/repos/astropy/astropy/issues/3421,"b""Resize masked array in a way that's compatible with Numpy-dev""","b""Fix #3420.\r\n\r\n@embray: This affects 0.4.x on Numpy-dev and Python 3.x as well.  I guess that means it should be backported, but I leave that to your discretion (since it's Numpy-dev only)."""
3420,56226969,astrofrog,embray,2015-02-02 11:50:12,2015-02-02 18:29:46,2015-02-02 18:29:46,closed,mdboom,v1.0.0,1,Affects-dev;Affects-release;Bug;io.votable,https://api.github.com/repos/astropy/astropy/issues/3420,b'1.0rc1: test failures in io.votable with Python 3.x and Numpy-dev',"b'(Note, this is different from https://github.com/astropy/astropy/issues/2960 which is a different failure)\r\n\r\n@mdboom - with 1.0rc1 and the latest Numpy dev version (as of https://github.com/numpy/numpy/commit/a02f5c8fd384b5aeffd1942747b4b6c4efdcd3a4) I am getting many similar failures in tests for ``io.votable`` with Python 3.4, such as:\r\n\r\n```\r\n\r\n    def test_validate():\r\n        output = io.StringIO()\r\n    \r\n        # We can\'t test xmllint, because we can\'t rely on it being on the\r\n        # user\'s machine.\r\n        with catch_warnings():\r\n            result = validate(get_pkg_data_filename(\'data/regression.xml\'),\r\n>                             output, xmllint=False)\r\n\r\nastropy/io/votable/tests/vo_test.py:785: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\r\n\r\nsource = \'/private/var/folders/zy/t1l3sx310d3d6p0kyxqzlrnr0000gr/T/astropy-test-tpr7jxue/lib.macosx-10.8-x86_64-3.4/astropy/io/votable/tests/data/regression.xml\'\r\noutput = <_io.StringIO object at 0x109805828>, xmllint = False\r\nfilename = \'/private/var/folders/zy/t1l3sx310d3d6p0kyxqzlrnr0000gr/T/astropy-test-tpr7jxue/lib.macosx-10.8-x86_64-3.4/astropy/io/votable/tests/data/regression.xml\'\r\n\r\n    def validate(source, output=None, xmllint=False, filename=None):\r\n        """"""\r\n        Prints a validation report for the given file.\r\n    \r\n        Parameters\r\n        ----------\r\n        source : str or readable file-like object\r\n            Path to a VOTABLE_ xml file.\r\n    \r\n        output : writable file-like object, optional\r\n            Where to output the report.  Defaults to ``sys.stdout``.\r\n            If `None`, the output will be returned as a string.\r\n    \r\n        xmllint : bool, optional\r\n            When `True`, also send the file to ``xmllint`` for schema and\r\n            DTD validation.  Requires that ``xmllint`` is installed.  The\r\n            default is `False`.  ``source`` must be a file on the local\r\n            filesystem in order for ``xmllint`` to work.\r\n    \r\n        filename : str, optional\r\n            A filename to use in the error messages.  If not provided, one\r\n            will be automatically determined from ``source``.\r\n    \r\n        Returns\r\n        -------\r\n        is_valid : bool or str\r\n            Returns `True` if no warnings were found.  If ``output`` is\r\n            `None`, the return value will be a string.\r\n        """"""\r\n    \r\n        from ...utils.console import print_code_line, color_print\r\n    \r\n        if output is None:\r\n            output = sys.stdout\r\n    \r\n        return_as_str = False\r\n        if output is None:\r\n            output = io.StringIO()\r\n    \r\n        lines = []\r\n        votable = None\r\n    \r\n        reset_vo_warnings()\r\n    \r\n        with data.get_readable_fileobj(source, encoding=\'binary\') as fd:\r\n            content = fd.read()\r\n        content_buffer = io.BytesIO(content)\r\n        content_buffer.seek(0)\r\n    \r\n        if filename is None:\r\n            if isinstance(source, six.string_types):\r\n                filename = source\r\n            elif hasattr(source, \'name\'):\r\n                filename = source.name\r\n            elif hasattr(source, \'url\'):\r\n                filename = source.url\r\n            else:\r\n                filename = ""<unknown>""\r\n    \r\n        with warnings.catch_warnings(record=True) as warning_lines:\r\n            warnings.resetwarnings()\r\n            warnings.simplefilter(""always"", exceptions.VOWarning, append=True)\r\n            try:\r\n>               votable = parse(content_buffer, pedantic=False, filename=filename)\r\n\r\nastropy/io/votable/table.py:261: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\r\n\r\nsource = <_io.BytesIO object at 0x109b1ca08>, columns = None, invalid = \'exception\', pedantic = False, chunk_size = 256, table_number = None, table_id = None\r\nfilename = \'/private/var/folders/zy/t1l3sx310d3d6p0kyxqzlrnr0000gr/T/astropy-test-tpr7jxue/lib.macosx-10.8-x86_64-3.4/astropy/io/votable/tests/data/regression.xml\', unit_format = None\r\ndatatype_mapping = {}, _debug_python_based_parser = False\r\n\r\n    def parse(source, columns=None, invalid=\'exception\', pedantic=None,\r\n              chunk_size=tree.DEFAULT_CHUNK_SIZE, table_number=None,\r\n              table_id=None, filename=None, unit_format=None,\r\n              datatype_mapping=None, _debug_python_based_parser=False):\r\n        """"""\r\n        Parses a VOTABLE_ xml file (or file-like object), and returns a\r\n        `~astropy.io.votable.tree.VOTableFile` object.\r\n    \r\n        Parameters\r\n        ----------\r\n        source : str or readable file-like object\r\n            Path or file object containing a VOTABLE_ xml file.\r\n    \r\n        columns : sequence of str, optional\r\n            List of field names to include in the output.  The default is\r\n            to include all fields.\r\n    \r\n        invalid : str, optional\r\n            One of the following values:\r\n    \r\n                - \'exception\': throw an exception when an invalid value is\r\n                  encountered (default)\r\n    \r\n                - \'mask\': mask out invalid values\r\n    \r\n        pedantic : bool, optional\r\n            When `True`, raise an error when the file violates the spec,\r\n            otherwise issue a warning.  Warnings may be controlled using\r\n            the standard Python mechanisms.  See the `warnings`\r\n            module in the Python standard library for more information.\r\n            When not provided, uses the configuration setting\r\n            ``astropy.io.votable.pedantic``, which defaults to False.\r\n    \r\n        chunk_size : int, optional\r\n            The number of rows to read before converting to an array.\r\n            Higher numbers are likely to be faster, but will consume more\r\n            memory.\r\n    \r\n        table_number : int, optional\r\n            The number of table in the file to read in.  If `None`, all\r\n            tables will be read.  If a number, 0 refers to the first table\r\n            in the file, and only that numbered table will be parsed and\r\n            read in.  Should not be used with ``table_id``.\r\n    \r\n        table_id : str, optional\r\n            The ID of the table in the file to read in.  Should not be\r\n            used with ``table_number``.\r\n    \r\n        filename : str, optional\r\n            A filename, URL or other identifier to use in error messages.\r\n            If *filename* is None and *source* is a string (i.e. a path),\r\n            then *source* will be used as a filename for error messages.\r\n            Therefore, *filename* is only required when source is a\r\n            file-like object.\r\n    \r\n        unit_format : str, astropy.units.format.Base instance or None, optional\r\n            The unit format to use when parsing unit attributes.  If a\r\n            string, must be the name of a unit formatter. The built-in\r\n            formats include ``generic``, ``fits``, ``cds``, and\r\n            ``vounit``.  A custom formatter may be provided by passing a\r\n            `~astropy.units.UnitBase` instance.  If `None` (default),\r\n            the unit format to use will be the one specified by the\r\n            VOTable specification (which is ``cds`` up to version 1.2 of\r\n            VOTable, and (probably) ``vounit`` in future versions of the\r\n            spec).\r\n    \r\n        datatype_mapping : dict of str to str, optional\r\n            A mapping of datatype names to valid VOTable datatype names.\r\n            For example, if the file being read contains the datatype\r\n            ""unsignedInt"" (an invalid datatype in VOTable), include the\r\n            mapping ``{""unsignedInt"": ""long""}``.\r\n    \r\n        Returns\r\n        -------\r\n        votable : `~astropy.io.votable.tree.VOTableFile` object\r\n    \r\n        See also\r\n        --------\r\n        astropy.io.votable.exceptions : The exceptions this function may raise.\r\n        """"""\r\n        from . import conf\r\n    \r\n        invalid = invalid.lower()\r\n        assert invalid in (\'exception\', \'mask\')\r\n    \r\n        if pedantic is None:\r\n            pedantic = conf.pedantic\r\n    \r\n        if datatype_mapping is None:\r\n            datatype_mapping = {}\r\n    \r\n        config = {\r\n            \'columns\'          : columns,\r\n            \'invalid\'          : invalid,\r\n            \'pedantic\'         : pedantic,\r\n            \'chunk_size\'       : chunk_size,\r\n            \'table_number\'     : table_number,\r\n            \'filename\'         : filename,\r\n            \'unit_format\'      : unit_format,\r\n            \'datatype_mapping\' : datatype_mapping\r\n        }\r\n    \r\n        if filename is None and isinstance(source, six.string_types):\r\n            config[\'filename\'] = source\r\n    \r\n        with iterparser.get_xml_iterator(\r\n            source,\r\n            _debug_python_based_parser=_debug_python_based_parser) as iterator:\r\n            return tree.VOTableFile(\r\n>               config=config, pos=(1, 1)).parse(iterator, config)\r\n\r\nastropy/io/votable/table.py:146: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\r\n\r\nself = <astropy.io.votable.tree.VOTableFile object at 0x10a5487f0>, iterator = <astropy.utils.xml._iterparser.IterParser object at 0x108e32208>\r\nconfig = {\'_current_table_number\': 1, \'_warning_counts\': {<class \'astropy.io.votable.exceptions.W01\'>: 8, <class \'astropy.io.vo...le.exceptions.W49\'>: 83, <class \'astropy.io.votable.exceptions.W10\'>: 2, ...}, \'chunk_size\': 256, \'columns\': None, ...}\r\n\r\n    def parse(self, iterator, config):\r\n        config[\'_current_table_number\'] = 0\r\n    \r\n        for start, tag, data, pos in iterator:\r\n            if start:\r\n                if tag == \'xml\':\r\n                    pass\r\n                elif tag == \'VOTABLE\':\r\n                    if \'version\' not in data:\r\n                        warn_or_raise(W20, W20, self.version, config, pos)\r\n                        config[\'version\'] = self.version\r\n                    else:\r\n                        config[\'version\'] = self._version = data[\'version\']\r\n                        if config[\'version\'].lower().startswith(\'v\'):\r\n                            warn_or_raise(\r\n                                W29, W29, config[\'version\'], config, pos)\r\n                            self._version = config[\'version\'] = \\\r\n                                            config[\'version\'][1:]\r\n                        if config[\'version\'] not in (\'1.1\', \'1.2\', \'1.3\'):\r\n                            vo_warn(W21, config[\'version\'], config, pos)\r\n    \r\n                    if \'xmlns\' in data:\r\n                        correct_ns = (\'http://www.ivoa.net/xml/VOTable/v%s\' %\r\n                                      config[\'version\'])\r\n                        if data[\'xmlns\'] != correct_ns:\r\n                            vo_warn(\r\n                                W41, (correct_ns, data[\'xmlns\']), config, pos)\r\n                    else:\r\n                        vo_warn(W42, (), config, pos)\r\n    \r\n                    break\r\n                else:\r\n                    vo_raise(E19, (), config, pos)\r\n        config[\'version_1_1_or_later\'] = \\\r\n            util.version_compare(config[\'version\'], \'1.1\') >= 0\r\n        config[\'version_1_2_or_later\'] = \\\r\n            util.version_compare(config[\'version\'], \'1.2\') >= 0\r\n        config[\'version_1_3_or_later\'] = \\\r\n            util.version_compare(config[\'version\'], \'1.3\') >= 0\r\n    \r\n        tag_mapping = {\r\n            \'PARAM\'       : self._add_param,\r\n            \'RESOURCE\'    : self._add_resource,\r\n            \'COOSYS\'      : self._add_coosys,\r\n            \'INFO\'        : self._add_info,\r\n            \'DEFINITIONS\' : self._add_definitions,\r\n            \'DESCRIPTION\' : self._ignore_add,\r\n            \'GROUP\'       : self._add_group}\r\n    \r\n        for start, tag, data, pos in iterator:\r\n            if start:\r\n                tag_mapping.get(tag, self._add_unknown_tag)(\r\n>                   iterator, tag, data, config, pos)\r\n\r\nastropy/io/votable/tree.py:3342: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\r\n\r\nself = <astropy.io.votable.tree.VOTableFile object at 0x10a5487f0>, iterator = <astropy.utils.xml._iterparser.IterParser object at 0x108e32208>, tag = \'RESOURCE\'\r\ndata = {\'type\': \'results\'}\r\nconfig = {\'_current_table_number\': 1, \'_warning_counts\': {<class \'astropy.io.votable.exceptions.W01\'>: 8, <class \'astropy.io.vo...le.exceptions.W49\'>: 83, <class \'astropy.io.votable.exceptions.W10\'>: 2, ...}, \'chunk_size\': 256, \'columns\': None, ...}\r\npos = (16, 0)\r\n\r\n    def _add_resource(self, iterator, tag, data, config, pos):\r\n        resource = Resource(config=config, pos=pos, **data)\r\n        self.resources.append(resource)\r\n>       resource.parse(self, iterator, config)\r\n\r\nastropy/io/votable/tree.py:3271: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\r\n\r\nself = <astropy.io.votable.tree.Resource object at 0x10989d7b8>, votable = <astropy.io.votable.tree.VOTableFile object at 0x10a5487f0>\r\niterator = <astropy.utils.xml._iterparser.IterParser object at 0x108e32208>\r\nconfig = {\'_current_table_number\': 1, \'_warning_counts\': {<class \'astropy.io.votable.exceptions.W01\'>: 8, <class \'astropy.io.vo...le.exceptions.W49\'>: 83, <class \'astropy.io.votable.exceptions.W10\'>: 2, ...}, \'chunk_size\': 256, \'columns\': None, ...}\r\n\r\n    def parse(self, votable, iterator, config):\r\n        self._votable = votable\r\n    \r\n        tag_mapping = {\r\n            \'TABLE\'       : self._add_table,\r\n            \'INFO\'        : self._add_info,\r\n            \'PARAM\'       : self._add_param,\r\n            \'COOSYS\'      : self._add_coosys,\r\n            \'RESOURCE\'    : self._add_resource,\r\n            \'LINK\'        : self._add_link,\r\n            \'DESCRIPTION\' : self._ignore_add\r\n            }\r\n    \r\n        for start, tag, data, pos in iterator:\r\n            if start:\r\n                tag_mapping.get(tag, self._add_unknown_tag)(\r\n>                   iterator, tag, data, config, pos)\r\n\r\nastropy/io/votable/tree.py:3114: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\r\n\r\nself = <astropy.io.votable.tree.Resource object at 0x10989d7b8>, iterator = <astropy.utils.xml._iterparser.IterParser object at 0x108e32208>, tag = \'TABLE\', data = {\'ID\': \'main_table\'}\r\nconfig = {\'_current_table_number\': 1, \'_warning_counts\': {<class \'astropy.io.votable.exceptions.W01\'>: 8, <class \'astropy.io.vo...le.exceptions.W49\'>: 83, <class \'astropy.io.votable.exceptions.W10\'>: 2, ...}, \'chunk_size\': 256, \'columns\': None, ...}\r\npos = (25, 0)\r\n\r\n    def _add_table(self, iterator, tag, data, config, pos):\r\n        table = Table(self._votable, config=config, pos=pos, **data)\r\n        self.tables.append(table)\r\n>       table.parse(iterator, config)\r\n\r\nastropy/io/votable/tree.py:3071: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\r\n\r\nself = <[AttributeError(""\'Table\' object has no attribute \'array\'"") raised in repr()] Table object at 0x1097cd358>\r\niterator = <astropy.utils.xml._iterparser.IterParser object at 0x108e32208>\r\nconfig = {\'_current_table_number\': 1, \'_warning_counts\': {<class \'astropy.io.votable.exceptions.W01\'>: 8, <class \'astropy.io.vo...le.exceptions.W49\'>: 83, <class \'astropy.io.votable.exceptions.W10\'>: 2, ...}, \'chunk_size\': 256, \'columns\': None, ...}\r\n\r\n    def parse(self, iterator, config):\r\n        columns = config.get(\'columns\')\r\n    \r\n        # If we\'ve requested to read in only a specific table, skip\r\n        # all others\r\n        table_number = config.get(\'table_number\')\r\n        current_table_number = config.get(\'_current_table_number\')\r\n        skip_table = False\r\n        if current_table_number is not None:\r\n            config[\'_current_table_number\'] += 1\r\n            if (table_number is not None and\r\n                table_number != current_table_number):\r\n                skip_table = True\r\n                self._empty = True\r\n    \r\n        table_id = config.get(\'table_id\')\r\n        if table_id is not None:\r\n            if table_id != self.ID:\r\n                skip_table = True\r\n                self._empty = True\r\n    \r\n        if self.ref is not None:\r\n            # This table doesn\'t have its own datatype descriptors, it\r\n            # just references those from another table.\r\n    \r\n            # This is to call the property setter to go and get the\r\n            # referenced information\r\n            self.ref = self.ref\r\n    \r\n            for start, tag, data, pos in iterator:\r\n                if start:\r\n                    if tag == \'DATA\':\r\n                        warn_unknown_attrs(\r\n                            \'DATA\', six.iterkeys(data), config, pos)\r\n                        break\r\n                else:\r\n                    if tag == \'TABLE\':\r\n                        return self\r\n                    elif tag == \'DESCRIPTION\':\r\n                        if self.description is not None:\r\n                            warn_or_raise(W17, W17, \'RESOURCE\', config, pos)\r\n                        self.description = data or None\r\n        else:\r\n            tag_mapping = {\r\n                \'FIELD\'       : self._add_field,\r\n                \'PARAM\'       : self._add_param,\r\n                \'GROUP\'       : self._add_group,\r\n                \'LINK\'        : self._add_link,\r\n                \'INFO\'        : self._add_info,\r\n                \'DESCRIPTION\' : self._ignore_add}\r\n    \r\n            for start, tag, data, pos in iterator:\r\n                if start:\r\n                    if tag == \'DATA\':\r\n                        warn_unknown_attrs(\r\n                            \'DATA\', six.iterkeys(data), config, pos)\r\n                        break\r\n    \r\n                    tag_mapping.get(tag, self._add_unknown_tag)(\r\n                        iterator, tag, data, config, pos)\r\n                else:\r\n                    if tag == \'DESCRIPTION\':\r\n                        if self.description is not None:\r\n                            warn_or_raise(W17, W17, \'RESOURCE\', config, pos)\r\n                        self.description = data or None\r\n                    elif tag == \'TABLE\':\r\n                        # For error checking purposes\r\n                        Field.uniqify_names(self.fields)\r\n                        return self\r\n    \r\n        self.create_arrays(nrows=self._nrows, config=config)\r\n        fields = self.fields\r\n        names = [x.ID for x in fields]\r\n        # Deal with a subset of the columns, if requested.\r\n        if not columns:\r\n            colnumbers = list(range(len(fields)))\r\n        else:\r\n            if isinstance(columns, six.string_types):\r\n                columns = [columns]\r\n            columns = np.asarray(columns)\r\n            if issubclass(columns.dtype.type, np.integer):\r\n                if np.any(columns < 0) or np.any(columns > len(fields)):\r\n                    raise ValueError(\r\n                        ""Some specified column numbers out of range"")\r\n                colnumbers = columns\r\n            elif issubclass(columns.dtype.type, np.character):\r\n                try:\r\n                    colnumbers = [names.index(x) for x in columns]\r\n                except ValueError:\r\n                    raise ValueError(\r\n                        ""Columns \'%s\' not found in fields list"" % columns)\r\n            else:\r\n                raise TypeError(""Invalid columns list"")\r\n    \r\n        if not skip_table:\r\n            for start, tag, data, pos in iterator:\r\n                if start:\r\n                    if tag == \'TABLEDATA\':\r\n                        warn_unknown_attrs(\r\n                            \'TABLEDATA\', six.iterkeys(data), config, pos)\r\n                        self.array = self._parse_tabledata(\r\n>                           iterator, colnumbers, fields, config)\r\n\r\nastropy/io/votable/tree.py:2371: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\r\n\r\nself = <[AttributeError(""\'Table\' object has no attribute \'array\'"") raised in repr()] Table object at 0x1097cd358>\r\niterator = <astropy.utils.xml._iterparser.IterParser object at 0x108e32208>, colnumbers = [0, 1, 2, 3, 4, 5, ...]\r\nfields = [<astropy.io.votable.tree.Field object at 0x1099b4470>, <astropy.io.votable.tree.Field object at 0x1099b4048>, <astrop...99a9080>, <astropy.io.votable.tree.Field object at 0x1099a9e10>, <astropy.io.votable.tree.Field object at 0x1099a9160>]\r\nconfig = {\'_current_table_number\': 1, \'_warning_counts\': {<class \'astropy.io.votable.exceptions.W01\'>: 8, <class \'astropy.io.vo...le.exceptions.W49\'>: 83, <class \'astropy.io.votable.exceptions.W10\'>: 2, ...}, \'chunk_size\': 256, \'columns\': None, ...}\r\n\r\n    def _parse_tabledata(self, iterator, colnumbers, fields, config):\r\n        # Since we don\'t know the number of rows up front, we\'ll\r\n        # reallocate the record array to make room as we go.  This\r\n        # prevents the need to scan through the XML twice.  The\r\n        # allocation is by factors of 1.5.\r\n        invalid = config.get(\'invalid\', \'exception\')\r\n    \r\n        # Need to have only one reference so that we can resize the\r\n        # array\r\n        array = self.array\r\n        del self.array\r\n    \r\n        parsers = [field.converter.parse for field in fields]\r\n        binparsers = [field.converter.binparse for field in fields]\r\n    \r\n        numrows = 0\r\n        alloc_rows = len(array)\r\n        colnumbers_bits = [i in colnumbers for i in range(len(fields))]\r\n        row_default = [x.converter.default for x in fields]\r\n        mask_default = [True] * len(fields)\r\n        array_chunk = []\r\n        mask_chunk = []\r\n        chunk_size = config.get(\'chunk_size\', DEFAULT_CHUNK_SIZE)\r\n        for start, tag, data, pos in iterator:\r\n            if tag == \'TR\':\r\n                # Now parse one row\r\n                row = row_default[:]\r\n                row_mask = mask_default[:]\r\n                i = 0\r\n                for start, tag, data, pos in iterator:\r\n                    if start:\r\n                        binary = (data.get(\'encoding\', None) == \'base64\')\r\n                        warn_unknown_attrs(\r\n                            tag, six.iterkeys(data), config, pos, [\'encoding\'])\r\n                    else:\r\n                        if tag == \'TD\':\r\n                            if i >= len(fields):\r\n                                vo_raise(E20, len(fields), config, pos)\r\n    \r\n                            if colnumbers_bits[i]:\r\n                                try:\r\n                                    if binary:\r\n                                        rawdata = base64.b64decode(\r\n                                            data.encode(\'ascii\'))\r\n                                        buf = io.BytesIO(rawdata)\r\n                                        buf.seek(0)\r\n                                        try:\r\n                                            value, mask_value = binparsers[i](\r\n                                                buf.read)\r\n                                        except Exception as e:\r\n                                            vo_reraise(\r\n                                                e, config, pos,\r\n                                                ""(in row %d, col \'%s\')"" %\r\n                                                (len(array_chunk),\r\n                                                 fields[i].ID))\r\n                                    else:\r\n                                        try:\r\n                                            value, mask_value = parsers[i](\r\n                                                data, config, pos)\r\n                                        except Exception as e:\r\n                                            vo_reraise(\r\n                                                e, config, pos,\r\n                                                ""(in row %d, col \'%s\')"" %\r\n                                                (len(array_chunk),\r\n                                                 fields[i].ID))\r\n                                except Exception as e:\r\n                                    if invalid == \'exception\':\r\n                                        vo_reraise(e, config, pos)\r\n                                else:\r\n                                    row[i] = value\r\n                                    row_mask[i] = mask_value\r\n                        elif tag == \'TR\':\r\n                            break\r\n                        else:\r\n                            self._add_unknown_tag(\r\n                                iterator, tag, data, config, pos)\r\n                        i += 1\r\n    \r\n                if i < len(fields):\r\n                    vo_raise(E21, (i, len(fields)), config, pos)\r\n    \r\n                array_chunk.append(tuple(row))\r\n                mask_chunk.append(tuple(row_mask))\r\n    \r\n                if len(array_chunk) == chunk_size:\r\n                    while numrows + chunk_size > alloc_rows:\r\n                        alloc_rows = self._resize_strategy(alloc_rows)\r\n                    if alloc_rows != len(array):\r\n                        array = _resize(array, alloc_rows)\r\n                    array[numrows:numrows + chunk_size] = array_chunk\r\n                    array.mask[numrows:numrows + chunk_size] = mask_chunk\r\n                    numrows += chunk_size\r\n                    array_chunk = []\r\n                    mask_chunk = []\r\n    \r\n            elif not start and tag == \'TABLEDATA\':\r\n                break\r\n    \r\n        # Now, resize the array to the exact number of rows we need and\r\n        # put the last chunk values in there.\r\n        alloc_rows = numrows + len(array_chunk)\r\n    \r\n>       array = _resize(array, alloc_rows)\r\n\r\nastropy/io/votable/tree.py:2521: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\r\n\r\nmasked = masked_recarray(data = [],\r\n                mask = [],\r\n          fill_value = (\'?\', b\'N/A\', \'?\', \'N/A\', b\'N/A\', 63, 169...ray\', \'<i4\', (2, 2)), (\'precision1\', \'<f8\'), (\'precision2\', \'<f8\'), (\'doublearray\', \'O\'), (\'bitarray2\', \'?\', (16,))]))\r\n\r\nnew_size = 5\r\n\r\n    def _resize(masked, new_size):\r\n        """"""\r\n        Masked arrays can not be resized inplace, and `np.resize` and\r\n        `ma.resize` are both incompatible with structured arrays.\r\n        Therefore, we do all this.\r\n        """"""\r\n        new_array = ma.zeros((new_size,), dtype=masked.dtype)\r\n        length = min(len(masked), new_size)\r\n>       new_array.data[:length] = masked.data[:length]\r\n\r\nastropy/io/votable/tree.py:70: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\r\n\r\nself = rec.array([], \r\n          dtype=[((\'string test\', \'string_test\'), \'|O8\'), ((\'fixed string test\', \'string_test_2\'), \'|S1...y\', \'<i4\', (2, 2)), (\'precision1\', \'<f8\'), (\'precision2\', \'<f8\'), (\'doublearray\', \'|O8\'), (\'bitarray2\', \'|b1\', (16,))])\r\nindx = slice(None, 0, None)\r\n\r\n    def __getitem__(self, indx):\r\n        obj = ndarray.__getitem__(self, indx)\r\n    \r\n        # copy behavior of getattr, except that here\r\n        # we might also be returning a single element\r\n        if isinstance(obj, ndarray):\r\n            if obj.dtype.fields:\r\n>               return obj.view(dtype=(self.dtype.type, obj.dtype.descr))\r\n\r\n/Users/tom/Library/Python/3.4/lib/python/site-packages/numpy/core/records.py:481: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\r\n\r\nself = rec.array([], \r\n          dtype=[((\'string test\', \'string_test\'), \'|O8\'), ((\'fixed string test\', \'string_test_2\'), \'|S1...y\', \'<i4\', (2, 2)), (\'precision1\', \'<f8\'), (\'precision2\', \'<f8\'), (\'doublearray\', \'|O8\'), (\'bitarray2\', \'|b1\', (16,))])\r\ndtype = dtype((numpy.record, [((\'string test\', \'string_test\'), \'O\'), ((\'fixed string test\', \'string_test_2\'), \'S10\'), (\'unicod...rray\', \'<i4\', (2, 2)), (\'precision1\', \'<f8\'), (\'precision2\', \'<f8\'), (\'doublearray\', \'O\'), (\'bitarray2\', \'?\', (16,))]))\r\ntype = None\r\n\r\n    def view(self, dtype=None, type=None):\r\n        if dtype is None:\r\n            return ndarray.view(self, type)\r\n        elif type is None:\r\n            try:\r\n                if issubclass(dtype, ndarray):\r\n                    return ndarray.view(self, dtype)\r\n            except TypeError:\r\n                pass\r\n            dtype = sb.dtype(dtype)\r\n            if dtype.fields is None:\r\n                return self.__array__().view(dtype)\r\n>           return ndarray.view(self, dtype)\r\n\r\n/Users/tom/Library/Python/3.4/lib/python/site-packages/numpy/core/records.py:540: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\r\n\r\nself = rec.array([], \r\n          dtype=[((\'string test\', \'string_test\'), \'|O8\'), ((\'fixed string test\', \'string_test_2\'), \'|S1...y\', \'<i4\', (2, 2)), (\'precision1\', \'<f8\'), (\'precision2\', \'<f8\'), (\'doublearray\', \'|O8\'), (\'bitarray2\', \'|b1\', (16,))])\r\nattr = \'dtype\'\r\nval = dtype((numpy.record, [((\'string test\', \'string_test\'), \'O\'), ((\'fixed string test\', \'string_test_2\'), \'S10\'), (\'unicod...rray\', \'<i4\', (2, 2)), (\'precision1\', \'<f8\'), (\'precision2\', \'<f8\'), (\'doublearray\', \'O\'), (\'bitarray2\', \'?\', (16,))]))\r\n\r\n    def __setattr__(self, attr, val):\r\n        newattr = attr not in self.__dict__\r\n        try:\r\n            ret = object.__setattr__(self, attr, val)\r\n        except:\r\n            fielddict = ndarray.__getattribute__(self, \'dtype\').fields or {}\r\n            if attr not in fielddict:\r\n                exctype, value = sys.exc_info()[:2]\r\n>               raise exctype(value)\r\nE               TypeError: Cannot change data-type for object array.\r\n\r\n/Users/tom/Library/Python/3.4/lib/python/site-packages/numpy/core/records.py:457: TypeError\r\n```\r\n'"
3419,56226652,astrofrog,embray,2015-02-02 11:46:47,2015-05-29 18:41:57,2015-05-29 18:41:55,closed,embray,v1.0.3,23,Bug;io.fits,https://api.github.com/repos/astropy/astropy/issues/3419,b'1.0rc1: test failures in io.fits with Numpy dev',"b'(Note, this is different from https://github.com/astropy/astropy/issues/2960 which is a different failure, and in Python 3)\r\n\r\n@embray - with 1.0rc1 and the latest Numpy dev version (as of https://github.com/numpy/numpy/commit/a02f5c8fd384b5aeffd1942747b4b6c4efdcd3a4) I am getting the following failures in tests for ``io.fits``:\r\n\r\n```\r\n______________________________________________________________________ TestChecksumFunctions.test_ascii_table_data ______________________________________________________________________\r\n\r\nself = <astropy.io.fits.tests.test_checksum.TestChecksumFunctions object at 0x117872890>\r\n\r\n    def test_ascii_table_data(self):\r\n        a1 = np.array([\'abc\', \'def\'])\r\n        r1 = np.array([11.0, 12.0])\r\n        c1 = fits.Column(name=\'abc\', format=\'A3\', array=a1)\r\n        # This column used to be E format, but the single-precision float lost\r\n        # too much precision when scaling so it was changed to a D\r\n        c2 = fits.Column(name=\'def\', format=\'D\', array=r1, bscale=2.3,\r\n                         bzero=0.6)\r\n        c3 = fits.Column(name=\'t1\', format=\'I\', array=[91, 92, 93])\r\n        x = fits.ColDefs([c1, c2, c3])\r\n        hdu = fits.TableHDU.from_columns(x)\r\n>       hdu.writeto(self.temp(\'tmp.fits\'), clobber=True, checksum=True)\r\n\r\nastropy/io/fits/tests/test_checksum.py:171: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\r\n\r\nself = <astropy.io.fits.hdu.table.TableHDU object at 0x1169ce610>, name = \'/var/folders/zy/t1l3sx310d3d6p0kyxqzlrnr0000gr/T/fits-test-Z8k9yJ/tmp.fits\', output_verify = \'exception\'\r\nclobber = True, checksum = True\r\n\r\n    def writeto(self, name, output_verify=\'exception\', clobber=False,\r\n                checksum=False):\r\n        """"""\r\n            Works similarly to the normal writeto(), but prepends a default\r\n            `PrimaryHDU` are required by extension HDUs (which cannot stand on\r\n            their own).\r\n            """"""\r\n    \r\n        from .hdulist import HDUList\r\n        from .image import PrimaryHDU\r\n    \r\n        hdulist = HDUList([PrimaryHDU(), self])\r\n        hdulist.writeto(name, output_verify, clobber=clobber,\r\n>                       checksum=checksum)\r\n\r\nastropy/io/fits/hdu/base.py:1712: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\r\n\r\nself = [<astropy.io.fits.hdu.image.PrimaryHDU object at 0x1169cef10>, <astropy.io.fits.hdu.table.TableHDU object at 0x1169ce610>]\r\nfileobj = <astropy.io.fits.file._File <open file \'/var/folders/zy/t1l3sx310d3d6p0kyxqzlrnr0000gr/T/fits-test-Z8k9yJ/tmp.fits\', mode \'wb\' at 0x1169c4810>>, output_verify = \'exception\'\r\nclobber = True, checksum = True\r\n\r\n    def writeto(self, fileobj, output_verify=\'exception\', clobber=False,\r\n                checksum=False):\r\n        """"""\r\n            Write the `HDUList` to a new file.\r\n    \r\n            Parameters\r\n            ----------\r\n            fileobj : file path, file object or file-like object\r\n                File to write to.  If a file object, must be opened in a\r\n                writeable mode.\r\n    \r\n            output_verify : str\r\n                Output verification option.  Must be one of ``""fix""``,\r\n                ``""silentfix""``, ``""ignore""``, ``""warn""``, or\r\n                ``""exception""``.  May also be any combination of ``""fix""`` or\r\n                ``""silentfix""`` with ``""+ignore""``, ``+warn``, or ``+exception""\r\n                (e.g. ``""fix+warn""``).  See :ref:`verify` for more info.\r\n    \r\n            clobber : bool\r\n                When `True`, overwrite the output file if exists.\r\n    \r\n            checksum : bool\r\n                When `True` adds both ``DATASUM`` and ``CHECKSUM`` cards\r\n                to the headers of all HDU\'s written to the file.\r\n            """"""\r\n    \r\n        if (len(self) == 0):\r\n            warnings.warn(""There is nothing to write."", AstropyUserWarning)\r\n            return\r\n    \r\n        self.verify(option=output_verify)\r\n    \r\n        # make sure the EXTEND keyword is there if there is extension\r\n        self.update_extend()\r\n    \r\n        # make note of whether the input file object is already open, in which\r\n        # case we should not close it after writing (that should be the job\r\n        # of the caller)\r\n        closed = isinstance(fileobj, string_types) or fileobj_closed(fileobj)\r\n    \r\n        # writeto is only for writing a new file from scratch, so the most\r\n        # sensible mode to require is \'ostream\'.  This can accept an open\r\n        # file object that\'s open to write only, or in append/update modes\r\n        # but only if the file doesn\'t exist.\r\n        fileobj = _File(fileobj, mode=\'ostream\', clobber=clobber)\r\n        hdulist = self.fromfile(fileobj)\r\n    \r\n        for hdu in self:\r\n>           hdu._prewriteto(checksum=checksum)\r\n\r\nastropy/io/fits/hdu/hdulist.py:680: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\r\n\r\nself = <astropy.io.fits.hdu.table.TableHDU object at 0x1169ce610>, checksum = True, inplace = False\r\n\r\n    def _prewriteto(self, checksum=False, inplace=False):\r\n        if self._has_data:\r\n            self.data._scale_back(\r\n>               update_heap_pointers=not self._manages_own_heap)\r\n\r\nastropy/io/fits/hdu/table.py:446: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\r\n\r\nself = rec.array([(\'abc\', 11.0, 91), (\'def\', 12.0, 92), (\'   \', 0.0, 93)], \r\n          dtype=[(\'abc\', \'|S3\'), (\'def\', \'|S25\'), (\'t1\', \'|S10\')]), update_heap_pointers = True\r\n\r\n    def _scale_back(self, update_heap_pointers=True):\r\n        """"""\r\n            Update the parent array, using the (latest) scaled array.\r\n    \r\n            If ``update_heap_pointers`` is `False`, this will leave all the heap\r\n            pointers in P/Q columns as they are verbatim--it only makes sense to do\r\n            this if there is already data on the heap and it can be guaranteed that\r\n            that data has not been modified, and there is not new data to add to\r\n            the heap.  Currently this is only used as an optimization for\r\n            CompImageHDU that does its own handling of the heap.\r\n            """"""\r\n    \r\n        # Running total for the new heap size\r\n        heapsize = 0\r\n    \r\n        for indx in range(len(self.dtype.names)):\r\n            recformat = self._coldefs._recformats[indx]\r\n            field = super(FITS_rec, self).field(indx)\r\n    \r\n            # add the location offset of the heap area for each\r\n            # variable length column\r\n            if isinstance(recformat, _FormatP):\r\n                # Irritatingly, this can return a different dtype than just\r\n                # doing np.dtype(recformat.dtype); but this returns the results\r\n                # that we want.  For example if recformat.dtype is \'a\' we want\r\n                # an array of characters.\r\n                dtype = np.array([], dtype=recformat.dtype).dtype\r\n    \r\n                if update_heap_pointers and self._convert[indx] is not None:\r\n                    # The VLA has potentially been updated, so we need to\r\n                    # update the array descriptors\r\n                    field[:] = 0  # reset\r\n                    npts = [len(arr) for arr in self._convert[indx]]\r\n    \r\n                    field[:len(npts), 0] = npts\r\n                    field[1:, 1] = (np.add.accumulate(field[:-1, 0]) *\r\n                                    dtype.itemsize)\r\n                    field[:, 1][:] += heapsize\r\n    \r\n                heapsize += field[:, 0].sum() * dtype.itemsize\r\n                # Even if this VLA has not been read or updated, we need to\r\n                # include the size of its constituent arrays in the heap size\r\n                # total\r\n    \r\n            if self._convert[indx] is None:\r\n                continue\r\n    \r\n            if isinstance(recformat, _FormatX):\r\n                _wrapx(self._convert[indx], field, recformat.repeat)\r\n                continue\r\n    \r\n            _str, _bool, _number, _scale, _zero, bscale, bzero, _ = \\\r\n                self._get_scale_factors(indx)\r\n    \r\n            # conversion for both ASCII and binary tables\r\n            if _number or _str:\r\n                column = self._coldefs[indx]\r\n                if _number and (_scale or _zero) and column._physical_values:\r\n                    dummy = self._convert[indx].copy()\r\n                    if _zero:\r\n                        dummy -= bzero\r\n                    if _scale:\r\n                        dummy /= bscale\r\n                    # This will set the raw values in the recarray back to\r\n                    # their non-physical storage values, so the column should\r\n                    # be mark is not scaled\r\n                    column._physical_values = False\r\n                elif _str:\r\n                    dummy = self._convert[indx]\r\n                elif isinstance(self._coldefs, _AsciiColDefs):\r\n                    dummy = self._convert[indx]\r\n                else:\r\n                    continue\r\n    \r\n                # ASCII table, convert numbers to strings\r\n                if isinstance(self._coldefs, _AsciiColDefs):\r\n                    starts = self._coldefs.starts[:]\r\n                    spans = self._coldefs.spans\r\n                    format = self._coldefs.formats[indx].strip()\r\n    \r\n                    # The the index of the ""end"" column of the record, beyond\r\n                    # which we can\'t write\r\n                    end = super(FITS_rec, self).field(-1).itemsize\r\n                    starts.append(end + starts[-1])\r\n    \r\n                    if indx > 0:\r\n                        lead = (starts[indx] - starts[indx - 1] -\r\n                                spans[indx - 1])\r\n                    else:\r\n                        lead = 0\r\n    \r\n                    if lead < 0:\r\n                        warnings.warn(\r\n                            \'Column %r starting point overlaps the \'\r\n                            \'previous column.\' % (indx + 1))\r\n    \r\n                    trail = starts[indx + 1] - starts[indx] - spans[indx]\r\n    \r\n                    if trail < 0:\r\n                        warnings.warn(\r\n                            \'Column %r ending point overlaps the next \'\r\n                            \'column.\' % (indx + 1))\r\n    \r\n                    # TODO: It would be nice if these string column formatting\r\n                    # details were left to a specialized class, as is the case\r\n                    # with FormatX and FormatP\r\n                    if \'A\' in format:\r\n                        _pc = \'%-\'\r\n                    else:\r\n                        _pc = \'%\'\r\n    \r\n                    fmt = \'\'.join([_pc, format[1:], ASCII2STR[format[0]],\r\n                                   (\' \' * trail)])\r\n    \r\n                    # not using numarray.strings\'s num2char because the\r\n                    # result is not allowed to expand (as C/Python does).\r\n                    for jdx in xrange(len(dummy)):\r\n                        x = fmt % dummy[jdx]\r\n                        if len(x) > starts[indx + 1] - starts[indx]:\r\n                            raise ValueError(\r\n                                ""Value %r does not fit into the output\'s ""\r\n                                ""itemsize of %s."" % (x, spans[indx]))\r\n                        else:\r\n                            field[jdx] = x\r\n                    # Replace exponent separator in floating point numbers\r\n                    if \'D\' in format:\r\n>                       field.replace(encode_ascii(\'E\'), encode_ascii(\'D\'))\r\nE                       AttributeError: \'numpy.ndarray\' object has no attribute \'replace\'\r\n\r\nastropy/io/fits/fitsrec.py:1041: AttributeError\r\n________________________________________________________________________ TestSingleTable.test_read_from_fileobj _________________________________________________________________________\r\n\r\nself = <astropy.io.fits.tests.test_connect.TestSingleTable object at 0x116ecd0d0>\r\ntmpdir = local(\'/private/var/folders/zy/t1l3sx310d3d6p0kyxqzlrnr0000gr/T/pytest-17/test_read_from_fileobj0\')\r\n\r\n    def test_read_from_fileobj(self, tmpdir):\r\n        filename = str(tmpdir.join(\'test_read_from_fileobj.fits\'))\r\n        hdu = BinTableHDU(self.data)\r\n        hdu.writeto(filename)\r\n        with open(filename, \'rb\') as f:\r\n            t = Table.read(f)\r\n>       assert equal_data(t, self.data)\r\nE       assert equal_data(<Table masked=False length=4>\\n   a        b             c         \\n int64   st...  4.5\\n       3        c                6.7\\n       4        d                8.9, array([(1, u\'a\', 2.3), (2, u\'b\', 4.5), (3, u\'c\', 6.7), (4, u\'d\', 8.9)], \\n      dtype=[(\'a\', \'<i8\'), (\'b\', \'<U1\'), (\'c\', \'<f8\')]))\r\nE        +  where array([(1, u\'a\', 2.3), (2, u\'b\', 4.5), (3, u\'c\', 6.7), (4, u\'d\', 8.9)], \\n      dtype=[(\'a\', \'<i8\'), (\'b\', \'<U1\'), (\'c\', \'<f8\')]) = <astropy.io.fits.tests.test_connect.TestSingleTable object at 0x116ecd0d0>.data\r\n\r\nastropy/io/fits/tests/test_connect.py:130: AssertionError\r\n_______________________________________________________________________________ TestMultipleHDU.test_read _______________________________________________________________________________\r\n\r\nself = <astropy.io.fits.tests.test_connect.TestMultipleHDU object at 0x1178919d0>, tmpdir = local(\'/private/var/folders/zy/t1l3sx310d3d6p0kyxqzlrnr0000gr/T/pytest-17/test_read0\')\r\n\r\n    def test_read(self, tmpdir):\r\n        filename = str(tmpdir.join(\'test_read.fits\'))\r\n        self.hdus.writeto(filename)\r\n        with catch_warnings() as l:\r\n            t = Table.read(filename)\r\n        assert len(l) == 1\r\n        assert str(l[0].message).startswith(\r\n            \'hdu= was not specified but multiple tables are present, reading in first available table (hdu=1)\')\r\n>       assert equal_data(t, self.data1)\r\nE       assert equal_data(<Table masked=False length=4>\\n   a        b             c         \\n int64   st...  4.5\\n       3        c                6.7\\n       4        d                8.9, array([(1, u\'a\', 2.3), (2, u\'b\', 4.5), (3, u\'c\', 6.7), (4, u\'d\', 8.9)], \\n      dtype=[(\'a\', \'<i8\'), (\'b\', \'<U1\'), (\'c\', \'<f8\')]))\r\nE        +  where array([(1, u\'a\', 2.3), (2, u\'b\', 4.5), (3, u\'c\', 6.7), (4, u\'d\', 8.9)], \\n      dtype=[(\'a\', \'<i8\'), (\'b\', \'<U1\'), (\'c\', \'<f8\')]) = <astropy.io.fits.tests.test_connect.TestMultipleHDU object at 0x1178919d0>.data1\r\n\r\nastropy/io/fits/tests/test_connect.py:168: AssertionError\r\n________________________________________________________________________ TestMultipleHDU.test_read_with_hdu_1[1] ________________________________________________________________________\r\n\r\nself = <astropy.io.fits.tests.test_connect.TestMultipleHDU object at 0x1162e6410>\r\ntmpdir = local(\'/private/var/folders/zy/t1l3sx310d3d6p0kyxqzlrnr0000gr/T/pytest-17/test_read_with_hdu_1_1_0\'), hdu = 1\r\n\r\n    @pytest.mark.parametrize(\'hdu\', [1, \'first\'])\r\n    def test_read_with_hdu_1(self, tmpdir, hdu):\r\n        filename = str(tmpdir.join(\'test_read_with_hdu_1.fits\'))\r\n        self.hdus.writeto(filename)\r\n        with catch_warnings() as l:\r\n            t = Table.read(filename, hdu=hdu)\r\n        assert len(l) == 0\r\n>       assert equal_data(t, self.data1)\r\nE       assert equal_data(<Table masked=False length=4>\\n   a        b             c         \\n int64   st...  4.5\\n       3        c                6.7\\n       4        d                8.9, array([(1, u\'a\', 2.3), (2, u\'b\', 4.5), (3, u\'c\', 6.7), (4, u\'d\', 8.9)], \\n      dtype=[(\'a\', \'<i8\'), (\'b\', \'<U1\'), (\'c\', \'<f8\')]))\r\nE        +  where array([(1, u\'a\', 2.3), (2, u\'b\', 4.5), (3, u\'c\', 6.7), (4, u\'d\', 8.9)], \\n      dtype=[(\'a\', \'<i8\'), (\'b\', \'<U1\'), (\'c\', \'<f8\')]) = <astropy.io.fits.tests.test_connect.TestMultipleHDU object at 0x1162e6410>.data1\r\n\r\nastropy/io/fits/tests/test_connect.py:184: AssertionError\r\n______________________________________________________________________ TestMultipleHDU.test_read_with_hdu_1[first] ______________________________________________________________________\r\n\r\nself = <astropy.io.fits.tests.test_connect.TestMultipleHDU object at 0x116f3d390>\r\ntmpdir = local(\'/private/var/folders/zy/t1l3sx310d3d6p0kyxqzlrnr0000gr/T/pytest-17/test_read_with_hdu_1_first_0\'), hdu = \'first\'\r\n\r\n    @pytest.mark.parametrize(\'hdu\', [1, \'first\'])\r\n    def test_read_with_hdu_1(self, tmpdir, hdu):\r\n        filename = str(tmpdir.join(\'test_read_with_hdu_1.fits\'))\r\n        self.hdus.writeto(filename)\r\n        with catch_warnings() as l:\r\n            t = Table.read(filename, hdu=hdu)\r\n        assert len(l) == 0\r\n>       assert equal_data(t, self.data1)\r\nE       assert equal_data(<Table masked=False length=4>\\n   a        b             c         \\n int64   st...  4.5\\n       3        c                6.7\\n       4        d                8.9, array([(1, u\'a\', 2.3), (2, u\'b\', 4.5), (3, u\'c\', 6.7), (4, u\'d\', 8.9)], \\n      dtype=[(\'a\', \'<i8\'), (\'b\', \'<U1\'), (\'c\', \'<f8\')]))\r\nE        +  where array([(1, u\'a\', 2.3), (2, u\'b\', 4.5), (3, u\'c\', 6.7), (4, u\'d\', 8.9)], \\n      dtype=[(\'a\', \'<i8\'), (\'b\', \'<U1\'), (\'c\', \'<f8\')]) = <astropy.io.fits.tests.test_connect.TestMultipleHDU object at 0x116f3d390>.data1\r\n\r\nastropy/io/fits/tests/test_connect.py:184: AssertionError\r\n__________________________________________________________________________ TestTableFunctions.test_ascii_table __________________________________________________________________________\r\n\r\nself = <astropy.io.fits.tests.test_table.TestTableFunctions object at 0x116a2b250>\r\n\r\n    def test_ascii_table(self):\r\n        # ASCII table\r\n        a = fits.open(self.data(\'ascii.fits\'))\r\n        ra1 = np.rec.array([\r\n            (10.123000144958496, 37),\r\n            (5.1999998092651367, 23),\r\n            (15.609999656677246, 17),\r\n            (0.0, 0),\r\n            (345.0, 345)], names=\'c1, c2\')\r\n        assert comparerecords(a[1].data, ra1)\r\n    \r\n        # Test slicing\r\n>       a2 = a[1].data[2:][2:]\r\n\r\nastropy/io/fits/tests/test_table.py:254: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\r\n\r\nself = array([(10.123, 37), (5.1999998, 23), (15.61, 17), (0.0, 0), (345.0, 345)], \r\n ... \'formats\':[\'S10\',\'S5\'], \'offsets\':[0,11], \'itemsize\':16}).view(numpy.recarray), start = 2\r\nend = 9223372036854775807\r\n\r\n    def __getslice__(self, start, end):\r\n>       return self[slice(start, end)]\r\n\r\nastropy/io/fits/fitsrec.py:553: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\r\n\r\nself = array([(10.123, 37), (5.1999998, 23), (15.61, 17), (0.0, 0), (345.0, 345)], \r\n ... \'formats\':[\'S10\',\'S5\'], \'offsets\':[0,11], \'itemsize\':16}).view(numpy.recarray)\r\nkey = slice(2, 9223372036854775807, None)\r\n\r\n    def __getitem__(self, key):\r\n        if isinstance(key, string_types):\r\n            return self.field(key)\r\n        elif isinstance(key, (slice, np.ndarray, tuple, list)):\r\n            # Have to view as a recarray then back as a FITS_rec, otherwise the\r\n            # circular reference fix/hack in FITS_rec.field() won\'t preserve\r\n            # the slice\r\n            subtype = type(self)\r\n>           out = self.view(np.recarray).__getitem__(key).view(subtype)\r\n\r\nastropy/io/fits/fitsrec.py:490: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\r\n\r\nself = array([ (\'.15610E+02\', <read-write buffer ptr 0x10ae9a6aa, size 1 at 0x1171ce6...], \r\n      dtype=[(\'a\', \'S10\'), (\'f1\', \'V1\'), (\'b\', \'S5\')]).view(numpy.recarray)\r\ndtype = <class \'astropy.io.fits.fitsrec.FITS_rec\'>, type = None\r\n\r\n    def view(self, dtype=None, type=None):\r\n        if dtype is None:\r\n            return ndarray.view(self, type)\r\n        elif type is None:\r\n            try:\r\n                if issubclass(dtype, ndarray):\r\n>                   return ndarray.view(self, dtype)\r\n\r\n/Users/tom/Library/Python/2.7/lib/python/site-packages/numpy/core/records.py:534: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\r\n\r\nself = <[AttributeError(""\'NoneType\' object has no attribute \'names\'"") raised in repr()] SafeRepr object at 0x1171d27e8>\r\nobj = array([ (\'.15610E+02\', <read-write buffer ptr 0x10ae9a6aa, size 1 at 0x1171ce7...], \r\n      dtype=[(\'a\', \'S10\'), (\'f1\', \'V1\'), (\'b\', \'S5\')]).view(numpy.recarray)\r\n\r\n    def __array_finalize__(self, obj):\r\n        if obj is None:\r\n            return\r\n    \r\n        if isinstance(obj, FITS_rec):\r\n            self._convert = obj._convert\r\n            self._heapoffset = obj._heapoffset\r\n            self._heapsize = obj._heapsize\r\n            self._coldefs = obj._coldefs\r\n            self._nfields = obj._nfields\r\n            self._gap = obj._gap\r\n            self._uint = obj._uint\r\n            self.formats = obj.formats\r\n        else:\r\n            # This will allow regular ndarrays with fields, rather than\r\n            # just other FITS_rec objects\r\n            self._nfields = len(obj.dtype.names)\r\n            self._convert = [None] * len(obj.dtype.names)\r\n    \r\n            self._heapoffset = getattr(obj, \'_heapoffset\', 0)\r\n            self._heapsize = getattr(obj, \'_heapsize\', 0)\r\n    \r\n            self._coldefs = None\r\n            self._gap = getattr(obj, \'_gap\', 0)\r\n            self._uint = getattr(obj, \'_uint\', False)\r\n    \r\n            # Bypass setattr-based assignment to fields; see #86\r\n            self.formats = None\r\n    \r\n            attrs = [\'_convert\', \'_coldefs\', \'_gap\']\r\n            for attr in attrs:\r\n                if hasattr(obj, attr):\r\n                    value = getattr(obj, attr, None)\r\n                    if value is None:\r\n                        warnings.warn(\'Setting attribute %s as None\' % attr, AstropyUserWarning)\r\n                    setattr(self, attr, value)\r\n    \r\n            if self._coldefs is None:\r\n>               self._coldefs = ColDefs(self)\r\n\r\nastropy/io/fits/fitsrec.py:273: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\r\n\r\nself = ColDefs(\r\n    name = \'a\'; format = \'10A\'\r\n), input = <[AttributeError(""\'NoneType\' object has no attribute \'names\'"") raised in repr()] SafeRepr object at 0x1171d2b48>, tbtype = None\r\nascii = False\r\n\r\n    def __init__(self, input, tbtype=None, ascii=False):\r\n        """"""\r\n            Parameters\r\n            ----------\r\n    \r\n            input : sequence of `Column`, `ColDefs`, other\r\n                An existing table HDU, an existing `ColDefs`, or any multi-field\r\n                Numpy array or `numpy.recarray`.\r\n    \r\n            **(Deprecated)** tbtype : str, optional\r\n                which table HDU, ``""BinTableHDU""`` (default) or\r\n                ``""TableHDU""`` (text table).\r\n                Now ColDefs for a normal (binary) table by default, but converted\r\n                automatically to ASCII table ColDefs in the appropriate contexts\r\n                (namely, when creating an ASCII table).\r\n    \r\n            ascii : bool\r\n            """"""\r\n    \r\n        from .hdu.table import _TableBaseHDU\r\n        from .fitsrec import FITS_rec\r\n    \r\n        if isinstance(input, ColDefs):\r\n            self._init_from_coldefs(input)\r\n        elif (isinstance(input, FITS_rec) and hasattr(input, \'_coldefs\') and\r\n                input._coldefs):\r\n            # If given a FITS_rec object we can directly copy its columns, but\r\n            # only if its columns have already been defined, otherwise this\r\n            # will loop back in on itself and blow up\r\n            self._init_from_coldefs(input._coldefs)\r\n        elif isinstance(input, np.ndarray) and input.dtype.fields is not None:\r\n            # Construct columns from the fields of a record array\r\n>           self._init_from_array(input)\r\n\r\nastropy/io/fits/column.py:950: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\r\n\r\nself = ColDefs(\r\n    name = \'a\'; format = \'10A\'\r\n), array = <[AttributeError(""\'NoneType\' object has no attribute \'names\'"") raised in repr()] SafeRepr object at 0x116bda098>\r\n\r\n    def _init_from_array(self, array):\r\n        self.columns = []\r\n        for idx in range(len(array.dtype)):\r\n            cname = array.dtype.names[idx]\r\n            ftype = array.dtype.fields[cname][0]\r\n>           format = self._col_format_cls.from_recformat(ftype)\r\n\r\nastropy/io/fits/column.py:981: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\r\n\r\ncls = <class \'astropy.io.fits.column._ColumnFormat\'>, recformat = dtype(\'V1\')\r\n\r\n    @classmethod\r\n    def from_recformat(cls, recformat):\r\n        """"""Creates a column format from a Numpy record dtype format.""""""\r\n    \r\n>       return cls(_convert_format(recformat, reverse=True))\r\n\r\nastropy/io/fits/column.py:195: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\r\n\r\nformat = dtype(\'V1\'), reverse = True\r\n\r\n    def _convert_format(format, reverse=False):\r\n        """"""\r\n        Convert FITS format spec to record format spec.  Do the opposite if\r\n        reverse=True.\r\n        """"""\r\n    \r\n        if reverse:\r\n>           return _convert_record2fits(format)\r\n\r\nastropy/io/fits/column.py:1931: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\r\n\r\nformat = dtype(\'V1\')\r\n\r\n    def _convert_record2fits(format):\r\n        """"""\r\n        Convert record format spec to FITS format spec.\r\n        """"""\r\n    \r\n        recformat, kind, dtype = _dtype_to_recformat(format)\r\n        shape = dtype.shape\r\n        option = str(dtype.base.itemsize)\r\n    \r\n        ndims = len(shape)\r\n        repeat = 1\r\n        if ndims > 0:\r\n            nel = np.array(shape, dtype=\'i8\').prod()\r\n            if nel > 1:\r\n                repeat = nel\r\n    \r\n        if kind == \'a\':\r\n            # This is a kludge that will place string arrays into a\r\n            # single field, so at least we won\'t lose data.  Need to\r\n            # use a TDIM keyword to fix this, declaring as (slength,\r\n            # dim1, dim2, ...)  as mwrfits does\r\n    \r\n            ntot = int(repeat) * int(option)\r\n    \r\n            output_format = str(ntot) + \'A\'\r\n        elif recformat in NUMPY2FITS:  # record format\r\n            if repeat != 1:\r\n                repeat = str(repeat)\r\n            else:\r\n                repeat = \'\'\r\n            output_format = repeat + NUMPY2FITS[recformat]\r\n        else:\r\n>           raise ValueError(\'Illegal format %s.\' % format)\r\nE           ValueError: Illegal format |V1.\r\n\r\nastropy/io/fits/column.py:1895: ValueError\r\n____________________________________________________________________ TestTableFunctions.test_new_table_from_recarray ____________________________________________________________________\r\n\r\nself = <astropy.io.fits.tests.test_table.TestTableFunctions object at 0x11603aa10>\r\n\r\n    def test_new_table_from_recarray(self):\r\n        bright = np.rec.array([(1, \'Serius\', -1.45, \'A1V\'),\r\n                               (2, \'Canopys\', -0.73, \'F0Ib\'),\r\n                               (3, \'Rigil Kent\', -0.1, \'G2V\')],\r\n                              formats=\'int16,a20,float32,a10\',\r\n                              names=\'order,name,mag,Sp\')\r\n        hdu = fits.TableHDU.from_columns(bright, nrows=2)\r\n    \r\n        # Verify that all ndarray objects within the HDU reference the\r\n        # same ndarray.\r\n        assert (id(hdu.data._coldefs.columns[0].array) ==\r\n                id(hdu.data._coldefs._arrays[0]))\r\n        assert (id(hdu.data._coldefs.columns[0].array) ==\r\n                id(hdu.columns.columns[0].array))\r\n        assert (id(hdu.data._coldefs.columns[0].array) ==\r\n                id(hdu.columns._arrays[0]))\r\n    \r\n        # Ensure I can change the value of one data element and it effects\r\n        # all of the others.\r\n        hdu.data[0][0] = 213\r\n    \r\n        assert hdu.data[0][0] == 213\r\n        assert hdu.data._coldefs._arrays[0][0] == 213\r\n        assert hdu.data._coldefs.columns[0].array[0] == 213\r\n        assert hdu.columns._arrays[0][0] == 213\r\n        assert hdu.columns.columns[0].array[0] == 213\r\n    \r\n        hdu.data._coldefs._arrays[0][0] = 100\r\n    \r\n        assert hdu.data[0][0] == 100\r\n        assert hdu.data._coldefs._arrays[0][0] == 100\r\n        assert hdu.data._coldefs.columns[0].array[0] == 100\r\n        assert hdu.columns._arrays[0][0] == 100\r\n        assert hdu.columns.columns[0].array[0] == 100\r\n    \r\n        hdu.data._coldefs.columns[0].array[0] = 500\r\n        assert hdu.data[0][0] == 500\r\n        assert hdu.data._coldefs._arrays[0][0] == 500\r\n        assert hdu.data._coldefs.columns[0].array[0] == 500\r\n        assert hdu.columns._arrays[0][0] == 500\r\n        assert hdu.columns.columns[0].array[0] == 500\r\n    \r\n        hdu.columns._arrays[0][0] = 600\r\n        assert hdu.data[0][0] == 600\r\n        assert hdu.data._coldefs._arrays[0][0] == 600\r\n        assert hdu.data._coldefs.columns[0].array[0] == 600\r\n        assert hdu.columns._arrays[0][0] == 600\r\n        assert hdu.columns.columns[0].array[0] == 600\r\n    \r\n        hdu.columns.columns[0].array[0] = 800\r\n        assert hdu.data[0][0] == 800\r\n        assert hdu.data._coldefs._arrays[0][0] == 800\r\n        assert hdu.data._coldefs.columns[0].array[0] == 800\r\n        assert hdu.columns._arrays[0][0] == 800\r\n        assert hdu.columns.columns[0].array[0] == 800\r\n    \r\n        assert (hdu.data.field(0) ==\r\n                np.array([800, 2], dtype=np.int16)).all()\r\n        assert hdu.data[0][1] == \'Serius\'\r\n        assert hdu.data[1][1] == \'Canopys\'\r\n        assert (hdu.data.field(2) ==\r\n                np.array([-1.45, -0.73], dtype=np.float32)).all()\r\n        assert hdu.data[0][3] == \'A1V\'\r\n        assert hdu.data[1][3] == \'F0Ib\'\r\n    \r\n        with ignore_warnings():\r\n            hdu.writeto(self.temp(\'toto.fits\'), clobber=True)\r\n    \r\n        with fits.open(self.temp(\'toto.fits\')) as hdul:\r\n            assert (hdul[1].data.field(0) ==\r\n                    np.array([800, 2], dtype=np.int16)).all()\r\n>           assert hdul[1].data[0][1] == \'Serius\'\r\nE           assert \'Serius              \' == \'Serius\'\r\nE             - Serius              \r\nE             + Serius\r\n\r\nastropy/io/fits/tests/test_table.py:428: AssertionError\r\n__________________________________________________________________________ TestTableFunctions.test_new_fitsrec __________________________________________________________________________\r\n\r\nself = <astropy.io.fits.tests.test_table.TestTableFunctions object at 0x115cfe290>\r\n\r\n    def test_new_fitsrec(self):\r\n        """"""\r\n            Tests creating a new FITS_rec object from a multi-field ndarray.\r\n            """"""\r\n    \r\n        h = fits.open(self.data(\'tb.fits\'))\r\n        data = h[1].data\r\n        new_data = np.array([(3, \'qwe\', 4.5, False)], dtype=data.dtype)\r\n        appended = np.append(data, new_data).view(fits.FITS_rec)\r\n>       assert repr(appended).startswith(\'FITS_rec(\')\r\nE       assert <built-in method startswith of str object at 0x1162dd2b8>(\'FITS_rec(\')\r\nE        +  where <built-in method startswith of str object at 0x1162dd2b8> = ""array([(1, \'abc\', 1.1, False), (2, \'xy \', 2.0999999, True),\\n (3, \'qwe\', 4.5, False)], \\n      dtype=[(\'c1\', \'>i4\'), (\'c2\', \'S3\'), (\'c3\', \'>f4\'), (\'c4\', \'i1\')]).view(numpy.recarray)"".startswith\r\nE        +    where ""array([(1, \'abc\', 1.1, False), (2, \'xy \', 2.0999999, True),\\n (3, \'qwe\', 4.5, False)], \\n      dtype=[(\'c1\', \'>i4\'), (\'c2\', \'S3\'), (\'c3\', \'>f4\'), (\'c4\', \'i1\')]).view(numpy.recarray)"" = repr(array([(1, \'abc\', 1.1, False), (2, \'xy \', 2.0999999, True),\\n (3, \'qwe\', 4.5, F...(\'c1\', \'>i4\'), (\'c2\', \'S3\'), (\'c3\', \'>f4\'), (\'c4\', \'i1\')]).view(numpy.recarray))\r\n\r\nastropy/io/fits/tests/test_table.py:456: AssertionError\r\n_____________________________________________________________________ TestTableFunctions.test_string_column_padding _____________________________________________________________________\r\n\r\nself = <astropy.io.fits.tests.test_table.TestTableFunctions object at 0x1169c1810>\r\n\r\n    def test_string_column_padding(self):\r\n        a = [\'img1\', \'img2\', \'img3a\', \'p\']\r\n        s = \'img1\\x00\\x00\\x00\\x00\\x00\\x00\' \\\r\n            \'img2\\x00\\x00\\x00\\x00\\x00\\x00\' \\\r\n            \'img3a\\x00\\x00\\x00\\x00\\x00\' \\\r\n            \'p\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\'\r\n    \r\n        acol = fits.Column(name=\'MEMNAME\', format=\'A10\',\r\n                           array=chararray.array(a))\r\n        ahdu = fits.BinTableHDU.from_columns([acol])\r\n        assert ahdu.data.tostring().decode(\'raw-unicode-escape\') == s\r\n        ahdu.writeto(self.temp(\'newtable.fits\'))\r\n        with fits.open(self.temp(\'newtable.fits\')) as hdul:\r\n            assert hdul[1].data.tostring().decode(\'raw-unicode-escape\') == s\r\n            assert (hdul[1].data[\'MEMNAME\'] == a).all()\r\n        del hdul\r\n    \r\n        ahdu = fits.TableHDU.from_columns([acol])\r\n        with ignore_warnings():\r\n            ahdu.writeto(self.temp(\'newtable.fits\'), clobber=True)\r\n    \r\n        with fits.open(self.temp(\'newtable.fits\')) as hdul:\r\n            assert (hdul[1].data.tostring().decode(\'raw-unicode-escape\') ==\r\n                    s.replace(\'\\x00\', \' \'))\r\n>           assert (hdul[1].data[\'MEMNAME\'] == a).all()\r\nE           assert <built-in method all of numpy.ndarray object at 0x1162e02b0>()\r\nE            +  where <built-in method all of numpy.ndarray object at 0x1162e02b0> = array([\'img1      \', \'img2      \', \'img3a     \', \'p         \'], \\n      dtype=\'|S10\') == [\'img1\', \'img2\', \'img3a\', \'p\'].all\r\n\r\nastropy/io/fits/tests/test_table.py:1594: AssertionError\r\n____________________________________________________________________ TestTableFunctions.test_string_array_round_trip ____________________________________________________________________\r\n\r\nself = <astropy.io.fits.tests.test_table.TestTableFunctions object at 0x116f3d2d0>\r\n\r\n    def test_string_array_round_trip(self):\r\n        """"""Regression test for https://aeon.stsci.edu/ssb/trac/pyfits/ticket/201""""""\r\n    \r\n        data = [[\'abc\', \'def\', \'ghi\'],\r\n                [\'jkl\', \'mno\', \'pqr\'],\r\n                [\'stu\', \'vwx\', \'yz \']]\r\n    \r\n        recarr = np.rec.array([(data,), (data,)], formats=[\'(3,3)S3\'])\r\n    \r\n        t = fits.BinTableHDU(data=recarr)\r\n        t.writeto(self.temp(\'test.fits\'))\r\n    \r\n        with fits.open(self.temp(\'test.fits\')) as h:\r\n            assert \'TDIM1\' in h[1].header\r\n            assert h[1].header[\'TDIM1\'] == \'(3,3,3)\'\r\n            assert len(h[1].data) == 2\r\n            assert len(h[1].data[0]) == 1\r\n>           assert (h[1].data.field(0)[0] ==\r\n                    recarr.field(0)[0].decode(\'ascii\')).all()\r\nE           AttributeError: \'numpy.ndarray\' object has no attribute \'decode\'\r\n\r\nastropy/io/fits/tests/test_table.py:1687: AttributeError\r\n___________________________________________________________________ TestTableFunctions.test_new_table_with_nd_column ____________________________________________________________________\r\n\r\nself = <astropy.io.fits.tests.test_table.TestTableFunctions object at 0x116f50990>\r\n\r\n    def test_new_table_with_nd_column(self):\r\n        """"""Regression test for\r\n            https://github.com/spacetelescope/PyFITS/issues/3\r\n            """"""\r\n    \r\n        arra = np.array([\'a\', \'b\'], dtype=\'|S1\')\r\n        arrb = np.array([[\'a\', \'bc\'], [\'cd\', \'e\']], dtype=\'|S2\')\r\n        arrc = np.array([[[1, 2], [3, 4]], [[5, 6], [7, 8]]])\r\n    \r\n        cols = [\r\n            fits.Column(name=\'str\', format=\'1A\', array=arra),\r\n            fits.Column(name=\'strarray\', format=\'4A\', dim=\'(2,2)\',\r\n                        array=arrb),\r\n            fits.Column(name=\'intarray\', format=\'4I\', dim=\'(2, 2)\',\r\n                        array=arrc)\r\n        ]\r\n    \r\n        hdu = fits.BinTableHDU.from_columns(fits.ColDefs(cols))\r\n        hdu.writeto(self.temp(\'test.fits\'))\r\n    \r\n        with fits.open(self.temp(\'test.fits\')) as h:\r\n            # Need to force string arrays to byte arrays in order to compare\r\n            # correctly on Python 3\r\n>           assert (h[1].data[\'str\'].encode(\'ascii\') == arra).all()\r\nE           AttributeError: \'numpy.ndarray\' object has no attribute \'encode\'\r\n\r\nastropy/io/fits/tests/test_table.py:1727: AttributeError\r\n_____________________________________________________________________ TestTableFunctions.test_dump_load_round_trip ______________________________________________________________________\r\n\r\nself = <astropy.io.fits.tests.test_table.TestTableFunctions object at 0x1164ef390>\r\n\r\n    def test_dump_load_round_trip(self):\r\n        """"""\r\n            A simple test of the dump/load methods; dump the data, column, and\r\n            header files and try to reload the table from them.\r\n            """"""\r\n    \r\n        hdul = fits.open(self.data(\'table.fits\'))\r\n        tbhdu = hdul[1]\r\n        datafile = self.temp(\'data.txt\')\r\n        cdfile = self.temp(\'coldefs.txt\')\r\n        hfile = self.temp(\'header.txt\')\r\n    \r\n        tbhdu.dump(datafile, cdfile, hfile)\r\n    \r\n        new_tbhdu = fits.BinTableHDU.load(datafile, cdfile, hfile)\r\n    \r\n>       assert comparerecords(tbhdu.data, new_tbhdu.data)\r\nE       assert comparerecords(array([(\'NGC1001\', 11.1), (\'NGC1002\', 12.3), (\'NGC1003\', 15.2)], \\n      dtype=[(\'target\', \'S20\'), (\'V_mag\', \'>f4\')]).view(numpy.recarray), rec.array([(\'NGC1001             \', 11.1), (\'NGC1002             \', 12.3),\\n (\'...            \', 15.2)], \\n          dtype=[(\'target\', \'|S20\'), (\'V_mag\', \'<f4\')]))\r\nE        +  where array([(\'NGC1001\', 11.1), (\'NGC1002\', 12.3), (\'NGC1003\', 15.2)], \\n      dtype=[(\'target\', \'S20\'), (\'V_mag\', \'>f4\')]).view(numpy.recarray) = <astropy.io.fits.hdu.table.BinTableHDU object at 0x1164effd0>.data\r\nE        +  and   rec.array([(\'NGC1001             \', 11.1), (\'NGC1002             \', 12.3),\\n (\'...            \', 15.2)], \\n          dtype=[(\'target\', \'|S20\'), (\'V_mag\', \'<f4\')]) = <astropy.io.fits.hdu.table.BinTableHDU object at 0x1164efa50>.data\r\n\r\nastropy/io/fits/tests/test_table.py:1845: AssertionError\r\n------------------------------------------------------------------------------------ Captured stdout ------------------------------------------------------------------------------------\r\nfielda:  [\'NGC1001\' \'NGC1002\' \'NGC1003\']\r\nfieldb:  [\'NGC1001             \' \'NGC1002             \' \'NGC1003             \']\r\nfield 0 differs\r\n_______________________________________________________________________ TestTableFunctions.test_load_guess_format _______________________________________________________________________\r\n\r\nself = <astropy.io.fits.tests.test_table.TestTableFunctions object at 0x1164ef090>\r\n\r\n    def test_load_guess_format(self):\r\n        """"""\r\n            Tests loading a table dump with no supplied coldefs or header, so that\r\n            the table format has to be guessed at.  There is of course no exact\r\n            science to this; the table that\'s produced simply uses sensible guesses\r\n            for that format.  Ideally this should never have to be used.\r\n            """"""\r\n    \r\n        # Create a table containing a variety of data types.\r\n        a0 = np.array([False, True, False], dtype=np.bool)\r\n        c0 = fits.Column(name=\'c0\', format=\'L\', array=a0)\r\n    \r\n        # Format X currently not supported by the format\r\n        # a1 = np.array([[0], [1], [0]], dtype=np.uint8)\r\n        # c1 = fits.Column(name=\'c1\', format=\'X\', array=a1)\r\n    \r\n        a2 = np.array([1, 128, 255], dtype=np.uint8)\r\n        c2 = fits.Column(name=\'c2\', format=\'B\', array=a2)\r\n        a3 = np.array([-30000, 1, 256], dtype=np.int16)\r\n        c3 = fits.Column(name=\'c3\', format=\'I\', array=a3)\r\n        a4 = np.array([-123123123, 1234, 123123123], dtype=np.int32)\r\n        c4 = fits.Column(name=\'c4\', format=\'J\', array=a4)\r\n        a5 = np.array([\'a\', \'abc\', \'ab\'])\r\n        c5 = fits.Column(name=\'c5\', format=\'A3\', array=a5)\r\n        a6 = np.array([1.1, 2.2, 3.3], dtype=np.float64)\r\n        c6 = fits.Column(name=\'c6\', format=\'D\', array=a6)\r\n        a7 = np.array([1.1 + 2.2j, 3.3 + 4.4j, 5.5 + 6.6j],\r\n                      dtype=np.complex128)\r\n        c7 = fits.Column(name=\'c7\', format=\'M\', array=a7)\r\n        a8 = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]], dtype=np.int32)\r\n        c8 = fits.Column(name=\'c8\', format=\'PJ()\', array=a8)\r\n    \r\n        tbhdu = fits.BinTableHDU.from_columns([c0, c2, c3, c4, c5, c6, c7, c8])\r\n    \r\n        datafile = self.temp(\'data.txt\')\r\n        tbhdu.dump(datafile)\r\n    \r\n        new_tbhdu = fits.BinTableHDU.load(datafile)\r\n    \r\n        # In this particular case the record data at least should be equivalent\r\n>       assert comparerecords(tbhdu.data, new_tbhdu.data)\r\nE       assert comparerecords(rec.array([ (False, 1, -30000, -123123123, \'a\', 1.1000000000000001, (1.1000000...4\', \'<i4\'), (\'c5\', \'|S3\'), (\'c6\', \'<f8\'), (\'c7\', \'<c16\'), (\'c8\', \'<i4\', (2,))]), rec.array([ (False, 1, -30000, -123123123, \'a  \', 1.1000000000000001, (1.10000...3\', \'<i4\'), (\'f4\', \'|S3\'), (\'f5\', \'<f8\'), (\'f6\', \'<c16\'), (\'f7\', \'|u1\', (3,))]))\r\nE        +  where rec.array([ (False, 1, -30000, -123123123, \'a\', 1.1000000000000001, (1.1000000...4\', \'<i4\'), (\'c5\', \'|S3\'), (\'c6\', \'<f8\'), (\'c7\', \'<c16\'), (\'c8\', \'<i4\', (2,))]) = <astropy.io.fits.hdu.table.BinTableHDU object at 0x1169ac890>.data\r\nE        +  and   rec.array([ (False, 1, -30000, -123123123, \'a  \', 1.1000000000000001, (1.10000...3\', \'<i4\'), (\'f4\', \'|S3\'), (\'f5\', \'<f8\'), (\'f6\', \'<c16\'), (\'f7\', \'|u1\', (3,))]) = <astropy.io.fits.hdu.table.BinTableHDU object at 0x1171d0590>.data\r\n\r\nastropy/io/fits/tests/test_table.py:1911: AssertionError\r\n------------------------------------------------------------------------------------ Captured stdout ------------------------------------------------------------------------------------\r\nfielda:  [\'a\' \'abc\' \'ab\']\r\nfieldb:  [\'a  \' \'abc\' \'ab \']\r\nfield 4 differs\r\n===================================================== 13 failed, 8501 passed, 123 skipped, 43 xfailed, 1 xpassed in 329.06 seconds ======================================================\r\n```'"
3417,56219805,olebole,olebole,2015-02-02 10:35:33,2015-02-03 21:02:33,2015-02-03 19:39:27,closed,,,6,Affects-dev;Bug;io.ascii,https://api.github.com/repos/astropy/astropy/issues/3417,b'Use slow fallback of io.ascii.read if sem_open is not available.',"b'A Fix for #3416 \r\nOn Hurd, there is still no implementation of sem_open available. This\r\ncauses multiprocessing.Queue() (in cparser.pyx) to fail with an\r\nImportError. In this case, we can just use the slow reader.'"
3414,56142288,mdmueller,astrofrog,2015-01-31 22:28:40,2015-02-13 21:50:41,2015-02-01 18:41:54,closed,,v1.0.0,1,Affects-dev;Bug;io.ascii,https://api.github.com/repos/astropy/astropy/issues/3414,b'Fixed fast reader comment misordering issue',b'This addresses #3372.'
3413,56125604,astrofrog,astrofrog,2015-01-31 13:54:15,2015-02-03 21:17:10,2015-02-03 20:47:01,closed,,v1.0.0,7,Affects-dev;Bug;visualization,https://api.github.com/repos/astropy/astropy/issues/3413,b'Fix issue with ImageNormalize not working with Matplotlib < 1.2 because Normalize used to be an old-style class',b'Will fix https://github.com/astropy/photutils/issues/247'
3412,56096653,mdmueller,embray,2015-01-30 22:58:55,2015-02-02 18:35:47,2015-02-02 17:21:14,closed,,v1.0.0,5,Affects-dev;Bug;io.ascii,https://api.github.com/repos/astropy/astropy/issues/3412,b'Fixed segfault issue with empty quoted fields',b'This should fix #3407.'
3411,56091635,mdboom,astrofrog,2015-01-30 22:12:53,2015-03-03 16:19:47,2015-02-01 18:38:20,closed,mdboom,v1.0.0,5,Affects-dev;Affects-release;Bug;io.ascii,https://api.github.com/repos/astropy/astropy/issues/3411,b'Ignore BeautifulSoup4 DeprecationWarnings on Python 3.4',"b""Partial fix for #3405, along with #3406.\r\n\r\nBeautifulSoup4 uses some deprecated kwargs to the stdlib html module.  There's not much we can do to work around them until BeautifulSoup updates itself, so we just add these to the list of warnings to ignore.\r\n\r\nThis was missed because we only test optional dependencies on Travis on Python 3.3, not 3.4.  This also update `.travis.yml` to use Python 3.4 instead.  @astrofrog, @embray: is that good enough, or should we do optional dependencies on both 3.3 and 3.4?"""
3407,56084386,PBarmby,embray,2015-01-30 21:03:04,2015-02-02 17:24:31,2015-02-02 17:22:39,closed,mdmueller,v1.0.0,9,Affects-dev;Bug;io.ascii,https://api.github.com/repos/astropy/astropy/issues/3407,b'table read failure with ascii.commented_header format',"b'I have a file that looks like this:\r\n```\r\n# a b c d e f g h i j k l m n o\r\nNGC14 108.13 -45.83 1.41 1.05 4.05E+20 12.8 T88 IB(s)m 10.0 2.4e+09 0.053 256 1.2e-14  """"  \r\nNGC45 55.89 -80.67 4.26 2.95 2.24E+20 8.1 T92  SA(s)dm 8.0 3.8e+09 0.012 39 2.4e-15  """"  \r\nNGC55 332.67 -75.74 16.18 2.81 1.72E+20 1.48 MM  SB(s)m 9.0 3.0e+09 0.076 57 1.6e-15  """"  \r\n```\r\nand I find that\r\n```\r\nfrom astropy.table import Table\r\ntest = Table.read(\'test\',format=\'ascii\')\r\n```\r\nworks fine, while using `format=\'ascii.commented_header\'` results in an ipython crash. This problem happens in astropy 1.0rc1 but *not* in 0.4.4. I\'m using anaconda python under OS X 10.6.8.'"
3406,56079964,mdboom,astrofrog,2015-01-30 20:20:21,2015-03-03 16:19:40,2015-02-03 19:20:39,closed,mdboom,v1.0.0,3,Affects-dev;Bug;convolution;testing,https://api.github.com/repos/astropy/astropy/issues/3406,b'Allow a memory error when allocating large array',"b""A fix for one of the failures mentioned in #3405.\r\n\r\nOne of the convolve tests allocates a large array, and then passes it to convolve expecting a ValueError to be raised because it is so large.  On @migueldvb's machine at least, the allocation of the large array itself fails with a MemoryError.  How much RAM does that machine have @migueldvb?  Do you think that's a false positive?  If in fact memory is tight, than this is reasonable behavior all around and the test should probably pass.\r\n\r\nCc: @keflavich as the last to touch this file."""
3405,56078030,migueldvb,astrofrog,2015-01-30 20:02:08,2015-02-03 23:01:39,2015-02-03 23:01:39,closed,mdboom,v1.0.0,5,Affects-release;Bug;io.ascii;testing,https://api.github.com/repos/astropy/astropy/issues/3405,b'test failures in 1.0rc1 with python 3.4.2',b'There are several test failures using python version 3.4.2 on an arch linux system.\r\nThe full log of the output from the command `python setup.py test` can be found here:\r\nhttp://sprunge.us/KjWj'
3399,55981601,EricDepagne,eteq,2015-01-30 01:08:26,2015-05-29 20:41:33,2015-05-29 20:41:33,closed,,,15,Bug;coordinates,https://api.github.com/repos/astropy/astropy/issues/3399,b'Error when creating a SkyCoord object.',"b'The combination of an astroquery.Simbad.simbad() and the creation of a SkyCoord object yields some strange results depending on the use of python3 or python 2.\r\n\r\nThe following works fine with (i)python2 :\r\n\r\n```\r\nIn [3]: star2 = \'BPS CS 22878-027\'\r\nIn [4]: rid2 = Simbad.query_object(star2)\r\nIn [5]: ra2 = rid2[\'RA\']\r\nIn [6]: dec2 = rid2[\'DEC\']\r\nIn [7]: c2 = SkyCoord(ra2, dec2, frame=\'icrs\', unit=(u.hourangle, u.deg))\r\nIn [8]: star =\'HE 1506-0113\'\r\nIn [9]: rid = Simbad.query_object(star)\r\nIn [10]: ra = rid[\'RA\']\r\nIn [11]: dec = rid[\'DEC\']\r\nIn [12]: c = SkyCoord(ra, dec, frame=\'icrs\', unit=(u.hourangle, u.deg))\r\n```\r\n\r\nwhereas with (i)python 3, the following works:\r\n\r\n```\r\nIn [10]: star2 = \'BPS CS 22878-027\'\r\nIn [11]: rid2 = Simbad.query_object(star2)\r\nIn [12]: ra2 = rid2[\'RA\']\r\nIn [13]: dec2 = rid2[\'DEC\']\r\nIn [14]: c2 = SkyCoord(ra2, dec2, frame=\'icrs\', unit=(u.hourangle, u.deg))\r\n```\r\n\r\nBut the other one :\r\n```\r\nIn [5]: star =\'HE 1506-0113\'\r\nIn [6]: rid = Simbad.query_object(star)\r\nIn [7]: ra = rid[\'RA\']\r\nIn [8]: dec = rid[\'DEC\']\r\nIn [9]: c = SkyCoord(ra, dec, frame=\'icrs\', unit=(u.hourangle, u.deg))\r\n```\r\n\r\nproduces the following error:\r\n\r\nhttps://gist.github.com/EricDepagne/bc3b2224301c4dd46471\r\n```\r\n---------------------------------------------------------------------------\r\nValueError Traceback (most recent call last)\r\n<ipython-input-9-8e80904223ec> in <module>()\r\n----> 1 c = SkyCoord(ra, dec, frame=\'icrs\', unit=(u.hourangle, u.deg))\r\n \r\n/usr/local/lib/python3.4/dist-packages/astropy/coordinates/sky_coordinate.py in __init__(self, *args, **kwargs)\r\n148\r\n149 # Finally make the internal coordinate object.\r\n--> 150 self._sky_coord_frame = frame.__class__(**coord_kwargs)\r\n151\r\n152 if not self._sky_coord_frame.has_data:\r\n \r\n/usr/local/lib/python3.4/dist-packages/astropy/coordinates/baseframe.py in __init__(self, *args, **kwargs)\r\n445 if (self.representation == SphericalRepresentation and\r\n446 \'distance\' not in repr_kwargs):\r\n--> 447 representation_data = UnitSphericalRepresentation(**repr_kwargs)\r\n448 else:\r\n449 representation_data = self.representation(**repr_kwargs)\r\n \r\n/usr/local/lib/python3.4/dist-packages/astropy/coordinates/representation.py in __init__(self, lon, lat, copy)\r\n425 lon, lat = broadcast_quantity(lon, lat)\r\n426 except ValueError:\r\n--> 427 raise ValueError(""Input parameters lon and lat cannot be broadcast"")\r\n428\r\n429 self._lon = lon\r\n \r\nValueError: Input parameters lon and lat cannot be broadcast\r\n```\r\n\r\n\r\n'"
3396,55963812,barentsen,astrofrog,2015-01-29 22:01:46,2015-02-03 14:14:17,2015-02-03 07:28:50,closed,,v1.0.0,8,Affects-release;Bug;time,https://api.github.com/repos/astropy/astropy/issues/3396,b'Time(np.nan) should raise a ValueError',"b'Don\'t ask how I stumbled upon this, but I think the third line in this snippet of code should have raised a `ValueError`, instead of the dubious things that ensue:\r\n\r\n```Python\r\nIn [1]: import numpy as np\r\nIn [2]: from astropy.time import Time\r\nIn [3]: t = Time(np.nan, format=\'jd\')\r\nIn [4]: t.iso\r\nWARNING: ErfaWarning: ERFA function ""d2dtf"" yielded 1 of ""dubious year (Note 5)"" [astropy._erfa.core]\r\nOut[4]: \'-4713-11-25 -2147483648:-2147483648:-2147483648.-2147483648\'\r\n```'"
3386,55835212,migueldvb,taldcroft,2015-01-28 23:54:35,2015-01-30 15:24:49,2015-01-29 18:25:32,closed,,v1.0.0,4,Affects-dev;Bug;io.ascii;testing,https://api.github.com/repos/astropy/astropy/issues/3386,b'Remove float128 from DTYPES in 32-bit architecture',b'Remove `float128` from DTYPES list on 32-bit machines to fix an error in an `io.ascii` test reported in  #3380..'
3384,55815624,larrybradley,embray,2015-01-28 21:07:58,2015-01-29 18:20:15,2015-01-29 18:19:25,closed,,v1.0.0,2,Affects-dev;Bug;Docs;modeling,https://api.github.com/repos/astropy/astropy/issues/3384,"b""Add origin='lower' for imshow in documentation""","b""The default origin is 'upper', which is not the orientation most astronomers expect.\r\nI first noticed this was missing because the middle panel of this plot\r\nhttp://astropy.readthedocs.org/en/latest/modeling/compound-models-2.png\r\nlooks wrong for a 45 deg rotation, which is defined to be counterclockwise."""
3382,55802083,taldcroft,astrofrog,2015-01-28 19:20:38,2015-02-03 07:29:56,2015-02-03 07:29:56,closed,taldcroft,v1.0.0,1,Affects-dev;Bug;Docs;table,https://api.github.com/repos/astropy/astropy/issues/3382,b'Add new caveat for Initializing from list of rows or dicts',b'Partial (documentation-only) fix for #3378.'
3381,55796224,sergiopasra,eteq,2015-01-28 18:34:11,2015-02-05 23:19:32,2015-02-05 23:14:26,closed,,v1.0.0,11,Bug;build;Effort-low;erfa;Package-expert,https://api.github.com/repos/astropy/astropy/issues/3381,b'Problems building with use_system_erfa=1 with 1.0.rc1',"b'When building for Fedora, I pass (among others) the switch use_system_erfa=1 \r\n\r\nFor additional safety, I remove the erfa directory in cextern.  \r\nBuild worked in astropy < 1.0, use_system_erfa=1 means that the cextern/erfa directory is not ever accessed. \r\n\r\nBut in 1.0rc1, I get the following error\r\n\r\n```\r\n+ /usr/bin/python2 setup.py build --offline\r\nrunning build\r\nrunning build_py\r\nrunning pre_hook from astropy._erfa.setup_package for build_py command\r\npre_build_py_hook command hook build_py raised an exception: %s\r\n\r\nTraceback (most recent call last):\r\n  File ""/home/spr/devel/fedora/python-astropy/astropy-1.0rc1/astropy_helpers/astropy_helpers/setup_helpers.py"", line 398, in run_command_hooks\r\n    hook_obj(cmd_obj)\r\n  File ""astropy/_erfa/setup_package.py"", line 24, in pre_build_py_hook\r\n    preprocess_source()\r\n  File ""astropy/_erfa/setup_package.py"", line 72, in preprocess_source\r\n    verbose=False)\r\n  File ""astropy/_erfa/erfa_generator.py"", line 378, in main\r\n    with open(erfahfn, ""r"") as f:\r\nIOError: [Errno 2] No such file or directory: \'astropy/_erfa/../../cextern/erfa.h\'\r\n```\r\nIt seems to be trying to open a file in cextern, a file that doesn\'t exist (``cextern/erfa/erfa.h`` exists, but ``cextern/erfa.h`` doesn\'t)\r\n'"
3369,55640880,cdeil,astrofrog,2015-01-27 16:35:19,2015-01-28 09:18:01,2015-01-28 09:17:18,closed,taldcroft,v1.0.0,10,Affects-dev;Bug;table,https://api.github.com/repos/astropy/astropy/issues/3369,b'UnboundLocalError from Table repr',"b'@taldcroft I\'m getting this error ... I think this is a recently introduced bug?\r\n```python\r\n>>> from astropy.table import Table\r\n>>> Table()\r\nTraceback (most recent call last):\r\n  File ""<stdin>"", line 1, in <module>\r\n  File ""/Users/deil/Library/Python/3.4/lib/python/site-packages/astropy-1.0.dev11738-py3.4-macosx-10.10-x86_64.egg/astropy/table/table.py"", line 605, in __repr__\r\n    return self._base_repr_(html=False)\r\n  File ""/Users/deil/Library/Python/3.4/lib/python/site-packages/astropy-1.0.dev11738-py3.4-macosx-10.10-x86_64.egg/astropy/table/table.py"", line 593, in _base_repr_\r\n    show_name=True, show_unit=None, show_dtype=True)\r\n  File ""/Users/deil/Library/Python/3.4/lib/python/site-packages/astropy-1.0.dev11738-py3.4-macosx-10.10-x86_64.egg/astropy/table/pprint.py"", line 433, in _pformat_table\r\n    n_header = outs[\'n_header\']\r\nUnboundLocalError: local variable \'outs\' referenced before assignment\r\n```'"
3366,55595986,astrofrog,astrofrog,2015-01-27 09:46:39,2015-01-27 16:21:00,2015-01-27 15:20:40,closed,,v1.0.0,1,Affects-release;Bug;coordinates,https://api.github.com/repos/astropy/astropy/issues/3366,b'Fixes some SphericalRepresentation handling to allow subclasses (with test)',b'Closes #3354'
3364,55555323,embray,astrofrog,2015-01-26 23:50:46,2015-01-27 07:44:00,2015-01-27 07:44:00,closed,,v1.0.0,1,Affects-dev;Bug;io.fits;testing,https://api.github.com/repos/astropy/astropy/issues/3364,b'Skip test for #3122 on Windows',"b'When I manually merged the fix for #3122 I failed to make sure it got tested on Windows, and now AppVeyor builds are broken.  This test should just be skipped on Windows, where a colon in a filename is not likely to happen (and even when it does it will be on a filesystem that supports that, and none of the code on our end cares what the underlying filesystem supports).'"
3362,55542898,embray,embray,2015-01-26 21:51:55,2015-01-26 23:35:15,2015-01-26 23:35:13,closed,,v1.0.0,9,Affects-dev;Bug;modeling,https://api.github.com/repos/astropy/astropy/issues/3362,b'Better handling of inputs to Mapping models',"b""This introduces a workaround to the issue raised by @nden in [this comment](https://github.com/astropy/astropy/pull/3297#issuecomment-70105705)\r\n\r\nI'm not super happy about it since it introduces a (very slight, on the order of a few milliseconds) performance regression on evaluated models with a scalar input.  This isn't that critical since it's not something that scales with the size of the input.\r\n\r\nWhat bothers me more is that this fix is for compatibility with an undocumented, sort of unintentional assumption that all `Model.evaluate()` implementations will return one or more array of at least 1 dimension, even for simple arithmetic expressions involving all scalars (this is because the framework already promotes all scalar parameters to 1-D arrays before passing them to `evaluate`).  I think the current assumptions are fairly reasonable, but they're not universal (clearly, as the `Mapping` class broke this assumption), and it's all still a little confusing.  This explanation probably doesn't even make sense to anyone but me, which is cause for concern in of itself."""
3359,55489592,collioud,eteq,2015-01-26 14:43:07,2015-02-09 17:53:58,2015-02-09 17:53:58,closed,,,14,Affects-dev;Bug;coordinates,https://api.github.com/repos/astropy/astropy/issues/3359,b'Example of search_around_sky use?',"b'Hi,\r\n\r\nI am new to Astropy and I am trying to use the search_around_sky function, described [here](http://astropy.readthedocs.org/en/latest/api/astropy.coordinates.SkyCoord.html?highlight=search_around_sky#astropy.coordinates.SkyCoord.search_around_sky)\r\n\r\nI tried (unsuccessfully) with this piece of code:\r\n```\r\nfrom astropy.coordinates import SkyCoord\r\nfrom astropy.coordinates import Angle\r\ncat = SkyCoord([1, 2, 3], [-30, 45, 8], unit=""deg"")\r\ntarget = SkyCoord(\'1.1 -30.1\', unit=""deg"")\r\ncat.search_around_sky(target, Angle(\'2d\'))\r\n```\r\nwhich finally results in `TypeError: \'Longitude\' object with a scalar value does not support indexing`.\r\n\r\nSo, what is the proper way to use this function?\r\nIs it possible to add a working example somewhere in the doc?\r\n\r\nThank you!\r\nBest regards,\r\nArnaud'"
3358,55485045,andycasey,astrofrog,2015-01-26 14:01:14,2015-01-27 09:43:17,2015-01-27 08:15:30,closed,taldcroft,v1.0.0,16,Affects-release;Bug;table,https://api.github.com/repos/astropy/astropy/issues/3358,b'Unexpected iterating behaviour from Tables in loops within loops',"b'Hi,\r\n\r\nI am not sure if this is a bug, but it seemed counter-intuitive to me. When I iterate over the rows in an `astropy.table.Table` in a sub-loop, the outer loop breaks after just a single iteration. If I create a copy of the table in the sub-loop, then the outer loop does not break and the code works as expected. I do not observe this behaviour if the same data is in a numpy array.\r\n\r\nHere is example code that replicates the behaviour. The output is below.\r\n\r\n````\r\nimport numpy as np\r\nfrom astropy.table import Table\r\n\r\nstars_as_table = Table(np.arange(60).reshape(3, 20))\r\nstars_as_array = np.arange(60).reshape(3, 20)\r\n\r\nstars_in_different_formats = (stars_as_table, stars_as_array)\r\ndescriptions = (""astropy.table.Table"", ""numpy array"")\r\nfor stars, description in zip(stars_in_different_formats, descriptions):\r\n\r\n    # Unexpected behaviour with astropy.table.Table:\r\n    for i, star_i in enumerate(stars):\r\n        for j, star_j in enumerate(stars):\r\n            #print(""in i, j = {0}, {1}"".format(i, j))\r\n            continue\r\n\r\n    print(""Using {0} (no copy), i looped to {1}"".format(description, i))\r\n\r\n    # Works with both astropy.table.Table and numpy array:\r\n    for i, star_i in enumerate(stars):\r\n        for j, star_j in enumerate(stars.copy()):\r\n            #print(""in i, j = {0}, {1}"".format(i, j))\r\n            continue\r\n\r\n    print(""Using {0} (with sub-copy), i looped to {1}"".format(description, i))\r\n```\r\n\r\nOn my OSX 10.10.1 with Python 2.7.6 (64bit; IPython 2.3.1), numpy 1.9.0, and Astropy 0.4.1 this yields:\r\n```\r\nUsing astropy.table.Table (no copy), i looped to 0\r\nUsing astropy.table.Table (with sub-copy), i looped to 2\r\nUsing numpy array (no copy), i looped to 2\r\nUsing numpy array (with sub-copy), i looped to 2\r\n````\r\n\r\nNote that when an `astropy.table.Table` is used and no ``.copy()`` is made , the sub-loop is run once, and then the outer loop breaks. Is this a bug?\r\n\r\nCheers,\r\nAndy'"
3357,55480835,mdboom,embray,2015-01-26 13:14:55,2015-03-03 16:20:18,2015-01-26 17:08:38,closed,,v1.0.0,1,Affects-release;Bug;wcs,https://api.github.com/repos/astropy/astropy/issues/3357,b'Fix #3356: Accept unicode strings to wcs.sub on Python 2.x',b'Fixes #3356 '
3356,55422954,cdeil,embray,2015-01-25 17:44:27,2015-01-26 17:08:38,2015-01-26 17:08:38,closed,mdboom,v1.0.0,1,Bug;wcs,https://api.github.com/repos/astropy/astropy/issues/3356,b'WCS.sub fails for unicode string axis specifier in Python 2',"b'@mdboom Is it possible to make [WCS.sub](http://astropy.readthedocs.org/en/latest/api/astropy.wcs.WCS.html#astropy.wcs.WCS.sub) just work for unicode string axis specifiers in Python 2?\r\n\r\nI ran into this error on Python 2 after adding\r\n```python\r\nfrom __future__ import unicode_literals\r\n```\r\nat the top of my file:\r\nhttps://travis-ci.org/gammapy/gammapy/jobs/48255732#L2870\r\n\r\nHere\'s a simple example that shows the issue I get on Python 2:\r\n```python\r\n>>> from astropy.wcs import WCS\r\n>>> wcs = WCS()\r\n>>> wcs.sub([\'longitude\'])\r\n<astropy.wcs.wcs.WCS object at 0x10fc44d70>\r\n>>> wcs.sub([u\'longitude\'])\r\nTraceback (most recent call last):\r\n  File ""<stdin>"", line 1, in <module>\r\n  File ""/Users/deil/Library/Python/2.7/lib/python/site-packages/astropy-1.0.dev11571-py2.7-macosx-10.10-x86_64.egg/astropy/wcs/wcs.py"", line 495, in sub\r\n    copy.wcs = self.wcs.sub(axes)\r\nTypeError: axes sequence must contain either strings or ints\r\n```\r\n'"
3353,55376895,astrofrog,astrofrog,2015-01-24 16:44:11,2015-01-26 18:02:51,2015-01-26 07:44:07,closed,,v1.0.0,2,Affects-release;Bug;Critical;logging,https://api.github.com/repos/astropy/astropy/issues/3353,b'Fix issue with logger due to iteration over sys.modules.items()',"b'In rare cases the iteration over sys.modules.items() can fail with the error:\r\n\r\n```\r\ndictionary changed size during iteration\r\n```\r\n\r\nso we take a copy to avoid this. This is the same error as happened in this package:\r\n\r\nhttps://bitbucket.org/cherrypy/cherrypy/issue/1280/autoreloader-throws-dictionary-changed\r\n\r\nIf there are no objections, I will merge by Monday to make sure it gets into 1.0.'"
3340,55232208,eteq,astrofrog,2015-01-23 01:06:19,2015-01-23 16:10:28,2015-01-23 14:05:40,closed,,v1.0.0,1,Affects-release;Bug;coordinates,https://api.github.com/repos/astropy/astropy/issues/3340,b'Fix SkyCoord.to_string for multidimensional coordinate arrays',"b""This closes #3322 by making coordinate arrays with more than one dimension output something sensible instead of erroring.\r\n\r\nNote that there's a subtlety here in that now mutlidimensional coordinates output *arrrays* of strings instead of lists of strings like they do for 1d (or just strings for 0d/scalar).  But in practice I don't think that matters much, and it seems safer than changing 1d to arrays (which is technically a backwards-incompatible change).\r\n\r\ncc @astrofrog"""
3339,55215957,nden,embray,2015-01-22 22:07:47,2015-01-22 22:41:20,2015-01-22 22:41:20,closed,,v1.0.0,6,Affects-release;Bug;modeling,https://api.github.com/repos/astropy/astropy/issues/3339,b'fix for maxiter argument to SLSQPLSQFitter',b'fixes #3338 '
3338,55213698,embray,embray,2015-01-22 21:48:07,2015-02-17 18:30:21,2015-02-17 18:30:21,closed,,v1.0.0,2,Affects-release;Bug;Effort-low;modeling;Package-novice,https://api.github.com/repos/astropy/astropy/issues/3338,b'maxiter argument to SLSQPLSQFitter.__call__ broken',"b'As pointed out in [this comment](https://github.com/astropy/astropy/pull/3305#issuecomment-70253326), calling an `SLSQPLSQFitter` instances with the optional `maxiter` keyword argument fails, although it is advertised to work in the docs.  This appears to be little more than a simple argument handling bug, and possibly affects other fitter classes as well.'"
3332,55133800,cdeil,eteq,2015-01-22 09:54:23,2015-02-18 16:57:57,2015-02-18 00:55:51,closed,,v1.0.0,3,Bug;coordinates,https://api.github.com/repos/astropy/astropy/issues/3332,b'Angle array formatting shows up as raw latex in IPython notebook',"b""With Python 3 and Astropy master I find that Angles are not displayed nicely in the IPython notebook ... it works for scalars, but not arrays:\r\n\r\n![screen shot 2015-01-22 at 10 45 04](https://cloud.githubusercontent.com/assets/852409/5853427/c708eec2-a223-11e4-968d-8953988394db.png)\r\n\r\nI guess this is a bug?\r\n\r\nActually I don't see why complicated formatting like dms and latex generation should be used by default here ... but I guess this discussion already took place and is not up for debate?"""
3328,55097161,sornars,embray,2015-01-22 00:15:38,2015-01-27 17:53:02,2015-01-27 16:25:28,closed,,v1.0.0,6,Affects-release;Bug;io.fits,https://api.github.com/repos/astropy/astropy/issues/3328,b'Remove & from final CONTINUE card fix for #3282',"b""This is a fix for #3282. I am both unfamiliar with the code base and FITS but I believe the applied fix addresses the reported issue. In addition to the test I added, I had to update two tests that were failing due to expecting a Card with an '&' in the final CONTINUE card. Please let me know if you have any feedback or suggestings. """
3322,55035283,astrofrog,astrofrog,2015-01-21 15:43:04,2015-01-23 16:10:31,2015-01-23 14:05:40,closed,,v1.0.0,0,Affects-release;Bug;coordinates,https://api.github.com/repos/astropy/astropy/issues/3322,b'Bug in SkyCoord.to_string for n-dimensional arrays',"b'Using ``to_string`` with n-dimensional ``SkyCoord`` gives an error:\r\n\r\n```\r\nIn [27]: c = SkyCoord(np.ones((2,2)),1,unit=(\'deg\',\'deg\'))\r\n\r\nIn [28]: c.to_string()\r\n---------------------------------------------------------------------------\r\nTypeError                                 Traceback (most recent call last)\r\n<ipython-input-28-aa96d24a11b4> in <module>()\r\n----> 1 c.to_string()\r\n\r\n/Users/tom/Library/Python/2.7/lib/python/site-packages/astropy-1.0.dev10077-py2.7-macosx-10.8-x86_64.egg/astropy/coordinates/sky_coordinate.pyc in to_string(self, style, **kwargs)\r\n    449             for lonangle, latangle in zip(sph_coord.lon, sph_coord.lat):\r\n    450                 coord_string += [(lonangle.to_string(**lonargs)\r\n--> 451                                  + "" "" +\r\n    452                                  latangle.to_string(**latargs))]\r\n    453 \r\n\r\nTypeError: unsupported operand type(s) for +: \'numpy.ndarray\' and \'unicode\'\r\n```\r\n\r\ncc @eteq @taldcroft'"
3321,55000529,cdeil,astrofrog,2015-01-21 10:18:30,2015-01-22 00:59:27,2015-01-21 13:01:07,closed,taldcroft,,8,Affects-dev;Bug;table,https://api.github.com/repos/astropy/astropy/issues/3321,b'Invalid KeyError when adding a column to Table',"b'@taldcroft - I think #3011 introduced a bug ... I noticed that it broke my code here:\r\nhttps://travis-ci.org/astropy/coordinates-benchmark/builds/47758457#L4223\r\n\r\nHere\'s a self-contained example ... it fails with the same error on Python 2 and 3:\r\n```python\r\n>>> from astropy.table import Table\r\n>>> table = Table()\r\n>>> table[\'first_col\'] = [\'a\', \'b\']\r\n>>> table[\'second_col\'] = \'c\'\r\nTraceback (most recent call last):\r\n  File ""<stdin>"", line 1, in <module>\r\n  File ""/Users/deil/Library/Python/3.4/lib/python/site-packages/astropy-1.0.dev11571-py3.4-macosx-10.10-x86_64.egg/astropy/table/table.py"", line 880, in __setitem__\r\n    if not hasattr(value, \'dtype\') and not self._is_mixin_column(value):\r\n  File ""/Users/deil/Library/Python/3.4/lib/python/site-packages/astropy-1.0.dev11571-py3.4-macosx-10.10-x86_64.egg/astropy/table/table.py"", line 633, in _is_mixin_column\r\n    col = self[col]\r\n  File ""/Users/deil/Library/Python/3.4/lib/python/site-packages/astropy-1.0.dev11571-py3.4-macosx-10.10-x86_64.egg/astropy/table/table.py"", line 847, in __getitem__\r\n    return self.columns[item]\r\n  File ""/Users/deil/Library/Python/3.4/lib/python/site-packages/astropy-1.0.dev11571-py3.4-macosx-10.10-x86_64.egg/astropy/table/table.py"", line 109, in __getitem__\r\n    return OrderedDict.__getitem__(self, item)\r\nKeyError: \'c\'\r\n```\r\n\r\nI think this should work, no? (it did before #3011)'"
3319,54948224,aphearin,taldcroft,2015-01-20 22:14:45,2015-01-23 17:32:06,2015-01-23 17:17:25,closed,,v1.0.0,7,Bug;io.ascii,https://api.github.com/repos/astropy/astropy/issues/3319,b'bug in io.ascii ',"b'I am finding that in certain cases, io.ascii struggles to correctly ignore comment lines, and also the start of the data rows. Here is some particularly simple data that illustrates the problem:\r\n\r\n```\r\n# some header info\r\n#F header info beginning with \'F\'\r\n1 2 3\r\n4 5 6\r\n7 8 9\r\n```\r\nIf I run ascii.read(fname), I get \r\nAttributeError: \'NoneType\' object has no attribute \'group\'\r\n\r\nThe workaround seems to be to set guess=False. Based on an email chain with @eteq  the problem seems to be that the DAOPHOT reader specifically looks for the ""#F..."" pattern, and for some reason even though this is *not* a DAOPHOT output file, the reader fails when it tries to actually interpret that line. Erik told me to call the attention of @taldcroft to this issue. \r\n\r\nMy workaround for the time being is s imply to set guess=False:\r\nascii.read(fname, guess=False). \r\nThis does not bail when reaching the #F line, but now the first row of data is being ignored. My workaround for that latter problem is to manually set data_start=0, but this should probably be the default behavior. '"
3313,54716127,barentsen,taldcroft,2015-01-19 00:18:31,2015-01-20 18:25:33,2015-01-20 13:34:16,closed,,v1.0.0,2,Affects-release;Bug;table,https://api.github.com/repos/astropy/astropy/issues/3313,b'Bugfix: stacking a single table',"b""The `vstack` and `hstack` operations in `astropy.table` fail when called on a single table, i.e. `vstack([table])` raises a confusing exception rather than returning `table` as one might expect.  It is of course silly to stack a single table, but it is a situation that may well occur in a generic piece of code.\r\n\r\nFor example:\r\n\r\n```Python\r\nIn [1]: from astropy.table import Table, vstack, hstack\r\nIn [2]: t = Table({'col1': [1, 2, 3]})\r\nIn [3]: hstack([t])\r\n---------------------------------------------------------------------------\r\nKeyError                                  Traceback (most recent call last)\r\n<ipython-input-3-42e885d3c8bc> in <module>()\r\n----> 1 hstack(t)\r\n\r\n/home/gb/dev/astropy/astropy/table/operations.py in hstack(tables, join_type, uniq_col_name, table_names, metadata_conflicts)\r\n    301                   col_name_map)\r\n    302 \r\n--> 303     _merge_col_meta(out, tables, col_name_map, metadata_conflicts=metadata_conflicts)\r\n    304     _merge_table_meta(out, tables, metadata_conflicts=metadata_conflicts)\r\n    305 \r\n\r\n/home/gb/dev/astropy/astropy/table/operations.py in _merge_col_meta(out, tables, col_name_map, idx_left, idx_right, metadata_conflicts)\r\n     44         for idx_table, table in enumerate(tables):\r\n     45             left_col = out_col\r\n---> 46             right_name = col_name_map[out_col.name][idx_table]\r\n     47 \r\n     48             if right_name:\r\n\r\nKeyError: 'col1'\r\n```\r\n\r\nthe error is identical for `vstack([t])`.\r\n\r\nOn a related note, stacking an empty list does not raise a user-friendly exception, but instead triggers this:\r\n```Python\r\nIn [2]: vstack([])\r\n---------------------------------------------------------------------------\r\nValueError                                Traceback (most recent call last)\r\n<ipython-input-2-d01c7f711ce7> in <module>()\r\n----> 1 vstack([])\r\n\r\n/home/gb/dev/astropy/astropy/table/operations.py in vstack(tables, join_type, metadata_conflicts)\r\n    225     col_name_map = OrderedDict()\r\n    226 \r\n--> 227     out = _vstack(tables, join_type, col_name_map)\r\n    228 \r\n    229     # Merge column and table metadata\r\n\r\n/home/gb/dev/astropy/astropy/table/operations.py in _vstack(arrays, join_type, col_name_map)\r\n    712         _col_name_map.update(col_name_map)\r\n    713 \r\n--> 714     out = Table(out, names=names, masked=masked)\r\n    715 \r\n    716     return out\r\n\r\n/home/gb/dev/astropy/astropy/table/table.pyc in __init__(self, data, masked, names, dtype, meta, copy, rows)\r\n    286 \r\n    287         # Finally do the real initialization\r\n--> 288         init_func(data, names, dtype, n_cols, copy)\r\n    289 \r\n    290         # Whatever happens above, the masked property should be set to a boolean\r\n\r\n/home/gb/dev/astropy/astropy/table/table.pyc in _init_from_dict(self, data, names, dtype, n_cols, copy)\r\n    458 \r\n    459         data_list = [data[name] for name in names]\r\n--> 460         self._init_from_list(data_list, names, dtype, n_cols, copy)\r\n    461 \r\n    462     def _init_from_table(self, data, names, dtype, n_cols, copy):\r\n\r\n/home/gb/dev/astropy/astropy/table/table.pyc in _init_from_list(self, data, names, dtype, n_cols, copy)\r\n    424             cols.append(col)\r\n    425 \r\n--> 426         self._init_from_cols(cols)\r\n    427 \r\n    428     def _init_from_ndarray(self, data, names, dtype, n_cols, copy):\r\n\r\n/home/gb/dev/astropy/astropy/table/table.pyc in _init_from_cols(self, cols)\r\n    495         if len(lengths) != 1:\r\n    496             raise ValueError('Inconsistent data column lengths: {0}'\r\n--> 497                              .format(lengths))\r\n    498 \r\n    499         # Set the table masking\r\n\r\nValueError: Inconsistent data column lengths: set([])\r\n```\r\n\r\nThis PR enables `hstack([t])` and `vstack([t])` to return `t`, and ensures that a nice exception is raised for `hstack([])` and `vstack([])`.  Regression tests are included.\r\n\r\n(The PR also removes the non-existent parameter `col_name_map` from the docstring of `hstack`.)"""
3308,54585974,mdboom,embray,2015-01-16 15:16:10,2015-03-03 16:19:52,2015-01-16 20:54:25,closed,mdboom,v0.4.4,4,Affects-release;Bug;Critical;vo.samp,https://api.github.com/repos/astropy/astropy/issues/3308,b'Let Python choose the default SSL protocol for us.',"b'This is a possible fix for #3306.\r\n\r\nTo summarize: SSLv2 and SSLv3 have been determined to be [unsafe](https://www.openssl.org/~bodo/ssl-poodle.pdf), and so it has been removed from recent versions of OpenSSL (not sure if that\'s upstream or just as-distributed in many places).  Therefore, recent bugfix release versions of Python have been updated to not provide these protocols when the underlying library does not.  The versions affected are 2.7.9 and 3.4.3.  See Python [22935](http://bugs.python.org/issue22935).  It\'s not clear if other Python major versions will be updated, since they will shortly stop compiling against OpenSSL.\r\n\r\nI thought it best to just move the responsibility of choosing a default SSL protocol to the Python stdlib, rather than maintaining it ourselves.  The defaults may change again in the future if other vulnerabilities are discovered, and I think Python as a whole has a better chance of staying on top of that than we do.  It does mean the protocol used by default depends on the version of Python, and which version of OpenSSL it is linked against.  But the protocols that are even available depends on that, so I don\'t see much else that we can do.\r\n\r\n@embray: If there\'s going to be another 0.4.x, this is certainly a good candidate for a backport, since the bug is a rather severe ""can\'t import `astropy.vo.samp`"" on one of these new Pythons.'"
3306,54552016,olebole,embray,2015-01-16 08:42:55,2015-01-16 21:34:51,2015-01-16 21:34:51,closed,mdboom,v0.4.4,7,Affects-release;Bug;Critical;vo.samp,https://api.github.com/repos/astropy/astropy/issues/3306,b'Astropy/vo/samp uses ssl.PROTOCOL_SSLv2 and ssl.PROTOCOL_SSLv3',"b""The samp package seems to use SSL version 2 and 3 which had [serious security flaws discovered](https://www.openssl.org/~bodo/ssl-poodle.pdf) in the last months. On Debian, both protocols are disabled now; therefore the compilation fails, specifically `astropy/tests/tests/test_imports.py:27: test_imports FAILED`.\r\n\r\nThe errors are like\r\n```\r\n_________________ ERROR collecting astropy/vo/samp/__init__.py _________________\r\nastropy/vo/samp/__init__.py:15: in <module>\r\n>   from .hub import *\r\nastropy/vo/samp/hub.py:33: in <module>\r\n>       from .ssl_utils import SafeTransport, SecureXMLRPCServer\r\nastropy/vo/samp/ssl_utils.py:26: in <module>\r\n>       class HTTPSConnection(HTTPConnection):\r\nastropy/vo/samp/ssl_utils.py:35: in HTTPSConnection\r\n>                    ssl_version=ssl.PROTOCOL_SSLv3, strict=None):\r\nE           AttributeError: 'module' object has no attribute 'PROTOCOL_SSLv3'\r\n```\r\n"""
3297,54372584,nden,embray,2015-01-14 20:31:53,2015-01-27 15:17:03,2015-01-27 15:17:03,closed,,v1.0.0,10,Affects-dev;Bug;modeling,https://api.github.com/repos/astropy/astropy/issues/3297,b'fix Mapping.inverse',"b""`Mapping.inverse` is incorrect when duplicating inputs:\r\n\r\n```\r\nm = Mapping((0, 1, 0))\r\nm.inverse.n_inputs\r\n2\r\nm.inverse.n_outputs\r\n2\r\n```\r\nThis causes the inverse of compound models to fail because the inputs don't match the outputs any more.\r\n\r\n```\r\nmodel = Shift(1) & Shift(2) | m | (Scale(1) & Scale(2) & Scale(3)\r\n```\r\n\r\nThis PR provides a fix for this problem, although in somewhat kludgy way. The problem is that `Mapping` accepts arbitrary number of inputs. And there's no way to initialize a model by specifying how many inputs will be passed.\r\n\r\nThis PR also adds docstrings and changes the two models in such a way that now a `name` argument can be passed in when a model is initialized.\r\n\r\n"""
3294,54228871,barentsen,embray,2015-01-13 18:24:28,2015-01-14 17:46:56,2015-01-14 17:46:56,closed,,v0.4.3,5,Affects-release;Bug;table,https://api.github.com/repos/astropy/astropy/issues/3294,b'Bugfix: utils.metadata.merge ignores the `metadata_conflicts` parameter',"b""The `merge` function in `astropy.utils.metadata` makes use of recursion, but it does not pass the `metadata_conflicts` argument on in the recursive calls.  This leads to the following small bug: \r\n\r\n```Python\r\nIn [1]: from astropy import table\r\nIn [2]: t1, t2 = table.Table(), table.Table()\r\nIn [3]: t1.meta['somekey'] = {'x': 1, 'y': 1}\r\nIn [4]: t2.meta['somekey'] = {'x': 1, 'y': 999}\r\nIn [5]: table.vstack([t1, t2], metadata_conflicts='silent')\r\nWARNING: MergeConflictWarning: Cannot merge meta key 'y' types <type 'int'> and <type 'int'>, choosing y=999 [astropy.utils.metadata]\r\nOut[5]: \r\n<Table rows=0 names=()>\r\nNone\r\n```\r\nIn the example above, the `MergeConflictWarning` should not have been raised because we asked for `metadata_conflicts='silent'`. Likewise, `metadata_conflicts='error'` will not raise the expected `MergeConflictException` in this situation.\r\n\r\nThis PR fixes the bug and adds a test."""
3293,54221968,Cadair,embray,2015-01-13 17:28:30,2015-01-15 22:38:50,2015-01-15 22:38:50,closed,,v1.0.0,6,Affects-dev;Bug;units,https://api.github.com/repos/astropy/astropy/issues/3293,b'Bug in u.quantity_decorator when using **kwargs',"b""So the following code breaks the `u.quantity_decorator`:\r\n\r\n```python\r\nIn [2]: import astropy.units as u\r\n\r\nIn [4]: @u.quantity_input(a=u.deg)\r\n   ...: def funct(a, **kwargs):\r\n   ...:     pass\r\n   ...: \r\n\r\nIn [5]: funct(1 * u.deg)\r\n---------------------------------------------------------------------------\r\nKeyError                                  Traceback (most recent call last)\r\n<ipython-input-5-5fb4e89adcc1> in <module>()\r\n----> 1 funct(1 * u.deg)\r\n\r\n/Users/ireland/sunpy/sunpy/util/unit_decorators.pyc in wrapper(*func_args, **func_kwargs)\r\n     81 \r\n     82                 # Get the value of this parameter (argument to new function)\r\n---> 83                 arg = bound_args.arguments[param.name]\r\n     84 \r\n     85                 # Get target unit, either from decotrator kwargs or annotations\r\n\r\nKeyError: 'kwargs'\r\n```\r\n\r\nI have written a test which demos this bug, but as yet have not yet come up with a fix.\r\n\r\nping @embray @mhvk @astrofrog """
3289,54168111,Cadair,astrofrog,2015-01-13 09:33:35,2015-02-18 22:06:28,2015-01-22 15:44:08,closed,,v1.0.0,5,Affects-dev;Bug;units,https://api.github.com/repos/astropy/astropy/issues/3289,b'Potential Bug in u.quantity_input',"b'I will test this and write a patch this evening, but I wanted to just raise it here.\r\n\r\nPlease see sunpy/sunpy#1255.'"
3283,53922398,embray,embray,2015-01-09 22:22:37,2015-03-30 15:16:08,2015-03-30 15:16:06,closed,embray,v1.0.2,11,Affects-release;Bug;io.fits,https://api.github.com/repos/astropy/astropy/issues/3283,b'Fix ColDefs.change_ methods',"b""The old PyFITS `ColDefs` class for representing a set of table columns has three methods, [`change_attrib`](http://docs.astropy.org/en/stable/io/fits/api/tables.html#astropy.io.fits.ColDefs.change_attrib), [`change_name`](http://docs.astropy.org/en/stable/io/fits/api/tables.html#astropy.io.fits.ColDefs.change_name), and [`change_unit`](http://docs.astropy.org/en/stable/io/fits/api/tables.html#astropy.io.fits.ColDefs.change_unit) that I fairly frequently get questions about--these should be mentioned in the FAQ.\r\n\r\nThey never really worked properly because although they can change the column objects in-place, they don't actually change the data in the table which is confusing.  They're from a time before PyFITS really had a thought out data model (and it still doesn't really, especially not for tables).  Anyways, using these methods only results in confusion, as do some of the other `ColDefs` methods.  They should all be marked deprecated, and documentation provided for how to perform various tasks for updating FITS tables.  This can serve as a first step to replacing the FITS table interface entirely.\r\n\r\n**UPDATE:** A mentioned in some of the comments below, instead of deprecating these I finally went ahead and tried to fix them instead.  My feeling about this used to be that it was too much trouble to fix within the current interface, and that instead it should wait until the table interface is completely redone to use Astropy Table, and then the whole thing could be scrapped.  But on further thought it wasn't all that hard to fix, and the approach I've taken I think will prove useful in transitioning to Astropy Tables as well."""
3282,53853374,hworpel,embray,2015-01-09 10:24:24,2015-01-27 20:57:13,2015-01-27 20:57:13,closed,embray,v1.0.0,2,Affects-release;Bug;Effort-low;io.fits;Package-novice,https://api.github.com/repos/astropy/astropy/issues/3282,b'Ampersand on the end of last substring with CONTINUE keyword',"b""According to the [latest version](http://fits.gsfc.nasa.gov/registry/continue_keyword.html) of the CONTINUE convention, the ampersand '&' character should NOT be appended to the last substring. Currently astropy.io.fits appends the ampersand to all substrings, including the last one."""
3279,53697059,cactaur,taldcroft,2015-01-07 23:38:38,2015-01-13 17:34:52,2015-01-08 14:40:30,closed,taldcroft,v1.0.0,5,Affects-release;Bug;io.ascii,https://api.github.com/repos/astropy/astropy/issues/3279,b'Support for Abbreviated Data Types in IPAC Tables',"b'The IPAC table standard allows for abbreviation of data types to the point where they are unique[[0]](http://irsa.ipac.caltech.edu/applications/DDGEN/Doc/ipac_tbl.html). For example, ""double"" can be abbreviated as ""doubl"", ""doub"", ... all the way down to ""do"". ""d"" is not acceptable because then it can conflict with ""date""\r\n\r\nAstropy appears to currently accept the full form, but not the abbreviated form. This can be reproduced by taking the file:\r\n\r\n    $cat test_table.tbl\r\n\r\n    | test|\r\n    |doubl|\r\n    |     |\r\n    | null|\r\n      0.85\r\n\r\nand running it through astropy, which yields:\r\n\r\n    In [3]: Table.read(""test_output.tbl"", format=""ascii.ipac"", guess=False)\r\n    ...\r\n    ValueError: Unknown data type """"doubl"""" for column ""test""\r\n\r\nThis was run on a linux machine using astropy 0.4.1, numpy 1.8.1, and scipy 0.14.0 and python 2.7.6.\r\n\r\nWhat it should do is recognize that ""doubl"" is an abbreviation of ""double"", and parse it accordingly, returning a table with one entry, and column name ""test"".\r\n\r\nI\'ve encountered this issue ""in the wild"" with some multi-object queries from IRSA where the column name is shorter than the data type. \r\n\r\nOne possible workaround I found was to call the [STILTS](http://www.star.bris.ac.uk/~mbt/stilts/) program from python to read in, and write out the abbreviated IPAC file. From what I noticed, STILTS avoids abbreviating the data type, which makes it readable by Astropy.\r\n'"
3259,52972069,hamogu,taldcroft,2014-12-28 03:51:59,2014-12-30 18:58:20,2014-12-30 18:58:20,closed,,v1.0.0,4,Affects-release;Bug;io.ascii,https://api.github.com/repos/astropy/astropy/issues/3259,b'make IPAC table fill_values right on output',"b'In the last implementation, IPAC tables simply reported the fill_value as the\r\nnull value in the header, but did not use the same value to fill the masked values\r\nin the table data - `ascii.write(... fill_values=(...))` was used for that.\r\nThus, on writing the null value reported in the header looks good, but is\r\nuseless.\r\n\r\nHigh-level discussion of this issue is in #2657 \r\n\r\ncloses #2657'"
3250,52682628,embray,embray,2014-12-22 19:56:10,2014-12-23 16:23:53,2014-12-23 16:23:50,closed,,v0.4.3,2,Affects-release;Bug;modeling,https://api.github.com/repos/astropy/astropy/issues/3250,b'Modeling/handle more out than in',"b""This PR fixes an issue raised by @nden [here](https://github.com/astropy/astropy/pull/3231#issuecomment-67691809), and iterates on a suggested fix at embray/astropy#12 so as to explicitly support this case.  This still makes certain assumptions about the design of the model evaluation function.  The main assumption is that all outputs from the model's `evaluate` function will have the same shape as would result from performing some Numpy ufuncs involving all inputs and parameters to the model.  In other words, the shape of all outputs are assumed to be the same, which is the broadcast shape of all inputs with all parameters.\r\n\r\nThis still suffices for most cases (particularly where all inputs/parameters are just scalars).  This was a known issue, but hadn't been brought up before due to there not being any *built in* models in Astropy that have this format.  However, the compound modeling feature [#3231] makes it easier to make such models, and this fix should is good enough for most cases involving compound models as well."""
3245,52591755,astrofrog,astrofrog,2014-12-21 10:24:21,2015-01-06 23:17:25,2015-01-06 23:17:25,closed,,v1.0.0,1,Affects-dev;Bug;wcs,https://api.github.com/repos/astropy/astropy/issues/3245,b'Default RADESYS not being set',"b'@mdboom - #3204 included the changes regarding the default RADESYS value in WCS, but the test is missing an ``assert``:\r\n\r\n```python\r\n@pytest.mark.xfail(\r\n    LooseVersion(_wcs.__version__) < LooseVersion(""4.25""),\r\n    reason=""wcslib < 4.25"")\r\ndef test_radesys_defaults():\r\n    w = _wcs.Wcsprm()\r\n    w.radesys == \'ICRS\'\r\n```\r\n\r\nIf I add the ``assert`` the test fails, so it seems like this is not working correctly.'"
3240,52504774,adrn,mhvk,2014-12-19 16:58:40,2016-07-09 13:36:18,2016-07-09 13:36:17,closed,,,5,Affects-release;Bug;Effort-low;Package-intermediate;units,https://api.github.com/repos/astropy/astropy/issues/3240,b'units: warning from numpy operation on Quantity arithmetic',b'The following gives a warning:\r\n\r\n    from astropy import units as u\r\n    import numpy as np\r\n\r\n    a = 15 * u.kpc\r\n    b = 27 * u.pc\r\n\r\n    print np.arcsin((b/a))\r\n\r\nbut doing this does not:\r\n\r\n    print np.arcsin((b/a).decompose())\r\n\r\nThe warning is:\r\n\r\n    RuntimeWarning: invalid value encountered in arcsin\r\n      print np.arcsin((b/a))'
3225,52301764,stargaser,mdboom,2014-12-17 22:38:20,2014-12-18 15:41:18,2014-12-18 15:40:10,closed,,v0.4.3,2,Affects-dev;Bug;Docs;wcs,https://api.github.com/repos/astropy/astropy/issues/3225,b'Update from_file.py to fix load_wcs_from_fits function',b'The function should open `filename` instead of `sys.argv[-1]`'
3220,52251899,adonath,embray,2014-12-17 15:22:29,2015-02-18 22:17:09,2014-12-19 00:00:55,closed,,v1.0.0,6,Affects-release;Bug;convolution;Enhancement,https://api.github.com/repos/astropy/astropy/issues/3220,b'Fixed #2274',"b'This PR is a quick fix for #2274. I use the `custom_model` function to create an `astropy.modeling.Model` instance internally, when the model is a an ordinary function. Furthermore I added a check, that the `model` argument is callable.\r\n@cdeil, @eteq '"
3195,51642839,mdmueller,astrofrog,2014-12-11 03:50:20,2014-12-11 17:52:19,2014-12-11 11:16:59,closed,,v1.0.0,3,Affects-dev;Bug;io.ascii,https://api.github.com/repos/astropy/astropy/issues/3195,b'Changed inline to __inline when building with MSVC',b'See #3193.'
3189,51459130,hamogu,taldcroft,2014-12-09 17:49:21,2014-12-22 18:55:38,2014-12-21 02:08:46,closed,,v1.0.0,11,Affects-dev;Bug;io.ascii;io.registry,https://api.github.com/repos/astropy/astropy/issues/3189,"b""io.registry: '.csv' is not longer sufficient to select reader.""","b'It used to be that reading a csv table with `Table.read()` would not require a format keyword, because the file type is unambiguous. However, that\'s not longer true:\r\n```\r\nGabriel = Table.read(\'finaloutput2010201.csv\')\r\n\r\n---------------------------------------------------------------------------\r\nException                                 Traceback (most recent call last)\r\n<ipython-input-65-8d18e9d35129> in <module>()\r\n----> 1 Gabriel = Table.read(\'/data/hguenther/TWHya/H2lines/finaloutput2010201.csv\')\r\n\r\n/data/guenther/anaconda/lib/python2.7/site-packages/astropy-1.0.dev10102-py2.7-linux-x86_64.egg/astropy/table/table.pyc in read(cls, *args, **kwargs)\r\n   1710         passed through to the underlying data reader (e.g. `~astropy.io.ascii.read`).\r\n   1711         """"""\r\n-> 1712         return io_registry.read(cls, *args, **kwargs)\r\n   1713 \r\n   1714     def write(self, *args, **kwargs):\r\n\r\n/data/guenther/anaconda/lib/python2.7/site-packages/astropy-1.0.dev10102-py2.7-linux-x86_64.egg/astropy/io/registry.pyc in read(cls, *args, **kwargs)\r\n    325 \r\n    326             format = _get_valid_format(\r\n--> 327                 \'read\', cls, path, fileobj, args, kwargs)\r\n    328 \r\n    329         reader = get_reader(format, cls)\r\n\r\n/data/guenther/anaconda/lib/python2.7/site-packages/astropy-1.0.dev10102-py2.7-linux-x86_64.egg/astropy/io/registry.pyc in _get_valid_format(mode, cls, path, fileobj, args, kwargs)\r\n    414         raise Exception(\r\n    415             ""Format is ambiguous - options are: {0}"".format(\r\n--> 416                 \', \'.join(sorted(valid_formats, key=lambda tup: tup[0]))))\r\n    417 \r\n    418     return valid_formats[0]\r\n\r\nException: Format is ambiguous - options are: ascii.csv, ascii.fast_csv\r\n```\r\n\r\nbecause we now have two `csv` readers. I liked the old, easier way, but I understand that we offer more options now.\r\n\r\n@taldcroft : Is this a feature to make people aware of the new fast readers or an unintended site effect?\r\n\r\nI think the Exception is handeled very well and the error mesage is helpful - I just wonder if a `csv` should automatically try `ascii.fast_csv` first and `ascii.csv` second if it fails.\r\nIs it even possible to have a csv file that can be read by `ascii.csv` but not by `ascii.fast_csv` if no other special keywords ae given?\r\nFor csv files that\'s probably the most common case. I don\'t see pople passing in their own HeaderSplitters etc. for csv files, at most they\'ll skip a couple of lines with `data_start` and `header_start`.'"
3177,50997758,gmarsden,astrofrog,2014-12-04 16:41:09,2014-12-09 00:14:02,2014-12-08 22:14:43,closed,aconley,v1.0.0,4,Bug;cosmology,https://api.github.com/repos/astropy/astropy/issues/3177,b'Unexpected broadcasting in cosmology.FLRW',"b'When I call cosmology.FLRW.differential_comoving_volume() with an array with shape (n,1), I get back an array with shape (n,n). \r\n\r\n```\r\nIn [14]: cosmo=cosmology.FlatLambdaCDM(70,.3)\r\n\r\nIn [15]: red = np.linspace(0,10,100).reshape(100,1)\r\n\r\nIn [16]: dv = cosmo.differential_comoving_volume(red)\r\n\r\nIn [17]: dv.shape\r\nOut[17]: (100, 100)\r\n```\r\n\r\nThe expected output is along the diagonal of dv.'"
3172,50681439,larrybradley,larrybradley,2014-12-02 16:57:00,2015-04-07 19:09:45,2015-04-07 19:09:41,closed,,Future,7,Bug;Docs;Ready-for-final-review,https://api.github.com/repos/astropy/astropy/issues/3172,b'Remove width/height style of banner logo',b'This will prevent it from being squished horizontally (non-proportionally) in small windows.  This addresses part of #3171.'
3169,50592108,embray,embray,2014-12-01 23:17:33,2014-12-02 22:29:20,2014-12-02 22:29:19,closed,,v1.0.0,9,Affects-dev;Bug;Enhancement;testing;time,https://api.github.com/repos/astropy/astropy/issues/3169,b'Add TimeFormatMeta and TimeDeltaFormatMeta',"b' These automatically add `TimeFormat` classes to the `TIME_FORMAT` and `TIME_DELTA_FORMAT` dicts at class creation time instead of after the fact.  This should also reduce the effort required to define new formats external to Astropy.  This may understandably look overengineered, but it does have the advantage of fixing the annoyance mentioned here: https://github.com/astropy/astropy/pull/3095#issuecomment-65074252 by not doing any module-level hackery.'"
3168,50581605,bsipocz,embray,2014-12-01 21:52:31,2014-12-02 15:33:24,2014-12-02 15:33:24,closed,,v0.4.3,0,Bug;cosmology;Docs,https://api.github.com/repos/astropy/astropy/issues/3168,b'Fix cosmology docstring',"b'This PR fixes #3161, a few typos and removes unused import and variables.'"
3161,50467886,dkirkby,embray,2014-11-30 19:36:34,2014-12-02 15:33:24,2014-12-02 15:33:24,closed,,,0,Bug;cosmology;Docs,https://api.github.com/repos/astropy/astropy/issues/3161,b'Docstring typo',b'The docstring corresponding to `help(astropy.cosmology.FLRW.Onu)` refers to photons when it should be neutrinos.'
3160,50436948,bnordgren,taldcroft,2014-11-29 20:52:12,2015-01-04 18:42:08,2015-01-04 18:42:06,closed,taldcroft,v1.0.0,8,Affects-release;Bug;Effort-low;Package-novice;time,https://api.github.com/repos/astropy/astropy/issues/3160,b'Time constructor discards timezone information',"b'Current behavior when creating a Time object from an ""aware"" datetime object is to discard timezone information and label the time as UTC. Correct behavior would be to calculate UTC time before creating object.\r\n\r\n```python\r\nfrom dateutil.parser import *\r\nimport astropy.time as time\r\n\r\ndatestr = \'2002-05-01 15:45:00-06\'\r\n\r\nparse(datestr)\r\nOut[44]: datetime.datetime(2002, 5, 1, 15, 45, tzinfo=tzoffset(None, -21600))\r\n\r\nd = parse(datestr)\r\n\r\ntime.Time(d)\r\nOut[48]: <Time object: scale=\'utc\' format=\'datetime\' value=2002-05-01 15:45:00>\r\n```'"
3156,50312971,astrofrog,astrofrog,2014-11-27 17:35:28,2014-12-01 17:25:22,2014-11-29 09:30:54,closed,,v0.4.3,3,Affects-release;Bug,https://api.github.com/repos/astropy/astropy/issues/3156,b'Message about unclosed files in affiliated packages',"b""For a number of affiliated packages, I see the following when running ``python setup.py test`` with Python 3.4:\r\n\r\n```\r\nsys:1: ResourceWarning: unclosed file <_io.TextIOWrapper name='/Volumes/Raptor/Library/Python/3.4/lib/python/site-packages/astropy-1.0.dev10555-py3.4-macosx-10.8-x86_64.egg/astropy/extern/bundled/six.py' mode='r' encoding='utf-8'>\r\n```\r\n\r\nThis occurs after the tests have run. @cdeil also reported a similar issue in the past.\r\n\r\nTo reproduce:\r\n\r\n```\r\ngit clone git@github.com:astrofrog/wcsaxes.git\r\ncd wcsaxes\r\npython setup.py test  # with Python 3.4\r\n```\r\n\r\nOutput:\r\n\r\n```\r\n...\r\n=============== 4 failed, 113 passed, 1 skipped in 8.23 seconds ================\r\nsys:1: ResourceWarning: unclosed file <_io.TextIOWrapper name='/Volumes/Raptor/Library/Python/3.4/lib/python/site-packages/astropy-1.0.dev10555-py3.4-macosx-10.8-x86_64.egg/astropy/extern/bundled/six.py' mode='r' encoding='utf-8'>\r\n/opt/local/Library/Frameworks/Python.framework/Versions/3.4/lib/python3.4/importlib/_bootstrap.py:2150: ImportWarning: sys.meta_path is empty\r\nsys:1: ResourceWarning: unclosed file <_io.BufferedReader name=10>\r\nsys:1: ResourceWarning: unclosed file <_io.BufferedReader name=12>\r\n```\r\n\r\nI'm opening this here because I wonder if it's to do with the way we import the six module?"""
3154,50237469,bnordgren,mhvk,2014-11-26 23:16:20,2014-11-27 14:50:05,2014-11-27 14:23:09,closed,,,6,Bug;units,https://api.github.com/repos/astropy/astropy/issues/3154,b'Vector of Time objects causes units error',"b'Applying a basic scale and offset to calculate ""samples since an epoch"", I find that a scalar time object works, and a 1d array of time objects raises a units error.\r\n\r\n```python\r\ndef calc_index(the_time) : \r\n    return (the_time - time.Time(\'2002:001\',format=\'yday\'))/(4*u.day)\r\n\r\ncalc_index(time.Time(\'2002:180\',format=\'yday\'))\r\nOut[36]: <Quantity 44.75>\r\n\r\ntimes = np.arange(10,100,10)*u.day + time.Time(\'2002:001\', format=\'yday\')\r\n\r\ntimes\r\nOut[38]: \r\n<Time object: scale=\'utc\' format=\'yday\' value=[\'2002:011:00:00:00.000\' \'2002:021:00:00:00.000\' \'2002:031:00:00:00.000\'\r\n \'2002:041:00:00:00.000\' \'2002:051:00:00:00.000\' \'2002:061:00:00:00.000\'\r\n \'2002:071:00:00:00.000\' \'2002:081:00:00:00.000\' \'2002:091:00:00:00.000\']>\r\n\r\ncalc_index(times)\r\n---------------------------------------------------------------------------\r\nUnitsError                                Traceback (most recent call last)\r\n<ipython-input-39-63ab2dbfb1f8> in <module>()\r\n----> 1 calc_index(times)\r\n\r\n<ipython-input-34-5dfe28728be4> in calc_index(the_time)\r\n      1 def calc_index(the_time) :\r\n----> 2     return (the_time - time.Time(\'2002:001\',format=\'yday\'))/(4*u.day)\r\n      3 \r\n\r\nC:\\Users\\bnordgren\\AppData\\Local\\Enthought\\Canopy\\User\\lib\\site-packages\\astropy\\time\\core.py in __div__(self, other)\r\n   1286     def __div__(self, other):\r\n   1287         """"""Division of `TimeDelta` objects by numbers/arrays.""""""\r\n-> 1288         return self.__truediv__(other)\r\n   1289 \r\n   1290     def __rdiv__(self, other):\r\n\r\nC:\\Users\\bnordgren\\AppData\\Local\\Enthought\\Canopy\\User\\lib\\site-packages\\astropy\\time\\core.py in __truediv__(self, other)\r\n   1308                 raise err\r\n   1309 \r\n-> 1310         out = TimeDelta(jd1, jd2, format=\'jd\', scale=self.scale)\r\n   1311 \r\n   1312         if self.format != \'jd\':\r\n\r\nC:\\Users\\bnordgren\\AppData\\Local\\Enthought\\Canopy\\User\\lib\\site-packages\\astropy\\time\\core.py in __init__(self, val, val2, format, scale, copy)\r\n   1138                 format = \'jd\'\r\n   1139 \r\n-> 1140             self._init_from_vals(val, val2, format, scale, copy)\r\n   1141 \r\n   1142             if scale is not None:\r\n\r\nC:\\Users\\bnordgren\\AppData\\Local\\Enthought\\Canopy\\User\\lib\\site-packages\\astropy\\time\\core.py in _init_from_vals(self, val, val2, format, scale, copy)\r\n    281 \r\n    282         # Parse / convert input values into internal jd1, jd2 based on format\r\n--> 283         self._time = self._get_time_fmt(val, val2, format, scale)\r\n    284         self._format = self._time.name\r\n    285 \r\n\r\nC:\\Users\\bnordgren\\AppData\\Local\\Enthought\\Canopy\\User\\lib\\site-packages\\astropy\\time\\core.py in _get_time_fmt(self, val, val2, format, scale)\r\n    316             try:\r\n    317                 return FormatClass(val, val2, scale, self.precision,\r\n--> 318                                    self.in_subfmt, self.out_subfmt)\r\n    319             except (ValueError, TypeError):\r\n    320                 pass\r\n\r\nC:\\Users\\bnordgren\\AppData\\Local\\Enthought\\Canopy\\User\\lib\\site-packages\\astropy\\time\\core.py in __init__(self, val1, val2, scale, precision, in_subfmt, out_subfmt, from_jd)\r\n   1356             self.jd2 = val2\r\n   1357         else:\r\n-> 1358             val1, val2 = self._check_val_type(val1, val2)\r\n   1359             self.set_jds(val1, val2)\r\n   1360 \r\n\r\nC:\\Users\\bnordgren\\AppData\\Local\\Enthought\\Canopy\\User\\lib\\site-packages\\astropy\\time\\core.py in _check_val_type(self, val1, val2)\r\n   1384             # set possibly scaled unit any quantities should be converted to\r\n   1385             _unit = u.CompositeUnit(getattr(self, \'unit\', 1.), [u.day], [1])\r\n-> 1386             val1 = val1.to(_unit).value\r\n   1387             if val2 is not None:\r\n   1388                 val2 = val2.to(_unit).value\r\n\r\nC:\\Users\\bnordgren\\AppData\\Local\\Enthought\\Canopy\\User\\lib\\site-packages\\astropy\\units\\quantity.py in to(self, unit, equivalencies)\r\n    575         unit = Unit(unit)\r\n    576         new_val = np.asarray(\r\n--> 577             self.unit.to(unit, self.value, equivalencies=equivalencies))\r\n    578         return self._new_view(new_val, unit)\r\n    579 \r\n\r\nC:\\Users\\bnordgren\\AppData\\Local\\Enthought\\Canopy\\User\\lib\\site-packages\\astropy\\units\\core.py in to(self, other, value, equivalencies)\r\n    910             If units are inconsistent\r\n    911         """"""\r\n--> 912         return self.get_converter(other, equivalencies=equivalencies)(value)\r\n    913 \r\n    914     def in_units(self, other, value=1.0, equivalencies=[]):\r\n\r\nC:\\Users\\bnordgren\\AppData\\Local\\Enthought\\Canopy\\User\\lib\\site-packages\\astropy\\units\\core.py in get_converter(self, other, equivalencies)\r\n    846         except UnitsError:\r\n    847             return self._apply_equivalences(\r\n--> 848                 self, other, self._normalize_equivalencies(equivalencies))\r\n    849         return lambda val: scale * _condition_arg(val)\r\n    850 \r\n\r\nC:\\Users\\bnordgren\\AppData\\Local\\Enthought\\Canopy\\User\\lib\\site-packages\\astropy\\units\\core.py in _apply_equivalences(self, unit, other, equivalencies)\r\n    809         raise UnitsError(\r\n    810             ""{0} and {1} are not convertible"".format(\r\n--> 811                 unit_str, other_str))\r\n    812 \r\n    813     def get_converter(self, other, equivalencies=[]):\r\n\r\nUnitsError: \'1 / d\' (frequency) and \'d\' (time) are not convertible \r\n\r\n\r\n```'"
3153,50232611,astrofrog,astrofrog,2014-11-26 22:10:24,2014-12-09 13:53:50,2014-12-09 13:53:50,closed,,v0.4.3,5,Affects-release;Bug;units,https://api.github.com/repos/astropy/astropy/issues/3153,b'Removed a few spectral density equivalencies which do not make sense.',"b""I don't think the equivalencies removed here make sense for spectral density.\r\n\r\n@mdboom - since you originally added these, can you comment on this?\r\n\r\ncc @pllim @mhvk \r\n\r\n(originally discussed in https://github.com/astropy/astropy/pull/692)"""
3132,49896181,taldcroft,taldcroft,2014-11-24 14:41:46,2014-11-24 21:48:11,2014-11-24 15:36:25,closed,taldcroft,v0.4.3,3,Affects-release;Bug;Effort-low;io.ascii;Package-intermediate,https://api.github.com/repos/astropy/astropy/issues/3132,b'Improve io.ascii.read guess when inputting file objects',"b""In Python 3 (only) the following fails:\r\n```\r\nfrom astropy.io import ascii\r\nt = ascii.read(open('astropy/io/ascii/tests/t/ipac.dat.bz2', 'rb'))\r\n```\r\nThis is closely related to #3013 and issues raised in #3109.  This PR puts in a fix in the `ui._guess()` which reads the entire file into memory if a file object is supplied.  This fixes the Python 3 problem and should be more efficient in Python 2 because the file is not re-read during the guess process."""
3131,49837440,rashoodkhan,embray,2014-11-23 20:15:08,2015-01-26 18:58:46,2015-01-26 18:58:42,closed,,,18,Bug;Enhancement;io.fits,https://api.github.com/repos/astropy/astropy/issues/3131,b'Fixes issue #3122 of filenames being taken as URL',"b'I have added more checks to verify that given fileobj is an url by checking the scheme. The scheme is returned by urllib.parse.urlparse(urlfile).scheme - which contains the protocol for urlfile. For a valid URL, the scheme could be HTTP, HTTPS or FTP, hence anything else returned apart from this should not be treated as URL and should be treated as File.  Fixes #3122 '"
3122,49553425,keflavich,embray,2014-11-20 13:57:21,2015-01-26 18:58:22,2015-01-26 18:58:20,closed,,v1.0.0,4,Affects-release;Bug;Effort-low;io.fits;Package-novice,https://api.github.com/repos/astropy/astropy/issues/3122,b'FITS reader thinks some filenames are URLs',"b'I have had trouble opening files with certain names.  In the below example, `blah.fits` and `APEXHET.2014-04-01T15:18:01.000.fits` are the same file (`blah` is a hardlink).  \r\n\r\n```\r\nIn [1]: f = fits.open(\'blah.fits\')\r\n\r\nIn [2]: f = fits.open(\'APEXHET.2014-04-01T15:18:01.000.fits\')\r\nTraceback (most recent call last):\r\n  File ""<ipython-input-2-ebc6bf24211f>"", line 1, in <module>\r\n    f = fits.open(\'APEXHET.2014-04-01T15:18:01.000.fits\')\r\n  File ""/Users/adam/repos/astropy/astropy/io/fits/hdu/hdulist.py"", line 119, in fitsopen\r\n    return HDUList.fromfile(name, mode, memmap, save_backup, **kwargs)\r\n  File ""/Users/adam/repos/astropy/astropy/io/fits/hdu/hdulist.py"", line 251, in fromfile\r\n    save_backup=save_backup, **kwargs)\r\n  File ""/Users/adam/repos/astropy/astropy/io/fits/hdu/hdulist.py"", line 768, in _readfrom\r\n    ffo = _File(fileobj, mode=mode, memmap=memmap)\r\n  File ""/Users/adam/repos/astropy/astropy/io/fits/file.py"", line 114, in __init__\r\n    self.name, _ = urllib.request.urlretrieve(fileobj)\r\n  File ""/Users/adam/anaconda/envs/astropy27/lib/python2.7/urllib.py"", line 94, in urlretrieve\r\n    return _urlopener.retrieve(url, filename, reporthook, data)\r\n  File ""/Users/adam/anaconda/envs/astropy27/lib/python2.7/urllib.py"", line 240, in retrieve\r\n    fp = self.open(url, data)\r\n  File ""/Users/adam/anaconda/envs/astropy27/lib/python2.7/urllib.py"", line 205, in open\r\n    return self.open_unknown(fullurl, data)\r\n  File ""/Users/adam/anaconda/envs/astropy27/lib/python2.7/urllib.py"", line 217, in open_unknown\r\n    raise IOError, (\'url error\', \'unknown url type\', type)\r\nIOError: [Errno url error] unknown url type: \'apexhet.2014-04-01t15\'\r\n```\r\n\r\nThe problem is that the filename apparently looks like a URL in line 113 of `file.py`:\r\n`len(urllib.parse.urlparse(fileobj).scheme) > 1): # This is an URL` \r\n\r\ncc @embray'"
3121,49552887,matteobachetti,embray,2014-11-20 13:54:24,2015-03-03 16:20:08,2014-11-24 16:03:33,closed,mdboom,v0.4.3,14,Affects-release;Bug;units,https://api.github.com/repos/astropy/astropy/issues/3121,b'Wrong sum of fractions in the powers of units',"b'Hi, \r\nI\'m having trouble with products of units having fractional powers.\r\n\r\nE.g.\r\n```\r\nIn [4]: u.cm ** Fraction(1,2) * u.cm ** Fraction(2, 3)\r\nOut[4]: Unit(""cm"")\r\n```\r\ninstead of `cm(7/6)`.\r\n\r\nIt is very weird, in most fractional units operations it works pretty well.\r\nI\'m on a Mac, Mavericks, with Astropy 0.4.2, python 2.7.8, numpy 1.9.0\r\n\r\nThanks in advance,\r\nMatteo'"
3119,49308234,eteq,astrofrog,2014-11-18 23:26:47,2015-03-03 16:19:57,2014-11-19 21:26:22,closed,mdboom,,21,Bug;testing,https://api.github.com/repos/astropy/astropy/issues/3119,b'Stop open-files from dramatically slowing down tests ',"b""After #3096 was merged, the travis builds have slowed down rather dramatically (from net ~2 hr to ~3 hr).  This seems to be due to something that the open file checking is doing on some systems and not others.\r\n\r\nThere was some discussion after the merge for #3096, but it seems like this is probably a bug somewhere, so I'm opening this as a separate issue for the tracker.  @sargas reported that he can reproduce it locally, but isn't sure how to profile pytest and determine exactly where in the code it's slowing down.  So any hints from anyone on this would be appreciated...\r\n\r\ncc @sargas @astrofrog @embray """
3115,49125194,simongibbons,embray,2014-11-17 18:13:29,2015-01-06 12:16:24,2014-12-31 20:56:00,closed,,v0.4.3,7,Affects-release;Bug;io.fits,https://api.github.com/repos/astropy/astropy/issues/3115,b'Added checking for the RICE_ONE compression type synonym',"b'CFITSIO 3.35 added a type synonym for RICE_1 compression as RICE_ONE, this was as a kludge to flag for an image formatted with SUBTRACTIVE_DITHER_2. \r\n\r\nThis PR adds support for reading files formatted like this to astropy if the version of CFITSIO supports it.'"
3106,48914018,astrofrog,taldcroft,2014-11-15 16:07:37,2014-11-18 11:33:32,2014-11-18 11:33:30,closed,taldcroft,v0.4.3,12,Affects-release;Bug;coordinates,https://api.github.com/repos/astropy/astropy/issues/3106,"b""Don't preserve equinox when transforming with SkyCoord""","b""I find the following example confused me and it cost me a fair amount of time to debug vs kapteyn:\r\n\r\n```\r\nIn [5]: c = SkyCoord(1. * u.deg, 1. * u.deg, frame=FK5, obstime=Time('J2000', scale='utc'))\r\n\r\nIn [6]: c.transform_to(FK4)\r\nOut[6]: <SkyCoord (FK4: equinox=J2000.000, obstime=J2000.000): ra=0.999659097220236 deg, dec=0.9999930797297883 deg>\r\n```\r\n\r\nThe issue is that while there is no sensible default for ``obstime``, and it makes sense to keep the one defined before, the default equinox for FK4 should be ``B1950`` and it should really only be changed explicitly, so I would expect the final ``SkyCoord`` above to be in B1950.\r\n\r\nBasically I'm advocating for two different kinds of attributes in frames - attributes that default to ``None``, and attributes that default to a value ``B1950``. In the above case, the ``FK4`` frame would assume the default equinox of ``B1950`` while for ``obstime`` it would be default to ``None`` so then ``SkyCoord`` would just use the value specified before.\r\n\r\n@eteq @taldcroft @cdeil - what do you think?"""
3104,48841893,mdboom,embray,2014-11-14 21:29:33,2015-03-03 16:19:33,2014-11-17 17:26:28,closed,,v0.4.3,3,Affects-release;Bug,https://api.github.com/repos/astropy/astropy/issues/3104,b'Support Pythons without bz2 support',"b'bz2 is a semi-optional module in the Python standard library that isn\'t always available.  I\'ve seen this on ""small"" Python installations on ARM hardware, and it\'s possible to do this when building from source without the bzip2 library installed, or on Debian with only the `python-minimal` package.'"
3097,48532229,zblz,astrofrog,2014-11-12 16:42:25,2014-11-17 18:31:54,2014-11-15 11:16:34,closed,,v0.4.3,11,Affects-release;Bug;units,https://api.github.com/repos/astropy/astropy/issues/3097,b'Quantity: remove trailing space if quantity has no units',"b""For quantities without unit (e.g., those resulting from a division of two quantities with the same unit), the space between the value and the (empty) unit still appears when calling `__format__`. Example:\r\n\r\n```python\r\n>>> q1 = Quantity(3.14)\r\n>>> format(q1, '.2f')\r\n'3.14 '\r\n```\r\n\r\nThis PR removes the space and adds a test for the example above to return '3.14'."""
3079,47995969,aconley,embray,2014-11-06 18:22:51,2014-11-07 20:01:20,2014-11-07 20:01:15,closed,,v0.4.3,3,Bug;Docs;io.fits,https://api.github.com/repos/astropy/astropy/issues/3079,b'Documentation bug for Fits tables',"b""The 'creating a new table file' sphinx documentation for astropy.io.fits seems to have some errors related to appending a primary HDU.\r\n\r\nFirst, the description of appending a primary HDU:\r\n\r\n      hdu = fits.PrimaryHDU(n)\r\n\r\nuses an undefined variable (n).  Actually, it works in the doctest because n is defined in an earlier section unrelated to making tables, but it shouldn't be there.\r\n\r\nFixing that would be trivial, but the bigger issue is that - as far as I can tell - this command does not do what the docs say, which is to automatically append an empty primary HDU to the table HDU (a good thing, since you haven't specified any connection to the table).\r\n\r\nMaybe what was intended was\r\n\r\n     tbhdu.writeto(filename)\r\n\r\nbut I'm not sure enough of that to just submit a pull to fix it."""
3078,47990074,astrofrog,embray,2014-11-06 17:29:31,2014-11-07 21:47:00,2014-11-07 21:47:00,closed,embray,v0.4.3,6,Bug;io.fits;Upstream Fix Required,https://api.github.com/repos/astropy/astropy/issues/3078,b'Bug with reading large FITS files on OSX with memory mapping is turned off',"b""The following example demonstrates the issue:\r\n\r\n```\r\nIn [1]: import numpy as np\r\n\r\nIn [2]: from astropy.io import fits\r\n\r\nIn [3]: cube = np.random.random((20,200,90000))\r\n\r\nIn [4]: fits.writeto('test.fits', cube)\r\n\r\nIn [5]: fits.open('test.fits', memmap=False)[0].data[:,:,45521]\r\nOut[5]: \r\narray([[ 0.,  0.,  0., ...,  0.,  0.,  0.],\r\n       [ 0.,  0.,  0., ...,  0.,  0.,  0.],\r\n       [ 0.,  0.,  0., ...,  0.,  0.,  0.],\r\n       ..., \r\n       [ 0.,  0.,  0., ...,  0.,  0.,  0.],\r\n       [ 0.,  0.,  0., ...,  0.,  0.,  0.],\r\n       [ 0.,  0.,  0., ...,  0.,  0.,  0.]])\r\n\r\nIn [6]: fits.open('test.fits', memmap=True)[0].data[:,:,45521]\r\nOut[6]: \r\narray([[ 0.64018864,  0.2643109 ,  0.84913068, ...,  0.0706827 ,\r\n         0.4038226 ,  0.62855128],\r\n       [ 0.83440155,  0.02713217,  0.63950074, ...,  0.79294334,\r\n         0.18718276,  0.9390026 ],\r\n       [ 0.12285717,  0.74163341,  0.89414486, ...,  0.43309914,\r\n         0.06917324,  0.72625426],\r\n       ..., \r\n       [ 0.09470898,  0.51644912,  0.70741745, ...,  0.7802153 ,\r\n         0.29936109,  0.31016186],\r\n       [ 0.9110287 ,  0.22992227,  0.2804144 , ...,  0.53135828,\r\n         0.83194219,  0.56606918],\r\n       [ 0.08187519,  0.82504684,  0.93095136, ...,  0.37537693,\r\n         0.34089489,  0.79180074]])\r\n```\r\n\r\nI think this happens when the cube is > 2Gb\r\n\r\n@embray, any ideas? This is on MacOS X with Python 3.4"""
3067,47547697,kgullikson88,embray,2014-11-02 20:30:12,2015-01-13 17:34:51,2014-11-24 16:12:39,closed,,v0.4.3,21,Bug;io.fits,https://api.github.com/repos/astropy/astropy/issues/3067,"b""'In' operator works on hdulist (issue #3060)""","b'I added a __contains__ method to the Hdulist class, so that typing things like ""a"" in hdulist works. I implemented it by just doing a try/except with the index_of method, so it works with tuples of the form (name, extver) as well. \r\n\r\nHere is the original issue:\r\nhttps://github.com/astropy/astropy/issues/3060'"
3066,47535520,astrofrog,mhvk,2014-11-02 12:38:53,2015-01-13 17:34:51,2014-11-03 15:23:37,closed,,v0.4.3,5,Affects-release;Bug;wcs,https://api.github.com/repos/astropy/astropy/issues/3066,b'Fixed a bug which meant that Python thought that WCS instances were iterable',b'cc @keflavich @mdboom'
3062,46949490,mhvk,mdboom,2014-10-27 19:37:45,2015-01-13 17:34:51,2014-11-12 16:05:34,closed,mhvk,v0.4.3,4,Affects-release;Bug;units,https://api.github.com/repos/astropy/astropy/issues/3062,b'Ensure Quantity.round always works; wrap methods with less boilerplate',"b""Despite our fairly robust testing, it turns out `Quantity` still is not bug free:\r\n```\r\nimport astropy.units as u, numpy as np\r\nq = u.Quantity([1.253, 2.253], 'deg')\r\nq.round()\r\n# looks OK: <Quantity [ 1., 2.] deg>\r\nq.round(decimals=2)\r\n# OOPS:  array([ 1.25,  2.25])\r\na = np.zeros_like(q)\r\nnp.cumsum(q, out=a)\r\n# OK: <Quantity [ 1.253, 3.506] deg>\r\na\r\n# OK: <Quantity [ 1.253, 3.506] deg>\r\nb = np.cumsum(q, out=a)\r\nb is a\r\n# OOPS: False\r\n```\r\n\r\nHere, the problem with `round(decimal=2)` arises because internally numpy multiplies and divides by `10**decimal`, using inplace changes. And the second arises because we take a `Quantity._new_view` of the numpy output, which we should not do if we already set up for inplace output.\r\n\r\nThe attached PR adds an override for `round` that solves the unit issue for all cases, and also replaces the `Quantity._prepare_output` method with a general wrapper for methods, `Quantity._wrap_function`. This reduces the boilerplace quite a bit (and should be a bit faster for in-place, and very little change for normal calculations).\r\n\r\nNote: in the second commit are changes that are required by Quantity now correctly returning a Quantity upon rounding..."""
3061,46923501,astrofrog,astrofrog,2014-10-27 16:02:57,2014-10-28 14:02:41,2014-10-27 21:53:56,closed,,,8,Bug;table,https://api.github.com/repos/astropy/astropy/issues/3061,b'Should be able to add empty Table columns',"b""I think the following should probably work and add an empty column:\r\n\r\n```\r\nIn [8]: t = Table([[1,2,3]])\r\n\r\nIn [9]: t.add_column(Column(name='a', dtype=float))\r\n---------------------------------------------------------------------------\r\nValueError                                Traceback (most recent call last)\r\n<ipython-input-9-29b2afc6fa98> in <module>()\r\n----> 1 t.add_column(Column(name='a', dtype=float))\r\n\r\n/Users/tom/Library/Python/3.4/lib/python/site-packages/astropy-1.0.dev10112-py3.4-macosx-10.8-x86_64.egg/astropy/table/table.py in add_column(self, col, index)\r\n    981         if index is None:\r\n    982             index = len(self.columns)\r\n--> 983         self.add_columns([col], [index])\r\n    984 \r\n    985     def add_columns(self, cols, indexes=None):\r\n\r\n/Users/tom/Library/Python/3.4/lib/python/site-packages/astropy-1.0.dev10112-py3.4-macosx-10.8-x86_64.egg/astropy/table/table.py in add_columns(self, cols, indexes)\r\n   1051                 newcols.insert(i, col)\r\n   1052 \r\n-> 1053         self._init_from_cols(newcols)\r\n   1054 \r\n   1055     def remove_row(self, index):\r\n\r\n/Users/tom/Library/Python/3.4/lib/python/site-packages/astropy-1.0.dev10112-py3.4-macosx-10.8-x86_64.egg/astropy/table/table.py in _init_from_cols(self, cols)\r\n    469         if len(lengths) != 1:\r\n    470             raise ValueError('Inconsistent data column lengths: {0}'\r\n--> 471                              .format(lengths))\r\n    472 \r\n    473         self._set_masked_from_cols(cols)\r\n\r\nValueError: Inconsistent data column lengths: {0, 3}\r\n```"""
3055,46839865,cherti,cherti,2014-10-26 11:08:08,2015-07-31 00:41:39,2015-07-31 00:41:39,closed,taldcroft,,5,Bug;table,https://api.github.com/repos/astropy/astropy/issues/3055,b'Raise more informative exception in Table value formatting if type and format mismatch',"b'Implementing Issue #2868:\r\n\r\nImplementing raising TypeError upon nonworking format string instead of value error, handling it above the point where it was originally raised to include information about the exact point of failure.\r\n\r\nAdditionally getter and setter were implemented to raise the error as soon as it can be determined to not work (aka when setting it).\r\n\r\nFormat is checked for all existing entries in case of np.object-ish and for one entry for other types as this should be sufficient and more efficient for large tables.'"
3052,46764618,embray,embray,2014-10-24 17:49:42,2014-10-31 15:08:46,2014-10-31 15:08:39,closed,,v0.4.3,9,Affects-release;Bug;Effort-low;Package-intermediate;table;Upstream Fix Required,https://api.github.com/repos/astropy/astropy/issues/3052,b'Incorrect dtype format used for string columns when initializing Table from rows on Python 3',"b""I noticed this while testing the doctests on Python 3, in this example:\r\n\r\n```python\r\n>>> data_rows = [(1, 2.0, 'x'),\r\n...              (4, 5.0, 'y'),\r\n...              (5, 8.2, 'z')]\r\n>>> t = Table(rows=data_rows, names=('a', 'b', 'c'), meta={'name': 'first table'})\r\n>>> t\r\narray([(1, 2.0, 'x'), (4, 5.0, 'y'), (5, 8..., 'z')],\r\n      dtype=[('a', '<i8'), ('b', '<f8'), ('c', 'S1')])\r\n```\r\n\r\nOn Python 3 the output of this example is:\r\n```python\r\narray([(1, 2.0, 'x'), (4, 5.0, 'y'), (5, 8..., 'z')],\r\n      dtype=[('a', '<i8'), ('b', '<f8'), ('c', '<U4')])\r\n```\r\n\r\nThe difference is in the dtype of column 'c'.  The change from 'S' to 'U' is expected.  However, this should be 'U1' not 'U4'.  The result is that it's using 16 bytes per column to represent a single-character column, instead of just 4 bytes.\r\n\r\nThis is due to a bug in `np.rec.fromrecords` which we call call [here](https://github.com/astropy/astropy/blob/e573eb7cfe659697d720d1df22fcd9111f52e239/astropy/table/table.py#L181).  The bug is on this line:  https://github.com/numpy/numpy/blob/master/numpy/core/records.py#L536\r\n\r\nIt checks if the type of the objects in some column are a subtype of the `flexible` type (which the Numpy unicode type *is*).  For other `flexible` subtypes, such as `void`, the format code should include the `itemsize` for the dtype.  However, for the unicode type it should include the number of characters (i.e. `itemsize / 4`).\r\n\r\nWe can easily fix this on our end by partially reimplementing `np.rec.fromrecords`.  I will also submit an upstream patch."""
3051,46672699,mhvk,mhvk,2014-10-23 20:26:59,2015-06-05 18:15:40,2014-11-19 20:07:58,closed,mhvk,v0.4.3,8,Affects-release;Bug;units,https://api.github.com/repos/astropy/astropy/issues/3051,b'Let Quantity treat input with unit attributes more carefully.',"b'Currently, one can inadvertently mess up input to `Quantity` with a `.unit` attribute, as shown below. This PR cleans up that path, and also ensures that if the `unit` attribute contains something unrecognizable as a `unit`, an exception is raised (rather than assume the content has no unit). Finally, it doesn\'t presume that conversion between units is done by simple rescaling, but rather uses the `.to` method. This to ensure that if one is using equivalencies, e.g., between velocity and wavelength, or degrees C and K, conversion will be done correctly.\r\n\r\n```\r\nIn [1]: import astropy.units as u, numpy as np\r\n\r\nIn [2]: class MyQuantityLookalike(np.ndarray):\r\n   ...:     pass\r\n   ...: \r\n\r\nIn [3]: a = np.arange(3.)\r\n\r\nIn [4]: mylookalike = a.view(MyQuantityLookalike)\r\n\r\nIn [5]: mylookalike.unit = u.m\r\n\r\nIn [6]: u.Quantity(mylookalike, u.mm, copy=False)\r\nOut[6]: <Quantity [    0., 1000., 2000.] mm>\r\n\r\nIn [7]: mylookalike\r\nOut[7]: MyQuantityLookalike([    0.,  1000.,  2000.])\r\n\r\nIn [8]: mylookalike.unit\r\nOut[8]: Unit(""m"")\r\n```'"
3050,46626952,mhvk,embray,2014-10-23 13:55:09,2015-01-13 17:35:10,2014-10-27 13:50:08,closed,,v0.4.3,5,Affects-release;Bug;units,https://api.github.com/repos/astropy/astropy/issues/3050,"b'Correct Quantity.list to .tolist, overriding the correct ndarray method'","b'While testing `ndarray` methods, I noticed `Quantity` does not override `tolist`, but instead mistakenly has a `list` method. This PR corrects this mistake. Strictly, this is a bug, but since `.list` only gives a `NotImplementedError` it is probably not worth backporting.'"
3045,46431108,mhvk,mhvk,2014-10-21 18:59:23,2015-01-13 17:35:10,2014-11-12 20:09:09,closed,mhvk,v0.4.3,9,Affects-release;Bug;units,https://api.github.com/repos/astropy/astropy/issues/3045,b'Ensure Quantity.squeeze() returns a Quantity',"b'In #3038, it was noted that `np.squeeze` does not return a `Quantity`. This seemed surprising since in the quantity source file I had noted [1] that all shape manipulation worked fine -- but clearly had omitted to actually test this properly. It turns out that internally, `ndarray.squeeze` calls `__array_wrap__` for subclasses, with `context=None` (unlike ufuncs, which set the context). So, this PR changes `Quantity..__array_wrap__` so that if context is None, it returns `self._new_view(obj)`, i.e., a Quantity view with the unit set to that of `self`.\r\n\r\nIt is possible that this has side-benefits... (or introduces problems, though all tests pass locally).\r\n\r\nIt also suggests that part of the functionaility of `_new_view` could be taken up by `__array_wrap__` -- this may need some thought, but should not really matter for this PR.\r\n\r\n[1] https://github.com/astropy/astropy/blob/master/astropy/units/quantity.py#L1104'"
3034,46145405,taldcroft,taldcroft,2014-10-17 21:18:10,2014-10-21 15:28:26,2014-10-21 15:28:22,closed,taldcroft,v0.4.3,4,Affects-release;Bug;table,https://api.github.com/repos/astropy/astropy/issues/3034,b'Fix bug in Table init with multidim input data',b'There was a failure when creating a new Table from an ndarray structured array where one of the columns was multidimensional and copy=True.  This was due to ignoring the column shape when creating the new `_data` array.'
3026,45593799,mdmueller,astrofrog,2014-10-12 21:07:13,2014-10-30 00:54:18,2014-10-14 07:11:24,closed,,v1.0.0,2,Affects-dev;Bug;io.ascii,https://api.github.com/repos/astropy/astropy/issues/3026,b'Fix Mac/Python 3 issue with too many open files in io.ascii',"b""It's been a while unfortunately, but I just got hold of a Mac to test out #3018 and realized that the cleanup code wasn't calling `PyBuffer_Release`, which fixed the issue for me. @astrofrog @taldcroft - Does this work for you?"""
3023,45358318,taldcroft,mhvk,2014-10-09 12:06:33,2015-01-13 17:35:10,2014-10-21 12:50:55,closed,taldcroft,v0.4.3,6,Affects-release;Bug;table,https://api.github.com/repos/astropy/astropy/issues/3023,b'Rename masked column fails for subsequent slicing',"b""This is weird, but when you create a masked column and look at the data attribute, you will see things like `mc.data._name`, `mc.data._parent_table`, etc.   For reasons I don't understand, this leads to the following bug:\r\n```\r\nIn [1]: from astropy.table import *\r\nIn [2]: mc = MaskedColumn([1,2], name='a')\r\nIn [3]: mc.data._name\r\nOut[3]: 'a'\r\n\r\nIn [4]: mc\r\nOut[4]: \r\n<MaskedColumn name='a' unit=None format=None description=None>\r\nmasked_array(data = [1 2],\r\n             mask = [False False],\r\n       fill_value = 999999)\r\n\r\nIn [5]: mc.name = 'b'\r\n\r\nIn [6]: mc\r\nOut[6]: \r\n<MaskedColumn name='b' unit=None format=None description=None>\r\nmasked_array(data = [1 2],\r\n             mask = [False False],\r\n       fill_value = 999999)\r\n\r\nIn [7]: mc[:]   # back to name of 'a'\r\nOut[7]: \r\n<MaskedColumn name='a' unit=None format=None description=None>\r\nmasked_array(data = [1 2],\r\n             mask = [False False],\r\n       fill_value = 999999)\r\n\r\nIn [8]: mc.data._name\r\nOut[8]: 'a'\r\n```\r\nNote this is in the current stable release, and the same feature is not seen for Column.  This is for Mac / Python 2.7 / numpy 1.8."""
3018,44972595,taldcroft,astrofrog,2014-10-06 11:21:30,2014-10-14 13:43:40,2014-10-14 07:11:45,closed,,v1.0.0,12,Affects-dev;Bug;io.ascii;Package-expert,https://api.github.com/repos/astropy/astropy/issues/3018,b'Io.ascii test failures (too many open files) on Mac/Python 3.3 after #2969',"b'When testing with Python 3.3 / Mac there I\'m seeing consistent test failures ending with `OSError: [Errno 24] Too many open files`.  This seems to have been introduced by #2969.  I wasn\'t able to reproduce in limited testing outside of the test suite (i.e trying to read the same files in the same way).  This doesn\'t happen in linux (travis) testing.\r\n\r\n@amras1 \r\n@astrofrog - have you been seeing this?  Don\'t you normally develop/test on mac / python 3?  I tried doing everything possible to make sure I\'m building in a clean way.\r\n\r\n```\r\n========================================== test session starts ==========================================\r\nplatform darwin -- Python 3.3.5 -- pytest-2.5.1\r\n\r\nRunning tests with Astropy version 1.0.dev10059.\r\nRunning tests in ./astropy/io/ascii /Users/aldcroft/git/astropy/docs/io/ascii.\r\n\r\nPlatform: Darwin-13.4.0-x86_64-i386-64bit\r\n\r\nExecutable: /Users/aldcroft/anaconda/envs/py33-new/bin/python\r\n\r\nFull Python Version: \r\n3.3.5 |Continuum Analytics, Inc.| (default, Sep  2 2014, 13:57:31) \r\n[GCC 4.2.1 (Apple Inc. build 5577)]\r\n\r\nencodings: sys: utf-8, locale: UTF-8, filesystem: utf-8\r\nbyteorder: little\r\nfloat info: dig: 15, mant_dig: 15\r\n\r\nNumpy: 1.9.0\r\nScipy: not available\r\nMatplotlib: not available\r\nh5py: not available\r\nRunning doctests in .rst files is not supported on Python 3.x\r\n\r\ncollected 266 items \r\n\r\nastropy/io/ascii/daophot.py .\r\nastropy/io/ascii/ipac.py .\r\nastropy/io/ascii/tests/test_c_reader.py ...........................x................x.......x.x...........\r\nastropy/io/ascii/tests/test_cds_header_from_readme.py ...\r\nastropy/io/ascii/tests/test_compressed.py .....\r\nastropy/io/ascii/tests/test_connect.py .............ss........\r\nastropy/io/ascii/tests/test_fixedwidth.py ............................\r\nastropy/io/ascii/tests/test_html.py s.ssssss.ssss..s\r\nastropy/io/ascii/tests/test_ipac_definitions.py ...................\r\nastropy/io/ascii/tests/test_read.py .............FF....F.F.....................................................................\r\nastropy/io/ascii/tests/test_types.py ...\r\nastropy/io/ascii/tests/test_write.py ..........\r\n_________________________________ test_read_all_files_via_table[force] __________________________________\r\n\r\nfast_reader = \'force\'\r\n\r\n    @pytest.mark.parametrize(\'fast_reader\', [True, False, \'force\'])\r\n    def test_read_all_files_via_table(fast_reader):\r\n        for testfile in get_testfiles():\r\n            if testfile.get(\'skip\'):\r\n                print(\'\\n\\n******** SKIPPING %s\' % testfile[\'name\'])\r\n                continue\r\n            print(\'\\n\\n******** READING %s\' % testfile[\'name\'])\r\n            for guess in (True, False):\r\n                test_opts = testfile[\'opts\'].copy()\r\n                if \'guess\' not in test_opts:\r\n                    test_opts[\'guess\'] = guess\r\n                if \'Reader\' in test_opts:\r\n                    format = \'ascii.{0}\'.format(test_opts[\'Reader\']._format_name)\r\n                    del test_opts[\'Reader\']\r\n                else:\r\n                    format = \'ascii\'\r\n                if \'fast_{0}\'.format(format) in core.FAST_CLASSES:\r\n                    test_opts[\'fast_reader\'] = fast_reader\r\n>               table = Table.read(testfile[\'name\'], format=format, **test_opts)\r\n\r\ntest_read.py:143: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\r\n\r\ncls = <class \'astropy.table.table.Table\'>, args = (\'t/short.rdb\',)\r\nkwargs = {\'format\': \'ascii.rdb\', \'guess\': True}\r\n\r\n    @classmethod\r\n    def read(cls, *args, **kwargs):\r\n        """"""\r\n            Read and parse a data table and return as a Table.\r\n    \r\n            This function provides the Table interface to the astropy unified I/O\r\n            layer.  This allows easily reading a file in many supported data formats\r\n            using syntax such as::\r\n    \r\n              >>> from astropy.table import Table\r\n              >>> dat = Table.read(\'table.dat\', format=\'ascii\')\r\n              >>> events = Table.read(\'events.fits\', format=\'fits\')\r\n    \r\n            The arguments and keywords (other than ``format``) provided to this function are\r\n            passed through to the underlying data reader (e.g. `~astropy.io.ascii.read`).\r\n            """"""\r\n>       return io_registry.read(cls, *args, **kwargs)\r\n\r\n./astropy/table/table.py:1712: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\r\n\r\ncls = <class \'astropy.table.table.Table\'>, args = (\'t/short.rdb\',), kwargs = {\'guess\': True}\r\nformat = \'ascii.rdb\', ctx = None\r\nreader = functools.partial(<function io_read at 0x103b29c20>, \'ascii.rdb\')\r\n\r\n>   ???\r\n\r\n./astropy/io/registry.py:330: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\r\n\r\nformat = \'rdb\', filename = \'t/short.rdb\', kwargs = {\'guess\': True}, read = <function read at 0x103ae5cb0>\r\n\r\n    def io_read(format, filename, **kwargs):\r\n        from .ui import read\r\n        format = re.sub(r\'^ascii\\.\', \'\', format)\r\n>       return read(filename, format=format, **kwargs)\r\n\r\n./astropy/io/ascii/connect.py:36: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\r\n\r\ntable = \'t/short.rdb\', guess = True, kwargs = {\'fill_values\': [(\'\', \'0\')], \'format\': \'rdb\'}\r\nnew_kwargs = {\'Outputter\': <class \'astropy.io.ascii.core.TableOutputter\'>, \'Reader\': <class \'astropy.io.ascii.basic.Rdb\'>, \'fill_values\': [(\'\', \'0\')]}\r\nfast_reader_param = True, format = \'rdb\', Reader = <class \'astropy.io.ascii.basic.Rdb\'>\r\n\r\n    def read(table, guess=None, **kwargs):\r\n        """"""Read the input ``table`` and return the table.  Most of\r\n        the default behavior for various parameters is determined by the Reader\r\n        class.\r\n    \r\n        :param table: input table (file name, file-like object, list of strings, or single newline-separated string)\r\n        :param guess: try to guess the table format (default=True)\r\n        :param format: input table format\r\n        :param Inputter: Inputter class\r\n        :param Outputter: Outputter class (default=TableOutputter)\r\n        :param delimiter: column delimiter string\r\n        :param comment: regular expression defining a comment line in table\r\n        :param quotechar: one-character string to quote fields containing special characters\r\n        :param header_start: line index for the header line not counting comment lines\r\n        :param data_start: line index for the start of data not counting comment lines\r\n        :param data_end: line index for the end of data (can be negative to count from end)\r\n        :param converters: dict of converters\r\n        :param data_Splitter: Splitter class to split data columns\r\n        :param header_Splitter: Splitter class to split header columns\r\n        :param names: list of names corresponding to each data column\r\n        :param include_names: list of names to include in output (default=None selects all names)\r\n        :param exclude_names: list of names to exlude from output (applied after ``include_names``)\r\n        :param fill_values: specification of fill values for bad or missing table values (default=(\'\', \'0\'))\r\n        :param fill_include_names: list of names to include in fill_values (default=None selects all names)\r\n        :param fill_exclude_names: list of names to exlude from fill_values (applied after ``fill_include_names``)\r\n        :param fast_reader: whether to use the C engine, can also be a dict with options which default to False (default=True)\r\n        :param Reader: Reader class (DEPRECATED) (default=``ascii.Basic``)\r\n        """"""\r\n    \r\n        if \'fill_values\' not in kwargs:\r\n            kwargs[\'fill_values\'] = [(\'\', \'0\')]\r\n    \r\n        # If an Outputter is supplied in kwargs that will take precedence.\r\n        new_kwargs = {}\r\n        new_kwargs[\'Outputter\'] = core.TableOutputter\r\n        fast_reader_param = kwargs.get(\'fast_reader\', True)\r\n        if \'Outputter\' in kwargs: # user specified Outputter, not supported for fast reading\r\n            fast_reader_param = False\r\n        format = kwargs.get(\'format\')\r\n        new_kwargs.update(kwargs)\r\n    \r\n        # Get the Reader class based on possible format and Reader kwarg inputs.\r\n        Reader = _get_format_class(format, kwargs.get(\'Reader\'), \'Reader\')\r\n        if Reader is not None:\r\n            new_kwargs[\'Reader\'] = Reader\r\n            format = Reader._format_name\r\n    \r\n        # Remove format keyword if there, this is only allowed in read() not get_reader()\r\n        if \'format\' in new_kwargs:\r\n            del new_kwargs[\'format\']\r\n    \r\n        if guess is None:\r\n            guess = _GUESS\r\n        if guess:\r\n>           dat = _guess(table, new_kwargs, format, fast_reader_param)\r\n\r\n./astropy/io/ascii/ui.py:141: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\r\n\r\ntable = \'t/short.rdb\'\r\nread_kwargs = {\'Outputter\': <class \'astropy.io.ascii.core.TableOutputter\'>, \'Reader\': <class \'astropy.io.ascii.basic.Rdb\'>, \'fill_values\': [(\'\', \'0\')]}\r\nformat = \'rdb\', fast_reader = True\r\n\r\n    def _guess(table, read_kwargs, format, fast_reader):\r\n        """"""Try to read the table using various sets of keyword args. First try the\r\n        original args supplied in the read() call. Then try the standard guess\r\n        keyword args. For each key/val pair specified explicitly in the read()\r\n        call make sure that if there is a corresponding definition in the guess\r\n        then it must have the same val.  If not then skip this guess.""""""\r\n    \r\n        # Keep a trace of all failed guesses kwarg\r\n        failed_kwargs = []\r\n        fast_kwargs = []\r\n    \r\n        first_kwargs = [read_kwargs.copy()]\r\n        if fast_reader and format is not None and \'fast_{0}\'.format(format) in \\\r\n                                                             core.FAST_CLASSES:\r\n            # If a fast version of the reader is available, try that before the slow version\r\n            fast_kwargs = read_kwargs.copy()\r\n            fast_kwargs[\'Reader\'] = core.FAST_CLASSES[\'fast_{0}\'.format(format)]\r\n            first_kwargs = [fast_kwargs] + first_kwargs\r\n    \r\n        # First try guessing\r\n        for guess_kwargs in first_kwargs + _get_guess_kwargs_list():\r\n            guess_kwargs_ok = True  # guess_kwargs are consistent with user_kwargs?\r\n            for key, val in read_kwargs.items():\r\n                # Do guess_kwargs.update(read_kwargs) except that if guess_args has\r\n                # a conflicting key/val pair then skip this guess entirely.\r\n                if key not in guess_kwargs:\r\n                    guess_kwargs[key] = val\r\n                elif val != guess_kwargs[key] and guess_kwargs != fast_kwargs:\r\n                    guess_kwargs_ok = False\r\n                    break\r\n    \r\n            if not guess_kwargs_ok:\r\n                # User-supplied kwarg is inconsistent with the guess-supplied kwarg, e.g.\r\n                # user supplies delimiter=""|"" but the guess wants to try delimiter="" "",\r\n                # so skip the guess entirely.\r\n                continue\r\n    \r\n            try:\r\n                # If guessing will try all Readers then use strict req\'ts on column names\r\n                if \'Reader\' not in read_kwargs:\r\n                    guess_kwargs[\'strict_names\'] = True\r\n    \r\n                reader = get_reader(**guess_kwargs)\r\n>               dat = reader.read(table)\r\n\r\n./astropy/io/ascii/ui.py:206: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\r\n\r\nself = <astropy.io.ascii.fastbasic.FastRdb object at 0x104105490>, table = \'t/short.rdb\'\r\n\r\n    def read(self, table):\r\n        """"""\r\n            Read input data (file-like object, filename, list of strings, or\r\n            single string) into a Table and return the result.\r\n            """"""\r\n        if self.comment is not None and len(self.comment) != 1:\r\n            raise core.ParameterError(""The C reader does not support a comment regex"")\r\n        elif self.data_start is None:\r\n            raise core.ParameterError(""The C reader does not allow data_start to be None"")\r\n        elif self.header_start is not None and self.header_start < 0 and \\\r\n             not isinstance(self, FastCommentedHeader):\r\n            raise core.ParameterError(""The C reader does not allow header_start to be ""\r\n                                      ""negative except for commented-header files"")\r\n        elif self.data_start < 0:\r\n            raise core.ParameterError(""The C reader does not allow data_start to be negative"")\r\n        elif len(self.delimiter) != 1:\r\n            raise core.ParameterError(""The C reader only supports 1-char delimiters"")\r\n        elif len(self.quotechar) != 1:\r\n            raise core.ParameterError(""The C reader only supports a length-1 quote character"")\r\n        elif \'converters\' in self.kwargs:\r\n            raise core.ParameterError(""The C reader does not support passing ""\r\n                                      ""specialized converters"")\r\n        elif \'Outputter\' in self.kwargs:\r\n            raise core.ParameterError(""The C reader does not use the Outputter parameter"")\r\n        elif \'Inputter\' in self.kwargs:\r\n            raise core.ParameterError(""The C reader does not use the Inputter parameter"")\r\n        elif \'data_Splitter\' in self.kwargs or \'header_Splitter\' in self.kwargs:\r\n            raise core.ParameterError(""The C reader does not use a Splitter class"")\r\n    \r\n        self.engine = cparser.CParser(table, self.strip_whitespace_lines,\r\n                                      self.strip_whitespace_fields,\r\n                                      delimiter=self.delimiter,\r\n                                      header_start=self.header_start,\r\n                                      comment=self.comment,\r\n                                      quotechar=self.quotechar,\r\n                                      data_start=self.data_start,\r\n                                      fill_extra_cols=self.fill_extra_cols,\r\n>                                     **self.kwargs)\r\n\r\n./astropy/io/ascii/fastbasic.py:86: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\r\n\r\n>   ???\r\n\r\nastropy/io/ascii/cparser.pyx:223: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\r\n\r\n>   ???\r\n\r\nastropy/io/ascii/cparser.pyx:265: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\r\n\r\n>   ???\r\nE   OSError: [Errno 24] Too many open files\r\n\r\nastropy/io/ascii/cparser.pyx:124: OSError\r\n-------------------------------------------- Captured stdout --------------------------------------------\r\n```\r\n'"
3004,44500529,embray,embray,2014-09-30 21:13:28,2014-10-01 14:48:11,2014-10-01 14:48:08,closed,,v0.4.3,3,Affects-release;Bug;Priority-Low;utils,https://api.github.com/repos/astropy/astropy/issues/3004,b'Fix deprecated decorator on classes that use super(...).__init__',"b""In short, `__init__` here needs the same treatment as `__getstate__` and `__setstate__`.\r\n\r\nActually, *any* method on the class that uses `super()` internally is going to be affected by this issue, so unfortunately the only real way forward with this kind of implementation (which subclass's the original class, but with the same name) is going to suffer from this issue.\r\n\r\nI can think of some possible workarounds but they could take some work to get just right, so I don't think it's important for now.  But use of `super()` in `__init__` is certainly common enough that it should be fixed for now."""
2995,44361475,astrofrog,astrofrog,2014-09-29 21:49:04,2014-12-31 18:03:13,2014-10-01 20:30:20,closed,taldcroft,v1.0.0,3,Affects-release;Bug;table,https://api.github.com/repos/astropy/astropy/issues/2995,b'hstack fails with duplicate column names',"b""Haven't had a chance to look in detail yet, but the following example should not fail:\r\n\r\n```\r\nIn [14]: t = Table()\r\n\r\nIn [15]: t['a'] = [1,2,3]\r\n\r\nIn [16]: hstack([t,t], table_names=['1', '2'])\r\n...\r\nTableMergeError: Merging column names resulted in duplicates: ['a'].  Change uniq_col_name or table_names args to fix this.\r\n```\r\n\r\nbecause in principle, the columns should get renamed (according to the docstring).\r\n\r\ncc @taldcroft """
2987,44073444,eteq,mdboom,2014-09-26 15:26:38,2015-03-03 16:19:57,2014-09-26 17:34:13,closed,mdboom,v0.4.3,5,Affects-dev;Bug;testing,https://api.github.com/repos/astropy/astropy/issues/2987,"b""Tests with TEST_UNICODE_LITERALS don't report errors correctly""","b""I noticed this while working on #2981 but have seen it a couple other times.\r\n\r\nFor a test that uses the ``#TEST_UNICODE_LITERALS`` plugin to test with and without unicode literals, the py.test reporting doesn't work.  If ``#TEST_UNICODE_LITERALS`` is in, all errors yield this:\r\n```\r\nE       AssertionError: (assertion failed, but when it was re-run for printing intermediate values, it did not fail.  Suggestions: compute assert expression before the assert or use --assert=plain)\r\n```\r\nThis is particularly annoying in situations like #2981 where it's not easy for me to get one of the travis environments going locally.\r\n\r\n@mdboom, I think you wrote ``TEST_UNICODE_LITERALS``, right?  Any idea what's going on here?"""
2984,44054604,astrofrog,taldcroft,2014-09-26 12:19:31,2015-01-13 17:35:09,2014-09-29 13:24:19,closed,,v0.4.3,3,Affects-release;Bug;table,https://api.github.com/repos/astropy/astropy/issues/2984,b'Table join does not work with multidimensional columns',"b'Discovered as part of https://github.com/astropy/astropy-benchmarks/pull/10\r\n\r\n```\r\nimport numpy as np\r\nfrom astropy.table import Table, join\r\n\r\nt1 = Table()\r\nt1[\'a\'] = [1,2,3]\r\nt1[\'b\'] = np.zeros((3,4))\r\n\r\nt2 = Table()\r\nt2[\'a\'] = [1,2,3]\r\nt2[\'c\'] = [4,5,6]\r\n\r\njoin(t1, t2)\r\n```\r\n\r\ngives\r\n\r\n```\r\nTraceback (most recent call last):\r\n  File ""bug_table.py"", line 12, in <module>\r\n    join(t1, t2)\r\n  File ""/Users/tom/Library/Python/3.4/lib/python/site-packages/astropy-1.0.dev9932-py3.4-macosx-10.8-x86_64.egg/astropy/table/operations.py"", line 149, in join\r\n    uniq_col_name, table_names, col_name_map)\r\n  File ""/Users/tom/Library/Python/3.4/lib/python/site-packages/astropy-1.0.dev9932-py3.4-macosx-10.8-x86_64.egg/astropy/table/np_utils.py"", line 280, in join\r\n    out[out_name] = array[name].take(array_out)\r\nValueError: could not broadcast input array from shape (3) into shape (3,4)\r\n```\r\n\r\ncc @taldcroft '"
2983,44050208,rbuehler,astrofrog,2014-09-26 11:35:34,2014-10-02 13:47:11,2014-10-02 06:06:38,closed,,v0.4.3,5,Affects-release;Bug;coordinates;Effort-low;Package-intermediate,https://api.github.com/repos/astropy/astropy/issues/2983,b'SkyCoord array does not work with float32',"b'If I have a numpy.float32 array I cannot initiate a SkyCoords array, but get an error. I have to manually cast it to numpy.float64 first (when loading arrays from fits you often get float32 arrays).\r\nExample:\r\n\r\n```\r\nfrom astropy import units\r\nfrom astropy.coordinates import SkyCoord\r\nimport numpy as np\r\n\r\ncoords = SkyCoord(ra=np.float32([1,2])*units.degree, dec=np.float32([3,4])*units.degree, frame=\'icrs\')\r\nprint coords\r\n```\r\n\r\nresults in: ""ValueError: new type not compatible with array.""\r\n'"
2980,43933753,cdeil,eteq,2014-09-25 15:41:41,2015-02-18 22:22:30,2014-09-30 20:24:21,closed,,v1.0.0,3,Affects-release;Bug;coordinates,https://api.github.com/repos/astropy/astropy/issues/2980,b'Angle array to_string should return strings',"b""Currently [Angle.to_string](http://astropy.readthedocs.org/en/latest/api/astropy.coordinates.Angle.html#astropy.coordinates.Angle.to_string) for angle arrays returns a numpy object array.\r\n\r\nWouldn't it be better to return a numpy string array?\r\n```python\r\nIn [19]: from astropy.coordinates import Angle\r\n\r\nIn [20]: Angle(['10 deg', '20 deg'])\r\nOut[20]: <Angle [ 10., 20.] deg>\r\n\r\nIn [21]: Angle(['10 deg', '20 deg']).to_string()\r\nOut[21]: array(['10d00m00s', '20d00m00s'], dtype=object)\r\n\r\nIn [22]: Angle(['10 deg', '20 deg']).to_string().astype(str)\r\nOut[22]: \r\narray(['10d00m00s', '20d00m00s'], \r\n      dtype='<U9')\r\n```\r\n\r\nIt seems angle arrays are not covered by the [Returns section of Angle.to_string](http://astropy.readthedocs.org/en/latest/api/astropy.coordinates.Angle.html#astropy.coordinates.Angle.to_string) or the [Angle representation](http://astropy.readthedocs.org/en/latest/coordinates/angles.html#representation) section of the manual.\r\n\r\ncc @eteq"""
2976,43803293,olebole,olebole,2014-09-24 19:13:19,2016-02-05 15:13:52,2016-02-05 15:13:52,closed,,,16,Bug;build;wcs,https://api.github.com/repos/astropy/astropy/issues/2976,"b'[0,4,2] does not compile with wcslib-4.24'","b'There is an [incompatible API change in wcslib 4.24](http://upstream-tracker.org/compat_reports/wcslib/4.23_to_4.24/abi_compat_report.html#High_Risk_Problems) that causes complilation failure and runtime problems (if compiled with 4.23, but started with 4.24). Unfortunately, wcslib did not increase the SONAME in 4.24 (probably since the change was on functions introduced only in 4.23), but it would be good to upgrade the interface and the internal wcslib to 4.24 ASAP.'"
2968,43525624,larrybradley,embray,2014-09-22 17:58:41,2015-01-13 17:35:09,2014-09-22 20:51:42,closed,mhvk,v0.4.2,10,Affects-release;Bug;units,https://api.github.com/repos/astropy/astropy/issues/2968,b'Quantity addition with zero',"b'Adding a `Quantity` with 0 (or an array of zeros) removes the unit:\r\n```\r\n>>> (5. * u.electron) + 0.\r\n5\r\n```\r\n\r\nThe result is still a `Quantity`, but the `unit` is `None`.  Is this a bug or a feature?'"
2965,43320734,mdboom,astrofrog,2014-09-20 21:57:27,2015-03-03 16:20:12,2014-10-30 18:49:31,closed,mdboom,v0.4.3,5,Affects-release;Bug;wcs,https://api.github.com/repos/astropy/astropy/issues/2965,b'Correctly detect and handle invalid input world coordinates.',"b'As reported by Maik Reichert on the Astropy mailing list thread  ""Bug in wcs_world2pix?""'"
2964,43280799,astrofrog,astrofrog,2014-09-19 20:44:22,2014-11-03 19:28:21,2014-11-03 18:25:17,closed,,v1.0.0,14,Affects-dev;Bug;io.ascii,https://api.github.com/repos/astropy/astropy/issues/2964,b'Sporadic test failure with fast io.ascii reader',"b'I\'m seeing this test failure from time to time on the Mac Jenkins instance - it\'s not systematic, so maybe there is a race condition, or something to do with random numbers (haven\'t checked in detail):\r\n\r\n```\r\ndef test_fill_include_exclude_names():\r\n        """"""\r\n        fill_include_names and fill_exclude_names should filter missing/empty value handling\r\n        in the same way that include_names and exclude_names filter output columns.\r\n        """"""\r\n        text = """"""\r\n    A, B, C\r\n    , 1, 2\r\n    3, , 4\r\n    5, 5,\r\n    """"""\r\n        table = read_csv(text, fill_include_names=[\'A\', \'B\'])\r\n        assert table[\'A\'][0] is ma.masked\r\n        assert table[\'B\'][1] is ma.masked\r\n        assert table[\'C\'][2] is not ma.masked # C not in fill_include_names\r\n    \r\n>       table = read_csv(text, fill_exclude_names=[\'A\', \'B\'])\r\n\r\nastropy/io/ascii/tests/test_c_reader.py:435: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\n\r\ntable = \'\\nA, B, C\\n, 1, 2\\n3, , 4\\n5, 5,\\n\'\r\nkwargs = {\'fill_exclude_names\': [\'A\', \'B\']}\r\n\r\n    def read_csv(table, **kwargs):\r\n>       return _read(table, FastCsv, \'csv\', **kwargs)\r\n\r\nastropy/io/ascii/tests/test_c_reader.py:81: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\n\r\ntable = \'\\nA, B, C\\n, 1, 2\\n3, , 4\\n5, 5,\\n\\n\'\r\nReader = <class \'astropy.io.ascii.fastbasic.FastCsv\'>, format = \'csv\'\r\nfail_parallel = False, kwargs = {\'fill_exclude_names\': [\'A\', \'B\']}\r\nreader = <astropy.io.ascii.fastbasic.FastCsv object at 0x10f9cbd90>\r\nt1 = <Table rows=3 names=(\'A\',\'B\',\'C\')>\r\nmasked_array(data = [(\'\', \'1\', 2) (\'3\', \'\',...\', \'N\', 999999),\r\n            dtype = [(\'A\', \'S1\'), (\'B\', \'S1\'), (\'C\', \'<i8\')])\r\n\r\nt2 = <Table rows=3 names=(\'A\',\'B\',\'C\')>\r\nmasked_array(data = [(\'\', \'1\', 2) (\'3\', \'\',...\', \'N\', 999999),\r\n            dtype = [(\'A\', \'S1\'), (\'B\', \'S1\'), (\'C\', \'<i8\')])\r\n\r\nt3 = <Table rows=3 names=(\'A\',\'B\',\'C\')>\r\nmasked_array(data = [(\'\', \'1\', 2) (\'3\', \'\',...\', \'N\', 999999),\r\n            dtype = [(\'A\', \'S1\'), (\'B\', \'S1\'), (\'C\', \'<i8\')])\r\n\r\nt4 = <Table rows=3 names=(\'A\',\'B\',\'C\')>\r\nmasked_array(data = [(8070450532247928832, ..., \'N\', 999999),\r\n            dtype = [(\'A\', \'<i8\'), (\'B\', \'S1\'), (\'C\', \'<i8\')])\r\n\r\nt5 = <Table rows=3 names=(\'A\',\'B\',\'C\')>\r\nmasked_array(data = [(\'\', \'1\', 2) (\'3\', \'\',...\', \'N\', 999999),\r\n            dtype = [(\'A\', \'S1\'), (\'B\', \'S1\'), (\'C\', \'<i8\')])\r\n\r\n\r\n    def _read(table, Reader, format, fail_parallel=False, **kwargs):\r\n        # make sure we have a newline so table can\'t be misinterpreted as a filename\r\n        table += \'\\n\'\r\n        reader = Reader(**kwargs)\r\n        t1 = reader.read(table)\r\n        t2 = reader.read(StringIO(table))\r\n        t3 = reader.read(table.splitlines())\r\n        t4 = ascii.read(table, format=format, guess=False, **kwargs)\r\n        t5 = ascii.read(table, format=format, guess=False, fast_reader=False, **kwargs)\r\n        assert_table_equal(t1, t2)\r\n        assert_table_equal(t2, t3)\r\n>       assert_table_equal(t3, t4)\r\n\r\nastropy/io/ascii/tests/test_c_reader.py:55: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\n\r\nt1 = <Table rows=3 names=(\'A\',\'B\',\'C\')>\r\nmasked_array(data = [(\'\', \'1\', 2) (\'3\', \'\',...\', \'N\', 999999),\r\n            dtype = [(\'A\', \'S1\'), (\'B\', \'S1\'), (\'C\', \'<i8\')])\r\n\r\nt2 = <Table rows=3 names=(\'A\',\'B\',\'C\')>\r\nmasked_array(data = [(8070450532247928832, ..., \'N\', 999999),\r\n            dtype = [(\'A\', \'<i8\'), (\'B\', \'S1\'), (\'C\', \'<i8\')])\r\n\r\n\r\n    def assert_table_equal(t1, t2):\r\n        assert_equal(len(t1), len(t2))\r\n        assert_equal(t1.colnames, t2.colnames)\r\n        for name in t1.colnames:\r\n            if len(t1) != 0:\r\n>               assert_equal(t1[name].dtype.kind, t2[name].dtype.kind)\r\n\r\nastropy/io/ascii/tests/test_c_reader.py:31: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\n\r\na = \'S\', b = \'i\'\r\n\r\n    def assert_equal(a, b):\r\n>       assert a == b\r\nE       assert \'S\' == \'i\'\r\nE         - S\r\nE         + i\r\n\r\nastropy/io/ascii/tests/common.py:41: AssertionError\r\n```\r\n\r\ncc @amras1 @taldcroft '"
2960,43236061,astrofrog,mhvk,2014-09-19 13:06:46,2015-03-31 14:33:01,2015-03-31 13:47:55,closed,mdboom,,26,Bug;io.fits;Upstream Fix Required,https://api.github.com/repos/astropy/astropy/issues/2960,"b'""underlying buffer is not C-contiguous failure"" error with Python 3 and numpy-dev'","b'Now that the Jenkins instance is back, there is one failure with numpy-dev:\r\n\r\n```\r\ndef test_dist():\r\n        with get_pkg_data_fileobj(\r\n                os.path.join(""data"", ""dist.fits""), encoding=\'binary\') as test_file:\r\n            hdulist = fits.open(test_file)\r\n            wcs1 = wcs.WCS(hdulist[0].header, hdulist)\r\n            assert wcs1.det2im2 is not None\r\n>           s = cPickle.dumps(wcs1)\r\n\r\nastropy/wcs/tests/test_pickle.py:29: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\n\r\nself = <astropy.wcs.wcs.WCS object at 0x114464ad0>\r\n\r\n    def __reduce__(self):\r\n        """"""\r\n            Support pickling of WCS objects.  This is done by serializing\r\n            to an in-memory FITS file and dumping that as a string.\r\n            """"""\r\n    \r\n        hdulist = self.to_fits(relax=True)\r\n    \r\n        buffer = io.BytesIO()\r\n>       hdulist.writeto(buffer)\r\n\r\nastropy/wcs/wcs.py:2583: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\n\r\nself = [<astropy.io.fits.hdu.image.PrimaryHDU object at 0x114848890>, <astropy.io.fits.hdu.image.ImageHDU object at 0x114848f10>]\r\nfileobj = <astropy.io.fits.py3compat._File <_io.BytesIO object at 0x111349738>>\r\noutput_verify = \'exception\', clobber = False, checksum = False\r\n\r\n    def writeto(self, fileobj, output_verify=\'exception\', clobber=False,\r\n                checksum=False):\r\n        """"""\r\n            Write the `HDUList` to a new file.\r\n    \r\n            Parameters\r\n            ----------\r\n            fileobj : file path, file object or file-like object\r\n                File to write to.  If a file object, must be opened in a\r\n                writeable mode.\r\n    \r\n            output_verify : str\r\n                Output verification option.  Must be one of ``""fix""``,\r\n                ``""silentfix""``, ``""ignore""``, ``""warn""``, or\r\n                ``""exception""``.  May also be any combination of ``""fix""`` or\r\n                ``""silentfix""`` with ``""+ignore""``, ``+warn``, or ``+exception""\r\n                (e.g. ``""fix+warn""``).  See :ref:`verify` for more info.\r\n    \r\n            clobber : bool\r\n                When `True`, overwrite the output file if exists.\r\n    \r\n            checksum : bool\r\n                When `True` adds both ``DATASUM`` and ``CHECKSUM`` cards\r\n                to the headers of all HDU\'s written to the file.\r\n            """"""\r\n    \r\n        if (len(self) == 0):\r\n            warnings.warn(""There is nothing to write."", AstropyUserWarning)\r\n            return\r\n    \r\n        self.verify(option=output_verify)\r\n    \r\n        # make sure the EXTEND keyword is there if there is extension\r\n        self.update_extend()\r\n    \r\n        # make note of whether the input file object is already open, in which\r\n        # case we should not close it after writing (that should be the job\r\n        # of the caller)\r\n        closed = isinstance(fileobj, string_types) or fileobj_closed(fileobj)\r\n    \r\n        # writeto is only for writing a new file from scratch, so the most\r\n        # sensible mode to require is \'ostream\'.  This can accept an open\r\n        # file object that\'s open to write only, or in append/update modes\r\n        # but only if the file doesn\'t exist.\r\n        fileobj = _File(fileobj, mode=\'ostream\', clobber=clobber)\r\n        hdulist = self.fromfile(fileobj)\r\n    \r\n        for hdu in self:\r\n            hdu._prewriteto(checksum=checksum)\r\n            try:\r\n>               hdu._writeto(hdulist.__file)\r\n\r\nastropy/io/fits/hdu/hdulist.py:662: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\n\r\nself = <astropy.io.fits.hdu.image.ImageHDU object at 0x114848f10>\r\nfileobj = <astropy.io.fits.py3compat._File <_io.BytesIO object at 0x111349738>>\r\ninplace = False, copy = False\r\n\r\n    def _writeto(self, fileobj, inplace=False, copy=False):\r\n        # For now fileobj is assumed to be a _File object\r\n        if not inplace or self._new:\r\n            header_offset, _ = self._writeheader(fileobj)\r\n>           data_offset, data_size = self._writedata(fileobj)\r\n\r\nastropy/io/fits/hdu/base.py:699: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\n\r\nself = <astropy.io.fits.hdu.image.ImageHDU object at 0x114848f10>\r\nfileobj = <astropy.io.fits.py3compat._File <_io.BytesIO object at 0x111349738>>\r\n\r\n    def _writedata(self, fileobj):\r\n        # TODO: A lot of the simulateonly stuff should be moved back into the\r\n        # _File class--basically it should turn write and flush into a noop\r\n        offset = 0\r\n        size = 0\r\n    \r\n        if not fileobj.simulateonly:\r\n            fileobj.flush()\r\n            try:\r\n                offset = fileobj.tell()\r\n            except IOError:\r\n                offset = 0\r\n    \r\n        if self._data_loaded or self._data_needs_rescale:\r\n            if self.data is not None:\r\n>               size += self._writedata_internal(fileobj)\r\n\r\nastropy/io/fits/hdu/base.py:636: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\n\r\nself = <astropy.io.fits.hdu.image.ImageHDU object at 0x114848f10>\r\nfileobj = <astropy.io.fits.py3compat._File <_io.BytesIO object at 0x111349738>>\r\n\r\n    def _writedata_internal(self, fileobj):\r\n        size = 0\r\n    \r\n        if self.data is not None:\r\n            # Based on the system type, determine the byteorders that\r\n            # would need to be swapped to get to big-endian output\r\n            if sys.byteorder == \'little\':\r\n                swap_types = (\'<\', \'=\')\r\n            else:\r\n                swap_types = (\'<\',)\r\n            # deal with unsigned integer 16, 32 and 64 data\r\n            if _is_pseudo_unsigned(self.data.dtype):\r\n                # Convert the unsigned array to signed\r\n                output = np.array(\r\n                    self.data - _unsigned_zero(self.data.dtype),\r\n                    dtype=\'>i%d\' % self.data.dtype.itemsize)\r\n                should_swap = False\r\n            else:\r\n                output = self.data\r\n                byteorder = output.dtype.str[0]\r\n                should_swap = (byteorder in swap_types)\r\n    \r\n            if not fileobj.simulateonly:\r\n                if should_swap:\r\n                    output.byteswap(True)\r\n                    try:\r\n>                       fileobj.writearray(output)\r\n\r\nastropy/io/fits/hdu/image.py:523: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\n\r\nself = <astropy.io.fits.py3compat._File <_io.BytesIO object at 0x111349738>>\r\narray = array([[ -1.27305422e-04,  -2.63464113e-04,  -5.10875077e-04, ...,\r\n          2.40933063e-04,   1.06801039e-04,  -3.66208042e-08]], dtype=float32)\r\n\r\n    def writearray(self, array):\r\n        """"""\r\n            Similar to file.write(), but writes a numpy array instead of a string.\r\n    \r\n            Also like file.write(), a flush() or close() may be needed before\r\n            the file on disk reflects the data written.\r\n            """"""\r\n    \r\n        if hasattr(self.__file, \'write\'):\r\n>           _array_to_file(array, self.__file)\r\n\r\nastropy/io/fits/file.py:274: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\n\r\narr = array([[ -1.27305422e-04,  -2.63464113e-04,  -5.10875077e-04, ...,\r\n          2.40933063e-04,   1.06801039e-04,  -3.66208042e-08]], dtype=float32)\r\noutfile = <_io.BytesIO object at 0x111349738>\r\n\r\n    def _array_to_file(arr, outfile):\r\n        """"""\r\n        Write a numpy array to a file or a file-like object.\r\n    \r\n        Parameters\r\n        ----------\r\n        arr : `~numpy.ndarray`\r\n            The Numpy array to write.\r\n        outfile : file-like\r\n            A file-like object such as a Python file object, an `io.BytesIO`, or\r\n            anything else with a ``write`` method.  The file object must support\r\n            the buffer interface in its ``write``.\r\n    \r\n        If writing directly to an on-disk file this delegates directly to\r\n        `ndarray.tofile`.  Otherwise a slower Python implementation is used.\r\n        """"""\r\n    \r\n    \r\n        if isfile(outfile):\r\n            write = lambda a, f: a.tofile(f)\r\n        else:\r\n            write = _array_to_file_like\r\n    \r\n        # Implements a workaround for a bug deep in OSX\'s stdlib file writing\r\n        # functions; on 64-bit OSX it is not possible to correctly write a number\r\n        # of bytes greater than 2 ** 32 and divisble by 4096 (or possibly 8192--\r\n        # whatever the default blocksize for the filesystem is).\r\n        # This issue should have a workaround in Numpy too, but hasn\'t been\r\n        # implemented there yet: https://github.com/astropy/astropy/issues/839\r\n        #\r\n        # Apparently Windows has its own fwrite bug:\r\n        # https://github.com/numpy/numpy/issues/2256\r\n    \r\n        if (sys.platform == \'darwin\' and arr.nbytes >= _OSX_WRITE_LIMIT + 1 and\r\n                arr.nbytes % 4096 == 0):\r\n            # chunksize is a count of elements in the array, not bytes\r\n            chunksize = _OSX_WRITE_LIMIT // arr.itemsize\r\n        elif sys.platform.startswith(\'win\'):\r\n            chunksize = _WIN_WRITE_LIMIT // arr.itemsize\r\n        else:\r\n            # Just pass the whole array to the write routine\r\n>           return write(arr, outfile)\r\n\r\nastropy/io/fits/util.py:646: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\n\r\narr = array([[ -1.27305422e-04,  -2.63464113e-04,  -5.10875077e-04, ...,\r\n          2.40933063e-04,   1.06801039e-04,  -3.66208042e-08]], dtype=float32)\r\nfileobj = <_io.BytesIO object at 0x111349738>\r\n\r\n    def _array_to_file_like(arr, fileobj):\r\n        """"""\r\n        Write a `~numpy.ndarray` to a file-like object (which is not supported by\r\n        `numpy.ndarray.tofile`).\r\n        """"""\r\n    \r\n        if arr.flags.contiguous:\r\n            # It sufficies to just pass the underlying buffer directly to the\r\n            # fileobj\'s write (assuming it supports the buffer interface, which\r\n            # unforunately there\'s no simple way to check)\r\n>           fileobj.write(arr.data)\r\nE           BufferError: memoryview: underlying buffer is not C-contiguous\r\n\r\nastropy/io/fits/util.py:667: BufferError\r\n```\r\n\r\nThis only occurs on Python 3.x\r\n\r\ncc @embray\r\n'"
2952,42943466,embray,embray,2014-09-16 22:51:15,2014-12-22 17:43:41,2014-12-22 17:43:41,closed,,,25,Affects-dev;Bug;Effort-medium;io.ascii;Package-expert;Windows,https://api.github.com/repos/astropy/astropy/issues/2952,b'New C reader crashes in Windows',"b""Unfortunately, when I run `test_c_reader.py` on Windows the Python interpreter crashes with no specified error.\r\n\r\nI'll update this more once I have more details, but I just wanted to make sure to note it before I forget (this is important though as it basically makes Windows testing impossible until it's resolved (or those tests are skipped))."""
2946,42818041,mhvk,mhvk,2014-09-15 20:56:17,2015-01-14 17:47:35,2015-01-14 01:07:17,closed,,v0.4.3,8,Affects-release;Bug;units;Upstream Fix Required,https://api.github.com/repos/astropy/astropy/issues/2946,b'ndarray *= quantity ignores unit',"b'In implementing `__numpy_ufunc__` I encountered a bug in `NDData` (#2944) that was not discovered before becase the unit of a quantity is silently dropped it it is used in an in-place multiplication of an array:\r\n```\r\nimport astropy.units as u, numpy as np\r\na = np.arange(10.)\r\na *= 1.*u.kg\r\na\r\n# array([ 0.,  1.,  2.,  3.,  4.,  5.,  6.,  7.,  8.,  9.])\r\n```\r\n\r\nI raise this issue partially as a reminder to myself that this needs fixing, but if someone else wants to have a go, please go ahead!'"
2944,42817755,mhvk,mhvk,2014-09-15 20:53:33,2014-09-19 15:23:42,2014-09-19 15:23:37,closed,,v1.0.0,5,Affects-dev;Bug;nddata,https://api.github.com/repos/astropy/astropy/issues/2944,b'Correct determination of scaling in NDUncertainty.uncertainty.setter',"b'In the setter, a scaling is determined that still carries a unit, which is subsequently used for in-place multiplication. In the current implementation of `Quantity`, this works, but it stops working with my stricter `__numpy_ufunc__` implementation (#2583). This PR solves the bug in `NDUncertainty`.'"
2942,42795060,JeffValenti,mhvk,2014-09-15 17:04:28,2014-09-17 12:59:32,2014-09-16 00:42:20,closed,,v0.4.2,7,Affects-release;Bug;time,https://api.github.com/repos/astropy/astropy/issues/2942,b'Time( ) fails for mjd values in a big-endian array on a little-endian machine',"b'Time( ) in astropy.time raises a *""ValueError: Input values did not match the format class mjd""* exception on a little-endian machine, when the user-specified value is a numpy.ndarray with a correctly indicated big-endian byte order. This situation may occur when using astropy.io.fits to read MJD values from a FITS binary table (big-endian on disk by standard).\r\n\r\nThe issue occurred in python 2.7.5 on a (little-endian) MacBook Pro, running numpy 1.8.1 and astropy 0.4.1\r\n\r\nA temporary (and not obvious until you understand the problem) workaround is to byte swap only on little-endian machines:\r\n\r\n```python\r\nmjd = hdulist[1].data[\'MJD\']\r\nif sys.byteorder == \'little\':\r\n    mjd = mjd.byteswap().newbyteorder()\r\n```\r\n\r\n---\r\n\r\nHere is a very compact demonstration of the problem, if you are running on a little-endian machine:\r\n\r\n```python\r\nimport numpy as np\r\nfrom astropy.time import Time\r\nbigend = np.array([53000.00,54000.00]).byteswap().newbyteorder(\'>\')\r\nTime(bigend, format=\'mjd\')\r\n```\r\n\r\nwhich yields:\r\n\r\n```\r\nFile ""/Users/valenti/ureka/Ureka/variants/common/lib/python2.7/site-packages/astropy/time/core.py"", line 322, in _get_time_fmt raise ValueError(\'Input values did not match {0}\'.format(err_msg))\r\nValueError: Input values did not match the format class mjd\r\n```\r\n\r\n---\r\n\r\nHere is a longer demonstration that includes cases that work correctly:\r\n\r\nStart python 2.7.5 on a MacBook Pro.\r\n\r\n```\r\nunix% uname -a\r\nDarwin mobius.local 12.5.0 Darwin Kernel Version 12.5.0: Sun Sep 29 13:33:47 PDT 2013; root:xnu-2050.48.12~1/RELEASE_X86_64 x86_64\r\nunix% python\r\nPython 2.7.5 (default, Jun 19 2014, 11:13:57) \r\n[GCC 4.2.1 (Apple Inc. build 5664)] on darwin\r\n>>>\r\n```\r\n\r\nLoad packages.\r\n\r\n```python\r\nimport sys\r\nimport numpy as np\r\nfrom astropy import __version__\r\nfrom astropy.time import Time\r\n__version__\r\nnp.version.version\r\n\r\n>>> import sys\r\n>>> import numpy as np\r\n>>> from astropy import __version__\r\n>>> from astropy.time import Time\r\n>>> __version__\r\n\'0.4.1\'\r\n>>> np.version.version\r\n\'1.8.1\'\r\n>>> \r\n```\r\n\r\nPerform these tests on a little-endian machine.\r\n\r\n```python\r\nsys.byteorder\r\n\r\n>>> sys.byteorder\r\n\'little\'\r\n```\r\n\r\nDemonstrate expected behavior when array has \'native\' endianness, which is \'little\' in this case.\r\n\r\n```python\r\nnative = np.array([53000.00,54000.00])\r\ntype(native)\r\nnative.dtype.byteorder\r\nnative\r\nTime(native, format=\'mjd\')\r\n\r\n>>> native = np.array([53000.00,54000.00])\r\n>>> type(native)\r\n<type \'numpy.ndarray\'>\r\n>>> native.dtype.byteorder\r\n\'=\'\r\n>>> native\r\narray([ 53000.,  54000.])\r\n>>> Time(native, format=\'mjd\')\r\n<Time object: scale=\'utc\' format=\'mjd\' value=[ 53000.  54000.]>\r\n```\r\n\r\nDemonstrate expected behavior when array is explicitly labelled as little-endian, which is native in this case.\r\n\r\n```python\r\nlitend = native.newbyteorder(\'<\')\r\ntype(litend)\r\nlitend.dtype.byteorder\r\nlitend\r\nTime(litend, format=\'mjd\')\r\n\r\n>>> litend = native.newbyteorder(\'<\')\r\n>>> type(litend)\r\n<type \'numpy.ndarray\'>\r\n>>> litend.dtype.byteorder\r\n\'<\'\r\n>>> litend\r\narray([ 53000.,  54000.])\r\n>>> Time(litend, format=\'mjd\')\r\n<Time object: scale=\'utc\' format=\'mjd\' value=[ 53000.  54000.]>\r\n```\r\n\r\nDemonstrate **unexpected behavior** when array is big-endian (not native), even when the array is correctly labelled as such. Time( ) properly handles numpy.float64 scalars extracted from the array. Time( ) fails when processing a big-endian numpy.ndarray. MJD read from a FITS binary table is big-endian, so this case will occur practice.\r\n\r\n```python\r\nbigend = native.byteswap().newbyteorder(\'>\')\r\ntype(bigend)\r\nbigend.dtype.byteorder\r\nbigend\r\nTime(bigend[0], format=\'mjd\')\r\nTime(bigend[1], format=\'mjd\')\r\nTime(bigend, format=\'mjd\')\r\n\r\n>>> bigend = native.byteswap().newbyteorder(\'>\')\r\n>>> type(bigend)\r\n<type \'numpy.ndarray\'>\r\n>>> bigend.dtype.byteorder\r\n\'>\'\r\n>>> bigend\r\narray([ 53000.,  54000.])\r\n>>> Time(bigend[0], format=\'mjd\')\r\n<Time object: scale=\'utc\' format=\'mjd\' value=53000.0>\r\n>>> Time(bigend[1], format=\'mjd\')\r\n<Time object: scale=\'utc\' format=\'mjd\' value=54000.0>\r\n>>> Time(bigend, format=\'mjd\')\r\nTraceback (most recent call last):\r\n  File ""<stdin>"", line 1, in <module>\r\n  File ""/Users/valenti/ureka/Ureka/variants/common/lib/python2.7/site-packages/astropy/time/core.py"", line 120, in new_func\r\n    return func(*args, **kwargs)\r\n  File ""/Users/valenti/ureka/Ureka/variants/common/lib/python2.7/site-packages/astropy/time/core.py"", line 227, in __init__\r\n    self._init_from_vals(val, val2, format, scale, copy)\r\n  File ""/Users/valenti/ureka/Ureka/variants/common/lib/python2.7/site-packages/astropy/time/core.py"", line 283, in _init_from_vals\r\n    self._time = self._get_time_fmt(val, val2, format, scale)\r\n  File ""/Users/valenti/ureka/Ureka/variants/common/lib/python2.7/site-packages/astropy/time/core.py"", line 322, in _get_time_fmt\r\n    raise ValueError(\'Input values did not match {0}\'.format(err_msg))\r\nValueError: Input values did not match the format class mjd\r\n```'"
2931,42603442,astrofrog,embray,2014-09-12 07:30:59,2014-09-12 15:50:14,2014-09-12 15:48:24,closed,,,8,Bug;io.fits,https://api.github.com/repos/astropy/astropy/issues/2931,b'Issue when trying to write table to a compressed FITS file',"b'In the following example, either the writing should fail more explicitly, or it should work and actually write to a compressed FITS file. At the moment, the file being produced is corrupt:\r\n\r\n```\r\nIn [1]: from astropy.table import Table\r\n\r\nIn [2]: t = Table()\r\n\r\nIn [3]: t[\'a\'] = [1,2,3]\r\n\r\nIn [5]: t.write(\'test.fits.gz\', overwrite=True)\r\n\r\nIn [7]: t2 = Table.read(\'test.fits.gz\', format=\'fits\')\r\n---------------------------------------------------------------------------\r\nOSError                                   Traceback (most recent call last)\r\n<ipython-input-7-325b75f5ba46> in <module>()\r\n----> 1 t2 = Table.read(\'test.fits.gz\', format=\'fits\')\r\n\r\n/Volumes/Raptor/Library/Python/3.4/lib/python/site-packages/astropy-1.0.dev9669-py3.4-macosx-10.8-x86_64.egg/astropy/table/table.py in read(cls, *args, **kwargs)\r\n   1710         passed through to the underlying data reader (e.g. `~astropy.io.ascii.read`).\r\n   1711         """"""\r\n-> 1712         return io_registry.read(cls, *args, **kwargs)\r\n   1713 \r\n   1714     def write(self, *args, **kwargs):\r\n\r\n/Volumes/Raptor/Library/Python/3.4/lib/python/site-packages/astropy-1.0.dev9669-py3.4-macosx-10.8-x86_64.egg/astropy/io/registry.py in read(cls, *args, **kwargs)\r\n    328 \r\n    329         reader = get_reader(format, cls)\r\n--> 330         data = reader(*args, **kwargs)\r\n    331 \r\n    332         if not isinstance(data, cls):\r\n\r\n/Volumes/Raptor/Library/Python/3.4/lib/python/site-packages/astropy-1.0.dev9669-py3.4-macosx-10.8-x86_64.egg/astropy/io/fits/connect.py in read_table_fits(input, hdu)\r\n    136     else:\r\n    137 \r\n--> 138         hdulist = fits_open(input)\r\n    139 \r\n    140         try:\r\n\r\n/Volumes/Raptor/Library/Python/3.4/lib/python/site-packages/astropy-1.0.dev9669-py3.4-macosx-10.8-x86_64.egg/astropy/io/fits/hdu/hdulist.py in fitsopen(name, mode, memmap, save_backup, **kwargs)\r\n    117         raise ValueError(\'Empty filename: %s\' % repr(name))\r\n    118 \r\n--> 119     return HDUList.fromfile(name, mode, memmap, save_backup, **kwargs)\r\n    120 \r\n    121 \r\n\r\n/Volumes/Raptor/Library/Python/3.4/lib/python/site-packages/astropy-1.0.dev9669-py3.4-macosx-10.8-x86_64.egg/astropy/io/fits/hdu/hdulist.py in fromfile(cls, fileobj, mode, memmap, save_backup, **kwargs)\r\n    249 \r\n    250         return cls._readfrom(fileobj=fileobj, mode=mode, memmap=memmap,\r\n--> 251                              save_backup=save_backup, **kwargs)\r\n    252 \r\n    253     @classmethod\r\n\r\n/Volumes/Raptor/Library/Python/3.4/lib/python/site-packages/astropy-1.0.dev9669-py3.4-macosx-10.8-x86_64.egg/astropy/io/fits/hdu/hdulist.py in _readfrom(cls, fileobj, data, mode, memmap, save_backup, **kwargs)\r\n    835             # raise and exception\r\n    836             if mode in (\'readonly\', \'denywrite\') and len(hdulist) == 0:\r\n--> 837                 raise IOError(\'Empty or corrupt FITS file\')\r\n    838 \r\n    839             # initialize/reset attributes to be used in ""update/append"" mode\r\n\r\nOSError: Empty or corrupt FITS file\r\n```'"
2916,41944895,mdboom,embray,2014-09-04 14:44:25,2015-03-03 16:20:21,2014-09-04 16:31:44,closed,mdboom,v0.4.2,2,Affects-release;Bug;io.fits,https://api.github.com/repos/astropy/astropy/issues/2916,b'Support creation of BinTableHDUs with zero rows',"b""This is a problem we've run into with `jwst_lib.models`.  It doesn't seem to be possible to create a BinTableHDU from a numpy structured array with 0 rows.  This fixes that by determining the shape from shape of the field, not the shape of the first row of the field (which may not always exist).\r\n\r\n@embray """
2909,41638140,keflavich,embray,2014-09-01 13:37:52,2015-01-16 19:51:52,2014-10-01 22:40:46,closed,,v0.4.4,5,Bug;wcs,https://api.github.com/repos/astropy/astropy/issues/2909,"b'BUGFIX: WCS slicing ignored slices of the form slice(None,...)'","b'This is a bugfix to allow slicing of WCS with slices of the form `slice(None,None,X)` and `slice(None,x,y)`, which were ignored before.  Includes a regression test.'"
2900,41308981,hamogu,embray,2014-08-27 17:29:28,2014-11-26 13:32:25,2014-08-28 14:42:24,closed,,v0.4.2,3,Affects-release;Bug;modeling,https://api.github.com/repos/astropy/astropy/issues/2900,b'fitting with weights does not work',"b'I follow the example here:\r\nhttp://astropy.readthedocs.org/en/latest/modeling/index.html#simple-1-d-model-fitting\r\nup to\r\n```\r\nIn [54]: g = fit_g(g_init, x, y)\r\n\r\nIn [55]: g\r\nOut[55]: <Gaussian1D(amplitude=3.0470524687449143, mean=1.2743014580861238, stddev=0.8135350264067557)>\r\n```\r\nNow, I add simple weights, where each point has a weight of one, so I expect the same result, but instead I find:\r\n```\r\nIn [56]: g = fit_g(g_init, x, y, weights=np.ones_like(x))\r\n\r\nIn [57]: g\r\nOut[57]: <Gaussian1D(amplitude=1.0037130760672641, mean=0.011945521766504107, stddev=1.004640465609317)>\r\n```\r\n\r\n(In practice, I have weights that are different for every point, but if ""all weights are equal"" does not work, then that\'s not going to work either.)\r\n\r\n@embray '"
2898,41302656,mhvk,mhvk,2014-08-27 16:25:09,2014-09-16 14:02:42,2014-09-03 12:52:08,closed,,v0.4.2,21,Affects-release;Bug;table,https://api.github.com/repos/astropy/astropy/issues/2898,b'Simplify table column format definition?',"b""Following discussion in #2896: Currently, column formats can be set by either giving a string or a function [1], with the string an old or new-style format, e.g., `'%5.2f'` or `'{:5.2f}'`. It would seem more logical if the user would not have to care how typesetting is done in python and could just give the actual format specifier (i.e., just `'5.2f'`). This would leave the string format very simple, equal to what one would guess with the most careless thought. It would also be easy to describe in the documentation, as it would just be equal to what needs to be passed in to the `format` function. Specifically, in `pprint._auto_format_func`, one would the format function would be defined as\r\n```\r\nlambda format_, val: format(val, format_)\r\n```\r\ninstead of the current\r\n```\r\nlambda format_, val: format_.format(val)\r\n```\r\n\r\nIf the above makes sense, I'm happy to turn this into a PR. @taldcroft?\r\n\r\n[1] http://astropy.readthedocs.org/en/latest/table/construct_table.html#format-specifier"""
2889,40975533,astrofrog,mdboom,2014-08-23 13:22:56,2014-11-18 17:19:05,2014-11-18 17:19:05,closed,mdboom,v0.4.3,6,Affects-release;Bug;coordinates,https://api.github.com/repos/astropy/astropy/issues/2889,b'Changing attributes on SkyCoord leads to inconsistent state',"b""The following example shows how one can change an attribute on ``SkyCoord`` and end up with an inconsistent state where ``c.ra`` doesn't match the coordinates being shown:\r\n\r\n```\r\nIn [21]: c\r\nOut[21]: <SkyCoord (ICRS): ra=1.0 deg, dec=2.0 deg>\r\n\r\nIn [22]: c = SkyCoord(1 * u.deg, 2 * u.deg)\r\n\r\nIn [23]: c.ra = 3 * u.deg\r\n\r\nIn [24]: c\r\nOut[24]: <SkyCoord (ICRS): ra=1.0 deg, dec=2.0 deg>\r\n\r\nIn [25]: c.ra\r\nOut[25]: <Quantity 3.0 deg>\r\n```\r\n\r\ncc @eteq @taldcroft """
2888,40972757,astrofrog,astrofrog,2014-08-23 10:34:37,2015-03-03 16:19:41,2014-11-18 17:18:58,closed,mdboom,v0.4.3,18,Affects-release;Bug;coordinates,https://api.github.com/repos/astropy/astropy/issues/2888,b'deepcopy of SkyCoord fails',"b'Deepcopying of ``SkyCoord`` objects doesn\'t currently work:\n\n```\nIn [1]: from astropy import units as u\n\nIn [2]: from astropy.coordinates import SkyCoord\n\nIn [3]: c = SkyCoord(1 * u.deg, 2 * u.deg)\n\nIn [4]: from copy import deepcopy\n\nIn [5]: deepcopy(c)\n---------------------------------------------------------------------------\nRuntimeError                              Traceback (most recent call last)\n<ipython-input-5-9780de3d5169> in <module>()\n----> 1 deepcopy(c)\n\n/opt/local/Library/Frameworks/Python.framework/Versions/3.4/lib/python3.4/copy.py in deepcopy(x, memo, _nil)\n    180                             raise Error(\n    181                                 ""un(deep)copyable object of type %s"" % cls)\n--> 182                 y = _reconstruct(x, rv, 1, memo)\n    183 \n    184     # If is its own copy, don\'t memoize.\n\n/opt/local/Library/Frameworks/Python.framework/Versions/3.4/lib/python3.4/copy.py in _reconstruct(x, info, deep, memo)\n    299         if deep:\n    300             state = deepcopy(state, memo)\n--> 301         if hasattr(y, \'__setstate__\'):\n    302             y.__setstate__(state)\n    303         else:\n\n/Users/tom/Library/Python/3.4/lib/python/site-packages/astropy-1.0.dev9642-py3.4-macosx-10.8-x86_64.egg/astropy/coordinates/sky_coordinate.py in __getattr__(self, attr)\n    330         """"""\n    331 \n--> 332         if self.frame.name == attr:\n    333             return self  # Should this be a deepcopy of self?\n    334 \n[snip]\n/Users/tom/Library/Python/3.4/lib/python/site-packages/astropy-1.0.dev9642-py3.4-macosx-10.8-x86_64.egg/astropy/coordinates/sky_coordinate.py in __getattr__(self, attr)\n    330         """"""\n    331 \n--> 332         if self.frame.name == attr:\n    333             return self  # Should this be a deepcopy of self?\n    334 \n\n/Users/tom/Library/Python/3.4/lib/python/site-packages/astropy-1.0.dev9642-py3.4-macosx-10.8-x86_64.egg/astropy/coordinates/sky_coordinate.py in frame(self)\n    155     @property\n    156     def frame(self):\n--> 157         return self._sky_coord_frame\n    158 \n    159     @property\n\nRuntimeError: maximum recursion depth exceeded\n```\n\ncc @taldcroft @eteq'"
2884,40840288,cwfinn,embray,2014-08-21 19:37:27,2014-09-23 20:09:25,2014-09-23 20:09:25,closed,,v0.4.2,1,Bug;modeling,https://api.github.com/repos/astropy/astropy/issues/2884,"b""Keyword argument 'weights' in astropy.modeling.fitting classes pass wrong tuple to scipy.optimize.leastsq""","b'The keyword argument `weights`, passed to a `__call__` method in any of the `astropy.modeling.fitting` classes that use `scipy.optimize.leastsq` does not work as it should. This is because the `args` keyword in `scipy.optimize.leastsq` should be passed a tuple with items in the order `(xdata, ydata, zdata, model, weights)`, whereas the `_wrap_deriv` method arranges that tuple in the order `(model, weights, xdata, ydata, zdata)`.'"
2879,40750131,embray,embray,2014-08-20 22:00:19,2015-01-13 17:35:21,2014-08-26 21:07:02,closed,,v0.4.2,8,Affects-release;Bug;table,https://api.github.com/repos/astropy/astropy/issues/2879,b'Fix reference cycle between Table and Column',b'As discovered while looking into #2877 there is a reference cycle that goes:\r\n\r\n`Table` -> `TableColumns` -> `Column` -> `Table`\r\n\r\nby way of the `parent_table` attribute on columns.  This fixes it by making `parent_table` a weakref (hidden away via a `property` allowing minimal code changes elsewhere).  A test demonstrating the fix is included.'
2878,40727376,mhvk,embray,2014-08-20 18:15:41,2014-08-22 19:42:37,2014-08-22 19:42:35,closed,,v0.4.2,8,Affects-release;Bug;utils,https://api.github.com/repos/astropy/astropy/issues/2878,b'Table.pprint() header ignores stdout redirection',"b'As found in #2869, if one tries to redirect the output from `Table.pprint()`, the data get redirected, but the header does not (see below). My guess is that this is because `color_print`, which is used for the header, does not write to stdout.\r\n \r\n```\r\nIn [1]: from astropy.table import Table, Column\r\n\r\nIn [2]: from contextlib import redirect_stdout\r\n\r\nIn [3]: t = Table([Column([1., 2.], \'a\', unit=\'m\'), Column([\'a\', \'b\'], \'b\')])\r\n\r\nIn [4]: t.pprint()\r\n a   b \r\n m     \r\n--- ---\r\n1.0   a\r\n2.0   b\r\n\r\nIn [5]: with redirect_stdout(open(""a.out"", ""w"")):\r\n    t.pprint()\r\n   ...:     \r\n a   b \r\n m     \r\n--- ---\r\n\r\nIn [6]: !cat a.out\r\n1.0   a\r\n2.0   b\r\n```'"
2856,40339912,astrofrog,embray,2014-08-15 11:03:26,2015-02-06 22:46:21,2015-02-06 22:46:21,closed,,,10,Bug;Package-intermediate;table,https://api.github.com/repos/astropy/astropy/issues/2856,b'More explicit error if table is sliced with empty iterator',"b""In the following example the error that occurs when slicing the table with an empty iterator is pretty obscure:\r\n\r\n```\r\nIn[ 11]: from astropy.table import Table\r\n\r\nIn [12]: t = Table()\r\n\r\nIn [13]: t['a'] = [1,2,3]\r\n\r\nIn [14]: t[[1,2]]\r\nOut[14]: \r\n<Table rows=2 names=('a')>\r\narray([(2,), (3,)], \r\n      dtype=[('a', '<i8')])\r\n\r\nIn [15]: t[[1]]\r\nOut[15]: \r\n<Table rows=1 names=('a')>\r\narray([(2,)], \r\n      dtype=[('a', '<i8')])\r\n\r\nIn [16]: t[[]]\r\n---------------------------------------------------------------------------\r\nValueError                                Traceback (most recent call last)\r\n<ipython-input-16-7e9394d22394> in <module>()\r\n----> 1 t[[]]\r\n\r\n/Users/tom/Library/Python/3.4/lib/python/site-packages/astropy-1.0.dev9620-py3.4-macosx-10.8-x86_64.egg/astropy/table/table.py in __getitem__(self, item)\r\n    891                 raise ValueError('Slice name(s) {0} not valid column name(s)'\r\n    892                                  .format(', '.join(bad_names)))\r\n--> 893             out = self.__class__([self[x] for x in item], meta=deepcopy(self.meta))\r\n    894             out._groups = groups.TableGroups(out, indices=self.groups._indices,\r\n    895                                              keys=self.groups._keys)\r\n\r\n/Users/tom/Library/Python/3.4/lib/python/site-packages/astropy-1.0.dev9620-py3.4-macosx-10.8-x86_64.egg/astropy/table/table.py in __init__(self, data, masked, names, dtype, meta, copy, rows)\r\n    380 \r\n    381         # Finally do the real initialization\r\n--> 382         init_func(data, names, dtype, n_cols, copy)\r\n    383 \r\n    384         # Whatever happens above, the masked property should be set to a boolean\r\n\r\n/Users/tom/Library/Python/3.4/lib/python/site-packages/astropy-1.0.dev9620-py3.4-macosx-10.8-x86_64.egg/astropy/table/table.py in _init_from_list(self, data, names, dtype, n_cols, copy)\r\n    542             cols.append(col)\r\n    543 \r\n--> 544         self._init_from_cols(cols)\r\n    545 \r\n    546     def _init_from_ndarray(self, data, names, dtype, n_cols, copy):\r\n\r\n/Users/tom/Library/Python/3.4/lib/python/site-packages/astropy-1.0.dev9620-py3.4-macosx-10.8-x86_64.egg/astropy/table/table.py in _init_from_cols(self, cols)\r\n    605         if len(lengths) != 1:\r\n    606             raise ValueError('Inconsistent data column lengths: {0}'\r\n--> 607                              .format(lengths))\r\n    608 \r\n    609         self._set_masked_from_cols(cols)\r\n\r\nValueError: Inconsistent data column lengths: set()\r\n```\r\n\r\nI originally was going to suggest that this should return an empty table, but I guess that we can't do this since we rely on the content of the iterator to determine if the user is slicing on rows or columns, right? In that case, it would be good to at least have a more explicit error message."""
2846,39918109,bsipocz,eteq,2014-08-10 22:15:36,2016-05-31 13:55:40,2014-09-05 21:01:50,closed,,v1.0.0,22,Affects-release;Bug;coordinates,https://api.github.com/repos/astropy/astropy/issues/2846,b'Angle accepts hours:mins or deg:mins initializers (without seconds) and float minutes for these cases',"b'This PR adds back the support for space separated sky coordinate values using the sign as separator when <6 values are given. This was once supported, and I couldn\'t find whether it was deliberately taken out or just by accident in #2586. If the former please close the PR.\r\nIt also adds the support for the format when seconds are missing, but the minute value is a float. \r\nI had to make changed to the ``_AngleParser`` class, but left the PLY generated stuff in ``angle_parsetab.py`` untouched as everything seemed to be working.\r\n\r\nThe use case motivation behind this was querying a region for objects in Simbad. It give back a list with the coordinates space separated, and sometimes with less than 6 values:\r\n\r\ncc @eteq, @taldcroft\r\n```\r\nIn [2]: astropy.__version__\r\nOut[2]: u\'1.0.dev9597\'\r\n\r\nIn [3]: from astroquery.simbad import Simbad\r\nWARNING: ConfigurationDefaultMissingWarning: Could not determine version of package astroquery Cannot install default profile. If you are importing from source, this is expected. [astroquery._astropy_init]\r\nWARNING: AstropyDeprecationWarning: ConfigurationItem has been deprecated in astropy 0.4. Use ConfigItem objects as members of ConfigNamespace subclasses instead.  See ConfigNamespace for an example. [astropy.config.configuration]\r\n\r\nIn [4]: import astropy.units as u\r\n\r\nIn [5]: obj_list = Simbad.query_region(coordinates=\'08:51:18 +11 48 00\')\r\nWARNING: AstropyDeprecationWarning: The format function is deprecated and may be removed in a future version.\r\n        Use to_string instead. [astropy.utils.misc]\r\nWARNING: AstropyDeprecationWarning: The format function is deprecated and may be removed in a future version.\r\n        Use to_string instead. [astropy.utils.misc]\r\n\r\nIn [6]: ra=obj_list[\'RA\']\r\n\r\nIn [7]: dec=obj_list[\'DEC\']\r\n\r\nIn [8]: from astropy.coordinates import *\r\n\r\nIn [9]:  Angle(dec, unit=u.deg).deg\r\n---------------------------------------------------------------------------\r\nValueError                                Traceback (most recent call last)\r\n<ipython-input-9-de86a4894c9b> in <module>()\r\n----> 1 Angle(dec, unit=u.deg).deg\r\n\r\n/Users/bsipocz/munka/devel/astropy/astropy/coordinates/angles.py in __new__(cls, angle, unit, dtype, copy)\r\n    116                   not (isinstance(angle, np.ndarray) and\r\n    117                        angle.dtype.kind not in \'SUVO\')):\r\n--> 118                 angle = [Angle(x, unit) for x in angle]\r\n    119                 if unit is None:\r\n    120                     unit = angle[0].unit\r\n\r\n/Users/bsipocz/munka/devel/astropy/astropy/coordinates/angles.py in __new__(cls, angle, unit, dtype, copy)\r\n    107 \r\n    108             if isinstance(angle, six.string_types):\r\n--> 109                 angle, new_unit = util.parse_angle(angle, unit)\r\n    110                 if new_unit is not None and unit is None:\r\n    111                     unit = new_unit\r\n\r\n/Users/bsipocz/munka/devel/astropy/astropy/coordinates/angle_utilities.py in parse_angle(angle, unit, debug)\r\n    345         string.\r\n    346     """"""\r\n--> 347     return _AngleParser().parse(angle, unit, debug=debug)\r\n    348 \r\n    349 \r\n\r\n/Users/bsipocz/munka/devel/astropy/astropy/coordinates/angle_utilities.py in parse(self, angle, unit, debug)\r\n    261             else:\r\n    262                 raise ValueError(\r\n--> 263                     ""Syntax error parsing angle {0!r}"".format(angle))\r\n    264 \r\n    265         if unit is None and found_unit is None:\r\n\r\nValueError: Syntax error parsing angle \'+11 48.0\'\r\n```\r\n```\r\nIn [15]: print obj_list[0:3]\r\n        MAIN_ID               RA           DEC      RA_PREC ... COO_ERR_ANGLE COO_QUAL COO_WAVELENGTH     COO_BIBCODE    \r\n                           ""h:m:s""       ""d:m:s""            ...      deg                                                 \r\n----------------------- ------------- ------------- ------- ... ------------- -------- -------------- -------------------\r\n                  M  67      08 51 18      +11 48.0       4 ...             0        E                2005ApJ...619..824X\r\n2MASS J08511918+1147546 08 51 19.1817 +11 47 54.708       8 ...            90        B              O 2006A&A...448.1235D\r\n          ** BPM  480BE   08 51 19.19   +11 47 54.8       6 ...             0        D              O 2001AJ....122.3466M\r\n\r\n```'"
2843,39906924,olebole,embray,2014-08-10 12:25:36,2014-08-11 15:13:28,2014-08-11 15:07:56,closed,,v0.4.2,4,Bug;installation,https://api.github.com/repos/astropy/astropy/issues/2843,b'0.4.1: source tar contains a lot of precompiled files',"b'The [0.4.1 tarball]( http://pypi.python.org/packages/source/a/astropy/astropy-0.4.1.tar.gz) contains a lot of .pyc files which create some formal difficulties for Debian: ""lintian"" complains f.e.\r\n```\r\nE: python-astropy source: source-is-missing astropy_helpers/astropy_helpers/__pycache__/__init__.cpython-32.pyc\r\nE: python-astropy source: source-is-missing astropy_helpers/astropy_helpers/__pycache__/__init__.cpython-33.pyc\r\n```\r\nEspecially the files in `__pycache__` seem to be there on accident only, right? Could they be dropped from the source distribution?\r\nOptimal would be to drop all .pyc files.'"
2841,39903824,olebole,astrofrog,2014-08-10 08:37:43,2015-02-11 15:52:58,2015-02-11 09:53:25,closed,mdboom,v1.0.0,2,Bug;config;Effort-low;Package-novice;testing,https://api.github.com/repos/astropy/astropy/issues/2841,b'0.4.1: test_unedited_template fails',"b""Hi,\r\n\r\nwhen building on Debian (unstable; x86_64), I get the following:\r\n```\r\n___________________________ test_unedited_template ____________________________\r\n\r\n    def test_unedited_template():\r\n        # Test that the config file is written at most once\r\n        config_dir = os.path.join(os.path.dirname(__file__), '..', '..')\r\n        configuration.update_default_config('astropy', config_dir)\r\n>       assert configuration.update_default_config('astropy', config_dir) is False\r\nE       assert None is False\r\nE        +  where None = <function update_default_config at 0x7f84e56d10c8>('astropy', '/tmp/astropy-test-PVRjx7/lib.linux-x86_64-2.7/astropy/config/tests/../..')\r\nE        +    where <function update_default_config at 0x7f84e56d10c8> = configuration.update_default_config\r\n\r\nastropy/config/tests/test_configs.py:334: AssertionError\r\n```\r\nPython version is 2.7"""
2824,39576047,anntzer,pllim,2014-08-05 23:30:37,2016-04-27 13:16:52,2016-04-27 13:16:45,closed,,v1.0.10,8,Bug;io.fits,https://api.github.com/repos/astropy/astropy/issues/2824,b'FITS helpers fail to close files',"b'The `astropy.io.get{data,header}` helpers fail to close the file.\r\n```\r\n$ python -Wall -c \'from astropy.io import fits; fits.getdata(""1-bf.fits"")\'\r\n-c:1: ResourceWarning: unclosed file <_io.FileIO name=\'1-bf.fits\' mode=\'rb\'>\r\n```\r\nNot a big deal though.'"
2818,39446499,larrybradley,embray,2014-08-04 18:20:43,2014-08-07 19:03:58,2014-08-04 21:09:05,closed,,v0.4.1,2,Affects-dev;Bug;testing,https://api.github.com/repos/astropy/astropy/issues/2818,b'Fix doctest-requires with multiple module inputs',"b'When `doctest-requires` had multiple modules, it would *not* skip the doctest if the first module listed was available.  This is because `DocTestFinderPlus` would return `True` in the middle of the `for` loop over all of the modules (and thus run the doctest).  In this PR, it only stops the `for` loop if the return is `False`.'"
2811,39325844,embray,embray,2014-08-01 20:43:45,2014-08-04 14:11:50,2014-08-04 14:11:48,closed,,v0.4.1,0,Affects-release;Bug;utils,https://api.github.com/repos/astropy/astropy/issues/2811,b'A couple fixes to the deprecated decorator',b'1) staticmethods were not fully supported (they receive the same treatment as classmethods)\r\n2) the full message for deprecation warnings was not being displayed; I think this was just due to some code rot that hung around after `deprecated` was refactored to support class decoration'
2805,39194514,segasai,embray,2014-07-31 13:33:48,2015-03-03 16:19:34,2014-08-05 19:50:37,closed,mdboom,v0.4.1,6,Affects-release;Bug;config,https://api.github.com/repos/astropy/astropy/issues/2805,"b'Astropy 0.4 rewriting astropy.cfg all the time, leading to race conditions'","b'Hi, \r\n\r\nI have a default astropy.cfg file and currently astropy 0.4 rewrites it at every import, which leads to race conditions in multithreading scenarios. For example the following program \r\n```python\r\nimport time,multiprocessing as mp\r\ndef func(x):\r\n    import astropy.table\r\n    time.sleep(0.01)\r\n\r\np=mp.Pool(16,maxtasksperchild=1)\r\np.map(func,range(10000000),chunksize=1)\r\n```\r\nfails with this message\r\n\r\n```\r\nTraceback (most recent call last):\r\n  File ""xtest.py"", line 10, in <module>\r\n    p.map(func,range(10000000),chunksize=1)\r\n  File ""/home/koposov/my_usr/pylib/lib/python2.7/multiprocessing/pool.py"", line 250, in map\r\n    return self.map_async(func, iterable, chunksize).get()\r\n  File ""/home/koposov/my_usr/pylib/lib/python2.7/multiprocessing/pool.py"", line 554, in get\r\n    raise self._value\r\nmultiprocessing.pool.MaybeEncodingError: Error sending result: \'ParseError(\'Invalid line at line ""1"".\',)\'. Reason: \'PicklingError(""Can\'t pickle <class \'astropy.extern.configobj_py2.configobj.ParseError\'>: import of module astropy.extern.configobj_py2.configobj failed"",)\'\r\n```\r\n\r\nTo experience this bug, you must have either the default astropy 0.4 cfg file (or  remove it first before running the program).\r\n\r\nThe cause of the problem is in astropy/config/configuration.py is_unedites_config_file() function. This function sees the cfg file written previously by astropy 0.4 and thinks that it ""does not have any effective content"" (see line 765) and decides to rewrite it. The problem is that this happens every time you import astropy.... \r\nAnd in multithreaded cases sometimes an incomplete file is being read.  which leads to the exception seen above. \r\n\r\nI think the easy fix is to compare the md5 with md5 of the default astropy0.4 config file fdf8a709588d9083d3ec0cbb3a0ac462 to avoid this problem, but I don\'t know whether that\'s satisfactory. I could provide a patch if needed.\r\n\r\n Sergey\r\n\r\nPS It is also easy to see that the rewriting happens all time by doing strace:\r\n\r\nstrace -e open python -c \'import astropy\' 2>&1 |grep astropy.cfg\r\nopen(""/home/koposov/.astropy/config/astropy.cfg"", O_RDONLY) = 4\r\nopen(""/home/koposov/.astropy/config/astropy.cfg"", O_RDONLY) = 4\r\nopen(""/home/koposov/my_usr/pylib/lib/python2.7/site-packages/astropy/astropy.cfg"", O_RDONLY) = 4\r\nopen(""/home/koposov/.astropy/config/astropy.cfg"", O_WRONLY|O_CREAT|O_TRUNC, 0666) = 4\r\n\r\n'"
2799,38851217,mwcraig,mwcraig,2014-07-27 21:35:00,2014-12-20 09:22:41,2014-12-19 17:51:01,closed,,,7,Bug;Effort-low;io.ascii;Package-intermediate,https://api.github.com/repos/astropy/astropy/issues/2799,b'csv file is read incorrectly if format is autodetected',"b""I ran into a problem reading a csv file today (at https://gist.github.com/mwcraig/a9628002e3e26d8c0767). \r\n\r\nWhen I read the file with ``Table.read('result.csv')`` it is read incorrectly: wrong number of rows and some values from column 2 are put into the first column.\r\n\r\nReading the same file with ``Table.read(\r\nresult.csv', format='ascii.csv')`` works as expected.\r\n\r\nOne additional note:  this file has two leading spaces at the beginning of each line; when I remove those spaces the file is read the same whether I use the ``format`` argument or not.\r\n\r\nMore detail/to reproduce:\r\n\r\n```python\r\nfrom astropy.table import Table\r\ntbl = Table.read('result.csv')\r\ntbl['z'].max()\r\n# 42.915784000000002  which is not correct\r\nlen(tbl)\r\n#  9272    also not correct\r\n\r\ntbl2 = Table.read('result.csv', format='ascii.csv')\r\ntbl2['z'].max()\r\n# 0.050000000000000003  this is correct\r\nlen(tbl2)\r\n# 9659  also correct\r\n```"""
2794,38655904,mwcraig,embray,2014-07-24 17:41:51,2015-01-13 17:35:21,2014-09-15 14:48:31,closed,,v0.4.2,18,Bug;io.fits,https://api.github.com/repos/astropy/astropy/issues/2794,b'fits.writeto writes a corrupt file if the file name ends .gz',b'@embray -- if you can point me to file where writeto is implemented I can put together a PR to fix it by checking for a name that ends in ``.gz`` and raises an error (unless the desired behavior is to write a gzipped file in that case).\r\n\r\nI think this is the real problem I was trying to report in #2779 '
2791,38603865,letmaik,embray,2014-07-24 07:30:51,2015-03-03 16:20:17,2014-07-29 14:47:54,closed,mdboom,v0.4.1,2,Affects-release;Bug;wcs,https://api.github.com/repos/astropy/astropy/issues/2791,b'WCS ra_dec_order not working',"b'When using `all_pix2world` with `ra_dec_order=True` I get:\r\n\r\n```python\r\n  File "".../site-packages/astropy/wcs/wcs.py"", line 1099, in all_pix2world\r\n    self._all_pix2world, \'output\', *args, **kwargs)\r\n  File "".../site-packages/astropy/wcs/wcs.py"", line 1088, in _array_converter\r\n    return _return_list_of_arrays(axes, origin)\r\n  File "".../site-packages/astropy/wcs/wcs.py"", line 1046, in _return_list_of_arrays\r\n    output = self._normalize_sky_output(output)\r\nAttributeError: \'WCS\' object has no attribute \'_normalize_sky_output\'\r\n```\r\n\r\nWhich makes sense as there is no method named `_normalize_sky_output`, only `_normalize_sky`.\r\n\r\nI use astropy 0.4.'"
2784,38500450,AnthonyHorton,embray,2014-07-23 06:33:19,2014-08-01 15:42:33,2014-08-01 15:42:33,closed,,v0.4.1,1,Affects-release;Bug;Effort-low;nddata;Package-novice,https://api.github.com/repos/astropy/astropy/issues/2784,b'Initialising NDData objects with a numpy masked array object fails if there are no masked entries',"b'If you attempt to initialise an NDData object using a numpy masked array object which happens to have no masked entries it raises an exception, e.g.\r\n\r\n```\r\nmaskedarray = numpy.ma.array(numpy.ones((10,10)))\r\nastropy.nddata.NDData(maskedarray)\r\n```\r\n\r\nresults in `ValueError: dimensions of mask do not match data` (confirmed with Python 3.4.1, numpy 1.8.1 and astropy 0.4).\r\n\r\nThe problem is the mask setter code in nddata.py:\r\n\r\n    @mask.setter\r\n    def mask(self, value):\r\n        if value is not None:\r\n            mask = np.array(value, dtype=np.bool_, copy=False)\r\n            if mask.shape != self.shape:\r\n                raise ValueError(""dimensions of mask do not match data"")\r\n            else:\r\n                self._mask = mask\r\n        else:\r\n            # internal representation should be one numpy understands\r\n            self._mask = np.ma.nomask\r\n\r\nThe 3rd line tests whether the provided mask `value` is equal to `None` but the mask of a numpy masked array with no masked elements is not `None`, it is `numpy.ma.nomask` (which evaluates to `False`).  As a result the expression in the if statement evaluates as `True` and the setter goes ahead to convert `numpy.ma.nomask` to a single element boolean array `[False,]` before raising an exception because the shape doesn\'t match that of the data.\r\n\r\nI think all that is required here is to replace \r\n\r\n`if value is not None:` \r\n\r\nwith \r\n\r\n`if (value is not None) and (value != np.ma.nomask):`\r\n\r\n'"
2774,38297758,cdeil,embray,2014-07-21 12:22:09,2014-09-12 20:27:11,2014-09-12 20:27:11,closed,,,6,Affects-release;Bug;Effort-low;io.fits;Package-novice;Python2.6,https://api.github.com/repos/astropy/astropy/issues/2774,b'Reading Table from gzipped FITS file fails on Python 2.6',"b'It looks like Table reading from gzipped FITS files is broken on Python 2.6 !?\r\nI see this on Mac and Linux (see https://github.com/gammapy/gammapy/pull/147).\r\n\r\nTo reproduce:\r\n```\r\n$ cd /tmp\r\n$ cp /Users/deil/code/astropy/astropy/io/fits/tests/data/table.fits .\r\n$ gzip table.fits\r\n$ python2.6\r\n>>> from astropy.table import Table\r\n>>> Table.read(\'table.fits.gz\')\r\nTraceback (most recent call last):\r\n  File ""<stdin>"", line 1, in <module>\r\n  File ""/Users/deil/.local/lib/python2.6/site-packages/astropy-1.0.dev9483-py2.6-macosx-10.9-x86_64.egg/astropy/table/table.py"", line 1865, in read\r\n    return io_registry.read(cls, *args, **kwargs)\r\n  File ""/Users/deil/.local/lib/python2.6/site-packages/astropy-1.0.dev9483-py2.6-macosx-10.9-x86_64.egg/astropy/io/registry.py"", line 330, in read\r\n    data = reader(*args, **kwargs)\r\n  File ""/Users/deil/.local/lib/python2.6/site-packages/astropy-1.0.dev9483-py2.6-macosx-10.9-x86_64.egg/astropy/io/fits/connect.py"", line 138, in read_table_fits\r\n    hdulist = fits_open(input)\r\n  File ""/Users/deil/.local/lib/python2.6/site-packages/astropy-1.0.dev9483-py2.6-macosx-10.9-x86_64.egg/astropy/io/fits/hdu/hdulist.py"", line 119, in fitsopen\r\n    return HDUList.fromfile(name, mode, memmap, save_backup, **kwargs)\r\n  File ""/Users/deil/.local/lib/python2.6/site-packages/astropy-1.0.dev9483-py2.6-macosx-10.9-x86_64.egg/astropy/io/fits/hdu/hdulist.py"", line 251, in fromfile\r\n    save_backup=save_backup, **kwargs)\r\n  File ""/Users/deil/.local/lib/python2.6/site-packages/astropy-1.0.dev9483-py2.6-macosx-10.9-x86_64.egg/astropy/io/fits/hdu/hdulist.py"", line 768, in _readfrom\r\n    ffo = _File(fileobj, mode=mode, memmap=memmap)\r\n  File ""/Users/deil/.local/lib/python2.6/site-packages/astropy-1.0.dev9483-py2.6-macosx-10.9-x86_64.egg/astropy/io/fits/file.py"", line 177, in __init__\r\n    self.__file.seek(0, 2)\r\n  File ""/Users/deil/.local/lib/python2.6/site-packages/astropy-1.0.dev9483-py2.6-macosx-10.9-x86_64.egg/astropy/utils/compat/_gzip_py2/__init__.py"", line 411, in seek\r\n    raise ValueError(\'Seek from end not supported\')\r\nValueError: Seek from end not supported\r\n```\r\nThe same code works fine on Python 2.7 and 3.\r\n\r\ncc @embray @taldcroft '"
2754,37989441,amaurea,astrofrog,2014-07-16 14:44:46,2015-03-03 16:20:17,2014-07-17 07:57:13,closed,,v0.4.1,5,Affects-release;Bug;wcs,https://api.github.com/repos/astropy/astropy/issues/2754,b'WCS memory leak',"b""The following program leaks memory:\r\n\r\n    from astropy.wcs import WCS\r\n    w = WCS()\r\n    while True:\r\n        w.deepcopy()\r\n\r\nIt also leaks for `.copy()`.\r\n\r\nI use a numpy array subclass with an attached WCS object, and this mechanism makes those arrays leak memory whenever a copy/slice/whatever is done on those arrays. It's only a small amount of memory each time, so I didn't notice for a while, but today I encountered a situation where it kills my programs after running for just a few minutes. So this is a serious issue to me."""
2752,37960615,cdeil,cdeil,2014-07-16 08:42:11,2015-09-28 16:36:35,2015-09-28 15:48:42,closed,,,8,Bug;Docs;Effort-low;Package-intermediate;table;Upstream Fix Required,https://api.github.com/repos/astropy/astropy/issues/2752,b'Boolean Table indexing with list has unexpected behaviour',"b""I just tripped over this behaviour of `Table`:\r\n```\r\n>>> import numpy as np\r\n>>> from astropy.table import Table\r\n>>> arr = np.arange(15).reshape(5, 3)\r\n>>> t = Table(arr, names=('a', 'b', 'c'), meta={'keywords': {'key1': 'val1'}})\r\n>>> print(t)\r\n a   b   c \r\n--- --- ---\r\n  0   1   2\r\n  3   4   5\r\n  6   7   8\r\n  9  10  11\r\n 12  13  14\r\n>>> mask = [_ not in [3, 9] for _ in t['a']]\r\n>>> mask\r\n[True, False, True, False, True]\r\n>>> print(t[mask]) # this is what I did ... not the result I want\r\n a   b   c \r\n--- --- ---\r\n  3   4   5\r\n  0   1   2\r\n  3   4   5\r\n  0   1   2\r\n  3   4   5\r\n>>> print(t[np.array(mask)]) # this is what I wanted\r\n a   b   c \r\n--- --- ---\r\n  0   1   2\r\n  6   7   8\r\n 12  13  14\r\n```\r\nApparently `Table` converts the list of booleans to an array of integers and performs integer indexing, whereas for a numpy array of booleans it performs boolean indexing.\r\n\r\nI think this is very error-prone and propose to change the behaviour to perform boolean indexing if the user passes a list of bools.\r\n\r\nAlso, boolean indexing is not documented at all in the docs as far as I can see (see [here](http://astropy.readthedocs.org/en/latest/table/access_table.html)), should I file a separate issue for that?\r\n\r\ncc @taldcroft """
2750,37932143,richardgmcmahon,embray,2014-07-15 22:24:27,2014-09-16 14:07:46,2014-09-16 14:07:45,closed,,v0.4.2,4,Affects-release;Bug;Effort-low;io.fits;Package-novice,https://api.github.com/repos/astropy/astropy/issues/2750,"b'.fz fits files KeyError: ""Keyword \'ZSIMPLE\' not found in 0.3.2 versus 0.3'","b'I have some .fz fits files that are giving the error:\r\n\r\nKeyError: ""Keyword \'ZSIMPLE\' not found.""\r\n\r\nwhen I use astropy 0.3.2 and also 0.4rc3.dev9443 but 0.3 reads the header OK\r\n\r\nThe header looks like\r\n.\r\n.\r\n.\r\nZVAL2   =                    4 / bytes per pixel (1, 2, 4, or 8)                \r\nEXTNAME = \'COMPRESSED_IMAGE\'                                                    \r\nZSIMPLE =                    T / file does conform to FITS standard             \r\nZBITPIX =                  -32 / number of bits per data pixel  \r\n.\r\n.\r\n.\r\n'"
2733,37724632,dklaes,astrofrog,2014-07-12 17:48:51,2016-04-19 10:37:41,2016-04-19 10:37:41,closed,,,5,astropy-helpers;Bug;Docs;Effort-low;Package-novice,https://api.github.com/repos/astropy/astropy/issues/2733,b'Bug in doctest',"b""If a certain part of the doc requires e.g. matplotlib, some of the doctest fail. To prevent that, one adds the line ``.. doctest-requires:: matplotlib`` before that piece of code. If between this line and the code itself (e.g. ``import matplotlib.pylab as lab``) is *no* empty line, then only an empty code box appears.\r\n\r\nThis doesn't work:\r\n<pre><code>.. doctest-requires:: matplotlib\r\n    import matplotlib.pylab as lab</code></pre>\r\n\r\nThis works:\r\n<pre><code>.. doctest-requires:: matplotlib\r\n\r\n    import matplotlib.pylab as lab</code></pre>\r\n    \r\n\r\nJust found out at the SciPy Sprint with @embray ."""
2727,37698995,eteq,embray,2014-07-11 21:27:17,2015-01-13 17:35:20,2014-07-28 15:45:23,closed,,v0.4.1,9,Bug;coordinates,https://api.github.com/repos/astropy/astropy/issues/2727,b'Deprecate (and fix) CartesianPoints',"b""This addresses an oversight from the APE5 coordinate work that @mhvk pointed out in #2712: `CartesianPoints` should have been deprecated in favor of `CartesianRepresentation`.  It can't be removed outright because it was in the 0.3 API, but its role is entirely subsumed by `CartesianRepresentation` (although the API is a bit different).\r\n\r\nIncidentally, it's also broken in 0.4, so this also makes some changes to make it work.\r\n\r\nIt's possible no one out there actually uses `CartesianPoints`, but it's safer to do this just in case, I think.  We'll plan on removing it completely in 1.0.\r\n\r\n@embray or @astrofrog, do you object to this going into 0.4 ?  It is technically a bug (in that `CartesianPoints` is broken in the RC), but a bug in a minor (possibly unused) feature.  More important is getting the depreaction warning in now so we can remove in 1.0."""
2718,37555760,mhvk,embray,2014-07-10 12:04:21,2015-01-13 17:35:28,2014-07-24 17:53:33,closed,,v0.4.1,5,Bug;coordinates;units,https://api.github.com/repos/astropy/astropy/issues/2718,b'Ensure in-place ops on Angles with non-angle result do not corrupt the instance',"b""Currently, for an inplace operation on an Angle, an exception is raised if the result unit is not an angle unit, but this happens after the instance has been corrupted (see below). This PR solves this by checking an output instance is of the right class for the result unit.\r\n```\r\nIn [1]: import astropy.units as u, numpy as np; from astropy.coordinates import Angle, Longitude, Latitude\r\n\r\nIn [2]: a = Angle(60., u.deg)\r\n\r\nIn [3]: np.cos(a, a)\r\n...\r\nUnitsError: Given unit  is not convertible to an angle\r\n\r\nIn [4]: a\r\nOut[4]: <Angle 0.5000000000000001>\r\n```\r\n\r\nWith this PR:\r\n```\r\nIn [1]: import astropy.units as u, numpy as np; from astropy.coordinates import Angle, Longitude, Latitude\r\n\r\nIn [2]: a = Angle(60., u.deg)\r\n\r\nIn [3]: np.cos(a, a)\r\n...\r\nTypeError: Cannot store output with unit '' from cos function in <class 'astropy.coordinates.angles.Angle'> instance.  Use <class 'astropy.units.quantity.Quantity'> instance instead.\r\n\r\nIn [4]: a\r\nOut[4]: <Angle 60.0 deg>\r\n```"""
2711,37388667,GillesOrban,embray,2014-07-08 16:35:27,2014-09-16 19:18:58,2014-09-16 19:18:56,closed,embray,v0.4.2,5,Bug;Effort-low;io.fits;Package-expert,https://api.github.com/repos/astropy/astropy/issues/2711,"b""FITS: 'BLANK' keyword causes crash when reading data""","b""Hello,\r\nI already notice since a while an issue while trying to read, e.g., data fits cube (so simply (x,y,z))  see below for the full error which originate from 'hdu/image.py'.\r\nMy dummy, quickest fix was to add, right before the offending 'if':\r\n                `if blanks==False: blanks=np.array([False])`\r\n\r\nI don't know if it is really appropriate, but it does the trick for me.\r\n\r\nregards,\r\nGilles\r\n\r\n\r\n```\r\nIn [120]: array=py.getdata(cube_file)\r\n---------------------------------------------------------------------------\r\nAttributeError                            Traceback (most recent call last)\r\n<ipython-input-120-5d145d1683de> in <module>()\r\n----> 1 array=py.getdata(cube_file)\r\n\r\n/usr/local/lib/python2.7/dist-packages/astropy-0.3.2-py2.7-linux-x86_64.egg/astropy/io/fits/convenience.pyc in getdata(filename, *args, **kwargs)\r\n    186     hdulist, extidx = _getext(filename, mode, *args, **kwargs)\r\n    187     hdu = hdulist[extidx]\r\n--> 188     data = hdu.data\r\n    189     if data is None and extidx == 0:\r\n    190         try:\r\n\r\n/usr/local/lib/python2.7/dist-packages/astropy-0.3.2-py2.7-linux-x86_64.egg/astropy/utils/misc.pyc in __get__(self, obj, owner)\r\n    277         key = self._fget.__name__\r\n    278         if key not in obj.__dict__:\r\n--> 279             val = self._fget(obj)\r\n    280             obj.__dict__[key] = val\r\n    281             return val\r\n\r\n/usr/local/lib/python2.7/dist-packages/astropy-0.3.2-py2.7-linux-x86_64.egg/astropy/io/fits/hdu/image.pyc in data(self)\r\n    213             return\r\n    214 \r\n--> 215         data = self._get_scaled_image_data(self._data_offset, self.shape)\r\n    216         self._update_header_scale_info(data.dtype)\r\n    217 \r\n\r\n/usr/local/lib/python2.7/dist-packages/astropy-0.3.2-py2.7-linux-x86_64.egg/astropy/io/fits/hdu/image.pyc in _get_scaled_image_data(self, offset, shape)\r\n    582                 # So if the number of blank items is fewer than\r\n    583                 # len(raw_data.flat) / 8, using np.where will use less memory\r\n--> 584                 if blanks.sum() < len(blanks) / 8:\r\n    585                     blanks = np.where(blanks)\r\n    586 \r\n\r\nAttributeError: 'bool' object has no attribute 'sum'\r\n```\r\n"""
2710,37379656,keflavich,embray,2014-07-08 15:11:36,2014-09-17 13:47:17,2014-09-17 13:47:15,closed,,v0.4.2,2,Bug;Effort-low;io.fits;Package-expert,https://api.github.com/repos/astropy/astropy/issues/2710,b'FITS objects created with `fromstring` have problems?',"b'I have some FITS objects being created from strings.  I can\'t access their `data` attribute.  I think it has to do with `_orig_bitpix` being negative, possibly, but I\'m not sure.  @embray any thoughts?  I can provide an example if needed.\r\n\r\n```\r\nIn [32]: blah._orig_bitpix\r\nOut[32]: -32\r\n\r\nIn [33]: blah.data\r\nTraceback (most recent call last):\r\n  File ""<ipython-input-33-dd8ff7218a27>"", line 1, in <module>\r\n    blah.data\r\n  File ""/Users/adam/repos/astropy/astropy/utils/misc.py"", line 286, in __get__\r\n    val = self._fget(obj)\r\n  File ""/Users/adam/repos/astropy/astropy/io/fits/hdu/image.py"", line 218, in data\r\n    data = self._get_scaled_image_data(self._data_offset, self.shape)\r\n  File ""/Users/adam/repos/astropy/astropy/io/fits/hdu/image.py"", line 594, in _get_scaled_image_data\r\n    if self._file.memmap:\r\nAttributeError: \'NoneType\' object has no attribute \'memmap\'\r\n\r\n> /Users/adam/repos/astropy/astropy/io/fits/hdu/image.py(594)_get_scaled_image_data()\r\n    593             else:  # floating point cases\r\n--> 594                 if self._file.memmap:\r\n    595                     data = raw_data.copy()\r\n```'"
2706,37275116,mdboom,embray,2014-07-07 14:44:46,2015-03-03 16:19:37,2014-07-11 16:47:37,closed,,v0.4.0,8,Affects-dev;Bug;config;Windows,https://api.github.com/repos/astropy/astropy/issues/2706,b'Config file md5 calculation broken on Windows 7',"b""As reported by @anizami in #1802, the test that checks the calculation of the md5 sum of the config file fails on Windows 7.\r\n\r\nhttps://gist.github.com/anizami/4127d40c8a4cc39ec4c2\r\n\r\nNot sure why yet, but wanted to create an issue for this.\r\n\r\nWhile fixing the test would be nice, I don't consider this a high priority or indicative of a serious bug.  The worst that will happen here is that a user with a default astropy 0.3 config file will not have it automatically replaced by an astropy 0.4 config file.  Annoying to be sure, but it shouldn't result in loss of data or config settings etc."""
2703,37225786,astrofrog,astrofrog,2014-07-06 19:27:42,2014-11-27 08:56:13,2014-11-27 08:56:13,closed,,v1.0.0,25,Bug;coordinates,https://api.github.com/repos/astropy/astropy/issues/2703,b'Issue initializing SkyCoord with parametrized frame',"b""@eteq @taldcroft - should the following work?\r\n\r\n```\r\n\r\nIn [9]: c = SkyCoord(1 * u.deg, 2 * u.deg, frame=FK5(equinox='J2010'))\r\n---------------------------------------------------------------------------\r\nValueError                                Traceback (most recent call last)\r\n<ipython-input-9-a57dd153a30d> in <module>()\r\n----> 1 c = SkyCoord(1 * u.deg, 2 * u.deg, frame=FK5(equinox='J2010'))\r\n\r\n/Users/tom/Library/Python/2.7/lib/python/site-packages/astropy/coordinates/sky_coordinate.pyc in __init__(self, *args, **kwargs)\r\n    132         # creating the internal self._sky_coord_frame object\r\n    133         args = list(args)  # Make it mutable\r\n--> 134         kwargs = self._parse_inputs(args, kwargs)\r\n    135 \r\n    136         # Set internal versions of object state attributes\r\n\r\n/Users/tom/Library/Python/2.7/lib/python/site-packages/astropy/coordinates/sky_coordinate.pyc in _parse_inputs(self, args, kwargs)\r\n    197         # by keyword args or else get a None default.  Pop them off of kwargs\r\n    198         # in the process.\r\n--> 199         frame = valid_kwargs['frame'] = _get_frame(args, kwargs)\r\n    200         if 'representation' in kwargs:\r\n    201             valid_kwargs['representation'] = _get_repr_cls(kwargs.pop('representation'))\r\n\r\n/Users/tom/Library/Python/2.7/lib/python/site-packages/astropy/coordinates/sky_coordinate.pyc in _get_frame(args, kwargs)\r\n    775     if frame is not None:\r\n    776         # Frame was provided as kwarg so validate and coerce into corresponding frame.\r\n--> 777         frame_cls = _get_frame_class(frame)\r\n    778         frame_specified_explicitly = True\r\n    779     else:\r\n\r\n/Users/tom/Library/Python/2.7/lib/python/site-packages/astropy/coordinates/sky_coordinate.pyc in _get_frame_class(frame)\r\n    755 \r\n    756     else:\r\n--> 757         raise ValueError('Coordinate frame must be a frame name or frame class')\r\n    758 \r\n    759     return frame_cls\r\n\r\nValueError: Coordinate frame must be a frame name or frame class\r\n```"""
2701,37224557,astrofrog,mhvk,2014-07-06 18:34:54,2016-01-06 15:37:47,2016-01-06 15:37:47,closed,,,8,Bug;table;units;Upstream Fix Required,https://api.github.com/repos/astropy/astropy/issues/2701,b'Bug when multiplying a masked column with a unit',"b""Discovered during a live demo at SciPy 2014 ;)\r\n\r\n```\r\nIn [13]: t = Table(masked=True)\r\n\r\nIn [14]: t['a'] = [1,2,3]\r\n\r\nIn [15]: t['a'].unit = 'deg'\r\n\r\nIn [16]: t['a'] * u.deg\r\nOut[16]: \r\n<MaskedColumn name='a' unit=None format=None description=None>\r\nmasked_array(data = [<Quantity 1.0 deg> <Quantity 2.0 deg> <Quantity 3.0 deg>],\r\n             mask = [False False False],\r\n       fill_value = 999999)\r\n```\r\n\r\nThis should return just a single quantity, as it does for non-masked tables.\r\n\r\ncc @taldcroft """
2697,37208612,cgohlke,astrofrog,2014-07-06 00:07:03,2014-07-17 07:59:39,2014-07-17 07:59:39,closed,,v0.4.1,5,Bug;convolution,https://api.github.com/repos/astropy/astropy/issues/2697,b'Fix integer overflow in np.product',"b'On win-amd64-py3.x, [test_convolve_fft.test_big_fail](https://github.com/astropy/astropy/blob/master/astropy/convolution/tests/test_convolve_fft.py#L462) fails to raise a ValueError due to an integer overflow in np.product. \r\nThe following code raises a RuntimeWarning and allocates huge amounts of RAM:\r\n```\r\nimport numpy as np\r\nfrom astropy. convolution import convolve_fft\r\narr = np.empty([512, 512, 512], dtype=np.complex)\r\nconvolve_fft(arr, arr)\r\n```\r\n```\r\nX:\\Python34\\lib\\site-packages\\astropy\\convolution\\convolve.py:391: RuntimeWarning: overflow encountered in long_scalars\r\n  array_size_B = np.product(arrayshape)*np.dtype(complex_dtype).itemsize\r\n```'"
2695,37205867,astrofrog,astrofrog,2014-07-05 20:37:36,2014-09-26 16:46:55,2014-07-10 04:56:12,closed,mhvk,v0.4.0,10,Bug;units,https://api.github.com/repos/astropy/astropy/issues/2695,b'Bug in Quantity.itemset for NaN values',"b'The following demonstrates the issue:\r\n\r\n```\r\nIn [7]: x = np.array([1,2,3]) * u.m\r\n\r\nIn [8]: x[1] = np.nan * u.m\r\n---------------------------------------------------------------------------\r\nTypeError                                 Traceback (most recent call last)\r\n<ipython-input-8-7046346e1060> in <module>()\r\n----> 1 x[1] = np.nan * u.m\r\n\r\n/Users/tom/Library/Python/2.7/lib/python/site-packages/astropy/units/quantity.pyc in __setitem__(self, i, value)\r\n    797 \r\n    798     def __setitem__(self, i, value):\r\n--> 799         self.view(np.ndarray).__setitem__(i, self._to_own_unit(value))\r\n    800 \r\n    801     def __setslice__(self, i, j, value):\r\n\r\n/Users/tom/Library/Python/2.7/lib/python/site-packages/astropy/units/quantity.pyc in _to_own_unit(self, value, check_precision)\r\n   1016 \r\n   1017            np.any(np.array(value, self.dtype) != np.array(value))):\r\n-> 1018             raise TypeError(""cannot convert value type to array type without ""\r\n   1019                             ""precision loss"")\r\n   1020         return value\r\n\r\nTypeError: cannot convert value type to array type without precision loss\r\n```\r\n\r\nThis is due to this test:\r\n\r\n```\r\n           np.any(np.array(value, self.dtype) != np.array(value))):\r\n```\r\n\r\non line 1017 of ``quantity.py``, which fails because NaN != NaN'"
2693,37187628,charris,embray,2014-07-04 22:13:17,2014-09-18 21:35:15,2014-09-18 21:34:49,closed,,,9,Bug;Upstream Fix Required,https://api.github.com/repos/astropy/astropy/issues/2693,b'Pyfits issue in numpy 1.9',"b'```\r\n======================================================================\r\nERROR: pyfits.tests.test_table.TestTableFunctions.test_mask_array\r\n----------------------------------------------------------------------\r\nTraceback (most recent call last):\r\n  File ""X:\\Python27-x64\\lib\\site-packages\\nose\\case.py"", line 197, in runTest\r\n    self.test(*self.arg)\r\n  File ""X:\\Python27-x64\\lib\\site-packages\\pyfits\\tests\\test_table.py"", line 962, in test_mask_array\r\n    hdu.writeto(self.temp(\'newtable.fits\'))\r\n  File ""X:\\Python27-x64\\lib\\site-packages\\pyfits\\hdu\\base.py"", line 1646, in writeto\r\n    checksum=checksum)\r\n  File ""X:\\Python27-x64\\lib\\site-packages\\pyfits\\hdu\\hdulist.py"", line 644, in writeto\r\n    hdu._prewriteto(checksum=checksum)\r\n  File ""X:\\Python27-x64\\lib\\site-packages\\pyfits\\hdu\\table.py"", line 384, in _prewriteto\r\n    self.data._scale_back()\r\n  File ""X:\\Python27-x64\\lib\\site-packages\\pyfits\\fitsrec.py"", line 1015, in _scale_back\r\n    dummy[idx] = val + (pad * (itemsize - len(val)))\r\nValueError: assignment destination is read-only\r\n\r\n```\r\nNot sure this is the right place for this bug report as it was from testing pyfits rather than astropy. Feel free to close or redirect it.'"
2691,37175954,taldcroft,embray,2014-07-04 15:33:28,2014-07-05 19:52:08,2014-07-05 19:52:08,closed,,v0.4.0,8,Bug;coordinates,https://api.github.com/repos/astropy/astropy/issues/2691,b'Make representations sub-classable and demonstrate with Wrap180 test',"b'This should partly address #2690 by making it convenient to subclass representations, and in particular change the `attr_classes` only.  In the currently implementation the `attr_classes` are not actually used in the class but instead are hardwired.\r\n\r\nIt also provides a new test that serves as a demonstration of how to make a new frame and representation to accomplish some specific behavior.\r\n'"
2689,37151096,gijzelaerr,embray,2014-07-04 08:44:30,2015-03-03 16:19:38,2014-07-11 16:43:42,closed,,v0.4.0,16,Bug;config,https://api.github.com/repos/astropy/astropy/issues/2689,b'Problems importing astropy when running inside Ipython Notebook',"b'I cant get astropy to work in a ipython notebook. `import astropy` works correctly in a normal Ipython session under the same UID. I installed astropy 0.3.2 with pip on Ubuntu 14.04 32 bit.\r\n\r\nThe first time I import astropy i get this error:\r\n\r\n```\r\n/usr/local/lib/python2.7/dist-packages/astropy/config/configuration.py:441: ConfigurationMissingWarning: Configuration defaults will be used, and configuration cannot be saved due to OSError:Could not find unix home directory to search for astropy config dir\r\n  warn(ConfigurationMissingWarning(msg))\r\n---------------------------------------------------------------------------\r\nTypeError                                 Traceback (most recent call last)\r\n<ipython-input-1-d192094ef7da> in <module>()\r\n----> 1 import astropy\r\n\r\n/usr/local/lib/python2.7/dist-packages/astropy/__init__.py in <module>()\r\n    244     log = _init_log()\r\n    245 \r\n--> 246     _initialize_astropy()\r\n    247 \r\n    248     from .utils.misc import find_api_page\r\n\r\n/usr/local/lib/python2.7/dist-packages/astropy/__init__.py in _initialize_astropy()\r\n    226 \r\n    227     try:\r\n--> 228         config.configuration.update_default_config(__package__, config_dir)\r\n    229     except config.configuration.ConfigurationDefaultMissingError as e:\r\n    230         wmsg = (e.args[0] + "" Cannot install default profile. If you are ""\r\n\r\n/usr/local/lib/python2.7/dist-packages/astropy/config/configuration.pyc in update_default_config(pkg, default_cfg_dir_or_fn)\r\n    693     cfgfn = get_config(pkg).filename\r\n    694 \r\n--> 695     if path.exists(cfgfn):\r\n    696         with open(cfgfn) as f:\r\n    697             doupdate = f.read() == \'\'\r\n\r\n/usr/lib/python2.7/genericpath.pyc in exists(path)\r\n     16     """"""Test whether a path exists.  Returns False for broken symbolic links""""""\r\n     17     try:\r\n---> 18         os.stat(path)\r\n     19     except os.error:\r\n     20         return False\r\n\r\nTypeError: coercing to Unicode: need string or buffer, NoneType found\r\n```\r\n\r\nAfter that when I try to import astropy I get:\r\n\r\n```\r\nimport astropy\r\n---------------------------------------------------------------------------\r\nImportError                               Traceback (most recent call last)\r\n<ipython-input-13-d192094ef7da> in <module>()\r\n----> 1 import astropy\r\n\r\n/usr/local/lib/python2.7/dist-packages/astropy/__init__.py in <module>()\r\n    244     log = _init_log()\r\n    245 \r\n--> 246     _initialize_astropy()\r\n    247 \r\n    248     from .utils.misc import find_api_page\r\n\r\n/usr/local/lib/python2.7/dist-packages/astropy/__init__.py in _initialize_astropy()\r\n    177 # configuration file with the defaults\r\n    178 def _initialize_astropy():\r\n--> 179     from . import config\r\n    180 \r\n    181     import os\r\n\r\nImportError: cannot import name config\r\n```'"
2686,37088868,mdboom,embray,2014-07-03 14:48:25,2015-03-03 16:19:51,2014-07-03 16:55:17,closed,,v0.4.0,2,Affects-dev;Bug;modeling,https://api.github.com/repos/astropy/astropy/issues/2686,b'Make tests pass on Scipy 0.12.1',b'This makes some tests pass on Scipy 0.12.1 as reported by @sergiopasra in #1802.  This just ignores some deprecation warnings that Scipy (not astropy directly) triggers.'
2685,37087874,hamogu,mdboom,2014-07-03 14:38:26,2015-03-03 16:20:12,2014-07-10 20:31:31,closed,,v0.4.0,12,Affects-dev;Bug;Critical;vo;vo.conesearch,https://api.github.com/repos/astropy/astropy/issues/2685,"b""Bug: votable.conesearch fails with `NameError: global name 'votable' is not defined`""","b'The attempt to do a conesearch fails in the current master with:\r\n```\r\nIPython 2.1.0 -- An enhanced Interactive Python.\r\nAnaconda is brought to you by Continuum Analytics.\r\nPlease check out: http://continuum.io/thanks and https://binstar.org\r\n?         -> Introduction and overview of IPython\'s features.\r\n%quickref -> Quick reference.\r\nhelp      -> Python\'s own help system.\r\nobject?   -> Details about \'object\', use \'object??\' for extra details.\r\nUsing matplotlib backend: Qt4Agg\r\n\r\nIn [1]: from astropy.vo.client import conesearch\r\n\r\nIn [2]: from astropy.coordinates import SkyCoord\r\n\r\nIn [3]: from astropy import units as u \r\n\r\nIn [4]: coord = SkyCoord.from_name(""AA Tau"")\r\n\r\nIn [5]: my_catname = ""2MASS All-Sky Point Source Catalog 1"" \r\n\r\nIn [6]: coord = SkyCoord.from_name(""AA Tau"")\r\n\r\nIn [7]: print ""Coords"", coord.ra, coord.dec \r\nCoords 68d43m51.3599s 24d28m53.1599s\r\n\r\nIn [8]: result = conesearch.conesearch(coord, 0.1 * u.degree, catalog_db=my_catname)\r\nERROR: NameError: global name \'votable\' is not defined [astropy.vo.client.vos_catalog]\r\n---------------------------------------------------------------------------\r\nNameError                                 Traceback (most recent call last)\r\n<ipython-input-8-190720cd16bd> in <module>()\r\n----> 1 result = conesearch.conesearch(coord, 0.1 * u.degree, catalog_db=my_catname)\r\n\r\n/data/guenther/anaconda/lib/python2.7/site-packages/astropy-0.4rc2.dev-py2.7-linux-x86_64.egg/astropy/vo/client/conesearch.pyc in conesearch(center, radius, verb, **kwargs)\r\n    189 \r\n    190     return vos_catalog.call_vo_service(conf.conesearch_dbname,\r\n--> 191                                        kwargs=args, **kwargs)\r\n    192 \r\n    193 \r\n\r\n/data/guenther/anaconda/lib/python2.7/site-packages/astropy-0.4rc2.dev-py2.7-linux-x86_64.egg/astropy/vo/client/vos_catalog.pyc in call_vo_service(service_type, catalog_db, pedantic, verbose, cache, kwargs)\r\n    846 \r\n    847     if pedantic is None:  # pragma: no cover\r\n--> 848         pedantic = votable.conf.pedantic\r\n    849 \r\n    850     for name, catalog in catalogs:\r\n\r\nNameError: global name \'votable\' is not defined\r\n```'"
2684,37085587,mdboom,embray,2014-07-03 14:13:40,2015-03-03 16:20:02,2014-07-03 20:50:07,closed,,v0.4.0,5,Bug;testing,https://api.github.com/repos/astropy/astropy/issues/2684,b'Raise exception when running tests inside IPython.',"b""I believe in the past we've punted on supporting running the tests inside of IPython, since it changes the environment in various ways (such as logging, importing) that have been difficult to support.  Of course, it's not easy for the end user helping us with testing to know that.  This raises an exception if the tests are run inside IPython.  I realize this is a somewhat heavy-handed approach, but it might be a good thing to do for now until tests-in-IPython is working."""
2683,37084205,mdboom,mdboom,2014-07-03 13:59:04,2015-03-03 16:19:56,2014-07-11 18:50:53,closed,mdboom,v0.4.0,13,Affects-dev;Bug;config;Critical;table,https://api.github.com/repos/astropy/astropy/issues/2683,b'Fix how terminal size is handled in table.pprint.',"b'This is an attempted fix for the table.pprint-related test failures reported be @crawfordsm in #1802, which are posted here:\r\n\r\nhttps://gist.github.com/crawfordsm/63c4de317b92d6cd2285\r\n\r\nWhat\'s happening is that `table.pprint` tries to determine the size of the display from the terminal, and only failing that, use the configuration values.  This broke the ability to override the width using a configuration parameter.  This bug has been hidden because normally when running in py.test, the automatic determination of the terminal size fails, since sys.stdout is redirected to a non-tty.  For some unknown reason, I believe it isn\'t failing on @crawfordsm\'s system.\r\n\r\nThe fix is to change the semantics, and add the special value of ""0"" to fall back to the automatic terminal size sensing, otherwise use the value exactly as in the config setting.\r\n\r\n@crawfordsm: Can you confirm this fixes the issue you were seeing?\r\n\r\n@taldcroft: Does this change make sense for astropy.table?'"
2674,36896272,hugobuddel,astrofrog,2014-07-01 14:12:53,2014-11-29 09:26:25,2014-11-26 19:53:07,closed,astrofrog,v0.4.3,20,Affects-release;Bug;vo.samp,https://api.github.com/repos/astropy/astropy/issues/2674,"b'Instantiate SAMPClient in connect(), not __init__() [#2673]'","b""This commit fixes [#2673] that prevents SAMPIntegratedClient instances to reconnect to the SAMP hub after they have been disconnected. This is achieved by instantiating the SAMPClient in `connect()` instead of `__init__()` of SAMPIntegratedClient.\r\n\r\nAlthough it works, it is rather ugly because the parameters for the SAMPClient still have to be set in `__init__()`; it would be cleaner to move all of those to `connect()`. This is not done in order to preserve backwards compatibility. Some of the parameters are in `connect()` already in order to connect the SAMPHubProxy instance. Supposedly the parameters for the HubProxy could be different from the Client, but does that make sense?\r\n\r\nThe code can be made substantially simpler if we don't care about backwards compatibility and disregard different settings for the HubProxy and for the Client. This simplification might be feasible since astropy 0.4 would be the first release to include samp support, so there is no compatibility to break. This would require changes to the documentation, which are not necessary now.\r\n\r\nThis is my first pull request for astropy, so review with care. E.g., the accompanying test uses fixtures, which is not very common in astropy it seems; is this acceptable?\r\n"""
2673,36884399,hugobuddel,embray,2014-07-01 11:39:23,2014-12-02 23:30:34,2014-12-02 23:30:34,closed,,v0.4.3,4,Affects-release;Bug;vo.samp,https://api.github.com/repos/astropy/astropy/issues/2673,b'Allow SAMPIntegratedClient to reconnect.',"b'The SAMPIntegratedClient cannot reconnect to the SAMP hub after disconnecting. For example, on  `astropy-0.4.dev9047-py3.3-linux-x86_64`, this code \r\n```\r\nfrom astropy.vo.samp import SAMPIntegratedClient\r\nmy_client = SAMPIntegratedClient()\r\nmy_client.connect()\r\nmy_client.disconnect()\r\nmy_client.connect()\r\n```\r\nresults in this error message\r\n```\r\nTraceback (most recent call last):\r\n  File ""<stdin>"", line 1, in <module>\r\n  File "".../astropy/vo/samp/integrated_client.py"", line 172, in connect\r\n    self.client.start()\r\n  File "".../astropy/vo/samp/client.py"", line 199, in start\r\n    self._run_client()\r\n  File "".../astropy/vo/samp/client.py"", line 237, in _run_client\r\n    self._thread.start()\r\n  File "".../threading.py"", line 836, in start\r\n    raise RuntimeError(""threads can only be started once"")\r\nRuntimeError: threads can only be started once\r\n```\r\nThis can be prevented in the application by creating a new SAMPIntegratedClient instance each time the application/user decides to (re)connect with SAMP. However, perhaps it would be cleaner to put that logic in the connect function of the SAMPIntegratedClient directly; that is, move the ```self.client = SAMPClient(...)``` from ```__init__()``` to ```connect()```. Or perhaps the ```self.client.stop()``` could be removed from ```disconnect()```.\r\n\r\nAny thoughts about this? Should be trivial to implement a solution once we determine the desired behaviour.'"
2671,36821149,ChrisBeaumont,embray,2014-06-30 17:56:57,2014-08-06 15:59:07,2014-08-06 15:59:05,closed,,v0.4.1,3,Affects-release;Bug;Effort-low;Package-novice,https://api.github.com/repos/astropy/astropy/issues/2671,b'ImportErrors possible within AstropyLogger',"b""This is kind of obscure and might not be worth fixing\r\n\r\nSome people using the Glue mac app (bundled with py2app, see mac.glueviz.org) were running into astropy errors when trying to read files that generate warning messages. I tracked it down to an ImportError being thrown at this line:\r\n\r\nhttps://github.com/astropy/astropy/blob/master/astropy/logger.py#L203\r\n\r\nSeveral email submodules install LazyImporters in sys.modules, that defer actual importing until the first time they are accessed (which happens inside this logger function).\r\n \r\n```python\r\nIn [11]: import sys, email\r\nIn [12]: sys.modules['email.MIMEBase']\r\nOut[12]: <email.LazyImporter at 0x102046650>\r\n```\r\n\r\nBecause of this (and because the email module isn't well-supported on py2app), the LazyImporter raises an ImportError on this line. \r\n\r\nI can workaround the issue on my end, but I thought I'd let you know that ImportErrors are technically possible when calling getattr on sys.modules entries. """
2667,36684380,mdboom,embray,2014-06-27 16:49:51,2015-03-03 16:19:41,2014-06-27 17:49:16,closed,,v0.4.0,2,Affects-dev;Bug;Critical;Docs,https://api.github.com/repos/astropy/astropy/issues/2667,b'Do the Sphinx version check ourselves.',b'The one built in to Sphinx only handles major.minor.'
2666,36620190,mdboom,embray,2014-06-26 22:13:43,2015-03-03 16:19:57,2014-06-27 15:37:21,closed,,v0.4.0,5,Affects-dev;Bug;Critical,https://api.github.com/repos/astropy/astropy/issues/2666,"b'Fix ""\'astropy\' not loaded, cannot perform relative import"" error in test'","b'suite.\r\n\r\nThis fixes an occasional issue we\'ve seen on Travis where one sees:\r\n""\'astropy\' not loaded, cannot perform relative import"".  I was able to\r\nreproduce it consistently, by installing and running the tests with\r\n`python -c ""import astropy; astropy.test()""`.\r\n\r\nThe issue here is that when the `test/test_imports.py:test_imports` test\r\nruns, it ends up importing astropy for a second time (i.e. reloading).\r\nI\'m not sure why, but `astropy` is not in `sys.modules` at that\r\npoint (though many of its submodules are) so it effectively does a\r\nreload.  This reload causes it to try to write the configuration file\r\nagain.  The problem is that we have a `py.test` fixture that creates a\r\nnew temporary directory to store the config file and then deletes it\r\nwhen done on each and every test.  So when astropy is reloaded, it tries\r\nto create a config file in the old temporary directory (used by an\r\nearlier test in the `configuration` subpackage), but now that temporary\r\ndirectory no longer exists (since the location of all loaded\r\nconfiguration files is cached, its location really can not change during\r\nthe life of the interpreter).\r\n\r\nThere are two independent ways to fix this, and I would advocate doing\r\nboth:\r\n\r\n1. Don\'t update the config file if the config file directory doesn\'t\r\n     exist.  (There is already code to create the config directory in\r\n     the ""normal"" case, but it falls down here because the temporary\r\n     config directory gets deleted underneath us).  That is a corner\r\n     case that I don\'t think we have to handle.\r\n\r\n2. Remove the py.test fixture that creates a temporary configuration\r\n     directory with each test.  There is already code to do this for the\r\n     entire test run, and I don\'t see the need to do this more than\r\n     once.  It saves a lot of busy work and system calls if nothing\r\n     else.\r\n\r\nI\'ve tried the tests in as many modes and environments as I can, and this doesn\'t seem to have any negative impact -- in fact the test suite runs about 5% faster.  @eteq: since I think you wrote the test fixture originally, I\'d appreciate your feedback on this.'"
2665,36619681,mdboom,embray,2014-06-26 22:05:44,2015-03-03 16:20:15,2014-06-27 14:03:56,closed,,v0.4.0,1,Bug;wcs,https://api.github.com/repos/astropy/astropy/issues/2665,b'Fix a segfault in `astropy.wcs._wcs`.',"b""At a certain point in our test suite under certain conditions, the interpreter stops being able to allocate even fairly small objects.  I haven't gotten to the bottom of why that is, but this fix at least prevents that case from becoming an out-and-out segfault."""
2664,36517130,mdboom,embray,2014-06-25 20:05:32,2015-03-03 16:19:41,2014-06-26 18:05:59,closed,,v0.4.0,11,Affects-dev;Bug;coordinates;Docs,https://api.github.com/repos/astropy/astropy/issues/2664,b'`setup.py build_sphinx` broken on Sphinx 1.2',"b'f0f9bc7c appears to have broken compatibility with building the docs on Sphinx 1.2, resulting in this error:\r\n\r\n```\r\nTraceback (most recent call last):\r\n  File ""<stdin>"", line 30, in <module>\r\n  File ""/home/mdboom/python/lib/python2.7/site-packages/sphinx/application.py"", line 208, in build\r\n    self.builder.build_all()\r\n  File ""/home/mdboom/python/lib/python2.7/site-packages/sphinx/builders/__init__.py"", line 177, in build_all\r\n    self.build(None, summary=\'all source files\', method=\'all\')\r\n  File ""/home/mdboom/python/lib/python2.7/site-packages/sphinx/builders/__init__.py"", line 234, in build\r\n    purple, length):\r\n  File ""/home/mdboom/python/lib/python2.7/site-packages/sphinx/builders/__init__.py"", line 134, in status_iterator\r\n    for item in iterable:\r\n  File ""/home/mdboom/python/lib/python2.7/site-packages/sphinx/environment.py"", line 470, in update_generator\r\n    self.read_doc(docname, app=app)\r\n  File ""/home/mdboom/python/lib/python2.7/site-packages/sphinx/environment.py"", line 689, in read_doc\r\n    pickle.dump(doctree, f, pickle.HIGHEST_PROTOCOL)\r\ncPickle.PicklingError: Can\'t pickle <class \'astropy.coordinates.baseframe.RepresentationMapping\'>: it\'s not the same object as astropy.coordinates.baseframe.RepresentationMapping\r\n```\r\n\r\nUpgrading to Sphinx 1.2.2 does resolve the error.\r\n\r\nSo, the question is:\r\n\r\n1) Is this a legitmate bug in the pickling of `astropy.coordinates.baseframe.RepresentationMapping` that needs to be fixed?  (I plan to do some further investigation).\r\n\r\n2) Is this a bug in Sphinx 1.2 that it can\'t handle this class (now fixed in 1.2.2), and therefore we just update our minimum version of Sphinx to 1.2.2 and get on with it?\r\n\r\nEither way, I think this is probably a blocker for 0.4...'"
2663,36514077,mdboom,embray,2014-06-25 19:31:03,2015-03-03 16:19:46,2014-06-26 18:06:47,closed,,v0.4.0,3,Bug;io.fits,https://api.github.com/repos/astropy/astropy/issues/2663,b'fits/compression-memory-free',"b'In the process of running valgrind over the test suite to see if it\r\nwould find anything related to the random crashes, I came across this.\r\nIn get_header_string, a header value is retrieved from the Python side,\r\nand a `char *` to the character data is obtained and returned.\r\nUnfortunately, when the Python string that owns that character data\r\nis dereferenced at the end of that function, Python is free to\r\ndeallocate or move that character data around.  When the `char *` is\r\nlater accessed by the calling function, it, in some circumstances, is\r\nno longer valid.\r\n\r\nThe change here is to allocate character buffers on the stack of the\r\ncalling function and copy the character data into that buffer\r\nimmediately, so that Python can deallocate its original character buffer\r\nwith no problems.'"
2661,36478597,hamogu,embray,2014-06-25 13:24:42,2015-03-03 16:19:41,2014-06-26 19:23:02,closed,,v0.4.0,4,Affects-dev;Bug;Docs,https://api.github.com/repos/astropy/astropy/issues/2661,b'Documentation: Edit on github button leads to Error 404',"b'The ""edit on github"" button on the top right of this page throws a 404 error:\r\nhttp://astropy.readthedocs.org/en/latest/api/astropy.io.ascii.Daophot.html#astropy.io.ascii.Daophot'"
2657,36413369,taldcroft,taldcroft,2014-06-24 18:43:25,2014-12-30 18:58:20,2014-12-30 18:58:20,closed,,v1.0.0,3,Bug;Effort-medium;io.ascii;Package-intermediate,https://api.github.com/repos/astropy/astropy/issues/2657,"b""IPAC reader / writer don't round trip null values""","b'Reading in an IPAC table with null values creates a table without the necessary info to round-trip back to the same table on writing.  Furthermore the table that actually gets written is no longer valid IPAC format.\r\n```\r\nIn [27]: more \'astropy/io/ascii/tests/t/ipac.dat\'\r\n\\intval = 1\r\n\\floatval=2.3e3\r\n\\date = ""Wed Sp 20 09:48:36 1995""\r\n\\key_continue = \'IPAC keywords \'\r\n\\key_continue = \'can continue across lines\'\r\n\\ This is an example of a valid comment\r\n|     ra   |    dec   |   sai   |-----v2---|    sptype        |\r\n|    real  |   real   |   int   |    real  |     char         |\r\n|    unit  |   unit   |   unit  |    unit  |     ergs         |\r\n|    null  |   null   |   -999  |    null  |     -999         |\r\n   null      29.09056     -999    2.06000    -999\r\n12345678901234567890123456789012345678901234567890123456789012345\r\n\r\nIn [28]: t = ascii.read(\'astropy/io/ascii/tests/t/ipac.dat\', format=\'ipac\')\r\n\r\nIn [29]: ascii.write(t, format=\'ipac\')\r\n\\ This is an example of a valid comment\r\n\\intval=1\r\n\\floatval=2300.0\r\n\\date=\'Wed Sp 20 09:48:36 1995\'\r\n\\key_continue=\'IPAC keywords can continue across lines\'\r\n|          ra|         dec|      sai|          v2|            sptype|\r\n|      double|      double|     long|      double|              char|\r\n|        unit|        unit|     unit|        unit|              ergs|\r\n|       1e+20|       1e+20|   999999|       1e+20|               N/A|\r\n           --     29.09056        --         2.06                 -- \r\n 2345678901.0 3456789012.0 456789012 4567890123.0 567890123456789012 \r\n```'"
2654,36348980,taldcroft,taldcroft,2014-06-24 02:39:54,2015-06-08 12:48:39,2015-06-08 11:20:46,closed,hamogu,v1.1.0,15,Bug;io.ascii,https://api.github.com/repos/astropy/astropy/issues/2654,b'BaseHeader counts lines with only spaces in header_start processing',"b""`BaseHeader.process_lines()` doesn't throw away lines that have only one or more spaces, while `BaseData.process_lines()` does.  This is inconsistent and super confusing if you have a file that requires specifying `header_start` and `data_start`.\r\n\r\nThe fix is pretty trivial, but I'm worried it constitutes an API change since people may have code that is working in the context of the current inconsistent behavior.  So we should defer this past 0.4 and think a bit about it."""
2649,36244108,astrofrog,mdboom,2014-06-22 13:43:35,2015-01-13 17:35:27,2014-06-22 14:07:21,closed,,v0.4.0,0,Bug;wcs,https://api.github.com/repos/astropy/astropy/issues/2649,b'Fix msvc link error',"b'Replaces https://github.com/astropy/astropy/pull/2478\r\n\r\n@mdboom: can you confirm that this is ok, and merge if so?'"
2645,36108167,embray,astrofrog,2014-06-19 19:08:59,2015-01-13 17:35:27,2014-06-22 13:45:17,closed,,v0.4.0,1,Bug;Critical;io.fits,https://api.github.com/repos/astropy/astropy/issues/2645,b'Fixes spacetelescope/PyFITS#71',"b""This is a fix I merged in from PyFITS (see spacetelescope/PyFITS#71).  I've already tested this on the PyFITS end, so if the tests pass here it should be merged in.  It's a bug that can lead to writing corrupt data which is always bad."""
2638,35917368,eteq,astrofrog,2014-06-17 18:25:36,2015-01-13 17:35:27,2014-06-18 07:38:45,closed,,v0.4.0,2,Affects-dev;Bug;coordinates,https://api.github.com/repos/astropy/astropy/issues/2638,b'fix coordinate frames wheb bool(frame._data) is False',"b""This fixes an odd corner case I encountered: if you have some operation that yields an array of length-0 in a coordinate frame object, the coordinate frame freaks out because it's initialized for the no-data case.  This fixes that and adds a regression test.\r\n\r\ncc @taldcroft @astrofrog"""
2620,35618092,eteq,taldcroft,2014-06-12 20:01:37,2014-06-15 16:11:35,2014-06-15 14:20:40,closed,,v0.4.0,2,Affects-dev;Bug;coordinates,https://api.github.com/repos/astropy/astropy/issues/2620,b'Fix sky coord init nodata',"b""DO NOT MERGE UNTIL #2586 IS IN\r\n\r\nThis closes #2613 by simply adding a check to make sure a `SkyCoord` has data after all the initialization steps are done.\r\n\r\nIt also fixes some quirks I noticed in how exceptions are handled for the case where a frame has no data.  The basic problem was that the `data` property was raising an `AttributeError` that wouldn't be recognized in `__getattr__`.  This sidesteps it by changing the relevant exception to a `ValueError` so that the user will again see a more helpful message that the frame has no data.\r\n\r\nThis is built from #2586 because otherwise there'd be conflicting changes.  So once #2586 is in, I'll rebase and this can be merged.  But in the meantime, just look at the last two commits to see what this actually does.\r\n\r\ncc @taldcroft @cdeil"""
2619,35530730,eteq,eteq,2014-06-11 21:45:52,2015-01-13 17:35:27,2014-06-16 19:41:32,closed,,v0.4.0,7,Bug;coordinates,https://api.github.com/repos/astropy/astropy/issues/2619,b'Fix quirks in rotation_matrix',"b'As discussed in more detail on the astropy list, the  implementation of `rotation_matrix` for arbitrary axes had some rounding and sign convention issues.  This PR fixes that, updates `angle_axis` to be more consistent with it, and adds a few tests of these functions.'"
2613,35403110,cdeil,taldcroft,2014-06-10 17:00:49,2014-06-15 14:20:40,2014-06-15 14:20:40,closed,,v0.4.0,4,Bug;coordinates,https://api.github.com/repos/astropy/astropy/issues/2613,b'ValueError in repr for default SkyCoord',b'I guess this repr for a default SkyCoord is not the intended behaviour?\r\n```python\r\nIn [5]: from astropy.coordinates import SkyCoord\r\n\r\nIn [6]: SkyCoord()\r\nOut[6]: <repr(<astropy.coordinates.sky_coordinate.SkyCoord at 0x1070a1a90>) failed: ValueError: substring not found>\r\n```\r\n\r\ncc @eteq @taldcroft '
2611,35345890,stscieisenhamer,stscieisenhamer,2014-06-10 02:57:09,2014-12-03 16:36:46,2014-12-03 16:12:12,closed,,,5,Bug;Effort-medium;Package-intermediate;table,https://api.github.com/repos/astropy/astropy/issues/2611,b'astropy.table.join cannot handle cells with arrays',"b'### System Info\r\nOS X 10.8.5\r\nPython 2.7.5\r\nAstropy 0.4dev11\r\n\r\n### Issue\r\nUsing astropy.table.join, if either input table to be joined contains a column where the cells contain arrays, the join errors out with a broadcast issue.\r\n\r\n### Example\r\n```\r\nEnvironment setup\r\nIn [1]:\r\n    from astropy.io import fits\r\n    from astropy.table import Table, join\r\n\r\nThe test\r\nIn [2]:\r\n    hdulist = fits.open(\'x6q17587l_phot.fits\')\r\n    hdulist[1].columns\r\n\r\nOut[2]:\r\nColDefs(\r\n    name = \'SEGMENT\'; format = \'4A\'; disp = \'A4\'\r\n    name = \'OPT_ELEM\'; format = \'8A\'; disp = \'A8\'\r\n    name = \'CENWAVE\'; format = \'J\'; unit = \'angstrom\'; null = -32767; disp = \'I5\'\r\n    name = \'APERTURE\'; format = \'4A\'; disp = \'A4\'\r\n    name = \'WAVELENGTH\'; format = \'2730D\'; unit = \'angstrom\'; disp = \'F8.3\'\r\n    name = \'SENSITIVITY\'; format = \'2730D\'; unit = \'(count/s/pixel) / (erg/s/cm**2/angstrom)\'; disp = \'G15.7\'\r\n)\r\n\r\nIn [3]:\r\n    table_a = Table(hdulist[1].data)\r\n    table_b = Table(hdulist[1].data)\r\n    table_a.columns[\'WAVELENGTH\']\r\n\r\nOut[3]:\r\n<Column name=\'WAVELENGTH\' unit=None format=None description=None>\r\narray([[ 1271.8335    ,  1271.8932    ,  1271.953     , ...,\r\n         1434.9304    ,  1434.9902    ,  1435.05      ],\r\n       [ 1119.0623    ,  1119.1221    ,  1119.1818    , ...,\r\n         1282.0955    ,  1282.1552    ,  1282.215     ],\r\n       [ 1282.0294    ,  1282.0891    ,  1282.1489    , ...,\r\n         1445.1263    ,  1445.1862    ,  1445.246     ],\r\n       ..., \r\n       [  891.84440291,   891.90007172,   891.95592258, ...,\r\n         1054.30886576,  1054.36471663,  1054.42038544],\r\n       [ 1094.11275324,  1094.14038409,  1094.2140352 , ...,\r\n         1240.35439935,  1240.42383977,  1240.44972892],\r\n       [  932.16387589,   932.2203623 ,   932.27684871, ...,\r\n         1094.6230632 ,  1094.67954961,  1094.73603602]])\r\n\r\nIn [4]:\r\n    table_a\r\n\r\nOut[4]:\r\nSEGMENT\tOPT_ELEM\t...\tSENSITIVITY [2730]\r\nFUVA\tG130M\t...\t1.6303643689e+12 .. 1.18271495373e+12\r\nFUVB\tG130M\t...\t410939392000.0 .. 1.89817893683e+12\r\n...\t...\t...\t...\r\nFUVA\tG130M\t...\t25600319.7996 .. 12191937599.6\r\nFUVB\tG130M\t...\t811054.263923 .. 3063703.6269\r\n\r\nIn [5]:\r\n    print join(table_a, table_b, \'OPT_ELEM\')\r\n---------------------------------------------------------------------------\r\nValueError                                Traceback (most recent call last)\r\n<ipython-input-5-efba71b24c19> in <module>()\r\n----> 1 print join(table_a, table_b, \'OPT_ELEM\')\r\n\r\n/python/lib/python2.7/site-packages/astropy/table/operations.pyc in join(left, right, keys, join_type, uniq_col_name, table_names, metadata_conflicts)\r\n    147     col_name_map = OrderedDict()\r\n    148     out_data = np_utils.join(left._data, right._data, keys, join_type,\r\n--> 149                              uniq_col_name, table_names, col_name_map)\r\n    150     # Create the output (Table or subclass of Table)\r\n    151     out = Table(out_data)\r\n\r\n/python/lib/python2.7/site-packages/astropy/table/np_utils.pyc in join(left, right, keys, join_type, uniq_col_name, table_names, col_name_map)\r\n    278         else:\r\n    279             raise TableMergeError(\'Unexpected column names (maybe one is """"?)\')\r\n--> 280         out[out_name] = array[name].take(array_out)\r\n    281         if masked:\r\n    282             if isinstance(array, ma.MaskedArray):\r\n\r\nValueError: could not broadcast input array from shape (1568) into shape (1568,2730)\r\n\r\nIn [6]:\r\n    table_a.remove_columns([\'WAVELENGTH\', \'SENSITIVITY\'])\r\n    table_b.remove_columns([\'WAVELENGTH\', \'SENSITIVITY\'])\r\n    print join(table_a, table_b, \'OPT_ELEM\')\r\n\r\nSEGMENT_1 OPT_ELEM CENWAVE_1 APERTURE_1 SEGMENT_2 CENWAVE_2 APERTURE_2\r\n--------- -------- --------- ---------- --------- --------- ----------\r\n     FUVA G130M         1291       PSA       FUVA      1291       PSA \r\n     FUVA G130M         1291       PSA       FUVB      1291       PSA \r\n      ...      ...       ...        ...       ...       ...        ...\r\n     FUVB G160M         1623       PSA       FUVB      1589       PSA \r\n     FUVB G160M         1623       PSA       FUVA      1600       PSA '"
2597,34950492,cdeil,mdboom,2014-06-04 11:30:28,2015-03-03 16:20:18,2014-06-10 22:17:37,closed,mdboom,v0.4.0,8,Affects-dev;Bug,https://api.github.com/repos/astropy/astropy/issues/2597,b'test_wcsapi_extension failure',"b'@mdboom I am getting this test failure from `test_wcsapi_extension` with current Astropy master:\r\n```\r\n___________________________________________________________________ test_wcsapi_extension ____________________________________________________________________\r\n \r\ntmpdir = local(\'/tmp/pytest-7/test_wcsapi_extension0\')\r\n \r\n    def test_wcsapi_extension(tmpdir):\r\n        # Test that we can build a simple C extension with the astropy.wcs C API\r\n    \r\n        setup_path = os.path.dirname(__file__)\r\n        astropy_path = os.path.abspath(\r\n            os.path.join(setup_path, \'..\', \'..\', \'..\', \'..\'))\r\n    \r\n        env = os.environ.copy()\r\n        paths = [str(tmpdir), astropy_path]\r\n        if env.get(\'PYTHONPATH\'):\r\n            paths.append(env.get(\'PYTHONPATH\'))\r\n        env[\'PYTHONPATH\'] = \':\'.join(paths)\r\n    \r\n        # Build the extension\r\n        subprocess.check_call(\r\n            [sys.executable, \'setup.py\',\r\n             \'install\', \'--install-lib={0}\'.format(tmpdir)],\r\n            cwd=setup_path,\r\n>           env=env\r\n        )\r\n \r\nastropy/wcs/tests/extension/test_extension.py:28: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\n \r\npopenargs = ([\'/usr/local/bin/python2.7\', \'setup.py\', \'install\', \'--install-lib=/tmp/pytest-7/test_wcsapi_extension0\'],)\r\nkwargs = {\'cwd\': \'/tmp/astropy-test-majJ6e/lib.linux-x86_64-2.7/astropy/wcs/tests/extension\', \'env\': {\'CLICOLOR\': \'yes\', \'CODE\': \'/home/hfm/deil/code\', \'CVSEDITOR\': \'emacs\', \'CVS_RSH\': \'ssh\', ...}}\r\nretcode = 1, cmd = [\'/usr/local/bin/python2.7\', \'setup.py\', \'install\', \'--install-lib=/tmp/pytest-7/test_wcsapi_extension0\']\r\n \r\n    def check_call(*popenargs, **kwargs):\r\n        """"""Run command with arguments.  Wait for command to complete.  If\r\n        the exit code was zero then return, otherwise raise\r\n        CalledProcessError.  The CalledProcessError object will have the\r\n        return code in the returncode attribute.\r\n    \r\n        The arguments are the same as for the Popen constructor.  Example:\r\n    \r\n        check_call([""ls"", ""-l""])\r\n        """"""\r\n        retcode = call(*popenargs, **kwargs)\r\n        if retcode:\r\n            cmd = kwargs.get(""args"")\r\n            if cmd is None:\r\n                cmd = popenargs[0]\r\n>           raise CalledProcessError(retcode, cmd)\r\nE           CalledProcessError: Command \'[\'/usr/local/bin/python2.7\', u\'setup.py\', u\'install\', u\'--install-lib=/tmp/pytest-7/test_wcsapi_extension0\']\' returned non-zero exit status 1\r\n \r\n/usr/local/Packages/python-modules/lib/python2.7/subprocess.py:542: CalledProcessError\r\n---------------------------------------------------------------------- Captured stdout -----------------------------------------------------------------------\r\nERROR: AttributeError: \'module\' object has no attribute \'get_include\' [__main__]\r\n---------------------------------------------------------------------- Captured stderr -----------------------------------------------------------------------\r\nTraceback (most recent call last):\r\n  File ""setup.py"", line 16, in <module>\r\n    os.path.join(wcs.get_include(), \'astropy_wcs\'),\r\nAttributeError: \'module\' object has no attribute \'get_include\'\r\n```\r\nFull log here: https://gist.github.com/cdeil/a5131cb4ca91397b9103#file-gistfile1-txt-L1534'"
2595,34930467,mcara,embray,2014-06-04 05:11:44,2014-06-06 13:18:25,2014-06-06 13:18:25,closed,embray,v0.4.0,2,Bug;io.fits,https://api.github.com/repos/astropy/astropy/issues/2595,b'Constructor of CompImageHDU crashes with default arguments',"b'Attempt to construct an ""empty"" `CompImageHDU` object using default constructor\'s arguments raises an exception (unlike the `ImageHDU` object for non-compressed FITS files):\r\n```python\r\n>>> from astropy.io import fits\r\n>>> fits.ImageHDU()\r\n<astropy.io.fits.hdu.image.ImageHDU object at 0x109f727d0>\r\n```\r\nThis fails for compressed image HDU (astropy-0.4.dev8950-py2.7-macosx-10.6-x86_64):\r\n```python\r\n>>> from astropy.io import fits\r\n>>> fits.CompImageHDU()\r\nTraceback (innermost last):\r\n  File ""<console>"", line 1, in <module>\r\n  File ""/.../astropy/io/fits/hdu/compressed.py"", line 625, in __init__\r\n    self._update_header_data(header, name, **compression_opts)\r\n  File ""/.../astropy/io/fits/hdu/compressed.py"", line 755, in _update_header_data\r\n    huge_hdu = self.data.nbytes > 2 ** 32\r\nAttributeError: \'NoneType\' object has no attribute \'nbytes\'\r\n'"
2594,34926906,mcara,pllim,2014-06-04 04:00:57,2016-06-03 19:14:07,2016-06-03 19:14:00,closed,embray,v1.2.0,11,Bug;Effort-low;io.fits;Package-expert,https://api.github.com/repos/astropy/astropy/issues/2594,b'Delete of a non-existent CompImageHDU header keyword raises KeyError',"b'When attempting to delete a header keyword that does not exist in the header of a compressed ``HDU``, a `KeyError` is raised. This behavior is different from the behavior of `del` method in a ""regular"" (not compressed) `ImageHDU` which does not raise an exception:\r\n```python\r\n>>> from astropy.io import fits\r\n>>> flt=fits.open(\'ichx03iaq_flt.fits\')\r\n>>> hdu1=fits.ImageHDU(data=flt[1].data,header=flt[1].header)\r\n>>> hdu2=fits.CompImageHDU(data=flt[1].data,header=flt[1].header)\r\n```\r\n**Attempt to delete a non-existent keyword in a compressed `CompImageHDU`:**\r\n```python\r\n>>> del hdu2.header[\'whatever\']\r\nTraceback (innermost last):\r\n  File ""<console>"", line 1, in <module>\r\n  File ""/.../lib/python2.7/.../astropy/io/fits/hdu/compressed.py"", line 159, in __delitem__\r\n    raise KeyError(""Keyword %r not found."" % key)\r\nKeyError: ""Keyword \'whatever\' not found.""\r\n```\r\n**Attempt to delete a non-existent keyword in a regular `ImageHDU`:**\r\n```python\r\n>>> del hdu1.header[\'whatever\']\r\nWARNING: AstropyDeprecationWarning: Deletion of non-existent keyword \'WHATEVER\': \r\nIn a future Astropy version Header.__delitem__ may be changed so that this raises a \r\nKeyError just like a dict would. Please update your code so that KeyErrors are caught \r\nand handled when deleting non-existent keywords. [astropy.io.fits.header]\r\n```\r\n\r\n`CompImageHDU` should be modified to allow delete of non-existent header keywords.'"
2577,34521469,ryancooke,eteq,2014-05-29 01:17:37,2014-07-16 14:49:20,2014-05-30 21:48:22,closed,,,4,Affects-release;Bug;io.votable,https://api.github.com/repos/astropy/astropy/issues/2577,b'Update converters.py',b'I think value is not passed in as a numpy masked array. The mask is a separate argument.'
2568,34378672,mdboom,mdboom,2014-05-27 14:37:39,2015-03-03 16:20:00,2014-06-01 22:21:23,closed,,v0.4.0,2,Affects-release;Bug;testing,https://api.github.com/repos/astropy/astropy/issues/2568,b'Allow testing from a unicode path',"b'As reported in #2564, this fixes the non-Cython part of the problem.'"
2566,34373585,cdeil,astrofrog,2014-05-27 13:47:10,2014-06-18 20:05:03,2014-06-01 06:03:25,closed,,v0.4.0,16,Affects-release;Bug,https://api.github.com/repos/astropy/astropy/issues/2566,b'python setup.py test -n option is broken',"b'`python setup.py test --help` claims that one can use the `-n` option instead of `--parallel`:\r\n```\r\n$ python setup.py test --help\r\n...\r\n  --parallel (-n)         Run the tests in parallel on the specified number of\r\n                          CPUs.  If negative, all the cores on the machine\r\n                          will be used.  Requires the pytest-xdist plugin.\r\n...\r\n```\r\n\r\nBut actually this doesn\'t work with current astropy master:\r\n```\r\n$ python setup.py test -n\r\n...\r\nTraceback (most recent call last):\r\n  File ""<string>"", line 1, in <module>\r\n  File ""astropy/__init__.py"", line 196, in test\r\n    skip_docs=skip_docs)\r\n  File ""astropy/tests/helper.py"", line 231, in run_tests\r\n    ""parallel must be an int, got {0}"".format(parallel))\r\nValueError: parallel must be an int, got \r\n```\r\n```\r\n$ python setup.py test -n 4\r\ninvalid command name \'4\'\r\n```\r\n```\r\n$ python setup.py test -n4\r\nerror: option -4 not recognized\r\n```\r\nAm I using it incorrectly or is this broken.\r\n(I guess the `-n` shortcut could simply be removed?)'"
2561,34320668,eteq,eteq,2014-05-26 17:22:56,2015-02-12 05:07:46,2015-02-12 05:07:46,closed,,v0.4.5,11,astropy-helpers;Bug;Priority-Low,https://api.github.com/repos/astropy/astropy/issues/2561,b'dev version number is wrong if in a non-astropy git directory',"b'I noticed this today while running some of the astropy tutorials.  If I went into python from the tutorials directory, and did ``astropy.__version__``, to my surprise it said ``\'0.4.dev280\'``.  But if I do the same in some other (non-git) directoy, it correctly reported something like ``\'0.4.dev8896\'``\r\n\r\nI think what\'s happening here is that the version package is getting the git dev# from the local directory, thinking that we\'re in astropy... but of course that\'s wrong, because it\'s not actually in the astropy source dir.  The solution is presumably to check somehow if we\'re in the astropy directory, and use the local dev# if so, otherwise fall back on the ""last generated"" scheme.  @embray, does that make sense to you? (I think you wrote the last iteration of the version stuff?)'"
2546,34014919,mdboom,mdboom,2014-05-21 19:18:07,2015-03-03 16:19:53,2014-05-22 14:27:54,closed,,v0.4.0,2,Affects-dev;Bug;Critical,https://api.github.com/repos/astropy/astropy/issues/2546,b'Add ah_bootstrap.py to MANIFEST.in',"b""Still can't build from a source tarball, however, due to other (known) issues."""
2540,33999627,mdboom,eteq,2014-05-21 16:27:41,2015-03-03 16:19:56,2014-05-26 23:35:08,closed,,v0.4.0,8,Affects-dev;Bug,https://api.github.com/repos/astropy/astropy/issues/2540,b'Install config file.',"b'The installation of the config file used to be handled inside of `get_package_info` in these lines:\r\n\r\n```\r\n    # Add the package\'s .cfg file\r\n    package_data[\'\'] = [srcdir + "".cfg""]\r\n```\r\n\r\nwhich appear to have been removed in `astropy-helpers`.  I\'d like to just put it back, but the name of the main source package is no longer passed to `get_package_info`.  So instead, I\'m just handling it on an astropy-specific basis by adding a `setup_package.py` file to the top-level.\r\n\r\nAffiliated packages have the same problem at present, whether they are using the 0.3 generated config file or the 0.4 explicit config file.'"
2537,33967381,sergiopasra,eteq,2014-05-21 09:48:25,2015-01-13 17:35:27,2014-05-26 23:36:29,closed,,v0.4.0,7,Affects-release;Bug;wcs,https://api.github.com/repos/astropy/astropy/issues/2537,b'Install wcs headers when using bundled wcslib only',"b'This fixes the problem in #2536, the wcslib headers are installed from the bundled wcslib library only if we are using it'"
2536,33967213,sergiopasra,eteq,2014-05-21 09:46:19,2014-05-26 23:36:48,2014-05-26 23:36:48,closed,,v0.4.0,1,Bug,https://api.github.com/repos/astropy/astropy/issues/2536,b'Problem using system wcslib library in astropy-0.3.2',"b'In 0.3.1 and previous I could use system wcslib by writing the following in setup.cfg\r\n\r\n[build]\r\nuse_system_wcslib=1\r\n\r\nbut in 0.3.2, setup.py still wants to install some files from the bundled wcslib with this option enabled. the proble is in `astropy/wcs/setup_package.py` around line 309. I will submit a patch to fix the problem.'"
2533,33925441,mdboom,eteq,2014-05-20 20:22:14,2015-03-03 16:19:37,2014-05-21 02:28:15,closed,,v0.4.0,7,Affects-dev;Bug,https://api.github.com/repos/astropy/astropy/issues/2533,b'Add astropy.cfg to MANIFEST.in',"b""Since it's no longer being auto-generated, it doesn't make it into the tarball unless we do this."""
2532,33921192,taldcroft,astrofrog,2014-05-20 19:30:18,2014-06-12 15:01:17,2014-06-07 14:57:04,closed,,v0.4.0,8,Affects-dev;Bug;Docs;installation,https://api.github.com/repos/astropy/astropy/issues/2532,"b'astropy_helpers not found in ""cd docs; make html""'","b'After updating to use astropy-helpers, it is no longer possible to do:\r\n```\r\npython setup.py develop\r\ncd docs\r\nmake html\r\n```\r\nThe result of this is:\r\n```\r\n(astropy)neptune$ make html\r\nsphinx-build -b html -d _build/doctrees   . _build/html\r\nRunning Sphinx v1.1.3\r\n\r\nException occurred:\r\n  File ""/Users/aldcroft/git/astropy/docs/conf.py"", line 33, in <module>\r\n    from astropy_helpers.sphinx.conf import *\r\nImportError: No module named astropy_helpers.sphinx.conf\r\n```\r\nOne patch that fixes this case is inserting the following into `docs/conf.py`:\r\n```\r\nimport sys\r\nimport os\r\nsys.path.append(os.path.join(\'..\', \'astropy_helpers\'))\r\n```\r\n\r\n'"
2531,33920201,mdboom,astrofrog,2014-05-20 19:19:57,2014-05-22 16:37:27,2014-05-21 07:21:36,closed,,v0.4.0,5,Affects-dev;Bug,https://api.github.com/repos/astropy/astropy/issues/2531,b'Astropy rebuilds whole project every time',"b'If you do `python setup.py build` and then `python setup.py build` immediately following, every thing gets rebuilt all over again.\r\n\r\n`git bisect` tells me the first commit with this issue is ae38cc9be5842a1ff2285b089bde7785b814b2c3\r\n\r\n@embray, any thoughts?'"
2521,33863466,astrofrog,astrofrog,2014-05-20 07:14:37,2014-05-22 08:10:34,2014-05-22 08:10:34,closed,,v0.4.0,1,Bug;installation,https://api.github.com/repos/astropy/astropy/issues/2521,b'Error when installing astropy-helpers manually',"b""@embray - I installed astropy-helpers as a normal python package then tried to install astropy, and I get the error:\r\n\r\n```\r\n/Users/tom/usr/bin/clang -fno-strict-aliasing -fno-common -dynamic -pipe -Os -fwrapv -DNDEBUG -g -fwrapv -O3 -Wall -Wstrict-prototypes -I/opt/local/Library/Frameworks/Python.framework/Versions/2.7/include/python2.7 -c ../../Library/Python/2.7/lib/python/site-packages/astropy_helpers-0.4.dev74-py2.7.egg/astropy_helpers/src/compiler.c -o build/temp.macosx-10.8-x86_64-2.7/../../Library/Python/2.7/lib/python/site-packages/astropy_helpers-0.4.dev74-py2.7.egg/astropy_helpers/src/compiler.o\r\nclang: error: no such file or directory: '../../Library/Python/2.7/lib/python/site-packages/astropy_helpers-0.4.dev74-py2.7.egg/astropy_helpers/src/compiler.c'\r\nclang: error: no input files\r\nerror: command '/Users/tom/usr/bin/clang' failed with exit status 1\r\n```"""
2519,33844542,astrofrog,astrofrog,2014-05-19 22:46:08,2014-06-19 08:45:01,2014-05-20 08:10:13,closed,,v0.4.0,4,Affects-dev;Bug;Critical,https://api.github.com/repos/astropy/astropy/issues/2519,b'Update to latest astropy-helpers',b'This update the astropy-helpers submodule to the latest version. I will merge if Travis passes.'
2518,33839406,eteq,eteq,2014-05-19 21:28:39,2015-01-13 17:35:34,2014-06-12 20:06:39,closed,,v0.4.0,2,Bug;testing,https://api.github.com/repos/astropy/astropy/issues/2518,b'Fix doctests test path',"b""While testing for #2512 and #2513 I noticed that the ``docs-path`` option to ``python setup.py test`` is not respected.  This is because it uses a relative path even when the docs build happens in a temporary directory that doesn't include the sphinx source.  So this just locks in the absolute path at the time the test command is triggered, rather then when the tests are actually running (which is in a separate process).\r\n\r\nIt also clarifies the help information for the ``-t`` option, which I realized interacts in a confusing way with the ``docs-path`` descritpion"""
2514,33778720,astrofrog,mdboom,2014-05-19 08:19:02,2015-03-03 16:19:39,2014-05-22 00:00:31,closed,mdboom,v0.4.0,4,Affects-dev;Bug;config;io.ascii;io.registry;table,https://api.github.com/repos/astropy/astropy/issues/2514,b'Error in configuration deprecation warning',"b'If I use a wrong format for ``Table.read``, I get a cryptic exception:\r\n\r\n```\r\nIn [4]: Table.read(\'hhsf14_participants.csv\', format=\'csv\')\r\n---------------------------------------------------------------------------\r\nIndexError                                Traceback (most recent call last)\r\n<ipython-input-4-69343da3d1ca> in <module>()\r\n----> 1 Table.read(\'hhsf14_participants.csv\', format=\'csv\')\r\n\r\n/Users/tom/Library/Python/2.7/lib/python/site-packages/astropy-0.4.dev8784-py2.7-macosx-10.8-x86_64.egg/astropy/table/table.pyc in read(cls, *args, **kwargs)\r\n   1850         passed through to the underlying data reader (e.g. `~astropy.io.ascii.ui.read`).\r\n   1851         """"""\r\n-> 1852         return io_registry.read(cls, *args, **kwargs)\r\n   1853 \r\n   1854     def write(self, *args, **kwargs):\r\n\r\n/Users/tom/Library/Python/2.7/lib/python/site-packages/astropy-0.4.dev8784-py2.7-macosx-10.8-x86_64.egg/astropy/io/registry.pyc in read(cls, *args, **kwargs)\r\n    327                 \'read\', cls, path, fileobj, args, kwargs)\r\n    328 \r\n--> 329         reader = get_reader(format, cls)\r\n    330         data = reader(*args, **kwargs)\r\n    331 \r\n\r\n/Users/tom/Library/Python/2.7/lib/python/site-packages/astropy-0.4.dev8784-py2.7-macosx-10.8-x86_64.egg/astropy/io/registry.pyc in get_reader(data_format, data_class)\r\n    271             return _readers[(reader_format, reader_class)]\r\n    272     else:\r\n--> 273         format_table_str = _get_format_table_str(data_class, \'Read\')\r\n    274         raise Exception(""No reader defined for format \'{0}\' and class \'{1}\'.\\n""\r\n    275                         \'The available formats are:\\n\'\r\n\r\n/Users/tom/Library/Python/2.7/lib/python/site-packages/astropy-0.4.dev8784-py2.7-macosx-10.8-x86_64.egg/astropy/io/registry.pyc in _get_format_table_str(data_class, readwrite)\r\n    260         format_table = format_table[has_readwrite]\r\n    261     format_table.remove_column(\'Data class\')\r\n--> 262     format_table_str = \'\\n\'.join(format_table.pformat(max_lines=-1))\r\n    263     return format_table_str\r\n    264 \r\n\r\n/Users/tom/Library/Python/2.7/lib/python/site-packages/astropy-0.4.dev8784-py2.7-macosx-10.8-x86_64.egg/astropy/table/table.pyc in pformat(self, max_lines, max_width, show_name, show_unit, html, tableid)\r\n    827         lines, n_header = self.formatter._pformat_table(self, max_lines, max_width,\r\n    828                                                         show_name, show_unit, html,\r\n--> 829                                                         tableid=tableid)\r\n    830         return lines\r\n    831 \r\n\r\n/Users/tom/Library/Python/2.7/lib/python/site-packages/astropy-0.4.dev8784-py2.7-macosx-10.8-x86_64.egg/astropy/table/pprint.pyc in _pformat_table(self, table, max_lines, max_width, show_name, show_unit, html, tableid)\r\n    282         # ""Print"" all the values into temporary lists by column for subsequent\r\n    283         # use and to determine the width\r\n--> 284         max_lines, max_width = self._get_pprint_size(max_lines, max_width)\r\n    285         cols = []\r\n    286 \r\n\r\n/Users/tom/Library/Python/2.7/lib/python/site-packages/astropy-0.4.dev8784-py2.7-macosx-10.8-x86_64.egg/astropy/table/pprint.pyc in _get_pprint_size(max_lines, max_width)\r\n     97         """"""\r\n     98         if max_lines is None or max_width is None:\r\n---> 99             lines, width = terminal_size()\r\n    100 \r\n    101         if max_lines is None:\r\n\r\n/Users/tom/Library/Python/2.7/lib/python/site-packages/astropy-0.4.dev8784-py2.7-macosx-10.8-x86_64.egg/astropy/utils/console.pyc in terminal_size(file)\r\n    128         except TypeError:\r\n    129             # fall back on configuration variables\r\n--> 130             return conf.max_lines, conf.max_width\r\n    131 \r\n    132 \r\n\r\n/Users/tom/Library/Python/2.7/lib/python/site-packages/astropy-0.4.dev8784-py2.7-macosx-10.8-x86_64.egg/astropy/config/configuration.pyc in __get__(self, obj, objtype)\r\n    274         if obj is None:\r\n    275             return self\r\n--> 276         return self()\r\n    277 \r\n    278     def set(self, value):\r\n\r\n/Users/tom/Library/Python/2.7/lib/python/site-packages/astropy-0.4.dev8784-py2.7-macosx-10.8-x86_64.egg/astropy/config/configuration.pyc in __call__(self)\r\n    401                     ""is deprecated. Use \'{3}\' in section [{4}] instead."".format(\r\n    402                         name, module, get_config_filename(filename),\r\n--> 403                         self.name, self.module.split(\'.\', 1)[1]),\r\n    404                     AstropyDeprecationWarning)\r\n    405                 options.append((sec[name], module, name))\r\n\r\nIndexError: list index out of range\r\n```'"
2512,33736328,eteq,eteq,2014-05-17 18:15:41,2014-07-18 14:36:52,2014-05-19 20:11:02,closed,,v0.4.0,4,Bug;testing,https://api.github.com/repos/astropy/astropy/issues/2512,b'Coerce pytest args to str to fix assertion error in pytest',"b'This fixes a problem I encountered when running the tests with ``-t`` on an rst file.  E.g., ``python setup.py test -t coordinates/index.rst``  That should run the doctests for just that file, but instead, it yields the cryptic traceback I\'ve included at the bottom of this message.  I traced the cause to a line deep in the bowels of pytest that does ``isinstance(arg, str)``, which fails for unicode arguments.  So this PR  just forces the arguments passed into pytest for setting plugins to be ``str``.  \r\n\r\n```\r\nrunning build_scripts\r\nTraceback (most recent call last):\r\n  File ""<string>"", line 1, in <module>\r\n  File ""astropy/__init__.py"", line 196, in test\r\n    skip_docs=skip_docs)\r\n  File ""astropy/tests/helper.py"", line 259, in run_tests\r\n    result = pytest.main(args=all_args, plugins=plugins)\r\n  File ""_pytest.config"", line 18, in main\r\n  File ""_pytest.config"", line 62, in _prepareconfig\r\n  File ""_pytest.core"", line 376, in __call__\r\n  File ""_pytest.core"", line 387, in _docall\r\n  File ""_pytest.core"", line 288, in execute\r\n  File ""_pytest.helpconfig"", line 25, in pytest_cmdline_parse\r\n  File ""_pytest.core"", line 288, in execute\r\n  File ""_pytest.config"", line 617, in pytest_cmdline_parse\r\n  File ""_pytest.config"", line 710, in parse\r\n  File ""_pytest.config"", line 686, in _preparse\r\n  File ""_pytest.core"", line 185, in consider_preparse\r\n  File ""_pytest.core"", line 195, in consider_pluginarg\r\n  File ""_pytest.core"", line 210, in import_plugin\r\nAssertionError\r\n```'"
2496,33619023,hamogu,mhvk,2014-05-15 19:54:28,2015-03-23 00:41:37,2015-03-23 00:41:37,closed,,v1.0.2,5,Affects-release;Bug;units,https://api.github.com/repos/astropy/astropy/issues/2496,b'Bug: quantities (to vs. set_enabled_equivalencies)',"b'Below, the same comparison is `True` is a I explicetly call `.to(u/km/u.s, equivalencies=l2v)` and `False` is I use the `set_enabled_equivalencies` context manager.\r\n```\r\nIn [1]: import astropy.units as u\r\n\r\nIn [2]: l2v = u.doppler_optical(2800*u.angstrom)\r\n\r\nIn [3]: (3000 * u.Angstrom).to(u.km/u.s, equivalencies=l2v) > (500*u.km/u.s)\r\nOut[3]: array(True, dtype=bool)\r\n\r\nIn [4]: with u.set_enabled_equivalencies(l2v):\r\n           print (3000 * u.Angstrom) > (500*u.km/u.s)\r\n   ...:     \r\nFalse\r\n```'"
2493,33568955,astrofrog,taldcroft,2014-05-15 09:31:34,2014-05-16 11:59:05,2014-05-16 11:59:05,closed,,v0.4.0,1,Affects-dev;Bug;coordinates,https://api.github.com/repos/astropy/astropy/issues/2493,b'Inconsistency in default frame for SkyCoord',"b""When initializing a ``SkyCoord`` without a frame, the repr shows that the frame is assumed to be ICRS:\r\n\r\n```\r\nIn [5]: SkyCoord('14:20:30 +14:30:20', unit=(u.hour,u.deg))\r\nOut[5]: <SkyCoord (ICRS): ra=215.125 deg, dec=14.5055555556 deg>\r\n```\r\n\r\nbut then doing a transformation reveals that the frame is not set:\r\n\r\n```\r\nIn [6]: c = SkyCoord('14:20:30 +14:30:20', unit=(u.hour,u.deg))\r\n\r\nIn [7]: c.transform_to('fk5')\r\n---------------------------------------------------------------------------\r\nValueError                                Traceback (most recent call last)\r\n<ipython-input-7-915f003b7341> in <module>()\r\n----> 1 c.transform_to('fk5')\r\n\r\n/Users/tom/Library/Python/2.7/lib/python/site-packages/astropy-0.4.dev8471-py2.7-macosx-10.8-x86_64.egg/astropy/coordinates/sky_coordinate.pyc in transform_to(self, frame)\r\n    217 \r\n    218         if frame is None or self.frame is None:\r\n--> 219             raise ValueError('Cannot transform coordinates to/from `frame=None`')\r\n    220 \r\n    221         frame_kwargs = {}\r\n\r\nValueError: Cannot transform coordinates to/from `frame=None`\r\n```\r\n\r\nEither the repr should be fixed to say 'frame not set' or something like this, or the frame should really be set to ICRS.\r\n\r\ncc @eteq"""
2486,33529616,eteq,astrofrog,2014-05-14 20:25:56,2014-06-23 21:44:00,2014-05-16 17:54:09,closed,,v0.4.0,11,Bug;table;units,https://api.github.com/repos/astropy/astropy/issues/2486,"b""Quantity initializer on a table doesn't know about units""","b""Apologies if this is a dupe of something, but I don't see something else obviously applicable (#2169 is related but not the same).  The following behavior is strange, and I *think* a bug:\r\n\r\n```\r\n>>> t = table.Table(data=randn(5,2),names=['a','b'])\r\n>>> t['a'].unit = u.Mpc\r\n>>> t['a']*u.dimensionless_unscaled\r\n<Quantity [-0.76422154,-0.76376306, 1.33499563,-0.65637698,-1.05384279] Mpc>\r\n```\r\nOk, that makes sense: it properly recognizes the table has a unit, and correctly converts it to the right kind of quantity.  But the surprise comes here:\r\n```\r\n>>> u.Quantity(t['a'])\r\n<Quantity [-0.76422154,-0.76376306, 1.33499563,-0.65637698,-1.05384279]>\r\n```\r\nThat does *not* pick up the units from the table.  This is very counter-intuitive.  I would have expected this to be the right way to get quantities from tables, absent #1839 .\r\n\r\nThis would be replaced by #1839, presumably, but given that it's now milestoned for 1.0, I think it's important for ``u.Quantity(t['a'])`` to give back the right kind of Quantity in 0.4. \r\n\r\ncc @taldcroft @mhvk"""
2483,33489116,astrofrog,mhvk,2014-05-14 12:57:01,2014-09-13 23:00:07,2014-09-13 23:00:07,closed,mdboom,v0.4.2,16,Bug;coordinates;Critical;units,https://api.github.com/repos/astropy/astropy/issues/2483,b'test failures with numpy-dev: elementwise comparison failed',"b'I\'m seeing the following failure in astropy.coordinates with numpy-dev:\r\n\r\n```\r\ndef test_frame_init():\r\n        """"""\r\n        Different ways of providing the frame.\r\n        """"""\r\n        sc = SkyCoord(RA, DEC, frame=\'icrs\')\r\n        assert sc.frame_name == \'icrs\'\r\n    \r\n        sc = SkyCoord(RA, DEC, frame=ICRS)\r\n        assert sc.frame_name == \'icrs\'\r\n    \r\n        sc = SkyCoord(RA, DEC, \'icrs\')\r\n        assert sc.frame_name == \'icrs\'\r\n    \r\n>       sc = SkyCoord(RA, DEC, ICRS)\r\n\r\nastropy/coordinates/tests/test_sky_coord.py:192: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\n\r\nself = <[RuntimeError(""maximum recursion depth exceeded"") raised in repr()] SafeRepr object at 0x106f706c8>\r\nargs = [<Quantity 1.0 deg>, <Quantity 2.0 deg>, <class \'astropy.coordinates.builtin_frames.ICRS\'>]\r\nkwargs = {}\r\n\r\n    def __init__(self, *args, **kwargs):\r\n    \r\n        # Parse the args and kwargs to assemble a sanitized and validated\r\n        # kwargs dict for initializing attributes for this object and for\r\n        # creating the internal self._sky_coord_frame object\r\n        args = list(args)  # Make it mutable\r\n>       kwargs = self._parse_inputs(args, kwargs)\r\n\r\nastropy/coordinates/sky_coordinate.py:79: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\n\r\nself = <[RuntimeError(""maximum recursion depth exceeded"") raised in repr()] SafeRepr object at 0x106e6eea8>\r\nargs = [<Quantity 1.0 deg>, <Quantity 2.0 deg>, <class \'astropy.coordinates.builtin_frames.ICRS\'>]\r\nkwargs = {}\r\n\r\n    def _parse_inputs(self, args, kwargs):\r\n        """"""\r\n            Assemble a validated and sanitized keyword args dict for instantiating a\r\n            SkyCoord and coordinate object from the provided `args`, and `kwargs`.\r\n            """"""\r\n        valid_kwargs = {}\r\n    \r\n        # Put the SkyCoord attributes like frame, equinox, obstime, location\r\n        # into valid_kwargs dict.  `Frame` could come from args or kwargs, so\r\n        # set valid_kwargs[\'frame\'] accordingly.  The others must be specified\r\n        # by keyword args or else get a None default.  Pop them off of kwargs\r\n        # in the process.\r\n>       frame = valid_kwargs[\'frame\'] = _get_frame_name(args, kwargs)\r\n\r\nastropy/coordinates/sky_coordinate.py:140: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\n\r\nargs = [<Quantity 1.0 deg>, <Quantity 2.0 deg>, <class \'astropy.coordinates.builtin_frames.ICRS\'>]\r\nkwargs = {}\r\n\r\n    def _get_frame_name(args, kwargs):\r\n        """"""\r\n        Determine the coordinate frame from input SkyCoord args and kwargs.  This\r\n        modifies args and/or kwargs in-place to remove the item that provided\r\n        `frame`.  It also infers the frame if an input coordinate was provided and\r\n        checks for conflicts.\r\n    \r\n        This allows for frame to be specified as a string like \'icrs\' or a frame\r\n        class like ICRS, but not an instance ICRS() since the latter could have\r\n        non-default preferred attributes which would require a three-way merge.\r\n        """"""\r\n        frame = kwargs.pop(\'frame\', None)\r\n    \r\n        if frame is not None:\r\n            # Frame was provided as kwarg so validate and coerce into corresponding frame.\r\n            frame_cls = _get_frame_class(frame)\r\n            frame_name = frame_cls.name\r\n        else:\r\n            # Look for the frame in args\r\n            for arg in args:\r\n                try:\r\n                    frame_cls = _get_frame_class(arg)\r\n                except ValueError:\r\n                    pass\r\n                else:\r\n                    frame_name = frame_cls.name\r\n>                   args.remove(arg)\r\nE                   DeprecationWarning: elementwise comparison failed; this will raise the error in the future.\r\n```'"
2482,33483033,olebole,mdboom,2014-05-14 11:22:40,2014-05-27 18:24:33,2014-05-27 16:19:19,closed,,v0.4.0,5,Bug;wcs,https://api.github.com/repos/astropy/astropy/issues/2482,b'test_wcs.py and test_wcsprm.py fail with wcslib-4.23',"b'On 0.3.2, the tests astropy/wcs/tests/test_wcs.py and astropy/wcs/tests/test_wcsprm.py fail\r\n([Build log](https://buildd.debian.org/status/fetch.php?pkg=python-astropy&arch=kfreebsd-amd64&ver=0.3.2-1&stamp=1400065830)):\r\n\r\n```\r\n____________________________ test_to_header_string _____________________________\r\n\r\n    def test_to_header_string():\r\n        header_string = """"""\r\n        WCSAXES =                    2 / Number of coordinate axes                      CRPIX1  =                    0 / Pixel coordinate of reference point            CRPIX2  =                    0 / Pixel coordinate of reference point            CDELT1  =                    1 / Coordinate increment at reference point        CDELT2  =                    1 / Coordinate increment at reference point        CRVAL1  =                    0 / Coordinate value at reference point            CRVAL2  =                    0 / Coordinate value at reference point            LATPOLE =                   90 / [deg] Native latitude of celestial pole        RESTFRQ =                    0 / [Hz] Line rest frequency                       RESTWAV =                    0 / [Hz] Line rest wavelength                      END""""""\r\n    \r\n        w = wcs.WCS()\r\n>       assert w.to_header_string().strip() == header_string.strip()\r\nE       assert \'WCSAXES =   ...le        END\' == u\'WCSAXES =   ...          END\'\r\nE         Detailed information truncated, use ""-vv"" to see\r\nastropy/wcs/tests/test_wcs.py:459: AssertionError\r\n_________________________________ test_velangl _________________________________\r\n\r\n    def test_velangl():\r\n        w = _wcs.Wcsprm()\r\n>       assert w.velangl == 0.0\r\nE       assert nan == 0.0\r\nE        +  where nan =        flag: 137\\n      naxis: 2\\n      crpix: 0xc705e40\\n               0       ...  err: 0x0\\n     spxX2P: 0x0\\n     spxP2S: 0x0\\n     spxS2P: 0x0\\n     spxP2X: 0x0\\n.velangl\r\n\r\nastropy/wcs/tests/test_wcsprm.py:642: AssertionError\r\n```\r\nThe build was done with an external wcslib, version 4.23'"
2477,33424566,eteq,eteq,2014-05-13 18:18:36,2014-06-17 20:05:33,2014-05-14 00:27:11,closed,,v0.4.0,3,Bug;table,https://api.github.com/repos/astropy/astropy/issues/2477,b'Fix numpy integer table access in py 3.x',"b'This fixes what I think is a bug in how `Table.__getitem__` works.  In py 2.x, the following works fine:\r\n```\r\nt = Table(...)\r\nidxs = np.random.randint(len(t), size=2)\r\nt[idxs[0]]\r\n```\r\nBut the exact same code fails in py 3.x with \r\n```\r\nValueError: Illegal type <class \'numpy.int64\'> for table item access``. \r\n```\r\n (I could have just done ``t[np.int64(0)]``, but this is the actual use case I encountered the problem.)  \r\n\r\nThe reason this fails is that  is that indexing an `np.random.randint` yields a ``np.int64`` numpy scalar, and in py 2.x, ``isinstance(np.int64(0), int)`` is True, but in py 3.x, it is **False**.  I\'m not sure why this is different, but the end result is that the `Table.__getitem__` doesn\'t correctly recognize that a numpy integer should be treated as an index.\r\n\r\nThis PR fixes that by checking for both python `int` and `np.int_`.  Note that this *could* be updated by instead checking for ``np.int32`` and `np.int64` (and even ``np.int16`` and ``np.int8`` and the relevant ``uint``s).  Or some other more complicated ""check if a numpy integer type"" might work.  But this solves the most common use case, I think.  \r\n\r\ncc @taldcroft'"
2473,33369231,eteq,mdboom,2014-05-13 05:12:31,2015-09-17 14:46:19,2015-02-19 17:14:30,closed,mdboom,,8,Bug;vo;vo.conesearch,https://api.github.com/repos/astropy/astropy/issues/2473,b'test_conesearch fails ',"b'On the current master (and while working on #2422), when I run the tests for `vo` with ``--remote-data`` on, a bunch of the tests in ``astropy/vo/client/tests/test_conesearch.py`` fail.  See http://bpaste.net/show/272681 for the tracebacks.  A lot of them are ""<urlopen error timed out>"" which is weird because I have no problem accessing the various pages on my web browser.\r\n\r\nIt also indicates that there are x tests thare ""xpassed"", meaning they\'re marked xfail, but are now passing.  Perhaps those should be un-xfailed?\r\n\r\n  I know there were a few different ""remote data tests failing"" issues in the past, but I don\'t *think* this is covered by any of them?\r\n\r\ncc @pllim @mdboom'"
2423,32745864,cdeil,cdeil,2014-05-03 12:18:22,2014-05-05 21:12:33,2014-05-05 21:12:33,closed,,v0.4.0,5,Affects-dev;Bug,https://api.github.com/repos/astropy/astropy/issues/2423,b'Errors on master branch: test_automodapi and Sphinx ScienceState',"b""I'm seeing these `test_automodapi.py` errors on the the `master` branch (on Mac):\r\nhttps://gist.github.com/cdeil/e6404c7c9a31dcc5a29c\r\n\r\nAnd there's a sphinx formatting error in `ScienceState` that breaks the sphinx build on travis-ci:\r\nhttps://travis-ci.org/astropy/astropy/jobs/24305973#L2665\r\n"""
2420,32714976,alexrudy,astrofrog,2014-05-02 18:39:27,2014-07-19 01:12:23,2014-05-20 10:28:31,closed,,v0.4.0,6,Affects-release;Bug;utils,https://api.github.com/repos/astropy/astropy/issues/2420,b'Fix console ``human_time``: Changing xrange to six.range for PY3 compatibility',b'There was one leftover use of ``xrange`` in ``human_time``. This PR changes that to use ``six.range``.'
2417,32705983,mwcraig,astrofrog,2014-05-02 16:36:04,2014-05-19 15:20:24,2014-05-19 08:58:05,closed,,v0.4.0,0,Bug;nddata,https://api.github.com/repos/astropy/astropy/issues/2417,b'NDData without a mask does not play nicely with numpy masked arrays',"b'Root cause: ``numpy.ma.getmask`` asks an object for its ``_mask`` and checks whether it has the special value ``np.ma.nomask``. If yes, it is handled correctly. If no, it multiplies the mask of the numpy masked array by whatever ``_mask`` returns (currently ``None``), then doesn\'t know how to convert ``None`` to a boolean.\r\n\r\nProposed fix soon (will not change what ``NDData.mask`` returns, just changes the internal representation ``NDData._mask`` of the no mask case to ``numpy.ma.nomask``).\r\n\r\nTo reproduce:\r\n```python\r\n>>> from astropy.nddata import NDData\r\n>>> import numpy as np\r\n>>> ndd = NDData([1,2])\r\n>>> ndd * np.ma.masked_array([-1,-1], mask=[1,0])\r\n---------------------------------------------------------------------------\r\nTypeError                                 Traceback (most recent call last)\r\n<ipython-input-4-0b30399d6565> in <module>()\r\n----> 1 ndd * np.ma.masked_array([-1,-1], mask=[1,0])\r\n\r\n/Users/mcraig/anaconda/envs/apy-bug-fix/lib/python2.7/site-packages/numpy/ma/core.pyc in __rmul__(self, other)\r\n   3709     def __rmul__(self, other):\r\n   3710         ""Multiply other by self, and return a new masked array.""\r\n-> 3711         return multiply(self, other)\r\n   3712     #\r\n   3713     def __div__(self, other):\r\n\r\n/Users/mcraig/anaconda/envs/apy-bug-fix/lib/python2.7/site-packages/numpy/ma/core.pyc in __call__(self, a, b, *args, **kwargs)\r\n    942         # Revert result to da where masked\r\n    943         if m.any():\r\n--> 944             np.copyto(result, 0, casting=\'unsafe\', where=m)\r\n    945             # This only makes sense if the operation preserved the dtype\r\n    946             if result.dtype == da.dtype:\r\n\r\nTypeError: Cannot cast array data from dtype(\'O\') to dtype(\'bool\') according to the rule \'safe\'\r\n```'"
2413,32666189,mwcraig,astrofrog,2014-05-02 03:54:52,2014-05-19 15:20:28,2014-05-19 08:58:05,closed,,v0.4.0,0,Bug;nddata,https://api.github.com/repos/astropy/astropy/issues/2413,b'Units are not handled properly in NDData arithmetic for multiplication or division.',"b'There are two separate problems here I think:\r\n\r\n1. The unit of the result is currently always set to the unit of the first operand, which is appropriate for addition/subtraction but not multiply/divide.\r\n2. An error is raised if the units of the operands are not the same; again, appropriate for add/subtract, but not multiply/divide.\r\n\r\nIllustrations:\r\n```python\r\n# 1\r\n>>> from astropy.nddata import NDData\r\n>>> nd1 = NDData([2,2,2], unit=""adu"")\r\n>>> nd2 = NDData([2,2,2], unit=""adu"")\r\n>>> div_result = nd1.divide(nd2)\r\n>>> div_result\r\nNDData([ 1.,  1.,  1.])\r\n>>> div_result.unit\r\nUnit(""adu"")\r\n\r\n# 2 -- admittedly nonsensical unit combination attempted!\r\n>>> nd3 = NDData([2,2,2], unit=""m"")\r\n>>> nd1.divide(nd3)\r\n...\r\nValueError: operand units do not match\r\n```\r\n'"
2410,32643177,mwcraig,astrofrog,2014-05-01 20:03:01,2014-05-19 15:20:15,2014-05-19 08:58:05,closed,,v0.4.0,0,Bug;nddata,https://api.github.com/repos/astropy/astropy/issues/2410,"b'Result of NDData arithmetic contains a reference to the wcs of the operands, not a copy of it'","b'If you do:\r\n```python\r\nop1 = NDData([1], wcs=np.array([1]))\r\nop2 = NDData([1], wcs=np.array([1]))\r\nresult = op1.add(op2)\r\nresult.wcs[0] = 12345\r\n```\r\nthen the ``wcs`` of ``op1`` is also modified (but not that of ``op2``).'"
2409,32640248,mwcraig,astrofrog,2014-05-01 19:22:53,2014-05-19 15:20:11,2014-05-19 08:58:05,closed,,v0.4.0,0,Bug;nddata,https://api.github.com/repos/astropy/astropy/issues/2409,b'flags are not transferred to the new object in NDData.convert_unit_to',"b""e.g.\r\n\r\n```python\r\nd = NDData(np.ones((5, 5)), unit='km')\r\nd.flags = np.zeros_like(d.data)\r\nd1 = d.convert_unit_to('m')\r\nassert d1.flags == d.flags\r\n```\r\n\r\nInstead, ``flags`` is always set to ``None``"""
2406,32637338,mwcraig,astrofrog,2014-05-01 18:46:00,2014-05-19 15:20:08,2014-05-19 08:58:05,closed,,v0.4.0,1,Bug;nddata,https://api.github.com/repos/astropy/astropy/issues/2406,b'Creating a NDData from a NDData object does not initialize properly',"b""To reproduce:\r\n\r\n```python\r\n>>> from astropy.nddata import NDData\r\n>>> ndd1 = NDData([1,2,3])\r\n>>> ndd2 = NDData(ndd1)\r\n>>> ndd2.mask\r\n...\r\nAttributeError: 'NDData' object has no attribute '_mask'\r\n```\r\n"""
2404,32628800,mwcraig,eteq,2014-05-01 16:58:34,2014-05-27 01:34:22,2014-05-27 00:06:52,closed,,v0.4.0,2,Affects-release;Bug;nddata,https://api.github.com/repos/astropy/astropy/issues/2404,b'Fix masking in arithmetic',"b'Address #2403 \r\n\r\nBefore merging, needs:\r\n\r\n- [x] CHANGES.rst entry for appropriate release\r\n- [x] rebase if #2395 is merged first\r\n\r\nThis PR changes the actual behavior of ``NDData._arithmetic`` to match that in its documentation and of numpy masked arrays.'"
2400,32586608,eteq,embray,2014-05-01 00:35:36,2014-06-26 17:16:59,2014-06-26 17:16:59,closed,,v0.4.0,6,Affects-release;Bug;modeling,https://api.github.com/repos/astropy/astropy/issues/2400,b'Fitting with bounds and `NonLinearLSQFitter` broken?',"b""I've noticed some odd behavior on the current master that seems like a bug.\r\n\r\n```\r\nclass MyModel(modeling.Fittable1DModel):\r\n    a = modeling.Parameter(default=1)\r\n    b = modeling.Parameter(default=0)\r\n    @staticmethod\r\n    def eval(x, a, b):\r\n        return a*x + b\r\n\r\nm_real = MyModel(a=1.5, b= -3)\r\nx = np.arange(100)\r\ny = m_real(x)\r\n```\r\n\r\nWith that model defined, I see the following:\r\n```\r\n>>> m = MyModel()\r\n>>> f=modeling.fitting.NonLinearLSQFitter()\r\n>>> f(m,x,y)\r\n<MyModel(a=Parameter('a', value=1.5), b=Parameter('b', value=-3.0), param_dim=1)>\r\n\r\n>>> m2 = MyModel()\r\n>>> m2.a.bounds = (-2,2)  # same if I do e.g. m2.a.bounds = (0, None)\r\n>>> f2=modeling.fitting.NonLinearLSQFitter()\r\n>>> f2(m2,x,y)\r\n<MyModel(a=Parameter('a', value=1.0), b=Parameter('b', value=0.0), param_dim=1)>\r\n```\r\n\r\nThat looks wrong.  It seems like adding the bounds to `m2` has caused it to stop trying to fit.  And indeed, here's what the fitter says:\r\n```\r\n>>>f2.fit_info['message']\r\n'The cosine of the angle between func(x) and any column of the\\n  Jacobian is at most 0.000000 in absolute value'\r\n>>>f2.fit_info['fjac']\r\narray([[-0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,\r\n          0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,\r\n          0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,\r\n          0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,\r\n          0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,\r\n          0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,\r\n          0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,\r\n          0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.],\r\n        [ 0., -0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,\r\n          0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,\r\n          0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,\r\n          0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,\r\n          0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,\r\n          0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,\r\n          0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,\r\n          0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.]])\r\n```\r\n\r\nSo apparently the jacobian is coming out to be all zeros?? Why would setting bounds do this despite the initial value being well inside the bounds?"""
2396,32567093,eteq,eteq,2014-04-30 19:45:36,2014-06-16 22:59:46,2014-04-30 23:19:46,closed,embray,v0.4.0,6,Affects-dev;Bug;modeling,https://api.github.com/repos/astropy/astropy/issues/2396,b'Have Parametric?DModel use Parameter attributes',"b""I noticed some non-intuitive behavior while trying to use `Parametric1DModel` or `Parametric2DModel`, illustrated below:\r\n```\r\nclass MyModel(Parametric1DModel):\r\n    a = Parameter(default=1)\r\n    b = Parameter(default=0, min=0, fixed=True)\r\n\r\n    @staticmethod\r\n    def eval(x, a, b):\r\n        return x*a + b\r\n\r\n>>> m = MyModel()\r\n>>> m.a\r\nParameter('a', value=1.0)\r\n>>> m.b\r\nParameter('b', value=0.0)\r\n>>> print m.b.fixed\r\nFalse\r\n>>> print m.b.min\r\nNone\r\n```\r\n\r\nThe surprise here is the last two lines. The definition of the parameter in the class passes on the default value to an instance of the model, but it does *not* pass on that it's fixed or min/max.  That seems counter-intuitive - is there a reason it has to be so?\r\n\r\ncc @embray @nden"""
2363,32092122,barentsen,embray,2014-04-23 19:34:51,2014-04-30 17:12:41,2014-04-30 17:12:41,closed,embray,v0.3.2,3,Affects-release;Bug;io.fits,https://api.github.com/repos/astropy/astropy/issues/2363,b'fits.CompImageHDU duplicates COMMENT and HISTORY values',"b""I am finding that adding a `COMMENT` or `HISTORY` value to the header of a `fits.CompImageHDU` object leads to a duplicated header entry.\r\n\r\nFor example (using 0.4.dev8179):\r\n```Python\r\nIn [1]: from astropy.io import fits\r\nIn [2]: import numpy as np\r\nIn [3]: myhdu = fits.CompImageHDU(np.array([0], dtype=np.int32))\r\nIn [4]: myhdu.header['COMMENT'] = 'hello world'\r\nIn [5]: myhdu.writeto('/tmp/test.fits', clobber=True)\r\n```\r\n\r\nThe newly created file contains the comment twice:\r\n```Python\r\nIn [7]: fits.open('/tmp/test.fits')[1].header['COMMENT']\r\nOut[7]: \r\nhello world\r\nhello world\r\n```\r\n\r\nThis behaviour is not observed when `fits.ImageHDU` rather than `fits.CompImageHDU` is used."""
2318,31401027,cdeil,embray,2014-04-13 10:30:46,2014-05-29 20:39:23,2014-05-29 20:39:21,closed,,v0.4.0,24,Affects-dev;Bug;testing,https://api.github.com/repos/astropy/astropy/issues/2318,b'IOError from unit tests in disable_internet.py in localhost check',"b'On a Linux Server at work when I run the Astropy unit tests I get\r\n```\r\nargs = ((\'www-cache.mpi-hd.mpg.de\', 3128), 3.0, None), kwargs = {}, host = \'www-cache.mpi-hd.mpg.de\', valid_hosts = (\'localhost\', \'127.0.0.1\'), h = \'127.0.0.1\'\r\n \r\n    def new_function(*args, **kwargs):\r\n        if isinstance(args[0], socket.socket):\r\n            host = args[1][0]\r\n            valid_hosts = (\'localhost\', \'127.0.0.1\', \'::1\')\r\n        else:\r\n            host = args[0][0]\r\n            valid_hosts = (\'localhost\', \'127.0.0.1\')\r\n        if any([h in host for h in valid_hosts]):\r\n            return original_function(*args, **kwargs)\r\n        else:\r\n>           raise IOError(""An attempt was made to connect to the internet ""\r\n                          ""by a test that was not marked `remote_data`."")\r\nE           IOError: An attempt was made to connect to the internet by a test that was not marked `remote_data`.\r\n \r\nastropy/tests/disable_internet.py:28: IOError\r\n```\r\n\r\n\r\nThis occurs in two places:\r\n* `test_localconnect_succeeds` in `astropy/tests/tests/test_socketblocker.py:51`\r\n* `TestWebProfile.test_web_profile` in `astropy/vo/samp/tests/test_web_profile.py:77`\r\n\r\nFull output here: https://gist.github.com/cdeil/10577755\r\n\r\nFor some reason the institute HTTP proxy (`www-cache.mpi-hd.mpg.de`) is passed as `host` on this machine instead of `localhost` or `127.0.0.1`.\r\n\r\n@astrofrog @keflavich What\'s the right fix here? Should I mark the tests as `remote_data` or do I need to set some HTTP configuration or do you want to rewrite the check in `disable_internet.py` somehow?'"
2286,30922346,eteq,eteq,2014-04-05 19:36:56,2015-01-13 17:35:41,2014-04-21 17:05:01,closed,,v0.3.2,8,Bug;units,https://api.github.com/repos/astropy/astropy/issues/2286,b'Angstrom does not render correctly in latex',"b'When I do something like this in the ipython notebook:\r\n```\r\nfrom astropy import units as u\r\n(4000 * u.AA)\r\n```\r\ninstead of seeing the angstrom symbol, I see ``4000\\AA`` in the output. \r\n\r\nI think I understand the source of the problem: ``\\AA``, which generally maps to ``\\r{A}``, is not supported by mathjax, the latex library used by ipython (see ipython/ipython#5533 ).  What I\'m not sure of is the solution... Two possible options come to mind: ``$\\mathring A$`` sort of works, but it leaves space between the ring and the top of the ""A"".  An alternative is the actual unicode symbol:``\\unicode{xC5}``.  That worked for me, but I\'m not sure how font-dependent it is...'"
2283,30916039,astrofrog,astrofrog,2014-04-05 13:47:25,2014-05-03 13:33:14,2014-05-03 13:33:14,closed,,v0.4.0,6,Bug;testing,https://api.github.com/repos/astropy/astropy/issues/2283,b'test pastebin option broken',"b'Due to changes in the pytest plugins (to prevent internet connections) the pastebin option is broken:\r\n\r\n```\r\n$ python setup.py test --pastebin failed\r\n...\r\nTraceback (most recent call last):\r\n  File ""<string>"", line 1, in <module>\r\n  File ""astropy/__init__.py"", line 169, in test\r\n    skip_docs=skip_docs)\r\n  File ""astropy/tests/helper.py"", line 242, in run_tests\r\n    result = pytest.main(args=all_args, plugins=plugins)\r\n  File ""_pytest.config"", line 19, in main\r\n  File ""_pytest.core"", line 376, in __call__\r\n  File ""_pytest.core"", line 387, in _docall\r\n  File ""_pytest.core"", line 288, in execute\r\n  File ""_pytest.main"", line 111, in pytest_cmdline_main\r\n  File ""_pytest.main"", line 104, in wrap_session\r\n  File ""_pytest.core"", line 376, in __call__\r\n  File ""_pytest.core"", line 387, in _docall\r\n  File ""_pytest.core"", line 288, in execute\r\n  File ""_pytest.terminal"", line 338, in pytest_sessionfinish\r\n  File ""_pytest.core"", line 376, in __call__\r\n  File ""_pytest.core"", line 387, in _docall\r\n  File ""_pytest.core"", line 288, in execute\r\n  File ""_pytest.pastebin"", line 65, in pytest_terminal_summary\r\n  File ""/opt/local/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/xmlrpclib.py"", line 1225, in __call__\r\n    return self.__send(self.__name, args)\r\n  File ""/opt/local/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/xmlrpclib.py"", line 1579, in __request\r\n    verbose=self.__verbose\r\n  File ""/opt/local/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/xmlrpclib.py"", line 1265, in request\r\n    return self.single_request(host, handler, request_body, verbose)\r\n  File ""/opt/local/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/xmlrpclib.py"", line 1293, in single_request\r\n    self.send_content(h, request_body)\r\n  File ""/opt/local/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/xmlrpclib.py"", line 1440, in send_content\r\n    connection.endheaders(request_body)\r\n  File ""/opt/local/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/httplib.py"", line 969, in endheaders\r\n    self._send_output(message_body)\r\n  File ""/opt/local/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/httplib.py"", line 829, in _send_output\r\n    self.send(msg)\r\n  File ""/opt/local/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/httplib.py"", line 791, in send\r\n    self.connect()\r\n  File ""/opt/local/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/httplib.py"", line 772, in connect\r\n    self.timeout, self.source_address)\r\n  File ""astropy/tests/disable_internet.py"", line 28, in new_function\r\n    raise IOError(""An attempt was made to connect to the internet ""\r\nIOError: An attempt was made to connect to the internet by a test that was not marked `remote_data`.\r\n```\r\n\r\ncc @keflavich since I think you originally wrote the internet isolation plugin?'"
2281,30915584,astrofrog,taldcroft,2014-04-05 13:35:00,2014-09-30 23:47:56,2014-06-05 00:10:46,closed,,Future,11,Bug;Docs;table;testing;Upstream Fix Required,https://api.github.com/repos/astropy/astropy/issues/2281,b'Issue/failure when testing ``operations.rst``',"b'I\'m running into a strange issue with the testing of the docs in ``table/operations.rst``. If I run the full test suite, I get a failure in that file:\r\n\r\n```\r\n____________________________________________________________________ [doctest] operations.rst _____________________________________________________________________\r\n554 been split into two columns, ``obs_date_1`` and ``obs_date_2``.  The values are taken from\r\n555 the ""left"" (``optical``) and ""right"" (``xray``) tables, respectively.\r\n556 \r\n557 The table joins so far are known as ""inner"" joins and represent the strict intersection of\r\n558 the two tables on the key columns.\r\n559 \r\n560 If one wants to make a new table which has *every* row from the left table and includes\r\n561 matching values from the right table when available, this is known as a left join::\r\n562 \r\n563   >>> print join(optical, xray, join_type=\'left\')\r\nUNEXPECTED EXCEPTION: UnicodeDecodeError(\'ascii\', \'M31\\x00\\x08\\xf9\\x07\', 5, 6, \'ordinal not in range(128)\')\r\nTraceback (most recent call last):\r\n\r\n  File ""/opt/local/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/doctest.py"", line 1289, in __run\r\n    compileflags, 1) in test.globs\r\n\r\n  File ""<doctest operations.rst[57]>"", line 1, in <module>\r\n\r\n  File ""astropy/table/table.py"", line 624, in __bytes__\r\n    return six.text_type(self).encode(\'utf-8\')\r\n\r\n  File ""astropy/table/table.py"", line 618, in __unicode__\r\n    lines, n_header = _pformat_table(self)\r\n\r\n  File ""astropy/table/pprint.py"", line 312, in _pformat_table\r\n    show_unit)\r\n\r\n  File ""astropy/table/pprint.py"", line 164, in _pformat_col\r\n    col_strs = list(_pformat_col_iter(col, max_lines, show_name, show_unit, outs))\r\n\r\n  File ""astropy/table/pprint.py"", line 255, in _pformat_col_iter\r\n    col_str = format_func(col.format, col[i])\r\n\r\n  File ""astropy/table/pprint.py"", line 28, in <lambda>\r\n    _format_funcs = {None: lambda format_, val: text_type(val)}\r\n\r\nUnicodeDecodeError: \'ascii\' codec can\'t decode byte 0xf9 in position 5: ordinal not in range(128)\r\n\r\n/Users/tom/Dropbox/Code/development/Astropy/astropy/docs/table/operations.rst:563: UnexpectedException\r\n```\r\n\r\nIf however I run `` python setup.py test -t table/operations.rst``, I get:\r\n\r\n```\r\n102 - Numpy homogeneous array with same length as table\r\n103 \r\n104 In all cases the corresponding row elements are considered as a tuple of values which\r\n105 form a key value that is used to sort the original table and generate\r\n106 the required groups.\r\n107 \r\n108 As an example, to get the average magnitudes for each object on each observing\r\n109 night, we would first group the table on both ``name`` and ``obs_date`` as follows::\r\n110 \r\n111   >>> print obs.group_by([\'name\', \'obs_date\']).groups.keys\r\nDifferences (unified diff with -expected +actual):\r\n    @@ -1,3 +1,3 @@\r\n    -name  obs_date\r\n    +name  obs_date\r\n     ---- ----------\r\n     M101 2012-01-02\r\n\r\n/Users/tom/Dropbox/Code/development/Astropy/astropy/docs/table/operations.rst:111: DocTestFailure\r\n```\r\n\r\nIt seems the last failure is due to a missing whitespace after ``obs_date``. Maybe doctests shouldn\'t be sensitive to trailing whitespace? If I fix that, there are other failures.\r\n\r\nThis is with:\r\n\r\n```\r\nFull Python Version: \r\n2.7.6 (default, Nov 12 2013, 13:26:39) \r\n[GCC 4.2.1 Compatible Apple Clang 4.1 ((tags/Apple/clang-421.11.66))]\r\n\r\nencodings: sys: ascii, locale: UTF-8, filesystem: utf-8, unicode bits: 15\r\nbyteorder: little\r\nfloat info: dig: 15, mant_dig: 15\r\n\r\nNumpy: 1.9.0.dev-a0794f6\r\nScipy: 0.13.3\r\nMatplotlib: 1.4.x\r\nh5py: 2.2.1\r\n```\r\n\r\n(note Numpy dev version)'"
2251,30361306,mhvk,mdboom,2014-03-28 03:41:13,2015-01-13 17:35:41,2014-04-04 15:25:56,closed,,v0.3.2,9,Bug;units,https://api.github.com/repos/astropy/astropy/issues/2251,"b'Implement Quantity.flat, so that it always returns Quantity'","b""Currently, `q.flat` does not work: if iterating over it, or getting a single item, it returns a float:\r\n```\r\nimport astropy.units as u\r\nq = u.Quantity([1., 2., 3.], 'm')\r\nq.flat[:2]\r\n# <Quantity [ 1., 2.] m>  --> this is fine\r\nq.flat[0]\r\n# 1.0  --> this is not\r\nfor _q in q.flat: print(_q)\r\n# 1.0\r\n# 2.0\r\n# 3.0  --> not good either\r\n```\r\nAs `.flat` is used extensively in `MaskedArray`, this is needed eventually...\r\n\r\nThis PR fixes this by constructing a `QuantityIterator` class, which is used when the `flat` property is accessed. This procedure is inspired by that used in `MaskedArray`; if anybody has an idea how better to do this, most welcome..."""
2250,30356030,mhvk,astrofrog,2014-03-28 00:57:47,2014-09-26 16:40:01,2014-03-29 13:31:01,closed,,v0.3.2,3,Bug;coordinates,https://api.github.com/repos/astropy/astropy/issues/2250,b'Corrections to ensure Distance can be compared.  Closes #2206',"b'This is an alternative solution to #2207, allowing `Distances` to be compared (and, e.g., `Distance(15.*u.kpc)**2` to return a `Quantity`). Adds test cases for the comparison.'"
2235,30133428,ChrisBeaumont,embray,2014-03-25 15:27:35,2014-06-26 17:17:15,2014-06-26 17:17:10,closed,embray,v0.4.0,9,Bug;modeling,https://api.github.com/repos/astropy/astropy/issues/2235,b'Fixing a model parameter can violate bounds restrictions on another',"b""Notice that the boundary constraints on mean are violated here\r\n\r\n```python\r\nfrom astropy import __version__\r\nfrom astropy.modeling import models, fitting\r\nimport numpy as np\r\n\r\nprint __version__\r\n\r\nm = models.Gaussian1D(amplitude=3, mean=4, stddev=1, \r\n                      bounds={'mean': [4, 5]}, \r\n                      fixed={'amplitude': True})\r\nx = np.linspace(0, 10, 10)\r\ny = np.exp(-x ** 2 / 2)\r\n\r\nf = fitting.NonLinearLSQFitter()\r\nprint f(m, x, y)\r\n```\r\n\r\n```\r\n0.4.dev6909\r\nModel: Gaussian1D\r\nn_inputs:   1\r\nDegree: N/A\r\nParameter sets: 1\r\nParameters: \r\n           amplitude: Parameter('amplitude', value=3.0)\r\n           mean: Parameter('mean', value=3.8251208412576392)\r\n           stddev: Parameter('stddev', value=0.1348079843293544)\r\n```\r\n\r\nThis goes away if the fixed constraint on amplitude is removed\r\n```python\r\nm.amplitude.fixed = False\r\nprint f(m, x, y)\r\n```\r\n\r\n```\r\nModel: Gaussian1D\r\nn_inputs:   1\r\nDegree: N/A\r\nParameter sets: 1\r\nParameters: \r\n           amplitude: Parameter('amplitude', value=3.0)\r\n           mean: Parameter('mean', value=4.0)\r\n           stddev: Parameter('stddev', value=1.0)\r\n```"""
2234,30119684,astrofrog,taldcroft,2014-03-25 12:45:58,2014-06-22 07:36:35,2014-03-27 15:28:27,closed,,v0.3.2,18,Bug;io.ascii,https://api.github.com/repos/astropy/astropy/issues/2234,"b'In io.ascii, fall back to string if integers are too large'","b'If I try and read the following file:\r\n\r\n```\r\na                             b\r\n12121312311248721894712984728 1122\r\n```\r\n\r\nusing ``Table``, I get:\r\n\r\n```\r\nIn [5]: t = Table.read(\'data\', format=\'ascii\')\r\nERROR: OverflowError: Python int too large to convert to C long [astropy.io.ascii.core]\r\n---------------------------------------------------------------------------\r\nOverflowError                             Traceback (most recent call last)\r\n<ipython-input-5-bcb96ef3f221> in <module>()\r\n----> 1 t = Table.read(\'data\', format=\'ascii\')\r\n\r\n/Volumes/Raptor/Library/Python/3.3/lib/python/site-packages/astropy-0.4.dev7437-py3.3-macosx-10.8-x86_64.egg/astropy/table/table.py in read(cls, *args, **kwargs)\r\n   1725         passed through to the underlying data reader (e.g. `~astropy.io.ascii.ui.read`).\r\n   1726         """"""\r\n-> 1727         return io_registry.read(cls, *args, **kwargs)\r\n   1728 \r\n   1729     def write(self, *args, **kwargs):\r\n\r\n/Volumes/Raptor/Library/Python/3.3/lib/python/site-packages/astropy-0.4.dev7437-py3.3-macosx-10.8-x86_64.egg/astropy/io/registry.py in read(cls, *args, **kwargs)\r\n    317 \r\n    318         reader = get_reader(format, cls)\r\n--> 319         table = reader(*args, **kwargs)\r\n    320 \r\n    321         if not isinstance(table, cls):\r\n\r\n/Volumes/Raptor/Library/Python/3.3/lib/python/site-packages/astropy-0.4.dev7437-py3.3-macosx-10.8-x86_64.egg/astropy/io/ascii/connect.py in read_asciitable(filename, **kwargs)\r\n     19 def read_asciitable(filename, **kwargs):\r\n     20     from .ui import read\r\n---> 21     return read(filename, **kwargs)\r\n     22 \r\n     23 io_registry.register_reader(\'ascii\', Table, read_asciitable)\r\n\r\n/Volumes/Raptor/Library/Python/3.3/lib/python/site-packages/astropy-0.4.dev7437-py3.3-macosx-10.8-x86_64.egg/astropy/io/ascii/ui.py in read(table, guess, **kwargs)\r\n    154         guess = _GUESS\r\n    155     if guess:\r\n--> 156         dat = _guess(table, new_kwargs)\r\n    157     else:\r\n    158         reader = get_reader(**new_kwargs)\r\n\r\n/Volumes/Raptor/Library/Python/3.3/lib/python/site-packages/astropy-0.4.dev7437-py3.3-macosx-10.8-x86_64.egg/astropy/io/ascii/ui.py in _guess(table, read_kwargs)\r\n    196 \r\n    197             reader = get_reader(**guess_kwargs)\r\n--> 198             dat = reader.read(table)\r\n    199 \r\n    200             # When guessing require at least two columns\r\n\r\n/Volumes/Raptor/Library/Python/3.3/lib/python/site-packages/astropy-0.4.dev7437-py3.3-macosx-10.8-x86_64.egg/astropy/io/ascii/core.py in read(self, table)\r\n    851 \r\n    852         self.data.masks(cols)\r\n--> 853         table = self.outputter(cols, self.meta)\r\n    854         self.cols = self.header.cols\r\n    855 \r\n\r\n/Volumes/Raptor/Library/Python/3.3/lib/python/site-packages/astropy-0.4.dev7437-py3.3-macosx-10.8-x86_64.egg/astropy/io/ascii/core.py in __call__(self, cols, meta)\r\n    649 \r\n    650     def __call__(self, cols, meta):\r\n--> 651         self._convert_vals(cols)\r\n    652 \r\n    653         # If there are any values that were filled and tagged with a mask bit then this\r\n\r\n/Volumes/Raptor/Library/Python/3.3/lib/python/site-packages/astropy-0.4.dev7437-py3.3-macosx-10.8-x86_64.egg/astropy/io/ascii/core.py in _convert_vals(self, cols)\r\n    631                     if not issubclass(converter_type, col.type):\r\n    632                         raise TypeError()\r\n--> 633                     col.data = converter_func(col.str_vals)\r\n    634                     col.type = converter_type\r\n    635                 except (TypeError, ValueError):\r\n\r\n/Volumes/Raptor/Library/Python/3.3/lib/python/site-packages/astropy-0.4.dev7437-py3.3-macosx-10.8-x86_64.egg/astropy/io/ascii/core.py in converter(vals)\r\n    590 \r\n    591     def converter(vals):\r\n--> 592         return numpy.array(vals, numpy_type)\r\n    593     return converter, converter_type\r\n    594 \r\n\r\nOverflowError: Python int too large to convert to C long\r\n```\r\n\r\nMaybe when the integers are too large, strings should be used instead? This is a simplified version from the issue described in http://stackoverflow.com/questions/22617428/overflowerror-python-int-too-large-to-convert-to-c-long-with-astropy-table.'"
2226,29989537,astrofrog,embray,2014-03-23 15:33:51,2014-09-24 17:14:07,2014-03-24 16:01:58,closed,,,1,Bug,https://api.github.com/repos/astropy/astropy/issues/2226,b'booleans do not roundtrip in Table.read/write with FITS format',"b""```\r\nIn [1]: from astropy.table import Table\r\n\r\nIn [2]: t = Table()\r\n\r\nIn [3]: t['logical'] = [True, False, False, True]\r\n\r\nIn [4]: t.write('test.fits')\r\n\r\nIn [5]: t2 = Table.read('test.fits')\r\n\r\nIn [6]: t2['logical']\r\nOut[6]: \r\n<Column name='logical' unit=None format=None description=None>\r\narray([False, False, False, False], dtype=bool)\r\n```"""
2223,29974426,gracca,embray,2014-03-22 22:40:10,2014-06-17 19:51:18,2014-03-25 18:55:32,closed,embray,v0.3.2,12,Affects-release;Bug;installation,https://api.github.com/repos/astropy/astropy/issues/2223,b'python module not installed',"b""I'm a Fedora packager, and while updating my python package APLpy (which depends on Astropy) I faced the following issue. As per Fedora packaging guidelines, we should use:\r\n\r\n```bash\r\n%build\r\n%{__python2} setup.py build\r\n\r\n%install\r\n%{__python2} setup.py install -O1 --skip-build --root %{buildroot}\r\n```\r\n\r\nBut with this new version of APLpy, the module doesn't get copied if `--skip-build` is present (it only copies the egg):\r\n\r\n```bash\r\nrunning install\r\nrunning install_lib\r\nwarning: install_lib: 'build/lib' does not exist -- no Python modules to install\r\n...\r\n```\r\n\r\nI have asked for help to the Fedora packaging mailing list, and a more experienced guy (Toshio) proposed a patch for Astropy to workaround this issue, but I think it is more appropiate to report here and get the changes merged upstream.\r\n\r\nThis is the link to the post in the list, so you can follow the discussion and see the patch sent by Toshio:\r\nhttps://lists.fedoraproject.org/pipermail/packaging/2014-March/010087.html"""
2218,29872977,taldcroft,astrofrog,2014-03-21 01:30:07,2014-03-25 09:01:07,2014-03-25 09:01:07,closed,,v0.3.2,1,Bug;io.ascii,https://api.github.com/repos/astropy/astropy/issues/2218,"b""CDS reader doesn't handle multiple description lines in ReadMe""","b'As reported by Sergio on astropy mailing list:\r\n\r\nHi, I\'m having problems reading the catalog in http://cdsarc.u-strasbg.fr/viz-bin/Cat?J/PASP/110/863 (file J_PASP_110_863.tar.gz)\r\n\r\nThe files inside are compressed, so I uncompress them before.\r\n\r\nI create a reader object,  (I\'m using astropy 0.3, BTW)\r\n\r\nreadme = \'ReadMe\'\r\n\r\nr = ascii.get_reader(ascii.Cds, readme=readme)\r\n\r\nThis reader works only for some specta. For example, m2v and goi works, but the star \'o9v\' doesn\'t work. Inserting this last star generates the following exception\r\n```\r\n>>> r.read(\'o9v.dat\')\r\n\r\n/usr/lib64/python2.7/site-packages/astropy/io/ascii/core.pyc in read(self, table)\r\n    831 \r\n    832         # Get the table column definitions\r\n--> 833         self.header.get_cols(self.lines)\r\n    834 \r\n    835         cols = self.header.cols\r\n\r\n/usr/lib64/python2.7/site-packages/astropy/io/ascii/cds.pyc in get_cols(self, lines)\r\n    164                     cols[-1].description += line.strip()\r\n    165                 else:\r\n--> 166                     raise ValueError(\'Line ""%s"" not parsable as CDS header\' % line)\r\n    167 \r\n    168         self.names = [x.name for x in cols]\r\n\r\nValueError: Line ""Bytes    Format  Units   Label   Explanations"" not parsable as CDS header\r\n```\r\n\r\nThe problem is here with multiple lines of the file descriptions:\r\n\r\n```\r\nByte-by-byte Description of file: o9v.dat, b57v.dat, a2v.dat\r\nByte-by-byte Description of file: b12iii.dat, b3iii.dat, b5iii.dat, b9iii.dat\r\nByte-by-byte Description of file: a0iii.dat, b0i.dat, b5i.dat, b8i.dat\r\n--------------------------------------------------------------------------------\r\n   Bytes    Format  Units   Label   Explanations\r\n--------------------------------------------------------------------------------\r\n   1-  7     F7.1   0.1nm  lambda   wavelength (in Angstroms)\r\n   8- 17    F10.6    ---   nflam    component-averaged f(lambda)/f(5556 A)\r\n  19- 27     F9.6    ---   sdnflam  std. dev. of avg. at this wavelength\r\n  28- 37    F10.6    ---   fi       f(lambda)/f(5556 A) from Cat. <III/83>\r\n  39- 47     F9.6    ---   fg       f(lambda)/f(5556 A) from Cat. <III/88>\r\n  49- 57     F9.6    ---   fj       f(lambda)/f(5556 A) from Cat. <III/92>\r\n  59- 67     F9.6    ---   fd       f(lambda)/f(5556 A) from 1994PASP..106..382D\r\n--------------------------------------------------------------------------------\r\n```\r\n\r\nI believe [this line](https://github.com/astropy/astropy/blob/6d83b3d7c9689fa1be1984f4d1b04d96b8dcad43/astropy/io/ascii/cds.py#L109) in `cds.py` is assuming just one description line.'"
2213,29704470,mhvk,mhvk,2014-03-19 03:21:50,2014-07-15 18:41:13,2014-03-20 18:58:12,closed,,v0.3.2,8,Affects-release;Bug;table,https://api.github.com/repos/astropy/astropy/issues/2213,b'Column with no name cannot be printed',"b""@taldcroft - Currently, printing a `Column` with its name not set gives a `TypeError`:\r\n```\r\nfrom astropy.table import Column\r\nprint(Column([1.,2.]))\r\nERROR: TypeError: object of type 'NoneType' has no len() [astropy.table.pprint] \r\n```\r\nThis can be fixed quite easily in `pprint.py`, in `_pformat_col_iter`, by setting the heading for the column to `''` or a space or so when `name is None`. But before I do so, I thought I would first check that this would be the idea."""
2206,29568570,adrn,mhvk,2014-03-17 15:14:50,2014-03-29 13:31:01,2014-03-29 13:31:01,closed,,v0.3.2,0,Bug;Effort-low,https://api.github.com/repos/astropy/astropy/issues/2206,b'Comparing Distance objects fails (0.3.1)',"b'E.g.,\r\n    \r\n    import astropy.coordinates as coord\r\n    a = coord.Distance(15*u.kpc)\r\n    b = coord.Distance(15*u.kpc)\r\n    a == b\r\n\r\nthrows\r\n\r\n    TypeError: None is not a valid Unit'"
2197,29450947,QuanTakeuchi,mhvk,2014-03-14 16:53:22,2015-01-13 17:35:50,2014-03-18 17:54:44,closed,,v0.3.2,10,Bug;coordinates,https://api.github.com/repos/astropy/astropy/issues/2197,b'Issue with formatting coordinates with colons #2183',b'Fixed the ugly appearance of colon when fields is specified to 2'
2177,29000432,embray,embray,2014-03-07 21:34:08,2014-07-22 13:00:36,2014-05-05 20:53:00,closed,embray,v0.3.2,10,Affects-release;Bug;modeling,https://api.github.com/repos/astropy/astropy/issues/2177,b'Fix basic SIP model functionality',"b""Fixes the `_SIP1D` class by making it subclass `PolynomialBase` and bringing it closer in implementation to other `PolynomialBase` subclasses.  Really it would be best if this subclassed `Polynomial2D`, but that will require a little refactoring of how the polynomial models work.  For one, it would be nice to easily customize the parameter name format.  There's a lot of other boilerplate and repetition that I think could be whittled down.  But that will be an issue for another PR.\r\n\r\nI would still like to add some tests before merging this--at the very least there should be a test to evaluate a simple SIP model that can be easily checked for correctness."""
2175,28968332,bogdanni,embray,2014-03-07 14:20:06,2014-03-07 15:47:17,2014-03-07 15:43:14,closed,,v0.3.2,2,Affects-release;Bug;io.fits,https://api.github.com/repos/astropy/astropy/issues/2175,"b""Use of deprecated 'key' member in error message""","b'When parsing invalid card, the error itself raises an error due to use of deprecated self.key.'"
2174,28960138,cdeil,embray,2014-03-07 11:52:42,2014-12-02 22:57:56,2014-12-02 22:57:56,closed,,v0.4.1,4,Bug;convolution,https://api.github.com/repos/astropy/astropy/issues/2174,b'Convolution kernel multiplication behaviour with numpy float scalars',"b""Multiplying kernels with Python floats results in scaled kernel objects.\r\nBut multiplication of kernels with a scalar numpy floats results in an `ndarray` objects.\r\n```python\r\n>>> import numpy as np\r\n>>> from astropy.convolution import Gaussian2DKernel\r\n>>> psf = np.float64(42) * Gaussian2DKernel(3)\r\n>>> print(type(psf))\r\n<type 'numpy.ndarray'>\r\n>>> psf = 42 * Gaussian2DKernel(3)\r\n>>> print(type(psf))\r\n<class 'astropy.convolution.kernels.Gaussian2DKernel'>\r\n```\r\nI think this behaviour is confusing (took me 15 minutes to pin down and understand in my script) and should be changed so that numpy scalar float times kernel is again a kernel.\r\n\r\ncc @astrofrog @adonath Do you agree? Can you fix this?"""
2170,28823428,rastogitanuj,astrofrog,2014-03-05 20:35:55,2014-05-19 15:20:18,2014-05-19 08:58:05,closed,,v0.4.0,3,Bug;nddata,https://api.github.com/repos/astropy/astropy/issues/2170,b'__getitem__ method in NDData class gives an error with mask or flags attributes set',"b'I was going through the issue #1452 which mentioned the ```__getitem__``` method in ```NDData``` class. While experimenting with the ```__getitem__``` method, I found that calling this method after setting the ```mask``` or ```flags``` attribute raises an error even though the code handling these cases is implemented. \r\n```\r\n>>> from astropy.nddata import NDData as nd\r\n>>> import numpy as np\r\n>>> a = nd([2.3,4.5,6.7])\r\n>>> a.mask = np.array([True,True,True])\r\n>>> a[0]\r\nTraceback (most recent call last):\r\n  File ""<stdin>"", line 1, in <module>\r\n  File ""/home/tanuj/git repositories/astropy/astropy/nddata/nddata.py"", line 312, in __getitem__\r\n    meta=self.meta, unit=self.unit)\r\n  File ""/home/tanuj/git repositories/astropy/astropy/nddata/nddata.py"", line 161, in __init__\r\n    self.mask = mask\r\n  File ""/home/tanuj/git repositories/astropy/astropy/nddata/nddata.py"", line 193, in mask\r\n    raise TypeError(""mask must be a Numpy array"")\r\nTypeError: mask must be a Numpy array\r\n```\r\nA similar error is raised if we set the flag attribute too (```TypeError: flags should be a Numpy array or a FlagCollection instance```).\r\n\r\nI found the following reason for these errors:\r\n```__getitem__``` checks the mask in this way:\r\n```\r\n       if self.mask is not None:\r\n            new_mask = self.mask[item]\r\n        else:\r\n            new_mask = None\r\n```\r\nNow, ```new_mask``` would be a ```numpy.bool_``` dtype.\r\nBut in the end ```__getitem__``` returns an object of class NDData:\r\n```\r\nreturn self.__class__(new_data, uncertainty=new_uncertainty,\r\n                              mask=new_mask, flags=new_flags, wcs=new_wcs,\r\n                              meta=self.meta, unit=self.unit)\r\n```\r\nThis calls the ```__init__``` method for the new object which requires the mask to be ```numpy.ndarray``` but finds it be of ```numpy.bool_``` dtype so, it raises an error.\r\nSame reasoning goes for ```flags```.\r\n\r\nHaving said this, I am aware that astropy.nddata module is still under development/discussion stage and this might be a known issue or there by design for some future modification so, apologies if this is a redundant issue.\r\nP.S. I found a discussion somewhat related to this topic here: #1314 '"
2155,28487599,pchanial,embray,2014-02-28 09:23:17,2014-02-28 23:15:07,2014-02-28 18:58:09,closed,,,3,Bug;io.fits,https://api.github.com/repos/astropy/astropy/issues/2155,b'Pyfits: header changes in CompImageHDU not taken into account',"b'Updates in a compressed image header fail (setting keywords in _header works though):\r\n\r\n    data = np.arange(100, dtype=float)\r\n    primary = fits.PrimaryHDU()\r\n    hdu = fits.CompImageHDU(data)\r\n    hdu.header[\'mykey\'] = 3\r\n    hdulist = fits.HDUList([primary, hdu])\r\n    hdulist.writeto(\'test.fits\', clobber=True)\r\n    print fits.open(\'test.fits\')[1].header[\'mykey\']\r\n\r\n   ERROR: KeyError: ""Keyword \'MYKEY\' not found."" [astropy.io.fits.header]\r\n'"
2144,28389393,mdboom,mdboom,2014-02-27 02:35:47,2014-07-18 21:10:54,2014-02-28 16:55:10,closed,,v0.3.2,2,Bug,https://api.github.com/repos/astropy/astropy/issues/2144,b'Fix coding tag.',"b""I think this works with Python, where `utf8` is an alias for `utf-8`, but it emacs doesn't like it, giving the warning:\r\n\r\n```\r\nWarning (mule): Invalid coding system `utf8' is specified\r\nfor the current buffer/file by the :coding tag.\r\nIt is highly recommended to fix it before writing to a file.\r\n```\r\n\r\n@embray"""
2125,28150842,astrofrog,embray,2014-02-24 10:25:51,2014-11-24 19:43:37,2014-11-24 19:43:37,closed,,,3,astropy-helpers;Bug;installation,https://api.github.com/repos/astropy/astropy/issues/2125,b'astropy.__githash__ is not currently very useful',"b'It would be nice to be able to determine the git hash corresponding to an installed astropy version. Normally, that is what ``astropy.__githash__`` was intended for, but currently ``__githash__`` is not determined at install time, but at run time, so in most cases it will be blank unless importing directly from the source tree.'"
2111,27999271,pllim,embray,2014-02-20 21:51:11,2014-02-24 22:31:18,2014-02-24 22:31:18,closed,,v0.3.1,1,Affects-release;Bug;config;Effort-low,https://api.github.com/repos/astropy/astropy/issues/2111,b'ConfigurationItem  set_temp() does not reset on exception',b'Is this a bug? I was not expecting `set_temp()` value to persist outside the `with` block even when an exception is raised.\r\n\r\n    >>> from astropy.utils.data import REMOTE_TIMEOUT\r\n    >>> REMOTE_TIMEOUT()\r\n    3.0\r\n    >>> with REMOTE_TIMEOUT.set_temp(10):\r\n    ...     raise Exception\r\n    Exception: \r\n    >>> REMOTE_TIMEOUT()\r\n    10.0'
2099,27645767,astrofrog,embray,2014-02-15 09:31:59,2015-01-13 17:35:49,2014-02-17 19:24:27,closed,,v0.3.1,2,Bug;io.misc,https://api.github.com/repos/astropy/astropy/issues/2099,b'HDF5 I/O tests fail on Windows 7 Anaconda installation',"b'I will look into this in more detail later, but I\'m seeing this error for all the HDF5 tests:\r\n\r\n```\r\nCompression filter ""gzip"" is unavailable\r\n```\r\n\r\nI think this may be an h5py bug because no compression has been requested.'"
2084,27411610,lgarrison,embray,2014-02-12 05:50:41,2014-07-11 20:23:33,2014-02-12 17:38:24,closed,,v0.3.1,1,Affects-release;Bug;cosmology;Docs,https://api.github.com/repos/astropy/astropy/issues/2084,b'Documentation fix',b'Very minor documentation fix.'
2080,27394531,hamogu,taldcroft,2014-02-11 22:51:05,2014-10-26 00:37:32,2014-08-29 01:38:03,closed,,v0.4.2,11,Bug;io.ascii,https://api.github.com/repos/astropy/astropy/issues/2080,b'io.ascii bug: `fill_values` do not work well with formatted columns',"b'Let\'s make a simple table with a value I want to replace. (I use `nan`, but `4` or `1.23e+4` probably have the same problem.)\r\n```\r\nIn [1]: import astropy.io.ascii as ascii\r\nIn [2]: import sys\r\nIn [3]: tab = ascii.read([""a b"",""a nan""])\r\nIn [4]: ascii.write(tab,sys.stdout)\r\na b\r\na nan\r\nIn [5]: ascii.write(tab,sys.stdout, fill_values=[(\'nan\', \'---\')])\r\na b\r\na ---\r\n```\r\nNow, I change the format of the output to some fixed width. Asciitable always strips the whitespace before output, that does not actually change the output on the screen.\r\n```\r\nIn [6]: tab[\'b\'].format = \'%5.2f\'\r\nIn [7]: ascii.write(tab,sys.stdout)\r\na b\r\na nan\r\n```\r\nHowever, `\'nan\'` is no longer replaced.\r\n```\r\nIn [8]: ascii.write(tab,sys.stdout, fill_values=[(\'nan\', \'---\')])\r\na b\r\na nan\r\n```\r\nInstead, `\'  nan\'` works:\r\n```\r\nIn [9]: ascii.write(tab,sys.stdout, fill_values=[(\'  nan\', \'---\')])\r\na b\r\na ---\r\n```\r\nThat\'s contrary to what the documentation says and to the original intention of the `fill_values`.'"
2074,27354922,mhvk,mhvk,2014-02-11 15:10:17,2014-06-18 08:19:02,2014-02-12 02:29:41,closed,,v0.3.1,3,Bug;time,https://api.github.com/repos/astropy/astropy/issues/2074,b'Correct TCG->TDB conversion; add regression tests',"b'While working on #1932, I found that it was not possible to convert TCG to TDB, as the hop list included TDB itself.  This corrects the list, and adds regression tests.'"
2073,27334110,mwcraig,embray,2014-02-11 09:25:55,2014-06-26 15:13:26,2014-02-11 22:37:08,closed,,v0.3.1,1,Affects-dev;Bug;io.fits,https://api.github.com/repos/astropy/astropy/issues/2073,b'Make a couple of strings into unicode',b'Addresses #1699 but not sure this closes it.'
2053,27060886,barentsen,mdboom,2014-02-06 16:11:23,2014-06-20 05:39:56,2014-02-10 22:56:40,closed,,v0.3.1,13,Affects-release;Bug;wcs,https://api.github.com/repos/astropy/astropy/issues/2053,b'wcslint and wcs.validate raise an unexpected NameError exception',"b""I encountered an unexpected NameError exception when using `wcslint` to validate real data. The problem can be reproduced using the following code:\r\n\r\n```python\r\nfrom astropy.io import fits\r\nfrom astropy import wcs\r\nh = fits.Header()\r\nh['RADESYSA'] = 'ICRS'\r\nh['PV2_1'] = 1.0\r\nhdu = fits.PrimaryHDU([[0]], header=h)\r\nhdulist = fits.HDUList([hdu])\r\nwcs.validate(hdulist)\r\n```\r\n\r\nWhich raises the following error:\r\n\r\n```python\r\nERROR: NameError: global name '__warningregistry__' is not defined [astropy.wcs.wcs]\r\n---------------------------------------------------------------------------\r\nNameError                                 Traceback (most recent call last)\r\n<ipython-input-8-dd0ea12c58e0> in <module>()\r\n----> 1 wcs.validate(hdulist)\r\n\r\n/local/home/gb/dev/astropy/astropy/wcs/wcs.pyc in validate(source)\r\n   2020             hdu_results.append(wcs_results)\r\n   2021 \r\n-> 2022             del __warningregistry__\r\n   2023 \r\n   2024             with warnings.catch_warnings(record=True) as warning_lines:\r\n                                                                                             \r\nNameError: global name '__warningregistry__' is not defined\r\n```\r\n\r\nThe problem can be traced back to the fact that `find_all_wcs()` returns two WCS objects for the given HDU, causing `del __warningregistry__` to be executed twice.\r\n\r\nThe attached pull request circumvents the exception, but it does not solve the fact that `find_all_wcs` returns two WCS objects and that the validation routine does not yield any warning about the faulty WCS?\r\n\r\nAn example of real data on which the issue is encountered is available here: http://star.herts.ac.uk/~gb/tmp/astropy/wcslint-fails-on-this-image.fits.gz"""
2047,26972161,taldcroft,mdboom,2014-02-05 15:59:29,2014-06-18 03:11:53,2014-02-10 19:58:09,closed,mdboom,v0.3.1,6,Affects-release;Bug;table,https://api.github.com/repos/astropy/astropy/issues/2047,b'Unit unpickling fails for UnrecognizedUnit',"b""As originally noted in the post-merge discussion of #792:\r\n```\r\nIn [56]: t = Table([[1]])\r\nIn [57]: t['col0'].unit = 'blah'  # would succeed for unit = 'm'\r\nIn [58]: tpp = pickle.loads(pickle.dumps(t))\r\nERROR: AttributeError: 'NoneType' object has no attribute '__dict__' [pickle]\r\n---------------------------------------------------------------------------\r\nAttributeError                            Traceback (most recent call last)\r\n<ipython-input-58-1f551d7490ab> in <module>()\r\n----> 1 tpp = pickle.loads(pickle.dumps(t))\r\n\r\n/Users/aldcroft/anaconda/envs/astroquery/python.app/Contents/lib/python2.7/pickle.pyc in loads(str)\r\n   1380 def loads(str):\r\n   1381     file = StringIO(str)\r\n-> 1382     return Unpickler(file).load()\r\n   1383 \r\n   1384 # Doctest\r\n\r\n/Users/aldcroft/anaconda/envs/astroquery/python.app/Contents/lib/python2.7/pickle.pyc in load(self)\r\n    856             while 1:\r\n    857                 key = read(1)\r\n--> 858                 dispatch[key](self)\r\n    859         except _Stop, stopinst:\r\n    860             return stopinst.value\r\n\r\n/Users/aldcroft/anaconda/envs/astroquery/python.app/Contents/lib/python2.7/pickle.pyc in load_build(self)\r\n   1222         if state:\r\n   1223             try:\r\n-> 1224                 d = inst.__dict__\r\n   1225                 try:\r\n   1226                     for k, v in state.iteritems():\r\n\r\nAttributeError: 'NoneType' object has no attribute '__dict__'\r\n```"""
2039,26832624,keflavich,taldcroft,2014-02-03 20:01:52,2014-06-12 13:20:11,2014-02-03 21:43:06,closed,,v0.3.1,8,Bug;table,https://api.github.com/repos/astropy/astropy/issues/2039,"b""Can't rename table columns after sorting""","b""After sorting a table on one column, it is no longer possible to rename column names, apparently.\r\n\r\n```\r\nIn [51]: %paste\r\n>>> from astropy.table import Table\r\n>>> a = [1, 4, 5]\r\n>>> b = [2.0, 5.0, 8.2]\r\n>>> c = ['x', 'y', 'z']\r\n>>> t = Table([a, b, c], names=('a', 'b', 'c'), meta={'name': 'first table'})\r\n\r\n## -- End pasted text --\r\n\r\nIn [52]: t.rename_column('c','d')\r\n\r\nIn [53]: t.colnames\r\nOut[53]: ['a', 'b', 'd']\r\n\r\nIn [54]: t.sort('a')\r\n\r\nIn [55]: t.colnames\r\nOut[55]: ['a', 'b', 'd']\r\n\r\nIn [56]: t.rename_column('b','e')\r\n\r\nIn [57]: t.colnames\r\nOut[57]: ['a', 'b', 'd']\r\n```"""
2038,26829558,larrybradley,nden,2014-02-03 19:22:25,2014-06-25 20:50:31,2014-02-21 20:12:57,closed,,v0.3.1,18,Affects-release;Bug;modeling,https://api.github.com/repos/astropy/astropy/issues/2038,b'Fixed Gaussian2D model',"b'These are fixes to the ``Gaussian2D`` model.  Specifically, the ``b`` parameter was incorrect in the code (but correct in the docs).  Also, the ``a`` parameter was incorrect in the docs (but correct in the code).  This PR also updates the derivatives based on the correct ``b`` value.  The other changes represent some refactoring to hopefully make things a little clearer/cleaner.\r\n'"
2037,26828664,pllim,eteq,2014-02-03 19:09:56,2014-06-20 00:44:10,2014-02-27 02:01:54,closed,,v0.3.2,16,Bug;coordinates;vo,https://api.github.com/repos/astropy/astropy/issues/2037,b'ICRS coordinate gives RA -0 when input is 0',"b'This becomes a problem when I convert RA to string and I get ""-0"", which is not recognized as a valid RA by Cone Search Services.\r\n\r\n    Python 3.3.2 (default, Oct 25 2013, 11:53:32) \r\n    [GCC 4.4.7 20120313 (Red Hat 4.4.7-3)] on linux\r\n    >>> import astropy\r\n    >>> astropy.__version__\r\n    \'0.4.dev7302\'\r\n    >>> from astropy.coordinates import ICRS\r\n    >>> from astropy import units as u\r\n    >>> ICRS(0, 0, unit=(u.degree, u.degree))\r\n    <ICRS RA=-0.00000 deg, Dec=0.00000 deg>\r\n'"
2003,26402509,adrn,embray,2014-01-27 22:59:10,2014-06-17 13:38:31,2014-05-06 18:34:04,closed,embray,v0.3.2,32,Affects-release;Bug;units,https://api.github.com/repos/astropy/astropy/issues/2003,b'units: quantity bug with adding units to an array view?',"b""This code doesn't work as expected:\r\n\r\n    a = np.random.uniform(size=(400,8))\r\n\r\n    x,y,z = a[:,1:4].T*u.km/u.s\r\n    print np.sum(a[:,1]*u.km/u.s - x) # non-zero\r\n\r\n    x,y,z = a[:,1:4].T\r\n    print np.sum(a[:,1] - x) # zero\r\n\r\nCould this have something to do with how numpy views of arrays are turned into `Quantity`'s? Don't have time to look at code today to investigate..."""
2002,26364200,astrofrog,astrofrog,2014-01-27 16:22:06,2014-07-01 21:29:28,2014-01-29 15:08:41,closed,mdboom,v0.3.1,9,Bug;io.votable;utils,https://api.github.com/repos/astropy/astropy/issues/2002,b'Encoding error when using volint',"b'I tried using volint on a VO table from Vizier and got an encoding error:\r\n\r\n```\r\n$ volint http://mpia.de/~robitaille/vizier_votable.vot\r\nDownloading http://mpia.de/~robitaille/vizier_votable.vot\r\n|==========================================================================================================================================================================|  18k/ 18k (100.00%)        00s\r\nValidation report for http://mpia.de/~robitaille/vizier_votable.vot\r\n\r\n54: W27: COOSYS deprecated in VOTable 1.2\r\n  <COOSYS ID=""J2000"" system=""eq_FK5"" equinox=""J2000""/>\r\n  ^\r\n\r\n124: W49: Empty cell illegal for integer fields.\r\nTraceback (most recent call last):\r\n  File ""/Users/tom/Library/Python/2.7/bin/volint"", line 5, in <module>\r\n    pkg_resources.run_script(\'astropy==0.4.dev6985\', \'volint\')\r\n  File ""/Users/tom/Library/Python/2.7/lib/python/site-packages/distribute-0.6.24-py2.7.egg/pkg_resources.py"", line 499, in run_script\r\n    self.require(requires)[0].run_script(script_name, ns)\r\n  File ""/Users/tom/Library/Python/2.7/lib/python/site-packages/distribute-0.6.24-py2.7.egg/pkg_resources.py"", line 1235, in run_script\r\n    execfile(script_filename, namespace, namespace)\r\n  File ""/Users/tom/Library/Python/2.7/lib/python/site-packages/astropy-0.4.dev6985-py2.7-macosx-10.8-x86_64.egg/EGG-INFO/scripts/volint"", line 5, in <module>\r\n    astropy.io.votable.volint.main()\r\n  File ""/Users/tom/Library/Python/2.7/lib/python/site-packages/astropy-0.4.dev6985-py2.7-macosx-10.8-x86_64.egg/astropy/io/votable/volint.py"", line 18, in main\r\n    table.validate(args.filename[0])\r\n  File ""/Users/tom/Library/Python/2.7/lib/python/site-packages/astropy-0.4.dev6985-py2.7-macosx-10.8-x86_64.egg/astropy/io/votable/table.py"", line 276, in validate\r\n    print_code_line(line, w[\'nchar\'], file=output)\r\n  File ""/Users/tom/Library/Python/2.7/lib/python/site-packages/astropy-0.4.dev6985-py2.7-macosx-10.8-x86_64.egg/astropy/utils/console.py"", line 860, in print_code_line\r\n    color_print(\'\xa1\xad\', \'darkgrey\', file=file, end=\'\')\r\n  File ""/Users/tom/Library/Python/2.7/lib/python/site-packages/astropy-0.4.dev6985-py2.7-macosx-10.8-x86_64.egg/astropy/utils/console.py"", line 261, in color_print\r\n    write = _write_with_fallback(msg, write, file)\r\n  File ""/Users/tom/Library/Python/2.7/lib/python/site-packages/astropy-0.4.dev6985-py2.7-macosx-10.8-x86_64.egg/astropy/utils/console.py"", line 204, in _write_with_fallback\r\n    write(s)\r\n  File ""/opt/local/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/codecs.py"", line 351, in write\r\n    data, consumed = self.encode(object, self.errors)\r\nUnicodeEncodeError: \'latin-1\' codec can\'t encode character u\'\\u2026\' in position 7: ordinal not in range(256)\r\n```'"
2001,26293532,taldcroft,embray,2014-01-25 14:12:22,2014-11-28 18:53:20,2014-11-28 18:53:20,closed,taldcroft,v0.4.3,8,Affects-release;Bug;Effort-medium;io.registry;Package-intermediate;table;unified-io,https://api.github.com/repos/astropy/astropy/issues/2001,b'Reading table with URL is doing many requests',"b""If I read a web-based CSV file using `requests` it works straightaway and quickly:\r\n```\r\nIn [62]: weather_url\r\nOut[62]: 'http://www.wunderground.com/history/airport/KLAS/2010/3/1/CustomHistory.html?dayend=28&monthend=4&yearend=2010&req_city=NA&req_state=NA&req_statename=NA&format=1'\r\n\r\nIn [63]: dat = Table.read(requests.get(weather_url).text, format='ascii')\r\n```\r\nBut if I do what I think is the equivalent directly with `Table.read` it's hitting the site many times and takes probably 10 times as long:\r\n```\r\nIn [64]: dat = Table.read(weather_url, format='ascii')\r\nDownloading http://www.wunderground.com/history/airport/KLAS/2010/3/1/CustomHistory.html?dayend=28&monthend=4&yearend=2010&req_city=NA&req_state=NA&req_statenamDownloading http://www.wunderground.com/history/airport/KLAS/2010/3/1/CustomHistory.html?dayend=28&monthend=4&yearend=2010&req_city=NA&req_state=NA&req_statename=NA&format=1 [Done]\r\nDownloading http://www.wunderground.com/history/airport/KLAS/2010/3/1/CustomHistory.html?dayend=28&monthend=4&yearend=2010&req_city=NA&req_state=NA&req_statenamDownloading http://www.wunderground.com/history/airport/KLAS/2010/3/1/CustomHistory.html?dayend=28&monthend=4&yearend=2010&req_city=NA&req_state=NA&req_statename=NA&format=1 [Done]\r\nDownloading http://www.wunderground.com/history/airport/KLAS/2010/3/1/CustomHistory.html?dayend=28&monthend=4&yearend=2010&req_city=NA&req_state=NA&req_statenamDownloading http://www.wunderground.com/history/airport/KLAS/2010/3/1/CustomHistory.html?dayend=28&monthend=4&yearend=2010&req_city=NA&req_state=NA&req_statename=NA&format=1 [Done]\r\nDownloading http://www.wunderground.com/history/airport/KLAS/2010/3/1/CustomHistory.html?dayend=28&monthend=4&yearend=2010&req_city=NA&req_state=NA&req_statenamDownloading http://www.wunderground.com/history/airport/KLAS/2010/3/1/CustomHistory.html?dayend=28&monthend=4&yearend=2010&req_city=NA&req_state=NA&req_statename=NA&format=1 [Done]\r\nDownloading http://www.wunderground.com/history/airport/KLAS/2010/3/1/CustomHistory.html?dayend=28&monthend=4&yearend=2010&req_city=NA&req_state=NA&req_statenamDownloading http://www.wunderground.com/history/airport/KLAS/2010/3/1/CustomHistory.html?dayend=28&monthend=4&yearend=2010&req_city=NA&req_state=NA&req_statename=NA&format=1 [Done]\r\nDownloading http://www.wunderground.com/history/airport/KLAS/2010/3/1/CustomHistory.html?dayend=28&monthend=4&yearend=2010&req_city=NA&req_state=NA&req_statenamDownloading http://www.wunderground.com/history/airport/KLAS/2010/3/1/CustomHistory.html?dayend=28&monthend=4&yearend=2010&req_city=NA&req_state=NA&req_statename=NA&format=1 [Done]\r\nDownloading http://www.wunderground.com/history/airport/KLAS/2010/3/1/CustomHistory.html?dayend=28&monthend=4&yearend=2010&req_city=NA&req_state=NA&req_statenamDownloading http://www.wunderground.com/history/airport/KLAS/2010/3/1/CustomHistory.html?dayend=28&monthend=4&yearend=2010&req_city=NA&req_state=NA&req_statename=NA&format=1 [Done]\r\nDownloading http://www.wunderground.com/history/airport/KLAS/2010/3/1/CustomHistory.html?dayend=28&monthend=4&yearend=2010&req_city=NA&req_state=NA&req_statenamDownloading http://www.wunderground.com/history/airport/KLAS/2010/3/1/CustomHistory.html?dayend=28&monthend=4&yearend=2010&req_city=NA&req_state=NA&req_statename=NA&format=1 [Done]\r\nDownloading http://www.wunderground.com/history/airport/KLAS/2010/3/1/CustomHistory.html?dayend=28&monthend=4&yearend=2010&req_city=NA&req_state=NA&req_statenamDownloading http://www.wunderground.com/history/airport/KLAS/2010/3/1/CustomHistory.html?dayend=28&monthend=4&yearend=2010&req_city=NA&req_state=NA&req_statename=NA&format=1 [Done]\r\nDownloading http://www.wunderground.com/history/airport/KLAS/2010/3/1/CustomHistory.html?dayend=28&monthend=4&yearend=2010&req_city=NA&req_state=NA&req_statenamDownloading http://www.wunderground.com/history/airport/KLAS/2010/3/1/CustomHistory.html?dayend=28&monthend=4&yearend=2010&req_city=NA&req_state=NA&req_statename=NA&format=1 [Done]\r\nDownloading http://www.wunderground.com/history/airport/KLAS/2010/3/1/CustomHistory.html?dayend=28&monthend=4&yearend=2010&req_city=NA&req_state=NA&req_statenamDownloading http://www.wunderground.com/history/airport/KLAS/2010/3/1/CustomHistory.html?dayend=28&monthend=4&yearend=2010&req_city=NA&req_state=NA&req_statename=NA&format=1 [Done]\r\nDownloading http://www.wunderground.com/history/airport/KLAS/2010/3/1/CustomHistory.html?dayend=28&monthend=4&yearend=2010&req_city=NA&req_state=NA&req_statenamDownloading http://www.wunderground.com/history/airport/KLAS/2010/3/1/CustomHistory.html?dayend=28&monthend=4&yearend=2010&req_city=NA&req_state=NA&req_statename=NA&format=1 [Done]\r\nDownloading http://www.wunderground.com/history/airport/KLAS/2010/3/1/CustomHistory.html?dayend=28&monthend=4&yearend=2010&req_city=NA&req_state=NA&req_statenamDownloading http://www.wunderground.com/history/airport/KLAS/2010/3/1/CustomHistory.html?dayend=28&monthend=4&yearend=2010&req_city=NA&req_state=NA&req_statename=NA&format=1 [Done]\r\nDownloading http://www.wunderground.com/history/airport/KLAS/2010/3/1/CustomHistory.html?dayend=28&monthend=4&yearend=2010&req_city=NA&req_state=NA&req_statenamDownloading http://www.wunderground.com/history/airport/KLAS/2010/3/1/CustomHistory.html?dayend=28&monthend=4&yearend=2010&req_city=NA&req_state=NA&req_statename=NA&format=1 [Done]\r\nDownloading http://www.wunderground.com/history/airport/KLAS/2010/3/1/CustomHistory.html?dayend=28&monthend=4&yearend=2010&req_city=NA&req_state=NA&req_statenamDownloading http://www.wunderground.com/history/airport/KLAS/2010/3/1/CustomHistory.html?dayend=28&monthend=4&yearend=2010&req_city=NA&req_state=NA&req_statename=NA&format=1 [Done]\r\nDownloading http://www.wunderground.com/history/airport/KLAS/2010/3/1/CustomHistory.html?dayend=28&monthend=4&yearend=2010&req_city=NA&req_state=NA&req_statenamDownloading http://www.wunderground.com/history/airport/KLAS/2010/3/1/CustomHistory.html?dayend=28&monthend=4&yearend=2010&req_city=NA&req_state=NA&req_statename=NA&format=1 [Done]\r\nDownloading http://www.wunderground.com/history/airport/KLAS/2010/3/1/CustomHistory.html?dayend=28&monthend=4&yearend=2010&req_city=NA&req_state=NA&req_statenamDownloading http://www.wunderground.com/history/airport/KLAS/2010/3/1/CustomHistory.html?dayend=28&monthend=4&yearend=2010&req_city=NA&req_state=NA&req_statename=NA&format=1 [Done]\r\nDownloading http://www.wunderground.com/history/airport/KLAS/2010/3/1/CustomHistory.html?dayend=28&monthend=4&yearend=2010&req_city=NA&req_state=NA&req_statenamDownloading http://www.wunderground.com/history/airport/KLAS/2010/3/1/CustomHistory.html?dayend=28&monthend=4&yearend=2010&req_city=NA&req_state=NA&req_statename=NA&format=1 [Done]\r\nDownloading http://www.wunderground.com/history/airport/KLAS/2010/3/1/CustomHistory.html?dayend=28&monthend=4&yearend=2010&req_city=NA&req_state=NA&req_statenamDownloading http://www.wunderground.com/history/airport/KLAS/2010/3/1/CustomHistory.html?dayend=28&monthend=4&yearend=2010&req_city=NA&req_state=NA&req_statename=NA&format=1 [Done]\r\nDownloading http://www.wunderground.com/history/airport/KLAS/2010/3/1/CustomHistory.html?dayend=28&monthend=4&yearend=2010&req_city=NA&req_state=NA&req_statenamDownloading http://www.wunderground.com/history/airport/KLAS/2010/3/1/CustomHistory.html?dayend=28&monthend=4&yearend=2010&req_city=NA&req_state=NA&req_statename=NA&format=1 [Done]\r\n\r\nIn [65]: \r\n```"""
1987,26084336,astrofrog,embray,2014-01-22 11:56:23,2014-09-18 21:35:15,2014-09-18 21:35:15,closed,embray,v0.4.2,35,Bug;Effort-medium;io.fits;Package-expert;Upstream Fix Required,https://api.github.com/repos/astropy/astropy/issues/1987,b'astropy.io.fits failures with Numpy dev',b'@embray - FYI there are currently four test failures for ``astropy.io.fits`` with the developer version of Numpy:\r\n\r\nhttps://jenkins.shiningpanda-ci.com/astropy/view/MacOS%20X/job/astropy-master-numpydev-osx-10.8-multiconfig/'
1953,25337955,taldcroft,embray,2014-01-09 17:56:33,2014-09-24 17:14:07,2014-04-28 20:41:28,closed,embray,v0.3.2,4,Bug;io.fits;table,https://api.github.com/repos/astropy/astropy/issues/1953,b'Reading FITS file with boolean column gives incorrect result',"b""As reported by R. Finn on the astropy mailing list, there seems to be a problem reading a boolean column in a FITS file created with astropy.  Using astropy 0.3 on linux-64:\r\n```\r\n>>> from astropy.table import Table\r\n>>> from astropy.io import fits\r\n>>> t = Table([np.ones(5, dtype=bool)])\r\n>>> t.write('test.fits', overwrite=True)\r\n>>> \r\n>>> hdus = fits.open('test.fits')\r\n>>> dat = hdus[1].data\r\n>>> \r\n>>> print t\r\ncol0\r\n----\r\nTrue\r\nTrue\r\nTrue\r\nTrue\r\nTrue\r\n>>> print dat\r\n[(False) (False) (False) (False) (False)]\r\n```\r\nUsing CIAO `dmlist` the file appears to be correct:\r\n```\r\nXTENSION     = BINTABLE             / binary table extension\r\nBITPIX       = 8                    / array data type     \r\nNAXIS        = 2                    / number of array dimensions\r\nNAXIS1       = 1                    / length of dimension 1\r\nNAXIS2       = 5                    / length of dimension 2\r\nPCOUNT       = 0                    / number of group parameters\r\nGCOUNT       = 1                    / number of groups    \r\nTFIELDS      = 1                    / number of table fields\r\nTTYPE1       = col0                 /                     \r\nTFORM1       = L                    /    \r\n\r\n--------------------------------------------------------------------------------\r\nData for Table Block HDU2\r\n--------------------------------------------------------------------------------\r\n \r\nROW    col0\r\n \r\n     1  TRUE \r\n     2  TRUE \r\n     3  TRUE \r\n     4  TRUE \r\n     5  TRUE                  \r\n```\r\n"""
1949,25181658,astrofrog,taldcroft,2014-01-07 17:16:55,2014-06-21 12:55:52,2014-01-15 16:41:21,closed,,v0.3.1,7,Bug;io.ascii,https://api.github.com/repos/astropy/astropy/issues/1949,b'delimiter in CSV writer should support unicode',"b'I think the following should probably be made to work:\r\n\r\n```\r\nIn [6]: t.write(\'test.csv\', format=\'ascii\', delimiter=u\',\')\r\nERROR: TypeError: ""delimiter"" must be an 1-character string [astropy.io.ascii.core]\r\n---------------------------------------------------------------------------\r\nTypeError                                 Traceback (most recent call last)\r\n<ipython-input-6-1f963bd3edbd> in <module>()\r\n----> 1 t.write(\'test.csv\', format=\'ascii\', delimiter=u\',\')\r\n\r\n/Users/tom/Library/Python/2.7/lib/python/site-packages/astropy-0.4.dev6923-py2.7-macosx-10.8-x86_64.egg/astropy/table/table.pyc in write(self, *args, **kwargs)\r\n   1732         passed through to the underlying data reader (e.g. `~astropy.io.ascii.ui.write`).\r\n   1733         """"""\r\n-> 1734         io_registry.write(self, *args, **kwargs)\r\n   1735 \r\n   1736     def copy(self, copy_data=True):\r\n\r\n/Users/tom/Library/Python/2.7/lib/python/site-packages/astropy-0.4.dev6923-py2.7-macosx-10.8-x86_64.egg/astropy/io/registry.pyc in write(data, *args, **kwargs)\r\n    356 \r\n    357     writer = get_writer(format, data.__class__)\r\n--> 358     writer(data, *args, **kwargs)\r\n    359 \r\n    360 \r\n\r\n/Users/tom/Library/Python/2.7/lib/python/site-packages/astropy-0.4.dev6923-py2.7-macosx-10.8-x86_64.egg/astropy/io/ascii/connect.pyc in write_asciitable(table, filename, **kwargs)\r\n     23 def write_asciitable(table, filename, **kwargs):\r\n     24     from .ui import write\r\n---> 25     return write(table, filename, **kwargs)\r\n     26 \r\n     27 io_registry.register_writer(\'ascii\', Table, write_asciitable)\r\n\r\n/Users/tom/Library/Python/2.7/lib/python/site-packages/astropy-0.4.dev6923-py2.7-macosx-10.8-x86_64.egg/astropy/io/ascii/ui.pyc in write(table, output, format, Writer, **kwargs)\r\n    293     Writer = _get_format_class(format, Writer, \'Writer\')\r\n    294     writer = get_writer(Writer=Writer, **kwargs)\r\n--> 295     lines = writer.write(table)\r\n    296 \r\n    297     # Write the lines to output\r\n\r\n/Users/tom/Library/Python/2.7/lib/python/site-packages/astropy-0.4.dev6923-py2.7-macosx-10.8-x86_64.egg/astropy/io/ascii/core.pyc in write(self, table)\r\n    914         # Write header and data to lines list\r\n    915         lines = []\r\n--> 916         self.header.write(lines)\r\n    917         self.data.write(lines)\r\n    918 \r\n\r\n/Users/tom/Library/Python/2.7/lib/python/site-packages/astropy-0.4.dev6923-py2.7-macosx-10.8-x86_64.egg/astropy/io/ascii/core.pyc in write(self, lines)\r\n    414                                        itertools.cycle(self.write_spacer_lines)):\r\n    415                 lines.append(spacer_line)\r\n--> 416             lines.append(self.splitter.join([x.name for x in self.cols]))\r\n    417 \r\n    418     @property\r\n\r\n/Users/tom/Library/Python/2.7/lib/python/site-packages/astropy-0.4.dev6923-py2.7-macosx-10.8-x86_64.egg/astropy/io/ascii/core.pyc in join(self, vals)\r\n    294                                          quotechar=self.quotechar,\r\n    295                                          quoting=self.quoting,\r\n--> 296                                          lineterminator=\'\',\r\n    297                                          )\r\n    298         self.csv_writer_out.seek(0)\r\n\r\nTypeError: ""delimiter"" must be an 1-character string\r\n```\r\n\r\nI found this in a script that was importig ``unicode_literals`` from ``__future__``\r\n\r\ncc @taldcroft '"
1942,25047909,scottransom,mhvk,2014-01-04 04:00:45,2014-01-21 19:09:45,2014-01-21 19:09:45,closed,,v0.3.1,1,Affects-release;Bug;coordinates,https://api.github.com/repos/astropy/astropy/issues/1942,b'wrap_angle attribute does not pickle properly with Longitude instance',"b'Hi All,\r\n\r\nSo the wrap_angle attribute for a Longitude instance is used several times in the angle class, yet it does not pickle properly.  See below for a simple example.\r\n\r\nScott\r\n\r\n```\r\nIn [1]: from astropy.coordinates import Longitude, Latitude\r\n\r\nIn [2]: import cPickle\r\n\r\nIn [3]: a = Longitude(1.23, ""radian"", wrap_angle=\'180d\')\r\n\r\nIn [4]: a.wrap_angle\r\nOut[4]: <Angle 180.0 deg>\r\n\r\nIn [5]: cPickle.dump(a, open(""xxx"", ""wb""))\r\n\r\nIn [6]: b = cPickle.load(open(""xxx""))\r\n\r\nIn [7]: a\r\nOut[7]: <Longitude 1.2300000000000004 rad>\r\n\r\nIn [8]: b\r\nOut[8]: <Longitude 1.2300000000000004 rad>\r\n\r\nIn [9]: b.wrap_angle\r\nERROR: AttributeError: Longitude instance has no attribute \'wrap_angle\' [astropy.units.quantity]\r\n---------------------------------------------------------------------------\r\nAttributeError                            Traceback (most recent call last)\r\n<ipython-input-9-c854be2560b1> in <module>()\r\n----> 1 b.wrap_angle\r\n\r\n/home/sransom/src/astropy_dev/astropy/units/quantity.pyc in __getattr__(self, attr)\r\n    574             raise AttributeError(\r\n    575                 ""{0} instance has no attribute \'{1}\'"".format(\r\n--> 576                     self.__class__.__name__, attr))\r\n    577         else:\r\n    578             return value\r\n\r\nAttributeError: Longitude instance has no attribute \'wrap_angle\'\r\n\r\n'"
1934,24897151,taldcroft,taldcroft,2013-12-30 19:35:51,2014-07-22 20:27:38,2013-12-30 22:15:57,closed,,v0.3.1,2,Affects-dev;Bug;table,https://api.github.com/repos/astropy/astropy/issues/1934,b'Update MaskedColumn to fix unicode column names like in Column',b'As mentioned in #1876.'
1929,24842580,demorest,taldcroft,2013-12-28 07:26:32,2014-07-08 18:05:44,2013-12-28 19:01:28,closed,taldcroft,v0.3.1,10,Affects-release;Bug;time,https://api.github.com/repos/astropy/astropy/issues/1929,b'Bug in TDB to TT calculation',"b""Hi,\r\n\r\nI've recently been working on astropy-based pulsar timing software and ran across a problem with the TDB conversion routines: In the astropy.time._get_delta_tdb_tt() function erfa_time.era_gd2gc() is used to convert the input lat/lon to geocentric XYZ coordinates.  The returned values are in meters.  These are then passed to erfa_time.d_tdb_tt() which however expects input in km.  The resulting TT-TDB is pretty far off, and messes up the pulsar timing results at the few-ms level.\r\n\r\nShould be a pretty trivial fix though!  I did this locally and got TT-TDB values consistent with TEMPO2 at the us level (may be better, but I'll need to do some more careful tests to say for sure).\r\n\r\nCheers,\r\nPaul  """
1927,24674912,mhvk,taldcroft,2013-12-22 03:02:08,2014-07-11 01:56:56,2013-12-28 22:38:29,closed,,v0.3.1,7,Affects-release;Bug;time,https://api.github.com/repos/astropy/astropy/issues/1927,"b'Ensure lon, lat are passed on in Time addition/subtraction'","b""Another PR addressing #1924.  Now:\r\n```\r\nIn [1]: from astropy.time import Time, TimeDelta\r\nIn [2]: t = Time(54555.0, 0.12345, scale='utc', format='mjd', lat=30, lon=-75)\r\nIn [3]: print(t.lat, t.lon, t.tdb.jd1, t.tdb.jd2, t.tdb.delta_tdb_tt)\r\n30d00m00s -75d00m00s 2454555.5 0.1242044693704408 [ 0.00215361]\r\nIn [4]: t += TimeDelta(0, format='sec')\r\nIn [5]: print(t.lat, t.lon, t.tdb.jd1, t.tdb.jd2, t.tdb.delta_tdb_tt)\r\n30d00m00s -75d00m00s 2454556.0 -0.37579553062955917 [ 0.00215361]\r\nIn [6]: 0.1242044693704408 - -0.37579553062955917\r\nOut[6]: 0.5\r\n```\r\n"""
1924,24673666,scottransom,taldcroft,2013-12-22 00:45:41,2014-01-04 23:02:50,2014-01-04 22:19:46,closed,,,8,Bug;time,https://api.github.com/repos/astropy/astropy/issues/1924,b'keeping set parameters when working with Time instances',"b'Hi All (especially @mhvk and @taldcroft and adding @demorest),\r\n\r\nSo I\'m doing some detailed testing of the various time scales as compared to TEMPO2, for use in a new pulsar timing package and I\'ve found an awkward behavior resulting from using TimeDeltas on Time objects to create new times.  The resulting Time objects don\'t ""remember"" any of the special parameters set during instantiation.\r\n\r\nThis is perhaps a design ""feature"", but it makes adjusting times (which, for instance, we need to do to apply observatory clock corrections) quite difficult, as the new Time instances don\'t transform to, say, tt or tdb in the same way.\r\n\r\nHere is an example (which I think also shows a bug for the property delta_ut1_utc when it is not set).  I\'m using numpy 1.7.1 and astropy \'0.4.dev6849\'\r\n\r\nIf this is the intended behavior, there should at least be some way to work around it...  (and maybe that even exists already?)\r\n\r\nThanks,\r\n\r\nScott\r\n\r\n```\r\nIn [1]: import astropy.time as time\r\nIn [2]: import astropy.units as u\r\nIn [3]: import astropy.utils\r\nIn [4]: from astropy.utils.iers import IERS_A, IERS_A_URL\r\nIn [5]: from astropy.utils.data import download_file\r\nIn [6]: iers_a_file = download_file(IERS_A_URL, cache=True)\r\nIn [7]: iers_a = IERS_A.open(iers_a_file)\r\nIn [8]: t = time.Time(54555.0, 0.12345, scale=\'utc\', format=\'mjd\',\r\n   ...:               lat=30*u.deg, lon=-75*u.deg)\r\nIn [9]: t.delta_ut1_utc = t.get_delta_ut1_utc(iers_a)\r\nIn [10]: print t.lat, t.lon, t.tdb.jd1, t.tdb.jd2, t.tdb.delta_tdb_tt, t.delta_ut1_utc\r\n30d00m00s -75d00m00s 2454555.5 0.12420446937 [ 0.00215361] [-0.35934716]\r\n\r\nIn [11]: t += 0.0*u.s  # Add no time at all to the time instance\r\n\r\nIn [12]: print t.lat, t.lon, t.tdb.jd1, t.tdb.jd2, t.tdb.delta_tdb_tt, t.delta_ut1_utc\r\nNone None 2454556.0 -0.375795551546 [ 0.00034644]ERROR: TypeError: unsupported operand type(s) for -: \'NoneType\' and \'float\' [astropy.utils.iers.iers]\r\n---------------------------------------------------------------------------\r\nTypeError                                 Traceback (most recent call last)\r\n<ipython-input-12-5b874f2327ab> in <module>()\r\n----> 1 print t.lat, t.lon, t.tdb.jd1, t.tdb.jd2, t.tdb.delta_tdb_tt, t.delta_ut1_utc\r\n\r\n/home/sransom/src/astropy_dev/astropy/time/core.pyc in _get_delta_ut1_utc(self, jd1, jd2)\r\n    780             from ..utils.iers import IERS\r\n    781             iers_table = IERS.open()\r\n--> 782             self._set_delta_ut1_utc(iers_table.ut1_utc(jd1, jd2))\r\n    783 \r\n    784         return self._delta_ut1_utc\r\n\r\n/home/sransom/src/astropy_dev/astropy/utils/iers/iers.pyc in ut1_utc(self, jd1, jd2, return_status)\r\n    186         """"""\r\n    187 \r\n--> 188         mjd, utc = self.mjd_utc(jd1, jd2)\r\n    189         # enforce array\r\n    190         is_scalar = not hasattr(mjd, \'__array__\') or mjd.ndim == 0\r\n\r\n/home/sransom/src/astropy_dev/astropy/utils/iers/iers.pyc in mjd_utc(self, jd1, jd2)\r\n    155         except:\r\n    156             pass\r\n--> 157         mjd = np.floor(jd1 - MJD_ZERO + jd2)\r\n    158         utc = jd1 - (MJD_ZERO+mjd) + jd2\r\n    159         return mjd, utc\r\n\r\nTypeError: unsupported operand type(s) for -: \'NoneType\' and \'float\'\r\n\r\n'"
1910,24436577,swt30,mdboom,2013-12-17 17:28:00,2014-07-13 12:36:48,2013-12-18 13:43:04,closed,,v0.3.1,4,Affects-release;Bug;units,https://api.github.com/repos/astropy/astropy/issues/1910,b'Definition of units.bar is off by a factor of 1000',"b'(first time using GitHub and nowhere near proficient enough to fork and change things myself, so I hope this is in the right place!)\r\n\r\nThe definition of the bar (astropy/units/si.py:151)\r\n\r\n```python\r\ndef_unit([\'bar\'], 100 * Pa, namespace=_ns,\r\ndoc=""bar: pressure"")\r\n```\r\n\r\nis off by a factor of 1000. It should be something like `1e5 * Pa` or `100 * kPa`.'"
1905,24268658,pllim,embray,2013-12-13 19:54:02,2014-07-05 08:56:02,2013-12-13 20:52:50,closed,,v0.3.1,5,Affects-release;Bug;utils,https://api.github.com/repos/astropy/astropy/issues/1905,b'Timer bug fix for 0.3.x',b'Timer bug fix for 0.3.x'
1903,24252059,nden,embray,2013-12-13 15:20:14,2014-07-16 20:55:45,2013-12-16 19:29:56,closed,,v0.3.1,2,Affects-release;Bug;modeling,https://api.github.com/repos/astropy/astropy/issues/1903,b'Fix for issue mentioned in #1900',b'#1900 brought up a bug in how parameters are passed to the `model.deriv` function in `LinearLSQFitter`.'
1900,24215934,eteq,eteq,2013-12-12 23:07:56,2014-01-17 18:50:16,2014-01-17 18:42:05,closed,,v0.3.1,3,Bug;modeling,https://api.github.com/repos/astropy/astropy/issues/1900,"b'functional_models derivatives have required arguments, breaks some fitters'","b""While working on #1896 with @pllim, I noticed an oddity in `Linear1D`, which seems to be true for all the `functional_models`, and also `powerlaws` (and perhaps some others): their `deriv` function is a static function that requires all the parameters be passed in manually.\r\n\r\nThis is strange behavior - I naturally expect that any 1D model would allow me to do ``mod.deriv(x)`` and get out the derivative of that model at `x` based on its current parameters.  Moreover, it seems that `LinearLSQFitter` assumes the same thing - so that means that one cannot use `LinearLSQFitter` with any of the `functional_models` or `powerlaws`\r\n\r\nIs this a bug, or somehow a feature that I'm misunderstaning?  @nden, @embray?"""
1898,24162740,olebole,olebole,2013-12-12 08:06:22,2016-02-09 12:13:09,2016-02-09 12:13:09,closed,embray,,9,Bug;io.fits,https://api.github.com/repos/astropy/astropy/issues/1898,b'test_image.py failure on DEC Alpha',"b""I have one more strange error on an official port:\r\n\r\nOn (inofficial port) Debian Alpha, one TestImage test fails:\r\n\r\n```\r\n__________ TestImageFunctions.test_comp_image[data2-HCOMPRESS_1-16-<] __________\r\n\r\nself = <astropy.io.fits.tests.test_image.TestImageFunctions object at 0x127ce7b50>\r\ndata = array([[ 1.,  1.,  1., ...,  1.,  1.,  1.],\r\n       [ 1.,  1.,  1., ...,  1.,  ...1.,  1.,  1., ...,  1.,  1.,  1.],\r\n       [ 1.,  1.,  1., ...,  1.,  1.,  1.]])\r\ncompression_type = 'HCOMPRESS_1', quantize_level = 16, byte_order = '<'\r\n\r\n    @pytest.mark.parametrize(\r\n        ('data', 'compression_type', 'quantize_level', 'byte_order'),\r\n        sum([[(np.zeros((2, 10, 10), dtype=np.float32), 'RICE_1', 16, bo),\r\n              (np.zeros((2, 10, 10), dtype=np.float32), 'GZIP_1', -0.01, bo),\r\n              (np.zeros((100, 100)) + 1, 'HCOMPRESS_1', 16, bo)]\r\n             for bo in ('<', '>')], []))\r\n    def test_comp_image(self, data, compression_type, quantize_level,\r\n                        byte_order):\r\n        data = data.newbyteorder(byte_order)\r\n        primary_hdu = fits.PrimaryHDU()\r\n        ofd = fits.HDUList(primary_hdu)\r\n        chdu = fits.CompImageHDU(data, name='SCI',\r\n                                 compressionType=compression_type,\r\n                                 quantizeLevel=quantize_level)\r\n        ofd.append(chdu)\r\n        ofd.writeto(self.temp('test_new.fits'), clobber=True)\r\n        ofd.close()\r\n        with fits.open(self.temp('test_new.fits')) as fd:\r\n>           assert (fd[1].data == data).all()\r\nE           assert <built-in method all of numpy.ndarray object at 0x127d22bc0>()\r\nE            +  where <built-in method all of numpy.ndarray object at 0x127d22bc0> = array([[ 1.,  1.,  1., ...,  1.,  1.,  1.],\\n       [ 1.,  1.,  1., ...,  1.,  ...1.,  1.,  1., ...,  1.,  1.,  1.],\\n       [ 1.,  1.,  1., ...,  1.,  1.,  1.]]) == array([[ 1.,  1.,  1., ...,  1.,  1.,  1.],\\n       [ 1.,  1.,  1., ...,  1.,  ...1.,  1.,  1., ...,  1.,  1.,  1.],\\n       [ 1.,  1.,  1., ...,  1.,  1.,  1.]]).all\r\nE            +    where array([[ 1.,  1.,  1., ...,  1.,  1.,  1.],\\n       [ 1.,  1.,  1., ...,  1.,  ...1.,  1.,  1., ...,  1.,  1.,  1.],\\n       [ 1.,  1.,  1., ...,  1.,  1.,  1.]]) = <astropy.io.fits.hdu.compressed.CompImageHDU object at 0x127cecfd0>.data\r\n\r\nastropy/io/fits/tests/test_image.py:519: AssertionError\r\n```\r\n\r\n[Full log](http://buildd.debian-ports.org/status/fetch.php?pkg=python-astropy&arch=alpha&ver=0.3-3&stamp=1386795687)"""
1897,24144446,embray,eteq,2013-12-11 22:48:17,2014-06-25 09:03:40,2014-01-17 23:46:18,closed,,v0.3.1,5,Affects-release;Bug;config,https://api.github.com/repos/astropy/astropy/issues/1897,b'Better support for $HOME in msys shells on Windows',"b""If running in an msys shell, use the /home/embray environment variable set in that shell to find the user's home.  The surest way to determine this is if the MSYSTEM environment variable is set (it doesn't matter what it's set to).  Obviously this isn't foolproof but there are few better alternatives (one might be to try calling 'uname').\r\n\r\nThis specifically came up because some versions of msys (including the one I have installed) screw up the `$HOMEPATH` environment variable such that the `.astropy` directory ends up being created in `C:\\.astropy` (if you even have permission to write there, if not it blows up)."""
1893,24119733,mdboom,mdboom,2013-12-11 16:44:50,2014-07-16 20:55:34,2013-12-12 15:32:58,closed,,v0.3.1,0,Affects-release;Bug,https://api.github.com/repos/astropy/astropy/issues/1893,b'Fix some six changes',"b'In light of #1891, I grepped for instances of `list(six.iterkeys(d))`, and ended up finding one bug and another place that could be made more efficient.'"
1887,24108599,mdboom,mdboom,2013-12-11 14:07:15,2014-07-17 09:32:11,2013-12-18 16:10:33,closed,,v0.3.1,4,Affects-release;Bug,https://api.github.com/repos/astropy/astropy/issues/1887,b'Fix for endianness test on Python',"b'This is another partial fix for #1849, and a follow-on to #1855.'"
1882,24021377,olebole,olebole,2013-12-10 09:04:14,2016-02-09 12:10:54,2016-02-09 12:10:54,closed,embray,,5,Bug;build,https://api.github.com/repos/astropy/astropy/issues/1882,b'Random build errors',"b'This may or may not a continuation of #1009 \r\n\r\nOn some builds, the tests fail with\r\n```\r\n[...]\r\nastropy/io/votable/tests/vo_test.py:71: test_parse_single_table2 PASSED\r\nmake[1]: *** [test-python3.3] Error 245\r\nmake: *** [build-arch] Error 2\r\ndpkg-buildpackage: error: debian/rules build-arch gave error exit status 2\r\nastropy/io/votable/tests/vo_test.py:202: test_regression PASSED\r\n[...]\r\n```\r\nOn the current release, this is the case for the Debian build on the ""Hurd"" kernel, but it also happened elsewhere (powerpc, sparc). The error seems not appear on the same place, and there is not other output connected to it.\r\n\r\nI have no two builds with exactly the same environment available yet, however:\r\n* For Hurd, there is \r\n  * a [succeeding build](https://buildd.debian.org/status/fetch.php?pkg=python-astropy&arch=hurd-i386&ver=0.3-1&stamp=1385827651) for the original package, and \r\n  * a [failed build](https://buildd.debian.org/status/fetch.php?pkg=python-astropy&arch=hurd-i386&ver=0.3-2&stamp=1386617981) for the package patched with the big-endian changes as noted in #1849 (Hurd is little endian).\r\n* For Powerpc, version 0.2.5, there is \r\n  * a [build failure](https://buildd.debian.org/status/fetch.php?pkg=python-astropy&arch=powerpc&ver=0.2.5-1&stamp=1382897366) on Debian, \r\n  * but for the (very similar) Ubuntu distribution, the [build succeeds](https://launchpad.net/ubuntu/+source/python-astropy/0.2.5-1/+build/5169743/+files/buildlog_ubuntu-trusty-powerpc.python-astropy_0.2.5-1_UPLOADING.txt.gz).\r\n'"
1877,23922642,taldcroft,taldcroft,2013-12-08 12:19:39,2014-06-27 17:22:03,2013-12-08 23:46:44,closed,,v0.3.1,20,Affects-dev;Affects-release;Bug;installation,https://api.github.com/repos/astropy/astropy/issues/1877,b'Import fails on Python 3 if setup.py exists in current directory',"b'The `__init__.py` test of whether the user is in the astropy source directory just checks for the existence of `setup.py`.  This can easily have false positives, as first noted in #1875.\r\n```\r\n    if sys.version_info[0] >= 3 and os.path.exists(\'setup.py\'):\r\n        _rollback_import(\r\n            ""You appear to be trying to import astropy from within a source ""\r\n            ""checkout. This is currently not possible using Python 3 due to ""\r\n            ""the reliance of 2to3 to convert some of Astropy\'s subpackages ""\r\n            ""for Python 3 compatibility."")\r\n```'"
1872,23887637,taldcroft,taldcroft,2013-12-06 21:49:31,2014-06-17 07:18:27,2013-12-31 11:49:10,closed,,v0.4.0,33,Affects-release;Bug;table,https://api.github.com/repos/astropy/astropy/issues/1872,b'Change the subclassing pattern for MaskedColumn',"b'As originally discussed in #1471 and https://github.com/numpy/numpy/issues/4086, the original `MaskedColumn` implementation did not subclass `MaskedArray` in the pattern that was intended by the numpy.ma developers.  We  used the `np.ndarray` subclassing, but for `MaskedArray` one should do something like:\r\n```\r\nclass MSubArray(SubArray, MaskedArray):\r\n    def __new__(cls, data, info={}, mask=nomask):\r\n        subarr = SubArray(data, info)\r\n        _data = MaskedArray.__new__(cls, data=subarr, mask=mask)\r\n        _data.info = subarr.info\r\n        return _data\r\n```\r\nThis seemingly small change ended up turning into a biggish reorganization of the Column classes in order to not introduce any change in behavior.  As a benefit the two mostly-similar `Column.__new__` and `MaskedColumn.__new__` are now handled with one `BaseColumn.__new__`.\r\n\r\nI still need to back out #1471 and  https://github.com/astropy/astropy/commit/ff6039e8 to make sure that this update is really fixing everything.'"
1867,23754382,taldcroft,mdboom,2013-12-04 23:16:20,2014-07-02 02:59:32,2013-12-06 13:31:24,closed,mdboom,v0.3.1,9,Affects-release;Bug;table,https://api.github.com/repos/astropy/astropy/issues/1867,b'Table sort fails for unicode fields in numpy 1.5',"b""From #1864:\r\n\r\nFails for unicode columns (numpy 1.5, Python 2.7):\r\n```\r\nIn [7]: t = Table([[u'Max', u'Jo', u'John'], [u'Miller', u'Miller', u'Jackson'],[12,15,18]], names=('firstname','name','tel'))\r\n\r\nIn [8]: t._data\r\nOut[8]: \r\narray([(u'Max', u'Miller', 12), (u'Jo', u'Miller', 15),\r\n       (u'John', u'Jackson', 18)], \r\n      dtype=[('firstname', '<U4'), ('name', '<U7'), ('tel', '<i8')])\r\n\r\nIn [9]: t.sort(['name', 'firstname'])\r\n\r\nIn [10]: print t\r\nfirstname   name  tel\r\n--------- ------- ---\r\n     John Jackson  18\r\n      Max  Miller  12\r\n       Jo  Miller  15\r\n```\r\n\r\nWorks for string-type columns:\r\n```\r\nIn [11]: t = Table([['Max', 'Jo', 'John'], ['Miller','Miller','Jackson'],[12,15,18]], names=('firstname','name','tel'))\r\n\r\nIn [12]: t.dtype\r\nOut[12]: dtype([('firstname', '|S4'), ('name', '|S7'), ('tel', '<i8')])\r\n\r\nIn [13]: t.sort(['name', 'firstname'])\r\n\r\nIn [14]: print t\r\nfirstname   name  tel\r\n--------- ------- ---\r\n     John Jackson  18\r\n       Jo  Miller  15\r\n      Max  Miller  12\r\n```\r\n\r\nThis is due to a numpy bug.  The only reasonable course of action here is to detect a situation where the user is going to hit the numpy bug (sorting on unicode column(s) in numpy 1.5) and then abort with an informative error message.\r\n\r\nUnknown at this time if this affects any other versions, e.g. < numpy 1.6.2."""
1864,23737738,mdboom,mdboom,2013-12-04 19:01:17,2014-07-13 16:15:33,2013-12-10 19:20:39,closed,,v0.3.1,23,Affects-release;Bug;table,https://api.github.com/repos/astropy/astropy/issues/1864,b'Refactor astropy.table to use six / Fix unicode issue',"b'When trying to implement #1766, I noticed that `Table.__str__` fails when the table contains Unicode columns containing non-ascii characters.\n\nI could have solved that in isolation, but it actually got fairly involved and involved updates to many disparate parts of the code.  Simply moving to use `six` instead (with the corresponding use of `from __future__ import unicode_literals`) resolves it automatically.\n\nI did not ""sixify"" the tests, as this actually better tests how most users will run their code in either Python 2 or 3.'"
1849,23523953,olebole,astrofrog,2013-11-30 17:51:57,2016-02-12 10:02:13,2016-02-12 10:02:13,closed,embray,,17,Affects-release;Bug;io.fits;io.registry;platform-ppc;table,https://api.github.com/repos/astropy/astropy/issues/1849,"b'test_connect.py failure on mips, powerpc, s390x, sparc'","b'On mips, powerpc, s390x, and sparc, the Debian package build for version 0.3 fails in the testing step on python-2.7.5 with errors like:\r\n```\r\n_________________________ TestSingleTable.test_simple __________________________\r\n>       assert equal_data(t1, t2)\r\nE       assert equal_data(<Table rows=4 names=(\'a\',\'b\',\'c\')>\\narray([(1, u\'a\', 2.3), (2, u\'b\', 4.5), (3, ...6.7), (4, u\'d\', 8.9)], \\n      dtype=[(\'a\', \'>i4\'), (\'b\', \'>U1\'), (\'c\', \'>f8\')]),\r\n                          <Table rows=4 names=(\'a\',\'b\',\'c\')>\\narray([(1, \'\\x00\\x00\\x00a\', 2.3), (2, \'\\x00...\'\\x00\\x00\\x00d\', 8.9)], \\n      dtype=[(\'a\', \'>i4\'), (\'b\', \'S4\'), (\'c\', \'>f8\')]))\r\n\r\nastropy/io/fits/tests/test_connect.py:38: AssertionError\r\n```\r\nThe assertion errors are in:\r\nastropy/io/fits/tests/test_connect.py, lines 38, 50, 75, 84, 97, 111, 148, 164.\r\n\r\nAlso, there are doctest failures:\r\n```\r\n___________________ [doctest] astropy.table.np_utils.hstack ____________________\r\n423     --------\r\n424 \r\n425     To stack two arrays horizontally (by columns) do::\r\n426 \r\n427       >>> from astropy.table import np_utils\r\n428       >>> t1 = np.array([(1, 2),\r\n429       ...                (3, 4)], dtype=[(\'a\', \'i4\'), (\'b\', \'i4\')])\r\n430       >>> t2 = np.array([(5, 6),\r\n431       ...                (7, 8)], dtype=[(\'c\', \'i4\'), (\'d\', \'i4\')])\r\n432       >>> np_utils.hstack([t1, t2])\r\nExpected:\r\n    array([(1, 2, 5, 6),\r\n           (3, 4, 7, 8)],\r\n          dtype=[(\'a\', \'<i4\'), (\'b\', \'<i4\'), (\'c\', \'<i4\'), (\'d\', \'<i4\')])\r\nGot:\r\n    array([(1, 2, 5, 6), (3, 4, 7, 8)], \r\n          dtype=[(\'a\', \'>i4\'), (\'b\', \'>i4\'), (\'c\', \'>i4\'), (\'d\', \'>i4\')])\r\n\r\nastropy/table/np_utils.py:432: DocTestFailure\r\n```\r\nand similarly in line 320, and another here:\r\n```\r\n______________________ [doctest] astropy.table.table.Row _______________________\r\n880     """"""A class to represent one row of a Table object.\r\n881 \r\n882     A Row object is returned when a Table object is indexed with an integer\r\n883     or when iterating over a table::\r\n884 \r\n885       >>> table = Table([(1, 2), (3, 4)], names=(\'a\', \'b\'),\r\n886       ...               dtype=(\'int32\', \'int32\'))\r\n887       >>> row = table[1]\r\n888       >>> row\r\nDifferences (unified diff with -expected +actual):\r\n    @@ -1,3 +1,3 @@\r\n     <Row 1 of table\r\n      values=(2, 4)\r\n    - dtype=[(\'a\', \'<i4\'), (\'b\', \'<i4\')]>\r\n    + dtype=[(\'a\', \'>i4\'), (\'b\', \'>i4\')]>\r\n\r\nastropy/table/table.py:888: DocTestFailure\r\n```\r\nOn i386, amd64, arm, ia64, kfreebsd, and hurd, the tests all pass.\r\n\r\nBuild log URLs:\r\n* [mips](https://buildd.debian.org/status/fetch.php?pkg=python-astropy&arch=mips&ver=0.3-1&stamp=1385823326)\r\n* [powerpc](https://buildd.debian.org/status/fetch.php?pkg=python-astropy&arch=powerpc&ver=0.3-1&stamp=1385819892)\r\n* [s390x](https://buildd.debian.org/status/fetch.php?pkg=python-astropy&arch=s390x&ver=0.3-1&stamp=1385819884)\r\n* [All build logs](https://buildd.debian.org/status/logs.php?pkg=python-astropy)'"
1836,23381849,damleborgne,embray,2013-11-27 11:44:41,2014-06-13 12:08:28,2014-05-05 19:49:03,closed,,v0.3.2,5,Bug;modeling,https://api.github.com/repos/astropy/astropy/issues/1836,b'param_sets method not working with SerialCompositeModel',"b'It looks like the embedded models don\'t ""pass"" the parameters to the SerialCompositeModel instance:\r\n\r\nThe following code:\r\n\r\n```\r\nx = np.arange(5)\r\noff = apm.models.Shift(-3.2)\r\npoly1 = apm.models.Polynomial1D(3)\r\nserial_composite_model = apm.SerialCompositeModel([off, poly1], inmap=[[\'x\'], [\'y\']], outmap=[[\'y\'], [\'z\']])\r\nprint serial_composite_model.param_sets\r\n```\r\n\r\nproduces the following error:\r\n\r\n```\r\nERROR: AttributeError: \'SerialCompositeModel\' object has no attribute \'offsets\' [astropy.modeling.core]\r\nTraceback (most recent call last):\r\n  File ""test_mod.py"", line 33, in <module>\r\n    print serial_composite_model.param_sets\r\n  File ""/Library/Frameworks/Python.framework/Versions/Current/lib/python2.7/site-packages/astropy/modeling/core.py"", line 222, in param_sets\r\n    parameters = [getattr(self, attr) for attr in self.param_names]\r\nAttributeError: \'SerialCompositeModel\' object has no attribute \'offsets\'\r\n```\r\n'"
1834,23365473,mhvk,mdboom,2013-11-27 03:40:32,2014-06-21 10:43:21,2013-12-10 17:10:08,closed,,v0.3.1,9,Bug;units,https://api.github.com/repos/astropy/astropy/issues/1834,"b""Correct behaviour of inplace ufunc's for Quantities holding non-contiguous data""","b""With the current implementation of `__array_prepare__`, for in-place operations we return a copy of `self` with the real `self` hidden inside. Unfortunately, copying does not preserve strides, and as a result, one gets a `TypeError` if one feeds in non-contiguous data:\r\n```\r\nimport astropy.units as u\r\nq = u.Quantity([1.,2.,3.,4.], u.m)\r\nq2 = q[::2]\r\nq2 += 1.*u.cm\r\nERROR: TypeError: __array_prepare__ must return an ndarray or subclass thereof which is otherwise identical to its input [IPython.core.interactiveshell]\r\n```\r\n\r\nThis PR fixes this by, instead, hiding a copy of `self` inside self, and then setting `self` back to it after the (possibly wrong) straight numpy operation has been applied.\r\n\r\nOne way in which this is inferior to what was there, is that now `self` *will* contain wrong data for a short instant. But I'm not sure how this can be avoided (and not sure it is a big problem, as in any case the data is changing).\r\n\r\nAlso added a test case; will update `CHANGES.rst` once this has been reviewed."""
1832,23362070,taldcroft,taldcroft,2013-11-27 01:45:02,2015-01-13 17:35:49,2014-02-27 20:49:57,closed,,v0.3.2,7,Affects-release;Bug;coordinates,https://api.github.com/repos/astropy/astropy/issues/1832,b'Coordinates equality comparison fails for array values',"b""```\r\nIn [1]: from astropy.coordinates import ICRS, Angle\r\nIn [2]: c1 = ICRS([1,2], [3,4], unit=('deg', 'deg'))\r\nIn [3]: c1 == c1\r\nERROR: ValueError: The truth value of an array with more than one element is ambiguous. Use a.any() or a.all() [astropy.coordinates.coordsystems]\r\n---------------------------------------------------------------------------\r\nValueError                                Traceback (most recent call last)\r\n<ipython-input-3-5768a5d8dcd9> in <module>()\r\n----> 1 c1 == c1\r\n\r\n/data/baffin/tom/git/astropy/astropy/coordinates/coordsystems.pyc in __eq__(self, other)\r\n     50     def __eq__(self, other):\r\n     51         try:\r\n---> 52             return (self.latangle == other.latangle and\r\n     53                     self.lonangle == other.lonangle and\r\n     54                     self.distance == other.distance and\r\n\r\nValueError: The truth value of an array with more than one element is ambiguous. Use a.any() or a.all()\r\n```\r\nNeeds `np.all()` around the comparisons."""
1831,23332998,taldcroft,mdboom,2013-11-26 17:57:04,2013-12-19 16:29:32,2013-12-19 16:27:18,closed,,v0.3.1,3,Bug;coordinates;Critical,https://api.github.com/repos/astropy/astropy/issues/1831,b'Coordinate to_string() producing invalid sexigesimal output',"b""```\r\n>>> import astropy\r\n>>> astropy.__version__\r\n'0.3'\r\n>>> from astropy.coordinates import ICRS, Angle, Longitude\r\n>>> c = ICRS(1, 2, unit=('deg', 'deg'))\r\n>>> c.to_string()\r\nu'0h04m05.32907e-14s 2d00m00s'\r\n```\r\nBare Angle and Longitude appear to be OK:\r\n```\r\n>>> a = Angle(1, unit='deg')\r\n>>> a.to_string()\r\nu'1d00m00s'\r\n\r\n>>> a = Longitude(1, unit='deg')\r\n>>> a.to_string()\r\nu'1d00m00s'\r\n\r\n>>> a.to('hourangle').to_string()\r\nu'0h04m00s'\r\n```\r\n"""
1830,23325309,astrofrog,astrofrog,2013-11-26 16:13:43,2014-06-18 07:02:25,2013-12-03 21:15:04,closed,,v0.3.1,5,Bug;modeling,https://api.github.com/repos/astropy/astropy/issues/1830,b'Modeling test failure on MacOS X',"b""I'm seeing a failure on MacOS X for one of the modeling tests:\r\n\r\n```\r\n=================================== FAILURES ===================================\r\n____________________________ [doctest] fitting.rst _____________________________\r\n037     >>> p1.c1 = 2\r\n038     >>> p1.parameters\r\n039     array([ 1.,  2.,  0.,  0.])\r\n040     >>> x = np.arange(10)\r\n041     >>> y = p1(x)\r\n042     >>> yy = np.array([y, y]).T\r\n043     >>> p2 = models.Polynomial1D(3, param_dim=2)\r\n044     >>> pfit = fitting.LinearLSQFitter()\r\n045     >>> new_model = pfit(p2, x, yy)\r\n046     >>> print(new_model.param_sets)\r\nDifferences (unified diff with -expected +actual):\r\n    @@ -1,4 +1,4 @@\r\n     [[  1.00000000e+00   1.00000000e+00]\r\n      [  2.00000000e+00   2.00000000e+00]\r\n    - [  3.88335494e-16   3.88335494e-16]\r\n    - [ -2.997...e-17  -2.997...e-17]]\r\n    + [  1.35314993e-16   1.35314993e-16]\r\n    + [ -1.65733755e-17  -1.65733755e-17]]\r\n\r\n/Users/Shared/Jenkins/Home/jobs/astropy-master-osx-10.8-multiconfig/workspace/NV/1.7.1/PV/2.7/docs/modeling/fitting.rst:46: DocTestFailure\r\n generated xml file: /Users/Shared/Jenkins/Home/jobs/astropy-master-osx-10.8-multiconfig/workspace/NV/1.7.1/PV/2.7/junit.xml \r\n======= 1 failed, 4812 passed, 238 skipped, 11 xfailed in 280.93 seconds =======\r\n```\r\n\r\ncc @nden\r\n\r\nStrangely, it only happens with Python 2.6 and 2.7\r\n"""
1822,23177048,embray,embray,2013-11-23 00:34:37,2014-07-18 20:54:17,2014-04-23 15:17:03,closed,embray,v0.3.2,9,Bug;testing,https://api.github.com/repos/astropy/astropy/issues/1822,b'Fix tests that violate isolation',"b""The purpose of this PR is to fix a handful of tests that modify global state in some way, either unnecessarily, or necessarily but without restoring the previous state.  This causes tests to fail if they are run multiple times within the same Python session (mainly, multiple subsequent runs of `astropy.test()`).\r\n\r\nThis PR is not complete--there are still a few more to knock out.  But I'm putting this up now so I don't forget about it."""
1820,23166920,embray,embray,2013-11-22 20:55:08,2014-04-18 20:46:33,2014-04-18 20:46:27,closed,,,1,Bug;testing,https://api.github.com/repos/astropy/astropy/issues/1820,b'Test failures on Windows 7?',"b""Sorry for the lack of details on this, but I've been trying to build the Windows installers for the Astropy 0.3 release and am still having some issues.  I've yet to determine whether these issues are due to issues on *my* Windows 7 machine, or if they are more general.  I am going to to try to rebuild my Python installations and see if I have any better luck.\r\n\r\nMost of the issues appear to be minor and insubstantial issues with the tests themselves, and not due to actual broken functionality.  But it's still troubling.  None of these issues have come up in my testing on Windows XP and seem unrelated to #1765.\r\n\r\nI'll update this more as I have more details and have identified an actual pattern..."""
1815,23096699,kbarbary,astrofrog,2013-11-21 20:53:30,2014-04-11 13:10:00,2014-04-11 13:10:00,closed,,v0.3.2,4,Bug;cosmology,https://api.github.com/repos/astropy/astropy/issues/1815,b'BUG cosmology methods with integer arrays',"b""There is unexpected behavior in some of the cosmology methods when passing an array of integers. Here is one example:\r\n\r\n```python\r\n>>> import numpy as np\r\n>>> from astropy.cosmology import Planck13\r\n>>> z_int = np.array([53, 54, 55, 56])\r\n>>> z_float = np.array([53., 54., 55., 56.])\r\n>>> Planck13.Onu(z_int)\r\narray([ 0.0092907,  0.0094595,  0.       ,  0.       ])\r\n>>> Planck13.Onu(z_float)\r\narray([ 0.00938808,  0.00948427,  0.00958064,  0.00967719])\r\n```\r\n\r\nAt a quick look, the problem seems to arise from L583 of core.py:\r\n```python\r\nretarr = np.empty_like(z)\r\nfor i, redshift in enumerate(z):\r\n    curr_nu_y = self._nu_y / (1.0 + redshift)\r\n    rel_mass_per = (1.0 + (0.3173 * curr_nu_y) ** p) ** invp\r\n    rel_mass = rel_mass_per.sum() + self._nmasslessnu\r\n    retarr[i] = prefac * self._neff_per_nu * rel_mass\r\nreturn retarr\r\n```\r\nwhere a return array is allocated as an array of type matching the input array (in this case integers) and then filled with floats (which are implicitly cast to integers upon assignment).\r\n\r\nI'm raising this as an issue rather than a PR to check if we should simply fix this by changing L583 to `retarr = np.empty(z.shape, dtype=np.float)` or if we should explicitly get a typed view of redshift arrays upstream of this function.\r\n\r\ncc @rbiswas4 who discovered this."""
1811,23024648,mhvk,eteq,2013-11-20 21:16:36,2014-06-26 14:55:01,2014-05-07 17:41:21,closed,,v0.3.2,29,Bug;Docs;testing,https://api.github.com/repos/astropy/astropy/issues/1811,b'BUG astropy.test() does not run docstring tests',"b'Yet another follow-up on #1752 and #1789. Following a suggestion of @mdboom, it seems that currently if one runs `astropy.test()`, all docstring tests are skipped, unlike what happens if one does `python setup.py test`.\r\n\r\nOne can see that from looking at the output, where the latter includes lines like,\r\n```\r\nastropy/units/core.py ....\r\n```\r\nwhen the former does not -- though it does have a strange ending with `WARNING`\r\nrepeated multiple times:\r\n```\r\n.\r\n.\r\n.\r\n============ 4807 passed, 88 skipped, 13 xfailed in 139.48 seconds =============\r\nWARNINGWARNINGWARNINGWARNINGWARNINGWARNINGWARNINGWARNINGWARNINGWARNINGWARNINGWARNINGWARNINGWARNINGWARNINGWARNINGWARNINGWARNINGWARNINGWARNINGWARNINGWARNINGWARNINGWARNINGWARNINGWARNINGWARNINGWARNINGWARNINGWARNINGWARNING0\r\n```'"
1804,22796280,cdeil,astrofrog,2013-11-17 13:05:38,2013-11-20 18:10:50,2013-11-20 18:10:50,closed,,v0.3.0,9,Bug;convolution,https://api.github.com/repos/astropy/astropy/issues/1804,b'Using a kernel in an arithmetic expression sometimes changes its state',"b""Test case:\r\n```python\r\nimport numpy as np\r\nfrom astropy import convolution\r\n\r\non_kernel = convolution.Tophat2DKernel(radius=10)\r\non_kernel.normalize(mode='peak')\r\noff_kernel = convolution.Ring2DKernel(radius_in=50, width=10)\r\noff_kernel.normalize(mode='peak')\r\n\r\nprint(np.max(on_kernel), np.max(off_kernel))\r\non_kernel + off_kernel\r\nprint(np.max(on_kernel), np.max(off_kernel))\r\non_kernel + off_kernel\r\nprint(np.max(on_kernel), np.max(off_kernel))\r\non_kernel + off_kernel\r\nprint(np.max(on_kernel), np.max(off_kernel))\r\n```\r\n\r\nCurrent output:\r\n```\r\n(1.0, 1.0)\r\n(1.0, 1.0)\r\n(1.0, 2.0)\r\n(1.0, 3.0)\r\n```\r\n\r\nExpected output:\r\n```\r\n(1.0, 1.0)\r\n(1.0, 1.0)\r\n(1.0, 1.0)\r\n(1.0, 1.0)\r\n```\r\n\r\nI think that's a bug ... using a kernel in an arithmetic expression shouldn't change it's state. This doesn't seem to happen with all kernels (e.g. I couldn't reproduce the issue with a `Box1DKernel`).\r\n\r\nCC @astrofrog @adonath """
1795,22733930,iz-sai,embray,2013-11-15 14:08:28,2013-11-15 18:24:37,2013-11-15 17:07:21,closed,,v0.3.0,8,Bug,https://api.github.com/repos/astropy/astropy/issues/1795,b'Strange mask values for FITS table',"b""Hi,\r\n\r\nI've just created a 3-row FITS table in TOPCAT (check it at http://nice.sai.msu.ru/~iz/tmp/astropy_masked_table.fits), but when I'm trying to read it with astropy, columns of my interest (e.g. 'OBS_ID') are somehow masked with (True, False, False) mask instead of (False, False, False) and hence without modifying the mask I'm not able to see all 3 values (only 2 pop up) which are perfectly correct and must be available to user. I'm worried as my other larger tables in more mission critical software where I'm using astropy can be masked incorrectly...\r\n\r\n```\r\nIn [53]: tt = Table.read('astropy_masked_table.fits')\r\n\r\nIn [54]: tt['OBS_ID']\r\nOut[54]: \r\n<MaskedColumn name='OBS_ID' unit=None format=None description=None>\r\nmasked_array(data = [-- 0204540201 0560180901],\r\n             mask = [ True False False],\r\n       fill_value = N/A)\r\n\r\n\r\nIn [55]: tt.mask[:] = False\r\n\r\nIn [56]: tt['OBS_ID']\r\nOut[56]: \r\n<MaskedColumn name='OBS_ID' unit=None format=None description=None>\r\nmasked_array(data = [0655510201 0204540201 0560180901],\r\n             mask = [False False False],\r\n       fill_value = N/A)\r\n```"""
1790,22717467,jwoillez,astrofrog,2013-11-15 07:20:58,2014-07-02 17:49:42,2013-11-15 13:14:57,closed,,v0.3.0,3,Bug;Effort-low,https://api.github.com/repos/astropy/astropy/issues/1790,b'One more subprocess fix.',"b'Missed this one. Hopefully, the last one.'"
1788,22691019,embray,embray,2013-11-14 20:38:57,2014-06-27 00:19:19,2013-11-15 17:09:14,closed,,v0.3.0,3,Bug,https://api.github.com/repos/astropy/astropy/issues/1788,b'Fix bug when building with --use-system-cfitsio and CFITSIO < 3.35',"b'This is required in order to build the io.fits.compression module with --use-system-cfitsio on systems where CFITSIO < 3.35 (the NO_DITHER macro is not defined in older versions, and the value used where NO_DITHER *is* used in 3.35 is 0, not -1 which is what NO_DITHER is defined in 3.35)""\r\n\r\nThanks @pllim for testing this.'"
1765,22416147,embray,astrofrog,2013-11-10 20:16:08,2016-06-12 11:46:20,2016-06-12 11:46:20,closed,embray,,6,Bug;testing;Windows,https://api.github.com/repos/astropy/astropy/issues/1765,b'Investigate irritating test failures on Windows',"b'Currently all the tests are passing for all the Windows XP builds being performed with Jenkins.  However, in almost every test run for the last dozen or so one or two of the configuration ""fail"" due to the following:\r\n\r\n```\r\n============================= test session starts ==============================\r\n\r\nplatform win32 -- Python 3.1.4 -- pytest-2.4.0\r\n\r\n\r\n\r\nRunning tests with Astropy version 0.3.dev6508.\r\n\r\nRunning tests in astropy.\r\n\r\n\r\n\r\nPlatform: Windows-XP-5.1.2600-SP3\r\n\r\n\r\n\r\nExecutable: C:\\PythonVirtualenvs\\python-3.1-numpy-1.6.0\\Scripts\\python.exe\r\n\r\n\r\n\r\nFull Python Version: \r\n\r\n3.1.4 (default, Jun 12 2011, 15:05:44) [MSC v.1500 32 bit (Intel)]\r\n\r\n\r\n\r\nencodings: sys: utf-8, locale: cp1252, filesystem: mbcs, unicode bits: 15\r\n\r\nbyteorder: little\r\n\r\nfloat info: dig: 15, mant_dig: 15\r\n\r\n\r\n\r\nNumpy: 1.6.0\r\n\r\nScipy: not available\r\n\r\nMatplotlib: not available\r\n\r\nh5py: not available\r\n\r\n\r\n\r\ncollected 4938 items / 3 skipped\r\n```\r\n\r\n...\r\n\r\n```\r\n\r\n generated xml file: E:\\Builds\\astropy-winxp32-multiconfig\\workspaces\\COMPILER\\msvc\\NUMPY_VER\\numpy-1.6.0\\PYTHON_VER\\python-3.1\\junit.xml \r\n\r\n====== 4687 passed, 242 skipped, 11 xfailed, 1 xpassed in 219.50 seconds =======\r\n\r\nerror: c:\\windows\\temp\\astropy-test-q0qnox\\lib.win32-3.1\\astropy\\convolution\\boundary_extend.pyd: Access is denied\r\n\r\nE:\\Builds\\astropy-winxp32-multiconfig\\workspaces\\COMPILER\\msvc\\NUMPY_VER\\numpy-1.6.0\\PYTHON_VER\\python-3.1>exit 1 \r\nBuild step \'Execute Windows batch command\' marked build as failure\r\nRecording test results\r\nFinished: FAILURE\r\n```\r\n\r\nIn other words all the tests that are being run pass, but the test script exits with an error condition due to failure to delete this `boundary_extend.pyd` file from the temp testing directory, likely due to a handle being held open to it.  It\'s a weird timing issue that appears to occur semi-randomly on any of the configurations.  Very annoying.\r\n\r\nI can still manually check all the failing builds to see that the tests are indeed passing which is all that really matters, but it\'s still something worth trying to fix.  I\'ve never seen this issue before...'"
1760,22382571,astrofrog,embray,2013-11-09 08:41:34,2014-07-06 14:29:14,2013-11-11 22:16:30,closed,,v0.3.0,33,Bug;vo,https://api.github.com/repos/astropy/astropy/issues/1760,b'VO cone search not working due to issue in Spinner class',"b""@pllim @mdboom - the following VO cone search example isn't working:\r\n\r\n```\r\nfrom astropy.vo.client import conesearch\r\nfrom astropy import coordinates as coords\r\nc = coords.ICRS.from_name('M31')\r\nfrom astropy import units as u\r\ntwomass = 'Two Micron All Sky Survey (2MASS) 1'\r\nresult = conesearch.conesearch(c, 0.1 * u.degree, catalog_db=twomass)\r\n```\r\n\r\ngives:\r\n\r\n```\r\nDownloading http://stsdas.stsci.edu/astrolib/vo_databases/conesearch_good.json\r\n|======================================================================================================================================================================================================================|  57k/ 57k (100.00%)        00s\r\nTrying http://wfaudata.roe.ac.uk/twomass-dsa/DirectCone?DSACAT=TWOMASS&DSATAB=twomass_psc&\r\nDownloading http://wfaudata.roe.ac.uk/twomass-dsa/DirectCone?DSACAT=TWOMASS&DSATAB=twomass_psc&SR=0.1&DEC=41.26875&RA=10.6847083&VERB=1 [Failed]\r\nWARNING: W25: ?:?:?: W25: 'http://wfaudata.roe.ac.uk/twomass-dsa/DirectCone?DSACAT=TWOMASS&DSATAB=twomass_psc&' failed with: 'ascii' codec can't encode character u'\\u25d3' in position 0: ordinal not in range(128) [astropy.io.votable.exceptions]\r\nERROR: VOSError: None of the available catalogs returned valid results. [astropy.vo.client.vos_catalog]\r\n---------------------------------------------------------------------------\r\nVOSError                                  Traceback (most recent call last)\r\n<ipython-input-20-6a13c61a43b7> in <module>()\r\n----> 1 result = conesearch.conesearch(c, 0.1 * u.degree, catalog_db=twomass)\r\n\r\n/Users/tom/Library/Python/2.7/lib/python/site-packages/astropy-0.3.dev6508-py2.7-macosx-10.8-x86_64.egg/astropy/vo/client/conesearch.pyc in conesearch(center, radius, verb, **kwargs)\r\n    193 \r\n    194     return vos_catalog.call_vo_service(CONESEARCH_DBNAME(),\r\n--> 195                                        kwargs=args, **kwargs)\r\n    196 \r\n    197 \r\n\r\n/Users/tom/Library/Python/2.7/lib/python/site-packages/astropy-0.3.dev6508-py2.7-macosx-10.8-x86_64.egg/astropy/vo/client/vos_catalog.pyc in call_vo_service(service_type, catalog_db, pedantic, verbose, cache, kwargs)\r\n    426             vo_warn(W25, (url, str(e)))\r\n    427 \r\n--> 428     raise VOSError('None of the available catalogs returned valid results.')\r\n    429 \r\n    430 \r\n\r\nVOSError: None of the available catalogs returned valid results.\r\n```\r\n\r\nI'm working on the what's new document, hence how I found this. Is there a quick fix?\r\n\r\n**EDIT: see my last comment for the cause of this bug**"""
1722,21976573,astrofrog,astrofrog,2013-11-01 19:04:12,2013-11-15 19:22:33,2013-11-03 13:44:25,closed,,v0.3.0,1,Bug;modeling,https://api.github.com/repos/astropy/astropy/issues/1722,b'Bug in MexicanHat1DModel',"b'It looks like there is a bug in ``MexicanHat1DModel`` or in its docstring:\r\n\r\n```\r\nIn [10]: m = models.MexicanHat1DModel(amplitude=1., x_0=2.0, width=1.0)\r\nERROR: TypeError: __init__() takes exactly 4 arguments (3 given) [IPython.core.interactiveshell]\r\n---------------------------------------------------------------------------\r\nTypeError                                 Traceback (most recent call last)\r\n<ipython-input-10-defb35929526> in <module>()\r\n----> 1 m = models.MexicanHat1DModel(amplitude=1., x_0=2.0, width=1.0)\r\n\r\nTypeError: __init__() takes exactly 4 arguments (3 given)\r\n```\r\n\r\nBut the docstring says:\r\n\r\n```\r\nParameters\r\n----------\r\namplitude : float\r\n    Amplitude\r\nx_0 : float\r\n    Position of the peak\r\nwidth : float\r\n    Width of the mexican hat\r\n```\r\n\r\ncc @nden @adonath @cdeil'"
1721,21976478,astrofrog,astrofrog,2013-11-01 19:02:28,2013-11-03 20:04:34,2013-11-03 13:44:16,closed,,v0.3.0,2,Bug;modeling,https://api.github.com/repos/astropy/astropy/issues/1721,b'Bug in Trapezoidal1DModel',"b""I think there is a bug in the ``Trapezoidal1DModel`` class:\r\n\r\n```\r\nIn [7]: t = models.Trapezoid1DModel(amplitude=1., x_0=2.0, width=1.0, slope=0.5)\r\n\r\nIn [8]: t(np.linspace(0., 4., 20))\r\nOut[8]: \r\narray([ 2.25      ,  2.35526316,  2.46052632,  2.56578947,  2.67105263,\r\n        2.77631579,  2.88157895,  2.98684211,  1.        ,  1.        ,\r\n        1.        ,  1.        ,  0.98684211,  0.88157895,  0.77631579,\r\n        0.67105263,  0.56578947,  0.46052632,  0.35526316,  0.25      ])\r\n```\r\n\r\nThis doesn't seem right for the first 8 values?\r\n\r\ncc @nden @adonath @cdeil"""
1711,21895115,astrofrog,mdboom,2013-10-31 13:16:26,2013-11-06 22:04:21,2013-11-04 21:24:57,closed,,v0.3.0,4,Bug,https://api.github.com/repos/astropy/astropy/issues/1711,b'Angle.to_string bug for negative values',"b""The ``to_string`` method is broken for angles:\r\n\r\n```\r\nIn [2]: Angle(-0., unit='deg').to_string()\r\nOut[2]: '-0d00m-0s'\r\n```\r\n\r\nI've fixed this in \t99490e8 which will get incorporated into https://github.com/astropy/astropy/pull/1296 - but this is just to make sure that we fix the bug even if for any reason #1296 doesn't get merged."""
1699,21792096,sean-lockwood,embray,2013-10-29 22:13:57,2014-02-17 19:31:06,2014-02-17 19:31:06,closed,,v0.3.1,6,Bug;Effort-low;io.fits,https://api.github.com/repos/astropy/astropy/issues/1699,b'FITSDiff report broken',"b""The FITSDiff facility in astropy.io.fits is giving an unhelpful error when I request a report on the differences between two FITS files.\r\n\r\n```python\r\nfrom astropy.io import fits as pyfits\r\nIn [27]: a = pyfits.FITSDiff('orig/lbxmt1010_x1dsum.fits', 'output/lbxmt1010_x1dsum.fits')\r\nIn [28]: print a.report()\r\nERROR: TypeError: unicode argument expected, got 'str' [astropy.io.fits.diff]\r\nIn [46]: astropy.__version__\r\nOut[46]: '0.2'\r\n```\r\nBut I don't get this error when I import STScI pyfits directly (IRAFX 2013-10-24).\r\n```python\r\nIn [47]: import pyfits\r\nIn [48]: pyfits.__version__\r\nOut[48]: '3.2.dev'\r\n```\r\n\r\n-Sean"""
1692,21669851,eteq,astrofrog,2013-10-28 04:07:12,2015-01-13 17:35:56,2013-10-31 19:32:51,closed,taldcroft,v0.3.0,20,Bug;io.ascii,https://api.github.com/repos/astropy/astropy/issues/1692,b'ascii.read `name` keyword cuts off first row',"b""I've included the text of the file I'm reading at the bottom of this issue.  If I try the following:\r\n```\r\nfrom astropy.io import ascii \r\nt = ascii.read('file', names= ['a', 'b', 'c'])\r\nlen(t)\r\n```\r\nit says `t` has 26 rows, while the actual number of rows is 27.  However, if I instead do\r\n```\r\nt = ascii.read('file')\r\n```\r\nit says `t` has 27 rows!\r\n\r\nI guess there's a bug here somewhere in the `names` parsing, but it's not clear where...\r\n\r\ncc @taldcroft \r\n\r\n\r\nfile:\r\n```\r\n3 3.503374e-02  27.543909 \r\n4 4.143642e-02  23.133362 \r\n6 5.296628e-02  17.879936 \r\n8 6.335184e-02  14.784860 \r\n10 7.294666e-02  12.708647 \r\n12 8.194863e-02  11.202767 \r\n16 9.863398e-02  9.138494 \r\n20 1.140191e-01  7.770461 \r\n40 1.798141e-01  4.561298\r\n60 2.355798e-01  3.244847\r\n80 2.860021e-01  2.496477\r\n100 3.331038e-01  2.002067\r\n120 3.780198e-01  1.645364\r\n140 4.214853e-01  1.372562\r\n160 4.640228e-01  1.155066\r\n180 5.060299e-01  0.976168\r\n200 5.478243e-01  0.825403\r\n220 5.896708e-01  0.695861\r\n240 6.317970e-01  0.582787\r\n260 6.744042e-01  0.482790\r\n280 7.176742e-01  0.393390\r\n300 7.617747e-01  0.312724\r\n320 8.068627e-01  0.239368\r\n340 8.530875e-01  0.172213\r\n360 9.005927e-01  0.110380\r\n380 9.495178e-01  0.053166\r\n400 1.000000e+00  0.000000\r\n\r\n```"""
1673,21585126,taldcroft,taldcroft,2013-10-25 11:48:04,2013-10-26 14:04:20,2013-10-26 14:04:20,closed,,v0.3.0,7,Bug;table,https://api.github.com/repos/astropy/astropy/issues/1673,b'Column comparisons (besides ==) return Column object',"b""```\r\nIn [18]: t = Table()\r\nIn [19]: t['a'] = [1, 2, 3]\r\n\r\nIn [20]: t['a'] < 2\r\nOut[20]: \r\n<Column name='a' unit=None format=None description=None>\r\narray([ True, False, False], dtype=bool)\r\n\r\nIn [23]: t['a'] == 2\r\nOut[23]: array([False,  True, False], dtype=bool)\r\n``\r\n"""
1671,21581841,astrofrog,astrofrog,2013-10-25 10:27:36,2015-01-13 17:35:56,2013-11-01 15:14:30,closed,astrofrog,v0.3.0,10,Bug;table,https://api.github.com/repos/astropy/astropy/issues/1671,b'``Table.sort`` failing on MacOS X',"b'Thanks to the doctests that @healther added, Jenkins found that ``Table.sort`` also does not work correctly on MacOS X with Numpy < 1.7:\r\n\r\nhttps://jenkins.shiningpanda-ci.com/astropy/view/MacOS%20X/job/astropy-master-osx-10.8-multiconfig/\r\n\r\n@taldcroft - is there an easy way to fix this one?'"
1599,21197257,taldcroft,taldcroft,2013-10-18 02:21:52,2014-07-18 20:46:26,2013-10-23 16:33:18,closed,,v0.3.0,18,Bug,https://api.github.com/repos/astropy/astropy/issues/1599,b'Use mergesort in groups sorting to maintain original order',"b'Running table tests failed on mac because the quicksort alg gives a different order than on linux.  There is no guarantee that quicksort is stable, so this PR switches the sort algorithm to mergesort, which *is* stable.'"
1597,21189453,joergdietrich,embray,2013-10-17 22:19:28,2014-05-02 17:04:13,2014-05-02 17:04:13,closed,,v0.3.2,4,Bug;io.fits,https://api.github.com/repos/astropy/astropy/issues/1597,b'FITS_rec objects cannot be pickled',"b""```\r\n#!/usr/bin/env python\r\n\r\nimport pickle\r\nfrom astropy.io import fits\r\n\r\nhdulist = fits.open('table.fits')\r\ntab = hdulist[1].data\r\nprint pickle.loads(pickle.dumps(tab))\r\n```\r\nraises an \r\n```AttributeError: record array has no attribute _nfields```\r\n\r\nThis is a serious problem because nothing read from a fits table can be used with multiprocessing, which requires objects to be pickle-able."""
1596,21187639,embray,nden,2013-10-17 21:43:37,2013-11-04 18:28:31,2013-11-03 14:47:08,closed,,,3,Bug;modeling,https://api.github.com/repos/astropy/astropy/issues/1596,b'SLSQPFitter tries to fit all parameters',"b""The `FItter` classes have an internal attribute called `Fitter._fitpars` which is a list of all parameters from the model being fitted *excluding* tied and fixed parameters.\r\n\r\nSo for example if a model has 3 parameters, one of which is fixed, a fitter for that model has only 2 parameters in its `_fitpars` list.\r\n\r\nHowever, in the `SLSQPFitter`, all of the model's parameters were being used.  When the fitter goes to set its `_fitpars` with newly fitted values after a pass through the `fmin_slsqp` it changes the size of `_fitpars`.  This doesn't break anything obviously, but it can lead to inconsistent and incorrect results, I think.  @nden thinks this is a bug too."""
1539,20641833,weaverba137,embray,2013-10-07 21:55:49,2015-03-30 15:16:31,2015-03-30 15:16:31,closed,,v1.0.2,10,Bug;io.fits,https://api.github.com/repos/astropy/astropy/issues/1539,b'``ColDefs.change_attribute()`` no longer works',"b""The ``change_attribute()`` method of ColDefs doesn't work as advertised.  A code snippet that demonstrates this is below.\r\n\r\n```\r\nimport numpy as np\r\nfrom astropy.io import fits\r\n\r\nbits = 16\r\nu0 = np.arange(17,dtype=np.uint16)\r\nu = 2**u0 - np.uint16(1)\r\nbzero = np.uint16(2**(bits-1))\r\ncol = fits.Column(name='u2',array=u,format='I',bzero=bzero)\r\nprint(col)\r\ntable = fits.new_table([col])\r\nprint(table.data.columns)\r\n# This method call doesn't change bzero\r\ntable.data._coldefs.change_attrib('u2','bzero',0)\r\nprint(table.data.columns)\r\n# This method does work.\r\ntable.data._coldefs[0].bzero = 0\r\nprint(table.data.columns)\r\n```"""
1523,20453714,astrofrog,astrofrog,2013-10-03 13:27:20,2016-02-08 15:53:51,2016-01-29 13:50:16,closed,,,1,Bug;io.fits;io.misc,https://api.github.com/repos/astropy/astropy/issues/1523,b'Strings do not round-trip nicely to FITS tables in Python 3',"b""Not really high priority, but ran into this today:\r\n\r\n```\r\nIn [30]: t = Table()\r\n\r\nIn [31]: t['a'] = ['aa', 'bb', 'cc']\r\n\r\nIn [32]: t.write('test.fits', overwrite=True)\r\n\r\nIn [33]: t2 = Table.read('test.fits')\r\n\r\nIn [34]: print(np.array(t2['a']))\r\n['a\\x00\\x00\\x00a' 'b\\x00\\x00\\x00b' 'c\\x00\\x00\\x00c']\r\n```\r\n\r\nI think that we could probably make this smarter?"""
1489,20103563,podlipnik,embray,2013-09-26 11:20:59,2015-04-03 18:03:33,2015-04-03 18:03:33,closed,embray,,11,Affects-release;astropy-helpers;Bug;Effort-medium;installation;Package-expert,https://api.github.com/repos/astropy/astropy/issues/1489,b'Installation failed on Solaris 11 x64',"b'```\r\n$ python --version\r\nPython 2.7.5\r\n```\r\n\r\n```\r\n$ which cc\r\n/opt/solarisstudio12.3/bin/cc\r\n```\r\n\r\nastropy-0.2.4\r\n\r\n```\r\n$ python setup.py build\r\ncc: Warning: Option --version passed to ld, if ld is invoked, ignored otherwise\r\nusage: cc [ options ] files.  Use \'cc -flags\' for details\r\nTraceback (most recent call last):\r\n  File ""setup.py"", line 56, in <module>\r\n    adjust_compiler(NAME)\r\n  File ""/home/borut/admin/python/astropy-0.2.4/astropy/setup_helpers.py"", line 95, in adjust_compiler\r\n    version = get_compiler_version(c_compiler)\r\n  File ""/home/borut/admin/python/astropy-0.2.4/astropy/setup_helpers.py"", line 178, in get_compiler_version\r\n    version = output.split()[0]\r\nIndexError: list index out of range\r\n```\r\n\r\nAny ideas?'"
1471,19825405,taldcroft,astrofrog,2013-09-20 15:55:35,2014-06-12 09:11:26,2013-12-03 22:19:20,closed,,v0.3.1,17,Bug;Critical;table,https://api.github.com/repos/astropy/astropy/issues/1471,b'MaskedColumn finalize not giving expected results',"b""Slicing or doing other operations on a masked column doesn't propagate the other attributes:\r\n```\r\n>>> c = MaskedColumn(data=[1,2], name='a', description='a')\r\n>>> print c[1:2].description\r\nNone\r\n\r\n>>> c = Column(data=[1,2], name='a', description='a')\r\n>>> print c[1:2].description\r\na\r\n```\r\n"""
1387,18805721,taldcroft,mdboom,2013-08-30 19:29:06,2013-09-03 16:16:39,2013-09-03 16:16:39,closed,,,6,Bug;coordinates;units,https://api.github.com/repos/astropy/astropy/issues/1387,b'Inconsistent angle string unit in coordinates/angles gives incorrect errors / values',"b""In the 0.2.4 docs and code, this is seen:\r\n```\r\n>>> ICRSCoordinates('3d4m5s +6h7m8s', unit=(u.hour, u.degree))\r\nValueError: parse_hours: Invalid input string, can't parse to HMS. (3d4m5s)\r\n```\r\n\r\nIn master one gets:\r\n```\r\n>>> ICRSCoordinates('3d4m5s +6h7m8s', unit=(u.hour, u.degree))\r\nBoundsError: The angle(s) [ 5156.62015618  6016.05684887  6875.49354157] falls outside of the specified bounds (-5156.62015618, 5156.62015618) (in deg)\r\n\r\n>>> ICRSCoordinates('0d0m0s +0h0m0s', unit=(u.hour, u.degree))\r\nValueError: Unknown format code 'f' for object of type 'str'\r\n```\r\n\r\nThis may be related to this problem in Angle where giving an HMS string with unit=u.degree results in a length=3 array:\r\n```\r\nAngle('+6h7m8s', unit=u.degree)\r\n<Angle [u'90d00m00.00000s' u'105d00m00.00000s' u'120d00m00.00000s']>\r\n```\r\n\r\n\r\n"""
1376,18522982,migueldvb,embray,2013-08-25 16:21:00,2013-12-02 16:58:21,2013-12-02 16:57:56,closed,,,4,Bug;Docs;Effort-low,https://api.github.com/repos/astropy/astropy/issues/1376,b'Broken link in codeguide section',b'There is a broken link from\r\nhttp://docs.astropy.org/en/latest/development/codeguide.html\r\nto a blog post about super():\r\nhttp://keithdevens.com/weblog/archive/2011/Mar/16/Python.super\r\n\r\nIt looks like the site is currently under development and the URL may need to be updated when it comes back.'
1368,18492629,taldcroft,eteq,2013-08-23 21:06:21,2013-10-01 06:28:12,2013-10-01 06:28:12,closed,,v0.3.0,2,Bug;coordinates,https://api.github.com/repos/astropy/astropy/issues/1368,b'Coordinate cartesian components are not Quantities',"b'The components of a coordinate distance should have the same units as the distance.\r\n```\r\nIn [3]: c = coord.ICRSCoordinates(ra=10.68458, dec=41.26917,\r\n   ...:                               unit=(u.degree, u.degree),\r\n   ...:                               distance=coord.Distance(770, u.kpc))\r\n\r\nIn [4]: c.x\r\nOut[4]: 568.7128654235232\r\n\r\nIn [5]: type(c.x)\r\nOut[5]: float\r\n\r\nIn [6]: c.distance \r\nOut[6]: <Distance 770.00000 kpc>\r\n```\r\n'"
1346,18020212,astrofrog,taldcroft,2013-08-13 20:46:07,2014-07-08 08:48:53,2014-01-11 14:39:20,closed,,v0.3.1,3,Bug;io.ascii;table,https://api.github.com/repos/astropy/astropy/issues/1346,b'Issues with byte strings in ASCII table output',"b""When writing the following table to an ASCII file in Python 3:\r\n\r\n```\r\nfrom astropy.table import Table\r\ntable = Table.read('http://mpia.de/~robitaille/astropy/test.vot')\r\ntable.write('test.txt', format='ascii.fixed_width')\r\n```\r\n\r\nThe output is:\r\n\r\n```\r\n\r\n|    Prog |        Name |           Obs |   tos |   Type |    Vel | n_Vel |   Flow | n_Flow |  Fhigh | n_Fhigh |   Conf |        RAJ2000 |        DEJ2000 |\r\n| b'N032' | b'AFGL2591' | b'2003-12-06' | 16800 | b'MAP' |   -5.5 |  b'L' |  80578 |   b'L' | 203407 |    b'L' | b'6Cp' | b'20:29:24.87' | b'+40:11:19.8' |\r\n| b'N032' | b'AFGL2591' | b'2004-05-15' |  1140 | b'MAP' |   -5.5 |  b'L' |  80578 |   b'L' | 203407 |    b'L' | b'6Dp' | b'20:29:24.87' | b'+40:11:19.8' |\r\n| b'N032' | b'AFGL2591' | b'2004-05-15' |  7740 | b'MAP' |   -5.5 |  b'L' |  80578 |   b'L' | 203407 |    b'L' | b'6Dp' | b'20:29:24.87' | b'+40:11:19.8' |\r\n| b'N032' | b'AFGL2591' | b'2004-05-16' | 24060 | b'MAP' |   -5.5 |  b'L' |  80578 |   b'L' | 203407 |    b'L' | b'6Dp' | b'20:29:24.87' | b'+40:11:19.8' |\r\n| b'N032' | b'AFGL2591' | b'2004-05-17' |  3060 | b'MAP' |   -5.5 |  b'L' |  80578 |   b'L' | 203407 |    b'L' | b'6Dp' | b'20:29:24.87' | b'+40:11:19.8' |\r\n| b'PB3F' | b'AFGL2591' | b'2005-12-25' |  4050 | b'MAP' |    0.0 |  b'L' |  86610 |   b'L' | 230538 |    b'L' | b'6Cq' | b'20:29:24.80' | b'+40:11:19.0' |\r\n| b'PB3F' | b'AFGL2591' | b'2005-12-26' |  4050 | b'MAP' |    0.0 |  b'L' |  86610 |   b'L' | 230538 |    b'L' | b'6Cq' | b'20:29:24.80' | b'+40:11:19.0' |\r\n| b'P04A' | b'AFGL2591' | b'2006-02-03' |  9000 | b'MAP' |   -5.5 |  b'L' |  80578 |   b'L' | 203407 |    b'L' | b'6Aq' | b'20:29:24.87' | b'+40:11:19.5' |\r\n| b'PB3F' | b'AFGL2591' | b'2006-06-03' |   675 | b'MAP' |    0.0 |  b'L' |  86610 |   b'L' | 230538 |    b'L' | b'5Dq' | b'20:29:24.80' | b'+40:11:19.0' |\r\n| b'PB3F' | b'AFGL2591' | b'2006-06-04' |  7425 | b'MAP' |    0.0 |  b'L' |  86610 |   b'L' | 230538 |    b'L' | b'5Dq' | b'20:29:24.80' | b'+40:11:19.0' |\r\n| b'PB4A' | b'AFGL2591' | b'2007-02-19' |  9450 | b'MAP' |   -5.5 |  b'L' |  80126 |   b'L' |  81030 |    b'L' | b'6Aq' | b'20:29:24.87' | b'+40:11:19.5' |\r\n| b'PA4A' | b'AFGL2591' | b'2007-03-04' | 10800 | b'MAP' |   -5.5 |  b'L' | 203055 |   b'L' | 203739 |    b'L' | b'6Aq' | b'20:29:24.87' | b'+40:11:19.5' |\r\n| b'PA4A' | b'AFGL2591' | b'2007-03-13' | 10935 | b'MAP' |   -5.5 |  b'L' | 203055 |   b'L' | 203739 |    b'L' | b'6Bq' | b'20:29:24.87' | b'+40:11:19.5' |\r\n| b'PA4A' | b'AFGL2591' | b'2007-03-15' |  9450 | b'MAP' |   -5.5 |  b'L' | 203055 |   b'L' | 203739 |    b'L' | b'6Bq' | b'20:29:24.87' | b'+40:11:19.5' |\r\n```\r\n\r\nbut I think the writers need to be smarter and not show the ``b'...'``."""
1344,18019815,astrofrog,taldcroft,2013-08-13 20:39:12,2013-10-19 14:47:10,2013-10-08 17:01:15,closed,,v0.3.0,4,Bug;io.ascii;table,https://api.github.com/repos/astropy/astropy/issues/1344,b'Bug in IPAC writing',"b'The following table does not write to IPAC format:\r\n\r\n```\r\nIn [1]: from astropy.table import Table\r\n\r\nIn [2]: table = Table.read(\'http://mpia.de/~robitaille/astropy/test.vot\')\r\nDownloading http://mpia.de/~robitaille/astropy/test.vot\r\n|===============================================================================================================================| 7.7k/7.7k (100.00%)        00s\r\nWARNING: W50: None:21:3: W50: Invalid unit string \'""Y:M:D""\' [astropy.io.votable.exceptions]\r\nWARNING: W06: None:26:3: W06: Invalid UCD \'time.expo\': Unknown word \'time.expo\' [astropy.io.votable.exceptions]\r\nWARNING: W50: None:73:3: W50: Invalid unit string \'""h:m:s""\' [astropy.io.votable.exceptions]\r\nWARNING: W50: None:79:3: W50: Invalid unit string \'""d:m:s""\' [astropy.io.votable.exceptions]\r\n\r\nIn [3]: table.write(\'test.tbl\', format=\'ascii.ipac\')\r\nERROR: TypeError: object of type \'numpy.int32\' has no len() [astropy.io.ascii.ipac]\r\n---------------------------------------------------------------------------\r\nTypeError                                 Traceback (most recent call last)\r\n<ipython-input-3-0487c069685e> in <module>()\r\n----> 1 table.write(\'test.tbl\', format=\'ascii.ipac\')\r\n\r\n/Users/tom/Library/Python/2.7/lib/python/site-packages/astropy-0.3.dev5048-py2.7-macosx-10.8-x86_64.egg/astropy/io/registry.pyc in write(data, *args, **kwargs)\r\n    224 \r\n    225     writer = get_writer(format, data.__class__)\r\n--> 226     writer(data, *args, **kwargs)\r\n    227 \r\n    228 \r\n\r\n/Users/tom/Library/Python/2.7/lib/python/site-packages/astropy-0.3.dev5048-py2.7-macosx-10.8-x86_64.egg/astropy/io/ascii/connect.pyc in io_write(format, table, filename, **kwargs)\r\n     39     from .ui import write\r\n     40     format = re.sub(r\'^ascii\\.\', \'\', format)\r\n---> 41     return write(table, filename, format=format, **kwargs)\r\n     42 \r\n     43 \r\n\r\n/Users/tom/Library/Python/2.7/lib/python/site-packages/astropy-0.3.dev5048-py2.7-macosx-10.8-x86_64.egg/astropy/io/ascii/ui.pyc in write(table, output, format, Writer, **kwargs)\r\n    311 \r\n    312     writer = get_writer(Writer=Writer, **kwargs)\r\n--> 313     lines = writer.write(table)\r\n    314 \r\n    315     # Write the lines to output\r\n\r\n/Users/tom/Library/Python/2.7/lib/python/site-packages/astropy-0.3.dev5048-py2.7-macosx-10.8-x86_64.egg/astropy/io/ascii/ipac.pyc in write(self, table)\r\n    182         # get header and data as strings to find width of each column\r\n    183         for i, col in enumerate(table.cols):\r\n--> 184             col.headwidth = max([len(vals[i]) for vals in self.header.str_vals()])\r\n    185         # keep data_str_vals because they take some time to make\r\n    186         data_str_vals = self.data.str_vals()\r\n\r\nTypeError: object of type \'numpy.int32\' has no len()\r\n```\r\n\r\ncc @taldcroft @hamogu'"
1324,17672568,wkerzendorf,wkerzendorf,2013-08-06 04:17:39,2013-08-07 20:55:28,2013-08-07 20:53:57,closed,mdboom,v0.3.0,9,Bug;units,https://api.github.com/repos/astropy/astropy/issues/1324,b'Quantity instances are not picklable',b'The new units are not pickleable:\r\n\r\n```python\r\nIn [3]: pickle.loads(pickle.dumps(5 * u.m))\r\nOut[3]: <Quantity 5 (Unit not initialised)>\r\n```\r\n\r\nThis is a problem with ipython parallel'
1316,17541103,eteq,mdboom,2013-08-02 01:57:45,2014-06-25 08:50:35,2013-09-20 21:45:29,closed,,,28,Bug;coordinates,https://api.github.com/repos/astropy/astropy/issues/1316,b'Angle documentation crashes Ipython',"b""I've noticed an odd failure mode that seems to be due to #1006 : If I start up Ipython (0.13.1) and type ``astropy.coordinates.Angle?``, ipython crashes with an exception in the pager that says \r\n``UnicodeEncodeError: 'ascii' codec can't encode character u'\\xb0' in position 508: ordinal not in range(128)``.  I presume this is due to the degree signs that are now in the `Angle` documentation... Any ideas on how this might be worked around?\r\n\r\nThis does *not* happen in the dev version of ipython... But we probably count on our users having that.\r\n\r\n@mdboom as the author of #1006"""
1287,17250099,mboquien,embray,2013-07-26 06:37:28,2013-11-11 14:39:24,2013-11-11 14:39:24,closed,embray,v0.3.0,10,Bug;io.fits;Last-before-release,https://api.github.com/repos/astropy/astropy/issues/1287,b'Astropy 0.2.4 does not compile with cfitsio 3.35',"b'Hello,\r\n\r\nBuilding astropy fails when using the following options: --enable-legacy --use-system-libraries. It generated the following error:\r\n\r\n```\r\ngcc -pthread -DNDEBUG -march=x86-64 -mtune=generic -O2 -pipe -fstack-protector --param=ssp-buffer-size=4 -march=x86-64 -mtune=native -O2 -pipe -fstack-protector --param=ssp-buffer-size=4 -D_FORTIFY_SOURCE=2 -fPIC -I/usr/lib/python2.7/site-packages/numpy/core/include -I/usr/include/python2.7 -c astropy/io/fits/src/compressionmodule.c -o build/temp.linux-x86_64-2.7/astropy/io/fits/src/compressionmodule.o\r\nIn file included from /usr/include/python2.7/Python.h:8:0,\r\n                 from astropy/io/fits/src/compressionmodule.c:99:\r\n/usr/include/python2.7/pyconfig.h:1173:0: warning: ""_POSIX_C_SOURCE"" redefined [enabled by default]\r\n #define _POSIX_C_SOURCE 200112L\r\n ^\r\nIn file included from /usr/include/math.h:27:0,\r\n                 from astropy/io/fits/src/compressionmodule.c:97:\r\n/usr/include/features.h:231:0: note: this is the location of the previous definition\r\n #  define _POSIX_C_SOURCE 200809L\r\n ^\r\nIn file included from /usr/lib/python2.7/site-packages/numpy/core/include/numpy/ndarraytypes.h:1728:0,\r\n                 from /usr/lib/python2.7/site-packages/numpy/core/include/numpy/ndarrayobject.h:17,\r\n                 from /usr/lib/python2.7/site-packages/numpy/core/include/numpy/arrayobject.h:15,\r\n                 from astropy/io/fits/src/compressionmodule.c:100:\r\n/usr/lib/python2.7/site-packages/numpy/core/include/numpy/npy_deprecated_api.h:11:2: warning: #warning ""Using deprecated NumPy API, disable it by #defining NPY_NO_DEPRECATED_API NPY_1_7_API_VERSION"" [-Wcpp]\r\n #warning ""Using deprecated NumPy API, disable it by #defining NPY_NO_DEPRECATED_API NPY_1_7_API_VERSION""\r\n  ^\r\nastropy/io/fits/src/compressionmodule.c: In function \xa1\xaeconfigure_compression\xa1\xaf:\r\nastropy/io/fits/src/compressionmodule.c:662:17: error: \xa1\xaeFITSfile\xa1\xaf has no member named \xa1\xaequantize_dither\xa1\xaf\r\n             Fptr->quantize_dither = SUBTRACTIVE_DITHER_1;\r\n                 ^\r\nastropy/io/fits/src/compressionmodule.c:664:17: error: \xa1\xaeFITSfile\xa1\xaf has no member named \xa1\xaequantize_dither\xa1\xaf\r\n             Fptr->quantize_dither = 0;\r\n                 ^\r\nastropy/io/fits/src/compressionmodule.c:667:13: error: \xa1\xaeFITSfile\xa1\xaf has no member named \xa1\xaequantize_dither\xa1\xaf\r\n         Fptr->quantize_dither = 0;\r\n             ^\r\nerror: command \'gcc\' failed with exit status 1\r\n```\r\n\r\nIt works fine when using the cfitsio version included directly in astropy. My cfitsio system version is 3.35 (versus 3.30 for the included version). The package compiles fine with cfitsio 3.34. Looking at the changelog of cfitsio I think I have found the origin of the problem:\r\n   - globally changed the variable and/or subroutine name ""dither_offset"" \r\n     to ""dither_seed"" and ""quantize_dither"" to ""quantize_method"" so\r\n     that the names more accurately reflects their purpose.\r\n\r\nThanks,\r\n\r\nM\xa8\xa6d\xa8\xa6ric'"
1270,16953161,astronomeralex,embray,2013-07-19 01:56:00,2013-07-23 16:02:31,2013-07-23 16:02:31,closed,,v0.2.4,6,Bug;cosmology,https://api.github.com/repos/astropy/astropy/issues/1270,"b""cosmology's comoving_volume should work with an array of redshifts""","b'In the documentation, the method comoving_volume of a astropy.cosmology.core.FlatLambdaCDM is suppose to work for an array of redshifts. In practice, it does not, it gives an error of \r\n\r\n```\r\n/usr/local/lib/python2.7/dist-packages/astropy/cosmology/core.pyc in comoving_volume(self, z)\r\n    879         dm = self.comoving_transverse_distance(z)\r\n    880         term1 = 4. * pi * dh**3 / (2. * Ok0)\r\n--> 881         term2 = dm / dh * sqrt(1 + Ok0 * (dm / dh)**2)\r\n    882         term3 = sqrt(abs(Ok0)) * dm / dh\r\n    883 \r\n\r\nTypeError: only length-1 arrays can be converted to Python scalars\r\n```\r\n'"
1256,16711638,cdeil,embray,2013-07-13 06:21:34,2014-06-16 13:20:51,2013-09-10 17:18:59,closed,,v0.2.5,5,Bug,https://api.github.com/repos/astropy/astropy/issues/1256,b'AttributeError in _find_pkg_data_path with Python 3.2',"b'Using `get_pkg_data_filename` fails for me in one case on Python 3.2 only (works on 2.7 and 3.3) like this:\r\n```\r\nIn [2]: tevpy.data.poisson_stats_image()\r\nERROR: AttributeError: \'NoneType\' object has no attribute \'split\' [astropy.utils.data]\r\n---------------------------------------------------------------------------\r\nAttributeError                            Traceback (most recent call last)\r\n<ipython-input-2-c050b9fcebb1> in <module>()\r\n----> 1 tevpy.data.poisson_stats_image()\r\n\r\n/Users/deil/Library/Python/3.2/lib/python/site-packages/tevpy-0.1-py3.2-macosx-10.8-x86_64.egg/tevpy/data/__init__.py in poisson_stats_image(extra_info)\r\n     70     else:\r\n     71         filename = \'poisson_stats_image/counts.fits.gz\'\r\n---> 72         out = fits.getdata(get_pkg_data_filename(filename))\r\n     73 \r\n     74     return out\r\n\r\n/opt/local/Library/Frameworks/Python.framework/Versions/3.2/lib/python3.2/site-packages/astropy/utils/data.py in get_pkg_data_filename(data_name)\r\n    451             return hashfn\r\n    452     else:\r\n--> 453         datafn = _find_pkg_data_path(data_name)\r\n    454         if os.path.isdir(datafn):\r\n    455             raise IOError(""Tried to access a data file that\'s actually ""\r\n\r\n/opt/local/Library/Frameworks/Python.framework/Versions/3.2/lib/python3.2/site-packages/astropy/utils/data.py in _find_pkg_data_path(data_name)\r\n    691         # not called from inside an astropy package.  So just pass name through\r\n    692         return data_name\r\n--> 693     rootpkgname = module.__package__.split(\'.\')[0]\r\n    694 \r\n    695     rootpkg = __import__(rootpkgname)\r\n\r\nAttributeError: \'NoneType\' object has no attribute \'split\'\r\n```\r\nExample is here:\r\nhttps://travis-ci.org/gammapy/tevpy/jobs/9024931#L459\r\n\r\n@iguananaut @eteq This is a continuation of the discussion here:\r\nhttps://github.com/astropy/astropy/issues/1241#issuecomment-20906803'"
1224,16293589,astrofrog,taldcroft,2013-07-02 23:15:33,2014-07-18 07:24:51,2013-08-13 14:53:36,closed,,,12,Bug;io.ascii;table,https://api.github.com/repos/astropy/astropy/issues/1224,b'Failures with developer version of Numpy',"b'There are (and have been for a little while) test failures with the latest dev versions of Numpy:\r\n\r\nhttps://jenkins.shiningpanda.com/astropy/job/astropy-master-debian-py2.7-numpy-dev/1211/testReport/\r\n\r\n@taldcroft - these concern the ``astropy.table`` and ``astropy.io.ascii``, so would you mind looking into them?'"
1222,16252509,cdeil,astrofrog,2013-07-02 08:07:39,2013-11-06 22:03:06,2013-11-03 20:33:33,closed,,v0.3.0,10,Bug,https://api.github.com/repos/astropy/astropy/issues/1222,b'Non-astropy errors mention astropy after astropy import in IPython notebook',"b""Sorry for the cryptic issue title.\r\n\r\nWhat I mean is that non-astropy related errors (like `1/0`) are printed (by the astropy logger?) in a way that makes it look as if they were related to astropy, which I find confusing:\r\n```\r\nERROR:astropy:ZeroDivisionError: integer division or modulo by zero\r\n```\r\nThis message only appears in the IPython notebook for me, not in the IPython shell prompt.\r\n\r\nHere's a full example:\r\nhttp://nbviewer.ipython.org/5907518\r\n\r\nCan / should this behaviour be changed?"""
1198,15798611,astrofrog,embray,2013-06-20 13:08:00,2014-06-16 15:52:15,2013-07-19 20:40:43,closed,,v0.2.4,14,Bug;Critical,https://api.github.com/repos/astropy/astropy/issues/1198,b'Make ``cython_version`` logic affiliated package-friendly',"b""As reported in astropy/package-template#27 the logic for ``cython_version`` is not working for affiliated packages, leading to failures on Travis (not sure why I didn't see that sooner).\r\n\r\nI'm marking this as critical, since it means that affiliated package testing is broken.\r\n\r\nEDIT: I think no affiliated packages actually use Cython yet, hence why the issue wasn't spotted sooner."""
1163,15243320,astrofrog,eteq,2013-06-06 20:24:19,2014-07-12 14:04:42,2013-06-10 15:27:37,closed,,v0.2.4,3,Bug;units,https://api.github.com/repos/astropy/astropy/issues/1163,b'Fix bug in Quantity._decompose()',"b'This fixes the following bug in ``Quantity._decompose``:\r\n\r\n```\r\n In [17]: q2 = np.array([1,2,3]) * u.m / (2. * u.km)\r\n\r\nIn [18]: q2.decompose()\r\nOut[18]: <Quantity [ 0.0005  0.001   0.0015] >\r\n\r\nIn [19]: q2.decompose()\r\nOut[19]: <Quantity [  5.00000000e-07   1.00000000e-06   1.50000000e-06] >\r\n\r\nIn [20]: q2.decompose()\r\nOut[20]: <Quantity [  5.00000000e-10   1.00000000e-09   1.50000000e-09] >\r\n```\r\n\r\nThe original quantity is being modified every time ``decompose`` is called, because the code was incorrectly assuming the value was being copied, but it was being references for arrays.\r\n\r\n@mdboom - can you review this?'"
1156,15165853,cdeil,taldcroft,2013-06-05 11:45:26,2015-04-29 01:10:57,2015-04-29 01:10:57,closed,,,29,Affects-release;Bug;io.fits;table;unified-io,https://api.github.com/repos/astropy/astropy/issues/1156,b'Error reading a FITS table into a pandas DataFrame via astropy',"b'I\'m trying to read a FITS table into a pandas DataFrame via astropy.\r\n\r\nTest data and script is here:\r\nhttps://github.com/cdeil/test_fits_to_pandas\r\n\r\nThis is the error I get (same error from `read_via_table.py`):\r\n```\r\n$ python read_via_fits.py \r\n                                       nfev statname  numpoints\r\nROI                       Solution                             \r\nHESS_J1023m575            4_big         273     cash      75000\r\n                          5             316     cash      75000\r\n                          3             131     cash      75000\r\n                          4             273     cash      75000\r\n                          2_elongated   111     cash      75000\r\nERROR: ValueError: Big-endian buffer not supported on little-endian compiler [unknown]\r\nTraceback (most recent call last):\r\n  File ""read_via_fits.py"", line 8, in <module>\r\n    print(table[[\'nfev\', \'statname\']])\r\n  File ""/Users/deil/Library/Python/2.7/lib/python/site-packages/pandas-0.11.1.dev_cf47a42-py2.7-macosx-10.8-intel.egg/pandas/core/frame.py"", line 2017, in __getitem__\r\n    return self._getitem_array(key)\r\n  File ""/Users/deil/Library/Python/2.7/lib/python/site-packages/pandas-0.11.1.dev_cf47a42-py2.7-macosx-10.8-intel.egg/pandas/core/frame.py"", line 2054, in _getitem_array\r\n    return self.take(indexer, axis=1, convert=True)\r\n  File ""/Users/deil/Library/Python/2.7/lib/python/site-packages/pandas-0.11.1.dev_cf47a42-py2.7-macosx-10.8-intel.egg/pandas/core/frame.py"", line 2998, in take\r\n    return self.reindex(columns=new_columns)\r\n  File ""/Users/deil/Library/Python/2.7/lib/python/site-packages/pandas-0.11.1.dev_cf47a42-py2.7-macosx-10.8-intel.egg/pandas/core/frame.py"", line 2630, in reindex\r\n    fill_value, limit)\r\n  File ""/Users/deil/Library/Python/2.7/lib/python/site-packages/pandas-0.11.1.dev_cf47a42-py2.7-macosx-10.8-intel.egg/pandas/core/frame.py"", line 2722, in _reindex_columns\r\n    copy, fill_value)\r\n  File ""/Users/deil/Library/Python/2.7/lib/python/site-packages/pandas-0.11.1.dev_cf47a42-py2.7-macosx-10.8-intel.egg/pandas/core/frame.py"", line 2739, in _reindex_with_indexers\r\n    fill_value=fill_value)\r\n  File ""/Users/deil/Library/Python/2.7/lib/python/site-packages/pandas-0.11.1.dev_cf47a42-py2.7-macosx-10.8-intel.egg/pandas/core/internals.py"", line 1959, in reindex_indexer\r\n    return self._reindex_indexer_items(new_axis, indexer, fill_value)\r\n  File ""/Users/deil/Library/Python/2.7/lib/python/site-packages/pandas-0.11.1.dev_cf47a42-py2.7-macosx-10.8-intel.egg/pandas/core/internals.py"", line 1993, in _reindex_indexer_items\r\n    allow_fill=False)\r\n  File ""/Users/deil/Library/Python/2.7/lib/python/site-packages/pandas-0.11.1.dev_cf47a42-py2.7-macosx-10.8-intel.egg/pandas/core/common.py"", line 540, in take_nd\r\n    func(arr, indexer, out, fill_value)\r\n  File ""generated.pyx"", line 2842, in pandas.algos.take_2d_axis0_int16_int16 (pandas/algos.c:69040)\r\nValueError: Big-endian buffer not supported on little-endian compiler\r\n```\r\n\r\n@iguananaut @astrofrog Am I doing something wrong (passing a `FITSrec` instead of a `recarray`)?\r\nIs there a workaround?\r\n'"
1151,15114610,astrofrog,embray,2013-06-04 11:54:14,2014-07-08 06:54:53,2013-07-19 23:09:12,closed,,v0.2.4,28,Bug;Critical;installation,https://api.github.com/repos/astropy/astropy/issues/1151,"b""Distribution instance has no attribute 'exclude_package_data'""","b'I just tried installing acfbd8a196ae1ee03e750f931d89a102c6662eee on an Ubuntu 32-bit machine, and if I start from a clean repository and I run:\r\n\r\n```\r\npython setup.py build\r\n```\r\n\r\nI get:\r\n\r\n```\r\nDownloading http://pypi.python.org/packages/source/d/distribute/distribute-0.6.28.tar.gz\r\nExtracting in /tmp/tmpQb5QEh\r\nNow working in /tmp/tmpQb5QEh/distribute-0.6.28\r\nBuilding a Distribute egg in /home/tom/astropy\r\n/home/tom/astropy/distribute-0.6.28-py2.7.egg\r\nFreezing version number to astropy/version.py\r\n/usr/lib/python2.7/distutils/dist.py:267: UserWarning: Unknown distribution option: \'install_requires\'\r\n  warnings.warn(msg)\r\n/usr/lib/python2.7/distutils/dist.py:267: UserWarning: Unknown distribution option: \'zip_safe\'\r\n  warnings.warn(msg)\r\n/usr/lib/python2.7/distutils/dist.py:267: UserWarning: Unknown distribution option: \'use_2to3\'\r\n  warnings.warn(msg)\r\n/usr/lib/python2.7/distutils/dist.py:267: UserWarning: Unknown distribution option: \'entry_points\'\r\n  warnings.warn(msg)\r\nrunning build\r\nrunning build_py\r\nTraceback (most recent call last):\r\n  File ""setup.py"", line 128, in <module>\r\n    entry_points=entry_points\r\n  File ""/usr/lib/python2.7/distutils/core.py"", line 152, in setup\r\n    dist.run_commands()\r\n  File ""/usr/lib/python2.7/distutils/dist.py"", line 953, in run_commands\r\n    self.run_command(cmd)\r\n  File ""/usr/lib/python2.7/distutils/dist.py"", line 972, in run_command\r\n    cmd_obj.run()\r\n  File ""/usr/lib/python2.7/distutils/command/build.py"", line 128, in run\r\n    self.run_command(cmd_name)\r\n  File ""/usr/lib/python2.7/distutils/cmd.py"", line 326, in run_command\r\n    self.distribution.run_command(command)\r\n  File ""/usr/lib/python2.7/distutils/dist.py"", line 971, in run_command\r\n    cmd_obj.ensure_finalized()\r\n  File ""/usr/lib/python2.7/distutils/cmd.py"", line 109, in ensure_finalized\r\n    self.finalize_options()\r\n  File ""/home/tom/astropy/astropy/setup_helpers.py"", line 561, in finalize_options\r\n    SetuptoolsBuildPy.finalize_options(self)\r\n  File ""build/bdist.linux-i686/egg/setuptools/command/build_py.py"", line 77, in finalize_options\r\nAttributeError: Distribution instance has no attribute \'exclude_package_data\'\r\n```\r\n\r\nHowever, if I run ``build`` a second time, it runs fine. This may be related to astropy/package-template#15.\r\n\r\nStrangely, after the first ``build`` command, the ``build/`` directory does not exist and it is only created after the second.\r\n\r\n@iguananaut - any idea what might be going on?'"
1122,14637888,taldcroft,taldcroft,2013-05-22 18:28:52,2013-12-01 11:25:33,2013-11-26 20:53:38,closed,,v0.3.1,6,Bug;time,https://api.github.com/repos/astropy/astropy/issues/1122,b'Cannot do certain TimeFromEpoch transforms',"b""```\r\nIn [1]: from astropy.time import Time\r\nIn [2]: t = Time('2000:001:00:00:00', scale='ut1')\r\nIn [3]: t.delta_ut1_utc = 0.0\r\nIn [4]: t.utc\r\nOut[4]: <Time object: scale='utc' format='yday' vals=2000:001:00:00:00.000>\r\n\r\nIn [5]: t.unix\r\nERROR: ValueError: Must set the delta_ut1_utc attribute in order to do the scale transform. [astropy.time.core]\r\n```\r\n\r\nThis issue is that the `TimeFormat` object doesn't have the required metadata to do the scale transform.  Fixing this will require some thought.  There is a workaround:\r\n```\r\nIn [7]: t.utc.unix\r\nOut[7]: 946684800.0\r\n```"""
1081,14217174,mhvk,taldcroft,2013-05-11 03:58:07,2014-07-12 16:41:55,2013-06-02 11:57:26,closed,taldcroft,,5,Bug;time,https://api.github.com/repos/astropy/astropy/issues/1081,b'Adding single-element Time to multielement TimeDelta silently ignores all but first item',"b""I'm trying to construct a range of times as follows:\r\n```\r\nimport numpy as np\r\nfrom astropy.time import Time\r\nt1 = Time('2013-06-01', scale='utc')\r\ndt = TimeDelta(np.arange(1,4), format='jd')\r\nt = t1+dt\r\n```\r\nBut this leaves `t` as a single value, `t1+dt[0]` (well, first element of `dt` anyway, `__getitem__` not yet being implemented)."""
1031,13740795,taldcroft,eteq,2013-04-28 21:15:37,2014-05-16 23:02:05,2014-05-16 20:43:52,closed,,v0.4.0,11,Bug;time;Upstream Fix Required,https://api.github.com/repos/astropy/astropy/issues/1031,b'UTC <=> TAI does not round trip for dates 1960 to 1972',"b""As initially discussed in #1030, between 1960 and 1972 the UTC scale had a variable rate, so the length of a second changed slightly.  During this time period you cannot round trip between UTC and other scales like TAI.\r\n\r\n```\r\nIn [30]: t1 = Time('1965-01-01 00:00:00', scale='utc')\r\n\r\nIn [31]: t1.tai.utc  # to TAI and back to UTC doesn't give same value\r\nOut[31]: <Time object: scale='utc' format='iso' vals=1964-12-31 23:59:59.997>\r\n```\r\n\r\nThis is a direct consequence of the underlying SOFA routines not round-tripping for times in this time regime.\r\n```\r\nIn [32]: from astropy.time.sofa_time import tai_utc, utc_tai\r\nIn [33]: jd1 = np.array([2440587.5], dtype=np.double)\r\nIn [34]: jd2 = np.array([0], dtype=np.double)\r\nIn [35]: jd1_tai, jd2_tai = utc_tai(jd1, jd2)\r\nIn [36]: jd1_tai_utc, jd2_tai_utc = tai_utc(jd1_tai, jd2_tai)\r\nIn [37]: jd1 - jd1_tai_utc\r\nOut[37]: array([ 0.])\r\n\r\nIn [38]: jd2 - jd2_tai_utc\r\nOut[38]: array([  6.00000000e-08])\r\n\r\nIn [39]: jd2 - jd2_tai_utc * 86400.0  # Off by 5.184 millisec\r\nOut[39]: array([ 0.005184])\r\n```\r\n\r\nThis needs to be brought up to the SOFA developers to understand if this is a bug or expected feature of a non-uniform time scale."""
1030,13735368,duncanmmacleod,mhvk,2013-04-28 15:14:58,2014-07-11 15:07:53,2014-07-11 14:41:41,closed,taldcroft,v0.4.0,4,Bug;time,https://api.github.com/repos/astropy/astropy/issues/1030,"b""'unix' Time object doesn't return input value correctly ""","b""If I set up a new `unix`-format `Time` object, the return value in the same format isn't correct:\r\n\r\n~~~ py\r\n>>> from astropy import time\r\n>>> initial = 10\r\n>>> t = time.Time(initial, format='unix')\r\n>>> print t.unix, t.unix == initial\r\n9.99481629985 False\r\n~~~\r\n\r\nI presume there is something I'm missing in the initialisation of the object."""
1009,13527655,olebole,mdboom,2013-04-23 10:11:03,2013-12-10 09:06:52,2013-06-24 14:21:17,closed,,,7,Bug,https://api.github.com/repos/astropy/astropy/issues/1009,b'Testing failure in Debian/Sparc',"b'While this looks like #963 I guess this is something and not connected to the Bigendian issue discussed there:\r\n\r\nOn Debian/Sparc, the testing step fails with a \r\n```\r\n[...]\r\nastropy/io/votable/tests/exception_test.py:10: test_reraise PASSED\r\nastropy/io/votable/tests/exception_test.py:25: test_parse_vowarning PASSED\r\nmake[1]: *** [test-python2.7] Error 246\r\nastropy/io/votable/tests/table_test.py:31: test_table make[1]: Leaving directory `/build/buildd-python-astropy_0.2.1-1~exp5-sparc-ydjg4f/python-astropy-0.2.1\'\r\n```\r\nhttps://buildd.debian.org/status/fetch.php?pkg=python-astropy&arch=sparc&ver=0.2.1-1%7Eexp5&stamp=1366710710\r\nThis ""Error 246"" was not introduced by the Bigendian fixes in #1003 but appeared also in the original 0.2.1 compilation.'"
983,13174070,astrofrog,eteq,2013-04-14 15:15:32,2013-05-14 14:23:10,2013-05-14 14:23:10,closed,eteq,v0.2.2,2,Bug;Docs,https://api.github.com/repos/astropy/astropy/issues/983,b'automodapi :skip: can no longer be used without triggering failure',"b""If I use ``:skip:`` in ``automodapi``, e.g.\r\n\r\n```\r\n.. automodapi:: aplpy\r\n   :no-inheritance-diagram:\r\n   :skip: test\r\n```\r\n\r\nI get a warning when building the docs:\r\n\r\n```\r\nchecking consistency... /Users/tom/dropbox/Code/development/APLpy/aplpy-affiliated/docs/_generated/aplpy.test.rst:: WARNING: document isn't included in any toctree\r\n```\r\n\r\nwhich causes Travis to fail. I think the bug is that the page shouldn't get generated in the first place."""
973,13129056,taldcroft,taldcroft,2013-04-12 16:48:36,2014-06-15 02:40:21,2013-05-09 03:27:51,closed,taldcroft,v0.2.2,3,Bug;table,https://api.github.com/repos/astropy/astropy/issues/973,b'Add_row fails for empty masked table',"b""```\r\nIn [1]: from astropy.table import Table\r\n\r\nIn [2]: t = Table(names=('a'), dtypes=('f'))\r\n\r\nIn [3]: t\r\nOut[3]: \r\n<Table rows=0 names=('a')>\r\narray([], \r\n      dtype=[('a', '<f4')])\r\n\r\nIn [4]: t.add_row([1])\r\n\r\nIn [5]: t\r\nOut[5]: \r\n<Table rows=1 names=('a')>\r\narray([(1.0,)], \r\n      dtype=[('a', '<f4')])\r\n\r\nIn [6]: tm = Table(names=('a'), dtypes=('f'), masked=True)\r\n\r\nIn [7]: tm.add_row([1])\r\nERROR: TypeError: Empty data-type [numpy.core.fromnumeric]\r\n---------------------------------------------------------------------------\r\nTypeError                                 Traceback (most recent call last)\r\n<ipython-input-7-bd2d0c983c23> in <module>()\r\n----> 1 tm.add_row([1])\r\n\r\n/data/baffin/tom/git/astropy/astropy/table/table.pyc in add_row(self, vals, mask)\r\n   1684 \r\n   1685         if self.masked:\r\n-> 1686             self._data = ma.resize(self._data, (newlen,))\r\n   1687         else:\r\n   1688             self._data.resize((newlen,), refcheck=False)\r\n\r\n/data/cosmos2/ska/arch/x86_64-linux_CentOS-5/lib/python2.7/site-packages/numpy/ma/core.pyc in resize(x, new_shape)\r\n   6460     m = getmask(x)\r\n   6461     if m is not nomask:\r\n-> 6462         m = np.resize(m, new_shape)\r\n   6463     result = np.resize(x, new_shape).view(get_masked_subclass(x))\r\n   6464     if result.ndim:\r\n\r\n/data/cosmos2/ska/arch/x86_64-linux_CentOS-5/lib/python2.7/site-packages/numpy/core/fromnumeric.pyc in resize(a, new_shape)\r\n    850     a = ravel(a)\r\n    851     Na = len(a)\r\n--> 852     if not Na: return mu.zeros(new_shape, a.dtype.char)\r\n    853     total_size = um.multiply.reduce(new_shape)\r\n    854     n_copies = int(total_size / Na)\r\n\r\nTypeError: Empty data-type\r\n```"""
966,13039939,rahuldave,eteq,2013-04-10 20:42:26,2013-09-04 02:11:57,2013-09-01 21:14:13,closed,,v0.2.5,6,Bug;table,https://api.github.com/repos/astropy/astropy/issues/966,b'additional junk row added when add row fails',"b""a=[1,4,5]\r\nb=[2.0,5.0,8.2]\r\nc=['x','y','z']\r\nt=Table([a,b,c], names=('a','b','c'))\r\nt.add_column(Column(data=[1, 2, 3], name='d'))\r\nt.add_row([1,2.0,'3'])\r\n#above is the failure\r\nprint t#seems ok\r\nt.add_row([1,2.0,'3',3])\r\nprint t#now an additional row with 0's shows up\r\nt.add_row([5,2.0,'5',5])\r\nprint t#this works fine"""
958,12971121,astrofrog,embray,2013-04-09 13:33:13,2013-05-14 20:23:57,2013-05-14 20:23:57,closed,embray,v0.2.2,3,Bug;io.fits,https://api.github.com/repos/astropy/astropy/issues/958,b'Bug with booleans in astropy.io.fits',"b""The following code produces strange results:\r\n\r\n```\r\nimport numpy as np\r\nfrom astropy.io import fits\r\nfrom astropy.table import Table\r\nt = Table()\r\nt['a'] = [True, False, True]\r\nfits.writeto('test.fits', np.array(t), clobber=True)\r\n```\r\n\r\nIf I view the file in fv, all values are True. If I do:\r\n\r\n```\r\nprint(fits.getdata('test.fits'))\r\n```\r\n\r\nI get\r\n\r\n```\r\n[(False) (False) (False)]\r\n```\r\n\r\n@iguananaut - any idea what is going on?\r\n\r\ncc @healther who first ran into this\r\n"""
950,12912760,astrofrog,mdboom,2013-04-08 08:16:46,2013-04-15 21:24:44,2013-04-15 21:23:05,closed,,v0.2.2,9,Bug,https://api.github.com/repos/astropy/astropy/issues/950,b'Fix bug in failed configuration file generation warning',"b""@mdboom - commit fcc2d63df086c7b834867bce44dd70a348b745d1 introduced an issue with Python 3 when the warning is emitted:\r\n\r\n```\r\nAttributeError: 'str' object has no attribute 'decode'\r\n```"""
949,12862173,adrn,mdboom,2013-04-05 20:18:02,2014-06-23 05:46:10,2013-04-19 21:30:41,closed,mdboom,v0.2.2,15,Bug;units,https://api.github.com/repos/astropy/astropy/issues/949,b'units: Multiplying a string by a unit has strange behavior',"b'I think I know what\'s causing this (the input to `Quantity` is iterable if it\'s a string?) but I\'m not going to fix it until #929 is accepted/rejected...\r\n\r\nCheck it out:\r\n\r\n    >>> ""15""*u.Myr\r\n    <Quantity 15 Myr>\r\n    >>> (""15""*u.Myr) == 15.*u.Myr\r\n    False\r\n    >>> q = ""15""*u.Myr\r\n    >>> q.value\r\n    array(\'15\',\r\n          dtype=\'|S2\')'"
910,12538159,hamogu,taldcroft,2013-03-27 21:49:59,2014-06-18 08:05:55,2013-06-01 12:06:40,closed,,v0.3.0,13,Bug;io.ascii,https://api.github.com/repos/astropy/astropy/issues/910,b'astropy.io.ascii.write ignores fill_values',"b""The following syntax is almost straight from the documentation. In this case I am not sure if I do something wrong (if you tell me what, I'll try to see where the documentation can be improved) or this is a bug.\r\n```\r\nIn [1]: import astropy\r\n\r\nIn [2]: import astropy.table\r\n\r\nIn [3]: import astropy.io\r\n\r\nIn [4]: import astropy.io.ascii\r\n\r\nIn [5]: data2 = {'x': [1, 2, 3], 'y': [4, 5.2, 6.1], 'z': ['hello', 'world', '!!!']}\r\n\r\nIn [6]: tab = astropy.table.Table(data2)\r\n\r\nIn [7]: astropy.io.ascii.write(tab, sys.stdout)\r\ny x z\r\n4.0 1 hello\r\n5.2 2 world\r\n6.1 3 !!!\r\n\r\nIn [8]: astropy.io.ascii.write(tab, sys.stdout, fill_values = [('!!!','foo'), ('1', 'bar')])\r\ny x z\r\n4.0 1 hello\r\n5.2 2 world\r\n6.1 3 !!!\r\n```\r\n\r\nClearly, the output with and without `fill_values` is identical."""
909,12537485,hamogu,taldcroft,2013-03-27 21:34:34,2014-06-21 17:34:35,2013-05-09 02:18:43,closed,,v0.3.0,23,Bug;Feature Request;io.ascii;table,https://api.github.com/repos/astropy/astropy/issues/909,b'astropy.io.ascii.write no longer accepts formatting functions',"b""`astropy.io.ascii.write` used to accept functions to format a string value in the `formats = {}` dictionary. This is particulalry helpful for LaTeX output, when e.g. certain LeTeX signs need to be added to.\r\nBelow is a minimal example that is taken almost exactly from the documentation\r\nhttp://docs.astropy.org/en/v0.2/io/ascii/write.html#parameters-for-write\r\n\r\n```\r\nIn [1]: import astropy\r\n\r\nIn [2]: import astropy.io\r\n\r\nIn [3]: import astropy.io.ascii\r\n\r\nIn [4]: data2 = {'x': [1, 2, 3], 'y': [4, 5.2, 6.1], 'z': ['hello', 'world', '!!!']}\r\n\r\nIn [5]: astropy.io.ascii.write(data2, sys.stdout, formats={'x': '12.1f', 'y': lambda x: round(x, 1)})\r\nERROR: ValueError: Unable to parse format string <function <lambda> at 0x5036c08> [astropy.table.pprint]\r\n---------------------------------------------------------------------------\r\nValueError                                Traceback (most recent call last)\r\n<ipython-input-5-365ff1044a03> in <module>()\r\n----> 1 astropy.io.ascii.write(data2, sys.stdout, formats={'x': '12.1f', 'y': lambda x: round(x, 1)})\r\n\r\n/data/guenther/astrosoft/astropy/astropy/io/ascii/ui.pyc in write(table, output, Writer, **kwargs)\r\n    276 \r\n    277     writer = get_writer(Writer=Writer, **kwargs)\r\n--> 278     lines = writer.write(table)\r\n    279 \r\n    280     # Write the lines to output\r\n\r\n/data/guenther/astrosoft/astropy/astropy/io/ascii/core.pyc in write(self, table)\r\n    910         lines = []\r\n    911         self.header.write(lines)\r\n--> 912         self.data.write(lines)\r\n    913 \r\n    914         return lines\r\n\r\n/data/guenther/astrosoft/astropy/astropy/io/ascii/core.pyc in write(self, lines)\r\n    593         with self._set_col_formats(self.cols, self.formats):\r\n    594             col_str_iters = [col.iter_str_vals() for col in self.cols]\r\n--> 595             for vals in izip(*col_str_iters):\r\n    596                 lines.append(self.splitter.join(vals))\r\n    597 \r\n\r\n/data/guenther/astrosoft/astropy/astropy/table/table.pyc in iter_str_vals(self)\r\n    204         # Iterate over formatted values with no max number of lines, no column\r\n    205         # name, no units, and ignoring the returned header info in outs.\r\n--> 206         for str_val in _pformat_col_iter(self, -1, False, False, {}):\r\n    207             yield str_val\r\n    208 \r\n\r\n/data/guenther/astrosoft/astropy/astropy/table/pprint.pyc in _pformat_col_iter(col, max_lines, show_name, show_units, outs)\r\n    212                            format_func(col.format, col[(i,) + multidim1]))\r\n    213             else:\r\n--> 214                 col_str = format_func(col.format, col[i])\r\n    215             yield col_str\r\n    216         elif i == i0:\r\n\r\n/data/guenther/astrosoft/astropy/astropy/table/pprint.pyc in _auto_format_func(format_, val)\r\n    100         except:\r\n    101             raise ValueError('Unable to parse format string {0}'\r\n--> 102                              .format(format_))\r\n    103     _format_funcs[format_] = format_func\r\n    104     return out\r\n\r\nValueError: Unable to parse format string <function <lambda> at 0x5036c08>\r\n```"""
893,12249536,astrofrog,astrofrog,2013-03-20 21:30:30,2014-06-25 15:34:56,2013-04-02 09:40:31,closed,,v0.2.1,10,Bug;nddata,https://api.github.com/repos/astropy/astropy/issues/893,b'convolve_fft does not deal with infinity values',"b'Convolve_fft does not deal well with ``inf`` values, and the error message is wrong:\r\n\r\n```\r\nIn [28]: convolve_fft([1,np.inf,1],[0,1,0])\r\nERROR: ValueError: Encountered NaNs in convolve.  This is disallowed. [astropy.nddata.convolution.convolve]\r\n---------------------------------------------------------------------------\r\nValueError                                Traceback (most recent call last)\r\n<ipython-input-28-d6fa5a67efd2> in <module>()\r\n----> 1 convolve_fft([1,np.inf,1],[0,1,0])\r\n\r\n/Users/tom/Library/Python/3.2/lib/python/site-packages/astropy-0.3.dev3556-py3.2-macosx-10.6-x86_64.egg/astropy/nddata/convolution/convolve.py in convolve_fft(array, kernel, boundary, fill_value, crop, return_fft, fft_pad, psf_pad, interpolate_nan, quiet, ignore_edge_zeros, min_wt, normalize_kernel, fftn, ifftn, complex_dtype)\r\n    437     if np.isnan(fftmult).any():\r\n    438         # this check should be unnecessary; call it an insanity check\r\n--> 439         raise ValueError(""Encountered NaNs in convolve.  This is disallowed."")\r\n    440 \r\n    441     # restore nans in original image (they were modified inplace earlier)\r\n\r\nValueError: Encountered NaNs in convolve.  This is disallowed.\r\n```\r\n\r\ncc @keflavich\r\n'"
891,12221248,astrofrog,eteq,2013-03-20 10:41:55,2014-07-07 22:07:56,2013-04-05 20:32:05,closed,eteq,v0.2.2,4,Bug;coordinates,https://api.github.com/repos/astropy/astropy/issues/891,b'Bug with coordinate separation',"b'The following example shows a bug in the ``separation()`` method for ``astropy.coordinates``:\r\n\r\n```\r\nIn [8]: from astropy.coordinates import FK5Coordinates\r\n\r\nIn [9]: a = FK5Coordinates(1., 1., unit=(\'deg\', \'deg\'))\r\n\r\nIn [10]: b = FK5Coordinates(2., 2., unit=(\'deg\', \'deg\'))\r\n\r\nIn [11]: a.separation(b)\r\nERROR: TypeError: __new__() takes at least 2 arguments (1 given) [copyreg]\r\n---------------------------------------------------------------------------\r\nTypeError                                 Traceback (most recent call last)\r\n<ipython-input-11-8fab90bd36e8> in <module>()\r\n----> 1 a.separation(b)\r\n\r\n/Volumes/Raptor/Library/Python/3.2/lib/python/site-packages/astropy-0.3.dev3643-py3.2-macosx-10.8-x86_64.egg/astropy/coordinates/coordsystems.py in separation(self, other)\r\n    385             The on-sky separation between this and the `other` coordinate.\r\n    386         """"""\r\n--> 387         other_in_self_system = other.transform_to(self.__class__)\r\n    388 \r\n    389         lat1 = self.latangle.radians\r\n\r\n/Volumes/Raptor/Library/Python/3.2/lib/python/site-packages/astropy-0.3.dev3643-py3.2-macosx-10.8-x86_64.egg/astropy/coordinates/coordsystems.py in transform_to(self, tosys)\r\n    458 \r\n    459         if tosys is self.__class__:\r\n--> 460             return deepcopy(self)\r\n    461 \r\n    462         trans = master_transform_graph.get_transform(self.__class__, tosys)\r\n\r\n/opt/local/Library/Frameworks/Python.framework/Versions/3.2/lib/python3.2/copy.py in deepcopy(x, memo, _nil)\r\n    172                             raise Error(\r\n    173                                 ""un(deep)copyable object of type %s"" % cls)\r\n--> 174                 y = _reconstruct(x, rv, 1, memo)\r\n    175 \r\n    176     memo[d] = y\r\n\r\n/opt/local/Library/Frameworks/Python.framework/Versions/3.2/lib/python3.2/copy.py in _reconstruct(x, info, deep, memo)\r\n    288     if state:\r\n    289         if deep:\r\n--> 290             state = deepcopy(state, memo)\r\n    291         if hasattr(y, \'__setstate__\'):\r\n    292             y.__setstate__(state)\r\n\r\n/opt/local/Library/Frameworks/Python.framework/Versions/3.2/lib/python3.2/copy.py in deepcopy(x, memo, _nil)\r\n    145     copier = _deepcopy_dispatch.get(cls)\r\n    146     if copier:\r\n--> 147         y = copier(x, memo)\r\n    148     else:\r\n    149         try:\r\n\r\n/opt/local/Library/Frameworks/Python.framework/Versions/3.2/lib/python3.2/copy.py in _deepcopy_dict(x, memo)\r\n    234     memo[id(x)] = y\r\n    235     for key, value in x.items():\r\n--> 236         y[deepcopy(key, memo)] = deepcopy(value, memo)\r\n    237     return y\r\n    238 d[dict] = _deepcopy_dict\r\n\r\n/opt/local/Library/Frameworks/Python.framework/Versions/3.2/lib/python3.2/copy.py in deepcopy(x, memo, _nil)\r\n    172                             raise Error(\r\n    173                                 ""un(deep)copyable object of type %s"" % cls)\r\n--> 174                 y = _reconstruct(x, rv, 1, memo)\r\n    175 \r\n    176     memo[d] = y\r\n\r\n/opt/local/Library/Frameworks/Python.framework/Versions/3.2/lib/python3.2/copy.py in _reconstruct(x, info, deep, memo)\r\n    283     if deep:\r\n    284         args = deepcopy(args, memo)\r\n--> 285     y = callable(*args)\r\n    286     memo[id(x)] = y\r\n    287 \r\n\r\n/opt/local/Library/Frameworks/Python.framework/Versions/3.2/lib/python3.2/copyreg.py in __newobj__(cls, *args)\r\n     86 \r\n     87 def __newobj__(cls, *args):\r\n---> 88     return cls.__new__(cls, *args)\r\n     89 \r\n     90 def _slotnames(cls):\r\n\r\nTypeError: __new__() takes at least 2 arguments (1 given)\r\n```\r\n\r\n(occurs with Python 2 and 3).'"
886,12103703,eteq,eteq,2013-03-17 02:12:44,2013-03-22 06:27:44,2013-03-22 06:27:44,closed,taldcroft,v0.3.0,2,Bug;time,https://api.github.com/repos/astropy/astropy/issues/886,b'creating a Time with multiple Time(format=datetime) objects gives an error',"b""I've noticed some unexpected behavior with the `datetime` support in `time` recently added by @taldcroft in #860.  It may not actually be related to that (that is, it might be true for all formats), but I first noticed it after the #860 merge, so it *might* be connected.\r\n\r\nWhen I do ``Time([dt1,dt2],scale='utc')`` (`dt1` and `dt2` are `datetime.datetime` objects), I get exactly what I expect: A `Time` object that contains an array with two elements.  Similarly, when I do ``Time(t1)`` (where `t1` is a time object) I get out the natural expectation: a copy of `t1`.  However, if I do this:\r\n```\r\nt1 = Time(dt1, scale='utc')\r\nt2 = Time(dt2, scale='utc')\r\ntarr = Time([t1, t2])\r\n```\r\nI get an error about it being an invalid format.  I would have instead expected to get back a new `Time` object with a two-element array that looks just like ``Time([dt1,dt2],scale='utc')``"""
879,12031117,astrofrog,astrofrog,2013-03-14 18:07:40,2014-07-17 18:13:49,2013-09-22 20:08:49,closed,astrofrog,v0.2.5,18,Bug;table,https://api.github.com/repos/astropy/astropy/issues/879,b'test_new_masked_col_existing_table needs to be skipped when Numpy 1.4.1 is used',"b'I am seeing the following test failure with Numpy 1.4.1:\r\n\r\n```\r\n=================================== FAILURES ===================================\r\n_______ TestSetTableColumn.test_set_new_masked_col_existing_table[False] _______\r\n\r\nself = <astropy.table.tests.test_table.TestSetTableColumn object at 0x106c40390>\r\n\r\n    def test_set_new_masked_col_existing_table(self):\r\n        """"""Create a new column in an existing table using the item access syntax""""""\r\n        t = Table([self.a])  # masked or unmasked\r\n>       b = table.MaskedColumn(name=\'b\', data=[1, 2, 3])  # masked\r\n\r\nastropy/table/tests/test_table.py:150: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\n\r\nargs = (<class \'astropy.table.table.MaskedColumn\'>,)\r\nkwargs = {\'data\': [1, 2, 3], \'name\': \'b\'}\r\n\r\n    @functools.wraps(func)\r\n    def wrapper(*args, **kwargs):\r\n        if len(args) > 1 and isinstance(args[1], basestring):\r\n            cls = args[0]  # Column or MaskedColumn class from __new__(cls, ..)\r\n            raise ValueError(ERROR_COLUMN_ARGS_MESSAGE.format(class_name=cls.__name__,\r\n                                                              first_arg=repr(args[1])))\r\n>       return func(*args, **kwargs)\r\n\r\nastropy/table/table.py:50: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\n\r\ncls = <class \'astropy.table.table.MaskedColumn\'>, data = [1, 2, 3], name = \'b\'\r\nmask = None, fill_value = None, dtype = None, shape = (), length = 0\r\ndescription = None, units = None, format = None, meta = None\r\n\r\n    @_check_column_new_args\r\n    def __new__(cls, data=None, name=None, mask=None, fill_value=None,\r\n                 dtype=None, shape=(), length=0,\r\n                 description=None, units=None, format=None, meta=None):\r\n    \r\n        if NUMPY_LT_1P5:\r\n>           raise ValueError(\'MaskedColumn requires NumPy version 1.5 or later\')\r\nE           ValueError: MaskedColumn requires NumPy version 1.5 or later\r\n\r\nastropy/table/table.py:597: ValueError\r\n```\r\n\r\nI think the test should be skipped. I\'ve tagged this 0.3.0 as I don\'t think this test exists in the 0.2.x branch - @taldcroft, could you double check, and fix as you see fit?'"
878,12020650,adrn,embray,2013-03-14 14:30:58,2014-09-30 15:40:44,2013-04-26 18:21:24,closed,,v0.2.2,24,Bug;units,https://api.github.com/repos/astropy/astropy/issues/878,b'Units: Quantity always thinks it is iterable',"b""Don't have time to look at this today, but probably can tackle over the weekend.\r\n\r\n    >>> astropy.utils.isiterable([15.,17.]*u.yr)\r\n    True\r\n    >>> astropy.utils.isiterable(15.*u.yr)\r\n    True"""
875,11970801,james-allen,embray,2013-03-13 12:20:20,2014-07-10 22:05:40,2013-04-03 15:54:24,closed,,v0.2.1,7,Bug;coordinates,https://api.github.com/repos/astropy/astropy/issues/875,b'dms declinations with -00 not treated correctly',"b'When parsing declinations from dms strings, astropy.coordinates doesn\'t deal with ""-00"" correctly. For example:\r\n\r\nIn [56]: print coord.Dec(\'00 30 00.0\', unit=units.degree)\r\n0d30m00.00000s\r\n\r\nIn [57]: print coord.Dec(\'01 30 00.0\', unit=units.degree)\r\n1d30m00.00000s\r\n\r\nIn [58]: print coord.Dec(\'-00 30 00.0\', unit=units.degree)\r\n0d30m00.00000s\r\n\r\nIn [59]: print coord.Dec(\'-01 30 00.0\', unit=units.degree)\r\n-1d30m00.00000s\r\n\r\nThe third output should be \'-0d30m00.00000s\', with a minus sign. The underlying problem is that the degrees string is converted to an integer before checking for a minus sign, so \'00\' and \'-00\' become the same thing.\r\n'"
849,11718824,astrofrog,astrofrog,2013-03-06 16:02:31,2013-09-23 16:59:03,2013-09-22 11:06:28,closed,,,11,Bug;table,https://api.github.com/repos/astropy/astropy/issues/849,b'VO table writing from Table broken',"b'The following snippet illustrates the bug:\r\n\r\n```\r\nIn [24]: from astropy.table import Table\r\n\r\nIn [25]: t = Table([[1,2,3]])\r\n\r\nIn [26]: t.write(\'test.xml\', format=\'votable\')\r\nERROR: TypeError: \'NoneType\' object is not iterable [numpy.ma.core]\r\n---------------------------------------------------------------------------\r\nTypeError                                 Traceback (most recent call last)\r\n<ipython-input-26-d56276968fec> in <module>()\r\n----> 1 t.write(\'test.xml\', format=\'votable\')\r\n\r\n/Volumes/Raptor/Library/Python/3.2/lib/python/site-packages/astropy-0.3.dev3496-py3.2-macosx-10.8-x86_64.egg/astropy/io/registry.py in write(data, *args, **kwargs)\r\n    177 \r\n    178     writer = get_writer(format, data.__class__)\r\n--> 179     writer(data, *args, **kwargs)\r\n    180 \r\n\r\n/Volumes/Raptor/Library/Python/3.2/lib/python/site-packages/astropy-0.3.dev3496-py3.2-macosx-10.8-x86_64.egg/astropy/io/votable/connect.py in write_table_votable(input, output, table_id, overwrite)\r\n    118 \r\n    119     # Create a new VOTable file\r\n--> 120     table_file = from_table(input, table_id=table_id)\r\n    121 \r\n    122     # Write out file\r\n\r\n/Volumes/Raptor/Library/Python/3.2/lib/python/site-packages/astropy-0.3.dev3496-py3.2-macosx-10.8-x86_64.egg/astropy/io/votable/table.py in from_table(table, table_id)\r\n    316     votable : `astropy.io.votable.tree.VOTableFile` instance\r\n    317     """"""\r\n--> 318     return tree.VOTableFile.from_table(table, table_id=table_id)\r\n    319 \r\n    320 \r\n\r\n/Volumes/Raptor/Library/Python/3.2/lib/python/site-packages/astropy-0.3.dev3496-py3.2-macosx-10.8-x86_64.egg/astropy/io/votable/tree.py in from_table(cls, table, table_id)\r\n   3401         votable_file = cls()\r\n   3402         resource = Resource()\r\n-> 3403         votable = Table.from_table(votable_file, table)\r\n   3404         if table_id is not None:\r\n   3405             votable.ID = table_id\r\n\r\n/Volumes/Raptor/Library/Python/3.2/lib/python/site-packages/astropy-0.3.dev3496-py3.2-macosx-10.8-x86_64.egg/astropy/io/votable/tree.py in from_table(cls, votable, table)\r\n   2759             new_table.fields.append(Field.from_table_column(votable, column))\r\n   2760 \r\n-> 2761         new_table.array = ma.array(np.asarray(table), mask=table.mask)\r\n   2762 \r\n   2763         return new_table\r\n\r\n/Volumes/Raptor/Library/Python/3.2/lib/python/site-packages/numpy/ma/core.py in array(data, dtype, copy, order, mask, fill_value, keep_mask, hard_mask, shrink, subok, ndmin)\r\n   5788     return MaskedArray(data, mask=mask, dtype=dtype, copy=copy, subok=subok,\r\n   5789                        keep_mask=keep_mask, hard_mask=hard_mask,\r\n-> 5790                        fill_value=fill_value, ndmin=ndmin, shrink=shrink)\r\n   5791 array.__doc__ = masked_array.__doc__\r\n   5792 \r\n\r\n/Volumes/Raptor/Library/Python/3.2/lib/python/site-packages/numpy/ma/core.py in __new__(cls, data, mask, dtype, copy, subok, ndmin, fill_value, keep_mask, hard_mask, shrink, **options)\r\n   2698             # Or assume it\'s a sequence of bool/int\r\n   2699             except TypeError:\r\n-> 2700                 mask = np.array([tuple([m] * len(mdtype)) for m in mask],\r\n   2701                                  dtype=mdtype)\r\n   2702             # Make sure the mask and the data have the same shape\r\n\r\nTypeError: \'NoneType\' object is not iterable\r\n```'"
839,11547090,astrofrog,embray,2013-03-01 14:46:09,2014-06-19 07:18:31,2013-07-22 14:27:18,closed,,v0.2.4,11,Bug;io.fits,https://api.github.com/repos/astropy/astropy/issues/839,b'Issue with astropy.io.fits and large arrays',"b""I'm seeing the following issue with astropy.io.fits:\r\n\r\n```\r\nIn [1]: import numpy as np\r\n\r\nIn [2]: from astropy.io import fits\r\n\r\nIn [3]: x = np.random.random((1e9))\r\n\r\nIn [4]: fits.writeto('test.fits', x, clobber=True)\r\nWARNING: Overwriting existing file 'test.fits'. [astropy.io.fits.hdu.hdulist]\r\n\r\nIn [5]: d = fits.getdata('test.fits', memmap=False)\r\nWARNING: File may have been truncated: actual file length (3705036224) is smaller than the expected size (8000003520) [astropy.io.fits.file]\r\n\r\nIn [6]: d = fits.getdata('test.fits', memmap=True)\r\nERROR: ValueError: mmap length is greater than file size [numpy.core.memmap]\r\n---------------------------------------------------------------------------\r\nValueError                                Traceback (most recent call last)\r\n<ipython-input-6-3493dc939351> in <module>()\r\n----> 1 d = fits.getdata('test.fits', memmap=True)\r\n\r\n/Volumes/Raptor/Library/Python/3.2/lib/python/site-packages/astropy-0.3.dev3272-py3.2-macosx-10.8-x86_64.egg/astropy/io/fits/convenience.py in getdata(filename, *args, **kwargs)\r\n    186     hdulist, extidx = _getext(filename, mode, *args, **kwargs)\r\n    187     hdu = hdulist[extidx]\r\n--> 188     data = hdu.data\r\n    189     if data is None and extidx == 0:\r\n    190         try:\r\n\r\n/Volumes/Raptor/Library/Python/3.2/lib/python/site-packages/astropy-0.3.dev3272-py3.2-macosx-10.8-x86_64.egg/astropy/utils/misc.py in __get__(self, obj, owner)\r\n    259         key = self._fget.__name__\r\n    260         if key not in obj.__dict__:\r\n--> 261             val = self._fget(obj)\r\n    262             obj.__dict__[key] = val\r\n    263             return val\r\n\r\n/Volumes/Raptor/Library/Python/3.2/lib/python/site-packages/astropy-0.3.dev3272-py3.2-macosx-10.8-x86_64.egg/astropy/io/fits/hdu/image.py in data(self)\r\n    201             return\r\n    202 \r\n--> 203         data = self._get_scaled_image_data(self._datLoc, self.shape)\r\n    204         self._update_header_scale_info(data.dtype)\r\n    205 \r\n\r\n/Volumes/Raptor/Library/Python/3.2/lib/python/site-packages/astropy-0.3.dev3272-py3.2-macosx-10.8-x86_64.egg/astropy/io/fits/hdu/image.py in _get_scaled_image_data(self, offset, shape)\r\n    521         code = _ImageBaseHDU.NumCode[self._orig_bitpix]\r\n    522 \r\n--> 523         raw_data = self._get_raw_data(shape, code, offset)\r\n    524         raw_data.dtype = raw_data.dtype.newbyteorder('>')\r\n    525 \r\n\r\n/Volumes/Raptor/Library/Python/3.2/lib/python/site-packages/astropy-0.3.dev3272-py3.2-macosx-10.8-x86_64.egg/astropy/io/fits/hdu/base.py in _get_raw_data(self, shape, code, offset)\r\n    366                               offset=offset)\r\n    367         else:\r\n--> 368             return self._file.readarray(offset=offset, dtype=code, shape=shape)\r\n    369 \r\n    370     # TODO: Rework checksum handling so that it's not necessary to add a\r\n\r\n/Volumes/Raptor/Library/Python/3.2/lib/python/site-packages/astropy-0.3.dev3272-py3.2-macosx-10.8-x86_64.egg/astropy/io/fits/py3compat.py in readarray(self, size, offset, dtype, shape)\r\n    171             if isinstance(dtype, numpy.dtype):\r\n    172                 dtype = _fix_dtype(dtype)\r\n--> 173             return old_File.readarray(self, size, offset, dtype, shape)\r\n    174         readarray.__doc__ = old_File.readarray.__doc__\r\n    175     file._File = _File\r\n\r\n/Volumes/Raptor/Library/Python/3.2/lib/python/site-packages/astropy-0.3.dev3272-py3.2-macosx-10.8-x86_64.egg/astropy/io/fits/file.py in readarray(self, size, offset, dtype, shape)\r\n    270             return Memmap(self.__file, offset=offset,\r\n    271                           mode=MEMMAP_MODES[self.mode], dtype=dtype,\r\n--> 272                           shape=shape).view(np.ndarray)\r\n    273         else:\r\n    274             count = reduce(lambda x, y: x * y, shape)\r\n\r\n/Volumes/Raptor/Library/Python/3.2/lib/python/site-packages/numpy/core/memmap.py in __new__(subtype, filename, dtype, mode, offset, shape, order)\r\n    251             bytes -= start\r\n    252             offset -= start\r\n--> 253             mm = mmap.mmap(fid.fileno(), bytes, access=acc, offset=start)\r\n    254         else:\r\n    255             mm = mmap.mmap(fid.fileno(), bytes, access=acc)\r\n\r\nValueError: mmap length is greater than file size\r\n```\r\n\r\nThis is on MacOS 10.8 with 64Gb of RAM.\r\n\r\n@iguananaut - I know you want issues to be opened on the pyfits tracker, but this is an issue that IMHO should be fixed in 0.2.1 (if it's an easy fix) so I need to open it here so we can keep track of it.\r\n\r\n\r\n"""
838,11542038,taldcroft,taldcroft,2013-03-01 12:05:32,2014-06-24 10:36:27,2013-03-01 16:18:06,closed,taldcroft,v0.2.1,3,Bug;table,https://api.github.com/repos/astropy/astropy/issues/838,b'Cannot index Table with np.where output',"b'From David Buscher:\r\n\r\nIt appears that the astropy.tables module does not accept the same row\r\nindexing syntax as the corresponding ndarray, particularly the syntax\r\noutput by np.where(), which is a tuple containing an ndarray. Example\r\nbelow:\r\n```\r\nPython 2.7.3 |EPD 7.3-1 (64-bit)| (default, Apr 12 2012, 11:14:05)\r\n[GCC 4.0.1 (Apple Inc. build 5493)] on darwin\r\nType ""credits"", ""demo"" or ""enthought"" for more information.\r\n>>> import numpy as np\r\n>>> from astropy.table import Table\r\n\r\n>>> t=Table(np.reshape(np.arange(12),(4,3)))\r\n>>> print t\r\ncol0 col1 col2\r\n---- ---- ----\r\n   0    1    2\r\n   3    4    5\r\n   6    7    8\r\n   9   10   11\r\n\r\n>>> rows=np.where(t[""col0""]>5)\r\n>>> print rows\r\n(array([2, 3]),)\r\n\r\n# ndarray version\r\n>>> print np.array(t)[rows]\r\n[(6, 7, 8) (9, 10, 11)]\r\n\r\n# Tables version\r\n>>> print t[rows[0]]\r\ncol0 col1 col2\r\n---- ---- ----\r\n   6    7    8\r\n   9   10   11\r\n\r\n>>> print t[rows]\r\nERROR: TypeError: unhashable type: \'numpy.ndarray\' [astropy.table.table]\r\nTraceback (most recent call last):\r\n  File ""<stdin>"", line 1, in <module>\r\n  File ""/Library/Frameworks/EPD64.framework/Versions/7.3/lib/python2.7/site-packages/astropy/table/table.py"",\r\nline 1282, in __getitem__\r\n    if any(x not in set(self.colnames) for x in item):\r\n  File ""/Library/Frameworks/EPD64.framework/Versions/7.3/lib/python2.7/site-packages/astropy/table/table.py"",\r\nline 1282, in <genexpr>\r\n    if any(x not in set(self.colnames) for x in item):\r\nTypeError: unhashable type: \'numpy.ndarray\'\r\n```\r\n'"
829,11432043,astrofrog,taldcroft,2013-02-26 22:24:18,2014-06-22 02:49:04,2013-03-05 16:34:12,closed,taldcroft,v0.2.1,3,Bug;table,https://api.github.com/repos/astropy/astropy/issues/829,b'Bug with Table sorting?',"b""If I try and read in the following file:\r\n\r\nhttp://www.mpia.de/~robitaille/python/rosat.vot\r\n\r\nand sort according to the counts:\r\n\r\n```\r\nIn [1]: from astropy.table import Table\r\n\r\nIn [2]: t = Table.read('rosat.vot')\r\n\r\nIn [3]: t.keep_columns(['RAJ2000', 'DEJ2000', 'Count'])\r\n\r\nIn [4]: t.sort('Count')\r\n```\r\n\r\nI get some weird results:\r\n\r\n* ``print(t)`` shows an unsorted table:\r\n\r\n```\r\nIn [5]: print(t)\r\n RAJ2000   DEJ2000    Count  \r\n--------- --------- ---------\r\n  0.00000 -39.48403      0.13\r\n  0.02917   8.28153      0.19\r\n  0.04167 -63.59528      0.19\r\n  0.04958   5.38833      0.26\r\n  0.05250   1.77250     0.081\r\n  0.05625  57.94125      0.12\r\n  0.08125 -26.17556      0.12\r\n  0.14792 -28.09819     0.072\r\n  0.16000  79.67694       0.1\r\n  0.17708  62.17611      0.16\r\n  0.18417 -26.08931      0.12\r\n  0.18583 -25.84181      0.05\r\n```\r\n\r\n* ``t.more()`` shows a sorted table:\r\n\r\n```\r\nIn [7]: t.more()\r\n\r\n RAJ2000   DEJ2000    Count  \r\n--------- --------- ---------\r\n  2.24333 -23.88486      0.05\r\n  7.83833  30.26611      0.05\r\n 17.45833  19.65736      0.05\r\n 20.64042 -22.90139      0.05\r\n 36.40958  37.54028      0.05\r\n 39.69792  40.18306      0.05\r\n 64.73541  13.23681      0.05\r\n 82.30708  -6.25097      0.05\r\n 93.72875 -60.65736      0.05\r\n 97.19500 -68.13250      0.05\r\n107.63583  -8.70889      0.05\r\n110.80459  58.69194      0.05\r\n125.11417 -22.92417      0.05\r\n```\r\n\r\n* ``t['Count']`` shows an unsorted column:\r\n\r\n```\r\nIn [8]: t['Count']\r\nOut[8]: \r\n<MaskedColumn name='Count' units='ct / (s)' format='%9.2g' description='? Source countrate (4)'>\r\nmasked_array(data = [0.13099999725818634 0.18700000643730164 0.1899999976158142 ...,\r\n 0.06639999896287918 0.05249999836087227 0.11500000208616257],\r\n             mask = [False False False ..., False False False],\r\n       fill_value = 1e+20)\r\n```\r\n\r\nNot sure what's going on! Any ideas?"""
828,11431704,astrofrog,astrofrog,2013-02-26 22:15:41,2013-09-30 20:39:13,2013-09-30 20:39:12,closed,astrofrog,v0.2.5,20,Bug;Effort-low;table,https://api.github.com/repos/astropy/astropy/issues/828,b'Table > value should not work',"b""In Python 2, the following works:\r\n\r\n```\r\nIn [1]: from astropy.table import Table\r\n\r\nIn [2]: t = Table([[1,2,3]])\r\n\r\nIn [3]: t > 0.2\r\nOut[3]: True\r\n```\r\n\r\nbut I think it shouldn't, and indeed doesn't in Python 3:\r\n\r\n```\r\nIn [1]: from astropy.table import Table\r\n\r\nIn [2]: t = Table([[1,2,3]])\r\n\r\nIn [3]: t > 0.2\r\nERROR: TypeError: unorderable types: Table() > float() [IPython.core.interactiveshell]\r\n---------------------------------------------------------------------------\r\nTypeError                                 Traceback (most recent call last)\r\n<ipython-input-3-26baf2ef9239> in <module>()\r\n----> 1 t > 0.2\r\n\r\nTypeError: unorderable types: Table() > float()\r\n```\r\n\r\nThe Python 2 behavior led me to confusion when I did ``t[t > 0.2]`` by mistake, when I meant ``t[t['RA'] > 0.2]``."""
820,11376190,eteq,embray,2013-02-25 19:34:28,2014-07-02 13:20:55,2013-04-02 17:50:20,closed,embray,v0.2.1,18,Bug,https://api.github.com/repos/astropy/astropy/issues/820,"b""py3.3 doesn't download distribute correctly, fails build""","b'I have a vague memory of seeing this issue come up before, but I can\'t seem to find it now, so I\'m making a new one - If it\'s a dup, sorry, and this can be closed.\r\n\r\nFor 0.3 we definitely want python 3.3 to be fully supported (by then, scipy should also support it).  Right now, though, if I try to do ``python3.3 setup.py build``, without a system install of distribute (at least, I don\'t *think* there is one...), I get the following traceback:\r\n```\r\nFreezing version number to astropy/version.py\r\nTraceback (most recent call last):\r\n  File ""setup.py"", line 82, in <module>\r\n    package_dirs)\r\n  File ""/Users/erik/src/astropy/astropy/setup_helpers.py"", line 961, in update_package_files\r\n    extensions.extend(setuppkg.get_extensions())\r\n  File ""astropy/wcs/setup_package.py"", line 204, in get_extensions\r\n    from astropy.version import debug\r\nImportError: No module named \'astropy.version\'\r\n```\r\n\r\nIf I get it to pull down the latest distribute, though, it works fine.  It\'s also possible this is a distribute *versioning* problem, because it doesn\'t seem to be completely reproducible (although I admit I\'m not being terribly careful, so I recommend someone else cross-check that part) \r\n\r\n@iguananaut @astrofrog'"
800,11200906,olebole,embray,2013-02-20 15:15:19,2013-02-20 17:08:34,2013-02-20 17:08:34,closed,,v0.2.1,4,Bug;Docs,https://api.github.com/repos/astropy/astropy/issues/800,b'Minor warning when building with python-3.2',"b""When building with python3, I get the warning\r\n\r\nCan't parse docstring in build/lib.linux-x86_64-3.2/astropy/nddata/convolution/convolve.py line 293: TokenError: ('EOF in multi-line statement', (2, 0))\r\n\r\nhowever the installation runs fine (with #799 having fixed)."""
792,11136160,kbarbary,astrofrog,2013-02-18 23:57:40,2014-06-16 08:53:04,2013-12-13 07:52:24,closed,taldcroft,v0.3.1,23,Bug;Effort-low;table,https://api.github.com/repos/astropy/astropy/issues/792,b'Table unpickling fails',"b""To reproduce, follow the first example in the `astropy.table` docs, then pickle and unpickle the table:\r\n\r\n    from astropy.table import Table\r\n    from astropy.io.misc import fnpickle, fnunpickle\r\n\r\n    a = [1, 4, 5]\r\n    b = [2.0, 5.0, 8.2]\r\n    c = ['x', 'y', 'z']\r\n    t = Table([a, b, c], names=('a', 'b', 'c'))\r\n\r\n    fnpickle(t, 'test.pik')\r\n    t = fnunpickle('test.pik')\r\n\r\nWith cPickle, I get an `AttributeError: 'Column' object has no attribute '_units'`. \r\n\r\nWith pickle I get `AttributeError: 'list' object has no attribute 'name'`.\r\n\r\nHope this isn't an issue in 0.2..."""
790,11132334,taldcroft,taldcroft,2013-02-18 21:37:21,2013-07-01 14:41:37,2013-07-01 14:41:37,closed,taldcroft,v0.3.0,2,Bug;io.ascii,https://api.github.com/repos/astropy/astropy/issues/790,b'Unable to set write_comment in io.ascii.write',"b""Colin Jermain reports:\r\n\r\nI have been trying to add a comment to the top of a data file using asciitable.writer and found a bug in the code. In asciitable/core.py, line 1046, by changing 'comment' to 'writer_comment' the code should allow comments to be set. Currently it is looking for 'comment' instead of 'writer_comment' prior to Writer instantiation and throws an exception when writer_comment is passed as an argument since it gets passed into the object instead of being handled below.\r\n\r\nThis is correct, need to fix bug and add appropriate tests."""
784,11051137,eteq,embray,2013-02-15 20:26:07,2013-04-02 22:09:41,2013-04-02 22:09:41,closed,mdboom,v0.2.1,26,Bug,https://api.github.com/repos/astropy/astropy/issues/784,b'Tests segfaulting in numpy 1.4.1 (in travis)',"b'It appears that the numpy 1.4.1 tests in travis are now all failing due to a segfault.  It\'s a little hard to tell exactly when this appeared, but the first commit that I can find showing it is the same as the failure that #782 fixes appeared in.  This might be coincidence, though, because there are several PRs in between that and the previous ""good"" one.\r\n\r\nI also can\'t reproduce this locally on OS X, but I\'m not sure I would, because the compiler and c stdlib might be different. I think Travis is on Ubuntu, so that\'s probably the place to look.\r\n\r\nIt may well be this is a numpy 1.4.1 bug, in which case we probably just want to skip the test in that case and let the rest run.  But it\'s currently causing the tests to fail, so we want to at least determine the cause. '"
770,10938878,taldcroft,taldcroft,2013-02-13 02:55:14,2013-04-29 02:30:17,2013-04-29 02:30:17,closed,taldcroft,v0.2.2,1,Bug;Effort-low;table,https://api.github.com/repos/astropy/astropy/issues/770,b'Setting a table row from a row fails',"b""From comments in #726 reported by @mhvk:\r\n```\r\na=astropy.table.Table(np.zeros((3,3)), names=('a','b','c'))\r\na[1] = a[2]   # FAIL\r\na[1] = a[2].data  # OK\r\na[1] = a._data[2]  # OK\r\n```"""
744,10760807,astrofrog,astrofrog,2013-02-07 23:02:12,2013-02-08 20:23:56,2013-02-08 14:28:40,closed,astrofrog,v0.2.0,14,Bug,https://api.github.com/repos/astropy/astropy/issues/744,b'Issues with big endian Numpy arrays in Quantity',"b'Example behavior:\r\n\r\n```\r\nIn [20]: (np.array([1,2,3], dtype=\'<f4\') * u.au).to(u.cm)\r\nOut[20]: <Quantity [  1.49597874e+13   2.99195748e+13   4.48793632e+13] cm>\r\n\r\nIn [21]: (np.array([1,2,3], dtype=\'>f4\') * u.au).to(u.cm)\r\nERROR: ValueError: Value not scalar compatible or convertable into a float or integer array [astropy.units.core]\r\n---------------------------------------------------------------------------\r\nValueError                                Traceback (most recent call last)\r\n<ipython-input-21-c1528283657d> in <module>()\r\n----> 1 (np.array([1,2,3], dtype=\'>f4\') * u.au).to(u.cm)\r\n\r\n/Users/tom/Library/Python/3.2/lib/python/site-packages/astropy-0.3.dev3119-py3.2-macosx-10.6-x86_64.egg/astropy/units/quantity.py in to(self, unit, equivalencies)\r\n    100             directly convertible.  See :ref:`unit_equivalencies`.\r\n    101         """"""\r\n--> 102         new_val = self.unit.to(unit, self.value, equivalencies=equivalencies)\r\n    103         new_unit = Unit(unit)\r\n    104         return Quantity(new_val, new_unit)\r\n\r\n/Users/tom/Library/Python/3.2/lib/python/site-packages/astropy-0.3.dev3119-py3.2-macosx-10.6-x86_64.egg/astropy/units/core.py in to(self, other, value, equivalencies)\r\n    372         other = Unit(other)\r\n    373         return self.get_converter(\r\n--> 374             other, equivalencies=equivalencies)(value)\r\n    375 \r\n    376     def in_units(self, other, value=1.0, equivalencies=[]):\r\n\r\n/Users/tom/Library/Python/3.2/lib/python/site-packages/astropy-0.3.dev3119-py3.2-macosx-10.6-x86_64.egg/astropy/units/core.py in <lambda>(val)\r\n    340             return self._apply_equivalences(\r\n    341                 self, other, equivalencies)\r\n--> 342         return lambda val: scale * _condition_arg(val)\r\n    343 \r\n    344     def to(self, other, value=1.0, equivalencies=[]):\r\n\r\n/Users/tom/Library/Python/3.2/lib/python/site-packages/astropy-0.3.dev3119-py3.2-macosx-10.6-x86_64.egg/astropy/units/core.py in _condition_arg(value)\r\n   1419         except ValueError:\r\n   1420             raise ValueError(\r\n-> 1421                 ""Value not scalar compatible or convertable into a float or ""\r\n   1422                 ""integer array"")\r\n\r\nValueError: Value not scalar compatible or convertable into a float or integer array\r\n```\r\n\r\nI\'m working on a fix.'"
725,10587403,embray,embray,2013-02-03 18:38:46,2014-06-18 14:07:30,2013-03-21 21:43:03,closed,,v0.2.1,4,Bug;Priority-Low,https://api.github.com/repos/astropy/astropy/issues/725,"b""./setup.py develop doesn't work in a fresh checkout""","b""A typical workflow for myself, and many others, is to check out a repository, create a virtualenv, and then run `./setup.py develop` in the virtualenv.  Normally this should just work out of the box, but with Astropy I'm now getting an error about `cython_version.py` being missing.\r\n\r\nNormally `./setup.py develop` should automatically run the build command first so I'm not sure why exactly this is happening.  There's no problem if I manually run `./setup.py build` followed by `./setup.py develop` so this really isn't a big deal, but I'd still like to get to the bottom of it at some point because it is a bug."""
710,10491560,astrofrog,astrofrog,2013-01-31 08:04:03,2013-04-20 09:48:23,2013-04-20 09:48:23,closed,astrofrog,v0.3.0,17,Bug,https://api.github.com/repos/astropy/astropy/issues/710,b'Python 3 Windows test failure for find_api_page',"b""On the Windows Jenkins instance, ``find_api_page`` is causing a failure:\r\n\r\nhttps://jenkins.shiningpanda.com/astropy/job/astropy-winxp32-multiconfig/COMPILER=msvc,NUMPY_VER=numpy-1.5.1,PYTHON_VER=python-3.1/lastCompletedBuild/testReport/astropy.utils.tests/test_misc/test_api_lookup/\r\n\r\nspecifically:\r\n\r\n```\r\n>       for l in oistr.strip().split('\\n'):\r\n            ls = l.split()\r\nE           TypeError: Type str doesn't support the buffer API\r\n```\r\n\r\nBy the way, we should use ``iostr.splitlines()``, not ``split('\\n')``, to make sure this works properly on Windows. Not sure if that's the source of the issue though."""
708,10454377,astrofrog,astrofrog,2013-01-30 10:57:30,2014-06-14 08:20:13,2013-01-30 18:38:40,closed,,v0.2.0,33,Bug,https://api.github.com/repos/astropy/astropy/issues/708,b'Installation issue with 0.2b2',"b'This was reported by Peter Erwin on the astropy-dev mailing list:\r\n\r\nWhen I try building Astropy v0.2b2 with\r\n\r\n```\r\npython setupy.py build\r\n```\r\n\r\nI get the following:\r\n\r\n```\r\nDownloading http://pypi.python.org/packages/source/d/distribute/distribute-0.6.28.tar.gz\r\nExtracting in /var/folders/fb/1rtt9wrr8xj6170059bb0rv80000gp/T/tmpiNILxN\r\nNow working in /var/folders/fb/1rtt9wrr8xj6170059bb0rv80000gp/T/tmpiNILxN/distribute-0.6.28\r\nBuilding a Distribute egg in /Beleriand/build/astropy-0.2b2\r\n/Beleriand/build/astropy-0.2b2/distribute-0.6.28-py2.7.egg\r\nTraceback (most recent call last):\r\n  File ""setup.py"", line 56, in <module>\r\n    adjust_compiler(NAME)\r\n  File ""/Beleriand/build/astropy-0.2b2/astropy/setup_helpers.py"", line 118, in adjust_compiler\r\n    version = get_compiler_version(c_compiler)\r\n  File ""/Beleriand/build/astropy-0.2b2/astropy/setup_helpers.py"", line 130, in get_compiler_version\r\n    shlex.split(compiler) + [\'--version\'], stdout=subprocess.PIPE)\r\n  File ""/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/subprocess.py"", line 679, in __init__\r\n    errread, errwrite)\r\n  File ""/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/subprocess.py"", line 1249, in _execute_child\r\n    raise child_exception\r\nOSError: [Errno 2] No such file or directory\r\n```\r\n\r\nPython 2.7.3 (64-bit), running on Mac OS X 10.7.5 (MacBook Pro 15-inch, early 2011 version,\r\n8 GB memory).\r\n(Installed version of Xcode is 4.5.2)'"
706,10451981,astrofrog,astrofrog,2013-01-30 09:35:43,2014-08-06 23:03:38,2013-01-30 17:40:53,closed,astrofrog,v0.2.0,12,Bug;units,https://api.github.com/repos/astropy/astropy/issues/706,b'Cannot access items from Quantity array',"b'The following example illustrates the issue:\r\n\r\n```\r\nIn [1]: from astropy import units as u\r\n\r\nIn [2]: import numpy as np\r\n\r\nIn [4]: q = np.array([1,2,3]) * u.m\r\n\r\nIn [5]: q[1]\r\nERROR: TypeError: The value must be a valid Python numeric type. [astropy.units.quantity]\r\n---------------------------------------------------------------------------\r\nTypeError                                 Traceback (most recent call last)\r\n<ipython-input-5-6007c827c99f> in <module>()\r\n----> 1 q[1]\r\n\r\n/Users/tom/Library/Python/3.2/lib/python/site-packages/astropy-0.3.dev3053-py3.2-macosx-10.6-x86_64.egg/astropy/units/quantity.py in __getitem__(self, key)\r\n    309             raise TypeError(""\'{cls}\' object with a scalar value does not support indexing"".format(cls=self.__class__.__name__))\r\n    310         else:\r\n--> 311             return Quantity(self.value[key], unit=self.unit)\r\n    312 \r\n    313     def __len__(self):\r\n\r\n/Users/tom/Library/Python/3.2/lib/python/site-packages/astropy-0.3.dev3053-py3.2-macosx-10.6-x86_64.egg/astropy/units/quantity.py in __init__(self, value, unit)\r\n     77 \r\n     78     def __init__(self, value, unit):\r\n---> 79         self._value = _validate_value(value)\r\n     80         self._unit = Unit(unit)\r\n     81 \r\n\r\n/Users/tom/Library/Python/3.2/lib/python/site-packages/astropy-0.3.dev3053-py3.2-macosx-10.6-x86_64.egg/astropy/units/quantity.py in _validate_value(value)\r\n     52         value_obj = np.array(value, copy=True)\r\n     53     else:\r\n---> 54         raise TypeError(""The value must be a valid Python numeric type."")\r\n     55 \r\n     56     return value_obj\r\n\r\nTypeError: The value must be a valid Python numeric type.\r\n```\r\n\r\nSlicing works though:\r\n\r\n```\r\nIn [6]: q[1:2]\r\nOut[6]: <Quantity [2] m>\r\n```\r\n\r\nWhoever has time to look at this first should assign themselves to this issue.'"
688,10352517,astrofrog,embray,2013-01-27 10:17:46,2013-01-30 01:31:33,2013-01-29 20:28:02,closed,,v0.2.0,10,Bug,https://api.github.com/repos/astropy/astropy/issues/688,b'Fix generate_default_config to work with affiliated packages',"b""As reported in astropy/package-template#12, there is an issue with ``generate_default_config``, because the following lines:\r\n\r\n```\r\n    pkg_dir = os.path.relpath(os.path.dirname(__file__))\r\n    config_path = os.path.join(pkg_dir, 'config')\r\n    filename = os.path.join(config_path, package + '.cfg')\r\n```\r\n\r\nmean that ``pkg_dir`` will point to the Astropy config path, not the affiliated package. I'm not sure what the best way to fix it is - @eteq @iguananaut, do you have any ideas? Should ``pgk_dir`` use the ``package`` variable instead? Also, note that affiliated packages do not have a ``config`` sub-package, so I guess the default configuration file should live at the root level. Actually, maybe we should just do that for the core package too, to simplify things?\r\n"""
684,10328106,eteq,embray,2013-01-25 22:03:38,2013-01-28 18:06:47,2013-01-28 18:06:47,closed,,v0.2.0,2,Bug;coordinates,https://api.github.com/repos/astropy/astropy/issues/684,"b""Angle.format doesn't pad for neative angles""","b""I noticed incorrect behavior in an oddly particular case:\r\n\r\n```\r\n>>> a = coords.Angle(-1.36546543,'deg')\r\n>>> a.format(u.degree,sep=':',pad=True,precision=2,alwayssign=True)\r\n'-1:21:55.68'\r\n```\r\n\r\nThe problem is that there should be a '0' between the '-' and the '1'. Note that this is specific to negative angles - the 0 goes in correctly for positive angles:\r\n\r\n```\r\n>>> a = coords.Angle(1.36546543,'deg')\r\n>>> a.format(u.degree,sep=':',pad=True,precision=2,alwayssign=True)\r\n'+01:21:55.68'\r\n```\r\n\r\n\r\n"""
679,10320579,embray,embray,2013-01-25 18:09:39,2015-05-03 17:17:55,2013-01-25 20:46:47,closed,,v0.2.0,3,Bug;units,https://api.github.com/repos/astropy/astropy/issues/679,b'Division of Quantity by a scalar wrong',"b""```\r\nIn [1]: from astropy.units import Quantity as Q\r\n\r\nIn [2]: Q(1, 'm/s') / 2\r\nOut[2]: <Quantity 2.0 s / (m)>\r\n```\r\n\r\nThis is appears to be doing the inverse of what it should be. FWIW the actual inverse operation is correct:\r\n\r\n```\r\nIn [3]: 2 / Q(1, 'm/s')\r\nOut[3]: <Quantity 2.0 s / (m)>\r\n```\r\n\r\nThis just seems to affect division by scalars. Division by other quantities (and curiously, even numpy scalars arrays) is correct:\r\n\r\n```\r\nIn [12]: Q(1, 'm/s') / np.array(2)\r\nOut[12]: <Quantity 0.5 m / (s)>\r\n```"""
675,10293769,embray,embray,2013-01-24 23:20:18,2013-01-26 11:21:42,2013-01-25 19:19:36,closed,,v0.2.0,1,Bug;testing,https://api.github.com/repos/astropy/astropy/issues/675,b'Windows builds failing due to weird crash',"b'Depending on how far down the rabbit hole this goes I might just make a temporary workaround for this on Windows.\r\n\r\nRight now the builds are failing on Windows due to the automatic generation of the default astropy.cfg file, which is run in a subprocess.  The call the `Popen.communicate()` is crashing, and from trial and error it seems to have something to do with passing environment variables. More as I investigate this...\r\n'"
672,10274979,nhmc,astrofrog,2013-01-24 14:51:13,2014-05-21 23:58:12,2013-01-29 21:24:52,closed,,v0.2.0,3,Bug;units,https://api.github.com/repos/astropy/astropy/issues/672,b'Unit conversion on quantities mishandles long values',"b'I came across the inconsistency below using the units module. Unfortunately I don\'t have time to explore what\'s going on...\r\n\r\nThis works fine:\r\n\r\n```python\r\n>>> import astropy.units as u\r\n>>> sigma = (100 * u.M_sun / u.pc**2)\r\n>>> print sigma.to(u.M_p / u.cm**2)\r\n1.24898660319e+22 M_p / (cm2)\r\n```\r\n\r\nbut going the opposite way doesn\'t work:\r\n\r\n```python\r\n>>> sigma = 10**21 * u.M_p / u.cm**2\r\n>>> sigma.to(u.M_sun / u.pc**2)\r\n\r\n---------------------------------------------------------------------------\r\nValueError                                Traceback (most recent call last)\r\n<ipython-input-4-751caefcb775> in <module>()\r\n----> 1 sigma.to(u.M_sun / u.pc**2)\r\n\r\n/usr/local/lib/python2.7/dist-packages/astropy/units/quantity.pyc in to(self, unit, equivalencies)\r\n     84             directly convertible.  See :ref:`unit_equivalencies`.\r\n     85         """"""\r\n---> 86         new_val = self.unit.to(unit, self.value, equivalencies=equivalencies)\r\n     87         new_unit = Unit(unit)\r\n     88         return Quantity(new_val, new_unit)\r\n\r\n/usr/local/lib/python2.7/dist-packages/astropy/units/core.pyc in to(self, other, value, equivalencies)\r\n    368         other = Unit(other)\r\n    369         return self.get_converter(\r\n--> 370             other, equivalencies=equivalencies)(value)\r\n    371 \r\n    372     def in_units(self, other, value=1.0, equivalencies=[]):\r\n\r\n/usr/local/lib/python2.7/dist-packages/astropy/units/core.pyc in <lambda>(val)\r\n    336             return self._apply_equivalences(\r\n    337                 self, other, equivalencies)\r\n--> 338         return lambda val: scale * _condition_arg(val)\r\n    339 \r\n    340     def to(self, other, value=1.0, equivalencies=[]):\r\n\r\n/usr/local/lib/python2.7/dist-packages/astropy/units/core.pyc in _condition_arg(value)\r\n   1163         except ValueError:\r\n   1164             raise ValueError(\r\n-> 1165                 ""Value not scalar compatible or convertable into a float or ""\r\n   1166                 ""integer array"")\r\n\r\nValueError: Value not scalar compatible or convertable into a float or integer array\r\n```\r\n'"
670,10268813,astrofrog,astrofrog,2013-01-24 11:10:34,2013-11-08 22:20:55,2013-10-31 07:25:28,closed,,,4,Bug;testing;Upstream Fix Required,https://api.github.com/repos/astropy/astropy/issues/670,b'Tests for astropy.utils.compat.futures failing on Windows',"b""I haven't had a chance to look into this, but there are failures related to ``astropy.utils.compat.futures`` on Windows:\r\n\r\nhttps://jenkins.shiningpanda.com/astropy/job/astropy-winxp32-multiconfig/lastCompletedBuild/testReport/"""
652,10075024,astrofrog,embray,2013-01-17 20:55:54,2013-01-24 17:02:33,2013-01-24 17:02:33,closed,,v0.2.0,30,Bug,https://api.github.com/repos/astropy/astropy/issues/652,b'python setup.py install in clean repo bypasses custom build',"b'If we run:\r\n\r\n```\r\npython setup.py build\r\npython setup.py install\r\n```\r\n\r\nthen the custom build command is used for the build, and the custom install command for install. However, if in a clean repository, we do:\r\n\r\n```\r\npython setup.py install\r\n```\r\n\r\nthe custom build command never gets executed (instead, ``build_py`` and ``build_ext`` are called). This means that when doing\r\n\r\n```\r\npython setup.py install\r\n```\r\n\r\nin a clean repository, the config file will never get generated, which causes ``import astropy`` to not work *anywhere* because there is no default config file (since this gets generated in the custom build command). See #651 where I ran into this issue.\r\n\r\nEDIT: just to clarify, for anyone not familiar with the code - this is because the config file gets generated inside the custom AstropyBuild.run method, which does not get called if running only ``install``.\r\n\r\n@eteq @iguananaut - any ideas?'"
555,9217172,mdboom,mdboom,2012-12-12 14:24:05,2012-12-12 14:28:40,2012-12-12 14:28:40,closed,,,1,Bug;io.fits,https://api.github.com/repos/astropy/astropy/issues/555,b'io.fits test failures on Fedora 17 64-bit',"b""I am getting a number of failures in the FITS tests on my home machine (which obviously aren't being triggered on Travis or ShiningPanda ATM).\r\n\r\nhttps://gist.github.com/4268083\r\n\r\nGit bisect tells me the first failing commit is: cb09f8f0b4a0\r\n\r\nThis is Python 2.7, Numpy 1.6.2.\r\n"""
549,9131138,eteq,embray,2012-12-10 07:44:21,2012-12-21 17:03:01,2012-12-21 17:03:01,closed,embray,v0.2.0,5,Bug;io.fits,https://api.github.com/repos/astropy/astropy/issues/549,b'building io.fits fails due to import_array',"b'When I build astropy in python 3.2.3 with numpy 1.6.1 (both from macports) on Mac OS X 10.8, I get the error I\'ve shown below when I do ``python setup.py build``. I do *not* get this error if I build with 2.7.3, though.\n\nNote that if replace `import_array` where the error is generated (``astropy/io/fits/src/compressionmodule.c:979``), it compiles happily and all the tests pass.  I\'m not sure if that\'s a good solution, but it might useful information.\n\ncc: @iguananaut \n\n```\n/usr/bin/clang -fno-common -dynamic -DNDEBUG -g -fwrapv -O3 -Wall -Wstrict-prototypes -pipe -O2 -I/opt/local/Library/Frameworks/Python.framework/Versions/3.2/lib/python3.2/site-packages/numpy/core/include -Icextern/cfitsio -I/opt/local/Library/Frameworks/Python.framework/Versions/3.2/include/python3.2m -c astropy/io/fits/src/compressionmodule.c -o build/temp.macosx-10.8-x86_64-3.2/astropy/io/fits/src/compressionmodule.o -Wno-unused-variable -Wno-parentheses -Wno-uninitialized -Wno-format -Wno-strict-prototypes -Wno-unused -Wno-comments -Wno-switch\nastropy/io/fits/src/compressionmodule.c:979:5: error: void function \'compression_module_init\' should not return a value [-Wreturn-type]\n    import_array();\n    ^~~~~~~~~~~~~~\n/opt/local/Library/Frameworks/Python.framework/Versions/3.2/lib/python3.2/site-packages/numpy/core/include/numpy/__multiarray_api.h:1616:144: note: expanded from macro\n      \'import_array\'\n#define import_array() {if (_import_array() < 0) {PyErr_Print(); PyErr_SetString(PyExc_ImportError, ""numpy.core.multiarray failed to import""); return ...\n                                                                                                                                               ^\n1 error generated.\nerror: command \'/usr/bin/clang\' failed with exit status 1\n```'"
520,8932967,taldcroft,embray,2012-12-03 00:45:39,2016-01-27 17:38:07,2016-01-27 17:36:59,closed,embray,v1.0.9,27,Affects-release;Bug;io.fits,https://api.github.com/repos/astropy/astropy/issues/520,b'Memory leak reading and copying bin table FITS files with io.fits',"b""The following code leaks memory when run (on python 2.7, astropy master, OS=linux)\n\n```python\nimport astropy.io.fits as pyfits\n\ndef readfile(filename, checkshape):\n    hdus = pyfits.open(filename)\n    # Without copy() there is no leak.\n    dat = hdus[1].data.copy()\n    hdus.close()\n\n    for colname in dat.dtype.names:\n        # When checkshape is False there is no leak\n        if checkshape:\n            dat[colname].shape == 0\n\n# wget http://hea-www.harvard.edu/~aldcroft/tmp/memtest.fits.gz\nfilename = 'memtest.fits.gz' \nwhile True:\n    print 'Reading'\n    readfile(filename, checkshape=True)\n```\n\nI'm guessing that accessing the `shape` attribute is not really the problem but presumably it triggers some action that causes the leak.  The workaround I used for this is effectively:\n```python\ndat = np.array(hdus[1].data, copy=True)\n```\n(Though I discovered that pyfits is doing some nice magic with a FITS boolean-vector field, so in reality I had to do something a little more complicated).\n"""
511,8775426,pllim,taldcroft,2012-11-28 18:01:14,2014-08-10 21:07:41,2013-01-26 00:28:02,closed,,v0.2.0,14,Bug;io.ascii,https://api.github.com/repos/astropy/astropy/issues/511,b'io.ascii daophot pprint crashes on row with INDEF',"b'Input file (direct output from daophot)::\n\n    #N IMAGE               XINIT     YINIT     ID    COORDS                 LID    \\\n    #U imagename           pixels    pixels    ##    filename               ##     \\\n    #F %-23s               %-10.3f   %-10.3f   %-6d  %-23s                  %-6d    \n    #\n    #N XCENTER    YCENTER    XSHIFT  YSHIFT  XERR    YERR            CIER CERROR   \\\n    #U pixels     pixels     pixels  pixels  pixels  pixels          ##   cerrors  \\\n    #F %-14.3f    %-11.3f    %-8.3f  %-8.3f  %-8.3f  %-15.3f         %-5d %-9s      \n    #\n    #N MSKY           STDEV          SSKEW          NSKY   NSREJ     SIER SERROR   \\\n    #U counts         counts         counts         npix   npix      ##   serrors  \\\n    #F %-18.7g        %-15.7g        %-15.7g        %-7d   %-9d      %-5d %-9s      \n    #\n    #N ITIME          XAIRMASS       IFILTER                OTIME                  \\\n    #U timeunit       number         name                   timeunit               \\\n    #F %-18.7g        %-15.7g        %-23s                  %-23s                   \n    #\n    #N RAPERT   SUM           AREA       FLUX          MAG    MERR   PIER PERROR   \\\n    #U scale    counts        pixels     counts        mag    mag    ##   perrors  \\\n    #F %-12.2f  %-14.7g       %-11.7g    %-14.7g       %-7.3f %-6.3f %-5d %-9s      \n    #\n    n8q624e8q_cal.fits[1]  76.102    2.280     1     test.stars             1      \\\n       76.150     2.182      0.048   -0.098  0.016   0.014          108  BadPixels \\\n       0.5378259      0.1369367      0.1002712      604    176      0    NoError   \\\n       1407.892       INDEF          F160W                  INDEF                  \\\n       4.00     0.            0.         0.            INDEF  INDEF 301  OffImage   \n    n8q624e8q_cal.fits[1]  81.730    3.167     2     test.stars             2      \\\n       76.150     2.182      -5.580  -0.985  0.016   0.014          108  BadPixels \\\n       0.5378259      0.1369367      0.1002712      604    176      0    NoError   \\\n       1407.892       INDEF          F160W                  INDEF                  \\\n       4.00     0.            0.         0.            INDEF  INDEF 301  OffImage\n\nCommands using the latest astropy master plus #510 fix:\n\n    >>> from astropy.io import ascii\n    >>> reader = ascii.Daophot()\n    >>> photfile = reader.read(\'test.phot\')\n    >>> photfile.pprint(max_lines=1)\n\nError message::\n\n    ---------------------------------------------------------------------------\n    TypeError                                 Traceback (most recent call last)\n    <ipython-input-20-edbd1f316045> in <module>()\n    ----> 1 photfile.pprint(max_lines=1)\n\n    /home/lib/python2.7/site-packages/astropy/table/table.pyc in pprint(self, max_lines, max_width, show_name, show_units)\n       1054 \n       1055         lines, n_header = _pformat_table(self, max_lines, max_width, show_name,\n    -> 1056                                          show_units)\n       1057         for i, line in enumerate(lines):\n       1058             if i < n_header:\n\n    /home/lib/python2.7/site-packages/astropy/table/pprint.pyc in _pformat_table(table, max_lines, max_width, show_name, show_units, html)\n        256     for col in table.columns.values():\n        257         lines, n_header = _pformat_col(col, max_lines, show_name,\n    --> 258                                        show_units)\n        259         cols.append(lines)\n        260 \n\n    /home/lib/python2.7/site-packages/astropy/table/pprint.pyc in _pformat_col(col, max_lines, show_name, show_units)\n        128     """"""\n        129     outs = {}  # Some values from _pformat_col_iter iterator that are needed here\n    --> 130     col_strs = list(_pformat_col_iter(col, max_lines, show_name, show_units, outs))\n        131     col_width = max(len(x) for x in col_strs)\n        132 \n\n    /home/lib/python2.7/site-packages/astropy/table/pprint.pyc in _pformat_col_iter(col, max_lines, show_name, show_units, outs)\n        211                            format_func(col.format, col[(i,) + multidim1]))\n        212             else:\n    --> 213                 col_str = format_func(col.format, col[i])\n        214             yield col_str\n        215         elif i == i0:\n    \n    /home/lib/python2.7/site-packages/astropy/table/pprint.pyc in <lambda>(format_, val)\n         96             if out == format_:\n         97                 raise ValueError\n    ---> 98             format_func = lambda format_, val: format_ % val\n         99         except:\n        100             raise ValueError(\'Unable to parse format string {0}\'\n\n    TypeError: float argument required, not numpy.string_\n\n    ERROR: TypeError: float argument required, not numpy.string_ [astropy.table.pprint]\n\n`pprint` works fine when I replaced ""INDEF"" with ""0    "" but I really don\'t want to do that to all my phot output files.'"
509,8762110,taldcroft,taldcroft,2012-11-28 11:48:48,2013-03-29 20:44:14,2012-11-30 04:09:56,closed,,v0.2.0,0,Bug;io.ascii,https://api.github.com/repos/astropy/astropy/issues/509,b'DAOphot reader should use fixed width parser and column format information',"b""As reported by Megan Sosey:\r\n\r\nIf the output filename where your photometry is stored (usu the imagename.mag.1 file) is longer than the 23character format that is allocated in daophot, then the next column of information is NOT separated by a space and the ascii.Daophot reader returns an InconsistantTableError and thinks you're missing a column.\r\n\r\n```\r\nERROR: InconsistentTableError: Number of header columns (33) inconsistent with data columns (32) at data line 0\r\nHeader values: ['IMAGE', 'XINIT', 'YINIT', 'ID', 'COORDS', 'LID', 'XCENTER', 'YCENTER', 'XSHIFT', 'YSHIFT', 'XERR', 'YERR', 'CIER', 'CERROR', 'MSKY', 'STDEV', 'SSKEW', 'NSKY', 'NSREJ', 'SIER', 'SERROR', 'ITIME', 'XAIRMASS', 'IFILTER', 'OTIME', 'RAPERT', 'SUM', 'AREA', 'FLUX', 'MAG', 'MERR', 'PIER', 'PERROR']\r\nData values: ['n8q624e8q_cal.fits[1]', '76.102', '2.280', '1', 'n8q624e8q_cal.fits.star1', '76.150', '2.182', '0.048', '-0.098', '0.016', '0.014', '108', 'BadPixels', '0.5378259', '0.1369367', '0.1002712', '604', '176', '0', 'NoError', '1407.892', 'INDEF', 'F160W', 'INDEF', '4.00', '0.', '0.', '0.', 'INDEF', 'INDEF', '301', 'OffImage'] [astropy.io.ascii.core]\r\n```\r\n\r\nAn implementation by @hamogu is available in https://github.com/taldcroft/asciitable/pull/29, but will need adaptation because the astropy version of the `Daophot` reader has diverged.\r\n"""
465,8166740,astrofrog,astrofrog,2012-11-07 11:08:56,2013-01-23 21:59:44,2013-01-23 21:59:44,closed,mdboom,v0.2.0,13,Bug;io.votable;Upstream Fix Required,https://api.github.com/repos/astropy/astropy/issues/465,b'Failing test_from_scratch_example in vo_test.py',"b'It looks like with the latest dev version of Numpy, there is a test failing (see ShiningPanda for numpy-dev). It looks like running the ``from_scratch`` example causes the following exception to be raised:\r\n\r\n```\r\nSetting void-array with object members using buffer.\r\n```\r\n\r\nIncidentally, is there a reason why the test could not simply be written as:\r\n\r\n```\r\n    with warnings.catch_warnings(record=True) as warning_lines:\r\n        warnings.resetwarnings()\r\n        warnings.simplefilter(""always"", VOWarning, append=True)\r\n        _run_test_from_scratch_example()\r\n    assert len(warning_lines) == 0\r\n```\r\n\r\nsince the exception will make the test fail? (i.e. no need to capture the exception)'"
452,8050625,keflavich,embray,2012-11-02 04:34:20,2012-11-02 17:21:54,2012-11-02 15:25:00,closed,,v0.2.0,7,Bug,https://api.github.com/repos/astropy/astropy/issues/452,b'Build failure in build_ext',"b'I suspect that I\'m responsible for this failure and that it has nothing to do with astropy, but nonetheless I have this error and I think it\'s causing a related error in installing astroquery:\r\n\r\n``` \r\n$ python setup.py build\r\nTraceback (most recent call last):\r\n  File ""setup.py"", line 82, in <module>\r\n    cmdclassd[\'build_ext\'] = setup_helpers.wrap_build_ext(build_ext)\r\n  File ""/Users/adam/repos/astropy/astropy/setup_helpers.py"", line 142, in wrap_build_ext\r\n    orig_run = attrs[\'run\']\r\nKeyError: \'run\'\r\n```\r\n\r\nI\'m running commit 052adaf16d5f6316ca45350c60ec101d160be372; the line in question was last changed in ff42034a8064e844894f996a10af902a0aa84d91.  If I go back to the prior commit, I get a gcc error.'"
