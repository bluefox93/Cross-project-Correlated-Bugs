issue,id,reporter,closed_by,created_at,updated_at,closed_at,state,assignee,milestone,comments,label_name,url,title,body
7853,166636764,charris,charris,2016-07-20 17:26:13,2016-07-25 20:10:42,2016-07-25 20:07:18,closed,,,12,11 - Bug;component: Other,https://api.github.com/repos/numpy/numpy/issues/7853,b'    BUG: Make sure numpy globals keep identity after reload.     ',b'    Reloading currently causes problems because global classes defined in\r\n    numpy/__init__.py change their identity (a is b) after reload. The solution here is to\r\n    raise an error when a reload is attempted.\r\n\r\n    Closes #7844.\r\n'
7844,166023540,cgohlke,charris,2016-07-18 05:58:27,2016-07-25 20:07:29,2016-07-25 20:07:29,closed,,1.11.2 release,13,11 - Bug;component: numpy.core,https://api.github.com/repos/numpy/numpy/issues/7844,b'reload(numpy);numpy.max([]) raises TypeError',"b'Using `maintenance/1.11.x` on Windows (msvc builds), the following code fails:\r\n```Python\r\nPython 3.5.2 (v3.5.2:4def2a2901a5, Jun 25 2016, 22:18:55) [MSC v.1900 64 bit (AMD64)] on win32\r\nType ""help"", ""copyright"", ""credits"" or ""license"" for more information.\r\n>>> from importlib import reload\r\n>>> import numpy\r\n>>> reload(numpy)\r\n<module \'numpy\' from \'X:\\\\Python35\\\\lib\\\\site-packages\\\\numpy\\\\__init__.py\'>\r\n>>> numpy.max([])\r\nTraceback (most recent call last):\r\n  File ""X:\\Python35\\lib\\site-packages\\numpy\\core\\fromnumeric.py"", line 2290, in amax\r\n    amax = a.max\r\nAttributeError: \'list\' object has no attribute \'max\'\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\nTraceback (most recent call last):\r\n  File ""<stdin>"", line 1, in <module>\r\n  File ""X:\\Python35\\lib\\site-packages\\numpy\\core\\fromnumeric.py"", line 2293, in amax\r\n    out=out, **kwargs)\r\n  File ""X:\\Python35\\lib\\site-packages\\numpy\\core\\_methods.py"", line 26, in _amax\r\n    return umr_maximum(a, axis, None, out, keepdims)\r\nTypeError: an integer is required (got type type)\r\n```\r\nI traced this to #7736, backport of #4619 '"
7839,165792113,mattip,njsmith,2016-07-15 13:55:56,2016-07-19 01:50:30,2016-07-19 01:50:30,closed,,,3,11 - Bug;component: numpy.core;component: numpy.distutils,https://api.github.com/repos/numpy/numpy/issues/7839,b'Pypy fixes',"b'two simple fixes for PyPy:\r\n\r\n1. When PyType_Ready is called, function slots like tp_as_number.nb_add are wrapped into a Python function and put into the Python type object. Any that are NULL are ignored. Later, when umath is imported, these are overloaded for scalars. Before this patch the functions were NULL when PyType_Ready was called, so PyPy was ignoring the overload.\r\n\r\n2. PyPy has no Makefile'"
7822,164832797,samuelstjean,samuelstjean,2016-07-11 13:08:07,2016-07-18 11:17:11,2016-07-18 11:17:11,closed,,,2,04 - Documentation;11 - Bug,https://api.github.com/repos/numpy/numpy/issues/7822,b'Math does not render in tensordot doc',"b""Seems like the math from the docstring are not rendered properly in latex when viewing online [1], making it harder to decipher the function usage. In the note section which reads\r\n~~~\r\nNotes\r\n\r\nThree common use cases are:\r\naxes = 0 : tensor product $aotimes b$ axes = 1 : tensor dot product $acdot b$ axes = 2 : (default) tensor double contraction $a:b$\r\n~~~\r\nThe math is not rendered properly.\r\nProbably missing a little something like double $$, I just honestly don't know how to fix it.\r\n\r\n[1] https://docs.scipy.org/doc/numpy/reference/generated/numpy.tensordot.html#numpy.tensordot"""
7821,164742558,charris,charris,2016-07-11 00:39:13,2016-07-11 01:45:22,2016-07-11 01:45:22,closed,,1.11.2 release,0,00 - Backport;11 - Bug;component: numpy.core,https://api.github.com/repos/numpy/numpy/issues/7821,"b'Backport 7817, BUG: Make sure npy_mul_with_overflow_<type> detects overflow.'",b'Backport #7817 \r\n\r\n    BUG: Make sure npy_mul_with_overflow_<type> detects overflow.\r\n    \r\n    The previous check for overflow would fail with signed integers as it\r\n    was designed to check for overflow of the larger corresponding unsigned\r\n    type.\r\n'
7819,164730336,cgohlke,cgohlke,2016-07-10 19:35:35,2016-07-13 13:51:18,2016-07-12 21:52:40,closed,,,11,11 - Bug;component: numpy.core,https://api.github.com/repos/numpy/numpy/issues/7819,"b'numpy.zeros((0, 2**31-1)) raises MemoryError'","b'Using numpy-1.11.1 with the patch for issue #7813 on 64-bit Python, creating an array of size=0 several times raises `MemoryError` on a Windows 10 system with 32 GB RAM:\r\n```Python\r\nPython 2.7.12 (v2.7.12:d33e0cf91556, Jun 27 2016, 15:24:40) [MSC v.1500 64 bit (AMD64)] on win32\r\nType ""help"", ""copyright"", ""credits"" or ""license"" for more information.\r\n>>> import numpy\r\n>>> a = numpy.zeros((0, 2**31-1))\r\n>>> a.size\r\n0\r\n>>> a = numpy.zeros((0, 2**31-1))\r\n>>> a = numpy.zeros((0, 2**31-1))\r\nTraceback (most recent call last):\r\n  File ""<stdin>"", line 1, in <module>\r\nMemoryError\r\n``` \r\nAccording to the the VMMap tool, every call to `numpy.zeros((0, 2**31-1))` allocates ~16GB on the heap.\r\nI would not expect the creation of an array of size=0 to fail with `MemoryError` (64-bit) or `ValueError` (32-bit).\r\n'"
7818,164726864,emmenlau,rgommers,2016-07-10 18:06:25,2016-07-11 06:04:04,2016-07-11 05:30:18,closed,,,2,05 - Testing;11 - Bug;component: numpy.testing,https://api.github.com/repos/numpy/numpy/issues/7818,b'numpy/distutils/misc_util.py fix for #7809: check that _tmpdirs is not None',
7817,164726698,charris,juliantaylor,2016-07-10 18:01:44,2016-07-11 00:39:27,2016-07-10 22:11:48,closed,,,2,11 - Bug;component: numpy.core,https://api.github.com/repos/numpy/numpy/issues/7817,b'BUG: Make sure npy_mul_with_overflow_<type> detects overflow.',b'The previous check for overflow would fail with signed integers as it\r\nwas designed to check for overflow of the larger corresponding unsigned\r\ntype.'
7816,164724672,charris,charris,2016-07-10 17:12:18,2016-07-10 17:53:20,2016-07-10 17:53:19,closed,,1.11.2 release,0,00 - Backport;11 - Bug;component: numpy.core,https://api.github.com/repos/numpy/numpy/issues/7816,b'Backport 7463',"b'Backport of #7463 \r\n\r\nAn error was not being raised when arr.size * arr.dtype.itemsize\r\nwas too large, but only when arr.size was too large alone.\r\n\r\nCloses #7813.'"
7814,164686741,charris,charris,2016-07-09 21:35:07,2016-07-10 17:06:30,2016-07-10 17:06:30,closed,,,0,05 - Testing;11 - Bug;component: numpy.core,https://api.github.com/repos/numpy/numpy/issues/7814,b'TST: Test for segfault in issue 7813.',
7813,164651674,cgohlke,charris,2016-07-09 05:43:59,2016-07-10 18:03:49,2016-07-10 18:03:32,closed,,1.11.2 release,33,11 - Bug,https://api.github.com/repos/numpy/numpy/issues/7813,"b'numpy.zeros((0, 2**31-1)) crashes on 32 bit Python'","b'Using numpy-1.11.1 built with Visual Studio 2008/2010 for 32 bit Python 2.7/3.4 on Windows, the following code crashes in [multiarray.pyd](https://github.com/numpy/numpy/blob/master/numpy/core/src/multiarray/alloc.c#L194):\r\n\r\n```Python\r\n>>> import numpy\r\n>>> numpy.zeros((0, 2**31-1))   # boom\r\n```\r\n\r\nThe crash comes from `calloc(size, elsize)`, where `size=4294967288`. \r\n\r\nCall stack:\r\n```\r\n \tmsvcr90.dll!_crt_debugger_hook(int _Reserved) Line 65\tC\r\n \tmsvcr90.dll!_invoke_watson(const wchar_t * pszExpression, const wchar_t * pszFunction, const wchar_t * pszFile, unsigned int nLine, unsigned int pReserved) Line 230\tC++\r\n \tmsvcr90.dll!_calloc_impl(unsigned int num, unsigned int size, int * errno_tmp) Line 30\tC\r\n \tmsvcr90.dll!calloc(unsigned int num, unsigned int size) Line 50\tC\r\n>\tmultiarray.pyd!PyDataMem_NEW_ZEROED(unsigned int size, unsigned int elsize) Line 194\tC\r\n \tmultiarray.pyd!npy_alloc_cache_zero(unsigned int sz) Line 86\tC\r\n \tmultiarray.pyd!PyArray_NewFromDescr_int(_typeobject * subtype, _PyArray_Descr * descr, int nd, int * dims, int * strides, void * data, int flags, _object * obj, int zeroed) Line 1051\tC\r\n \tmultiarray.pyd!PyArray_Zeros(int nd, int * dims, _PyArray_Descr * type, int is_f_order) Line 2860\tC\r\n \tmultiarray.pyd!array_zeros(_object * __NPY_UNUSED_TAGGEDignored, _object * args, _object * kwds) Line 1969\tC\r\n \tpython27.dll!PyCFunction_Call(_object * func, _object * arg, _object * kw) Line 85\tC\r\n \tpython27.dll!call_function(_object * * * pp_stack, int oparg) Line 4350\tC\r\n \tpython27.dll!PyEval_EvalFrameEx(_frame * f, int throwflag) Line 2990\tC\r\n \tpython27.dll!PyEval_EvalCodeEx(PyCodeObject * co, _object * globals, _object * locals, _object * * args, int argcount, _object * * kws, int kwcount, _object * * defs, int defcount, _object * closure) Line 3582\tC\r\n \tpython27.dll!run_mod(_mod * mod, const char * filename, _object * globals, _object * locals, PyCompilerFlags * flags, _arena * arena) Line 1376\tC\r\n \tpython27.dll!PyRun_InteractiveOneFlags(_iobuf * fp, const char * filename, PyCompilerFlags * flags) Line 857\tC\r\n \tpython27.dll!PyRun_InteractiveLoopFlags(_iobuf * fp, const char * filename, PyCompilerFlags * flags) Line 777\tC\r\n \tpython27.dll!PyRun_AnyFileExFlags(_iobuf * fp, const char * filename, int closeit, PyCompilerFlags * flags) Line 746\tC\r\n \tpython27.dll!Py_Main(int argc, char * * argv) Line 643\tC\r\n \tpython.exe!__tmainCRTStartup() Line 586\tC\r\n \t[External Code]\t\r\n```\r\n\r\nnumpy compiled with Visual Studio 2015 for 32 bit Python 3.5 raises a `MemoryError`:\r\n```Python\r\n>>> import numpy\r\n>>> numpy.zeros((0, 2**31-1))\r\nTraceback (most recent call last):\r\n  File ""<stdin>"", line 1, in <module>\r\nMemoryError\r\n```\r\n\r\n64 bit binaries return an empty array as expected:\r\n```Python\r\n>>> import numpy\r\n>>> numpy.zeros((0, 2**31-1))\r\narray([], shape=(0L, 2147483647L), dtype=float64)\r\n```'"
7809,164250923,emmenlau,emmenlau,2016-07-07 07:59:19,2016-07-11 06:22:43,2016-07-11 06:06:05,closed,,,9,11 - Bug;component: numpy.distutils,https://api.github.com/repos/numpy/numpy/issues/7809,b'Error in numpy/numpy/distutils/misc_util.py ',"b'I\'m trying to install a package that compiles against numpy. It fails with error:\r\n```\r\nError in atexit._run_exitfuncs:\r\nTraceback (most recent call last):\r\n  File ""/usr/lib/python2.7/atexit.py"", line 24, in _run_exitfuncs\r\n    func(*targs, **kargs)\r\n  File ""/usr/lib/python2.7/dist-packages/numpy/distutils/misc_util.py"", line 27, in clean_up_temporary_directory\r\n    for d in _tmpdirs:\r\nTypeError: \'NoneType\' object is not iterable\r\nError in atexit._run_exitfuncs:\r\nTraceback (most recent call last):\r\n  File ""/usr/lib/python2.7/atexit.py"", line 24, in _run_exitfuncs\r\n    func(*targs, **kargs)\r\n  File ""/usr/lib/python2.7/dist-packages/numpy/distutils/misc_util.py"", line 27, in clean_up_temporary_directory\r\n    for d in _tmpdirs:\r\nTypeError: \'NoneType\' object is not iterable\r\nError in atexit._run_exitfuncs:\r\nTraceback (most recent call last):\r\n  File ""/usr/lib/python2.7/atexit.py"", line 24, in _run_exitfuncs\r\n    func(*targs, **kargs)\r\n  File ""/usr/lib/python2.7/dist-packages/numpy/distutils/misc_util.py"", line 27, in clean_up_temporary_directory\r\n    for d in _tmpdirs:\r\nTypeError: \'NoneType\' object is not iterable\r\nError in sys.exitfunc:\r\nTraceback (most recent call last):\r\n  File ""/usr/lib/python2.7/atexit.py"", line 24, in _run_exitfuncs\r\n    func(*targs, **kargs)\r\n  File ""/usr/lib/python2.7/dist-packages/numpy/distutils/misc_util.py"", line 27, in clean_up_temporary_directory\r\n    for d in _tmpdirs:\r\nTypeError: \'NoneType\' object is not iterable\r\n```\r\n\r\nI checked numpy/numpy/distutils/misc_util.py and it seems the problem could be that _tmpdirs is empty? At least the following change compiles for me:\r\n```\r\n_tmpdirs = []\r\ndef clean_up_temporary_directory():\r\n    if _tmpdirs is not None:\r\n        for d in _tmpdirs:\r\n            try:\r\n                shutil.rmtree(d)\r\n            except OSError:\r\n                pass    \r\n```'"
7793,163183381,charris,charris,2016-06-30 14:45:07,2016-06-30 16:15:01,2016-06-30 16:14:38,closed,,1.11.2 release,0,00 - Backport;11 - Bug;component: numpy.ma,https://api.github.com/repos/numpy/numpy/issues/7793,"b'Backport 7515, BUG: MaskedArray.count treats negative axes incorrectly'",b'Backport of #7515.\r\n\r\nFollow up to #5706. Fixes #7509'
7788,162987891,jzwinck,jzwinck,2016-06-29 17:56:26,2016-06-30 16:14:47,2016-06-30 15:43:55,closed,,,5,11 - Bug;component: numpy.ma,https://api.github.com/repos/numpy/numpy/issues/7788,b'BUG: construct ma.array from np.array which contains padding',"b'A unit test included, which fails before this patch,\r\nbecause dtype.descr has extra entries when padding is present.'"
7760,161039380,charris,charris,2016-06-18 19:19:47,2016-06-20 15:17:27,2016-06-20 15:17:27,closed,,1.12.0 release,7,09 - Enhancement;11 - Bug;component: numpy.testing,https://api.github.com/repos/numpy/numpy/issues/7760,b'ENH: Make assert_almost_equal & assert_array_almost_equal consistent.',b'This changes the check for scalars in assert_almost_equal so that\r\n    \r\n    abs(actual - desired) < 1.5 * 10**(-decimal)\r\n    \r\nNote that the previous documentation claimed that the functions were\r\nequivalent to\r\n    \r\n    abs(actual - desired) < .5 * 10**(-decimal)\r\n    \r\nbut that was not how they behaved as implemented.\r\n    \r\nSome very delicate tests may fail that did not fail before but no new failures were seen in\r\n`SciPy version 0.18.0.dev0+8346eea`.\r\n    \r\nCloses #5200.\r\n'
7759,161020600,jjdmol,charris,2016-06-18 11:53:49,2016-06-18 16:12:13,2016-06-18 14:50:11,closed,,,3,11 - Bug;component: Other,https://api.github.com/repos/numpy/numpy/issues/7759,b'BUG: Fix numpy.i support for numpy API < 1.7.',"b'numpy API < 1.7 does not support NPY_ARRAY_F_CONTIGUOUS.or PyArray_IS_F_CONTIGUOUS. Supporting old APIs is useful as users tend to ship modern numpy.i files to compile against possibly older numpy installations.\r\n\r\nI tested this fix by searching for the introduction of both constants (numpy 1.7), and compiling against numpy 1.3 and 1.10. This ought to be more than sufficient for this simple change. Note that the code for <=1.7 is equal to what used to be there (actually until 1.9).'"
7757,160999833,charris,charris,2016-06-18 01:17:01,2016-06-19 10:34:29,2016-06-18 13:21:55,closed,,1.12.0 release,1,11 - Bug;component: numpy.core,https://api.github.com/repos/numpy/numpy/issues/7757,"b'Update 7175, BUG: Invalid read of size 4 in PyArray_FromFile '","b""Update of #7175, closes #7756.\r\n\r\nWhen the input dtype has a subarray, the dtype is DECREFed by PyArray_NewFromDescr,\r\nbefore dtype->elsize is accessed.\r\n\r\nIf no one else holds a reference to the dtype object, then the dtype object will be destroyed,\r\nand dtype->elsize shall not be accessed.\r\nThis raises an error in Valgrind, and occasionally crashes innocently looking code.\r\ne.g. numpy.fromfile('filename', dtype=('f8', 3'))\r\n\r\nA workaround would be\r\ndtype=numpy.dtype(('f8', 3)); numpy.fromfile('filename', dtype=dtype)\r\n\r\nThis affects versions as early as 1.9.2 (where I found this bug) and seems to be still relevant today.\r\nI hope someone can prove me wrong.\r\nThis PR is just a demonstration of the idea. I didn't try to compile it.\r\n\r\nValgrind log:\r\n\r\n==17479== Invalid read of size 4\r\n==17479==    at 0x1CD0BB88: UnknownInlinedFun (stdio2.h:295)\r\n==17479==    by 0x1CD0BB88: array_fromfile_binary (ctors.c:3177)\r\n==17479==    by 0x1CD0BB88: PyArray_FromFile (ctors.c:3304)\r\n==17479==    by 0x1CD886B5: array_fromfile (multiarraymodule.c:2040)\r\n==17479==    by 0x37AB6E2571: do_call (ceval.c:4327)\r\n==17479==    by 0x37AB6E2571: call_function (ceval.c:4135)\r\n==17479==    by 0x37AB6E2571: PyEval_EvalFrameEx (ceval.c:2755)\r\n==17479==    by 0x37AB6E2665: fast_function (ceval.c:4198)\r\n==17479==    by 0x37AB6E2665: call_function (ceval.c:4133)\r\n==17479==    by 0x37AB6E2665: PyEval_EvalFrameEx (ceval.c:2755)\r\n==17479==    by 0x37AB6E2665: fast_function (ceval.c:4198)\r\n==17479==    by 0x37AB6E2665: call_function (ceval.c:4133)\r\n==17479==    by 0x37AB6E2665: PyEval_EvalFrameEx (ceval.c:2755)\r\n==17479==    by 0x37AB664DCB: gen_send_ex.isra.0 (genobject.c:85)\r\n==17479==    by 0x37AB6DE419: PyEval_EvalFrameEx (ceval.c:2586)\r\n==17479==    by 0x37AB664DCB: gen_send_ex.isra.0 (genobject.c:85)\r\n==17479==    by 0x37AB6DE419: PyEval_EvalFrameEx (ceval.c:2586)\r\n==17479==    by 0x37AB6E2665: fast_function (ceval.c:4198)\r\n==17479==    by 0x37AB6E2665: call_function (ceval.c:4133)\r\n==17479==    by 0x37AB6E2665: PyEval_EvalFrameEx (ceval.c:2755)\r\n==17479==    by 0x37AB6E36B3: PyEval_EvalCodeEx (ceval.c:3344)\r\n==17479==    by 0x37AB6E25C5: fast_function (ceval.c:4208)\r\n==17479==    by 0x37AB6E25C5: call_function (ceval.c:4133)\r\n==17479==    by 0x37AB6E25C5: PyEval_EvalFrameEx (ceval.c:2755)\r\n==17479==  Address 0x113bef20 is 32 bytes inside a block of size 88 free'd\r\n==17479==    at 0x4A07D6A: free (in /usr/lib64/valgrind/vgpreload_memcheck-amd64-linux.so)\r\n==17479==    by 0x1CD07C15: _update_descr_and_dimensions (ctors.c:273)\r\n==17479==    by 0x1CD07C15: PyArray_NewFromDescr_int (ctors.c:900)\r\n==17479==    by 0x1CD0BB76: PyArray_NewFromDescr (ctors.c:1121)\r\n==17479==    by 0x1CD0BB76: array_fromfile_binary (ctors.c:3168)\r\n==17479==    by 0x1CD0BB76: PyArray_FromFile (ctors.c:3304)\r\n==17479==    by 0x1CD886B5: array_fromfile (multiarraymodule.c:2040)\r\n==17479==    by 0x37AB6E2571: do_call (ceval.c:4327)\r\n==17479==    by 0x37AB6E2571: call_function (ceval.c:4135)\r\n==17479==    by 0x37AB6E2571: PyEval_EvalFrameEx (ceval.c:2755)\r\n==17479==    by 0x37AB6E2665: fast_function (ceval.c:4198)\r\n==17479==    by 0x37AB6E2665: call_function (ceval.c:4133)\r\n==17479==    by 0x37AB6E2665: PyEval_EvalFrameEx (ceval.c:2755)\r\n==17479==    by 0x37AB6E2665: fast_function (ceval.c:4198)\r\n==17479==    by 0x37AB6E2665: call_function (ceval.c:4133)\r\n==17479==    by 0x37AB6E2665: PyEval_EvalFrameEx (ceval.c:2755)\r\n==17479==    by 0x37AB664DCB: gen_send_ex.isra.0 (genobject.c:85)\r\n==17479==    by 0x37AB6DE419: PyEval_EvalFrameEx (ceval.c:2586)\r\n==17479==    by 0x37AB664DCB: gen_send_ex.isra.0 (genobject.c:85)\r\n==17479==    by 0x37AB6DE419: PyEval_EvalFrameEx (ceval.c:2586)\r\n==17479==    by 0x37AB6E2665: fast_function (ceval.c:4198)\r\n==17479==    by 0x37AB6E2665: call_function (ceval.c:4133)\r\n==17479==    by 0x37AB6E2665: PyEval_EvalFrameEx (ceval.c:2755)\r\n\r\n"""
7756,160999494,charris,charris,2016-06-18 01:08:46,2016-06-18 13:21:55,2016-06-18 13:21:55,closed,,,0,11 - Bug;component: numpy.core,https://api.github.com/repos/numpy/numpy/issues/7756,b'BUG: Invalid read of size 4 in PyArray_FromFile ',"b""@rainwoodman reports.\r\n\r\nWhen the input dtype has a subarray, the dtype is DECREFed by PyArray_NewFromDescr,\r\nbefore dtype->elsize is accessed.\r\n\r\nIf no one else holds a reference to the dtype object, then the dtype object will be destroyed,\r\nand dtype->elsize shall not be accessed.\r\nThis raises an error in Valgrind, and occasionally crashes innocently looking code.\r\ne.g. numpy.fromfile('filename', dtype=('f8', 3'))\r\n\r\nA workaround would be\r\ndtype=numpy.dtype(('f8', 3)); numpy.fromfile('filename', dtype=dtype)\r\n\r\nThis affects versions as early as 1.9.2 (where I found this bug) and seems to be still relevant today.\r\nI hope someone can prove me wrong.\r\nThis PR is just a demonstration of the idea. I didn't try to compile it.\r\n\r\nValgrind log:\r\n\r\n==17479== Invalid read of size 4\r\n==17479==    at 0x1CD0BB88: UnknownInlinedFun (stdio2.h:295)\r\n==17479==    by 0x1CD0BB88: array_fromfile_binary (ctors.c:3177)\r\n==17479==    by 0x1CD0BB88: PyArray_FromFile (ctors.c:3304)\r\n==17479==    by 0x1CD886B5: array_fromfile (multiarraymodule.c:2040)\r\n==17479==    by 0x37AB6E2571: do_call (ceval.c:4327)\r\n==17479==    by 0x37AB6E2571: call_function (ceval.c:4135)\r\n==17479==    by 0x37AB6E2571: PyEval_EvalFrameEx (ceval.c:2755)\r\n==17479==    by 0x37AB6E2665: fast_function (ceval.c:4198)\r\n==17479==    by 0x37AB6E2665: call_function (ceval.c:4133)\r\n==17479==    by 0x37AB6E2665: PyEval_EvalFrameEx (ceval.c:2755)\r\n==17479==    by 0x37AB6E2665: fast_function (ceval.c:4198)\r\n==17479==    by 0x37AB6E2665: call_function (ceval.c:4133)\r\n==17479==    by 0x37AB6E2665: PyEval_EvalFrameEx (ceval.c:2755)\r\n==17479==    by 0x37AB664DCB: gen_send_ex.isra.0 (genobject.c:85)\r\n==17479==    by 0x37AB6DE419: PyEval_EvalFrameEx (ceval.c:2586)\r\n==17479==    by 0x37AB664DCB: gen_send_ex.isra.0 (genobject.c:85)\r\n==17479==    by 0x37AB6DE419: PyEval_EvalFrameEx (ceval.c:2586)\r\n==17479==    by 0x37AB6E2665: fast_function (ceval.c:4198)\r\n==17479==    by 0x37AB6E2665: call_function (ceval.c:4133)\r\n==17479==    by 0x37AB6E2665: PyEval_EvalFrameEx (ceval.c:2755)\r\n==17479==    by 0x37AB6E36B3: PyEval_EvalCodeEx (ceval.c:3344)\r\n==17479==    by 0x37AB6E25C5: fast_function (ceval.c:4208)\r\n==17479==    by 0x37AB6E25C5: call_function (ceval.c:4133)\r\n==17479==    by 0x37AB6E25C5: PyEval_EvalFrameEx (ceval.c:2755)\r\n==17479==  Address 0x113bef20 is 32 bytes inside a block of size 88 free'd\r\n==17479==    at 0x4A07D6A: free (in /usr/lib64/valgrind/vgpreload_memcheck-amd64-linux.so)\r\n==17479==    by 0x1CD07C15: _update_descr_and_dimensions (ctors.c:273)\r\n==17479==    by 0x1CD07C15: PyArray_NewFromDescr_int (ctors.c:900)\r\n==17479==    by 0x1CD0BB76: PyArray_NewFromDescr (ctors.c:1121)\r\n==17479==    by 0x1CD0BB76: array_fromfile_binary (ctors.c:3168)\r\n==17479==    by 0x1CD0BB76: PyArray_FromFile (ctors.c:3304)\r\n==17479==    by 0x1CD886B5: array_fromfile (multiarraymodule.c:2040)\r\n==17479==    by 0x37AB6E2571: do_call (ceval.c:4327)\r\n==17479==    by 0x37AB6E2571: call_function (ceval.c:4135)\r\n==17479==    by 0x37AB6E2571: PyEval_EvalFrameEx (ceval.c:2755)\r\n==17479==    by 0x37AB6E2665: fast_function (ceval.c:4198)\r\n==17479==    by 0x37AB6E2665: call_function (ceval.c:4133)\r\n==17479==    by 0x37AB6E2665: PyEval_EvalFrameEx (ceval.c:2755)\r\n==17479==    by 0x37AB6E2665: fast_function (ceval.c:4198)\r\n==17479==    by 0x37AB6E2665: call_function (ceval.c:4133)\r\n==17479==    by 0x37AB6E2665: PyEval_EvalFrameEx (ceval.c:2755)\r\n==17479==    by 0x37AB664DCB: gen_send_ex.isra.0 (genobject.c:85)\r\n==17479==    by 0x37AB6DE419: PyEval_EvalFrameEx (ceval.c:2586)\r\n==17479==    by 0x37AB664DCB: gen_send_ex.isra.0 (genobject.c:85)\r\n==17479==    by 0x37AB6DE419: PyEval_EvalFrameEx (ceval.c:2586)\r\n==17479==    by 0x37AB6E2665: fast_function (ceval.c:4198)\r\n==17479==    by 0x37AB6E2665: call_function (ceval.c:4133)\r\n==17479==    by 0x37AB6E2665: PyEval_EvalFrameEx (ceval.c:2755)\r\n\r\n"""
7747,160487355,charris,charris,2016-06-15 18:09:13,2016-06-15 19:03:33,2016-06-15 19:03:33,closed,,1.12.0 release,0,11 - Bug;component: numpy.lib,https://api.github.com/repos/numpy/numpy/issues/7747,"b""Update 7672, BUG: Make sure we don't divide by zero ""","b'Update #7672. Add test and simplify the check in polyfit.\r\n\r\nThis should fix the issue discussed at\r\nhttps://mail.scipy.org/pipermail/numpy-discussion/2013-July/067076.html\r\n    \r\nWithout the ValueError added here, polyfit can (and does) return\r\nnegative or nan variances with no warning.\r\n'"
7737,159845667,charris,charris,2016-06-12 20:21:27,2016-06-12 21:58:53,2016-06-12 21:58:53,closed,,1.11.1 release,0,00 - Backport;11 - Bug;component: build;component: numpy.distutils,https://api.github.com/repos/numpy/numpy/issues/7737,"b'Backport 7735, BUG: fix issue on OS X with Python 3.x, npymath.ini not installed.'",b'Backport of #7735.\r\n\r\nCloses gh-7707.  Happened for `pip install .` or another location (including a\r\nremote git repo).'
7736,159845024,charris,charris,2016-06-12 20:07:22,2016-06-13 01:29:15,2016-06-13 01:29:14,closed,,1.11.1 release,2,00 - Backport;11 - Bug;component: numpy.ma,https://api.github.com/repos/numpy/numpy/issues/7736,"b'Backport 4619, BUG: many functions silently drop `keepdims` kwarg'","b'change test from `type(a) is not mu.ndarray` to\r\n`not isinstance(a, mu.ndarray)`\r\n\r\nBecause every sub-class of ndarray is not guaranteed to implement\r\n`keepdims` as a kwarg, when wrapping these methods care must be taken.\r\n\r\nThe previous behavior was to silently eat the kwarg when dealing with\r\na sub-class of ndarray.\r\n\r\nNow, if `keepdims=np._NoValue` (the new default) it is not passed\r\nthrough to the underlying function call (so the default value of\r\n`keepdims` is now controlled by the sub-class).  If `keepdims` is not\r\n`np._NoValue` then it is passed through and will raise an exception if\r\nthe sub-class does not support the kwarg.\r\n\r\nA special case in nanvar was required to deal with `matrix` that previously\r\nrelied on `fromnumeric` silently dropping `keepdims`.'"
7735,159843832,rgommers,charris,2016-06-12 19:37:57,2016-06-12 20:25:34,2016-06-12 20:17:06,closed,,,2,11 - Bug;component: build;component: numpy.distutils,https://api.github.com/repos/numpy/numpy/issues/7735,b'BUG: fix issue on OS X with Python 3.x where npymath.ini was not installed',b'Closes gh-7707.  Happened for ``pip install .`` or another location (including a remote git repo).'
7724,159644402,charris,charris,2016-06-10 14:14:20,2016-06-24 12:08:03,2016-06-10 17:09:05,closed,,1.11.1 release,2,00 - Backport;11 - Bug;component: numpy.random,https://api.github.com/repos/numpy/numpy/issues/7724,"b'Backport 7719, BUG: Fix segfaults in np.random.shuffle'","b""np.random.shuffle will allocate a buffer based on the size of the first\r\nelement of an array of strings. If the first element is smaller than\r\nanother in the array this buffer will overflow, causing a segfault\r\nwhen garbage is collected.\r\n\r\nAdditionally if the array contains objects then one would be left\r\nin the buffer and have it's refcount erroniously decrimented on\r\nfunction exit, causing that object to be deallocated too early.\r\n\r\nTo fix this we change the buffer to be an array of int8 of the\r\nthe size of the array's dtype, which sidesteps both issues.\r\n\r\nFixes #7710"""
7719,159393525,simongibbons,charris,2016-06-09 12:17:21,2016-06-10 14:49:37,2016-06-10 14:07:10,closed,,,9,11 - Bug;component: numpy.random,https://api.github.com/repos/numpy/numpy/issues/7719,b'BUG: Fix segfault in np.random.shuffle for arrays of different length strings',"b'np.random.shuffle will allocate a buffer based on the size of the first\r\nelement of an array of strings. If the first element is smaller than\r\nanother in the array this buffer will overflow, causing a segfault\r\nwhen garbage is collected.\r\n\r\nThis fixes the issue by ensuring the buffer is allocated based upon\r\nthe dtype of the array rather than just that of the first element.\r\n\r\nFixes #7710'"
7714,158964892,aboettcher,charris,2016-06-07 16:16:38,2016-06-08 00:13:54,2016-06-08 00:13:54,closed,,1.12.0 release,20,11 - Bug,https://api.github.com/repos/numpy/numpy/issues/7714,b'Memory Leak',"b""The following code has a memory leak with the current numpy version:\r\n```python\r\nimport numpy as np\r\nimport scipy\r\nimport scipy.stats\r\nu = np.random.random(128**2)\r\nfor i in range(100000):\r\n    scipy.stats.norm.ppf(u)\r\n```\r\nChecking with `htop` the memory increases as the loops are performed. With older versions of numpy the above code runs with very little memory usage and especially no increase over time.\r\n\r\nI tested if the error is due to a bug in scipy but it isn't. Then I checked with which numpy version the error got introduced (since I realized it after an update of all my packages).\r\n\r\nAccording to git bisect the commit that introduced the error is:\r\n9128ed5198cc8544406467a00824e5fe6791f090\r\n\r\nOS: Ubuntu 14.04.3 LTS\r\nPython: sys.version_info(major=3, minor=4, micro=3, releaselevel='final', serial=0)\r\nnumpy: 1.12.0.dev0+cc51ba8\r\nscipy: 0.18.0.dev0+41e2d00\r\n"""
7712,158861393,krischer,charris,2016-06-07 07:56:34,2016-06-09 15:07:10,2016-06-09 15:06:19,closed,,1.12.0 release,11,11 - Bug;component: numpy.fft,https://api.github.com/repos/numpy/numpy/issues/7712,b'BUG: Fix race condition with new FFT cache',"b'This is a follow up to #7686 and fixes a race condition introduced with that PR.\r\n\r\nSetting and getting items is now protected by a lock ensuring thread safety. The size of a cache entry is now also calculated by summing over all arrays in the list.\r\n\r\nA comment: The cache behaves like a dictionary whose values are lists. Each list contains the twiddle factors for an FFT of a certain length, potentially multiple times. Duplicating the twiddle factors is necessary in a threaded case as they can only be used by a single thread concurrently. Multiple parallel threads calculating FFTs of equal lengths (an IMHO quite realistic use case) would otherwise either have to wait for the other threads to finish or constantly recalculate the twiddle factors, both greatly impacting performance. The cache always behaved like this even when it was just a simple dictionary.'"
7710,158745798,asanakoy,charris,2016-06-06 18:42:07,2016-06-10 14:07:10,2016-06-10 14:07:10,closed,,1.11.1 release,10,11 - Bug;component: numpy.random,https://api.github.com/repos/numpy/numpy/issues/7710,b' numpy 1.11. Segfault: numpy.random.permutation on list of long strings',"b""I'm getting Segmentation fault when running numpy.random.permutation on list of long strings. With small strings works well.\r\n\r\n```\r\nimport numpy as np\r\na = ['a', 'a' * 100]\r\nz = np.random.permutation(np.array(a))\r\n```\r\n\r\nNumPy version: 1.11.0\r\nPython 2.7\r\nOS: Ubuntu 14.04.4 LTS\r\n\r\nGDB trace:\r\n\r\n> (gdb) run\r\n> Starting program: /usr/bin/python test.py\r\n> \r\n> Program received signal SIGSEGV, Segmentation fault.\r\n> visit_decref.48915 (op=<unknown at remote 0x6161616161616161>, data=0x0) at ../Modules/gcmodule.c:360\r\n> 360\t../Modules/gcmodule.c: No such file or directory.\r\n> (gdb) bt\r\n> #0  visit_decref.48915 (op=<unknown at remote 0x6161616161616161>, data=0x0) at ../Modules/gcmodule.c:360\r\n> #1  0x000000000057392b in dict_traverse.18526 (\r\n>     op={<unknown at remote 0x6161616161616161>: <unknown at remote 0x6161616161616161>, <unknown at remote 0x6161616161616161>: <unknown at remote 0x6161616161616161>, <unknown at remote 0x6161616161616161>: <unknown at remote 0x61616161>, '__builtins__': {'bytearray': <type at remote 0x910680>, 'IndexError': <type at remote 0x913740>, 'all': <built-in function all>, 'help': <_Helper at remote 0x7ffff7e86210>, 'vars': <built-in function vars>, 'SyntaxError': <type at remote 0x915820>, 'unicode': <type at remote 0x9199c0>, 'UnicodeDecodeError': <type at remote 0x914760>, 'memoryview': <type at remote 0x907e00>, 'isinstance': <built-in function isinstance>, 'copyright': <_Printer(_Printer__data='Copyright (c) 2001-2014 Python Software Foundation.\\nAll Rights Reserved.\\n\\nCopyright (c) 2000 BeOpen.com.\\nAll Rights Reserved.\\n\\nCopyright (c) 1995-2001 Corporation for National Research Initiatives.\\nAll Rights Reserved.\\n\\nCopyright (c) 1991-1995 Stichting Mathematisch Centrum, Amsterdam.\\nAll Rights Reserved.', _Printer...(truncated), visit=0x54eee0 <visit_decref.48915>, \r\n>     arg=0x0) at ../Objects/dictobject.c:2113\r\n> #2  0x0000000000536476 in subtract_refs (containers=0x9186e0 <generations+96>) at ../Modules/gcmodule.c:385\r\n> #3  collect.49008 (generation=<optimised out>) at ../Modules/gcmodule.c:925\r\n> #4  0x000000000042749e in PyGC_Collect () at ../Modules/gcmodule.c:1440\r\n> #5  0x0000000000437d47 in Py_Finalize () at ../Python/pythonrun.c:449\r\n> #6  0x000000000044f993 in Py_Main (argc=<optimised out>, argv=0x7fffffffdc18) at ../Modules/main.c:665\r\n> #7  0x00007ffff7818f45 in __libc_start_main (main=0x44f9c2 <main>, argc=2, argv=0x7fffffffdc18, init=<optimised out>, \r\n>     fini=<optimised out>, rtld_fini=<optimised out>, stack_end=0x7fffffffdc08) at libc-start.c:287\r\n> #8  0x0000000000578c4e in _start ()\r\n\r\nReproducibility: ~ 50%\r\n"""
7688,157274726,rgommers,charris,2016-05-27 19:23:28,2016-06-03 17:08:03,2016-06-03 17:07:56,closed,,,2,11 - Bug;component: Documentation,https://api.github.com/repos/numpy/numpy/issues/7688,b'DOC: fix broken genfromtxt examples in user guide.  Closes gh-7662.',b'[ci skip]'
7680,156995961,charris,charris,2016-05-26 14:24:02,2016-05-26 16:01:02,2016-05-26 16:01:02,closed,,1.11.1 release,0,00 - Backport;11 - Bug;component: numpy.core,https://api.github.com/repos/numpy/numpy/issues/7680,"b'Backport 7678, BUG: Fix np.clip bug NaN handling for Visual Studio 2015'",
7678,156965336,lesteve,juliantaylor,2016-05-26 11:45:50,2016-05-26 14:23:11,2016-05-26 12:43:36,closed,,,11,11 - Bug;component: numpy.core,https://api.github.com/repos/numpy/numpy/issues/7678,b'BUG: Fix np.clip bug NaN handling for Visual Studio 2015',b'Fix #7601.\r\n\r\nThe work-around is to disable the loop vectorization for Visual studio 2015. Let me know if there is a better way to achieve the same results.\r\n\r\nI added a test that highlights the issue (only python 3.5).\r\n\r\nIn a separate branch I made sure that the test was failing without the loop vectorization disabled: [AppVeyor build](https://ci.appveyor.com/project/lesteve/numpy/build/1.0.8).\r\n\r\nand that disabling the loop vectorization fixed the problem: [AppVeyor build](https://ci.appveyor.com/project/lesteve/numpy/build/1.0.7).\r\n\r\n\r\n'
7676,156782817,charris,charris,2016-05-25 15:40:48,2016-05-25 16:49:01,2016-05-25 16:49:01,closed,,1.11.1 release,0,00 - Backport;11 - Bug;component: numpy.lib,https://api.github.com/repos/numpy/numpy/issues/7676,"b'Backport 7675, BUG: fix handling of right edge of final bin.'",b'Backport #7675.'
7675,156747189,rkern,charris,2016-05-25 13:12:44,2016-05-25 15:42:20,2016-05-25 15:37:39,closed,,,1,11 - Bug;component: numpy.lib,https://api.github.com/repos/numpy/numpy/issues/7675,b'BUG: fix handling of right edge of final bin.',"b""Fixes #7674 \r\n\r\nUgh. I was relying on the existing tests to cover the typical edge cases, but I guess it's not."""
7672,156632975,daschaich,charris,2016-05-24 23:37:31,2016-06-15 18:12:10,2016-06-15 18:12:10,closed,,,4,11 - Bug;component: numpy.lib,https://api.github.com/repos/numpy/numpy/issues/7672,"b""BUG: Make sure we don't divide by zero""","b'This should fix the issue I discussed in\r\nhttps://mail.scipy.org/pipermail/numpy-discussion/2013-July/067076.html\r\n\r\nWithout the ValueError added here, polyfit can (and does) return negative or nan variances with no warning.'"
7671,156574987,charris,charris,2016-05-24 18:17:33,2016-05-24 21:19:19,2016-05-24 21:19:18,closed,,1.11.1 release,0,00 - Backport;11 - Bug;component: numpy.core,https://api.github.com/repos/numpy/numpy/issues/7671,"b'Backport 7669, BUG: boolean assignment no GIL release when transfer needs API'","b'#7669 \r\n\r\nThis caused bugs when the iteration does not need the API, but\r\nthe data copy does.\r\n\r\ncloses gh-7666'"
7670,156553780,charris,charris,2016-05-24 16:35:56,2016-05-24 20:26:56,2016-05-24 20:26:56,closed,,1.11.1 release,0,00 - Backport;11 - Bug;component: numpy.lib,https://api.github.com/repos/numpy/numpy/issues/7670,"b'Backport 7667, BUG: correct initial index estimate in histogram.'",b'Backport #7667.\r\n\r\nCloses #7628.'
7669,156552654,seberg,charris,2016-05-24 16:30:29,2016-05-24 18:17:45,2016-05-24 18:12:01,closed,,,1,11 - Bug;component: numpy.core,https://api.github.com/repos/numpy/numpy/issues/7669,b'BUG: boolean assignment no GIL release when transfer needs API',"b'This caused bugs when the iteration does not need the API, but\r\nthe data copy does.\r\n\r\ncloses gh-7666'"
7667,156471262,rkern,charris,2016-05-24 10:18:27,2016-05-24 16:35:27,2016-05-24 16:29:19,closed,,,1,11 - Bug;component: numpy.lib,https://api.github.com/repos/numpy/numpy/issues/7667,b'Restore histogram consistency',"b'@charris This should do it. Not sure about the performance.\r\n\r\nThe method here is to use the computed index as the initial guess, check the data against the bin that it points to, and adjust up or down by 1 as needed.\r\n\r\nFuzz test: https://gist.github.com/rkern/840b67903e0d033ede1ad47f54aa4200\r\n\r\nFixes #7628'"
7665,156332852,charris,charris,2016-05-23 18:15:09,2016-05-23 22:54:51,2016-05-23 22:54:51,closed,,1.11.1 release,0,00 - Backport;11 - Bug;component: numpy.ma,https://api.github.com/repos/numpy/numpy/issues/7665,"b'Backport 7658, BUG: fix incorrect printing of 1D masked arrays'","b""Backport #7658 \r\n\r\nRef #7621. #6748 added `np.ma.MaskedArray._print_width` which is used to cut\r\na masked array before printing it (to save memory and cpu time during the\r\nconversion to the object dtype). But this doesn't work correctly for 1D arrays,\r\nfor which up to 1000 values can be printed before cutting the array.\r\n\r\nSo this commit adds a new class variable `_print_width_1d` to handle the 1D case\r\nseparately."""
7664,156326403,seberg,ahaldane,2016-05-23 17:50:27,2016-06-02 07:43:46,2016-06-01 21:34:59,closed,,,8,11 - Bug;component: numpy.core,https://api.github.com/repos/numpy/numpy/issues/7664,b'BUG: Fix unicode with byte swap transfer and copyswap',"b'These fixes should make unicode byteswapping not be\r\ncompletely broken. The code is not so much designed for absolute\r\nspeed.\r\n\r\n--\r\n\r\nTests still needed any comments appreciated. I tried to keep things simple, so used the copyswap function wrappers....'"
7662,156192572,victoriastuart,charris,2016-05-23 03:12:24,2016-06-03 17:08:11,2016-06-03 17:08:11,closed,,,4,11 - Bug;component: numpy.lib,https://api.github.com/repos/numpy/numpy/issues/7662,"b'""Importing data with genfromtxt"" doc page'","b""Re:\r\n\r\nhttps://docs.scipy.org/doc/numpy-dev/user/basics.io.genfromtxt.html\r\n\r\n... great job/effort; your examples are also fabulous: clever, illustrative, powerful!  :-)\r\n\r\nThere is a Python 2 vs. 3 issue: see my 'answer'/comments, here:\r\n\r\nhttps://stackoverflow.com/questions/11914472/stringio-in-python3/37380717#37380717\r\n\r\nAlso, in your last example, I believe you should have\r\n\r\nnp.genfromtxt(StringIO(data), **kwargs)\r\n\r\nnot\r\n\r\nnp.genfromtxt(StringIO.StringIO(data), **kwargs)\r\n\r\nAlso, it would be really great to have those doc pages as a Jupyter notebook(s), or at least have the code given in raw form, minus the prompts (>>> ).  ;-)\r\n\r\nThose comments often wrap into the code, which is necessarily distracting; you could also break those into two or more lines (to the right), as needed: e.g.\r\n\r\n<pre>\r\nsome code      # This is just\r\n               # a small comment.\r\n</pre>\r\n\r\nvs.\r\n\r\n<pre>\r\nsome code      # This is just\r\na small comment.\r\nmore code\r\n...\r\n</pre>\r\nor adjust your page formatting (CSS? page / code block width and/or font size?).\r\n\r\nMinor points; again, fabulous work; much appreciated!  :-D"""
7660,156176639,ahaldane,charris,2016-05-22 22:20:21,2016-05-23 17:14:45,2016-05-23 17:13:53,closed,,1.11.1 release,1,00 - Backport;11 - Bug;component: numpy.ma,https://api.github.com/repos/numpy/numpy/issues/7660,"b'Backport 7659, BUG: Temporary fix for str(mvoid) for object field types'","b""Fixes #7493, using a temporary hack, to be properly fixed later\r\n(eg with #6053)\r\n\r\nPrinting a Masked-Void instance broke if the instance has a field of\r\nObject dtype because assignment involving structured dtypes with objects\r\ndoesn't work. Fix is to use dtype-transfer code which avoid the bug."""
7659,156176212,ahaldane,charris,2016-05-22 22:10:25,2016-05-23 17:13:00,2016-05-23 17:12:34,closed,,,1,11 - Bug;component: numpy.ma,https://api.github.com/repos/numpy/numpy/issues/7659,b'BUG: Temporary fix for str(mvoid) for object field types',"b""Fixes #7493, using a temporary hack, to be properly fixed later\r\n(eg with #6053)\r\n\r\nPrinting a Masked-Void instance broke if the instance has a field of\r\nObject dtype because assignment involving structured dtypes with objects\r\ndoesn't work. Fix is to use dtype-transfer code which avoids the bug."""
7658,156175894,saimn,charris,2016-05-22 22:03:12,2016-05-23 18:15:32,2016-05-23 18:12:06,closed,,,0,11 - Bug;component: numpy.ma,https://api.github.com/repos/numpy/numpy/issues/7658,b'BUG: fix incorrect printing of 1D masked arrays',"b""Fix for #7621. cc @charris @abalkin\r\n\r\n#6748 added `np.ma.MaskedArray._print_width` which is used to cut a masked array before printing it (to save memory and cpu time during the conversion to the object dtype). But this doesn't work correctly for 1D arrays, for which up to 1000 values can be printed before cutting the array.\r\n\r\nSo this commit adds a new class variable `_print_width_1d` to handle the 1D case separately."""
7648,155643621,jakevdp,charris,2016-05-19 02:48:18,2016-05-19 20:24:57,2016-05-19 20:24:57,closed,,,5,11 - Bug;component: numpy.core,https://api.github.com/repos/numpy/numpy/issues/7648,b'Behavior of negative exponentiation inconsistent between integer types',b'```python\r\n>>> np.int64(2) ** -2\r\n0.25\r\n>>> np.int32(2) ** -2\r\n0\r\n```\r\n\r\nTested on OSX 10.8.5 w/ numpy 1.10 on both Python 2.7 and 3.5.'
7638,154881659,charris,charris,2016-05-14 23:51:06,2016-05-15 19:48:46,2016-05-15 19:48:46,closed,,1.11.1 release,0,00 - Backport;11 - Bug;component: build,https://api.github.com/repos/numpy/numpy/issues/7638,"b'Backport 7634, BLD: correct C compiler customization in system_info.py'",
7629,154497053,tadeu,charris,2016-05-12 14:29:59,2016-05-14 16:51:32,2016-05-14 16:51:28,closed,,,7,11 - Bug;component: numpy.lib,https://api.github.com/repos/numpy/numpy/issues/7629,"b'`numpy.histogram` is returning an array of `int64`, which is breaking compatibility with bindings/C wrapper code'","b""Due to this change:\r\n\r\nhttps://github.com/numpy/numpy/commit/34b582aadae8272e7b7209f7a05594e9258ba217#diff-9d44603693b9544b900e135a203b3ae2R180\r\n\r\n```python\r\n    # Histogram is an integer or a float array depending on the weights.\r\n    if weights is None:\r\n        ntype = np.dtype(np.intp)  # <---\r\n    else:\r\n        ntype = weights.dtype\r\n```\r\n\r\n`numpy.histogram` is choosing `intp` as the return type for the histogram values. This is breaking compatibility with wrapper code that expects simple `int`s (`int32` are fine, as are python `long`, but usually C wrapper code can't handle `numpy.int64`). What is worse is that the behaviour is platform-dependent (i.e., it keeps working on 32-bit platforms).\r\n\r\nCould it be changed to simply use `int` as `dtype` (i.e., would use `numpy.int32`)?\r\n"""
7628,154496445,rkern,charris,2016-05-12 14:27:32,2016-05-24 16:29:19,2016-05-24 16:29:18,closed,,1.11.1 release,14,11 - Bug;component: numpy.lib,https://api.github.com/repos/numpy/numpy/issues/7628,b'np.histogram() inconsistent results',"b""I think that #6100 may have introduced a bug in some edge cases. Here is a case found through fuzz testing:\r\n\r\n```\r\n|35> import numpy as np\r\n|36> np.__version__\r\n'1.10.4'\r\n|37> arr = np.array([337, 404, 739, 806, 1007, 1811, 2012])\r\n|39> hist, edges = np.histogram(arr, bins=8296, range=(2, 2280))\r\n|40> mask = hist > 0\r\n|41> left_edges = edges[:-1][mask]\r\n|42> right_edges = edges[1:][mask]\r\n|43> zip(arr, left_edges, right_edges)\r\n[(337, 337.00000000000006, 337.27459016393448),\r\n (404, 404.00000000000006, 404.27459016393448),\r\n (739, 739.00000000000011, 739.27459016393448),\r\n (806, 806.00000000000011, 806.27459016393448),\r\n (1007, 1007.0000000000001, 1007.2745901639345),\r\n (1811, 1811.0000000000002, 1811.2745901639346),\r\n (2012, 2012.0000000000002, 2012.2745901639346)]\r\n```\r\n\r\nThis was found through fuzz testing an internal accelerated histogram routine (which takes roughly the same strategy as #6100 but implemented in Cython) and comparing the results to `np.histogram()`. Comparing with numpy 1.9.2, everything worked identically. At least as of numpy 1.10.4, some of these edge cases popped up.\r\n\r\nI believe the main difference between #6100 and our routine is that we do not precompute the histogram scaling factor `bins / (mx - mn)`: https://github.com/numpy/numpy/blob/master/numpy/lib/function_base.py#L638\r\nWe compute `((tmp_a - mn) * bins) / (mx - mn)` . The comments of our routine mention floating point problems as the reason for deliberately avoiding precomputation."""
7618,154156809,ahaldane,charris,2016-05-11 04:17:21,2016-05-11 15:38:02,2016-05-11 15:37:17,closed,,,1,11 - Bug;component: numpy.lib,https://api.github.com/repos/numpy/numpy/issues/7618,"b'BUG: distance arg of np.gradient must be scalar, fix docstring'","b'Fixups to docstring, and disallow non-scalars as the distance args to\r\nnp.gradient.\r\n\r\nFixes #7548, fixes #6847'"
7609,153661669,eric-wieser,charris,2016-05-08 15:29:09,2016-05-09 18:34:58,2016-05-09 18:34:48,closed,,,2,11 - Bug;component: numpy.lib,https://api.github.com/repos/numpy/numpy/issues/7609,b'BUG: Fix TypeError when raising TypeError',"b'Fixes ""TypeError: pop expected at least 1 arguments, got 0""'"
7606,153390348,lovebug356,charris,2016-05-06 06:57:07,2016-05-14 23:44:58,2016-05-14 23:44:58,closed,,,1,11 - Bug;component: numpy.distutils,https://api.github.com/repos/numpy/numpy/issues/7606,b'Environment variable CC not used to detect system_info',"b'I want to use the environment variable CC to build numpy with a custom compiler. However, when the installer is checking the system info, the wrong compiler is used. This can lead to failures if the dependencies are build with a different compiler. An example is given with a random compiler name to demonstrate that the build script is not always using the correct compiler.\r\n\r\n```\r\nCC=blablabla python3 setup.py build\r\n...\r\nopenblas_lapack_info:\r\nC compiler: cc\r\n\r\ncreating /tmp/tmpgc4y8yhi/tmp\r\ncreating /tmp/tmpgc4y8yhi/tmp/tmpgc4y8yhi\r\ncompile options: \'-c\'\r\ncc: /tmp/tmpgc4y8yhi/source.c\r\ncc /tmp/tmpgc4y8yhi/tmp/tmpgc4y8yhi/source.o -lopenblas -o /tmp/tmpgc4y8yhi/a.out\r\n...\r\ncreating build/src.linux-x86_64-3.4/numpy/distutils\r\nbuilding library ""npymath"" sources\r\ncustomize Gnu95FCompiler\r\nFound executable /usr/bin/gfortran\r\ncustomize Gnu95FCompiler\r\ncustomize Gnu95FCompiler using config\r\nC compiler: blablabla -DNDEBUG -g -fwrapv -O2 -Wall -Wstrict-prototypes -g -fstack-protector-strong -Wformat -Werror=format-security -D_FORTIFY_SOURCE=2 -fPIC\r\n\r\ncompile options: \'-Inumpy/core/src/private -Inumpy/core/src -Inumpy/core -Inumpy/core/src/npymath -Inumpy/core/src/multiarray -Inumpy/core/src/umath -Inumpy/core/src/npysort -I/usr/include/python3.4m -c\'\r\nblablabla: _configtest.c\r\nsh: 1: blablabla: not found\r\n...\r\n```'"
7598,152651824,drasmuss,charris,2016-05-02 21:39:30,2016-05-09 18:37:19,2016-05-09 18:37:01,closed,,,9,11 - Bug;component: numpy.lib,https://api.github.com/repos/numpy/numpy/issues/7598,b'Cast array size to int64 when loading from archive',"b'When loading an array from a `npz` archive, the size of the array is computed via [`numpy.multiply.reduce(shape)`](https://github.com/numpy/numpy/blob/master/numpy/lib/format.py#L626).  This defaults to `int32` on some systems, including 64bit systems where it is possible to create arrays large enough to cause that value to overflow.  Here is a minimal example illustrating the problem:\r\n\r\n```\r\nimport platform\r\nimport sys\r\n\r\nimport numpy as np\r\n\r\nprint(platform.architecture())\r\nprint(sys.version)\r\nprint(""np version:"", np.__version__)\r\nprint(""default int type:"", np.int_)\r\n\r\na = np.empty((2**30, 2), dtype=np.uint8)\r\nwith open(""tmp.npz"", ""wb"") as f:\r\n    np.savez(f, a)\r\n\r\nprint(a.shape)\r\nprint(np.multiply.reduce(a.shape))\r\n\r\nwith open(""tmp.npz"", ""rb"") as f:\r\n    data = np.load(f)\r\n    new_a = data[""arr_0""]\r\n```\r\n\r\noutput on my system:\r\n```\r\n(\'64bit\', \'WindowsPE\')\r\n3.4.4 |Continuum Analytics, Inc.| (default, Feb 16 2016, 09:54:04) [MSC v.1600 64 bit (AMD64)]\r\nnp version: 1.11.0\r\ndefault int type: <class \'numpy.int32\'>\r\n(1073741824, 2)\r\n-2147483648\r\nTraceback (most recent call last):\r\n  File ""<...>/tmp.py"", line 20, in <module>\r\n    new_a = data[""arr_0""]\r\n  File ""<...>\\lib\\site-packages\\numpy\\lib\\npyio.py"", line 224, in __getitem__\r\n    pickle_kwargs=self.pickle_kwargs)\r\n  File ""<...>\\lib\\site-packages\\numpy\\lib\\format.py"", line 660, in read_array\r\n    array = numpy.empty(count, dtype=dtype)\r\nValueError: negative dimensions are not allowed\r\n```\r\n\r\nI think the solution is just to change it to `numpy.multiply.reduce(shape, dtype=numpy.int64)`\r\n'"
7597,152579516,charris,charris,2016-05-02 15:38:45,2016-05-24 23:13:42,2016-05-02 19:29:10,closed,,1.11.1 release,0,00 - Backport;11 - Bug;component: numpy.ma,https://api.github.com/repos/numpy/numpy/issues/7597,"b'Backport 7586, BUG: Make np.ma.take works on scalars'",b'By promoting and demoting between scalars and arrays where appropriate'
7590,151957158,charris,charris,2016-04-29 20:03:52,2016-04-30 00:02:01,2016-04-30 00:02:01,closed,,1.11.1 release,0,00 - Backport;11 - Bug;component: distribution,https://api.github.com/repos/numpy/numpy/issues/7590,"b'Backport 7584, BLD: fix configparser.InterpolationSyntaxError'",b'Closes #7572 inability to install in virtualenvs with percent in their path.'
7586,151762812,eric-wieser,ahaldane,2016-04-28 23:06:09,2016-05-02 15:39:11,2016-05-01 02:57:36,closed,,,8,11 - Bug;component: numpy.ma,https://api.github.com/repos/numpy/numpy/issues/7586,b'Make np.ma.take works on scalars',b'See #7585'
7585,151756011,eric-wieser,charris,2016-04-28 22:17:49,2016-05-02 15:37:31,2016-05-02 15:37:31,closed,,,5,11 - Bug;component: numpy.ma,https://api.github.com/repos/numpy/numpy/issues/7585,b'MaskArray.take does not work with scalar indices',"b'Python 3.5, numpy 1.10.1\r\n\r\n```python\r\n>>> m = np.ma.array([1, 2, 3, 4], mask=[True, 0, 0, 0])\r\n\r\n>>> m[0]\r\nmasked\r\n>>> m.take(0)  #This is wrong\r\n1\r\n\r\n>>> m[[0,1]]\r\nmasked_array(data = [-- 2],\r\n             mask = [ True False],\r\n       fill_value = 999999)\r\n>>> m.take([0, 1])\r\nmasked_array(data = [-- 2],\r\n             mask = [ True False],\r\n       fill_value = 999999)\r\n```\r\n'"
7584,151602672,ssbarnea,charris,2016-04-28 10:24:57,2016-04-29 20:13:18,2016-04-29 20:01:27,closed,,,15,11 - Bug;component: numpy.distutils,https://api.github.com/repos/numpy/numpy/issues/7584,"b'BUG: fixes #7572, percent in path'","b'Fixes #7572 -- the failure to install numpy in virtual environments that are created in paths that do contain percent sign in them. Bug that occurs only with Python 3 because the changed behaviour of ConfigParser between py2 and py3.\r\n\r\nIntroduction of interpolation support in py3 introduce this bug, as now the code fails to load ini files with percent sign in them.'"
7583,151538336,eric-wieser,charris,2016-04-28 02:57:45,2016-05-02 15:42:34,2016-05-02 15:42:34,closed,,,6,11 - Bug;component: numpy.core,https://api.github.com/repos/numpy/numpy/issues/7583,b'BUG: Refcount leak in recarray. Fixes #7581',b'Possibly at the expense of debugability'
7578,151454256,charris,charris,2016-04-27 18:14:41,2016-05-24 23:14:47,2016-04-27 19:06:20,closed,,1.11.1 release,0,00 - Backport;11 - Bug;component: Other,https://api.github.com/repos/numpy/numpy/issues/7578,"b'Backport 7568, BUG: Fix OverflowError in Python 3.x. in swig interface.'","b'The error occurs When values above 0x7FFFFFF are passed to a function\r\naccepting ""unsigned int"".\r\n\r\nThis a port of a fix in pyprimtype.swg from which several code snippets\r\nwhere copy pasted into swig/pyfragments.swg.\r\n\r\nPlease see SWIG changes log (2015-12-23) for more details:\r\n\r\nhttp://www.swig.org/Release/CHANGES.current\r\n\r\n2015-12-23: ahnolds  [Python] Fixes for conversion of signed and\r\nunsigned integer types ...'"
7576,151378823,ssbarnea,ssbarnea,2016-04-27 12:59:36,2016-05-02 15:31:02,2016-04-28 10:26:55,closed,,,13,11 - Bug;component: numpy.distutils,https://api.github.com/repos/numpy/numpy/issues/7576,b'Fixed the ConfigParser failure with paths with percent',
7568,150403167,mlamarre,charris,2016-04-22 15:38:48,2016-04-26 01:56:50,2016-04-26 01:56:15,closed,,1.12.0 release,3,11 - Bug;component: Other,https://api.github.com/repos/numpy/numpy/issues/7568,b'Fix a false positive OverflowError in Python 3.x when value above 0x7\xa1\xad',"b'\xa1\xadFFFFFF are passed to a function accepting ""unsigned int"".\r\n\r\nThis is a port of a fix in pyprimtype.swg from which several code snippets where copy pasted into swig/pyfragments.swg in the past.\r\n\r\nPlease see SWIG changes log (2015-12-23) for more details:\r\n\r\nhttp://www.swig.org/Release/CHANGES.current\r\n\r\n[...]\r\n\r\n2015-12-23: ahnolds  [Python] Fixes for conversion of signed and unsigned integer types \r\n\r\n[...]'"
7565,149784994,tadeu,charris,2016-04-20 14:32:00,2016-05-09 18:41:20,2016-05-09 18:41:00,closed,,,2,11 - Bug;component: Other,https://api.github.com/repos/numpy/numpy/issues/7565,b'BUG: Fix test_ctypeslib and test_indexing for debug interpreter',b'\xa1\xadpreter\r\n\r\nSee #7563 '
7563,149525091,tadeu,tadeu,2016-04-19 17:19:30,2016-04-20 14:15:22,2016-04-20 12:50:31,closed,,,8,11 - Bug;component: Other,https://api.github.com/repos/numpy/numpy/issues/7563,b'BUG: Fix ctypeslib.load_library when running on debug interpreter',b'Is should load the extensions with `_d` suffix when running in python debug interpreter (`python_d.exe`).'
7562,149524425,tadeu,charris,2016-04-19 17:16:22,2016-05-06 17:04:43,2016-05-06 02:00:50,closed,,,16,11 - Bug;component: numpy.core,https://api.github.com/repos/numpy/numpy/issues/7562,b'BUG: Fix test_from_object_array_unicode (test_defchararray.TestBasic)\xa1\xad',"b'\xa1\xad on Windows debug\r\n\r\n""isspace"" crashes with an assert on debug when the character is not ASCII, in Windows'"
7558,149203999,charris,charris,2016-04-18 16:35:48,2016-04-18 17:39:32,2016-04-18 17:39:32,closed,,1.11.1 release,0,00 - Backport;11 - Bug;component: numpy.lib,https://api.github.com/repos/numpy/numpy/issues/7558,"b'Backport 7358,  BUG: constant padding expected wrong type in constant_values'","b' BUG: constant padding expected wrong type in constant_values\r\n\r\nConstant padding on 4 sides of a 2d array expected a numpy ndarray, and not a\r\narray_like (tuple, list, ...) Detailed description is in the issue  #7353'"
7551,148788115,charris,charris,2016-04-15 23:02:07,2016-04-16 00:21:49,2016-04-16 00:21:49,closed,,1.11.1 release,0,05 - Testing;11 - Bug;component: numpy.distutils,https://api.github.com/repos/numpy/numpy/issues/7551,"b'Backport 7549, BUG: allow graceful recovery for no compiler'","b'If there is no compiler on Linux, the error we were getting was\r\nCompileError rather than the OSError the test was expecting.\r\n\r\nThis had the nasty side-effect of leaving us in a deleted temporary\r\ndirectory, causing later test failures.\r\n\r\nTry a check to see if we have a compiler and skip otherwise.'"
7549,148487446,matthew-brett,njsmith,2016-04-14 21:31:00,2016-04-15 23:24:39,2016-04-15 18:11:15,closed,,,7,05 - Testing;11 - Bug;component: numpy.distutils,https://api.github.com/repos/numpy/numpy/issues/7549,b'BUG: allow graceful recovery for no Liux compiler',"b'If there is no compiler on Linux, the error we were getting was CompileError\nrather than the OSError the test was expecting.\n\nThis had the nasty side-effect of leaving us in a deleted temporary directory,\ncausing later test failures.'"
7535,147160395,charris,charris,2016-04-09 20:18:47,2016-04-10 15:30:38,2016-04-10 15:30:38,closed,,1.11.1 release,0,00 - Backport;11 - Bug;component: npy_math,https://api.github.com/repos/numpy/numpy/issues/7535,"b'Backport 7518, BUG: Extend glibc complex trig functions blacklist to glibc < 2.18.'","b'The library complex trig functions are inaccurate also in glibc\r\nversions 2.16 and 2.17, so extend the blacklist.'"
7530,146972562,charris,charris,2016-04-08 16:15:43,2016-04-08 17:38:56,2016-04-08 17:38:56,closed,,1.11.1 release,0,00 - Backport;11 - Bug,https://api.github.com/repos/numpy/numpy/issues/7530,"b'Backport 7529, BUG: Floating exception with invalid axis in np.lexsort'",b'When an invalid axis was passed into PyArray_LexSort it\r\nwould attempt to create a set of iterators to ignore that\r\naxis before checking to see if the axis was valid. This\r\nwould cause a floating exception as the dimension of\r\nthe invalid axis would on occasion return zero.\r\n\r\nThis fixes that by moving the axis to before the iterator\r\ncreation.\r\n\r\nFixes #7528'
7528,146911279,simongibbons,charris,2016-04-08 12:09:19,2016-04-08 16:07:59,2016-04-08 16:07:59,closed,,1.11.1 release,3,11 - Bug,https://api.github.com/repos/numpy/numpy/issues/7528,b'BUG: Floating exception with np.lexsort',"b""    import numpy as np\r\n    x = np.linspace(0.0, 1.0, 126).reshape(42, 3)\r\n    np.lexsort(x, axis=2)\r\n\r\nKills python with a `Floating exception (core dumped)` \r\n\r\nThis is with python 2.7.8 and with numpy built from both the current master and 1.11.0\r\n\r\nI'm running this on RHEL 6 and numpy was compiled with gcc 4.7.2"""
7522,146587396,splendido,charris,2016-04-07 11:25:13,2016-04-07 19:18:29,2016-04-07 16:06:40,closed,,,3,11 - Bug;component: build,https://api.github.com/repos/numpy/numpy/issues/7522,b'BUG: Fixed iteration over additional bad commands',b'I found a typo within setup.py where the dictionary of *bad_commands* is automatically populated from a list using a default error message.\r\nThe variable controlled with the **for** cycle is *commands* while *command* is used within the cycle body.'
7515,146076612,ahaldane,charris,2016-04-05 18:45:20,2016-06-30 17:27:15,2016-04-05 23:44:43,closed,,,4,11 - Bug;component: numpy.ma,https://api.github.com/repos/numpy/numpy/issues/7515,b'BUG: MaskedArray.count treats negative axes incorrectly',b'Follow up to #5706. Fixes #7509'
7506,145767691,charris,njsmith,2016-04-04 18:32:27,2016-04-04 20:04:53,2016-04-04 20:04:53,closed,,1.11.1 release,1,11 - Bug;component: numpy.testing,https://api.github.com/repos/numpy/numpy/issues/7506,b'BUG: make sure numpy imports on python 2.6 when nose is unavailable',"b'Backport of #7499, which should be closed as this fix is only needed for 1.11.x.\r\n\r\n'"
7496,145258551,ewmoore,jaimefrio,2016-04-01 18:58:44,2016-04-02 23:07:38,2016-04-02 23:07:26,closed,,,4,11 - Bug;component: numpy.core,https://api.github.com/repos/numpy/numpy/issues/7496,"b""BUG: don't use pow for integer power ufunc loops.""",b'Fixes gh-7405.'
7493,145126075,kawing-chiu,charris,2016-04-01 08:58:50,2016-05-23 17:12:34,2016-05-23 17:12:34,closed,,1.11.1 release,8,11 - Bug;component: numpy.ma,https://api.github.com/repos/numpy/numpy/issues/7493,b'Bug in masked array indexing.',"b""This simple indexing operation\r\n```\r\nma = np.ma.zeros(5000, dtype=[('symbol', 'O')])\r\nprint(ma[0])\r\n```\r\nfails with a\r\n```\r\nValueError: Setting void-array with object members using buffer.\r\n```\r\nexception. While the non-masked version just works:\r\n```\r\narr = np.zeros(5000, dtype=[('symbol', 'O')])\r\nprint(arr[0])\r\n```\r\n\r\nNumpy version `1.11.0` on python 3.5.1 on arch linux."""
7482,144243635,simongibbons,seberg,2016-03-29 12:06:18,2016-06-05 09:13:00,2016-06-05 09:13:00,closed,,1.12.0 release,8,11 - Bug;component: numpy.core,https://api.github.com/repos/numpy/numpy/issues/7482,b'BUG: Memory Leak in _GenericBinaryOutFunction',"b""_GenericBinaryOutFunction was leaking constructing a string\r\neach time it was called which wasn't deallocated on some\r\nversions of python (due to string interning rules). This\r\nfixes this by storing the **kwargs that are passed into\r\nthe op statically so that they are only constructed\r\nthe first time that _GenericBinaryOutFunction is called.\r\n\r\nCredit to @seberg for finding the location of the\r\nbug and providing an initial version of the fix.\r\n\r\nFixes #6672"""
7475,143936138,jaimefrio,jaimefrio,2016-03-28 09:25:49,2016-03-29 13:20:09,2016-03-29 13:20:09,closed,,,0,11 - Bug;component: numpy.core;Easy Fix;priority: normal,https://api.github.com/repos/numpy/numpy/issues/7475,b'BUG: segfault in PyArray_OrderConverter with non-ASCII unicode value',"b""Passing a unicode string that cannot be converted to ASCII to `PyArray_OrderConverter` segfaults:\r\n\r\n```Python\r\n>>> a = np.arange(5)\r\n>>> a.flatten(u'\\xe2')\r\n```\r\n\r\nThe issue seems to be the `Py_DECREF` [here](https://github.com/numpy/numpy/blob/maintenance/1.11.x/numpy/core/src/multiarray/conversion_utils.c#L541) on an object that is NULL when the previous call to `PyUnicode_AsASCIIString` failed."""
7468,143791784,jaimefrio,seberg,2016-03-27 09:26:22,2016-03-28 19:11:57,2016-03-28 19:03:18,closed,,,7,11 - Bug;component: numpy.core,https://api.github.com/repos/numpy/numpy/issues/7468,"b'BUG: more on inplace reductions, fixes #615'","b'This is a follow up to #7407 and #7466. It fixes an error in the\r\ncomments (0 is the output and 1 is the input), moves them around so\r\nthey apply to both branches of the if/else, and changes memcpy to\r\nmemmove, since the memory segments can be overlapping, as pointed\r\nout by Valgrind in a really old issue.'"
7466,143754612,jaimefrio,seberg,2016-03-26 22:19:46,2016-03-27 15:07:18,2016-03-27 07:42:24,closed,,,1,11 - Bug;component: numpy.core,https://api.github.com/repos/numpy/numpy/issues/7466,"b'BUG: segfault inplace object reduceat, fixes #7465'",
7463,143717742,seberg,jaimefrio,2016-03-26 15:19:46,2016-03-27 15:07:39,2016-03-26 20:19:48,closed,,,2,11 - Bug;component: numpy.core,https://api.github.com/repos/numpy/numpy/issues/7463,b'BUG: fix array too big error for wide dtypes.',"b'The error was not being raised when arr.size * arr.dtype.itemsize\r\nwas too large, but only when arr.size was too large alone.\r\n\r\nCloses gh-7451'"
7462,143609477,denfromufa,charris,2016-03-25 21:55:53,2016-03-26 03:39:14,2016-03-26 00:28:45,closed,,,4,11 - Bug;component: numpy.core,https://api.github.com/repos/numpy/numpy/issues/7462,b'np.timedelta64 does not accept np.int64',"b""`np.timedelta64(2,'h')` returns `numpy.timedelta64(2,'h')`, but `np.timedelta64(np.int64(2),'h')` returns:\r\n\r\n```python\r\n---------------------------------------------------------------------------\r\nValueError                                Traceback (most recent call last)\r\n<ipython-input-75-fd40c0d8eac0> in <module>()\r\n----> 1 np.timedelta64(np.int64(2),'h')\r\n\r\nValueError: Could not convert object to NumPy timedelta\r\n\r\n```"""
7456,143090936,jaimefrio,seberg,2016-03-23 21:58:12,2016-03-25 16:37:51,2016-03-25 16:37:51,closed,,,3,11 - Bug;component: numpy.core,https://api.github.com/repos/numpy/numpy/issues/7456,"b'BUG: int overflow in reshape, fixes #7455, fixes #7293'",
7451,142809657,jaimefrio,jaimefrio,2016-03-22 23:24:01,2016-03-26 20:19:48,2016-03-26 20:19:48,closed,,,7,11 - Bug;Easy Fix,https://api.github.com/repos/numpy/numpy/issues/7451,b'Some arrays for which `arr.size * arr.dtype.itemsize > max_ssize_t` currently not recognized as invalid',"b""The example is a little convoluted, but fails consistently:\r\n\r\n```Python\r\nimport numpy as np\r\nfrom numpy.lib.stride_tricks import as_strided\r\na = np.ones((1, 1))\r\nlen_ = np.iinfo(np.intp).max // 2 + 1\r\nb = as_strided(a, shape=(1, len_), strides=(0, 0))\r\n# next line segfaults\r\nb.ravel()\r\n```\r\n\r\nNot sure what may be going on, but it sure doesn't happen if the strided view is much smaller."""
7447,142641969,ewmoore,charris,2016-03-22 12:57:57,2016-03-22 21:08:03,2016-03-22 21:07:31,closed,,,4,11 - Bug;component: numpy.core,https://api.github.com/repos/numpy/numpy/issues/7447,b'BUG: scalar integer negative powers gave wrong results.',"b'np.int8(4)**np.int8(-4) gave inf.  Since we return a float or\r\ndouble for these cases, just call those power routines. This\r\nprevents integer overflow from resulting in a divide by zero and\r\nthe old nonsense result.'"
7445,142462588,jaimefrio,seberg,2016-03-21 20:35:46,2016-03-27 15:06:15,2016-03-22 09:48:23,closed,,,1,11 - Bug;component: numpy.core,https://api.github.com/repos/numpy/numpy/issues/7445,"b'BUG: reference count leak in bincount, fixes #6805'",
7439,142164769,seberg,charris,2016-03-20 13:37:13,2016-03-25 17:03:01,2016-03-25 02:30:54,closed,,,7,11 - Bug;component: numpy.core,https://api.github.com/repos/numpy/numpy/issues/7439,b'BUG: Do not try sequence repeat unless necessary',"b'Only if the other class actually implements sequence repeat, should\r\nit be tried. Otherwise classes which implement neither will cause\r\nthe sequence repeat branch. This branch may fail for two reasons:\r\n 1. The scalar was not integer\r\n 2. The other object raises an error during repeat.\r\n\r\nPreviously, the first did not happen for floats, etc. and the\r\nsecond was using a try/except logic. Now both will always error.\r\nAn object which claims to support sequence repeat should never\r\nhave to fall back to normal multiplication.\r\n\r\nNote that all of this is controversial in the final behaviour.\r\nWe may actually want `[1, 2, 3] * np.float64(3.)` to return\r\nan array with `[3., 6., 9.]` at some point.\r\n\r\n-\r\n\r\nIt was suggested to create a better error message, this\r\nis not covered here. The major point is fixed though, so:\r\nclosing gh-7428'"
7429,141907927,omtcyfz,omtcyfz,2016-03-18 15:59:25,2016-05-23 10:48:23,2016-05-23 10:48:23,closed,,,5,04 - Documentation;11 - Bug;component: Other,https://api.github.com/repos/numpy/numpy/issues/7429,b'`lingalg.norm` documentation reference to the source is wrong',"b""`linalg.norm` [documentation](https://docs.scipy.org/doc/numpy-dev/reference/generated/numpy.linalg.norm.html) (numpy-dev version) seems to point the source of the function to `numpy/linalg/linalg.py#L1976-L2221` while it should be `numpy/linalg/linalg.py#L1976-L2224`.\r\n\r\nSince I've no developer experience at all with numpy I'm not sure how the docs are generated and how this should be fixed."""
7425,141381728,madphysicist,charris,2016-03-16 19:46:13,2016-03-16 20:40:28,2016-03-16 20:40:28,closed,,,0,11 - Bug;component: numpy.lib,https://api.github.com/repos/numpy/numpy/issues/7425,"b'MAINT: Cleanup of backport of PRs #7416, #7423'","b'This PR represents a backport of #7416, #7423 to the maintenance/1.11.x branch. It was made by rebasing and then cleaning up the result.'"
7423,141357223,madphysicist,charris,2016-03-16 18:17:16,2016-03-16 21:58:50,2016-03-16 20:17:17,closed,,,15,11 - Bug;component: numpy.lib,https://api.github.com/repos/numpy/numpy/issues/7423,b'BUG: Ongoing fixes to PR#7416',b'Removed superfluous `ceil` call in Sturges automated bin width estimator.'
7416,140740776,madphysicist,charris,2016-03-14 17:25:54,2016-03-16 20:17:55,2016-03-16 16:35:03,closed,,,7,11 - Bug;component: numpy.lib,https://api.github.com/repos/numpy/numpy/issues/7416,b'BUG: Incorrect handling of range in `histogram` with automatic bins.',"b'Fixes #7411. Tests and documentation updated.\r\n\r\nNote that the number of bins has nearly doubled in `TestHistogramOptimBinNums.test_simple_range`. This is the correct behavior since the data is generated over the range [-10, 10] but the requested range is [-20, 20]. The original fixed values were the same as for `TestHistogramOptimBinNums.test_simple`, which used the PTP of the data in the estimate.\r\n\r\nBy switching the results of the estimators to bin width instead of count, this PR uncovered and fixed the following problems that had gone previously unnoticed:\r\n\r\n  - \'auto\', \'rice\', \'sturges\' and \'sqrt\' estimators returned non-one for the ""No Variance"" test. Clearly should be 1 in all cases. This was happening because of rounding in the bin count computation.\r\n  - \'rice\' estimator returned `2` for input with datasize 1. Clearly should be 1 as well.\r\n\r\nFixed another minor potential issue: The computation of mn, mx of the range was being done in two slightly different ways for the main function and histogram bin estimators. Aside from code duplication, this could cause discrepancies in corner cases.\r\n\r\nFinally, replaced `/` with `//` in a couple of tests to make warnings go away. Turns out `500 / 5` is not always an integer in Python.'"
7412,140402624,charris,charris,2016-03-12 17:44:33,2016-03-12 19:29:10,2016-03-12 19:29:08,closed,,,0,00 - Backport;11 - Bug;component: numpy.core,https://api.github.com/repos/numpy/numpy/issues/7412,"b'Backport 7407, BUG: Fix decref before incref for in-place accumulate'",b'closes gh-7402'
7407,140037143,seberg,charris,2016-03-10 23:17:17,2016-03-12 19:29:38,2016-03-12 17:40:53,closed,,,8,11 - Bug;component: numpy.core,https://api.github.com/repos/numpy/numpy/issues/7407,b'BUG: Fix decref before incref for in-place accumulate',b'closes gh-7402'
7404,139834326,haypo,njsmith,2016-03-10 09:36:38,2016-04-21 08:11:40,2016-04-21 00:52:31,closed,,1.12.0 release,31,10 - Maintenance;11 - Bug;56 - Needs Release Note.;component: numpy.core,https://api.github.com/repos/numpy/numpy/issues/7404,b'Use PyMem_RawMalloc on Python 3.4 and newer',"b'Change PyArray_malloc() macro to use PyMem_RawMalloc() on Python 3.4\r\nand newer. This macro can be called indirectly from ufunc_at() which\r\nreleases the GIL, whereas PyMem_Malloc() requires the GIL to be held:\r\nhttps://docs.python.org/dev/c-api/memory.html#memory-interface\r\n\r\nPyMem_RawMalloc() can be called without the GIL.'"
7373,138009014,charris,seberg,2016-03-02 22:18:09,2016-03-13 23:37:51,2016-03-05 13:14:22,closed,,,15,02 - Discussion;09 - Enhancement;11 - Bug;component: numpy.core,https://api.github.com/repos/numpy/numpy/issues/7373,b'ENH: Add bitwise_and identity',"b'Couple of simple fixes for the bitwise operators.\r\n\r\n* Give bitwise_xor the identity zero rather than none.\r\n* Give bitwise_and an identity of all bits set (-1).\r\n\r\nStill needs tests, so do not merge.'"
7362,137070138,janfb,charris,2016-02-28 16:44:43,2016-05-05 18:39:26,2016-05-05 18:39:26,closed,,,6,11 - Bug;component: numpy.lib,https://api.github.com/repos/numpy/numpy/issues/7362,b'BUG: fixes #1447 related to numpy.nan_to_num. ',b'Add a test for this bug and fix the bug: if a finite integer number is passed to nan_to_num then the original number is returned in the format numpy.int64. Fix accomplished by moving the check for scalar above the first return statement. \r\nThe test now ensures that no array is returned when nan_to_num is called with a finite scalar. '
7361,137063101,golnazir,seberg,2016-02-28 15:21:08,2016-02-28 16:07:02,2016-02-28 16:07:02,closed,,,1,11 - Bug;component: numpy.core,https://api.github.com/repos/numpy/numpy/issues/7361,b'MAINT: Fix copy and paste oversight.',b'Variable npy_ma_str_array_finalize replaced with variable\r\nnpy_ma_str_buffer in return statement. Found with cppcheck.'
7358,136981102,chiffa,njsmith,2016-02-27 23:26:13,2016-04-18 20:13:40,2016-02-28 03:34:50,closed,,,26,11 - Bug;component: numpy.lib,https://api.github.com/repos/numpy/numpy/issues/7358,b'BUG: pull request related to the issue #7353',"b'@njsmith \r\n\r\nRelated discussions: #7357 #7354, #7353.\r\n\r\nwould also be need to pushed to maintenance branches for 1.10 and 1.11'"
7351,136776795,ahaldane,charris,2016-02-26 18:32:40,2016-02-26 21:46:22,2016-02-26 21:45:24,closed,,,2,05 - Testing;11 - Bug;component: numpy.ma,https://api.github.com/repos/numpy/numpy/issues/7351,b'TST: Fix some MA tests to avoid looking at the .data attribute',"b'The MaskedArray.data attribute is unreliable for tests because it can contain arbitrary junk data at masked positions. Instead, all MaskedArray tests should look at marr.filled(0) to check if we got the expected result.\r\n\r\nThis PR is split off from #5706. These unit tests were failing after further changes there. \r\n\r\nIn fact, it was very confusing because these unit tests will fail but only depending on the order in which tests run: Some unit tests write to the `data` value in the `masked` singleton, and then other unit tests assign to elements of a masked array using the masked singleton, which means that their data values get set to whatever the masked singleton had. These later unit tests then check for particular values in the `.data` attribute, but that will change depeding on which unit tests modified the masked singleton previously. My changes in #5706 were simply causing the unit tests to run in a different order, causing failures.\r\n\r\nI spent a long time looking into whether it was possible to prevent writing to the masked singleton, but concluded it is not.'"
7350,136774852,ahaldane,charris,2016-02-26 18:23:53,2016-06-13 18:22:48,2016-06-13 14:47:18,closed,,1.12.0 release,16,11 - Bug;component: numpy.ma,https://api.github.com/repos/numpy/numpy/issues/7350,"b'BUG: MA ufuncs should set mask to False, not array([False])'","b'Example of the problem:\r\n```\r\n>>> m = np.ma.array([1])\r\n>>> (m+1).mask\r\nFalse\r\n>>> (m/2).mask\r\narray([False], dtype=bool)\r\n```\r\n\r\n(This PR is split off from #5706. It fixes a problem that turned up in later commits there)\r\n'"
7349,136772365,ahaldane,charris,2016-02-26 18:16:37,2016-02-27 18:53:31,2016-02-27 18:53:18,closed,,,5,11 - Bug;component: numpy.ma,https://api.github.com/repos/numpy/numpy/issues/7349,b'MAINT: Hide nan warnings for masked internal MA computations',"b""This prevents `RuntimeWarning`s when there is a `np.nan` value in a masked position in a masked array, eg\r\n\r\n```python\r\n>>> a = np.ma.array([0.5, np.nan], mask=[0,1])\r\n>>> a > 0\r\n/usr/bin/ipython2:1: RuntimeWarning: invalid value encountered in greater\r\n#!/usr/bin/python2\r\nmasked_array(data = [True --],\r\n             mask = [False  True],\r\n       fill_value = True)\r\n```\r\n\r\n(This PR was split off from #5706)\r\n\r\nOn my computer I'm still having trouble getting the unit tests actually detect the warnings, even though I see them in a python shell. I'm adding a temporary commit that should cause unit tests to fail, to see if appveyor catches it."""
7337,136285240,jakirkham,charris,2016-02-25 05:25:49,2016-02-25 18:31:17,2016-02-25 18:29:24,closed,,,9,05 - Testing;11 - Bug;component: numpy.core,https://api.github.com/repos/numpy/numpy/issues/7337,"b""TST: Mark datetime test as a known failure on Python's below 2.7.""","b""Fixes https://github.com/numpy/numpy/issues/7336\r\n\r\nAppears that there is an attribute used by this test, `total_seconds` of `timedelta` objects that is not introduced until Python 2.7. So, this does not exist on Python 2.6. Here we mark this test as a known failure on Python's below 2.7."""
7336,136280320,njsmith,charris,2016-02-25 04:47:41,2016-02-25 18:41:03,2016-02-25 18:40:10,closed,,,8,05 - Testing;11 - Bug;component: numpy.core,https://api.github.com/repos/numpy/numpy/issues/7336,b'Converting datetimes with non-trivial timezones to datetime64 is broken on python 2.6',"b""As discussed in #7324, #6453 added a code path that references the `timedelta.total_seconds()` method, which is new in 2.7. We didn't notice this because the code path is only hit when converting Python `datetime` objects to `datetime64`, and only for `datetime` objects that have a `.tzinfo` attribute which is not `None`, and it turns out that we don't install pytz on Travis/Appveyor and so never actually ran this test on 2.6.\r\n\r\nThis is totally uninteresting for master, because master has already dropped 2.6 support (except that we should install pytz on Travis/Appveyor, which is #7335).\r\n\r\nOptions:\r\n* Replace this with some 2.6-compatible code. (it looks like we just need `td.days * 86400 + td.seconds`, though this is a bit annoying to do from C)\r\n* Declare that 2.6 is officially unsupported in 1.11\r\n* Mark this as a known 2.6-only bug in the release notes, move on with life\r\n\r\nI guess I'm leaning towards the latter."""
7334,136256328,charris,charris,2016-02-25 02:28:38,2016-03-10 01:53:35,2016-02-25 16:40:42,closed,,,0,00 - Backport;05 - Testing;11 - Bug;component: numpy.core,https://api.github.com/repos/numpy/numpy/issues/7334,"b'Backport 7331, TST: fix MemoryError on win32'",
7332,136183160,simongibbons,charris,2016-02-24 20:52:02,2016-02-29 17:55:32,2016-02-29 17:52:17,closed,,,3,11 - Bug;component: numpy.lib,https://api.github.com/repos/numpy/numpy/issues/7332,b'Check for no solution in np.irr Fixes #6744',b'This implements the proposed fix for #6744  '
7325,135943358,gfyoung,njsmith,2016-02-24 03:33:08,2016-03-22 00:25:24,2016-03-22 00:23:33,closed,,,29,10 - Maintenance;11 - Bug;component: numpy.core,https://api.github.com/repos/numpy/numpy/issues/7325,"b'BUG, MAINT: Improve fromnumeric.py interface for downstream compatibility '","b'Motivation stemmed from PR in `pandas` in which I was trying to make `searchsorted` in `pandas` have a compatible signature with `numpy` without externalizing the `sorter` argument (it isn\'t used in the `pandas` implementation) by accepting a `kwargs` argument to swallow the `sorter` arg.\r\n\r\nHowever, because `np.searchsorted` treats `sorter` like a positional argument in the internal call and NOT as a keyword argument as it should be based on the method signature, it was not possible to do so.  This PR fixes that inconsistency as well as in all other `np` functions that use `_wrapit` in the implementation.\r\n\r\nxref <a href=""https://github.com/pydata/pandas/issues/12644"">#12644 </a> (`pandas`)'"
7323,135880878,cgohlke,charris,2016-02-23 22:03:48,2016-02-24 16:35:36,2016-02-24 16:35:28,closed,,,3,05 - Testing;11 - Bug,https://api.github.com/repos/numpy/numpy/issues/7323,b'TST: fix MemoryError on win32',"b'Fixes the MemoryError test error on 32-bit Python on Windows reported at #7316.\r\n```\r\n======================================================================\r\nERROR: test_zeros_big (test_multiarray.TestCreation)\r\n----------------------------------------------------------------------\r\nTraceback (most recent call last):\r\n  File ""X:\\Python27\\lib\\site-packages\\numpy\\core\\tests\\test_multiarray.py"", line 586, in test_zeros_big\r\n    d = np.zeros((30 * 1024**2,), dtype=dt)\r\nMemoryError\r\n```\r\n'"
7316,135715363,charris,charris,2016-02-23 11:48:38,2016-02-27 17:32:35,2016-02-27 17:32:23,closed,,,2,01 - Release;11 - Bug,https://api.github.com/repos/numpy/numpy/issues/7316,b'Numpy 1.11.0 release',"b'Christoph Gohlke reports the following test errors for Numpy 1.11.0rc1 on Windows.\r\n\r\n> all numpy+MKL builds succeed. Selftests are OK except for the following.\r\n\r\n\r\n> On all 32-bit platforms:\r\n\r\n> ======================================================================\r\nERROR: test_zeros_big (test_multiarray.TestCreation)\r\n----------------------------------------------------------------------\r\nTraceback (most recent call last):\r\n  File ""X:\\Python27\\lib\\site-packages\\numpy\\core\\tests\\test_multiarray.py"", line 594, in test_zeros_big\r\n    d = np.zeros((30 * 1024**2,), dtype=dt)\r\nMemoryError\r\n\r\n\r\n\r\n> On Python 2.6, 64-bit:\r\n >======================================================================\r\nFAIL: test_double (test_numeric.TestBoolCmp)\r\n----------------------------------------------------------------------\r\nTraceback (most recent call last):\r\n  File ""X:\\Python26-x64\\lib\\site-packages\\numpy\\core\\tests\\test_numeric.py"", line 415, in test_double\r\n    assert_array_equal(np.signbit(self.signd[i:]), self.ed[i:])\r\n  File ""X:\\Python26-x64\\lib\\site-packages\\numpy\\testing\\utils.py"", line 807, in assert_array_equal\r\n    verbose=verbose, header=\'Arrays are not equal\')\r\n  File ""X:\\Python26-x64\\lib\\site-packages\\numpy\\testing\\utils.py"", line 733, in assert_array_compare\r\n    raise AssertionError(msg)\r\nAssertionError:\r\nArrays are not equal\r\n\r\nNot sure where that is coming from\r\n\r\n\r\n>(mismatch 12.5%)\r\n x: array([False, False, False, False,  True, False, False, False, False,\r\n       False, False, False,  True,  True, False, False, False, False,\r\n        True, False,  True, False,  True, False, False,  True,  True,...\r\n y: array([False, False, False, False,  True, False, False, False, False,\r\n        True, False, False,  True,  True, False, False, False, False,\r\n        True, False,  True, False,  True, False, False,  True,  True,...\r\n\r\n>======================================================================\r\nFAIL: test_float (test_numeric.TestBoolCmp)\r\n----------------------------------------------------------------------\r\nTraceback (most recent call last):\r\n  File ""X:\\Python26-x64\\lib\\site-packages\\numpy\\core\\tests\\test_numeric.py"", line 389, in test_float\r\n    assert_array_equal(np.signbit(self.signf[i:]), self.ef[i:])\r\n  File ""X:\\Python26-x64\\lib\\site-packages\\numpy\\testing\\utils.py"", line 807, in assert_array_equal\r\n    verbose=verbose, header=\'Arrays are not equal\')\r\n  File ""X:\\Python26-x64\\lib\\site-packages\\numpy\\testing\\utils.py"", line 733, in assert_array_compare\r\n    raise AssertionError(msg)\r\nAssertionError:\r\nArrays are not equal\r\n\r\n>(mismatch 4.296875%)\r\n x: array([False, False, False, False, False, False, False, False,  True,\r\n       False, False, False, False, False, False, False, False,  True,\r\n       False, False, False, False, False, False,  True,  True, False,...\r\n y: array([False, False, False, False, False, False, False, False,  True,\r\n       False, False, False, False, False, False, False, False,  True,\r\n       False, False, False, False, False, False,  True,  True, False,...\r\n\r\n@juliantaylor This looks like yours. I\'m not clear on why this only shows up for 2.6, maybe the windows compiler version?\r\n'"
7312,135562814,astrofrog,ahaldane,2016-02-22 22:17:49,2016-04-04 21:23:03,2016-04-04 21:23:03,closed,,1.12.0 release,16,11 - Bug;component: numpy.ma,https://api.github.com/repos/numpy/numpy/issues/7312,b'BUG: np.sum with ``keepdims=True`` fails on masked_array',"b""When calling ``np.sum`` on a masked array, and using the ``keepdims`` option, an error is raised:\r\n\r\n```\r\nIn [1]: import numpy as np \r\n\r\nIn [2]: np.sum(np.ma.masked_array([1,2,3],mask=[0,0,1]),keepdims=True)\r\n---------------------------------------------------------------------------\r\nTypeError                                 Traceback (most recent call last)\r\n<ipython-input-8-482ed005c74d> in <module>()\r\n----> 1 np.sum(np.ma.masked_array([1,2,3],mask=[0,0,1]),keepdims=True)\r\n\r\n/Users/tom/miniconda3/envs/production27/lib/python2.7/site-packages/numpy-1.12.0.dev0+0dbcd2f-py2.7-macosx-10.5-x86_64.egg/numpy/core/fromnumeric.pyc in sum(a, axis, dtype, out, keepdims)\r\n   1843             pass\r\n   1844         else:\r\n-> 1845             return sum(axis=axis, dtype=dtype, out=out, **kwargs)\r\n   1846     return _methods._sum(a, axis=axis, dtype=dtype,\r\n   1847                          out=out, **kwargs)\r\n\r\nTypeError: sum() got an unexpected keyword argument 'keepdims'\r\n```"""
7308,135498792,madphysicist,seberg,2016-02-22 18:19:39,2016-02-23 20:33:49,2016-02-23 16:26:58,closed,,,17,11 - Bug;component: numpy.core,https://api.github.com/repos/numpy/numpy/issues/7308,b'BUG: Incrementing the wrong reference on return',"b'How did this work before? If `i2` is `NULL`, `Py_INCREF` will generally crash. That pretty much means that this branch was never excercised in a test or elsewhere?'"
7305,135462295,ssbr,juliantaylor,2016-02-22 16:07:28,2016-02-22 23:43:42,2016-02-22 22:45:06,closed,,,2,11 - Bug;component: numpy.random,https://api.github.com/repos/numpy/numpy/issues/7305,b'BUG: Remove data race in mtrand: two threads could mutate the state.',"b""E.g.:\r\n\r\n```\r\nnp.random.random_sample()   # uses the GIL for synchronization\r\nnp.random.random_sample(1)  # releases the GIL and uses a separate lock.\r\n```\r\n\r\nThis means that both can run simultaneously, causing a data race when mutating the random number generator's state, which could lead to buffer overflow (from incrementing state->pos).\r\n\r\nThe fix here is to always use the separate lock, so that exactly one thread at a time is mutating the random number generator's state."""
7297,135155976,charris,charris,2016-02-21 03:56:05,2016-02-21 20:59:37,2016-02-21 20:59:35,closed,,,0,00 - Backport;11 - Bug;component: numpy.core,https://api.github.com/repos/numpy/numpy/issues/7297,"b'Backport 7258, BUG: fix divmod for numpy scalars and arrays.'","b'Backport #7258\r\n\r\nThis fixes the problems with divmod in #7224 and brings divmod for numpy float64 scalars and arrays into agreement with divmod for Python floats. Tests are added to enforce the new behavior and assures that the results for small integers scaled by powers of two are exact.\r\n\r\nToo keep the scalar and array math in sync, both the scalar math and loop code is based on a new npy_divmod function in npy_math.\r\n\r\nEDIT: I changed the name to npy_divmod.\r\n\r\ndivmod example, Python floats\r\n\r\n    In [1]: a = 78 * 6e-8\r\n\r\n    In [2]: b = 6e-8\r\n\r\n    In [3]: divmod(a, b)\r\n    Out[3]: (77.0, 5.999999999999965e-08)\r\n\r\nBefore this commit numpy float64 gave\r\n\r\n    In [4]: divmod(float64(a), float64(b))\r\n    Out[4]: (78.0, 0.0)\r\n\r\nAfter this commit numpy float64 gives\r\n\r\n    In [4]: divmod(float64(a), float64(b))\r\n    Out[4]: (77.0, 5.9999999999999651e-08)\r\n\r\n'"
7290,134929545,charris,charris,2016-02-19 17:47:23,2016-02-19 18:45:15,2016-02-19 18:45:13,closed,,,0,00 - Backport;11 - Bug;component: numpy.core,https://api.github.com/repos/numpy/numpy/issues/7290,"b'Backport #7266, BUG: Segfault for classes with deceptive __len__'",
7288,134913082,charris,charris,2016-02-19 16:47:58,2016-02-19 18:38:25,2016-02-19 18:38:18,closed,,,0,00 - Backport;11 - Bug;component: numpy.random,https://api.github.com/repos/numpy/numpy/issues/7288,"b'Backport 7285, BUG: Make randint backwards compatible with pandas'","b""The 'pandas' library expects Python integers to be\r\nreturned, so this commit changes the API so that\r\nthe default is 'np.int' which converts to native\r\nPython integer types when a singleton is being\r\ngenerated with this function."""
7287,134876382,hajgato,rgommers,2016-02-19 14:18:32,2016-06-30 20:57:22,2016-05-22 17:22:16,closed,,1.11.1 release,22,11 - Bug;component: build;component: distribution,https://api.github.com/repos/numpy/numpy/issues/7287,b'BLD: hardcoded SSE4.2 for Intel compilers on Linux',"b""Building numpy using Intel compilers on Linux systems still breaks on CPUs that does not support SSE4.2.\r\n\r\nI would suggest using `-xHOST` flag instead of `-xSSE4.2` (and on windows `/QxHOST` insted of `/QaxSSE4.2`)\r\n\r\nFor the Linux part, my suggested patch is:\r\n```\r\n--- ./numpy/distutils/intelccompiler.py.orig    2016-01-06 22:07:54.000000000 +0100\r\n+++ ./numpy/distutils/intelccompiler.py 2016-02-19 15:07:00.438235792 +0100\r\n@@ -54,7 +54,7 @@\r\n     def __init__(self, verbose=0, dry_run=0, force=0):\r\n         UnixCCompiler.__init__(self, verbose, dry_run, force)\r\n         self.cc_exe = ('icc -m64 -fPIC -fp-model strict -O3 '\r\n-                       '-fomit-frame-pointer -openmp -xSSE4.2')\r\n+                       '-fomit-frame-pointer -openmp -xHOST')\r\n         compiler = self.cc_exe\r\n         if platform.system() == 'Darwin':\r\n             shared_flag = '-Wl,-undefined,dynamic_lookup'\r\n--- ./numpy/distutils/fcompiler/intel.py.orig   2016-01-07 03:16:25.000000000 +0100\r\n+++ ./numpy/distutils/fcompiler/intel.py        2016-02-19 15:07:16.424220745 +0100\r\n@@ -123,7 +123,7 @@\r\n         return ['-openmp -fp-model strict']\r\n\r\n     def get_flags_arch(self):\r\n-        return ['-xSSE4.2']\r\n+        return ['-xHOST']\r\n\r\n # Is there no difference in the version string between the above compilers\r\n # and the Visual compilers?\r\n```\r\n"""
7285,134784948,gfyoung,charris,2016-02-19 06:17:23,2016-02-20 00:37:04,2016-02-19 15:06:15,closed,,,9,11 - Bug;component: numpy.random,https://api.github.com/repos/numpy/numpy/issues/7285,b'BUG: Make Randint Backwards Compatible with Pandas',"b'The `pandas` library expects Python integers to be returned, so this commit changes the API so that\r\nthe default is `np.int` which converts to native Python integer types when a singleton is being generated.\r\n\r\n@jreback, @ahaldane, @charris (need to back-port to 1.11.x)'"
7278,134661656,gfyoung,seberg,2016-02-18 18:49:50,2016-02-21 03:51:48,2016-02-18 21:09:24,closed,,,1,11 - Bug;component: numpy.core,https://api.github.com/repos/numpy/numpy/issues/7278,b'BUG: Make returned unravel_index arrays writeable',b'Title is self-explanatory.  Closes #7269.\r\n\r\n@anntzer @seberg '
7274,134536628,gfyoung,njsmith,2016-02-18 10:17:23,2016-02-19 23:59:15,2016-02-19 22:50:13,closed,,,3,11 - Bug;component: numpy.lib,https://api.github.com/repos/numpy/numpy/issues/7274,b'BUG: Preserve array order in np.delete',b'Title is self-explanatory.  Closes #7113.'
7271,134437540,ahaldane,charris,2016-02-17 23:57:27,2016-02-19 04:34:35,2016-02-19 04:34:14,closed,,,3,00 - Backport;11 - Bug;component: numpy.random,https://api.github.com/repos/numpy/numpy/issues/7271,b'BUG: Backport #7254',b'backport of #7254\r\n\r\nCloses gh-7203.\r\n\r\nI will leave it to someone else to merge if it looks like I did the backport correctly.'
7266,134134768,ahaldane,charris,2016-02-17 00:13:09,2016-02-19 18:43:57,2016-02-19 15:01:20,closed,,,7,11 - Bug;component: numpy.core,https://api.github.com/repos/numpy/numpy/issues/7266,b'BUG: Segfault for classes with deceptive __len__',b'Fixes #7264'
7264,134062093,anntzer,charris,2016-02-16 18:40:13,2016-02-19 15:01:20,2016-02-19 15:01:20,closed,,,26,11 - Bug;component: numpy.core,https://api.github.com/repos/numpy/numpy/issues/7264,"b'Segfault when constructing an array from a ""bad"" class'","b'```\r\nIn [1]: class C:\r\n    def __getitem__(self, i): raise IndexError\r\n    def __len__(self): return 42\r\n   ...: \r\n\r\nIn [2]: np.array(C())\r\nFatal Python error: Segmentation fault\r\n```\r\nA bit contrieved; on the other hand you can imagine hitting an IndexError in some nested function called by `__getitem__` accidentally bubbling up.\r\n\r\nEDITED: gdb backtrace:\r\n```\r\nProgram received signal SIGSEGV, Segmentation fault.\r\n0x00007ffff6132bae in PyArray_DTypeFromObjectHelper (obj=obj@entry=<C at remote 0x7ffff66cf898>, maxdims=maxdims@entry=32, out_dtype=out_dtype@entry=0x7fffffffd478, \r\n    string_type=string_type@entry=0) at numpy/core/src/multiarray/common.c:538\r\n538             if (Py_TYPE(objects[i]) != common_type) {\r\n(gdb) bt\r\n#0  0x00007ffff6132bae in PyArray_DTypeFromObjectHelper (obj=obj@entry=<C at remote 0x7ffff66cf898>, maxdims=maxdims@entry=32, out_dtype=out_dtype@entry=0x7fffffffd478, \r\n    string_type=string_type@entry=0) at numpy/core/src/multiarray/common.c:538\r\n#1  0x00007ffff6132e63 in PyArray_DTypeFromObject (obj=obj@entry=<C at remote 0x7ffff66cf898>, maxdims=maxdims@entry=32, out_dtype=out_dtype@entry=0x7fffffffd478)\r\n    at numpy/core/src/multiarray/common.c:184\r\n#2  0x00007ffff613c7a5 in PyArray_GetArrayParamsFromObject (op=<C at remote 0x7ffff66cf898>, requested_dtype=<optimized out>, writeable=<optimized out>, \r\n    out_dtype=0x7fffffffd478, out_ndim=0x7fffffffd46c, out_dims=0x7fffffffd480, out_arr=0x7fffffffd470, context=0x0) at numpy/core/src/multiarray/ctors.c:1560\r\n#3  0x00007ffff613cb7d in PyArray_FromAny (op=op@entry=<C at remote 0x7ffff66cf898>, newtype=0x0, min_depth=0, max_depth=0, flags=flags@entry=112, context=<optimized out>)\r\n    at numpy/core/src/multiarray/ctors.c:1692\r\n#4  0x00007ffff613ceff in PyArray_CheckFromAny (op=<C at remote 0x7ffff66cf898>, descr=<optimized out>, min_depth=min_depth@entry=0, max_depth=max_depth@entry=0, \r\n    requires=112, context=context@entry=0x0) at numpy/core/src/multiarray/ctors.c:1870\r\n#5  0x00007ffff61c2d25 in _array_fromobject (__NPY_UNUSED_TAGGEDignored=<optimized out>, args=<optimized out>, kws=0x0) at numpy/core/src/multiarray/multiarraymodule.c:1714\r\n#6  0x00007ffff79bcaa9 in PyCFunction_Call () from /usr/lib/libpython3.5m.so.1.0\r\n#7  0x00007ffff7a34a01 in PyEval_EvalFrameEx () from /usr/lib/libpython3.5m.so.1.0\r\n#8  0x00007ffff7a35df2 in ?? () from /usr/lib/libpython3.5m.so.1.0\r\n#9  0x00007ffff7a35ed3 in PyEval_EvalCodeEx () from /usr/lib/libpython3.5m.so.1.0\r\n#10 0x00007ffff7a35efb in PyEval_EvalCode () from /usr/lib/libpython3.5m.so.1.0\r\n#11 0x00007ffff7a55074 in ?? () from /usr/lib/libpython3.5m.so.1.0\r\n#12 0x00007ffff7a57585 in PyRun_FileExFlags () from /usr/lib/libpython3.5m.so.1.0\r\n#13 0x00007ffff7a576f6 in PyRun_SimpleFileExFlags () from /usr/lib/libpython3.5m.so.1.0\r\n#14 0x00007ffff7a6e504 in Py_Main () from /usr/lib/libpython3.5m.so.1.0\r\n#15 0x0000000000400af7 in main ()\r\n```'"
7260,134014313,gerritholl,ahaldane,2016-02-16 15:40:20,2016-02-22 20:14:24,2016-02-22 20:14:24,closed,,,6,11 - Bug;component: numpy.ma,https://api.github.com/repos/numpy/numpy/issues/7260,"b'BUG/TST: Fix #7259, do not ""force scalar"" for already scalar str/bytes'","b'Fix for #7259.  Since commit f8f753b, fill_value was forced scalar by\r\nindexing with [()].  This works for most numpy scalars, but not for U\r\n(str) and S (bytes).  This commit falls back to the pre-f8f753b version\r\nwhen forcing to scalar fails for fill_value of dtypes with kind U and S.\r\nAlso add a test to see that this works in practice.'"
7258,133865096,charris,charris,2016-02-16 02:27:25,2016-02-21 03:56:15,2016-02-21 03:36:02,closed,,,4,09 - Enhancement;11 - Bug;component: numpy.core,https://api.github.com/repos/numpy/numpy/issues/7258,b'ENH: Make numpy floor_divide and remainder agree with Python `//` and `%`.',"b'This fixes the problems with divmod in #7224 and brings divmod for numpy float64 scalars and arrays into agreement with divmod for Python floats. Tests are added to enforce the new behavior and assures that the results for small integers scaled by powers of two are exact. \r\n\r\nToo keep the scalar and array math in sync, both the scalar math and loop code is based on a new `npy_divmod` function in `npy_math`.\r\n\r\nEDIT: I changed the name to `npy_divmod`.\r\n\r\ndivmod example, Python floats\r\n```\r\n    In [1]: a = 78 * 6e-8\r\n\r\n    In [2]: b = 6e-8\r\n\r\n    In [3]: divmod(a, b)\r\n    Out[3]: (77.0, 5.999999999999965e-08)\r\n```\r\nBefore this commit numpy float64 gave\r\n```\r\n    In [4]: divmod(float64(a), float64(b))\r\n    Out[4]: (78.0, 0.0)\r\n```\r\nAfter this commit numpy float64 gives\r\n```\r\n    In [4]: divmod(float64(a), float64(b))\r\n    Out[4]: (77.0, 5.9999999999999651e-08)\r\n```'"
7254,133707369,gfyoung,ahaldane,2016-02-15 13:05:39,2016-02-19 16:43:20,2016-02-17 23:40:46,closed,,,8,02 - Discussion;11 - Bug;component: numpy.random,https://api.github.com/repos/numpy/numpy/issues/7254,b'BUG: Enforce dtype for randint singletons',"b'Addresses issue in #7203 in which specifying the `dtype` for a single integer was not being respected.  This PR makes the `randint` API consistent across all `size` specifications in that only numbers of `numpy` dtypes are returned, which already occurs when you generate arrays using `randint`.'"
7252,133594134,charris,charris,2016-02-14 23:44:43,2016-02-16 16:30:43,2016-02-16 16:30:38,closed,,,0,09 - Enhancement;11 - Bug;component: numpy.core,https://api.github.com/repos/numpy/numpy/issues/7252,b'Forward port a fix and enhancement from 1.11.x',b'- ENH: Add _VisibleDeprecationTestcase to test_deprecations.py\r\n- BUG: Static cache for imported warning needs initialization to NULL.'
7237,133356253,charris,charris,2016-02-12 22:13:26,2016-02-19 18:41:35,2016-02-15 21:21:22,closed,,,17,02 - Discussion;11 - Bug;component: numpy.core,https://api.github.com/repos/numpy/numpy/issues/7237,b'BUG: Make floating remainder ufunc more exact.',"b""The intent here is to make sure the following is true for floating\r\nnumbers x (dividend) and y (divisor) and r = remainder(x, y).\r\n\r\n* If both x and y are small integer floats, r is exact.\r\n* The sign of r is the same as the sign of y, including signed zero.\r\n* The magnitude of r is strictly less than the magnitude of y.\r\n* y ~= r + y*floor(x/y), i.e., r is compatible with floor.\r\n\r\nRemainder functions are also added to npy_math for all supported floats\r\n'efdg'. This helps keep scalar and array results in sync. Explicit loops\r\nare also made for remainder as the speedup over using generic loops is\r\nabout 20%.\r\n\r\nNote that the NumPy version of remainder differs from that in Python, as\r\nthe latter is based around the fmod function rather than floor.\r\n\r\nCloses #7224.\r\n"""
7224,132643121,pitrou,charris,2016-02-10 09:10:56,2016-02-21 03:36:10,2016-02-21 03:36:10,closed,,,18,11 - Bug;component: numpy.core,https://api.github.com/repos/numpy/numpy/issues/7224,b'Inexact result on floating-point remainder',"b""This seems to be a regression in 11.0 or in master (note the values are exactly representable):\r\n```\r\n>>> np.remainder(3, 2.5)\r\n0.49999999999999989\r\n>>> np.__version__\r\n'1.12.0.dev0+58263eb'\r\n```\r\nCompare to:\r\n```\r\n>>> np.remainder(3, 2.5)\r\n0.5\r\n>>> np.__version__\r\n'1.10.4'\r\n```\r\n\r\n"""
7205,131989203,charris,charris,2016-02-07 17:34:21,2016-02-07 19:01:11,2016-02-07 19:01:08,closed,,,0,00 - Backport;11 - Bug;component: numpy.lib,https://api.github.com/repos/numpy/numpy/issues/7205,"b'Backport 7180, BUG: Fixed previous attempt to fix dimension mismatch in nanpercentile'","b'#7180\r\n\r\nnanpercentile was conforming to dimension convention of percentile incorrectly.\r\npercentile outputs results for the different percentiles along the first\r\ndimension of the output. nanpercentile was moving the reduction axis to the\r\nfront using swapaxes, which would move the first axis out of place if there\r\nwere more than two in the array. Added a test with more than two axes to\r\ndemonstrate and used rollaxis instead of swapaxes to do the interhange.'"
7204,131988836,charris,charris,2016-02-07 17:31:38,2016-02-07 19:00:10,2016-02-07 19:00:08,closed,,,0,00 - Backport;11 - Bug;component: numpy.core,https://api.github.com/repos/numpy/numpy/issues/7204,"b'Backport 7201, BUG: raise IOError on not a file in python2'","b'#7201\r\n\r\nThe change in 5225e4c2007 did not account for PyFile_AsFile does not\r\nraise an error on invalid input, add the handling to equalize our\r\nwr5225e4c2007 apper function.\r\ncloses gh-7200'"
7194,131679383,jakirkham,charris,2016-02-05 15:59:34,2016-02-11 07:08:16,2016-02-09 18:46:59,closed,,,58,11 - Bug;component: numpy.ma,https://api.github.com/repos/numpy/numpy/issues/7194,b'BUG: Raise a quieter `MaskedArrayFutureWarning` for mask changes.',"b'Fixes https://github.com/numpy/numpy/issues/7164\r\nRelated: https://github.com/numpy/numpy/pull/7020\r\nRelated: https://github.com/numpy/numpy/pull/5580\r\n\r\n\r\nDrop the `__getitem__` warning. In `__setitem__`, check to see if the masked array is shared. If it is shared, we know it will propagate upstream in the future. Also, use a more specific warning type instead of using `FutureWarning` so that this can be explicitly ignored.'"
7187,131455475,seberg,seberg,2016-02-04 19:47:47,2016-02-28 17:44:09,2016-02-28 17:44:09,closed,,,14,11 - Bug;component: numpy.ma,https://api.github.com/repos/numpy/numpy/issues/7187,b'ENH: Make no unshare mask future warnings less noisy',b'Also fixes a small bug in flat setting (which is utterly broken\r\nin any case though)'
7180,131155828,madphysicist,charris,2016-02-03 21:14:09,2016-02-07 17:29:13,2016-02-05 22:15:40,closed,,,14,11 - Bug;component: numpy.lib,https://api.github.com/repos/numpy/numpy/issues/7180,b'BUG: Fixed previous attempt to fix dimension mismatch in nanpercentile',"b'PR https://github.com/numpy/numpy/pull/5981 did not not correctly fix Issue https://github.com/numpy/numpy/issues/5760. I have added a test to demonstrate this (which now passes).\r\n\r\nBasically, the problem is that `np.swapaxes` only works if you have two dimensions. The correct function to use is `np.rollaxis`.'"
7178,130958517,gfyoung,njsmith,2016-02-03 08:58:24,2016-03-13 23:55:46,2016-03-13 23:30:57,closed,,,30,11 - Bug;component: numpy.core,https://api.github.com/repos/numpy/numpy/issues/7178,b'BUG: Fix binary_repr for negative numbers',"b""Addresses issue in #7168 in which passing in negative numbers with insufficient `width` parameters resulted in completely incorrect two's complement representations (e.g. all zero's) or even an error. Now, it will return the two's complement with width equal to the minimum number of bits needed to represent the complement."""
7175,130865020,rainwoodman,charris,2016-02-03 00:23:59,2016-06-18 01:19:10,2016-06-18 01:17:37,closed,,,9,11 - Bug;component: numpy.core,https://api.github.com/repos/numpy/numpy/issues/7175,b'BUG: Invalid read of size 4 in PyArray_FromFile',"b""When the input dtype has a subarray, the dtype is DECREFed by PyArray_NewFromDescr, \r\nbefore dtype->elsize is accessed. \r\n\r\nIf no one else holds a reference to the dtype object, then the dtype object will be destroyed, \r\nand dtype->elsize shall not be accessed. \r\nThis raises an error in Valgrind, and occasionally crashes innocently looking code.\r\ne.g. ```numpy.fromfile('filename', dtype=('f8', 3'))``` \r\n\r\nA workaround would be\r\n```dtype=numpy.dtype(('f8', 3)); numpy.fromfile('filename', dtype=dtype)```\r\n\r\nThis affects versions as early as 1.9.2 (where I found this bug) and seems to be still relevant today. \r\nI hope someone can prove me wrong.\r\nThis PR is just a demonstration of the idea. I didn't try to compile it.\r\n\r\nValgrind log:\r\n```\r\n==17479== Invalid read of size 4\r\n==17479==    at 0x1CD0BB88: UnknownInlinedFun (stdio2.h:295)\r\n==17479==    by 0x1CD0BB88: array_fromfile_binary (ctors.c:3177)\r\n==17479==    by 0x1CD0BB88: PyArray_FromFile (ctors.c:3304)\r\n==17479==    by 0x1CD886B5: array_fromfile (multiarraymodule.c:2040)\r\n==17479==    by 0x37AB6E2571: do_call (ceval.c:4327)\r\n==17479==    by 0x37AB6E2571: call_function (ceval.c:4135)\r\n==17479==    by 0x37AB6E2571: PyEval_EvalFrameEx (ceval.c:2755)\r\n==17479==    by 0x37AB6E2665: fast_function (ceval.c:4198)\r\n==17479==    by 0x37AB6E2665: call_function (ceval.c:4133)\r\n==17479==    by 0x37AB6E2665: PyEval_EvalFrameEx (ceval.c:2755)\r\n==17479==    by 0x37AB6E2665: fast_function (ceval.c:4198)\r\n==17479==    by 0x37AB6E2665: call_function (ceval.c:4133)\r\n==17479==    by 0x37AB6E2665: PyEval_EvalFrameEx (ceval.c:2755)\r\n==17479==    by 0x37AB664DCB: gen_send_ex.isra.0 (genobject.c:85)\r\n==17479==    by 0x37AB6DE419: PyEval_EvalFrameEx (ceval.c:2586)\r\n==17479==    by 0x37AB664DCB: gen_send_ex.isra.0 (genobject.c:85)\r\n==17479==    by 0x37AB6DE419: PyEval_EvalFrameEx (ceval.c:2586)\r\n==17479==    by 0x37AB6E2665: fast_function (ceval.c:4198)\r\n==17479==    by 0x37AB6E2665: call_function (ceval.c:4133)\r\n==17479==    by 0x37AB6E2665: PyEval_EvalFrameEx (ceval.c:2755)\r\n==17479==    by 0x37AB6E36B3: PyEval_EvalCodeEx (ceval.c:3344)\r\n==17479==    by 0x37AB6E25C5: fast_function (ceval.c:4208)\r\n==17479==    by 0x37AB6E25C5: call_function (ceval.c:4133)\r\n==17479==    by 0x37AB6E25C5: PyEval_EvalFrameEx (ceval.c:2755)\r\n==17479==  Address 0x113bef20 is 32 bytes inside a block of size 88 free'd\r\n==17479==    at 0x4A07D6A: free (in /usr/lib64/valgrind/vgpreload_memcheck-amd64-linux.so)\r\n==17479==    by 0x1CD07C15: _update_descr_and_dimensions (ctors.c:273)\r\n==17479==    by 0x1CD07C15: PyArray_NewFromDescr_int (ctors.c:900)\r\n==17479==    by 0x1CD0BB76: PyArray_NewFromDescr (ctors.c:1121)\r\n==17479==    by 0x1CD0BB76: array_fromfile_binary (ctors.c:3168)\r\n==17479==    by 0x1CD0BB76: PyArray_FromFile (ctors.c:3304)\r\n==17479==    by 0x1CD886B5: array_fromfile (multiarraymodule.c:2040)\r\n==17479==    by 0x37AB6E2571: do_call (ceval.c:4327)\r\n==17479==    by 0x37AB6E2571: call_function (ceval.c:4135)\r\n==17479==    by 0x37AB6E2571: PyEval_EvalFrameEx (ceval.c:2755)\r\n==17479==    by 0x37AB6E2665: fast_function (ceval.c:4198)\r\n==17479==    by 0x37AB6E2665: call_function (ceval.c:4133)\r\n==17479==    by 0x37AB6E2665: PyEval_EvalFrameEx (ceval.c:2755)\r\n==17479==    by 0x37AB6E2665: fast_function (ceval.c:4198)\r\n==17479==    by 0x37AB6E2665: call_function (ceval.c:4133)\r\n==17479==    by 0x37AB6E2665: PyEval_EvalFrameEx (ceval.c:2755)\r\n==17479==    by 0x37AB664DCB: gen_send_ex.isra.0 (genobject.c:85)\r\n==17479==    by 0x37AB6DE419: PyEval_EvalFrameEx (ceval.c:2586)\r\n==17479==    by 0x37AB664DCB: gen_send_ex.isra.0 (genobject.c:85)\r\n==17479==    by 0x37AB6DE419: PyEval_EvalFrameEx (ceval.c:2586)\r\n==17479==    by 0x37AB6E2665: fast_function (ceval.c:4198)\r\n==17479==    by 0x37AB6E2665: call_function (ceval.c:4133)\r\n==17479==    by 0x37AB6E2665: PyEval_EvalFrameEx (ceval.c:2755)\r\n```"""
7166,130529231,charris,charris,2016-02-02 00:33:29,2016-02-19 19:08:55,2016-02-02 01:20:14,closed,,,0,00 - Backport;11 - Bug;component: numpy.lib,https://api.github.com/repos/numpy/numpy/issues/7166,"b""Backport 7129, BUG: Fixed 'midpoint' interpolation of np.percentile in odd cases.""",b'Backport of #7129'
7157,130201383,gfyoung,charris,2016-01-31 22:27:33,2016-01-31 23:29:56,2016-01-31 23:26:31,closed,,,1,00 - Backport;11 - Bug;component: build,https://api.github.com/repos/numpy/numpy/issues/7157,b'BUG: Backport #7119',b'Backport MinGW build fix from #7119.'
7155,130179299,charris,charris,2016-01-31 20:44:05,2016-02-01 02:23:47,2016-01-31 23:23:03,closed,,,1,00 - Backport;11 - Bug;component: numpy.core,https://api.github.com/repos/numpy/numpy/issues/7155,"b'Backport 7147, Temporarily disable __numpy_ufunc__'","b'Given that we accidentally released 1.11b2 with `__numpy_ufunc__` still\r\nenabled, we should probably just disable it in master for now.\r\n\r\nWhen ready to re-enable, grep for NUMPY_UFUNC_DISABLED. Or just revert\r\nthis commit.'"
7154,130179031,charris,charris,2016-01-31 20:42:34,2016-02-25 02:18:52,2016-01-31 23:34:37,closed,,,0,00 - Backport;05 - Testing;11 - Bug;component: numpy.lib,https://api.github.com/repos/numpy/numpy/issues/7154,"b'Backport 7149, TST: Add missing suffix to temppath manager'","b'Without the suffix, np.save creates a new file and the file\r\ndoes not get cleaned up.'"
7153,130178838,charris,charris,2016-01-31 20:41:08,2016-01-31 22:14:18,2016-01-31 22:14:16,closed,,,0,00 - Backport;11 - Bug;component: numpy.lib,https://api.github.com/repos/numpy/numpy/issues/7153,"b'Backport 7152,BUG: mode kwargs passed as unicode to np.pad raises an exception'","b'isinstance(mode, str) is False in python2.7 when mode is of unicode\r\ntype, and mode is then mistakenly assumed to be a callable. See #7112'"
7152,130064027,bertrand-l,charris,2016-01-31 02:13:23,2016-02-01 00:36:09,2016-01-31 19:13:52,closed,,,3,11 - Bug;component: numpy.lib,https://api.github.com/repos/numpy/numpy/issues/7152,b'BUG: mode kwargs passed as unicode to np.pad raises an exception',"b'`isinstance(mode, str)` is False in python2.7 when `mode` is of unicode\r\ntype, and `mode` is then mistakenly assumed to be a callable which\r\nraises an exception. This should close #7112'"
7149,129981074,seberg,charris,2016-01-30 12:22:51,2016-02-01 21:14:05,2016-01-30 22:42:26,closed,,,9,05 - Testing;11 - Bug;component: numpy.lib,https://api.github.com/repos/numpy/numpy/issues/7149,b'TST: Add missing suffix to temppath manager',"b'Without the suffix, np.save creates a new file and the file\r\ndoes not get cleaned up.\r\n\r\n--\r\n\r\nTrivial fix really.'"
7129,129181492,madphysicist,charris,2016-01-27 15:44:43,2016-02-01 21:38:57,2016-02-01 02:59:59,closed,,,10,11 - Bug;component: numpy.lib,https://api.github.com/repos/numpy/numpy/issues/7129,"b""BUG: Fixed 'midpoint' interpolation of np.percentile in odd cases.""","b""`interpolation='midpoint'` must return the same as `interpolation='higher'` and `interpolation='lower'` when the two are the same, not 'lower' + 0.5 as it was doing.\r\n\r\nAnother way of putting it: the 50th percentile of an array with an odd number of elements is the middle of the (sorted) array, no matter what the `interpolation` argument is.\r\n \r\nI updated the test to deal with odd instead of even number of elements in the input array.\r\n\r\nIf this fix gets backported, it should go back as far as 1.0.9, when the `interpolation` keyword was introduced."""
7127,129031052,charris,charris,2016-01-27 04:58:01,2016-02-02 18:04:41,2016-01-27 22:35:39,closed,,,11,11 - Bug;component: build,https://api.github.com/repos/numpy/numpy/issues/7127,"b""Setuptools sdist doesn't include all the files in the extension sources list.""","b'The problem seems to be the inclusion of a mix of `*.c`, `*.h` and `*.c.src` files in `multiarray_src`, the list that only include `*.*.src` files seem to do better.'"
7119,128653455,gfyoung,rgommers,2016-01-25 22:07:33,2016-01-31 20:53:22,2016-01-31 20:51:30,closed,rgommers,1.12.0 release,4,11 - Bug;component: build,https://api.github.com/repos/numpy/numpy/issues/7119,b'BUG: Fixed mingw.lib error',"b'Addresses issue in #647 in which attempts to compile ```numpy``` with MinGW and Fortran result in a missing ```mingw.lib``` error.  Implemented the change proposed in that issue, tested locally on my machine, and all tests pass.'"
7116,128607664,gfyoung,charris,2016-01-25 18:39:56,2016-01-25 21:49:21,2016-01-25 21:32:31,closed,,,3,11 - Bug;component: build,https://api.github.com/repos/numpy/numpy/issues/7116,b'TST: Fixed f2py test for win32 virtualenv',"b'Fixed ```test_scripts.test_f2py``` test so that it can pass correctly on win32 virtualenvs, in which the Python executable and the ```f2py.py``` file are both in the ```Scripts``` directory.'"
7108,128414644,argriffing,charris,2016-01-24 18:10:23,2016-01-24 19:07:57,2016-01-24 19:07:57,closed,,,1,11 - Bug;component: Documentation,https://api.github.com/repos/numpy/numpy/issues/7108,"b'the install readme indicates that Python 2.6 is supported, yet it is untested on CI'",b'https://github.com/numpy/numpy/blob/master/INSTALL.rst.txt\r\nhttps://github.com/numpy/numpy/blob/master/.travis.yml\r\n\r\nShould one of those be changed?'
7095,128084268,charris,charris,2016-01-22 05:02:34,2016-01-22 14:44:16,2016-01-22 14:24:04,closed,,,0,00 - Backport;11 - Bug;component: build,https://api.github.com/repos/numpy/numpy/issues/7095,"b'Backport #7092, BLD: fix compilation on non glibc-Linuxes'",b'Non-glibc Linuxes dont have the __GLIBC_PREREQ function and compilation of numpy\r\nfails on such platforms.'
7092,128028176,xdmiodz,charris,2016-01-21 21:52:27,2016-01-23 21:31:12,2016-01-22 04:57:44,closed,,,4,11 - Bug;component: build,https://api.github.com/repos/numpy/numpy/issues/7092,b'BLD: fix compilation on non glibc-Linuxes',b'Non-glibc Linuxes dont have the __GLIBC_PREREQ function and compilation of numpy\r\nfails on such platforms.'
7091,128019587,charris,charris,2016-01-21 21:07:16,2016-01-21 23:05:21,2016-01-21 22:55:28,closed,,,3,11 - Bug;component: build,https://api.github.com/repos/numpy/numpy/issues/7091,"b'Revert ""BLD: fix compilation on non glibc-Linuxes""'",b'Reverts numpy/numpy#7087'
7089,128007244,charris,charris,2016-01-21 19:59:43,2016-01-21 21:15:42,2016-01-21 21:06:18,closed,,,1,00 - Backport;11 - Bug;component: build,https://api.github.com/repos/numpy/numpy/issues/7089,"b'Backport #7087, BLD: fix compilation on non glibc-Linuxes'",b'Non-glibc Linuxes dont have the __GLIBC_PREREQ function and compilation of numpy\r\nfails on such platforms. To avoid this the TRIG_OK check should be done only in\r\nthe glibc environment\r\n\r\nThe patch is taken from AlpineLinux repository\r\nhttp://git.alpinelinux.org/cgit/aports/tree/testing/py-numpy/numpy-1.10.0-musl.patch?id=2e5c4bfcf1c9746edd58a8e684d01403f234e71d'
7088,127989518,jakirkham,charris,2016-01-21 18:28:23,2016-04-27 13:01:11,2016-01-23 01:28:35,closed,,,24,11 - Bug;component: numpy.linalg,https://api.github.com/repos/numpy/numpy/issues/7088,b'BUG: Have `norm` cast non-floating point arrays to 64-bit float arrays',b'Fixes https://github.com/numpy/numpy/issues/5626\r\n\r\nSimply ensures that non-floating type arrays passed to `norm` get cast to some form of float.'
7078,127787110,bstdenis,charris,2016-01-20 21:24:49,2016-01-21 17:19:33,2016-01-21 17:19:33,closed,,,8,11 - Bug;component: Other,https://api.github.com/repos/numpy/numpy/issues/7078,b'np.polyfit memory leak',"b'Running the following code, I end up with ~6 GB of memory used. It scales linearly with the chosen value of n.\r\n\r\n```\r\nimport numpy as np\r\nn = 3000\r\nxs=range(55115)\r\nfor m in range(n):\r\n    ys = np.random.random([55115])\r\n    c = np.polyfit(xs,ys,4)\r\n```\r\n\r\n\r\nThis is what it looks like with ""top"":\r\n\r\nPID USER      PR  NI    VIRT    RES    SHR S  %CPU %MEM     TIME+ COMMAND     \r\n69385 stdenis   20   0 6881224 6.186g   6728 S   0.0  4.9   0:58.56 python\r\n\r\nReproduced with the following versions:\r\nPython 2.7.11, numpy 1.10.2 on CentOS Linux release 7.2.1511\r\nPython 3.4.4, numpy 1.10.4 on CentOS Linux release 7.2.1511\r\n\r\nI was not able to reproduce on other machines with\r\nPython 2.7.6, numpy 1.9.1 on Linux\r\nPython 2.7.3, numpy 1.6.2 on Linux'"
7061,127523455,madphysicist,madphysicist,2016-01-19 19:49:20,2016-01-21 03:53:12,2016-01-20 16:42:19,closed,,,12,11 - Bug;component: numpy.core,https://api.github.com/repos/numpy/numpy/issues/7061,b'Fixed identity for bitwise_and',b'One makes the reduce() function useless for numbers other than zero or one.'
7060,127512451,madphysicist,seberg,2016-01-19 18:49:43,2016-03-05 13:14:35,2016-03-05 13:14:35,closed,,,13,11 - Bug;component: numpy.core;Easy Fix,https://api.github.com/repos/numpy/numpy/issues/7060,b'Value of bitwise_and.identity does not make sense',b'The value of `bitwise_and.identity` is `1`. This makes `bitwise_and.reduce()` basically useless for numbers other than zeros and ones. The value can not be changed or a different one passed in to `reduce()`. The correct value is `-1` or `0xFFF...` or something similar that will not change the bits of the initial value of the thing being reduced. A related question on StackOverflow can be found here: http://stackoverflow.com/questions/21050875/numpy-bitwise-and-reduce-behaving-unexpectedly.'
7055,127306627,gfyoung,jaimefrio,2016-01-18 20:38:57,2016-01-25 22:34:06,2016-01-25 00:18:14,closed,,,14,11 - Bug;component: numpy.random,https://api.github.com/repos/numpy/numpy/issues/7055,b'BUG: One Element Array Inputs Return Scalars in np.random',"b'Fixes issue raised in #4263 in which ```np.random``` methods returned scalars when passed one-element array inputs. This is because one-element ndarrays can be cast to integers / floats, which is what functions like ```PyFloat_AsDouble``` do before converting to the intended data type.\r\n\r\nThis commit changes the check used to determine whether the inputs are purely scalar by, as suggested by @rkern, converting all inputs to arrays and checking if the resulting shape is an empty tuple (scalar) or not (array).'"
7053,127298590,tushar-rishav,charris,2016-01-18 19:52:08,2016-01-19 17:59:21,2016-01-19 16:35:26,closed,,,1,11 - Bug;component: numpy.fft,https://api.github.com/repos/numpy/numpy/issues/7053,b'BUG: Should fix astype cast bug in numpy.fft module',b'Closes #6693 '
7031,127037881,charris,charris,2016-01-16 17:08:38,2016-01-16 22:34:00,2016-01-16 22:33:53,closed,,,0,11 - Bug;component: numpy.core,https://api.github.com/repos/numpy/numpy/issues/7031,"b'Cleanup 6699, BUG: fix issues with signed zeros in scalar math complex division.'",b'Squash commits in #6699.\r\n\r\nThe current algorithm used in scalar math complex division appears to\r\nincorrectly handle signed zeros. This patch duplicates the algorithm\r\nused for complex division in the loops.c.src file into the\r\nscalarmath.c.src file so the algorithms are consistent regardless of\r\ncontext. Unit tests are added in the scalar context for testing the\r\ncorrectness of sign when zeros are encountered and also to trip the new\r\nbranches in the now consistent algorithm.'
7028,127015952,sam09,charris,2016-01-16 10:42:48,2016-01-17 02:15:14,2016-01-16 16:47:30,closed,,,2,11 - Bug;component: numpy.core,https://api.github.com/repos/numpy/numpy/issues/7028,b'Fix issue #7021',b'Fixes issue in ``numpy.busday_offset``. ``NaT`` values in array give ``NaT`` when ``roll`` is set to any value except ``raise``'
7022,126932226,charris,charris,2016-01-15 18:45:23,2016-01-16 22:32:57,2016-01-16 22:32:54,closed,,,0,11 - Bug;component: numpy.core,https://api.github.com/repos/numpy/numpy/issues/7022,b'BUG: Fix divmod',"b'Fix the remainder function so that it is consistent with floor_division.\r\n\r\nInstead of using the C `%` operator, this PR computes `remainder(a, b)` as\r\n```\r\nb * (a/b - floor(a/b)),\r\n```\r\nwhich is consistent with implementing `floor_division(a, b)` as `floor(a/b)` and numerically better behaved than the implementation\r\n```\r\na - b*floor(a/b).\r\n```\r\n\r\nCloses #6127.'"
7021,126923548,will133,charris,2016-01-15 17:54:53,2016-01-16 16:49:47,2016-01-16 16:49:35,closed,,,5,11 - Bug;component: numpy.core,https://api.github.com/repos/numpy/numpy/issues/7021,b'Inconsistent behavior for handling NaT in busday_offset',"b'It seems like NaT is handled in a wrong way with busday_offset.  Here is an example running on numpy version 1.10.1:\r\n\r\n```\r\nIn [1]: import numpy\r\n\r\nIn [2]: x = numpy.array([None, None], ""M8[D]"")\r\n\r\nIn [3]: x\r\narray([\'NaT\', \'NaT\'], dtype=\'datetime64[D]\')\r\n\r\nIn [4]: numpy.busday_offset(x, 1, roll=\'nat\')\r\narray([\'1970-01-01\', \'1970-01-01\'], dtype=\'datetime64[D]\')\r\n\r\nIn [5]: numpy.busday_offset(x, 1, roll=\'following\')\r\narray([\'1970-01-01\', \'1970-01-01\'], dtype=\'datetime64[D]\')\r\n```\r\n\r\nIt seems to treat the NaT as a valid int64 and roll with it forward.  I would expect that the returned values would always be NaT if roll is not \'raise\'.  If you start of a NaT date, IMHO it should be treated like a nan and should produce nan as a result when you add anything to it.'"
7019,126916568,shoyer,charris,2016-01-15 17:19:48,2016-01-21 16:42:18,2016-01-21 16:42:18,closed,,,20,11 - Bug;component: numpy.core,https://api.github.com/repos/numpy/numpy/issues/7019,b'NaT comparison change breaks pandas test suite',"b""xref https://github.com/pydata/pandas/issues/12049\r\n\r\nThe source issue is changing NaT comparison (https://github.com/numpy/numpy/pull/7001)\r\n\r\nI'll take a look and see if this is user facing or just in the test suite. If it does effect users, we may need to do a deprecation cycle instead.\r\n"""
7016,126807655,andyfaff,charris,2016-01-15 04:52:12,2016-01-15 20:38:13,2016-01-15 20:38:01,closed,,,1,05 - Testing;11 - Bug;component: numpy.testing,https://api.github.com/repos/numpy/numpy/issues/7016,b'MAINT: ensure isclose returns scalar when called with two scalars closes #7014',"b'The documentation for np.isclose says:\r\n\r\n> Returns a boolean array of where a and b are equal within the given tolerance. If both a and b are scalars, returns a single boolean value.\r\n\r\nThis is true for comparing two finite scalars, a single boolean value is returned:\r\n\r\n    >>> np.isclose(0, 1)\r\n    False\r\n\r\nHowever, a boolean array is returned when one or more of the scalars is non-finite:\r\n\r\n    >>> np.isclose(0, np.inf)\r\n    array([False], dtype=bool)\r\n\r\nI would expect (from the documentation) the above to return a single boolean value, not an array. I note that both values in the last example are scalars:\r\n\r\n    >>> np.isscalar(0)\r\n    True\r\n    >>> np.isscalar(np.inf)\r\n    True'"
7003,126416447,gfyoung,jaimefrio,2016-01-13 13:19:43,2016-03-15 15:48:01,2016-03-15 15:42:48,closed,,,18,11 - Bug;component: numpy.core,https://api.github.com/repos/numpy/numpy/issues/7003,b'BUG: Fix string copying for np.place',"b""Addresses issue in #6974 with regards to string copying in ```np.place``` in which replacements strings that were smaller than their replaced elements would only partially replace the element instead of the entire element.\r\n\r\nPrevious behavior:\r\n```\r\n>>> import numpy as np\r\n>>> arr = np.array(['12', '34'])\r\n>>> np.place(arr, np.array([False, True]), '9')\r\n>>> print arr\r\n['12', '94']\r\n```\r\n\r\nNew behavior:\r\n```\r\n>>> import numpy as np\r\n>>> arr = np.array(['12', '34'])\r\n>>> np.place(arr, np.array([False, True]), '9')\r\n>>> print arr\r\n['12', '9']\r\n```"""
7000,126301851,gfyoung,shoyer,2016-01-12 23:19:38,2016-01-15 22:35:13,2016-01-15 21:25:43,closed,,,18,11 - Bug;component: Documentation;component: numpy.core,https://api.github.com/repos/numpy/numpy/issues/7000,"b'DOC, MAINT: Enforce np.ndarray arg for np.put and np.place'","b'```np.put``` and ```np.place``` do something only when the first argument is an instance of ```np.ndarray```. These changes will cause a ```TypeError``` to be thrown in either function should that requirement not be satisfied, which would be more useful to see when debugging.'"
6976,125708655,ewmoore,charris,2016-01-08 22:35:14,2016-01-09 03:25:15,2016-01-08 23:23:44,closed,,,7,11 - Bug;component: npy_math,https://api.github.com/repos/numpy/numpy/issues/6976,b'BUG: npy_acosh fallback too simple.',b'Fixes gh-6712.\r\n\r\nComparing the old implementation against mpmath with 1000 digits:\r\n![figure_1](https://cloud.githubusercontent.com/assets/2314641/12211330/1cf28072-b62e-11e5-8a7a-ea51e229563d.png)\r\nand the new implementation:\r\n![figure_2](https://cloud.githubusercontent.com/assets/2314641/12211336/255a5fbe-b62e-11e5-9913-33f19d742bd0.png)\r\n'
6975,125685221,charris,charris,2016-01-08 20:15:23,2016-05-22 02:00:05,2016-01-12 17:41:34,closed,,,2,11 - Bug;component: npy_math,https://api.github.com/repos/numpy/numpy/issues/6975,b'BUG: Add more complex trig functions to glibc < 2.16 blacklist.',b'Added functions are\r\n\r\n- cacos\r\n- cacosf\r\n- cacosl\r\n- cacosh\r\n- cacoshf\r\n- cacoshl\r\n\r\nCloses #6063.'
6945,125077702,charris,charris,2016-01-05 23:38:37,2016-01-06 00:15:42,2016-01-06 00:15:37,closed,,,0,00 - Backport;11 - Bug;component: numpy.core,https://api.github.com/repos/numpy/numpy/issues/6945,b'Backport 6942',b'#6942 \r\n\r\nBUG: Fix copy/paste error treating modifiedpreceding as modifiedfollowing'
6944,125076004,charris,charris,2016-01-05 23:24:48,2016-01-05 23:25:53,2016-01-05 23:25:51,closed,,,0,00 - Backport;11 - Bug;component: build;component: Documentation,https://api.github.com/repos/numpy/numpy/issues/6944,"b'DOC,BUG: Fix some latex generation problems.'","b'Some of the documentation for newbyteorder, copy and pasted in several\r\nspots, had paragraphs ending in `::`, initiating a sphinx generated\r\nVerbatim environment and resulting in ""LaTeX Error: Too deeply nested"".\r\n\r\nThe user_array.container class needed non-empty class documentation.\r\nThat that caused a problem is probably a numpydoc bug, but it is easy to\r\nfix.\r\n\r\n[skip ci]'"
6943,125071167,charris,charris,2016-01-05 22:59:26,2016-01-05 23:52:10,2016-01-05 23:19:15,closed,,,0,11 - Bug;component: distribution;component: Documentation,https://api.github.com/repos/numpy/numpy/issues/6943,"b'DOC,BUG: Fix some latex generation problems.'","b'Some of the documentation for newbyteorder, copy and pasted in several\r\nspots, had paragraphs ending in `::`, initiating a sphinx generated\r\nVerbatim environment and resulting in ""LaTeX Error: Too deeply nested"".\r\n\r\nThe user_array.container class needed non-empty class documentation.\r\nThat that caused a problem is probably a numpydoc bug, but it is easy to\r\nfix.\r\n\r\n[skip ci]'"
6942,125066129,mwiebe,charris,2016-01-05 22:28:05,2016-01-05 23:52:33,2016-01-05 23:28:28,closed,,,1,11 - Bug;component: numpy.core,https://api.github.com/repos/numpy/numpy/issues/6942,"b""Fix datetime roll='modifiedpreceding' bug""",b'This fixes #6937.'
6937,124868459,mghiggins,charris,2016-01-05 00:20:40,2016-01-05 23:28:28,2016-01-05 23:28:28,closed,,,2,11 - Bug;component: numpy.core,https://api.github.com/repos/numpy/numpy/issues/6937,b'busday_offset does the wrong thing with modifiedpreceding roll',"b""numpy v1.9.3: seems like there's a bug in busday_offset using modifiedpreceding roll - the date rolls forward instead of backward. To reproduce:\r\n\r\ncal = numpy.busdaycalendar('1111100', [datetime.date(2016,1,1)]) # create a trivial calendar\r\nprint(numpy.busday_offset(datetime.date(2015,12,7), 0, roll='modifiedpreceding', busdaycal=cal)) # should give 4Dec2015 but gives 7Dec2015\r\n\r\n"""
6925,124617342,charris,charris,2016-01-02 23:31:33,2016-01-03 00:08:57,2016-01-03 00:03:14,closed,,,0,00 - Backport;11 - Bug;component: numpy.core,https://api.github.com/repos/numpy/numpy/issues/6925,b'Backport 6924',b'BUG: #6922:  Fix segfault introduced in 23901aa.\r\n    \r\nFix troublesome parts of gh-5929. Copyswap cannot be relied upon for void types containing objects.\r\n'
6924,124611824,charris,seberg,2016-01-02 21:18:50,2016-01-03 01:37:07,2016-01-02 23:19:33,closed,,,17,11 - Bug;component: numpy.core,https://api.github.com/repos/numpy/numpy/issues/6924,b'Fix segfault gh 6922',"b""Revert 23901aa and add regression test for reported segfault.\r\n\r\nThis is the easy fix for #6922. The style cleanup went just a bit too far and it isn't obvious to me where the problem lies."""
6919,124561086,charris,charris,2016-01-01 20:59:09,2016-01-01 21:54:14,2016-01-01 21:06:03,closed,,,2,11 - Bug;component: build;component: numpy.random,https://api.github.com/repos/numpy/numpy/issues/6919,b'Visual Studio 2015 breaks numpy (among other timeb.h users)',"b""Apparently the AppVeyor folks have upgraded, we now see\r\n\r\n```\r\n    C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.10586.0\\ucrt\\sys/timeb.h(25): error C2032: '__timezone': function cannot be member of struct '__timeb32'\r\n    C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.10586.0\\ucrt\\sys/timeb.h(33): error C2032: '__timezone': function cannot be member of struct '__timeb64'\r\n    C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.10586.0\\ucrt\\sys/timeb.h(42): error C2032: '__timezone': function cannot be member of struct 'timeb'\r\n ```\r\nOther people have run into this. We may want to look into the time based seeding of mtrand on windows."""
6912,124423527,gfyoung,charris,2015-12-31 02:09:22,2016-01-15 01:59:37,2016-01-15 01:57:55,closed,,,5,11 - Bug;component: numpy.ma,https://api.github.com/repos/numpy/numpy/issues/6912,b'BUG: Enforce Order Param for MaskedArray Construction',"b'Addresses the issue in #6646 in which the ```order``` parameter was not being enforced.  This PR adds the ```order``` parameter to the ```__new__``` override in ```MaskedArray``` construction, enabling it to be enforced in methods like ```np.ma.core.array``` and ```np.ma.core.asarray```.'"
6906,124363328,kohr-h,rgommers,2015-12-30 15:43:23,2015-12-31 23:16:20,2015-12-31 23:16:20,closed,,,2,11 - Bug;component: Documentation,https://api.github.com/repos/numpy/numpy/issues/6906,"b""Dead link in 'Building from source' doc""","b'Under the [Basic installation](https://docs.scipy.org/doc/numpy-dev/user/building.html#basic-installation) section, there is a literal\r\n```\r\n:ref:`development-environment`\r\n```\r\nunder `NOTE` just before the next subsection. '"
6898,124284040,kohr-h,charris,2015-12-29 23:49:40,2016-01-05 16:29:02,2016-01-05 16:29:02,closed,,,1,11 - Bug;component: numpy.core,https://api.github.com/repos/numpy/numpy/issues/6898,b'Error message in numpy.broadcast is wrong',"b""The error message regarding the maximum number of arguments is wrong in `broadcast`:\r\n```python\r\n>>> x = np.arange(3)\r\n>>> args = [x] * 32\r\n>>> np.broadcast(*args).shape\r\n(3,)\r\n>>> args = [x] * 33\r\n>>> np.broadcast(*args).shape\r\nTraceback (most recent call last):\r\n...\r\nValueError: Need at least two and fewer than (32) array objects.\r\n```\r\nThe point is that 32 still works, while it shouldn't according to the error message. Correct would be to require *at most* 32 array objects. Not sure why 32 is in brackets."""
6893,124142308,charris,rgommers,2015-12-28 23:49:08,2015-12-29 17:23:35,2015-12-29 09:26:27,closed,,,2,05 - Testing;11 - Bug,https://api.github.com/repos/numpy/numpy/issues/6893,b'TST: Only use 32 bit Python 2.7 to test numpy on appveyor.',"b'This avoids a test error on appveyor that might be fixed if Visual C++\r\nCompiler for Python 2.7 is used. Numpy itself builds and runs on\r\nappveyor with both 32 and 64 bit python 2.7, so this is only a test\r\nissue. Another option might be to disable the test, but it may be useful\r\nto some on other platforms.\r\n\r\nCloses #6882.'"
6882,123712099,charris,rgommers,2015-12-23 19:30:48,2016-01-27 00:08:34,2015-12-29 09:26:27,closed,,,8,11 - Bug;component: numpy.distutils,https://api.github.com/repos/numpy/numpy/issues/6882,"b'Appveyor, Windows ERROR: test_compile1 (test_system_info.TestSystemInfoReading)'","b'@insertinterestingnamehere Any chance you have seen this on conda in tests before?\r\n\r\n```\r\n======================================================================\r\nERROR: test_compile1 (test_system_info.TestSystemInfoReading)\r\n----------------------------------------------------------------------\r\nTraceback (most recent call last):\r\n  File ""C:\\Py\\lib\\site-packages\\numpy\\distutils\\tests\\test_system_info.py"", line 181, in test_compile1\r\n    c.compile([os.path.basename(self._src1)], output_dir=self._dir1)\r\n  File ""C:\\Py\\lib\\distutils\\msvc9compiler.py"", line 473, in compile\r\n    self.initialize()\r\n  File ""C:\\Py\\lib\\site-packages\\numpy\\distutils\\msvccompiler.py"", line 17, in initialize\r\n    distutils.msvccompiler.MSVCCompiler.initialize(self, plat_name)\r\n  File ""C:\\Py\\lib\\distutils\\msvc9compiler.py"", line 383, in initialize\r\n    vc_env = query_vcvarsall(VERSION, plat_spec)\r\n  File ""C:\\Py\\lib\\distutils\\msvc9compiler.py"", line 299, in query_vcvarsall\r\n    raise ValueError(str(list(result.keys())))\r\nValueError: [u\'path\']\r\n```'"
6881,123709345,charris,charris,2015-12-23 19:06:52,2015-12-30 21:46:41,2015-12-30 21:46:41,closed,,,5,05 - Testing;11 - Bug;component: numpy.core,https://api.github.com/repos/numpy/numpy/issues/6881,b'ERROR: test_mem_overlap.test_diophantine_fuzz',"b'Error on windows. @pv Probably need to disable test on windows  until randint gets fixed for bigger integers (#6824).\r\n```\r\n======================================================================\r\nERROR: test_mem_overlap.test_diophantine_fuzz\r\n----------------------------------------------------------------------\r\nTraceback (most recent call last):\r\n  File ""C:\\Py\\lib\\site-packages\\nose\\case.py"", line 197, in runTest\r\n    self.test(*self.arg)\r\n  File ""C:\\Py\\lib\\site-packages\\numpy\\core\\tests\\test_mem_overlap.py"", line 123, in test_diophantine_fuzz\r\n    b = rng.randint(-1, b_ub+2)\r\n  File ""mtrand.pyx"", line 951, in mtrand.RandomState.randint (numpy\\random\\mtrand\\mtrand.c:10704)\r\nOverflowError: Python int too large to convert to C long\r\n\r\n```'"
6880,123704556,charris,njsmith,2015-12-23 18:30:34,2015-12-29 17:24:50,2015-12-24 07:02:53,closed,,,1,05 - Testing;11 - Bug;component: numpy.core,https://api.github.com/repos/numpy/numpy/issues/6880,b'BUG: Fix tempfile failures on window.',b'Temporary files on windows cannot be held open by two files at\r\nonce.'
6864,123102312,HWiese1980,charris,2015-12-19 18:22:29,2015-12-20 16:39:45,2015-12-20 14:51:47,closed,,,11,11 - Bug;component: build,https://api.github.com/repos/numpy/numpy/issues/6864,b'Workaround for compiling in Windows',"b""Workaround for compiling `numpy` on a Windows machine; regards and *fixes* following error message appearing when running `python setup.py install`:\r\n\r\n> AttributeError: Mingw32CCompoler instance has no attribute 'compile_options'"""
6863,123071355,fijal,jaimefrio,2015-12-19 08:25:22,2015-12-20 06:35:50,2015-12-20 06:35:50,closed,,,2,11 - Bug;component: Documentation;Easy Fix,https://api.github.com/repos/numpy/numpy/issues/6863,b'Multiple examples in docstrings contain print as a statement and not a function',"b'Files like arrayprint.py contain examples with print being used as a statement, even though they also contain from __future__ import print_function'"
6852,122830576,charris,charris,2015-12-17 21:52:31,2015-12-17 22:27:09,2015-12-17 22:27:07,closed,,,0,09 - Enhancement;11 - Bug;component: numpy.f2py,https://api.github.com/repos/numpy/numpy/issues/6852,"b'Fixup #6696, updates to f2py.compile '",b'Fixup of #6696.\r\n\r\n* Verbose parameter was ignored earlier.\r\n* Allowed .f90 extensions for tempfiles\r\n\r\n'
6850,122782610,charris,charris,2015-12-17 17:25:24,2015-12-17 18:17:38,2015-12-17 18:17:36,closed,,,0,00 - Backport;11 - Bug;component: Other,https://api.github.com/repos/numpy/numpy/issues/6850,b'Backport 6843',b'BUG: Fix use of python 3 only FileNotFoundError in test_f2py.\r\n\r\nAlso rewrite error messages so that they read more like warnings\r\nthan errors.'
6843,122632589,charris,charris,2015-12-17 00:05:56,2015-12-17 15:10:16,2015-12-17 15:10:13,closed,,,1,11 - Bug;component: Other,https://api.github.com/repos/numpy/numpy/issues/6843,b'BUG: Fix use of python 3 only FileNotFoundError in test_f2py.',b'Also rewrite error messages so that they read more like warnings\r\nthan errors.'
6840,122572956,charris,charris,2015-12-16 18:31:22,2015-12-16 18:48:22,2015-12-16 18:48:16,closed,,,0,05 - Testing;11 - Bug,https://api.github.com/repos/numpy/numpy/issues/6840,b'TST: Update travis testing script in 1.10.x',b'* Fixes for travis ci move to GCE.\r\n* Change i386 test to use Python 2.7'
6837,122327286,charris,charris,2015-12-15 17:45:52,2015-12-16 19:00:48,2015-12-16 18:54:13,closed,,,4,05 - Testing;11 - Bug;priority: high,https://api.github.com/repos/numpy/numpy/issues/6837,b'Fix travis ci 32 bit testing failures.',"b'Travis ci is migrating to GCI and the 32 bit tests broke in the process. This cleans up the tools/travis-test script, fixes it for current travis, and changes the 32 bit test to use python 2.7 in order to turn up errors involving python long integers.'"
6822,121802272,charris,charris,2015-12-11 22:12:39,2015-12-11 23:58:52,2015-12-11 23:58:50,closed,,,0,00 - Backport;05 - Testing;11 - Bug;component: numpy.ma,https://api.github.com/repos/numpy/numpy/issues/6822,b'Backport 6819',b'TST: Fix test_mvoid_multidim_print failures on Python 2.x for Windows'
6819,121794996,cgohlke,charris,2015-12-11 21:29:03,2015-12-12 15:58:57,2015-12-11 22:03:44,closed,,,1,05 - Testing;11 - Bug;component: numpy.ma,https://api.github.com/repos/numpy/numpy/issues/6819,b'TST: Fix test_mvoid_multidim_print failures on Python 2.x for Windows',"b'Fixes\r\n```\r\n======================================================================\r\nFAIL: test_mvoid_multidim_print (test_core.TestMaskedArray)\r\n----------------------------------------------------------------------\r\nTraceback (most recent call last):\r\n  File ""X:\\Python27\\lib\\site-packages\\numpy\\ma\\tests\\test_core.py"", line 724, in test_mvoid_multidim_print\r\n    assert str(t_2d[0]) == ""([[1, --], [--, 4]],)""\r\nAssertionError\r\n```\r\nSee #6807 and #6813'"
6815,121762296,charris,charris,2015-12-11 18:10:23,2015-12-11 18:53:08,2015-12-11 18:53:06,closed,,,0,00 - Backport;05 - Testing;11 - Bug,https://api.github.com/repos/numpy/numpy/issues/6815,b'Backport 6813',"b'TST,BUG: Make test_mvoid_multidim_print work for 32 bit systems.\r\n\r\nThe test currently uses an `<i8` type which is converted to a Python\r\nlong integer when running on a 32 bit system with Python 2. That changes\r\nthe string printed by appending `L` to the printed integer value and\r\nresults in a failed test.'"
6814,121761901,charris,charris,2015-12-11 18:07:38,2015-12-11 18:08:34,2015-12-11 18:08:27,closed,,,0,00 - Backport;05 - Testing;11 - Bug,https://api.github.com/repos/numpy/numpy/issues/6814,b'Backport 6819',"b'TST,BUG: Make test_mvoid_multidim_print work for 32 bit systems.\r\n\r\nThe test currently uses an `<i8` type which is converted to a Python\r\nlong integer when running on a 32 bit system with Python 2. That changes\r\nthe string printed by appending `L` to the printed integer value and\r\nresults in a failed test.'"
6813,121750274,charris,njsmith,2015-12-11 16:59:41,2015-12-12 16:00:00,2015-12-11 17:46:36,closed,,,2,05 - Testing;11 - Bug,https://api.github.com/repos/numpy/numpy/issues/6813,"b'TST,BUG: Make test_mvoid_multidim_print work for 32 bit systems.'",b'The test currently uses an `<i8` type which is converted to a Python\r\nlong integer when running on a 32 bit system with Python 2. That changes\r\nthe string printed by appending `L` to the printed integer value and\r\nresults in a failed test.\r\n\r\nThis should fix the first test failure reported by Christoph in #6807.'
6807,121618340,charris,charris,2015-12-11 01:54:13,2015-12-12 16:09:37,2015-12-12 16:09:37,closed,,,18,05 - Testing;11 - Bug;component: numpy.ma;component: numpy.random,https://api.github.com/repos/numpy/numpy/issues/6807,b'Windows testing errors for 1.10.2',"b'Christoph reports on 1.10.x\r\n\r\nOn Python 2.x, 32 and 64 bit:\r\n```\r\n==================================================\r\nFAIL: test_mvoid_multidim_print (test_core.TestMaskedArray)\r\n----------------------------------------------------------------------\r\nTraceback (most recent call last):\r\n  File ""X:\\Python27-x64\\lib\\site-packages\\numpy\\ma\\tests\\test_core.py"", line 716, in test_mvoid_multidim_print\r\n    assert str(t_ma[0]) == ""([1, --, 3],)""\r\nAssertionError\r\n```\r\nOn Python 2.x, 32 bit:\r\n```\r\n===================================================\r\nFAIL: test_umath.test_rint_big_int\r\n----------------------------------------------------------------------\r\nTraceback (most recent call last):\r\n  File ""X:\\Python27\\lib\\site-packages\\nose\\case.py"", line 197, in runTest\r\n    self.test(*self.arg)\r\n  File ""X:\\Python27\\lib\\site-packages\\numpy\\core\\tests\\test_umath.py"", line 1939, in test_rint_big_int\r\n    assert_equal(val, np.rint(val))\r\n  File ""X:\\Python27\\lib\\site-packages\\numpy\\testing\\utils.py"", line 355, in assert_equal\r\n    raise AssertionError(msg)\r\nAssertionError:\r\nItems are not equal:\r\n ACTUAL: 4607998452777363968L\r\n DESIRED: 4.6079984527773635e+18\r\n```\r\nThe second looks like a promotion of `long` to `float`, not sure about the first. Can someone running windows track these down? I don\'t think they are serious, but it would be good to know where they come from.\r\n\r\nNote that in the first test `assert_` is not used.'"
6805,121352656,jaimefrio,seberg,2015-12-09 22:14:16,2016-03-22 09:48:34,2016-03-22 09:48:34,closed,,,3,11 - Bug;component: numpy.core,https://api.github.com/repos/numpy/numpy/issues/6805,b'Reference leak in np.bincount with weights attribute',"b""This code should illustrate what's going on\r\n\r\n```\r\nimport sys\r\nimport numpy as np\r\n\r\nintp_refcount = sys.getrefcount(np.dtype(np.intp))\r\ndouble_refcount = sys.getrefcount(np.dtype(np.double))\r\n\r\nfor j in range(1000):\r\n    np.bincount([1, 2, 3])\r\n\r\nassert intp_refcount == sys.getrefcount(np.dtype(np.intp))\r\nassert double_refcount == sys.getrefcount(np.dtype(np.double))\r\n\r\nfor j in range(1000):\r\n    np.bincount([1, 2, 3], [4, 5, 6])\r\n\r\nassert intp_refcount == sys.getrefcount(np.dtype(np.intp))  # this fails\r\nassert double_refcount == sys.getrefcount(np.dtype(np.double))\r\n```"""
6804,121323943,quakberto,charris,2015-12-09 19:47:35,2015-12-11 09:57:35,2015-12-10 18:59:20,closed,,,12,11 - Bug;component: numpy.lib,https://api.github.com/repos/numpy/numpy/issues/6804,b'Segmentation Fault for large array as input to bincount()',"b'The following code produces a segmentation fault in my configuration:\r\n```python\r\nnp.bincount(np.ones(np.power(2,32),dtype=(np.uint16)))\r\n```\r\n\r\nplatform : linux-64\r\nnumpy version: 1.93'"
6783,120659234,charris,charris,2015-12-06 20:59:35,2015-12-06 21:17:55,2015-12-06 21:17:52,closed,,,1,05 - Testing;11 - Bug,https://api.github.com/repos/numpy/numpy/issues/6783,b'BUG: Fix travis ci testing for new google infrastructure.',"b'Travis ci has updated their default infrastructure and this breaks\r\nthe heritage infrastructure that 1.10 testing relied on. The fix\r\nhere is to copy the testing from the master branch and modify it\r\nto run for 1.10. In particular, bento and single file compilation\r\ntesting needed to be added back in and the relaxed stride default\r\ndisabled.\r\n\r\nCloses #6781.'"
6781,120656266,charris,charris,2015-12-06 20:08:09,2015-12-07 21:57:36,2015-12-07 21:57:35,closed,,,1,05 - Testing;11 - Bug,https://api.github.com/repos/numpy/numpy/issues/6781,b'The travis-ci script in maintenance/1.10.x needs fixing.',b'The recent travis move to google infrastruction breaks testing for maintenance/1.10.x. The test script in master seems to work fine.'
6774,120595255,pv,charris,2015-12-05 23:24:02,2015-12-06 00:53:57,2015-12-06 00:53:32,closed,,,1,11 - Bug;component: benchmarks,https://api.github.com/repos/numpy/numpy/issues/6774,b'BENCH: allow benchmark suite to run on Python 3',b'Fix up Py2-isms in the benchmark suite.\r\ncf gh-6773'
6772,120583738,charris,charris,2015-12-05 20:00:48,2015-12-05 21:31:17,2015-12-05 21:31:16,closed,,,0,00 - Backport;05 - Testing;11 - Bug,https://api.github.com/repos/numpy/numpy/issues/6772,b'Backport 6756',"b'TST: test f2py, fallback on f2py2.7 etc., fixes #6718'"
6770,120455440,charris,charris,2015-12-04 18:10:02,2015-12-04 19:21:19,2015-12-04 19:21:07,closed,,,0,00 - Backport;11 - Bug;component: distribution,https://api.github.com/repos/numpy/numpy/issues/6770,b'Backport 6757',b'BUG: link cblas library if cblas is detected'
6766,120420904,jor-,seberg,2015-12-04 15:14:52,2015-12-14 14:31:13,2015-12-14 14:20:27,closed,,,25,11 - Bug;component: numpy.lib,https://api.github.com/repos/numpy/numpy/issues/6766,b'numpy.load: OSError: first argument must be an open file',"b'Using Python 3.5 and Numpy 1.10.1 I got an error at `numpy.load` when called on an opened file object. \r\n```\r\nfile = \'xyz.npy\'\r\nwith open(file, \'rb\') as file_object:\r\n    return numpy.load(file_object)\r\n```\r\nThe error is thrown at: numpy/lib/format.py"", line 649, in read_array\r\n    array = numpy.fromfile(fp, dtype=dtype, count=count)\r\nOSError: first argument must be an open file\r\n\r\nI checked with pdb: The file was closed somewhere inside the `numpy.load` call.\r\n\r\nUnfortunately, the error does not always occur. I repeat loading the file many times in my script, the error occurs normally after several hundred loadings.\r\n\r\nDoes anyone have an explanation of why it is sometimes closed?\r\n'"
6763,120231150,gerritholl,charris,2015-12-03 17:50:54,2015-12-04 19:49:36,2015-12-04 19:49:36,closed,,,5,11 - Bug;component: numpy.ma,https://api.github.com/repos/numpy/numpy/issues/6763,"b'BUG/TST: Fix for #6724, make numpy.ma.mvoid consistent with numpy.void'","b'This is an alternative fix for #6724.  The other fix is in #6755.\r\n\r\nMake indexing on numpy.ma.mvoid consistent with indexing on numpy.void.\r\nChanges behaviour in rare cases (see below). Fixes #6724.  Sometimes,\r\nindexing ma.mvoid results in a non-scalar mask.  For example, dimension\r\nincreases if indexing with a multi-dimensional field.  Previously, this\r\nled to a ValueError (truth value ambiguous).  With this commit, indexing\r\nnow returns an ma.masked_array so that there is no loss of information.\r\n\r\nNote that there is a precedence for returning from void to array.  `Z =\r\nzeros((2,), dtype=""(2,)i2,(2,)i2"")`, then Z[0] is a void, but `Z[0][0]\r\nand Z[0][""f1""]` are array.  This commit therefore implements behaviour\r\nsuch that `numpy.ma.mvoid` is consistent with `numpy.void`.\r\n\r\nAlso adds a related test.\r\n\r\nThe behaviour changes in cases where for a masked array `X`, `X.dtype[""A""]`\r\nis multidimensional but size 1, such as in the example below.  Any case\r\nwhere `X.dtype[""A""]` is multidimensional but with size>1 would previously\r\nfail.\r\n\r\nOld behaviour:\r\n\r\n```\r\nIn [15]: X = ma.masked_array(data=[([0],)], mask=[([False],)],\r\n        dtype=[(""A"", ""(1,1)i2"", (1,1))])\r\n\r\nIn [16]: X[0][""A""]\r\nOut[16]: array([[[[0]]]], dtype=int16)\r\n\r\nIn [17]: X = ma.masked_array(data=[([0],)], mask=[([True],)],\r\n        dtype=[(""A"", ""(1,1)i2"", (1,1))])\r\n\r\nIn [18]: X[0][""A""]\r\nOut[18]: masked\r\n```\r\n\r\nNew behaviour:\r\n\r\n```\r\nIn [1]: X = ma.masked_array(data=[([0],)], mask=[([False],)],\r\n        dtype=[(""A"", ""(1,1)i2"", (1,1))])\r\n\r\nIn [2]: X[0][""A""]\r\nOut[2]:\r\nmasked_array(data =\r\n [[[[0]]]],\r\n             mask =\r\n [[[[False]]]],\r\n       fill_value = [[[[16959]]]])\r\n\r\nIn [3]: X = ma.masked_array(data=[([0],)], mask=[([True],)],\r\n        dtype=[(""A"", ""(1,1)i2"", (1,1))])\r\n\r\nIn [4]: X[0][""A""]\r\nOut[4]:\r\nmasked_array(data =\r\n [[[[--]]]],\r\n             mask =\r\n [[[[ True]]]],\r\n       fill_value = [[[[16959]]]])\r\n```\r\n\r\nThe new behaviour is more consistent with indexing the data themselves:\r\n\r\n```\r\nIn [7]: X.data[0][""A""]\r\nOut[7]: array([[[[0]]]], dtype=int16)\r\n```\r\n\r\nIn theory, this change in behaviour can break code, but I would consider\r\nit very unlikely.'"
6761,120216497,gerritholl,charris,2015-12-03 16:38:11,2015-12-03 17:42:43,2015-12-03 17:42:29,closed,,,1,11 - Bug;component: numpy.ma,https://api.github.com/repos/numpy/numpy/issues/6761,b'BUG/TST: Fix #6760 by correctly describing mask on nested subdtypes',"b'Fix #6760.  In ma.core._recursive_make_descr, consider the case where a\r\nsubdtype does itself have named fields.  This ensures the correct mask for\r\nan array like `ma.zeros(2, dtype([(""A"", ""(2,2)i1,(2,2)i1"", (2,2))]))`.'"
6758,120025891,seberg,charris,2015-12-02 20:11:37,2015-12-07 23:34:30,2015-12-02 20:58:53,closed,,,1,11 - Bug;component: numpy.core,https://api.github.com/repos/numpy/numpy/issues/6758,b'BUG: resizing empty array with complex dtype failed',"b'This is because the dtype was passed into the new array as a\r\nchar, and many dtypes do not have a valid char representation.\r\n\r\nCloses gh-6740'"
6757,120007108,ahaldane,charris,2015-12-02 18:32:48,2015-12-04 18:10:51,2015-12-04 18:04:37,closed,,,12,11 - Bug;component: build,https://api.github.com/repos/numpy/numpy/issues/6757,b'BUG: link cblas library if cblas is detected',"b""Here's a shot at fixing the problem I mentioned in #6717, that cblas was not linked during compilation after it was detected in the build setup.\r\n\r\nI'm not familiar with the library detection code, so could use some guidance here. For instance, I think with this logic the build can fail if the `has_cblas` function returns true but the `check_libs` method fails to find cblas. Is that OK?\r\n\r\n"""
6756,119971558,joernhees,charris,2015-12-02 15:48:58,2015-12-06 00:05:27,2015-12-05 19:56:20,closed,,,4,05 - Testing;11 - Bug,https://api.github.com/repos/numpy/numpy/issues/6756,"b'TST: only test f2py, not f2py2.7 etc, fixes #6718'",b'see #6718 for discussion'
6755,119933542,gerritholl,charris,2015-12-02 12:43:20,2015-12-03 18:11:19,2015-12-03 18:11:19,closed,,,5,11 - Bug;component: numpy.ma,https://api.github.com/repos/numpy/numpy/issues/6755,b'Fix indexing on `ma.mvoid` to be consistent with `void`; fixes #6724',"b'Repair indexing on `ma.mvoid` so that it is consistent with `void`.  Changes only behaviour currently broken.  Fixes #6724.  \r\n\r\nCurrently, or a standard `ndarray`, given `Z = zeros((2,), dtype=""(2,)i2,(2,)i2"")`, `Z[0]` is `void` but `Z[0][0]` and `Z[0][""f1""]` are `ndarray`.  However, trying the same with `ma.mvoid` results in `ValueError`.  With this commit, indexing a `ma.mvoid` with a similar dtype results in `ma.masked_array`.'"
6748,119443152,saimn,charris,2015-11-30 08:41:14,2015-12-02 17:01:40,2015-12-01 23:18:31,closed,,,10,11 - Bug;component: numpy.ma,https://api.github.com/repos/numpy/numpy/issues/6748,b'ENH: Avoid memory peak and useless computations when printing a MaskedArray.',"b'Ref #3544. When printing a `MaskedArray`, the whole array is converted to the object dtype, whereas only a few values are printed to screen. \r\nThe approach here is to cut the array along each axis and keep only a subset that it used for the string conversion. This way the output should not change. The shape used for the cut (100 values for each axis) was chosen so we have enough values when printing on large screen (and the number of printed values depend on the dtype if I understand correctly), maybe there is a better value to choose (inspired from what ndarray.__str__ does ?).\r\nMaybe there is a better approach, in which case I am happy to improve this PR.'"
6744,119305784,jburroni,charris,2015-11-28 16:40:34,2016-02-29 17:52:26,2016-02-29 17:52:26,closed,,,0,11 - Bug;component: numpy.lib,https://api.github.com/repos/numpy/numpy/issues/6744,b'numpy irr should check whether the masked solution is empty',"b'In the current implementation, when no solution is returned by roots, the function return np.nan. But if no real solution is returned, the function fails with an exception:\r\n\r\n    ValueError: attempt to get argmin of an empty sequence\r\n\r\nThe proposed fix is to add the following to https://github.com/numpy/numpy/blob/master/numpy/lib/financial.py#L654\r\n\r\n    if res.size == 0 or res[mask].size == 0:'"
6738,119080677,charris,charris,2015-11-26 17:05:29,2015-11-30 00:01:37,2015-11-26 17:24:55,closed,,,0,00 - Backport;11 - Bug;component: numpy.ma,https://api.github.com/repos/numpy/numpy/issues/6738,b'Backport 6094',"b'BUG: Fixed string representation of mvoid with multi-dimensional columns\r\n\r\nThis fixes a bug that caused the string representation of masked structured array rows with multi-dimensional columns to fail (numpy/numpy#6019), and includes a regression test.\r\n\r\nSince __repr__ suffered from a similar bug, and since previously __repr__ returned the same as __str__ for mvoid, we now set __repr__ to reference the same method as __str__.'"
6736,119071867,charris,charris,2015-11-26 16:09:02,2015-11-26 17:06:23,2015-11-26 17:06:22,closed,,,0,00 - Backport;11 - Bug;component: numpy.random,https://api.github.com/repos/numpy/numpy/issues/6736,b'Backport 6721',"b'BUG: Fix for #6719\r\n\r\nnumpy/random/mtrand/mtrand.pyx contains a line where cython fails to\r\ncompile, complaining \xa1\xb0Pythonic division not allowed without gil\xa1\xb1.  By\r\nrunning this code segment under cdivision(True), this problem is avoided.\r\n\r\nNote that this is specific to Cython 0.23 and may be a Cython regression, so\r\nthis may be considered a work around.'"
6734,119055342,saimn,charris,2015-11-26 14:31:25,2015-12-02 09:24:45,2015-12-01 23:22:31,closed,,,5,11 - Bug;component: numpy.ma,https://api.github.com/repos/numpy/numpy/issues/6734,b'ENH: Avoid memory peak when creating a MaskedArray with mask=True/False.',"b'Ref #6732. \r\n\r\nWhen the `mask` parameter is set to True or False, create directly a `ndarray` of\r\nboolean instead of going inside `np.resize` which was causing of memory peak of\r\n~15 times the size of the mask.\r\n\r\ncc @charris '"
6733,119032899,gerritholl,charris,2015-11-26 12:07:07,2015-12-01 14:34:36,2015-12-01 14:34:35,closed,,,3,11 - Bug;component: numpy.ma,https://api.github.com/repos/numpy/numpy/issues/6733,b'BUG/TST: Fix for #6729',b'Fix representation of a structured masked array with dimension zero.\r\nThe effect of representing a masked array with dimension zero is now\r\nsimilar to respresenting an mvoid.  This commit fixes #6729.'
6732,119022758,saimn,saimn,2015-11-26 11:07:18,2016-02-04 09:25:28,2016-02-04 09:25:28,closed,,,5,11 - Bug;component: numpy.ma,https://api.github.com/repos/numpy/numpy/issues/6732,b'High memory peak when MaskedArray creates a mask',"b'Hi,\r\nWe work with huge masked arrays, and noticed that there is a high memory peak when creating a masked array with `mask=False`. In the example below you can see that when using `MaskedArray(mask=np.ma.nomask ...)` the memory does not increase and the masked array use a view of the data array. But when using `MaskedArray(mask=False ...)` there is a memory peak of ~15 times the size of the boolean mask which is created !\r\n\r\n```python\r\nIn [1]: import numpy as np\r\n\r\nIn [2]: import ipython_memory_usage.ipython_memory_usage as imu\r\n\r\nIn [3]: a = np.zeros((10000, 10000))\r\n\r\nIn [4]: imu.start_watching_memory()\r\nIn [4] used 0.0039 MiB RAM in 16.27s, peaked 0.00 MiB above current, total RAM usage 34.67 MiB\r\n\r\nIn [5]: a[:] = 1\r\nIn [5] used 763.0234 MiB RAM in 0.20s, peaked 0.00 MiB above current, total RAM usage 797.70 MiB\r\n\r\nIn [6]: m = np.ma.MaskedArray(data=a, mask=np.ma.nomask, dtype=float, copy=False)\r\nIn [6] used 0.0000 MiB RAM in 0.10s, peaked 0.00 MiB above current, total RAM usage 797.70 MiB\r\n\r\nIn [7]: m = np.ma.MaskedArray(data=a, mask=False, dtype=float, copy=False)\r\nIn [7] used 95.4375 MiB RAM in 10.23s, peaked 1525.77 MiB above current, total RAM usage 893.13 MiB\r\n```\r\n\r\nThe issue comes from the line `mask = np.resize(mask, _data.shape)` in https://github.com/numpy/numpy/blob/master/numpy/ma/core.py#L2770, where mask is just `array([False], dtype=bool)`. And then `np.resize` call `concatenate((a,)*n_copies)` which causes the memory peak (https://github.com/numpy/numpy/blob/master/numpy/core/fromnumeric.py#L1149).\r\n\r\nWithout knowing the reasons of this implementation, I wonder why the mask is not created simply with a `np.zeros(dtype=bool, ...)` (or `np.ones` depending the value of the mask parameter).\r\n'"
6731,118940845,charris,charris,2015-11-25 23:24:18,2015-11-26 15:55:31,2015-11-26 15:55:29,closed,,,0,00 - Backport;11 - Bug;component: numpy.core,https://api.github.com/repos/numpy/numpy/issues/6731,b'Backport 6726',b'BUG: Fix bugs exposed by relaxed stride rollback \r\n\r\nFix two problems\r\n\r\n* The travis ci wheels test was failing because the wrong wheel was being installed\r\n* There were to variables that were unused when NPY_RELAXED_STRIDE_CHECKING=0.'
6729,118921002,gerritholl,charris,2015-11-25 20:44:48,2015-12-01 14:34:35,2015-12-01 14:34:35,closed,,,1,11 - Bug;component: numpy.ma,https://api.github.com/repos/numpy/numpy/issues/6729,b'String representation of exotic masked structured arrays with ndim=0 fails with ValueError',"b'Even after the fixes in pull request #6094, there are still some cases where string representation fails, in particular where some members of a structured array are multi-dimensional:\r\n\r\n```\r\nIn [1]: ar = array((0, [[0.0, 0.0, 0.0], [0.0, 0.0, 0.0]], 0.0), dtype=""int, (2,3)float, float"")\r\n\r\nIn [2]: arm = ma.masked_array(ar)\r\n\r\nIn [3]: x = str(arm)\r\n---------------------------------------------------------------------------\r\nValueError                                Traceback (most recent call last)\r\n<ipython-input-3-f98bbc78fe11> in <module>()\r\n----> 1 x = str(arm)\r\n\r\n/home/users/gholl/venv/stable-3.5/lib/python3.5/site-packages/numpy/ma/core.py in __str__(self)\r\n   3698                 if m.shape == ():\r\n   3699                     if m.dtype.names:\r\n-> 3700                         m = m.view((bool, len(m.dtype)))\r\n   3701                         if m.any():\r\n   3702                             return str(tuple((f if _m else _d) for _d, _m in\r\n\r\nValueError: new type not compatible with array.\r\n```\r\n\r\nAnd without the `m = m.view(...)` line, `m.any()` would fail with `TypeError: cannot perform reduce with flexible type`.\r\n\r\nA bit more of an overview, illustrating what we would like to see:\r\n\r\n```\r\nIn [26]: m1 = ma.masked_array(data=[(0, [0, 0], 0)], mask=[(True,[False, True],True)], dtype=""int, (2)float, int"")\r\n\r\nIn [27]: m2 = ma.masked_array(data=(0, [0, 0], 0), mask=(True,[False, True],True), dtype=""int, (2)float, int"")\r\n\r\nIn [28]: str(m1)\r\nOut[28]: \'[(--, [0.0, --], --)]\'\r\n\r\nIn [29]: str(m1[0])\r\nOut[29]: \'(--, [0.0, --], --)\'\r\n\r\nIn [30]: str(m2)\r\n---------------------------------------------------------------------------\r\nValueError                                Traceback (most recent call last)\r\n<ipython-input-30-3ae8d0bbdb8a> in <module>()\r\n----> 1 str(m2)\r\n\r\n/home/users/gholl/venv/stable-3.5/lib/python3.5/site-packages/numpy/ma/core.py in __str__(self)\r\n   3698                 if m.shape == ():\r\n   3699                     if m.dtype.names:\r\n-> 3700                         m = m.view((bool, len(m.dtype)))\r\n   3701                         if m.any():\r\n   3702                             return str(tuple((f if _m else _d) for _d, _m in\r\n\r\nValueError: new type not compatible with array.\r\n\r\nIn [34]: numpy.ma.core.mvoid.__str__(m2)\r\nOut[34]: \'(--, [0.0, --], --)\'\r\n```'"
6728,118920189,gerritholl,ahaldane,2015-11-25 20:39:35,2016-01-13 01:32:43,2016-01-13 01:32:43,closed,,,6,11 - Bug;component: numpy.ma,https://api.github.com/repos/numpy/numpy/issues/6728,b'BUG/TST: Fix for #6723 including test: force fill_value.ndim==0',"b'Fix issue #6723.  Given an exotic masked structured array, where one of\r\nthe fields has a multidimensional dtype, make sure that, when accessing\r\nthis field, the fill_value still makes sense.  As it stands prior to this\r\ncommit, the fill_value will end up being multidimensional, possibly with a\r\nshape incompatible with the mother array, which leads to broadcasting\r\nerrors in methods such as .filled().  This commit uses the first element\r\nof this multidimensional fill value as the new fill value.\r\n\r\nAlso add a test to verify that fill_value.ndim remains 0 after indexing.'"
6726,118919293,charris,charris,2015-11-25 20:34:08,2015-11-26 15:55:08,2015-11-26 15:55:07,closed,,,1,05 - Testing;11 - Bug;component: numpy.core,https://api.github.com/repos/numpy/numpy/issues/6726,b'Fix bugs exposed by relaxed stride rollback',b'Fix two problems\r\n\r\n* The travis ci wheels test was failing because the wrong wheel was being installed\r\n* There were two variables that were unused when NPY_RELAXED_STRIDE_CHECKING=0.'
6724,118908955,gerritholl,charris,2015-11-25 19:41:14,2015-12-04 19:49:36,2015-12-04 19:49:36,closed,,,1,11 - Bug;component: numpy.ma,https://api.github.com/repos/numpy/numpy/issues/6724,b'ValueError when indexing numpy.ma.core.mvoid with multidimensional structured dtype',"b'When indexing a structured masked array with a multidimensional structured dtype, resulting in a `numpy.ma.core.mvoid`, an attempt at accessing a field results in a `ValueError`, as illustrated below on the current numpy repo:\r\n\r\n```\r\nIn [17]: numpy.version.version\r\nOut[17]: \'1.11.0.dev0+e711c95\'\r\n\r\nIn [18]: A = ma.masked_array(data=[([0,1,2],), ([3,4,5],)], mask=[([True, False, False],), ([False, True, False],)], dtype=[(""A"", "">i2"", (3,))])\r\n\r\nIn [19]: x = A[0]\r\n\r\nIn [20]: y = x[""A""]\r\n---------------------------------------------------------------------------\r\nValueError                                Traceback (most recent call last)\r\n<ipython-input-20-795ad5dbbe43> in <module>()\r\n----> 1 y = x[""A""]\r\n\r\n/home/users/gholl/venv/stable-3.5/lib/python3.5/site-packages/numpy/ma/core.py in __getitem__(self, indx)\r\n   5851         """"""\r\n   5852         m = self._mask\r\n-> 5853         if m is not nomask and m[indx]:\r\n   5854             return masked\r\n   5855         return self._data[indx]\r\n\r\nValueError: The truth value of an array with more than one element is ambiguous. Use a.any() or a.all()\r\n```\r\n\r\nThe problem does not occur when the structured dtype has a scalar dimension:\r\n\r\n```\r\nIn [36]: A = ma.masked_array(data=[(1,), (2,), (3,)], mask=[(False,), (True,), (False,)], dtype=[(""A"", "">i2"")])\r\n\r\nIn [38]: A[0][""A""]\r\nOut[38]: 1\r\n```'"
6720,118860394,gerritholl,charris,2015-11-25 15:30:02,2015-11-26 16:51:06,2015-11-25 16:54:02,closed,,,6,11 - Bug;component: numpy.random,https://api.github.com/repos/numpy/numpy/issues/6720,b'BUG: Fix/workaround for #6719',"b""numpy/random/mtrand/mtrand.pyx contains a line where cython fails to\r\ncompile, complaining \xa1\xb0Pythonic division not allowed without gil\xa1\xb1.  By\r\npassing '--directive cdivision=true' to cython, it can compile again."""
6715,118675895,charris,charris,2015-11-24 18:37:58,2015-12-03 21:07:17,2015-12-03 21:07:13,closed,,,0,11 - Bug;component: distribution,https://api.github.com/repos/numpy/numpy/issues/6715,b'BUG: Include relevant files from numpy/linalg/lapack_lite in sdist.',b'After 1e436a5 *.h and *.c files from numpy/linalg/lapack_lite were no\r\nlonger included in source distributions. Fix this by adding them to\r\nMANIFEST.in.\r\n\r\nCloses #6694.'
6712,118307067,argriffing,charris,2015-11-23 02:10:25,2016-01-08 23:23:44,2016-01-08 23:23:44,closed,,,5,11 - Bug;component: npy_math,https://api.github.com/repos/numpy/numpy/issues/6712,b'arccosh is inaccurate when numpy is built with old glibc?',"b""An arccosh test is failing in one of the TravisCI scipy configurations that builds numpy. I'm speculating that this is because TravisCI runs a somewhat old Ubuntu with a glibc that has some trig function implementations that numpy has blacklisted. If that is true, could this be fixed in a way that is better than bumping the scipy test tolerances or upgrading the TravisCI platform?\r\nhttps://github.com/scipy/scipy/pull/4729"""
6711,118218609,clwainwright,charris,2015-11-21 20:18:44,2016-06-11 17:26:28,2016-06-11 17:26:28,closed,,,5,11 - Bug;component: Documentation,https://api.github.com/repos/numpy/numpy/issues/6711,b'docs for datetime units show incorrect time spans',"b'This can be seen in http://docs.scipy.org/doc/numpy/reference/arrays.datetime.html#datetime-units\r\n\r\nThe correct time spans should be:\r\n```\r\ns   second      +/- 2.9e11 years    [2.9e11 BC, 2.9e11 AD]\r\nms  millisecond +/- 2.9e8 years     [ 2.9e8 BC, 2.9e8 AD]\r\nus  microsecond +/- 2.9e5 years     [290301 BC, 294241 AD]\r\nns  nanosecond  +/- 292 years       [  1678 AD, 2262 AD]\r\n```\r\nrather than\r\n```\r\ns   second      +/- 2.9e12 years    [ 2.9e9 BC, 2.9e9 AD]\r\nms  millisecond +/- 2.9e9 years     [ 2.9e6 BC, 2.9e6 AD]\r\nus  microsecond +/- 2.9e6 years     [290301 BC, 294241 AD]\r\nns  nanosecond  +/- 292 years       [ 1678 AD, 2262 AD]\r\n```'"
6707,117935993,charris,charris,2015-11-19 23:54:59,2015-11-20 00:39:19,2015-11-20 00:39:17,closed,,,0,00 - Backport;11 - Bug;component: numpy.core,https://api.github.com/repos/numpy/numpy/issues/6707,b'Backport 6697',"b""MAINT: fix spurious semicolon in macro definition of PyArray_FROM_OT\r\n\r\nThere is a spurious semicolon (;) character at the end of the macro\r\ndefinition of PyArray_FROM_OT, in the header file ndarrayobject.h.  This\r\nprevents the macro from being used like a function, e.g. one can't write\r\nlike\r\n\r\n    if ( !(arr = PyArray_FROM_OT( ... )) )\r\n        ... ...\r\n\r\nAfter removing the semicolon, the macro can be used like a C function."""
6706,117935827,charris,charris,2015-11-19 23:53:36,2015-11-20 00:39:30,2015-11-20 00:39:29,closed,,,0,00 - Backport;11 - Bug;component: numpy.distutils,https://api.github.com/repos/numpy/numpy/issues/6706,b'Backport 6695',b'BUG: fix removing tempdirs created during build\r\n\r\nOld code used the thread local storage wrong and also only deleted the\r\ndirectories created for the last parallel build section as the exit\r\nhandler only knows about one of the directories.\r\nFix by storing all created tempdirs to delete at exit.'
6705,117935339,charris,charris,2015-11-19 23:50:04,2015-11-20 00:39:42,2015-11-20 00:39:41,closed,,,0,00 - Backport;11 - Bug;component: numpy.testing,https://api.github.com/repos/numpy/numpy/issues/6705,b'Backport 6686.',b'BUG: testing: fix a bug in assert_string_equal'
6703,117867181,ahaldane,charris,2015-11-19 17:42:35,2015-11-24 15:56:24,2015-11-24 15:56:01,closed,,,3,00 - Backport;11 - Bug;component: numpy.core,https://api.github.com/repos/numpy/numpy/issues/6703,b'Backport 6702',"b""Should have used PyArray_BYTES, not PyArray_DATA.\r\n\r\nFirst time I'm modifying the maintenance branch, hopefully I got the git commands right."""
6702,117865762,ahaldane,charris,2015-11-19 17:36:55,2015-11-24 15:57:00,2015-11-24 15:30:10,closed,,,25,11 - Bug;component: numpy.core,https://api.github.com/repos/numpy/numpy/issues/6702,b'BUG: fix pointer arithmetic in _get_field_view',"b'Should have used PyArray_BYTES, not PyArray_DATA\r\n\r\n1.10 fix coming soon, hopefully...'"
6699,117596511,stuartarchibald,charris,2015-11-18 14:19:59,2016-01-29 19:30:38,2016-01-29 19:30:38,closed,,,4,11 - Bug;component: numpy.core,https://api.github.com/repos/numpy/numpy/issues/6699,b'BUG: fix issues with signed zeros in scalar math complex division.',b'The current algorithm used in scalar math complex division appears to\r\nincorrectly handle signed zeros. This patch duplicates the algorithm\r\nused for complex division in the loops.c.src file into the\r\nscalarmath.c.src file so the algorithms are consistent regardless of\r\ncontext. Unit tests are added in the scalar context for testing the\r\ncorrectness of sign when zeros are encountered and also to trip the new\r\nbranches in the now consistent algorithm.'
6697,117474851,congma,juliantaylor,2015-11-17 23:23:15,2015-11-20 00:40:46,2015-11-18 00:27:01,closed,,,1,11 - Bug;component: numpy.core,https://api.github.com/repos/numpy/numpy/issues/6697,b'MAINT: fix spurious semicolon in macro definition of PyArray_FROM_OT',"b""There is a spurious semicolon (;) character at the end of the macro\r\ndefinition of PyArray_FROM_OT, in the header file ndarrayobject.h.  This\r\nprevents the macro from being used like a function, e.g. one can't write\r\nlike\r\n\r\n    if ( !(arr = PyArray_FROM_OT( ... )) )\r\n        ... ...\r\n\r\nAfter removing the semicolon, the macro can be used like a C function."""
6695,117418206,juliantaylor,charris,2015-11-17 18:27:33,2015-11-20 00:41:22,2015-11-17 21:36:41,closed,,,1,11 - Bug;component: numpy.distutils,https://api.github.com/repos/numpy/numpy/issues/6695,b'BUG: fix removing tempdirs created during build',b'Old code used the thread local storage wrong and also only deleted the\r\ndirectories created for the last parallel build section as the exit\r\nhandler only knows about one of the directories.\r\nFix by storing all created tempdirs to delete at exit.'
6690,117023520,lzkelley,jaimefrio,2015-11-15 22:29:12,2015-11-17 19:50:28,2015-11-17 19:50:10,closed,,,5,10 - Maintenance;11 - Bug;component: numpy.lib,https://api.github.com/repos/numpy/numpy/issues/6690,"b'BUG, MAINT: check that histogram range parameters are finite.'","b'This assures that the values in the `range` parameter are finite, avoiding meaningless results.  See [Scipy Issue #5221](https://github.com/matplotlib/matplotlib/issues/5221), and [[Numpy-discussion]histogram gives meaningless results with non-finite range](https://mail.scipy.org/pipermail/numpy-discussion/2015-November/074161.html).'"
6686,116922445,pv,charris,2015-11-14 12:30:05,2015-11-20 00:41:53,2015-11-14 17:43:45,closed,,,1,11 - Bug;component: numpy.testing,https://api.github.com/repos/numpy/numpy/issues/6686,b'BUG: testing: fix a bug in assert_string_equal',"b""There's a bug in `assert_string_equal` for some inputs.\r\nIt did not have any tests."""
6682,116813558,bsipocz,rgommers,2015-11-13 17:34:23,2016-01-16 11:34:24,2016-01-16 11:34:24,closed,,,7,11 - Bug;component: build;component: Documentation,https://api.github.com/repos/numpy/numpy/issues/6682,b'DOC: Cython is not listed as build requirement',"b""Couldn't find it anywhere mentioned in the docs, but it seems that Cython is a build requirement of the development version. """
6672,116584922,lfsimoes,seberg,2015-11-12 16:25:18,2016-06-05 09:13:00,2016-06-05 09:13:00,closed,,,7,11 - Bug;component: numpy.core,https://api.github.com/repos/numpy/numpy/issues/6672,b'memory leak in np.clip()',"b""I found a usage pattern under which np.clip() leaks memory.\r\nYou can reproduce it with the following code:\r\n\r\n    In [1]: import numpy as np\r\n    \r\n    In [2]: a = np.arange(10).reshape(5,2)\r\n    \r\n    In [3]: a\r\n    Out[3]:\r\n    array([[0, 1],\r\n           [2, 3],\r\n           [4, 5],\r\n           [6, 7],\r\n           [8, 9]])\r\n    \r\n    In [4]: b = np.array([[3,5],[0,6]])\r\n    \r\n    In [5]: np.clip(a, b[:,0], b[:,1])\r\n    Out[5]:\r\n    array([[3, 1],\r\n           [3, 3],\r\n           [4, 5],\r\n           [5, 6],\r\n           [5, 6]])\r\n    \r\n    In [6]: for i in xrange(10000000): np.clip(a, b[:,0], b[:,1], a)\r\n\r\nThis problem was already present in numpy 1.9.0 (installed from `numpy-1.9.0-win32-superpack-python2.7.exe`), and I was now able to reproduce it in numpy 1.10.1 (installed from Christoph Gohlke's [`numpy-1.10.1+mkl-cp27-none-win32.whl`](http://www.lfd.uci.edu/~gohlke/pythonlibs/#numpy) Windows binary), as well as in Linux (numpy 1.10.1, local compile through pip)."""
6662,116225814,Iceman9,charris,2015-11-10 23:24:03,2015-11-20 20:45:40,2015-11-20 20:44:32,closed,,,10,11 - Bug;component: numpy.core,https://api.github.com/repos/numpy/numpy/issues/6662,b'Changed lines for successfull MSVC 14.0 compiling',"b'Edited lines in ../numpy/core/src/multiarray/mapping.c and ../numpy/core/src/private/mem_overlap.c, namely functions that are not legally defined for MSVC 14.0. Need testing if the free (pointer) functions are properly placed in mem_overlap.c\r\n\r\nThis fixes the errors when trying to compile with MSVC 14.0 for python 3.5'"
6646,115604974,charris,charris,2015-11-06 22:39:29,2016-01-15 01:58:04,2016-01-15 01:58:04,closed,,,1,11 - Bug;component: numpy.ma,https://api.github.com/repos/numpy/numpy/issues/6646,b'ma.asarray does not default to C order as stated.',"b""In fact, the `order` keyword is ignored.\r\n```\r\nIn [7]: a = eye(3).T\r\n\r\nIn [8]: a.flags\r\nOut[8]: \r\n  C_CONTIGUOUS : False\r\n  F_CONTIGUOUS : True\r\n  OWNDATA : False\r\n  WRITEABLE : True\r\n  ALIGNED : True\r\n  UPDATEIFCOPY : False\r\n\r\nIn [9]: ma.asarray(a).flags\r\nOut[9]: \r\n  C_CONTIGUOUS : False\r\n  F_CONTIGUOUS : True\r\n  OWNDATA : False\r\n  WRITEABLE : True\r\n  ALIGNED : True\r\n  UPDATEIFCOPY : False\r\n\r\nIn [10]: ma.asarray(a, order='C').flags\r\nOut[10]: \r\n  C_CONTIGUOUS : False\r\n  F_CONTIGUOUS : True\r\n  OWNDATA : False\r\n  WRITEABLE : True\r\n  ALIGNED : True\r\n  UPDATEIFCOPY : False\r\n```"""
6645,115569199,charris,charris,2015-11-06 19:18:32,2015-11-06 19:52:06,2015-11-06 19:52:04,closed,,,0,00 - Backport;11 - Bug;component: numpy.core,https://api.github.com/repos/numpy/numpy/issues/6645,b'Backport 6642',"b'    BUG: Fix memleak in _convert_from_dict\r\n    \r\n    Fixes a memleak introduced in #5920, where PyDict_GetItemString\r\n    was replaced by PyMapping_GetItemString which returns a new ref.\r\n    \r\n    Fixes #6636\r\n'"
6644,115562927,charris,charris,2015-11-06 18:39:23,2015-11-06 19:09:32,2015-11-06 19:09:27,closed,,,0,00 - Backport;11 - Bug;component: numpy.core,https://api.github.com/repos/numpy/numpy/issues/6644,b'Backport 6643',"b""    ENH: make recarray.getitem return a recarray\r\n    \r\n    recarray.__getitem__ should return a recarray when the returned value\r\n    had structured type (it's documented to do so).\r\n    \r\n    Fixes #6641\r\n"""
6642,115548032,ahaldane,charris,2015-11-06 17:10:36,2015-11-06 19:50:00,2015-11-06 18:50:58,closed,,,6,11 - Bug;component: numpy.core,https://api.github.com/repos/numpy/numpy/issues/6642,b'BUG: Fix memleak in _convert_from_dict',"b""Fixes a memory leak introduced in #5920, where PyDict_GetItemString\r\nwas replaced by PyMapping_GetItemString which returns a new ref.\r\n\r\nFixes #6636 \r\n\r\n(I'm not sure if it's possible/desirable to write unit tests for memory leaks - I didn't write any)"""
6641,115532663,aldanor,charris,2015-11-06 16:00:35,2015-11-06 18:21:22,2015-11-06 18:21:22,closed,,,1,11 - Bug;component: numpy.core,https://api.github.com/repos/numpy/numpy/issues/6641,b'Subsetting recarray by fields yields a structured array',"b""I would expect this to return a record array as well:\r\n\r\n```python\r\n>>> np.rec.array([1, 2])\r\nrec.array((1, 2), \r\n      dtype=[('f0', '<i8'), ('f1', '<i8')])\r\n\r\n>>> np.rec.array([1, 2])[['f0', 'f1']]\r\narray((1, 2), \r\n      dtype=[('f0', '<i8'), ('f1', '<i8')])\r\n```"""
6626,115153929,charris,charris,2015-11-04 21:37:43,2015-11-04 21:39:51,2015-11-04 21:39:49,closed,,,0,00 - Backport;11 - Bug;component: Other,https://api.github.com/repos/numpy/numpy/issues/6626,b'Backport 6621',b'BUG: Fix swig make_fortran function.\r\n\r\nThe function was calling PyArray_FromArray with NPY_FORTRANORDER instead\r\nof NPY_ARRAY_F_CONTIGUOUS. The first is of type NPY_ORDER and the second\r\nis a flag.\r\n\r\nCloses #6618. [ci skip]'
6621,114852855,charris,charris,2015-11-03 16:21:31,2015-11-04 21:40:24,2015-11-04 21:27:54,closed,,,0,11 - Bug;component: Other,https://api.github.com/repos/numpy/numpy/issues/6621,b'BUG: Fix swig make_fortran function.',b'The function was calling PyArray_FromArray with NPY_FORTRANORDER instead\r\nof NPY_ARRAY_F_CONTIGUOUS. The first is of type NPY_ORDER and the second\r\nis a flag.\r\n\r\nCloses #6618.'
6615,114669813,charris,charris,2015-11-02 19:44:38,2015-11-02 20:10:58,2015-11-02 20:10:56,closed,,,0,00 - Backport;11 - Bug;component: numpy.random,https://api.github.com/repos/numpy/numpy/issues/6615,b'Backport 6614',b'BUG: Add choice and dirichlet to numpy.random.__all__.'
6614,114634766,charris,charris,2015-11-02 16:46:54,2015-11-06 19:21:06,2015-11-02 19:38:54,closed,,,1,11 - Bug;component: numpy.random,https://api.github.com/repos/numpy/numpy/issues/6614,b'BUG: Add choice and dirichlet to numpy.random.__all__.',
6604,114507397,charris,charris,2015-11-02 01:28:35,2015-11-02 01:50:57,2015-11-02 01:50:54,closed,,,0,00 - Backport;11 - Bug;component: Other,https://api.github.com/repos/numpy/numpy/issues/6604,b'Backport 6596',"b'    BUG: Fix use of PyArray_ISFORTRAN in numpy.i.\r\n    \r\n    PyArray_ISFORTRAN was used to implement array_is_fortran in numpy.i when\r\n    what was wanted was PyArray_IS_F_CONTIGUOUS. The difference is that\r\n    PyArray_ISFORTRAN will return False if the array is c_contiguous.\r\n    Previous to relaxed stride checking this did not matter, but currently\r\n    arrays with ndim > 1 may be both C and Fortran contiguous and that\r\n    results in errors when PyArray_ISFORTRAN is mistakenly used to check for\r\n    Fortran contiguity.\r\n\r\n[ci skip]'"
6602,114486453,zpincus,charris,2015-11-01 19:14:51,2015-11-02 19:39:03,2015-11-02 19:39:03,closed,,,0,11 - Bug;component: numpy.random,https://api.github.com/repos/numpy/numpy/issues/6602,"b""'choice' and 'dirichlet' missing from numpy.random.__all__""","b""Presumably numpy/random/info.py should include 'choice' and 'dirichlet' in the `__all__` variable? Right now they aren't there."""
6601,114471660,ignatenkobrain,charris,2015-11-01 14:16:31,2016-06-18 14:21:23,2016-06-18 14:21:23,closed,,1.12.0 release,2,11 - Bug;52 -  Inactive;56 - Needs Release Note.;component: numpy.testing,https://api.github.com/repos/numpy/numpy/issues/6601,b'testing/utils: assert_almost_equal: use the same algorithm for rounding',b'as used for assert_array_almost_equal\r\n\r\nReference: https://github.com/numpy/numpy/issues/5200'
6596,114427332,charris,charris,2015-10-31 18:41:40,2015-11-02 01:58:37,2015-11-02 01:05:57,closed,,,3,11 - Bug;component: Documentation;component: numpy.core;component: Other,https://api.github.com/repos/numpy/numpy/issues/6596,b'Fix swig for relaxed stride checking',"b'Should fix #6590. The fix here is in two parts\r\n\r\n* Use `PyArray_IS_F_CONTIGUOUS` in `array_is_fortran` in `numpy.i`.\r\n* Change `isfortran` documentation to emphasize that it is not a check for Fortran contiguity.\r\n* Warn about the fix to `numpy.i` in the 1.10.0 release notes.\r\n\r\nStrictly speaking, the warning should probably be in the 1.10.2 release notes, but I figure more people will read the 1.10.0 release notes to check for changes than the notes for the later point releases. Feel free to argue the point ;)\r\n\r\n'"
6590,114241607,oeway,charris,2015-10-30 10:22:07,2015-11-02 01:05:57,2015-11-02 01:05:57,closed,,,26,11 - Bug;component: numpy.core,https://api.github.com/repos/numpy/numpy/issues/6590,b'Fortran Array problem in numpy 1.10',"b'Hi,\r\n\r\nI think I got a problem related to the numpy function np.asfortranarray. \r\nI am using numpy 1.10 with a pacakge named SPAMS(http://spams-devel.gforge.inria.fr/), it keep complaining that the input array is not a fortran array, but I used np.asfortranarray to convert it indeed. Then I tried to downgrade to numpy 1.9.3, it worked quite well, so I think there is a bug introduced since 1.10.\r\n\r\nTo reproduce the problem:\r\n```\r\nwget https://gforge.inria.fr/frs/download.php/latestfile/4532/spams-python-v2.5-svn2014-07-04.tar.gz\r\ntar -xvf spams-python-v2.5-svn2014-07-04.tar.gz\r\ncd spams-python\r\nsudo python setup.py install\r\n```\r\nTo run the test, you need to ""cd spams-python"" and them run the following code:\r\n```\r\nfrom test_dictLearn import *\r\ntest_trainDL()\r\n```\r\nAnd if you are using numpy 1.10 then it will complain an error immediately, if you use numpy 1.9.3 then it will run the test.\r\n\r\n\r\nThanks in advance to look into this.\r\n\r\nBest,\r\nWill\r\n'"
6587,114178783,rgommers,njsmith,2015-10-30 01:15:11,2015-10-30 08:24:49,2015-10-30 01:44:11,closed,,,8,11 - Bug;component: build,https://api.github.com/repos/numpy/numpy/issues/6587,b'BUG: fix MANIFEST.in for removal of a file in gh-8047.',b'oops'
6580,114114042,charris,charris,2015-10-29 18:19:59,2015-10-29 23:30:35,2015-10-29 18:20:17,closed,,,0,00 - Backport;11 - Bug;component: Documentation,https://api.github.com/repos/numpy/numpy/issues/6580,b'Backport 6579',b'MAINT: fix mistake in doc upload rule\r\n\r\n[ci skip]'
6579,114110805,pv,charris,2015-10-29 18:04:42,2015-10-29 18:25:13,2015-10-29 18:15:38,closed,,,2,11 - Bug;component: Documentation,https://api.github.com/repos/numpy/numpy/issues/6579,b'MAINT: fix mistake in doc upload rule',b'Fix mistake in doc upload makefile rule. The current release is a symlink.'
6569,113474498,wackywendell,charris,2015-10-26 23:48:10,2015-10-30 00:36:23,2015-10-30 00:36:22,closed,,,24,11 - Bug;component: build,https://api.github.com/repos/numpy/numpy/issues/6569,b'Cannot run tests after `python setup.py build_ext -i`',"b'Here is what I mean:\r\n\r\n```bash\r\n$ git clean -xdf\r\n$ python setup.py build_ext -i\r\nRunning from numpy source directory.\r\nCythonizing sources\r\n[... lots of building, completes successfully ...]\r\n$ $ ./runtests.py\r\nBuilding, see build.log...\r\nRunning from numpy source directory.\r\nTraceback (most recent call last):\r\n  File ""setup.py"", line 263, in <module>\r\n    setup_package()\r\n  File ""setup.py"", line 247, in setup_package\r\n    from numpy.distutils.core import setup\r\n  File ""/home/wendell/code/numpy/numpy/distutils/__init__.py"", line 21, in <module>\r\n    from numpy.testing import Tester\r\n  File ""/home/wendell/code/numpy/numpy/testing/__init__.py"", line 14, in <module>\r\n    from .utils import *\r\n  File ""/home/wendell/code/numpy/numpy/testing/utils.py"", line 17, in <module>\r\n    from numpy.core import float32, empty, arange, array_repr, ndarray\r\n  File ""/home/wendell/code/numpy/numpy/core/__init__.py"", line 59, in <module>\r\n    test = Tester().test\r\n  File ""/home/wendell/code/numpy/numpy/testing/nosetester.py"", line 180, in __init__\r\n    if raise_warnings is None and \'.dev0\' in np.__version__:\r\nAttributeError: module \'numpy\' has no attribute \'__version__\'\r\n\r\nBuild failed!\r\n```\r\n\r\nThe issue is pretty clear:\r\n\r\nWhen `numpy/__init__.py` is loaded, under [some conditions](https://github.com/numpy/numpy/blob/master/numpy/__init__.py#L159-L162) it will not set the `__version__` variable; these conditions occur when you do not use a `virtualenv` or `python setup.py install`, and just try and run `runtests.py`. After 7b438fa90e53abe8b2f0356ec50daed6ab299794 ([PR](https://github.com/numpy/numpy/pull/6461)), `nosetester.py` tries to access this `__version__` variable, which doesn\'t exist and so it crashes.\r\n\r\nCC @rgommers @charris?'"
6563,113373369,rewquey,njsmith,2015-10-26 14:53:06,2015-10-26 22:47:54,2015-10-26 22:47:54,closed,,,4,11 - Bug;component: numpy.f2py,https://api.github.com/repos/numpy/numpy/issues/6563,b'f2py: Intent(out) broken in recent versions of numpy',"b'As of recently, the intent(out) is no longer taken over into the signature file. This concerns both the information from a Fortran90 variable declaration and the f2py hint with the syntax \r\n```!f2py intent(out) var```.\r\n\r\nThe fib3.f example from the [f2py documentation](http://docs.scipy.org/doc/numpy/f2py/getting-started.html) is affected as well and can serve as a minimal example.\r\n\r\nThe reason seems to be that the function isintent_out() is not imported from auxfuncs.py into crackfortran.py . Intent(out) does hence pass not through the true_intent_list filter.'"
6553,113069300,yashmehrotra,charris,2015-10-23 17:57:39,2015-10-28 04:53:13,2015-10-27 20:43:28,closed,,,16,11 - Bug;component: numpy.core,https://api.github.com/repos/numpy/numpy/issues/6553,b'BUG: Fix partition and argpartition error for empty input. Closes #6530',b'Fixes #6530 .'
6551,112845872,mdboom,charris,2015-10-22 16:53:25,2016-01-16 16:52:04,2016-01-16 16:38:07,closed,,,47,11 - Bug;component: build,https://api.github.com/repos/numpy/numpy/issues/6551,b'matplotlib does not build with numpy master',"b'Something has changed in numpy.distutils that is causing matplotlib to not build.\r\n\r\nI\'ve tried `git bisecting`, but the history seems a little convoluted and it isn\'t helping to find the issue.\r\n\r\n```\r\nTraceback (most recent call last):\r\n  File ""/home/mdboom/.pyenv/versions/3.5.0/lib/python3.5/site-packages/setuptools/sandbox.py"", line 152, in save_modules\r\n    yield saved\r\n  File ""/home/mdboom/.pyenv/versions/3.5.0/lib/python3.5/site-packages/setuptools/sandbox.py"", line 193, in setup_context\r\n    yield\r\n  File ""/home/mdboom/.pyenv/versions/3.5.0/lib/python3.5/site-packages/setuptools/sandbox.py"", line 237, in run_setup\r\n    DirectorySandbox(setup_dir).run(runner)\r\n  File ""/home/mdboom/.pyenv/versions/3.5.0/lib/python3.5/site-packages/setuptools/sandbox.py"", line 267, in run\r\n    return func()\r\n  File ""/home/mdboom/.pyenv/versions/3.5.0/lib/python3.5/site-packages/setuptools/sandbox.py"", line 236, in runner\r\n    _execfile(setup_script, ns)\r\n  File ""/home/mdboom/.pyenv/versions/3.5.0/lib/python3.5/site-packages/setuptools/sandbox.py"", line 46, in _execfile\r\n    exec(code, globals, locals)\r\n  File ""/tmp/easy_install-ywbtwurq/numpy-1.10.1/setup.py"", line 264, in <module>\r\n    if isinstance(package, str):\r\n  File ""/tmp/easy_install-ywbtwurq/numpy-1.10.1/setup.py"", line 256, in setup_package\r\n    # Go through all of the packages and figure out which ones we are\r\n  File ""/home/mdboom/.pyenv/versions/3.5.0/lib/python3.5/site-packages/numpy/distutils/core.py"", line 135, in setup\r\n    config = configuration()\r\n  File ""/tmp/easy_install-ywbtwurq/numpy-1.10.1/setup.py"", line 156, in configuration\r\n    \r\n  File ""/home/mdboom/.pyenv/versions/3.5.0/lib/python3.5/site-packages/numpy/distutils/misc_util.py"", line 1001, in add_subpackage\r\n    caller_level = 2)\r\n  File ""/home/mdboom/.pyenv/versions/3.5.0/lib/python3.5/site-packages/numpy/distutils/misc_util.py"", line 970, in get_subpackage\r\n    caller_level = caller_level + 1)\r\n  File ""/home/mdboom/.pyenv/versions/3.5.0/lib/python3.5/site-packages/numpy/distutils/misc_util.py"", line 907, in _get_configuration_from_setup_py\r\n    config = setup_module.configuration(*args)\r\n  File ""numpy/setup.py"", line 11, in configuration\r\n    from setuptools.command.test import test as TestCommand\r\n  File ""/home/mdboom/.pyenv/versions/3.5.0/lib/python3.5/site-packages/numpy/distutils/misc_util.py"", line 1001, in add_subpackage\r\n    caller_level = 2)\r\n  File ""/home/mdboom/.pyenv/versions/3.5.0/lib/python3.5/site-packages/numpy/distutils/misc_util.py"", line 970, in get_subpackage\r\n    caller_level = caller_level + 1)\r\n  File ""/home/mdboom/.pyenv/versions/3.5.0/lib/python3.5/site-packages/numpy/distutils/misc_util.py"", line 882, in _get_configuration_from_setup_py\r\n    (\'.py\', \'U\', 1))\r\n  File ""/home/mdboom/.pyenv/versions/3.5.0/lib/python3.5/imp.py"", line 234, in load_module\r\n    return load_source(name, filename, file)\r\n  File ""/home/mdboom/.pyenv/versions/3.5.0/lib/python3.5/imp.py"", line 172, in load_source\r\n    module = _load(spec)\r\n  File ""<frozen importlib._bootstrap>"", line 693, in _load\r\n  File ""<frozen importlib._bootstrap>"", line 673, in _load_unlocked\r\n  File ""<frozen importlib._bootstrap_external>"", line 662, in exec_module\r\n  File ""<frozen importlib._bootstrap>"", line 222, in _call_with_frames_removed\r\n  File ""numpy/core/setup.py"", line 13, in <module>\r\n    import sys\r\nImportError: No module named \'numpy._build_utils\'\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\nTraceback (most recent call last):\r\n  File ""setup.py"", line 381, in <module>\r\n    **extra_args\r\n  File ""/home/mdboom/.pyenv/versions/3.5.0/lib/python3.5/distutils/core.py"", line 108, in setup\r\n    _setup_distribution = dist = klass(attrs)\r\n  File ""/home/mdboom/.pyenv/versions/3.5.0/lib/python3.5/site-packages/setuptools/dist.py"", line 268, in __init__\r\n    self.fetch_build_eggs(attrs[\'setup_requires\'])\r\n  File ""/home/mdboom/.pyenv/versions/3.5.0/lib/python3.5/site-packages/setuptools/dist.py"", line 313, in fetch_build_eggs\r\n    replace_conflicting=True,\r\n  File ""/home/mdboom/.pyenv/versions/3.5.0/lib/python3.5/site-packages/pkg_resources/__init__.py"", line 836, in resolve\r\n    dist = best[req.key] = env.best_match(req, ws, installer)\r\n  File ""/home/mdboom/.pyenv/versions/3.5.0/lib/python3.5/site-packages/pkg_resources/__init__.py"", line 1081, in best_match\r\n    return self.obtain(req, installer)\r\n  File ""/home/mdboom/.pyenv/versions/3.5.0/lib/python3.5/site-packages/pkg_resources/__init__.py"", line 1093, in obtain\r\n    return installer(requirement)\r\n  File ""/home/mdboom/.pyenv/versions/3.5.0/lib/python3.5/site-packages/setuptools/dist.py"", line 380, in fetch_build_egg\r\n    return cmd.easy_install(req)\r\n  File ""/home/mdboom/.pyenv/versions/3.5.0/lib/python3.5/site-packages/setuptools/command/easy_install.py"", line 629, in easy_install\r\n    return self.install_item(spec, dist.location, tmpdir, deps)\r\n  File ""/home/mdboom/.pyenv/versions/3.5.0/lib/python3.5/site-packages/setuptools/command/easy_install.py"", line 659, in install_item\r\n    dists = self.install_eggs(spec, download, tmpdir)\r\n  File ""/home/mdboom/.pyenv/versions/3.5.0/lib/python3.5/site-packages/setuptools/command/easy_install.py"", line 842, in install_eggs\r\n    return self.build_and_install(setup_script, setup_base)\r\n  File ""/home/mdboom/.pyenv/versions/3.5.0/lib/python3.5/site-packages/setuptools/command/easy_install.py"", line 1070, in build_and_install\r\n    self.run_setup(setup_script, setup_base, args)\r\n  File ""/home/mdboom/.pyenv/versions/3.5.0/lib/python3.5/site-packages/setuptools/command/easy_install.py"", line 1056, in run_setup\r\n    run_setup(setup_script, args)\r\n  File ""/home/mdboom/.pyenv/versions/3.5.0/lib/python3.5/site-packages/setuptools/sandbox.py"", line 240, in run_setup\r\n    raise\r\n  File ""/home/mdboom/.pyenv/versions/3.5.0/lib/python3.5/contextlib.py"", line 77, in __exit__\r\n    self.gen.throw(type, value, traceback)\r\n  File ""/home/mdboom/.pyenv/versions/3.5.0/lib/python3.5/site-packages/setuptools/sandbox.py"", line 193, in setup_context\r\n    yield\r\n  File ""/home/mdboom/.pyenv/versions/3.5.0/lib/python3.5/contextlib.py"", line 77, in __exit__\r\n    self.gen.throw(type, value, traceback)\r\n  File ""/home/mdboom/.pyenv/versions/3.5.0/lib/python3.5/site-packages/setuptools/sandbox.py"", line 164, in save_modules\r\n    saved_exc.resume()\r\n  File ""/home/mdboom/.pyenv/versions/3.5.0/lib/python3.5/site-packages/setuptools/sandbox.py"", line 139, in resume\r\n    compat.reraise(type, exc, self._tb)\r\n  File ""/home/mdboom/.pyenv/versions/3.5.0/lib/python3.5/site-packages/setuptools/compat.py"", line 65, in reraise\r\n    raise value.with_traceback(tb)\r\n  File ""/home/mdboom/.pyenv/versions/3.5.0/lib/python3.5/site-packages/setuptools/sandbox.py"", line 152, in save_modules\r\n    yield saved\r\n  File ""/home/mdboom/.pyenv/versions/3.5.0/lib/python3.5/site-packages/setuptools/sandbox.py"", line 193, in setup_context\r\n    yield\r\n  File ""/home/mdboom/.pyenv/versions/3.5.0/lib/python3.5/site-packages/setuptools/sandbox.py"", line 237, in run_setup\r\n    DirectorySandbox(setup_dir).run(runner)\r\n  File ""/home/mdboom/.pyenv/versions/3.5.0/lib/python3.5/site-packages/setuptools/sandbox.py"", line 267, in run\r\n    return func()\r\n  File ""/home/mdboom/.pyenv/versions/3.5.0/lib/python3.5/site-packages/setuptools/sandbox.py"", line 236, in runner\r\n    _execfile(setup_script, ns)\r\n  File ""/home/mdboom/.pyenv/versions/3.5.0/lib/python3.5/site-packages/setuptools/sandbox.py"", line 46, in _execfile\r\n    exec(code, globals, locals)\r\n  File ""/tmp/easy_install-ywbtwurq/numpy-1.10.1/setup.py"", line 264, in <module>\r\n    if isinstance(package, str):\r\n  File ""/tmp/easy_install-ywbtwurq/numpy-1.10.1/setup.py"", line 256, in setup_package\r\n    # Go through all of the packages and figure out which ones we are\r\n  File ""/home/mdboom/.pyenv/versions/3.5.0/lib/python3.5/site-packages/numpy/distutils/core.py"", line 135, in setup\r\n    config = configuration()\r\n  File ""/tmp/easy_install-ywbtwurq/numpy-1.10.1/setup.py"", line 156, in configuration\r\n    \r\n  File ""/home/mdboom/.pyenv/versions/3.5.0/lib/python3.5/site-packages/numpy/distutils/misc_util.py"", line 1001, in add_subpackage\r\n    caller_level = 2)\r\n  File ""/home/mdboom/.pyenv/versions/3.5.0/lib/python3.5/site-packages/numpy/distutils/misc_util.py"", line 970, in get_subpackage\r\n    caller_level = caller_level + 1)\r\n  File ""/home/mdboom/.pyenv/versions/3.5.0/lib/python3.5/site-packages/numpy/distutils/misc_util.py"", line 907, in _get_configuration_from_setup_py\r\n    config = setup_module.configuration(*args)\r\n  File ""numpy/setup.py"", line 11, in configuration\r\n    from setuptools.command.test import test as TestCommand\r\n  File ""/home/mdboom/.pyenv/versions/3.5.0/lib/python3.5/site-packages/numpy/distutils/misc_util.py"", line 1001, in add_subpackage\r\n    caller_level = 2)\r\n  File ""/home/mdboom/.pyenv/versions/3.5.0/lib/python3.5/site-packages/numpy/distutils/misc_util.py"", line 970, in get_subpackage\r\n    caller_level = caller_level + 1)\r\n  File ""/home/mdboom/.pyenv/versions/3.5.0/lib/python3.5/site-packages/numpy/distutils/misc_util.py"", line 882, in _get_configuration_from_setup_py\r\n    (\'.py\', \'U\', 1))\r\n  File ""/home/mdboom/.pyenv/versions/3.5.0/lib/python3.5/imp.py"", line 234, in load_module\r\n    return load_source(name, filename, file)\r\n  File ""/home/mdboom/.pyenv/versions/3.5.0/lib/python3.5/imp.py"", line 172, in load_source\r\n    module = _load(spec)\r\n  File ""<frozen importlib._bootstrap>"", line 693, in _load\r\n  File ""<frozen importlib._bootstrap>"", line 673, in _load_unlocked\r\n  File ""<frozen importlib._bootstrap_external>"", line 662, in exec_module\r\n  File ""<frozen importlib._bootstrap>"", line 222, in _call_with_frames_removed\r\n  File ""numpy/core/setup.py"", line 13, in <module>\r\n    import sys\r\nImportError: No module named \'numpy._build_utils\'\r\n```'"
6544,112675162,charris,charris,2015-10-21 20:44:37,2015-10-21 21:53:02,2015-10-21 21:53:00,closed,,,0,00 - Backport;11 - Bug;component: build,https://api.github.com/repos/numpy/numpy/issues/6544,b'Backport 6526: Fix use of __doc__ in setup.py for -OO mode',b'   *Fix use of __doc__ in setup.py for -OO mode\r\n   *Do a TravisCI build with PYTHONOPTIMIZE=2\r\n'
6543,112623588,charris,charris,2015-10-21 16:04:57,2015-10-27 22:17:39,2015-10-21 16:34:21,closed,,,0,00 - Backport;11 - Bug;component: numpy.ma,https://api.github.com/repos/numpy/numpy/issues/6543,b'Backport 6537',"b'BUG: scalar argument to ma.atleast_* return arrays\r\n\r\nThe np.ma.atleast_1d, np.ma.atleast_2d, np.ma.atleast_3d and np.ma.diagflat\r\nfunction return arrays when given a scalar in the same manner as their non-ma\r\ncounterparts.  Previously these function would return None.\r\n\r\nAdditionally, the np.ma vstack, row_stack, hstack, column_stack, dstack, and\r\nhsplit functions now raise an expection when given a scalar argument.\r\n\r\ncloses #3367'"
6541,112615957,charris,charris,2015-10-21 15:31:25,2015-10-21 16:05:20,2015-10-21 16:05:17,closed,,,0,00 - Backport;11 - Bug;component: numpy.ma,https://api.github.com/repos/numpy/numpy/issues/6541,b'Backport 6538: BUG: ma.masked_values does not shrink mask if requested',"b'When called with the shrink parameter set to False, np.ma.masked_values\r\nwill create a False filled array mask and not shrink the mask.\r\nPreviously the mask would be shrunk to a single False scalar.\r\n\r\ncloses #2674'"
6538,112497238,jjhelmus,charris,2015-10-21 02:16:41,2015-10-27 21:56:04,2015-10-21 15:13:57,closed,,,1,11 - Bug;component: numpy.ma,https://api.github.com/repos/numpy/numpy/issues/6538,b'BUG: ma.masked_values does not shrink mask if requested',"b'When called with the shrink parameter set to False, np.ma.masked_values\r\nwill create a False filled array mask and not shrink the mask.\r\nPreviously the mask would be shrunk to a single False scalar.\r\n\r\ncloses #2674'"
6537,112494585,jjhelmus,charris,2015-10-21 01:44:02,2015-10-27 22:19:05,2015-10-21 16:02:57,closed,,,2,11 - Bug;component: numpy.ma,https://api.github.com/repos/numpy/numpy/issues/6537,b'BUG: scalar argument to ma.atleast_* return arrays',"b'The np.ma.atleast_1d, np.ma.atleast_2d, np.ma.atleast_3d and np.ma.diagflat\r\nfunction return arrays when given a scalar in the same manner as their non-ma\r\ncounterparts.  Previously these function would return None.\r\n\r\nAdditionally, the np.ma vstack, row_stack, hstack, column_stack, dstack, and\r\nhsplit functions now raise an expection when given a scalar argument.\r\n\r\ncloses #3367'"
6527,112227999,ethankruse,charris,2015-10-19 20:38:19,2015-10-27 21:54:48,2015-10-21 23:39:30,closed,,,6,11 - Bug;12 - Regression;component: numpy.core,https://api.github.com/repos/numpy/numpy/issues/6527,b'Potential fix for #6462',b'This fixes the IndexError when taking the median of an empty array in the new median implementation (#6462). Taking the median over an axis of size 0 now returns a NaN as it had in previous implementations instead of the IndexError.'
6526,112214899,dsanders11,charris,2015-10-19 19:28:34,2015-10-27 21:55:22,2015-10-21 20:36:29,closed,,,8,11 - Bug;component: build,https://api.github.com/repos/numpy/numpy/issues/6526,b'Fix use of __doc__ in setup.py for -OO mode',b'Currently setup will fail when using `pip install numpy` if the `-OO` flag is used (also enabled via `PYTHONOPTIMIZE=2`) because docstrings are stripped (which is the point of the mode).\r\n\r\nVery minor change that allows the docstring to be missing for this case.'
6504,112041414,charris,charris,2015-10-18 21:09:23,2015-10-18 21:38:24,2015-10-18 21:38:23,closed,,,0,00 - Backport;11 - Bug;component: numpy.core,https://api.github.com/repos/numpy/numpy/issues/6504,"b""backport 6500: BUG: recarrays viewed as subarrays don't convert to np.record type""","b""Backport #6500.\r\n\r\nRecord array views were updated in #5943 to return np.record dtype\r\nwhere possible, but forgot about the case of sub-arrays.\r\n\r\nThat's fixed here, so accessing subarray fields by attribute or index\r\nworks sensibly, as well as viewing a record array as a subarray dtype,\r\nand printing subarrays.\r\n\r\nThis also happens to fix #6459, since it affects the same lines.\r\n\r\nFixes #6497 #6459"""
6500,111995242,ahaldane,charris,2015-10-18 02:06:21,2015-10-27 22:03:32,2015-10-18 16:40:26,closed,,,2,11 - Bug;component: numpy.core,https://api.github.com/repos/numpy/numpy/issues/6500,"b""BUG: recarrays viewed as subarrays don't convert to np.record type""","b""Record array views were updated in #5943 to return np.record dtype\r\nwhere possible, but forgot about the case of sub-arrays.\r\n\r\nThat's fixed here, so accessing subarray fields by attribute or index\r\nworks sensibly, as well as viewing a record array as a subarray dtype,\r\nand printing subarrays.\r\n\r\nThis also happens to fix #6459, since it affects the same lines.\r\n\r\nFixes #6497 #6459"""
6490,111889500,charris,charris,2015-10-16 18:46:54,2015-10-27 19:59:18,2015-10-16 23:37:05,closed,,,2,00 - Backport;11 - Bug;component: numpy.f2py,https://api.github.com/repos/numpy/numpy/issues/6490,b'backport 6487: BUG: Allow nested use of parameters for array dimensions in f2py.',b'Nested use of parameters in specifying dimensions caused problems.\r\n\r\nFor example\r\n\r\n      parameter (i=7)\r\n      common buf(nvar*(nvar+1) * (n + 1))\r\n\r\nThis fix was suggested by Pearu on github.\r\n\r\nCloses #5877.'
6489,111889230,charris,charris,2015-10-16 18:45:29,2015-10-16 23:37:23,2015-10-16 23:37:21,closed,,,0,00 - Backport;11 - Bug;component: numpy.f2py,https://api.github.com/repos/numpy/numpy/issues/6489,b'Backport 6488: BUG: allow extension of common blocks in numpy.f2py',"b'    BUG: allow extension of common blocks in numpy.f2py\r\n    \r\n    Lack of this feature resulted in the generation of incorrect *.pyf\r\n    files.\r\n    \r\n    For example, the pyf file created by:\r\n    \r\n          subroutine sub3 (some arguments)\r\n          real a, b, c, d\r\n          common /coeff/ a, b\r\n          common /coeff/ c, d\r\n    \r\n          <do stuff>\r\n    \r\n          return\r\n          end\r\n    \r\n    Should contain both common statements the declaration of all four\r\n    variables a, b, c, and d.\r\n'"
6488,111879660,charris,charris,2015-10-16 17:54:39,2015-11-02 20:16:12,2015-10-16 18:34:37,closed,,,0,11 - Bug;component: numpy.f2py,https://api.github.com/repos/numpy/numpy/issues/6488,b'Cleanup 6306: BUG: allow extension of common blocks in numpy.f2py',"b'Cleanup of #6306.\r\n\r\n    BUG: allow extension of common blocks in numpy.f2py\r\n    \r\n    Lack of this feature resulted in the generation of incorrect *.pyf\r\n    files.\r\n    \r\n    For example, the pyf file created by:\r\n    \r\n          subroutine sub3 (some arguments)\r\n          real a, b, c, d\r\n          common /coeff/ a, b\r\n          common /coeff/ c, d\r\n    \r\n          <do stuff>\r\n    \r\n          return\r\n          end\r\n    \r\n    Should contain both common statements the declaration of all four\r\n    variables a, b, c, and d.\r\n    \r\n    Closes #5876.\r\n\r\n'"
6487,111879443,charris,charris,2015-10-16 17:53:05,2015-10-27 22:02:12,2015-10-16 18:23:02,closed,,,0,11 - Bug;component: numpy.f2py,https://api.github.com/repos/numpy/numpy/issues/6487,b'Cleanup of 6307: BUG: Allow nested use of parameters for array dimensions in f2py.',b'Cleanup of #6307.\r\n\r\nNested use of parameters in specifying dimensions caused problems.\r\n\r\nFor example\r\n\r\n      parameter (i=7)\r\n      common buf(nvar*(nvar+1) * (n + 1))\r\n\r\nThis fix was suggested by Pearu on github.\r\n\r\nCloses #5877.'
6481,111841537,charris,charris,2015-10-16 14:17:52,2015-10-16 16:41:22,2015-10-16 14:39:21,closed,,,0,11 - Bug;component: build,https://api.github.com/repos/numpy/numpy/issues/6481,b'LIBPATH with spaces is now supported Python 2.7+ and Win32',b'Forward port of #5765. The original was made against 1.9.x.'
6461,111048226,rgommers,charris,2015-10-12 20:19:12,2015-10-14 22:21:16,2015-10-12 21:47:53,closed,,,5,11 - Bug;component: numpy.testing,https://api.github.com/repos/numpy/numpy/issues/6461,b'TST: fix forgotten change of not creating errors from test warnings i 1.10.x',b'See https://github.com/numpy/numpy/blob/master/doc/HOWTO_RELEASE.rst.txt#handle-test-warnings\r\n\r\nCloses https://github.com/scipy/scipy/issues/5331#issuecomment-147504218'
6460,111046566,behrisch,charris,2015-10-12 20:11:08,2015-10-16 16:50:31,2015-10-13 20:21:31,closed,,,2,11 - Bug;component: numpy.core,https://api.github.com/repos/numpy/numpy/issues/6460,b'BUG: Replacing the os.environ.clear by less invasive procedure',b'This is mainly a workaround for bug https://bugs.python.org/issue20658 which lets the numpy initialization fail at the os.environ.clear call if the environment contains unusual keys. I also think it is generally a good idea to keep os.environ modifications to a minimum.\r\n'
6444,110807490,charris,charris,2015-10-10 17:40:13,2015-11-02 20:16:15,2015-10-11 14:43:17,closed,,,0,11 - Bug;component: build,https://api.github.com/repos/numpy/numpy/issues/6444,"b'Update 6440, BLD: enable SSE2 for 32-bit msvc 9 and 10 compilers.'",b'Add comment to #6440 explaining why SSE2 is required.'
6436,110726048,juliantaylor,charris,2015-10-09 19:55:14,2015-10-10 17:22:36,2015-10-10 17:22:36,closed,,,3,11 - Bug;component: build,https://api.github.com/repos/numpy/numpy/issues/6436,b'MAINT: remove Wreturn-type warnings from config checks',b'closes gh-6427'
6432,110584593,jjhelmus,ahaldane,2015-10-09 04:05:42,2015-10-12 21:53:37,2015-10-12 20:54:41,closed,,,5,11 - Bug;component: numpy.ma,https://api.github.com/repos/numpy/numpy/issues/6432,b'BUG: ma.put expands nomask',b'Previously when put was used on a MaskedArray with nomask the mask would be\r\nincorrectly set to the mask of the values argument.\r\n\r\ncloses #6425'
6427,110419225,toddrme2178,charris,2015-10-08 10:33:03,2015-10-12 09:31:10,2015-10-10 17:22:36,closed,,,17,11 - Bug;component: build,https://api.github.com/repos/numpy/numpy/issues/6427,b'Build checks failing on _configtest.c: no-return-in-nonvoid-function  ',"b""I am currently trying to build numpy for openSUSE, and I am getting the following issue, which is considered a serious issue and thus results in a build failure:\r\n\r\n    E: python-numpy no-return-in-nonvoid-function _configtest.c:10\r\n\r\nThis error is due to `_configtest.c` having a function that is non-void, but doesn't return anything.  However, I am can't find `_configtest.c` (it seems to be generated on-the-fly) so I can't figure out exactly where the problem is."""
6413,109843088,charris,charris,2015-10-05 17:07:51,2015-10-05 17:33:33,2015-10-05 17:33:25,closed,,,0,11 - Bug;component: numpy.core,https://api.github.com/repos/numpy/numpy/issues/6413,b'BUG: Fix missing np prefix in test_multiarray.py.',b'Bug introduced in 68e61c2f.'
6400,109512388,jjhelmus,charris,2015-10-02 15:17:40,2015-10-04 15:11:58,2015-10-04 15:11:43,closed,,,3,11 - Bug;component: numpy.ma,https://api.github.com/repos/numpy/numpy/issues/6400,b'BUG: numpy.ma.round works on zero dimensional arrays',
6386,108770456,charris,charris,2015-09-29 00:06:11,2015-09-29 01:59:35,2015-09-29 01:59:32,closed,,,0,00 - Backport;11 - Bug;component: numpy.core,https://api.github.com/repos/numpy/numpy/issues/6386,b'BUG: Fix PyObject_Cmp in npy_3kcompat.h.',b'The old version was interpreting a PyObject_RichCompareBool return of 0\r\nas success when it actually means failure. The fix is to replace 0 by 1.'
6376,108552705,charris,charris,2015-09-27 18:39:00,2015-09-27 19:11:46,2015-09-27 19:11:43,closed,,,0,00 - Backport;11 - Bug;component: numpy.lib,https://api.github.com/repos/numpy/numpy/issues/6376,b'Backport gh 6361',"b'    BUG: Expanded warning conditions for array_split\r\n    \r\n    Zero arrays can also occur with any of the partitions sub_arys[i]\r\n    induced by array_split, not just the final partition sub_arys[-1].\r\n    \r\n    Modified by seberg.\r\n    Closes gh-5771\r\n'"
6375,108551581,charris,charris,2015-09-27 18:13:05,2015-11-02 20:15:13,2015-09-27 18:39:37,closed,,,0,00 - Backport;11 - Bug;component: numpy.core,https://api.github.com/repos/numpy/numpy/issues/6375,b'Backport gh 6372',"b'REV: Make sure ravel returns a contiguous array\r\n    \r\nThis is a bit more then it used to do, so it is not a complete\r\nrevert. Some of the ""weird"" cases where a copy was unnecessarily\r\ndone will now only be gone with RELAXED_STRIDES_CHECKING.'"
6374,108549983,charris,charris,2015-09-27 17:36:44,2015-09-27 18:00:40,2015-09-27 18:00:38,closed,,,0,00 - Backport;11 - Bug;component: numpy.core,https://api.github.com/repos/numpy/numpy/issues/6374,b'Backport gh-6373',"b'BUG: Fix vdot for uncontiguous arrays.\r\n\r\nNote that using Newshape also means that less copying is done\r\nin principle, because ravel will always return a contiguous\r\narray.'"
6373,108543915,seberg,charris,2015-09-27 15:51:42,2015-09-27 17:46:13,2015-09-27 17:29:29,closed,,,1,11 - Bug;component: numpy.core,https://api.github.com/repos/numpy/numpy/issues/6373,b'BUG: Fix vdot for uncontiguous arrays.',"b'Note that using Newshape also means that less copying is done\r\nin principle, because ravel will always return a contiguous\r\narray.'"
6371,108538512,seberg,charris,2015-09-27 14:12:21,2015-09-27 18:33:29,2015-09-27 18:33:09,closed,,,1,11 - Bug;component: numpy.lib,https://api.github.com/repos/numpy/numpy/issues/6371,b'BUG: Make sure warning for array split is always applied',"b'Replaces gh-5771, which stalled because I insisted on tests.'"
6362,108356087,seberg,charris,2015-09-25 16:13:11,2015-09-26 19:06:56,2015-09-26 17:36:14,closed,,,3,11 - Bug;component: numpy.linalg,https://api.github.com/repos/numpy/numpy/issues/6362,"b'BUG,ENH: allow linalg.cond to work on a stack of matrices'","b'This was buggy, because the underlying functions supported it\r\npartially but cond was not aware of this.\r\n\r\nCloses gh-6351'"
6361,108350490,seberg,ahaldane,2015-09-25 15:43:20,2015-09-28 19:26:44,2015-09-27 23:26:35,closed,,,7,11 - Bug;component: numpy.core,https://api.github.com/repos/numpy/numpy/issues/6361,b'BUG: Add void field at end of dtype.descr to match itemsize',b'dtype.descr returns void fields to explain the padding part of\r\nthe dtype. The last void field for the itemsize itself was however\r\nnot included.\r\n\r\nCloses gh-6359'
6347,108008910,charris,charris,2015-09-23 21:20:24,2015-09-25 17:40:57,2015-09-25 17:40:55,closed,,,2,11 - Bug;component: distribution,https://api.github.com/repos/numpy/numpy/issues/6347,b'Fix a couple of distribution problems',"b'* Fix pavement.py to use PEP440 naming for development distributions.\r\n* Add `cblasfuncs.c` and `python_xerbla.c` to `MANIFEST.in`\r\n\r\nThe last fixes a dependency of source distributions on `HAVE_CBLAS`, which is determined by the local configuration.'"
6346,108003639,ChristopherHogan,charris,2015-09-23 20:51:28,2015-10-01 17:28:29,2015-10-01 17:13:05,closed,,,9,11 - Bug;54 - Needs decision;component: numpy.core,https://api.github.com/repos/numpy/numpy/issues/6346,b'BUG: Guarantee non-zero is one in arctan2',"b'In numpy/core/src/npymath/npy_math.c.src there is a state machine\r\nsequence that assumes signbit returns either a 1 or 0. However, all\r\nthe online documentation states that it will return either a 0 or a\r\nnonzero value, which seems to be determined by the OS. These changes\r\nallow the code to work with a zero or nonzero value.\r\n\r\n- Andres Guzman-ballen, Intel'"
6343,107831224,charris,charris,2015-09-23 00:43:46,2015-09-25 17:41:02,2015-09-25 17:41:02,closed,,,7,11 - Bug,https://api.github.com/repos/numpy/numpy/issues/6343,b'zip/gz files produced by python setup.py sdist may have missing files',"b""In particular, `cblasfiles.c` and `python_xerbla.c` are missing when using `numpy-vendor`.The problem probably originates here:\r\n```\r\n    if blas_info and ('HAVE_CBLAS', None) in blas_info.get('define_macros', []):\r\n        extra_info = blas_info\r\n        multiarray_src.extend([join('src', 'multiarray', 'cblasfuncs.c'),\r\n                               join('src', 'multiarray', 'python_xerbla.c'),\r\n                               ])\r\n```\r\nWhich makes the list dependent on the environment. Does anyone have a good idea about how to work around that?"""
6330,107203733,cjermain,charris,2015-09-18 13:35:34,2015-10-07 20:32:53,2015-10-07 20:32:37,closed,,,13,11 - Bug;component: numpy.core,https://api.github.com/repos/numpy/numpy/issues/6330,b'BUG: only tell/seek np.fromfile when buffered',"b'This fixes bug #6246 in Python 3, by using the `io` module to check if the file object is a child of the [`RawIOBase`](https://docs.python.org/3/library/io.html#io.RawIOBase), which are always unbuffered. Since it is not buffered, there is no reason to call tell or seek, which can fail on some legitimate file objects (e.g. wking/pycomedi#3).'"
6307,106125487,2sn,charris,2015-09-12 03:34:08,2015-10-16 17:57:18,2015-10-16 17:57:18,closed,,,8,11 - Bug;component: numpy.f2py,https://api.github.com/repos/numpy/numpy/issues/6307,b'BUG: nested use of parameters in definition of arrays in numpy.f2py',b'Nested use of paramaters in definition of dimension caused problmes.\r\nIssue #5877.\r\n\r\nFor example\r\n\r\n      parameter (i=7)\r\n      common buf(nvar*(nvar+1) * (n + 1))\r\n\r\nthis is a fix as suggested by pearu on github.'
6306,106123913,2sn,charris,2015-09-12 02:45:38,2015-10-16 18:09:13,2015-10-16 18:09:13,closed,,,3,11 - Bug;component: numpy.f2py,https://api.github.com/repos/numpy/numpy/issues/6306,b'BUG: allow extension of common blocks rather than overwriting in numpy.f2py',b'This is in accordance with how FORTRAN77 handles multiple occurrences of\r\ncommon blocks.  Documentation has been updated accordingly.  This is the pull request for Issue  #5876'
6298,105763672,nbeaver,charris,2015-09-10 08:58:37,2016-02-01 20:57:00,2016-02-01 20:00:35,closed,,1.12.0 release,6,11 - Bug;component: numpy.core,https://api.github.com/repos/numpy/numpy/issues/6298,b'Check lower base limit in base_repr.',"b'A minor fix to ensure the range is as expected. (This is my first pull request, so let me know if I missed something in the protocol.)'"
6280,104457867,pitrou,jaimefrio,2015-09-02 11:17:06,2015-09-02 13:44:21,2015-09-02 12:34:16,closed,,,1,11 - Bug;component: numpy.core,https://api.github.com/repos/numpy/numpy/issues/6280,b'BUG: enforce signed char in extint128',"b'Whether a ""char"" is signed or unsigned is left undefined by the C standard.\r\nSome platforms such as armv7l actually seem to have an ""unsigned"" C char.\r\nEnforce a signed char where relevant.\r\n\r\n(fixes test_extint128 and test_mem_overlap on Raspberry Pi 2)'"
6254,103445660,njsmith,charris,2015-08-27 07:29:54,2015-08-27 15:07:01,2015-08-27 15:06:28,closed,,,5,00 - Backport;11 - Bug;component: numpy.core,https://api.github.com/repos/numpy/numpy/issues/6254,b'BUG: Fix refcounting for string comparison in array_richcompare',b'Regression introduced in 4b1f508a57549d8031a23160b40c7f87f47892ed\r\n\r\nCloses gh-6250.'
6245,103081966,seberg,charris,2015-08-25 17:56:56,2015-08-26 15:10:58,2015-08-26 13:16:31,closed,,,0,11 - Bug;component: numpy.core,https://api.github.com/repos/numpy/numpy/issues/6245,b'Index iter bug',"b'Fixes the wrong indexing check due to bad iterator. I think this is a candidate for backporting.\r\n\r\nI did not test if it is worth it to cache the value in the inner loop (not sure if it can make a difference anyway), but I doubt it.\r\nAlso added a warning to the documentation, it might be that grow inner loop flag has to be set as well to trigger this.'"
6243,103001793,dzagorny,charris,2015-08-25 11:21:48,2015-09-22 20:43:53,2015-09-22 20:42:36,closed,,,17,11 - Bug;component: build;component: numpy.distutils,https://api.github.com/repos/numpy/numpy/issues/6243,b'BLD: Intel distutils fixes',"b""Fixes:\r\n- Error ```failed with exit status -1073741502``` during build Scipy\r\n- MSVCCompiler overwrite 'lib' and 'include' environment variables (including Intel environment)\r\n- Issue with Scipy build in case, if python installed into folder with whitespaces"""
6229,102390407,atomicpirate,charris,2015-08-21 14:26:42,2016-02-20 19:01:07,2016-02-20 19:01:07,closed,,,9,11 - Bug;component: numpy.core;Easy Fix,https://api.github.com/repos/numpy/numpy/issues/6229,b'numpy.sign behaves oddly when dtype is numpy.object',"b'In [1]: import numpy\r\n\r\nIn [2]: foo = numpy.array([-.1, 0, .1])\r\n\r\nIn [3]: numpy.sign(foo)\r\nOut[3]: array([-1.,  0.,  1.])\r\n\r\nIn [4]: numpy.sign(foo.astype(numpy.object))\r\nOut[4]: array([1, -1, -1], dtype=object)\r\n\r\nThe underlying data is still just a float:\r\nIn [5]: type(foo.astype(numpy.object)[0])\r\nOut[5]: float\r\n\r\nThis result when using an array of numpy.object does not seem desirable. Either it should operate correctly on the underlying numbers or if called with invalid data (strings, etc) it should throw an exception. This way I could populate an array with heterogeneous data, say a mix of integers and floats, and still get a valid result.\r\n\r\nI tested this on:\r\nMac OS 10.6.8\r\nPython 3.4.2\r\nnumpy 1.9.2'"
6224,102077914,jaimefrio,jaimefrio,2015-08-20 07:17:23,2016-03-22 22:31:27,2016-03-22 22:31:27,closed,,,1,11 - Bug;54 - Needs decision;component: numpy.core,https://api.github.com/repos/numpy/numpy/issues/6224,"b'BUG: Concatenate with empty sequences, fixes #1586'","b""This is still WIP, as I may be complicating things more than needed. And tests are still missing.\r\n\r\nThe code avoids empty sequences in `concatenate` being converted to the default `float64` type, which causes a typically undesired behavior:\r\n\r\n```\r\n>>> np.concatenate(([], [1, 2, 3, 4])).dtype\r\ndtype('float64')\r\n```\r\n\r\nTo do so, it remembers the last dtype it got, either from an ndarray, of from a non-ndarray that was converted to a non-empty ndarray, and casts non-ndarrays that convert to empty ndarrays to that dtype. Since at the beginning there is no dtype to remember, leading non-ndarrays that convert to empty ndarrays are discarded in the first pass, and converted again in a second pass.\r\n\r\nBecause we are using the size of the resulting ndarray as the criterion for emptiness, it also works with nested empty sequences, i.e. both of these produce arguably correct results:\r\n\r\n```\r\n>>> np.concatenate(([], [[1, 2, 3, 4]]), axis=None)\r\narray([1, 2, 3, 4])\r\n>>> np.concatenate(([[]], [[1, 2, 3, 4]], [[]]), axis=None)\r\narray([1, 2, 3, 4])\r\n```\r\n\r\nThe second case was not contemplated in the original #1586 issue, and the code can probably be simplified a little if only strictly empty sequences trigger the cast. But it is probably a good thing that `[[]]` behaves the same as `[]`, right?\r\n\r\nThoughts on this are very welcome in order to write some meaningful tests."""
6221,101997181,cytsai,seberg,2015-08-19 20:57:19,2015-08-26 13:16:39,2015-08-26 13:16:39,closed,seberg,,5,11 - Bug;12 - Regression,https://api.github.com/repos/numpy/numpy/issues/6221,b'Advanced indexing using arrays created by as_strided',"b""Instead of using <code>np.indices</code>, I tried the following method which creates indices for advanced indexing using as_strided, but it behaved quite strange (at least in NumPy 1.9.2). E.g. <code>C=3</code> was fine but <code>C=4</code> gave error (out-of-bound IndexError). I was using NumPy 1.9.2 (MKL) under Python 2.7.10 (Anaconda 2.3.0 64-bit), and my system's NumPy 1.9.2 (Ubuntu 12.04 with Python 2.7.3) also got the same problem. However, NumPy 1.6.1 (on another machine) seemed to be fine.\r\n\r\n```\r\nimport numpy as np\r\nfrom numpy.lib.stride_tricks import as_strided\r\n\r\ndef indices(shape):\r\n\t\r\n\tI = ()\r\n\tfor d, D in enumerate(shape): I = I + (as_strided(np.arange(D), shape, (0,)*d+(8,)+(0,)*(len(shape)-d-1)), )\r\n\treturn I\r\n\r\nC = 4\r\nX = np.random.randn(10,55,C,C,49)\r\n\r\nI = np.argmax(X,-1)\r\nM1 = X[indices(I.shape) + (I,)]\r\nM2 = np.amax(X,-1)\r\nprint np.array_equal(M1,M2)\r\n```"""
6211,101410105,yolanda15,charris,2015-08-17 12:36:15,2015-08-21 04:55:17,2015-08-19 15:12:41,closed,,,4,11 - Bug;component: build,https://api.github.com/repos/numpy/numpy/issues/6211,b'BLD: fix for INTEL compiler build failure on linux when import msvc',"b""Intel compiler build on Linux fails due to MSVC related changes in master and 1.10.x:\r\n\r\nNameError: name 'MSVCCompiler' is not defined\r\n\r\nTry checking system platform before including MSVC related code for Windows. \r\n"""
6169,99304763,rgommers,charris,2015-08-05 21:40:22,2015-08-21 15:51:03,2015-08-21 14:01:55,closed,,,9,11 - Bug;component: numpy.distutils,https://api.github.com/repos/numpy/numpy/issues/6169,b'BLD: fix various issues for Intel Fortran and GFortran',"b""Closes gh-6095. Note that I haven't been able to test this, fixes are based on Intel docs and the description in gh-6095.  \r\n\r\nNote: each commit message has a more detailed description and links to the relevant page of the Intel docs."""
6127,97802374,mhvk,charris,2015-07-28 21:07:22,2016-02-10 09:12:46,2016-01-16 22:32:54,closed,,,29,11 - Bug;component: numpy.core,https://api.github.com/repos/numpy/numpy/issues/6127,b'BUG rounding error in divmod',"b""The `ndarray` implementation of `divmod` seems to do some incorrect rounding:\r\n```\r\n# regular python\r\ndivmod(78*6e-8, 6e-8)\r\n# (77.0, 5.999999999999965e-08)\r\n# makes sense; cannot represent number precisely as float\r\nimport numpy as np\r\nnp.__version__\r\n# '1.10.0.dev0+00f4fae'\r\ndivmod(np.array(78*6e-8), 6e-8)\r\n# (78.0, 5.9999999999999651e-08)\r\n# Oops!!\r\ndivmod(np.arange(77, 80)*6e-8, 6e-8)\r\n# (array([ 77.,  78.,  79.]),\r\n#   array([  2.24993127e-22,   6.00000000e-08,   6.00000000e-08]))\r\n```"""
6120,97340149,rgommers,rgommers,2015-07-26 18:35:59,2015-07-30 18:34:28,2015-07-30 17:01:33,closed,,,11,11 - Bug;component: numpy.lib,https://api.github.com/repos/numpy/numpy/issues/6120,b'BUG: regression in np.histogram',"b'After gh-6100 was merged, 4 tests for ``scipy.stats.histogram`` (which uses ``np.histogram`` under the hood) have started failing:\r\n\r\n    ======================================================================\r\n    FAIL: test_increased_bins (test_stats.TestHistogram)\r\n    ----------------------------------------------------------------------\r\n    Traceback (most recent call last):\r\n      File ""/home/rgommers/Code/scipy/scipy/stats/tests/test_stats.py"", line 984, in test_increased_bins\r\n        decimal=2)\r\n      File ""/home/rgommers/Code/numpy/numpy/testing/utils.py"", line 510, in assert_almost_equal\r\n        raise AssertionError(_build_err_msg())\r\n    AssertionError: \r\n    Arrays are not almost equal to 2 decimals\r\n     ACTUAL: 0\r\n     DESIRED: 10\r\n\r\n    ======================================================================\r\n    FAIL: test_reduced_bins (test_stats.TestHistogram)\r\n    ----------------------------------------------------------------------\r\n    Traceback (most recent call last):\r\n      File ""/home/rgommers/Code/scipy/scipy/stats/tests/test_stats.py"", line 949, in test_reduced_bins\r\n        decimal=2)\r\n      File ""/home/rgommers/Code/numpy/numpy/testing/utils.py"", line 510, in assert_almost_equal\r\n        raise AssertionError(_build_err_msg())\r\n    AssertionError: \r\n    Arrays are not almost equal to 2 decimals\r\n     ACTUAL: 0.07500000000000001\r\n     DESIRED: -1.8749999999999996\r\n\r\n    ======================================================================\r\n    FAIL: test_simple (test_stats.TestHistogram)\r\n    ----------------------------------------------------------------------\r\n    Traceback (most recent call last):\r\n      File ""/home/rgommers/Code/scipy/scipy/stats/tests/test_stats.py"", line 876, in test_simple\r\n        decimal=2)\r\n      File ""/home/rgommers/Code/numpy/numpy/testing/utils.py"", line 886, in assert_array_almost_equal\r\n        precision=decimal)\r\n      File ""/home/rgommers/Code/numpy/numpy/testing/utils.py"", line 708, in assert_array_compare\r\n        raise AssertionError(msg)\r\n    AssertionError: \r\n    Arrays are not almost equal to 2 decimals\r\n\r\n    (mismatch 20.0%)\r\n     x: array([ 1.,  1.,  1.,  2.,  2.,  1.,  1.,  0.,  1.,  1.])\r\n     y: array([ 1.,  1.,  1.,  2.,  1.,  2.,  1.,  0.,  1.,  1.])\r\n\r\n    ======================================================================\r\n    FAIL: test_weighting (test_stats.TestHistogram)\r\n    ----------------------------------------------------------------------\r\n    Traceback (most recent call last):\r\n      File ""/home/rgommers/Code/scipy/scipy/stats/tests/test_stats.py"", line 923, in test_weighting\r\n        decimal=2)\r\n      File ""/home/rgommers/Code/numpy/numpy/testing/utils.py"", line 886, in assert_array_almost_equal\r\n        precision=decimal)\r\n      File ""/home/rgommers/Code/numpy/numpy/testing/utils.py"", line 708, in assert_array_compare\r\n        raise AssertionError(msg)\r\n    AssertionError: \r\n    Arrays are not almost equal to 2 decimals\r\n\r\n    (mismatch 20.0%)\r\n     x: array([   4. ,    0. ,    4.5,   -0.9,    0. ,    0.3,  110.2,    0. ,\r\n              0. ,   42. ])\r\n     y: array([   4. ,    0. ,    4.5,   -0.9,    0. ,    0.3,    7. ,  103.2,\r\n              0. ,   42. ])\r\n\r\n    ----------------------------------------------------------------------\r\n\r\nAs this is a regression, it should be looked at for 1.10'"
6112,97184636,charris,jaimefrio,2015-07-25 02:56:07,2015-07-25 19:57:54,2015-07-25 04:59:09,closed,,,1,11 - Bug;component: numpy.core,https://api.github.com/repos/numpy/numpy/issues/6112,b'BUG: Fix misuse of void* in arraytypes.c.src.',"b'A char offset was being added to a void* in the UNICODE_setitem\r\nfunction.\r\n\r\nCloses #6110, which also had the fix. Thanks @seek.'"
6107,97006302,SuperFluffy,charris,2015-07-24 08:51:26,2015-07-26 14:50:07,2015-07-26 14:50:07,closed,,,1,11 - Bug;component: Documentation,https://api.github.com/repos/numpy/numpy/issues/6107,b'Documentation guidelines: dead link to Q+A',"b'The [other points to consider section][1] in the documentation contains the following statement:\r\n\r\n> Questions and Answers : For general questions on how to write docstrings that are not answered in\r\n> this document, refer to http://docs.scipy.org/numpy/Questions+Answers/.\r\n\r\nIf you try to open that URL you will quickly get the following error thrown at you:\r\n\r\n> Not Found\r\n> \r\n> The requested URL /numpy/Questions+Answers/ was not found on this server.\r\n\r\nPlease fix, as I am quite interested in that section.\r\n\r\n[1]: https://github.com/numpy/numpy/blob/master/doc/HOWTO_DOCUMENT.rst.txt#other-points-to-keep-in-mind'"
6095,96016889,slishak,charris,2015-07-20 08:45:55,2015-08-21 14:01:55,2015-08-21 14:01:55,closed,rgommers,,4,11 - Bug;component: numpy.distutils,https://api.github.com/repos/numpy/numpy/issues/6095,b'Intel compilers not working with distutils',"b'I\'m having some issues using distutils to compile some C and Fortran code in another package. I\'ve built NumPy from source as the Intel C compilers in Windows don\'t seem to be supported at all in 1.9.2. I\'m using Python 2.7.10 (32-bit) and Intel Parallel Studio XE 2015. \r\n\r\nI had to make some changes to the code to get things working at all. The first issue appeared to be in numpy/distutils/intelccompiler.py: I had to change ""from numpy.distutils.msvc9compiler"" to ""from distutils.msvc9compiler"" as I was getting this error:\r\n\r\n```\r\nNo module named msvc9compiler in numpy.distutils; trying from distutils\r\nerror: can\'t compile C/C++ code: unable to load module \'distutils.intelccompiler\r\n```\r\n\r\nThis got me a little further in the build process, but then I had a problem with the Fortran compiler:\r\n\r\n```\r\nifort: command line error: Unrecognized keyword \'IA-32\' for option \'/arch\'\r\n```\r\n\r\nI removed the /arch:IA-32 flag from IntelVisualFCompiler.get_flags_arch in numpy/distutils/fcompiler/intel.py, which again got me a little further, but then it failed at the linking stage. It appears that ifort gets called with arguments that look like this:\r\n\r\n```\r\nC:\\Program Files (x86)\\Intel\\Composer XE 2015\\bin\\ia32\\ifort.exe -shared -shared [.obj files] -LC:\\Python27\\libs -LC:\\Python27\\PCbuild [more library paths] -lpython27 [more lib references] /OUT:[output .pyd file]\r\n```\r\n\r\nThese are not valid arguments to ifort, so I get a lot of warnings like this:\r\n\r\n```\r\nifort: command line warning #10006: ignoring unknown option \'/shared\'\r\nifort: command line warning #10006: ignoring unknown option \'/shared\'\r\nifort: command line warning #10006: ignoring unknown option \'/LC:\\Python27\\libs\'\r\nifort: command line warning #10006: ignoring unknown option \'/lpython27\'\r\n```\r\n\r\nand then a lot more spam about unknown options starting with /O due to the /OUT argument (it expanded everything after /O as separate optimisation options, like /OU /OT etc). I think ifort expects commands that look more like the following:\r\n\r\n```\r\nC:\\Program Files (x86)\\Intel\\Composer XE 2015\\bin\\ia32\\ifort.exe /exe:[output .pyd file] [.obj files] /link /DLL /LIBPATH:C:\\Python27\\libs /LIBPATH:C:\\Python27\\PCbuild [more library paths] python27.lib [more lib references]\r\n```\r\n\r\nRunning this command works a lot better, but I still got a few unresolved external symbol errors which I think are probably unrelated to the issues above and I still haven\'t resolved. However, I thought you should at least be made aware of the above fixes I needed to at least stand a chance of getting things working!'"
6094,95924438,astrofrog,ahaldane,2015-07-19 15:28:40,2015-11-26 17:27:24,2015-10-05 02:04:16,closed,,,13,11 - Bug;component: numpy.ma,https://api.github.com/repos/numpy/numpy/issues/6094,b'BUG: Fixed a bug with string representation of masked structured arrays',"b""This is a fix for the issue reported in https://github.com/numpy/numpy/issues/6019 and includes a regression test.\r\n\r\nOne thing I am not sure about is what the string representation should look like if the column is e.g. 2-dimensional - at the moment it will include a line return, but I'm not sure if that's desirable? I could strip out the line returns in that case?"""
6063,94485399,githubmlai,charris,2015-07-11 15:56:23,2016-01-12 17:41:34,2016-01-12 17:41:34,closed,,,14,11 - Bug;component: npy_math,https://api.github.com/repos/numpy/numpy/issues/6063,b'FAIL: test_umath.TestComplexFunctions.test_branch_cuts',"b'Got following error when running ""runtests.py"" on linux 64 bit.\r\n```\r\n[mlai@begws92 numpy]$ uname -a\r\nLinux begws92 2.6.32-358.23.2.el6.x86_64 #1 SMP Sat Sep 14 05:32:37 EDT 2013 x86_64 x86_64 x86_64 GNU/Linux\r\n\r\n\r\n======================================================================\r\nFAIL: test_umath.TestComplexFunctions.test_branch_cuts(<ufunc \'arccosh\'>, [-1, 0.5], [1j, 1j], 1, -1, True)\r\n----------------------------------------------------------------------\r\nTraceback (most recent call last):\r\n  File ""/home/mlai/anaconda/lib/python2.7/site-packages/nose/case.py"", line 197, in runTest\r\n    self.test(*self.arg)\r\n  File ""/home/mlai/github/numpy/build/testenv/lib/python2.7/site-packages/numpy/core/tests/test_umath.py"", line 1690, in _check_branch_cut\r\n    assert_(np.all(np.absolute(y0.imag - yp.imag) < atol), (y0, yp))\r\n  File ""/home/mlai/github/numpy/build/testenv/lib/python2.7/site-packages/numpy/testing/utils.py"", line 53, in assert_\r\n    raise AssertionError(smsg)\r\nAssertionError: (array([  0.00000000e+00+3.14159265j,   1.11022302e-16-1.04719755j]), array([  4.71216091e-07+3.14159218j,   1.28119737e-13+1.04719755j]))\r\n\r\n----------------------------------------------------------------------\r\nRan 5974 tests in 45.985s\r\n\r\nFAILED (KNOWNFAIL=3, SKIP=3, failures=1)\r\n```'"
6062,94474480,rgommers,jaimefrio,2015-07-11 13:42:15,2015-07-11 21:30:48,2015-07-11 21:30:48,closed,,,2,11 - Bug;component: numpy.lib;Easy Fix,https://api.github.com/repos/numpy/numpy/issues/6062,b'BUG: ix_ modifies input arrays',"b'Regression that was introduced in gh-5805. Discovered when running Scipy tests against numpy master:\r\n\r\n    ======================================================================\r\n    ERROR: test_qhull.TestUtilities.test_more_barycentric_transforms\r\n    ----------------------------------------------------------------------\r\n    Traceback (most recent call last):\r\n      File ""/usr/local/lib/python2.7/site-packages/nose/case.py"", line 197, in runTest\r\n        self.test(*self.arg)\r\n      File ""/Users/rgommers/Code/bldscipy/scipy/spatial/tests/test_qhull.py"", line 310, in test_more_barycentric_transforms\r\n        grid = np.c_[list(map(np.ravel, np.broadcast_arrays(*np.ix_(*([x]*ndim)))))].T\r\n      File ""/Users/rgommers/Code/numpy/numpy/lib/index_tricks.py"", line 77, in ix_\r\n        raise ValueError(""Cross index must be 1 dimensional"")\r\n    ValueError: Cross index must be 1 dimensional\r\n\r\nA simple way to reproduce the issue:\r\n\r\n    >>> x = np.linspace(0, 1, num=5)\r\n    >>> np.ix_(*([x] * 4))\r\n    Traceback (most recent call last):\r\n      File ""<ipython-input-6-b0c751ea5a84>"", line 1, in <module>\r\n    np.ix_(*([x] * 4))\r\n      File ""/Users/rgommers/Code/numpy/numpy/lib/index_tricks.py"", line 77, in ix_\r\n        raise ValueError(""Cross index must be 1 dimensional"")\r\n    ValueError: Cross index must be 1 dimensional\r\n\r\n    >>> x.shape\r\n    (5, 1, 1, 1)\r\n\r\nSolution is simply to make a copy when constructing output arrays.'"
6030,92383543,pitrou,jaimefrio,2015-07-01 13:21:59,2015-07-09 00:53:57,2015-07-09 00:53:57,closed,,,2,11 - Bug;component: numpy.core,https://api.github.com/repos/numpy/numpy/issues/6030,b'min() and argmin() inconsistent with NaTs',"b""Either NaT is ignored or it isn't when looking for a minimum, but min() and argmin() disagree:\r\n\r\n```\r\n>>> a = np.arange(10).astype('m8[s]')\r\n>>> a[1] = 'NaT'\r\n>>> a.min()\r\nnumpy.timedelta64(0,'s')\r\n>>> a.argmin()\r\n1\r\n```\r\n"""
6026,91823113,JackKelly,charris,2015-06-29 14:35:21,2015-06-29 15:05:08,2015-06-29 15:03:20,closed,,,2,11 - Bug,https://api.github.com/repos/numpy/numpy/issues/6026,b'numpy.pad breaks if constant_values are float32',"b'First of all, thank you so much to all the numpy devs.  It\'s an awesome beast!\r\n\r\nHere\'s a minimal code example to illustrate the issue:\r\n\r\nThis works:\r\n\r\n```python\r\nIn [3]: arr = np.array([1.0, 2.0, 3.0])\r\n\r\nIn [4]: arr.dtype\r\nOut[4]: dtype(\'float64\')\r\n\r\nIn [7]: np.pad(arr, (5, 5), mode=\'constant\', constant_values=(0.0, ))\r\nOut[7]: array([ 0.,  0.,  0.,  0.,  0.,  1.,  2.,  3.,  0.,  0.,  0.,  0.,  0.])\r\n```\r\n\r\nBut, if we use `np.float32` numbers for `constant_values`, it fails:\r\n\r\n```python\r\nIn [7]: np.pad(arr, (5, 5), mode=\'constant\', constant_values=(np.float32(0.0), ))\r\n\r\n---------------------------------------------------------------------------.0),) \r\nValueError                                Traceback (most recent call last)\r\n<ipython-input-12-11f9416478e1> in <module>()\r\n----> 1 np.pad(arr, (5, 5), mode=\'constant\', constant_values=(np.float32(0.0), ))\r\n\r\n/usr/local/lib/python2.7/dist-packages/numpy/lib/arraypad.pyc in pad(array, pad_width, mode, **kwargs)\r\n   1328                 kwargs[i] = _validate_lengths(narray, kwargs[i])\r\n   1329             if i in [\'end_values\', \'constant_values\']:\r\n-> 1330                 kwargs[i] = _normalize_shape(narray, kwargs[i])\r\n   1331     elif mode is None:\r\n   1332         raise ValueError(\'Keyword ""mode"" must be a function or one of %s.\' %\r\n\r\n/usr/local/lib/python2.7/dist-packages/numpy/lib/arraypad.pyc in _normalize_shape(narray, shape)\r\n   1042     if normshp is None:\r\n   1043         fmt = ""Unable to create correctly shaped tuple from %s""\r\n-> 1044         raise ValueError(fmt % (shape,))\r\n   1045     return normshp\r\n   1046 \r\n\r\nValueError: Unable to create correctly shaped tuple from (0.0,)\r\n```\r\n\r\nThis also fails if `arr` has `dtype=np.float32`.\r\n\r\nMy proposal would either be:\r\n1. change the definition of `np.pad` so that it accepts `constant_values` with any float dtype.  Or\r\n2. modify the docs and the `ValueError` text to tell the user that only `np.float64` numbers are allowed for `constant_values`.\r\n\r\n*update*\r\nThis refers to numpy version 1.9.2 on Ubuntu Linux 15.04.'"
6004,90143760,mhvk,charris,2015-06-22 16:15:48,2015-06-22 17:48:03,2015-06-22 17:44:33,closed,,,2,11 - Bug;component: numpy.lib,https://api.github.com/repos/numpy/numpy/issues/6004,b'BUG: np.float16 not recognized in np.common_type',"b""This fixes the bug found while working on #6001, that `np.float16` is not recognized as a type by `np.common_type`:\r\n```\r\nnp.common_type(np.array(5., np.float16))\r\n# TypeError: can't get common type for non-numeric array\r\n```\r\n"""
5982,89417399,embray,charris,2015-06-18 22:57:01,2015-06-23 13:18:55,2015-06-22 23:44:55,closed,,,11,11 - Bug;component: numpy.core,https://api.github.com/repos/numpy/numpy/issues/5982,b'BUG: Fixed slicing of chararrays on Python 3.',"b""When taking a slice of a chararray it was calling the rstrip() method\r\non the resulting slice, resulting in a new array rather than a view\r\nof the original.  This was an unintended consequence of the `sq_slice`\r\nmember of the `tp_as_sequence` mapping being ignored in Python 3, so\r\nthat slice lookups go directly through `__getitem__`.\r\n\r\nI realize the chararray type is deprecated now which is fine, but this bug\r\nintroduced a regression for the `astropy.io.fits` module on Python 3 (I'm not\r\nsure why this only seems to have broken recently, but it did).  So it can't hurt\r\nto fix this, and in the meantime I'm going to work on eliminating the dependency\r\non chararray in Astropy."""
5969,88487627,jeanconn,ahaldane,2015-06-15 17:17:31,2016-05-22 00:46:35,2016-05-22 00:46:35,closed,,,3,11 - Bug;component: numpy.ma,https://api.github.com/repos/numpy/numpy/issues/5969,"b""np.ma.median returns masked_array; doesn't match example in docs""","b'From the examples\r\n\r\n```\r\n    Examples\r\n    --------\r\n    >>> x = np.ma.array(np.arange(8), mask=[0]*4 + [1]*4)\r\n    >>> np.ma.extras.median(x)\r\n    1.5\r\n\r\n```\r\n\r\nOn CentOS 6  64 with a conda python and numpy 1.9.2 \r\n\r\n```\r\n# python\r\nPython 2.7.9 |Continuum Analytics, Inc.| (default, Mar  9 2015, 16:20:48) \r\n[GCC 4.4.7 20120313 (Red Hat 4.4.7-1)] on linux2\r\nType ""help"", ""copyright"", ""credits"" or ""license"" for more information.\r\nAnaconda is brought to you by Continuum Analytics.\r\nPlease check out: http://continuum.io/thanks and https://binstar.org\r\n>>> import numpy as np\r\n>>> np.__version__\r\n\'1.9.2\'\r\n>>> x = np.ma.array(np.arange(8), mask=[0]*4 + [1]*4)\r\n>>> np.ma.extras.median(x)\r\nmasked_array(data = [1.5],\r\n             mask = [False],\r\n       fill_value = 1e+20)\r\n```\r\n\r\nIn addition to not matching the Example, I think this is also inconsistent with the return type text and with the behavior of other masked aggregate functions (np.ma.mean) which seems to just return a np.float64 on the same `x`.\r\n'"
5967,88223321,wimglenn,homu,2015-06-14 17:58:40,2015-06-16 08:28:23,2015-06-16 08:28:23,closed,,,13,11 - Bug;54 - Needs decision;component: numpy.core,https://api.github.com/repos/numpy/numpy/issues/5967,"b""BUG: fix inconsistency with np.array(['']) being truthy""","b""```\r\na = np.array([0])\r\nb = np.array([None])\r\nc = np.array([''])\r\nd = np.array(['   '])\r\n```\r\n\r\nWhy should we have this inconsistency:\r\n\r\n```\r\n>>> bool(a)\r\nFalse\r\n>>> bool(b)\r\nFalse\r\n>>> bool(c)\r\nTrue\r\n>>> bool(d)\r\nFalse\r\n```"""
5963,87876159,charris,seberg,2015-06-12 23:06:23,2016-02-25 02:20:00,2015-06-13 11:05:34,closed,,,1,11 - Bug;component: numpy.core,https://api.github.com/repos/numpy/numpy/issues/5963,b'Rubustify tuple loop search',"b'Fix for #3484, the failure to find a loop for true_divide for `float64` inputs when `dtype=float64` is also specified.\r\n\r\nThis is a minimal fix. A first cut at more extensive casting revisions fell short and needs more study.'"
5962,87791372,mhvk,charris,2015-06-12 17:10:29,2015-06-18 13:07:03,2015-06-18 03:16:51,closed,,,17,11 - Bug;component: numpy.ma,https://api.github.com/repos/numpy/numpy/issues/5962,b'BUG Ensure masked object arrays can always return single items.',"b'For a masked array holding objects that themselves are arrays, when selecting a single item, it is treated as if it were a slice of the array and an attempt is made to set its mask.  This was always a bug, but it become visible with a recent change to `MaskedArray.__getitem__` (#4586) where it is attempted to change the shape of the mask (to help matrices, sigh, was not even part of PR initially!).  With this PR, the treatment is the same as for other single items: one either gets the array stored in the object, or masked.\r\n\r\nTest case that now works but used to fail:\r\n```\r\nmx1 = MaskedArray([1.], mask=[True])\r\nmx2 = MaskedArray_array([1., 2.])\r\nmx = MaskedArray([mx1, mx2], mask=[False, True])\r\nmx[0]\r\n```'"
5960,87605686,ahaldane,charris,2015-06-12 04:44:16,2015-06-14 16:11:17,2015-06-14 16:11:17,closed,,,3,11 - Bug;component: numpy.core,https://api.github.com/repos/numpy/numpy/issues/5960,b'BUG: segfault in array_richcompare',"b""Fixes #4855. Only real change was `Py_DECREF(result)` became `Py_XDECREF(result)`.\r\n\r\nI assume the other logic there is fine, I don't know ufunc code very well."""
5958,87250465,jaimefrio,charris,2015-06-11 07:50:53,2016-02-29 01:45:04,2016-02-29 01:38:17,closed,,,10,11 - Bug;54 - Needs decision;component: numpy.core,https://api.github.com/repos/numpy/numpy/issues/5958,b'BUG: make data attribute of ndarray read-only',b'Fixes #1873'
5947,85778119,ahaldane,charris,2015-06-06 16:31:34,2015-06-11 22:09:46,2015-06-11 22:09:46,closed,,,3,11 - Bug;component: numpy.core,https://api.github.com/repos/numpy/numpy/issues/5947,b'BUG: make void-scalar getfield/setfield use ndarray methods',"b""This is a continuation of #5642.\r\n\r\nThis PR removes most of the logic in `voidtype_getfield` and `voidtype_setfield`. Instead they simply call the ndarray `getfield` and `setfield`. This solves bugs related to void-scalar assignment, #3126 and #3561. It also makes these functions safer since ndarray's get/setfield does safety checks to avoid segfaults involving object arrays.\r\n\r\nAdditional minor notes:\r\n   \r\nI changed the calling convention of `voidtype_getfield`. Previously it accepted `(dtype, offset, title)` and dropped the (optional) title. Now it expects only `(dtype, offset)`, just like ndarray getfield. This simplifies the `voidtype_getfield` code.\r\n\r\nI also removed code that does byteswapping in both getfield and setfield. After looking at it for a while, I am pretty convinced this code is unnecessary since in both cases we use` gentype_generic_method` to convert the void scalar to a 0-d ndarray, do the get/setfield, and then convert the returned value to a scalar using `PyArray_ToScalar` (in `PyArray_Return`). `PyArray_ToScalar` already does the byteswap for us. Therefore, any scalars that reach `voidtype_getfield` are already in NBO and there is no need to swap again.\r\n\r\nAlso, at the end of `voidtype_setfield` I effectively do `arr[()] = val`, and actually create an empty tuple object. Is that really the best way to use setfield, given that arr is possible 0-d?\r\n"""
5946,85774141,seberg,charris,2015-06-06 15:58:29,2015-06-14 16:42:19,2015-06-14 16:41:51,closed,,,5,11 - Bug;component: numpy.core,https://api.github.com/repos/numpy/numpy/issues/5946,b'BUG: einsums bool_sum_of_products_contig incorrect for small arrays',"b'The small array (and end of loop) special case incorrectly stepped\r\nthrough array and left pointers bogus.\r\n\r\n--\r\n\r\nTests still needed, anyone want to jump on this....\r\n\r\nHonestly, I am a bit dumbstruck that this was never found. The tests probably just do not test this special case (until now matmul shapes tests), and nobody probably ever really used boolean einsum....\r\nI found this running the tests with valgrind.'"
5943,85577045,ahaldane,charris,2015-06-05 16:39:24,2015-06-19 21:55:20,2015-06-19 21:38:50,closed,,,16,11 - Bug;component: numpy.core;component: numpy.lib,https://api.github.com/repos/numpy/numpy/issues/5943,b'BUG: automatically convert recarray dtype to np.record',"b""As discussed in #3581, this PR automatically converts the dtype of `np.recarray`s to `np.record`. \r\n\r\nTo get unit tests to pass I also had to add a setattr to the `MaskedArray` class: MaskedArrays did not support assignment to dtype attribute, as demonstrated in the following examples:\r\n\r\n    >>> a = np.zeros(4, dtype='f4,i4')\r\n    >>> m = np.ma.array(a)\r\n    >>> m.dtype = np.dtype('f8')\r\n    >>> m   # Exception\r\n    >>> a.view(dtype='f8', type=np.ma.MaskedArray) #Exception\r\n\r\nMaskedArray.setattr now catches assignments to dtype and updates the mask accordingly.\r\n\r\n\r\nPossible issues with this PR, if anyone has any ideas: \r\n\r\n1) Viewing as `a.view(np.recarray)` now changes the dtype. It's not totally clear to me this won't break anything. (Example: It broke maskedarrays above, but due to a maskedaray bug).\r\n\r\n2) Another example of the last point: Views are not reversible.\r\n\r\n    >>> a = np.zeros(4, 'f4,i4')\r\n    >>> b = a.view(np.recarray).view(np.ndarray)\r\n    >>> b.dtype\r\n    dtype((numpy.record, [('f0', '<f4'), ('f1', '<i4')]))\r\n\r\n3) Note (not really a problem): Attempt to create record arrays of non-structured type does not set the dtype to `np.record` (since it is not possible to do so). This is not new to this PR.\r\n\r\n    >>> a = np.zeros(5, 'f8')\r\n    >>> np.rec.array(a)\r\n    array([ 0.,  0.,  0.,  0.], \r\n          dtype=float64).view(numpy.recarray)\r\n    \r\nBenefits:\r\n\r\n * Goal is to improve results in #3581\r\n\r\nI still need to finish writing unit tests"""
5924,82038338,sergii-gavrylov,charris,2015-05-28 17:23:00,2016-02-02 14:09:30,2016-02-02 13:54:32,closed,,,9,11 - Bug;component: numpy.lib;Easy Fix,https://api.github.com/repos/numpy/numpy/issues/5924,b'Array contiguous change during np.nan_to_num',"b""Hello, my current version of numpy is 1.9.2\r\n```python\r\n>>> x = np.array([[1,-np.inf,],[np.nan,4]], order='F')\r\n>>> x\r\narray([[  1., -inf],\r\n       [ nan,   4.]])\r\n>>> x.flags\r\n  C_CONTIGUOUS : False\r\n  F_CONTIGUOUS : True\r\n  OWNDATA : True\r\n  WRITEABLE : True\r\n  ALIGNED : True\r\n  UPDATEIFCOPY : False\r\n>>> y = np.nan_to_num(x)\r\n>>> y\r\narray([[  1.00000000e+000,  -1.79769313e+308],\r\n       [  0.00000000e+000,   4.00000000e+000]])\r\n>>> y.flags\r\n  C_CONTIGUOUS : True\r\n  F_CONTIGUOUS : False\r\n  OWNDATA : True\r\n  WRITEABLE : True\r\n  ALIGNED : True\r\n  UPDATEIFCOPY : False\r\n```\r\nIt is not clear to me why CONTIGUOUS flags of the array `y` are different from ones of `x`. I looked at the code in type_check.py on the master branch, and it is different from type_check.py on my machine. So probably it had been already fixed. But still, could anyone point me to a good explanation what the `subok` argument in array creation function is?\r\nI would highly appreciate any clarifications about this nan_to_num behaviour."""
5921,81491583,embray,charris,2015-05-27 15:20:02,2015-06-02 21:45:10,2015-06-02 21:04:23,closed,,,7,11 - Bug;component: numpy.core,https://api.github.com/repos/numpy/numpy/issues/5921,b'BUG: Further fixes to record and recarray getitem/getattr',"b""This is a followup to PR #5505, which didn't go quite far\r\nenough.  This fixes two issues in particular:\r\n\r\n1) The record class also needs an updated `__getitem__` that works analogously to its `__getattribute__` so that a nested record is returned as a `record` object and not a plain `np.void`.  In other words the old behavior is:\r\n\r\n```python\r\n>>> rec = np.rec.array([('abc ', (1,1), 1), ('abc', (2,3), 1)],\r\n...       dtype=[('foo', 'S4'), ('bar', [('A', int), ('B', int)]),\r\n('baz', int)])\r\n>>> rec[0].bar\r\n(1, 1)\r\n>>> type(rec[0].bar)\r\n<class 'numpy.record'>\r\n>>> type(rec[0]['bar'])\r\n<type 'numpy.void'>\r\n```\r\n\r\ndemonstrated inconsistency between `.bar` and `['bar']` on the record object.  The new behavior is:\r\n\r\n```python\r\n>>> type(rec[0]['bar'])\r\n<class 'numpy.record'>\r\n```\r\n\r\n2) The second issue is more subtle.  The fix to #5505 used the `obj.dtype.descr` attribute to create a new dtype of type `record`.  However, this does not recreate the correct type if the fields are not aligned.  To demonstrate:\r\n\r\n```python\r\n>>> dt = np.dtype({'C': ('S5', 0), 'D': ('S5', 6)})\r\n>>> dt.fields\r\ndict_proxy({'C': (dtype('S5'), 0), 'D': (dtype('S5'), 6)})\r\n>>> dt.descr\r\n[('C', '|S5'), ('', '|V1'), ('D', '|S5')]\r\n>>> new_dt = np.dtype((np.record, dt.descr))\r\n>>> new_dt\r\ndtype((numpy.record, [('C', 'S5'), ('f1', 'V1'), ('D', 'S5')]))\r\n>>> new_dt.fields\r\ndict_proxy({'f1': (dtype('V1'), 5), 'C': (dtype('S5'), 0), 'D':\r\n(dtype('S5'), 6)})\r\n```\r\n\r\nUsing the `fields` dict to construct the new type reconstructs the correct type with the correct offsets:\r\n\r\n```python\r\n>>> new_dt2 = np.dtype((np.record, dt.fields))\r\n>>> new_dt2.fields\r\ndict_proxy({'C': (dtype('S5'), 0), 'D': (dtype('S5'), 6)})\r\n```\r\n\r\n(Note: This is based on #5920 for convenience, but I could decouple the changes if that's preferable.)"""
5907,79214795,charris,seberg,2015-05-22 00:18:21,2015-06-05 20:24:46,2015-06-05 20:24:46,closed,,,7,11 - Bug;component: numpy.core;Patch,https://api.github.com/repos/numpy/numpy/issues/5907,b'Einsum produces incorrect result when casting to non-contiguous out array',"b""Like so:\r\n```\r\nIn [28]: out = zeros((2,2,2))[...,0]\r\n\r\nIn [29]: x = ones((2,2), float32)\r\n\r\nIn [30]: einsum('ij,jk->ik', x, x, out=out)\r\nOut[30]: \r\narray([[ 2.,  0.],\r\n       [ 2.,  0.]])\r\n```\r\nThis seems to be an iterator problem. It works correctly in the non-casting case."""
5889,77459391,jaimefrio,charris,2015-05-18 02:01:53,2015-08-18 02:54:37,2015-06-01 16:09:43,closed,,,1,11 - Bug;component: numpy.core,https://api.github.com/repos/numpy/numpy/issues/5889,b'BUG: np.broadcast should accept itself as an input',b'Fixes #5881 '
5886,77313751,jaimefrio,charris,2015-05-17 13:44:04,2015-05-17 21:29:53,2015-05-17 20:54:58,closed,,,7,11 - Bug;component: numpy.core,https://api.github.com/repos/numpy/numpy/issues/5886,b'BUG: Handling of axisc in np.cross',"b'Fixes #5885 by ignoring `axisc` when both input vectors are 2D.\r\nAlso adds explicit checks for `axis?` parameters in bounds, to\r\nprovide more informative errors.\r\nAlso slightly simplified the calculation logic and documented the\r\nassumptions in each branch with `assert`s.'"
5880,76757518,argriffing,njsmith,2015-05-15 15:16:30,2015-10-03 20:16:43,2015-10-03 20:16:43,closed,,,14,11 - Bug;component: numpy.lib,https://api.github.com/repos/numpy/numpy/issues/5880,b'BUG: fix an interaction between vectorize and size-zero arrays',b'From @jordigh in https://github.com/numpy/numpy/issues/5868#issuecomment-102046946.\r\nCloses https://github.com/numpy/numpy/issues/5868.'
5877,76454019,2sn,charris,2015-05-14 18:51:08,2015-10-27 19:50:20,2015-10-16 18:23:02,closed,,,9,11 - Bug;component: numpy.f2py,https://api.github.com/repos/numpy/numpy/issues/5877,b'f2py - bug in calcualtion of array dimensions',"b'I try to include a common f77 block from legacy code.  \r\n\r\nsome calculations in the conversion go wrong.\r\n\r\nI have in my common block lines\r\n\r\n```\r\n      implicit real*8 (a-h,o-z)\r\n      parameter ( nvar  = 3       )\r\n      parameter ( jmz    = 1983 )\r\n\r\n      common scmt(3*(jmz+1)), dbuf(nvar*(nvar+1) * (jmz+2))\r\n```\r\n\r\nresulting an a comlilation error\r\n\r\n```\r\n/tmp/tmpcpniavle/src.linux-x86_64-3.4/_keplermodule.c:1386:22: error: nvar undeclared here (not in a function)\r\n   {""dbuf"",1,{{5955 * nvar + 5955}},NPY_DOUBLE},\r\n```\r\nit seems a bad line is generated and f2py does not resolve multiple occurrences (nvar) of the same parameter/variable in an expression?  at least inside sufficiently complex expressions?\r\n\r\nIf I define a parameter with nvar*(nvar+1) and use that new parameter, things work, but maybe if you get a chance to fix this fluke as well, that would be nice.  (or let me me know in what function for crackfortran even to look...)'"
5876,76453040,2sn,charris,2015-05-14 18:46:29,2015-10-27 21:18:06,2015-10-16 18:34:44,closed,,,16,11 - Bug;component: numpy.f2py;Patch,https://api.github.com/repos/numpy/numpy/issues/5876,b'f2py - fix - extended common block',"b""I try to include a common f77 block from legacy code.  \r\nThere once can continue a common block with a new common statement with the same common block name.  In crackfortran.py there is statement that (wrongly) explicitly catches this case.  That should be removed/reverted.\r\n\r\nExample\r\n      common/namecom/ namezone(nzonei+nzonec+nzoneb), names(nsubz)\r\n      common/namecom/ unitzone(nzonei+nzonec+nzoneb)\r\n[...hundreds more such lines...]\r\ndoing this all with just line continuation is not an option, there is too many of them hence compilers have overflowed in the past (beyond some 20 lines).\r\n\r\nThe patch, based on numpy 1.9.2, is\r\n\r\n```\r\n~/Python/lib/python3.4/site-packages/numpy/f2py>diff crackfortran.py_old crackfortran.py\r\n1163,1166c1163,1164\r\n<             if c[0] in commonkey:\r\n<                 outmess('analyzeline: previously defined common block encountered. Skipping.\\n')\r\n<                 continue\r\n<             commonkey[c[0]]=[]\r\n---\r\n>             if c[0] not in commonkey:\r\n>                 commonkey[c[0]]=[]\r\n```\r\nCan you please include this patch in future versions of f2py?\r\n\r\n"""
5865,75006771,jaimefrio,charris,2015-05-10 21:30:06,2015-06-27 23:10:08,2015-06-27 18:51:04,closed,,,6,11 - Bug;component: numpy.core,https://api.github.com/repos/numpy/numpy/issues/5865,b'BUG: np.nonzero behaving differently for 1-D arrays',b'Fixes #5837'
5858,74579333,jaimefrio,charris,2015-05-09 04:13:08,2015-05-10 16:13:46,2015-05-10 14:47:07,closed,,,3,11 - Bug;component: numpy.random,https://api.github.com/repos/numpy/numpy/issues/5858,b'BUG: random.beta with small parameters',
5847,73649260,christianbrodbeck,jaimefrio,2015-05-06 15:02:27,2015-05-07 13:41:25,2015-05-07 13:40:26,closed,,,6,11 - Bug;component: numpy.lib,https://api.github.com/repos/numpy/numpy/issues/5847,b'FIX: setdiff1d return type',b'Following up on https://github.com/numpy/numpy/issues/5846#issuecomment-99466501.\r\n'
5836,73129640,rgommers,charris,2015-05-04 21:17:06,2015-05-05 06:47:47,2015-05-04 23:13:25,closed,,,1,11 - Bug;component: build,https://api.github.com/repos/numpy/numpy/issues/5836,b'BLD: use fix for Accelerate SGEMV issue in Bento build.  See gh-5831.',b'see gh-5831'
5832,72856154,rgommers,charris,2015-05-03 19:54:10,2015-06-03 16:10:18,2015-06-03 16:10:18,closed,,,2,11 - Bug;component: numpy.distutils,https://api.github.com/repos/numpy/numpy/issues/5832,b'distutils makes it too hard to install from source with mingw32',"b'One can build from source with:\r\n\r\n    $ python setup.py build --compiler=mingw32 \r\n\r\nbut then installing fails. Doing:\r\n\r\n    $ python setup.py install --compiler=mingw32 \r\n\r\nresults in \r\n\r\n    ...\r\n    error: option --compiler not recognized \r\n\r\nAnd doing:\r\n\r\n    $ python setup.py install\r\n\r\nresults in this obscure error:\r\n\r\n    ...\r\n    running config_fc\r\n    unifing config_fc, config, build_clib, build_ext, build commands\r\n    --fcompiler options\r\n    running build_src\r\n    build_src\r\n    building py_modules sources\r\n    building library ""npymath"" sources\r\n    No module named \'numpy.distutils.msvccompiler\' in numpy.distutils;\r\n    trying from distutils\r\n    Unable to find productdir in registry\r\n    Checking environ VS100COMNTOOLS\r\n    error: Unable to find vcvarsall.bat \r\n\r\nThis was reported at http://numpy-discussion.10968.n7.nabble.com/Compiling-NumPy-on-Windows-for-Python-3-3-td8653.html, can be found on various StackOverflow issues and is related to http://bugs.python.org/issue2943.\r\n\r\nMost SO answers (which all recommend installing MSVC) and Python issue 2943 are not the whole story though, because if you add a file ``distutils.cfg`` in the ``distutils`` directory (a local ``setup.cfg`` or a ``$HOME/.pydistutils.cfg`` should also work) containing\r\n\r\n    [build]\r\n    compiler=mingw32 \r\n\r\nthen ``python setup.py install`` works fine. Because this will probably never be fixed in distutils (bug report open for 7 years...), maybe it can be fixed in ``numpy.distutils``. And otherwise at least this issue serves as documentation....\r\n'"
5831,72850280,charris,charris,2015-05-03 19:09:52,2015-05-05 09:38:51,2015-05-03 20:27:05,closed,,,12,11 - Bug;component: build,https://api.github.com/repos/numpy/numpy/issues/5831,b'rebase-gh-5237 - BUG: Workaround segfault in Apple Accelerate framework SGEMV',"b""Rebased #5237.\r\n\r\nSGEMV in Accelerate framework will segfault on MacOS X version 10.9\r\n(aka Mavericks) if arrays are not aligned to 32 byte boundaries and the\r\nCPU supports AVX instructions. This can produce segfaults in np.dot.\r\nThis patch overshadows the symbols cblas_sgemv, sgemv_ and sgemv\r\nexported by Accelerate to produce the correct behavior. The MacOS X\r\nversion and CPU specs are checked on module import. If Mavericks and AVX\r\nare detected the call to SGEMV is emulated with a call to SGEMM if the\r\narrays are not 32 byte aligned. If the exported symbols cannot be\r\novershadowed on module import, a fatal error is produced and the process\r\naborts. All the fixes are in a self-contained C file and do not alter\r\nthe multiarray C code. The patch is not applied unless NumPy is\r\nconfigured to link with Apple's Accelerate framework."""
5825,72674659,charris,charris,2015-05-02 17:34:01,2016-01-20 16:15:17,2015-05-02 19:23:48,closed,,,4,11 - Bug;component: numpy.ma,https://api.github.com/repos/numpy/numpy/issues/5825,b'BUG: Make ma.where consistent with unmasked where.',"b'Cleanup of #5583.\r\n\r\nThe scalar case ma.where(True, None, None) is now conistent with unmasked version.\r\n\r\nCleanup #5583 for style and use np._NoValue as default value of `x` and `y` to simplify the logic.\r\n'"
5824,72664107,charris,charris,2015-05-02 16:04:34,2015-05-02 16:25:00,2015-05-02 16:18:38,closed,,,0,11 - Bug;component: numpy.ma,https://api.github.com/repos/numpy/numpy/issues/5824,b'BUG: Fix assignment of mask in ma.masked_where',b'Cleanup of #5516.\r\n\r\n* Squash commits to two.\r\n* Reformat commit messages to 72 character line width.\r\n* Add comment about assigning to property *.mask.'
5821,72548332,behzadnouri,jaimefrio,2015-05-01 23:35:09,2015-05-05 10:28:28,2015-05-05 04:03:22,closed,,,4,11 - Bug;component: numpy.core,https://api.github.com/repos/numpy/numpy/issues/5821,b'BUG: fixes segfault in np.place when vals is empty',b'Closes #3195'
5812,71631812,berquist,charris,2015-04-28 16:06:52,2015-04-30 15:24:18,2015-04-30 15:24:18,closed,matthew-brett,,3,11 - Bug;component: Official binaries,https://api.github.com/repos/numpy/numpy/issues/5812,b'f2py: incorrect call to Python interpreter',b'Using the following wheel from PyPI on OS X 10.9.5:\r\n```\r\nnumpy-1.9.2-cp27-none-macosx_10_6_intel.macosx_10_9_intel.macosx_10_9_x86_64.macosx_10_10_intel.macosx_10_10_x86_64.whl\r\n```\r\nthe shebang in `/usr/local/bin/f2py` is incorrect:\r\n```\r\n#!/Users/travis/build/MacPython/numpy-wheels/venv/bin/python\r\n```'
5805,71281125,jaimefrio,charris,2015-04-27 13:17:38,2015-07-11 13:36:50,2015-05-05 13:46:22,closed,,,4,11 - Bug;component: numpy.lib,https://api.github.com/repos/numpy/numpy/issues/5805,b'Ix intp',
5804,71221096,chkothe,jaimefrio,2015-04-27 08:43:10,2015-07-11 13:36:21,2015-05-05 13:46:27,closed,,,2,11 - Bug;component: numpy.lib,https://api.github.com/repos/numpy/numpy/issues/5804,b'ix_() returned array has dtype=float64 when given empty range',"b""```\r\n>>> np.ix_(range(0,0))\r\n(array([], dtype=float64),)\r\n```\r\nThe correct dtype should be int32, since float indices are usually not accepted as indices in numpy arrays. That dtype is returned for non-empty ranges:\r\n```\r\n>>> np.ix_(range(0,1))[0].dtype\r\ndtype('int32')\r\n```"""
5800,70960963,behzadnouri,charris,2015-04-25 20:04:28,2015-04-28 11:43:00,2015-04-27 16:25:59,closed,,,3,11 - Bug;component: numpy.random,https://api.github.com/repos/numpy/numpy/issues/5800,b'BUG: Fixes random.noncentral_chisquare when 0 < df <= 1',"b""Closes #5766.\r\n\r\nFor sanity check, this is a comparison of theoretical cumulant-generating function and the emprical one at 3 different values for degree of freedom:\r\n\r\n```\r\n# cumulant-generating function\r\ncgf = lambda t, df, nonc: nonc * t / (1 - 2*t) - .5 * df * np.log(1 - 2*t)\r\n\r\nsize, nonc = 1 << 26, .01\r\nt = np.linspace(-.5, .5, 50, endpoint=False)\r\n\r\nfor df in .1, .5, .9:\r\n    a = np.random.noncentral_chisquare(df, nonc, size)\r\n    y = np.fromiter((np.exp(a * x).mean(axis=0) for x in t[1::3]), 'f8')\r\n    l, = plt.plot(t, cgf(t, df, nonc), label='df: {}'.format(df))\r\n    plt.plot(t[1::3], np.log(y), l.get_color() + 'o', label='_nolegend_')\r\n```\r\n![ffig2](https://cloud.githubusercontent.com/assets/1288998/7334529/0e8e9682-eb64-11e4-9858-af058db122ca.png)\r\n\r\nsame plots with `nonc = 2`:\r\n![ffig3](https://cloud.githubusercontent.com/assets/1288998/7334532/263639a2-eb64-11e4-8d12-92821bd5fa03.png)\r\n\r\n"""
5790,70436298,cdeil,charris,2015-04-23 15:08:19,2015-05-06 16:19:04,2015-05-06 16:19:04,closed,,,11,11 - Bug;component: numpy.core,https://api.github.com/repos/numpy/numpy/issues/5790,"b'dtype ""f64"" silently results in ""float32""'","b'I\'ve recently been bitten by this:\r\n```python\r\n>>> import numpy as np\r\n>>> np.dtype(\'f64\')\r\ndtype(\'float32\')\r\n>>> np.__version__\r\n\'1.9.2\'\r\n```\r\n\r\nSome proposals what to change:\r\n1.  Warning for `\'f64\'` input?\r\n2.  Error for `\'f64\'` input?\r\n3.  Make \'f64\' result in \'float64\'\r\n\r\nI know change is difficult for numpy because of backwards-compatibility concerns.\r\nHopefully it\'s possible to be more strict here ... in my code I was getting slightly incorrect results for half a year because I was using 32-bit floats where I know I needed to use 64-bit floats, but for some reason wrote ""f64"" instead of ""float64"".'"
5785,70297619,jaimefrio,charris,2015-04-23 03:44:38,2015-08-18 02:56:02,2015-04-23 23:10:32,closed,,,3,11 - Bug;component: numpy.core,https://api.github.com/repos/numpy/numpy/issues/5785,b'BUG: Fixed wrong return of PyArray_Partition on failure',"b'On failure, PyArray_Partition should return -1, but was returning\r\nNULL in a couple of unlikely cases.'"
5771,69186045,MichaelCurrie,seberg,2015-04-17 17:55:03,2015-09-27 18:37:37,2015-09-27 18:33:16,closed,,,2,11 - Bug;component: numpy.lib,https://api.github.com/repos/numpy/numpy/issues/5771,b'Expanded warning conditions for array_split',"b'Zero-sized arrays can also occur with any of the partitions sub_arys[i]\r\ninduced by array_split, not just the final partition sub_arys[-1].'"
5768,68686443,ewmoore,rgommers,2015-04-15 13:41:10,2015-04-19 12:45:48,2015-04-19 12:45:48,closed,rgommers,,3,11 - Bug;component: numpy.distutils;priority: high,https://api.github.com/repos/numpy/numpy/issues/5768,"b""Can't find gfortan on RHEL 6.4""","b""I cannot build Scipy against a current numpy on RHEL 6.4.  Running `gfortran --version` or `gfortran -dumpversion` both provide the same output:\r\n```\r\nGNU Fortran (GCC) 4.4.7 20120313 (Red Hat 4.4.7-3)\r\nCopyright (C) 2010 Free Software Foundation, Inc.\r\n\r\nGNU Fortran comes with NO WARRANTY, to the extent permitted by law.\r\nYou may redistribute copies of GNU Fortran\r\nunder the terms of the GNU General Public License.\r\nFor more information about these matters, see the file named COPYING\r\n```\r\n\r\nThis has to do with the changes made to how gnu fortran compilers are detected in #5333. Going back to  8a2dd0680e8470aab7ad63622c0d0af703f58d42 works. \r\n\r\nThis isn't the newest RHEL, but it is still in the full support phase.  \r\n"""
5766,68210577,xiaoweiz,charris,2015-04-13 22:43:45,2015-04-27 16:25:59,2015-04-27 16:25:59,closed,,,0,11 - Bug;component: numpy.random,https://api.github.com/repos/numpy/numpy/issues/5766,b'Cannot generate random variates from noncentral chi-square distribution with dof = 1',"b'The issue is a duplicate of scipy/scipy#4720 \r\n\r\nThe [document](http://docs.scipy.org/doc/numpy/reference/generated/numpy.random.noncentral_chisquare.html#numpy.random.noncentral_chisquare)  suggests that the parameter _degree of freedom_ should be `df >= 1` to use `numpy.random.noncentral_chisquare`. However, taking `df = 1` raises error. \r\n\r\n```python\r\nimport numpy as np\r\ndf = 1\r\nnc = 2\r\nnp.random.noncentral_chisquare(df, nc)\r\n\r\n---------------------------------------------------------------------------\r\nValueError                                Traceback (most recent call last)\r\n<ipython-input-2-7c9f3f6a3a16> in <module>()\r\n----> 1 np.random.noncentral_chisquare(df, nc)\r\n\r\nmtrand.pyx in mtrand.RandomState.noncentral_chisquare (numpy/random/mtrand/mtrand.c:15618)()\r\n\r\nValueError: df <= 0\r\n```\r\n\r\nIt makes me suspect that the random variate generation of the noncentral chi-square distribution with degree of freedom `df` and noncentrality parameter `nc` is implemented in numpy using a method similar to the following.\r\n```python\r\nnp.random.chisquare(df-1) + (np.random.standard_normal()+np.sqrt(nc))**2\r\n```\r\nHowever, this method is valid only for the case where `df > 1` because with `df = 1`, it needs to generate a chi-square random variate with degree of freedom 0, which is not mathematically well-defined.\r\n\r\nOn the other hand, noncentral chi-square distribution is indeed mathematically well-defined for all `df > 0`. It simply requires a different algorithm for random variate generation if `0 < df <= 1`, such as the following one: \r\n```python\r\nnp.random.chisquare(df + 2*np.random.poisson(nc / 2.0))\r\n```\r\n\r\n\r\n'"
5762,67627118,astrofrog,jaimefrio,2015-04-10 16:05:33,2015-06-05 15:43:41,2015-06-05 15:43:41,closed,,,1,11 - Bug;12 - Regression;component: numpy.core,https://api.github.com/repos/numpy/numpy/issues/5762,b'TypeError: Cannot change data-type for object array',"b'If I try and read in the array contained in this npy file:\r\n\r\nhttps://gist.github.com/astrofrog/8c2d188005f31e0bba36/raw/3065c8fa220a6eaccbff20565d0d520c07e5e7e6/test.npy\r\n\r\nthen try and print out the array, so:\r\n\r\n```python\r\nimport numpy as np\r\narray = np.load(\'test.npy\')\r\nprint(array)\r\n```\r\n\r\nI get:\r\n\r\n```\r\nTraceback (most recent call last):\r\n  File ""test2.py"", line 5, in <module>\r\n    print(array)\r\n  File ""/Volumes/Raptor/miniconda3/envs/dev/lib/python3.4/site-packages/numpy/core/numeric.py"", line 1767, in array_str\r\n    return array2string(a, max_line_width, precision, suppress_small, \' \', """", str)\r\n  File ""/Volumes/Raptor/miniconda3/envs/dev/lib/python3.4/site-packages/numpy/core/arrayprint.py"", line 459, in array2string\r\n    separator, prefix, formatter=formatter)\r\n  File ""/Volumes/Raptor/miniconda3/envs/dev/lib/python3.4/site-packages/numpy/core/arrayprint.py"", line 329, in _array2string\r\n    _summaryEdgeItems, summary_insert)[:-1]\r\n  File ""/Volumes/Raptor/miniconda3/envs/dev/lib/python3.4/site-packages/numpy/core/arrayprint.py"", line 526, in _formatArray\r\n    s += _formatArray(a[-i], format_function, rank-1, max_line_len,\r\n  File ""/Volumes/Raptor/miniconda3/envs/dev/lib/python3.4/site-packages/numpy/core/records.py"", line 481, in __getitem__\r\n    return obj.view(dtype=(self.dtype.type, obj.dtype.descr))\r\n  File ""/Volumes/Raptor/miniconda3/envs/dev/lib/python3.4/site-packages/numpy/core/records.py"", line 540, in view\r\n    return ndarray.view(self, dtype)\r\n  File ""/Volumes/Raptor/miniconda3/envs/dev/lib/python3.4/site-packages/numpy/core/records.py"", line 457, in __setattr__\r\n    raise exctype(value)\r\nTypeError: Cannot change data-type for object array.\r\n```\r\n\r\nThis is with the latest developer version of Numpy (3c5409e4e38e6034d69d0042bf2a3bc854ef2e53) and Python 3.4 on MacOS X.\r\n\r\nThe dtype can be printed, as can individual columns, but the array as a whole can\'t. This doesn\'t occur in the latest stable release so may be a regression?'"
5760,67519253,anntzer,juliantaylor,2015-04-10 06:13:23,2016-01-17 12:04:24,2016-01-17 12:04:24,closed,,,1,11 - Bug;component: numpy.lib,https://api.github.com/repos/numpy/numpy/issues/5760,b'nanpercentile issues',"b'`nanpercentile` crashes when an slice is filled with `nans` and multiple percentiles are requested:\r\n```\r\nIn [9]: np.nanpercentile([[np.nan, np.nan], [np.nan, 2]], [50, 100], axis=0)\r\n/usr/lib/python3.4/site-packages/numpy/lib/nanfunctions.py:914: RuntimeWarning: All-NaN slice encountered\r\n  warnings.warn(""All-NaN slice encountered"", RuntimeWarning)\r\n---------------------------------------------------------------------------\r\nValueError                                Traceback (most recent call last)\r\n<ipython-input-9-f425a58093df> in <module>()\r\n----> 1 np.nanpercentile([[np.nan, np.nan], [np.nan, 2]], [50, 100], axis=0)\r\n\r\n/usr/lib/python3.4/site-packages/numpy/lib/nanfunctions.py in nanpercentile(a, q, axis, out, overwrite_input, interpolation, keepdims)\r\n    873     r, k = _ureduce(a, func=_nanpercentile, q=q, axis=axis, out=out,\r\n    874                     overwrite_input=overwrite_input,\r\n--> 875                     interpolation=interpolation)\r\n    876     if keepdims:\r\n    877         if q.ndim == 0:\r\n\r\n/usr/lib/python3.4/site-packages/numpy/lib/function_base.py in _ureduce(a, func, **kwargs)\r\n   2801         keepdim = [1] * a.ndim\r\n   2802 \r\n-> 2803     r = func(a, **kwargs)\r\n   2804     return r, keepdim\r\n   2805 \r\n\r\n/usr/lib/python3.4/site-packages/numpy/lib/nanfunctions.py in _nanpercentile(a, q, axis, out, overwrite_input, interpolation, keepdims)\r\n    896     else:\r\n    897         result = np.apply_along_axis(_nanpercentile1d, axis, a, q,\r\n--> 898                                      overwrite_input, interpolation)\r\n    899 \r\n    900     if out is not None:\r\n\r\n/usr/lib/python3.4/site-packages/numpy/lib/shape_base.py in apply_along_axis(func1d, axis, arr, *args, **kwargs)\r\n    106             i.put(indlist, ind)\r\n    107             res = func1d(arr[tuple(i.tolist())], *args, **kwargs)\r\n--> 108             outarr[tuple(ind)] = res\r\n    109             k += 1\r\n    110         return outarr\r\n\r\nValueError: setting an array element with a sequence.\r\n```\r\n\r\nIt also sometimes returns an incorrectly sized array (compare with `np.percentile`):\r\n```\r\nIn [12]: np.nanpercentile([[np.nan, np.nan]], [50, 100], axis=0)\r\n/usr/lib/python3.4/site-packages/numpy/lib/nanfunctions.py:914: RuntimeWarning: All-NaN slice encountered\r\n  warnings.warn(""All-NaN slice encountered"", RuntimeWarning)\r\nOut[12]: array([ nan,  nan])\r\n\r\nIn [13]: np.percentile([[1, 2]], [50, 100], axis=0)\r\nOut[13]: \r\narray([[ 1.,  2.],\r\n       [ 1.,  2.]])\r\n```\r\n\r\nFinally, the function also seems not mentioned at all in the official docs (except in the release notes).'"
5753,67017421,empeeu,juliantaylor,2015-04-08 00:07:47,2016-02-16 20:12:52,2015-06-23 01:26:31,closed,,,13,11 - Bug;component: numpy.lib,https://api.github.com/repos/numpy/numpy/issues/5753,"b""BUG: Added proper handling of median and percentile when nan's are prese...""",b'...nt in array to close issue #586.\r\n\r\nAlso added unit tests.'
5748,66389458,mhvk,charris,2015-04-05 01:50:59,2015-05-06 13:10:38,2015-05-06 02:39:13,closed,,,12,11 - Bug;component: numpy.core,https://api.github.com/repos/numpy/numpy/issues/5748,b'BUG Numpy ufunc binop fix for subclasses with __numpy_ufunc__ (closes #4815)',b'This fix for #4815 includes the solution by @pv and a test case to guard against regression.'
5747,66270821,jaimefrio,charris,2015-04-04 03:49:22,2015-04-05 02:54:33,2015-04-04 23:08:45,closed,,,1,11 - Bug;component: numpy.core,https://api.github.com/repos/numpy/numpy/issues/5747,b'BUG: np.repeat does not properly broadcast size 1 repeat arrays',b'Closes #5743'
5742,66195420,charris,jaimefrio,2015-04-03 17:34:50,2015-04-04 23:38:51,2015-04-04 07:24:17,closed,,,6,11 - Bug;component: numpy.lib,https://api.github.com/repos/numpy/numpy/issues/5742,b'Add test to gh 5732',b'This is gh-5732 with an added test for nan_to_num called with an integer list. '
5737,65099259,bastula,bastula,2015-03-29 21:36:51,2016-02-01 05:00:42,2016-02-01 05:00:42,closed,,1.12.0 release,8,11 - Bug;component: numpy.lib,https://api.github.com/repos/numpy/numpy/issues/5737,"b""Piecewise regression with multidimensional arrays with extra 'otherwise' condition""","b'Comments from (#4792):\r\n\r\nThe changes applied from this pull request don\'t seem to work well with multidimensional arrays that have an extra ""otherwise"" condition:\r\n\r\n```python\r\n>>> x = array([[-2.5, -1.5, -0.5],\r\n               [ 0.5,  1.5,  2.5]])\r\n>>> np.piecewise(x, [x < 0, x >= 2], [-1, 1, 3])\r\nValueError: all the input arrays must have same number of dimensions\r\n```\r\nThe same code produces the following result in NumPy 1.8.2:\r\n\r\n```python\r\n>>> array([[-1., -1., -1.],\r\n           [ 3.,  3.,  1.]])\r\n```\r\nIf you reshape the array to a single dimension, it works as intended.\r\n\r\nAlso, I noticed there aren\'t any multidimensional test cases, so maybe this can be one of them?\r\n\r\nThese conditions were tested with Python 2.7 / NumPy 1.8.2 and Python 2.7.9 / NumPy 1.9.2.'"
5732,64985988,jmrosen155,charris,2015-03-28 20:50:31,2015-04-03 17:36:56,2015-04-03 17:36:56,closed,,,3,11 - Bug;component: numpy.lib,https://api.github.com/repos/numpy/numpy/issues/5732,b'Fixed bug if integer list passed into nan_to_num',b'An error is given if a integer list is passed to nan_to_num (Trac #880)\r\n#1478'
5731,64962913,naritta,jaimefrio,2015-03-28 16:41:47,2015-03-30 06:36:49,2015-03-30 05:56:39,closed,,,8,11 - Bug;component: numpy.linalg,https://api.github.com/repos/numpy/numpy/issues/5731,b'BUG: Fix linalg matrix norms when given negative axes.',b'This pull request fixed issue #5725 : fix linalg matrix norms when given negative axes.\r\nIt seems to be the simplest way to make negative axes positive ones before calculation for each order of the norm.\r\n'
5725,64676882,argriffing,jaimefrio,2015-03-27 02:37:38,2015-03-30 05:57:46,2015-03-30 05:57:46,closed,,,6,11 - Bug;component: numpy.linalg;Easy Fix,https://api.github.com/repos/numpy/numpy/issues/5725,b'some numpy linalg matrix norms do not like negative axes',"b'```python\r\n>>> import numpy as np\r\n>>> np.__version__\r\n\'1.10.0.dev0+a4cd474\'\r\n>>> I = np.eye(4)\r\n>>> np.linalg.norm(I, axis=(0, 1))\r\n2.0\r\n>>> np.linalg.norm(I, axis=(-2, -1))\r\n2.0\r\n>>> np.linalg.norm(I, \'fro\', axis=(-2, -1))\r\n2.0\r\n>>> np.linalg.norm(I, 1, axis=(0, 1))\r\n1.0\r\n>>> np.linalg.norm(I, 1, axis=(1, 0))\r\n1.0\r\n>>> np.linalg.norm(I, 1, axis=(-2, -1))\r\nTraceback (most recent call last):\r\n  File ""<stdin>"", line 1, in <module>\r\n  File ""[...]/numpy/linalg/linalg.py"", line 2161, in norm\r\n    ret = add.reduce(abs(x), axis=row_axis).max(axis=col_axis)\r\n  File ""[...]/numpy/core/_methods.py"", line 26, in _amax\r\n    return umr_maximum(a, axis, None, out, keepdims)\r\nValueError: \'axis\' entry is out of bounds\r\n```'"
5720,64382172,cowlicks,charris,2015-03-25 21:56:19,2015-03-26 19:36:05,2015-03-25 22:56:35,closed,,,1,11 - Bug;component: numpy.core,https://api.github.com/repos/numpy/numpy/issues/5720,b'backport #5475',b'Backport the [PR](https://github.com/numpy/numpy/pull/5475) that fixes [this issue](https://github.com/numpy/numpy/issues/3926). To allow pickling empty strings.'
5719,64350287,cowlicks,jaimefrio,2015-03-25 19:13:18,2015-03-28 21:36:17,2015-03-28 21:36:10,closed,,,5,11 - Bug,https://api.github.com/repos/numpy/numpy/issues/5719,b'segfault while casting rational dtype',"b""On numpy master and numpy-types master.\r\n```python\r\nIn [1]: import numpy, npytypes.rational\r\n\r\nIn [2]: numpy.array([npytypes.rational.rational(1111)]).astype('int8')\r\n[1]    4639 segmentation fault  ipython\r\n```\r\nInstead, this should raise an overflow error.\r\n\r\nThis could possibly related to this [issue #3359](https://github.com/numpy/numpy/issues/3359)."""
5713,63903939,cowlicks,charris,2015-03-24 05:07:56,2015-04-06 18:31:28,2015-04-06 02:01:05,closed,,,11,11 - Bug;component: numpy.lib,https://api.github.com/repos/numpy/numpy/issues/5713,b'Fix read_array_header_*',b'This fixes #5712 '
5709,63597521,abalkin,charris,2015-03-23 01:20:16,2015-11-06 01:42:44,2015-04-02 01:13:43,closed,,,22,11 - Bug;component: numpy.ma,https://api.github.com/repos/numpy/numpy/issues/5709,b'BUG: Implemented MaskedArray.dot',b'MaskedArray used to inherit ndarray.dot which ignored masks in the operands.\r\n\r\nFixes issue #5185.'
5707,63499118,jaimefrio,charris,2015-03-22 06:52:34,2015-03-22 16:56:04,2015-03-22 13:23:03,closed,,,1,11 - Bug;component: numpy.core,https://api.github.com/repos/numpy/numpy/issues/5707,b'BUG: wrong format field for 2.6',b'See #5704 for details'
5705,63452328,charris,charris,2015-03-21 20:15:12,2015-05-07 05:29:13,2015-05-07 05:29:13,closed,,,0,11 - Bug;component: numpy.lib,https://api.github.com/repos/numpy/numpy/issues/5705,b'interpolate needs fixing for short arrays of sample points.',b'See #5594.'
5704,63436666,jaimefrio,charris,2015-03-21 18:10:14,2015-03-22 06:47:15,2015-03-21 18:53:23,closed,,,3,11 - Bug;component: numpy.core,https://api.github.com/repos/numpy/numpy/issues/5704,b'BUG: (arg)sort and (arg)partition handling of empty multidim arrays',"b""Fixes an error raised by the (arg)sorting and (arg)partitioning\r\nfunctions, when called on an empty multidimensional array along\r\nan axis that doesn't have 0 length."""
5687,62437889,mieswicht,charris,2015-03-17 15:52:38,2015-03-21 02:14:30,2015-03-21 02:14:30,closed,,,3,11 - Bug;component: npy_math,https://api.github.com/repos/numpy/numpy/issues/5687,b'tanh has problems with large complex numbers',"b'Hi,\r\n\r\nwhen working with complex impedance data, i encountered an issue and narrowed it down to:\r\n\r\n>>> from numpy import *\r\n>>> x=(616.47292227535877+53.814558958179042j)\r\n\r\n>>> tanh(x)\r\n\r\nWarning (from warnings module):\r\n  File ""C:\\python\\Test\\Impedance class reduced.py"", line 1\r\n    from numpy import *\r\nRuntimeWarning: overflow encountered in tanh\r\n\r\nWarning (from warnings module):\r\n  File ""C:\\python\\Test\\Impedance class reduced.py"", line 1\r\n    from numpy import *\r\nRuntimeWarning: invalid value encountered in tanh\r\n\r\nWhen actually, it should return (1-0j), see http://tinyurl.com/nm4goq3\r\nThen i tried\r\n>>> sinh(x)/cosh(x)\r\n\r\nWarning (from warnings module):\r\n  File ""C:\\python\\Test\\Impedance class reduced.py"", line 1\r\n    from numpy import *\r\nRuntimeWarning: overflow encountered in cdouble_scalars\r\n\r\nWarning (from warnings module):\r\n  File ""C:\\python\\Test\\Impedance class reduced.py"", line 1\r\n    from numpy import *\r\nRuntimeWarning: invalid value encountered in cdouble_scalars\r\n(nan+nan*j)\r\n\r\nHowever, the solution was to use numpy.divide:\r\n\r\n>>> divide(sinh(x),cosh(x))\r\n(1-0j)\r\n\r\nThis took me quite some time to figure out, so i guess it would be a good idea to include it in the next release (maybe even with with coth?).\r\n\r\nThanks a lot!\r\n'"
5676,60985201,jaimefrio,charris,2015-03-13 05:03:53,2015-08-18 03:35:55,2015-03-13 05:17:10,closed,,,1,11 - Bug;component: numpy.core,https://api.github.com/repos/numpy/numpy/issues/5676,b'BUG: ufunc.at only works on single output ufuncs',b'Fixes #5665'
5673,60875438,jaimefrio,charris,2015-03-12 18:51:54,2015-03-13 06:09:52,2015-03-13 05:06:07,closed,,,3,11 - Bug;component: numpy.core,https://api.github.com/repos/numpy/numpy/issues/5673,b'BUG: check for nargs <= NPY_MAXARGS in ufunc constructor',b'Fixes #5672'
5672,60839178,mhauru,charris,2015-03-12 15:41:25,2015-03-13 05:06:07,2015-03-13 05:06:07,closed,,,1,11 - Bug;component: numpy.core,https://api.github.com/repos/numpy/numpy/issues/5672,b'Segmentation fault when creating a nargs>32 ufunc using frompyfunc in numpy 1.9.2',"b'Title says most of it, here\'s a minimal example:\r\n\r\nfaulter.py reads\r\n```python\r\nimport numpy as np\r\nprint(\'numpy version:\', np.version.version)\r\n\r\ndef passer(*args):\r\n    pass\r\n\r\nfor i in (31,32):\r\n    print(\'\\ni =\',i)\r\n    vctrzd = np.frompyfunc(passer, i, 1)\r\n    print(\'about to do it\')\r\n    vctrzd(*(np.random.rand(1),)*i)\r\n    print(\'done\')\r\n```\r\nIn 1.8.2 this is handled nicely, as when I run this with my /usr/bin/python3 I just get a ValueError:\r\n```\r\nnumpy version: 1.8.2\r\n\r\ni = 31\r\nabout to do it\r\ndone\r\n\r\ni = 32\r\nabout to do it\r\nTraceback (most recent call last):\r\n  File ""faulter.py"", line 11, in <module>\r\n    vctrzd(*(np.random.rand(1),)*i)\r\nValueError: Cannot construct an iterator with more than 32 operands (33 were requested)\r\n```\r\n\r\nHowever, I have a virtualenv with the numpy 1.9.2. and there this happens:\r\n```\r\nnumpy version: 1.9.2\r\n\r\ni = 31\r\nabout to do it\r\ndone\r\n\r\ni = 32\r\nabout to do it\r\nSegmentation fault (core dumped)\r\n```\r\n\r\nIf I run this in an interactive gdb session using\r\n```\r\ngdb env/bin/python3\r\n(gdb) r faulter.py\r\n```\r\nI get\r\n```\r\n[Thread debugging using libthread_db enabled]\r\nUsing host libthread_db library ""/lib/x86_64-linux-gnu/libthread_db.so.1"".\r\n[New Thread 0x7ffff3b90700 (LWP 9139)]\r\n[New Thread 0x7ffff338f700 (LWP 9140)]\r\n[New Thread 0x7ffff0b8e700 (LWP 9141)]\r\nnumpy version: 1.9.2\r\n\r\ni = 31\r\nabout to do it\r\ndone\r\n\r\ni = 32\r\nabout to do it\r\n\r\nProgram received signal SIGSEGV, Segmentation fault.\r\n0x00007ffff63e3189 in PyUFunc_GenericFunction (ufunc=0x0, args=0x12, args@entry=0x7fffeb2f6c28, \r\n    kwds=kwds@entry=0x0, op=0x7fffffffd5d0) at numpy/core/src/umath/ufunc_object.c:2535\r\n2535\tnumpy/core/src/umath/ufunc_object.c: No such file or directory.\r\n```\r\n\r\nI\'m running Ubuntu 14.10 and python 3.4.2. The system-wide installation that has numpy 1.8.2. came from the Ubuntu binary repositories where as the virtualenv one with numpy 1.9.2. was installed with pip.\r\n\r\nLet me know if more details are needed/helpful.'"
5665,60656546,mhvk,charris,2015-03-11 13:17:34,2015-03-13 05:17:10,2015-03-13 05:17:10,closed,,,3,11 - Bug;component: numpy.core,https://api.github.com/repos/numpy/numpy/issues/5665,"b'BUG segmentation fault for np.modf.at(np.arange(10.), (1,))'","b""Found this while trying to thing of ufunc methods for ufuncs with two outputs (see #5662). While not something that I would expect to work, the following also shouldn't lead to a segmentation fault:\r\n```\r\nimport numpy as np\r\nnp.sin.at(np.arange(10.), (1,))\r\n# works\r\nnp.modf.at(np.arange(10.), (1,))\r\n# Segmentation fault\r\n```"""
5656,60432472,charris,charris,2015-03-10 00:24:30,2015-09-26 09:59:33,2015-06-19 03:01:26,closed,,,5,11 - Bug,https://api.github.com/repos/numpy/numpy/issues/5656,b'Fix alignment issue for 1.10',"b'There was quick fix for 1.9.2 that was a backport of #5316, but the proper fix for 1.10 is still open.'"
5655,60427165,DavidPowell,jaimefrio,2015-03-09 23:24:12,2015-03-11 18:24:32,2015-03-11 18:24:32,closed,,,6,11 - Bug;component: numpy.lib,https://api.github.com/repos/numpy/numpy/issues/5655,b'loadtxt fails with complex data under python 3',"b""If the file `complex-data.txt` contains the following\r\n\r\n````\r\n8.56701944e-02-4.51046468e-03j\r\n-8.10738577e-02+1.38042481e-03j\r\n-4.05139503e-02+2.73159837e-04j\r\n4.28743806e-02-3.94370325e-03j\r\n-4.76092917e-02+3.93395282e-03j\r\n1.17309845e-01-3.28224736e-04j\r\n````\r\n\r\nThen the code\r\n````\r\nimport numpy as np\r\nnp.loadtxt('complex-data.txt', dtype=np.complex128)\r\n```\r\n\r\ngives the exception `TypeError: complex() argument must be a string or a number, not 'bytes'`. It works perfectly fine under python 2.\r\n\r\nThis appears to be caused by `loadtxt` failing to properly decode the text file. May be related to #2715, #4208, #4543, #5530. These issues give me the impression that `loadtxt` is essentially broken under python 3, and needs a radical overhaul.\r\n\r\nAre there any suggested workarounds?"""
5644,60207918,rgommers,charris,2015-03-07 14:17:08,2015-04-19 12:44:24,2015-03-08 16:56:29,closed,,,3,11 - Bug;component: numpy.distutils,https://api.github.com/repos/numpy/numpy/issues/5644,"b'BLD: fix gfortran version check, and make distutils.test() work'",
5640,60172415,pv,charris,2015-03-06 23:09:03,2015-03-08 18:25:37,2015-03-08 18:25:18,closed,,,6,11 - Bug;component: numpy.lib,https://api.github.com/repos/numpy/numpy/issues/5640,b'BUG: enable working around pickle compatibility issues on Py3 in npy files',"b""Add pickle compatibility flags to numpy.save and numpy.load.  Allow only\r\ncombinations that cannot corrupt binary data in Numpy arrays.  Use the\r\nsame default values as Python pickle. These are necessary for enabling\r\nPython 3 to load npy files produced on Python 2, when they contain object arrays.\r\n\r\nIn particular on the default values for `encoding=`:\r\n\r\n- ASCII: can fail if the array contains binary data, or the serialized items contain non-ascii characters in strings\r\n- latin1: can result to latin1 unicode representations of e.g. utf-8 strings (mojibake)\r\n- bytes: results to bytes objects instead of strings in unpickled python objects\r\n- all others: result to ndarray binary data corruption (eg object array containing other ndarrays)\r\n\r\nAll of this sucks, but I don't see ways out of this. `ASCII` is the default for pickle, and has the advantage of failing noisily rather than in obscure ways."""
5638,60070755,DavidPowell,charris,2015-03-06 07:57:41,2015-03-08 23:42:28,2015-03-08 16:58:17,closed,,,6,11 - Bug;component: numpy.f2py,https://api.github.com/repos/numpy/numpy/issues/5638,b'BUG: Cannot read .f2py_f2cmaps under python 3.3',"b""When reading `.f2py_f2cmap`, there is iteration over dictionaries' `keys()` and `items()`, which are iterators in python 3. This prohibits modifying the dicionaries while iterating. By wrapping these calls with `list()`, the python 2 behaviour is restored. Fixes #5637."""
5626,59583204,djrobust,charris,2015-03-03 01:51:23,2016-01-23 01:28:35,2016-01-23 01:28:35,closed,,,18,11 - Bug;component: numpy.linalg,https://api.github.com/repos/numpy/numpy/issues/5626,b'numpy.linalg.norm() broken for multidimensional integer arrays',"b""```python\r\nimport numpy as np\r\n\r\na = np.array([[30, 12, 91],\r\n              [18, 4, 13]], dtype='uint8')\r\nb = a.astype('float')\r\n\r\nprint(np.linalg.norm(a, axis=1))\r\nprint(np.sqrt(np.diag(np.dot(a, a.T))))\r\n\r\nprint(np.linalg.norm(b, axis=1))\r\nprint(np.sqrt(np.diag(np.dot(b, b.T))))\r\n\r\nprint(np.version.version)\r\n```\r\n```python\r\n[ 19.10497317  15.90597372]\r\n[ 10.44030666  15.90597343]\r\n[ 96.56603958  22.56102835]\r\n[ 96.56603958  22.56102835]\r\n1.9.2\r\n```"""
5623,59465322,rev112,jaimefrio,2015-03-02 10:48:55,2015-03-08 20:23:00,2015-03-08 19:57:39,closed,,,17,11 - Bug;component: numpy.random,https://api.github.com/repos/numpy/numpy/issues/5623,b'BUG: Fix potential overflows in rk_hypergeometric_hrua()',"b""This fixes potential integer overflows when the function is called with large arguments.\r\nCast to 'double' must be performed before multiplication, otherwise the integer multiplication (`(popsize -m) * sample`) is carried out first, which may cause overflow.\r\nFor example, if `good == bad == sample == 2**50`, then `m == popsize - m == 2**50`, and the product yields undefined behaviour according to the standard."""
5495,55338768,charris,charris,2015-01-23 22:01:28,2015-05-22 02:15:37,2015-01-24 16:50:06,closed,,,4,11 - Bug;component: numpy.lib,https://api.github.com/repos/numpy/numpy/issues/5495,b'BUG: Fix genfromtext NameValidator arguments passed to easy_dtype.',"b""Squashed commits and rewrote commit message of #4649.\r\n\r\nnp.genfromtxt validates field names twice: once in genfromtxt and once\r\nin easy_dtype. Whilst the arguments to genfromtxt are used in the first\r\nvalidation, they aren't passed to easy_dtype (which is used only when\r\ndtype != None) and therefore in this case the default validation (strip\r\nnon-alphanum, replace spaces) gets confusingly applied, ignoring\r\ngenfromtxt's arguments.\r\n\r\nThis patch adds fixes genfromtxt by passing the appropriate arguments\r\nonwards to easy_dtype.  That is probably the least invasive way to fix\r\nthe issue."""
5467,54794806,pitrou,charris,2015-01-19 18:04:14,2016-01-16 16:53:27,2016-01-16 16:39:06,closed,,,7,11 - Bug;component: build,https://api.github.com/repos/numpy/numpy/issues/5467,b'Interrupting build leaves working copy in a broken copy',"b'If you try to build Numpy, for example:\r\n```\r\n$ python3.4 setup.py build_ext --inplace\r\n```\r\n\r\nand press Ctrl-C before the end, the working copy ends up broken. Any further invocation fails:\r\n```\r\n$ python3.4 setup.py build_ext --inplace\r\nRunning from numpy source directory.\r\nTraceback (most recent call last):\r\n  File ""setup.py"", line 251, in <module>\r\n    setup_package()\r\n  File ""setup.py"", line 235, in setup_package\r\n    from numpy.distutils.core import setup\r\n  File ""/home/antoine/np/numpy/distutils/__init__.py"", line 37, in <module>\r\n    from numpy.testing import Tester\r\n  File ""/home/antoine/np/numpy/testing/__init__.py"", line 14, in <module>\r\n    from .utils import *\r\n  File ""/home/antoine/np/numpy/testing/utils.py"", line 17, in <module>\r\n    from numpy.core import float32, empty, arange, array_repr, ndarray\r\n  File ""/home/antoine/np/numpy/core/__init__.py"", line 14, in <module>\r\n    from . import multiarray\r\nImportError: cannot import name \'multiarray\'\r\n```\r\n\r\nYou then have to issue a non-trivial invocation of ""git clean"" to start again from a blank slate.\r\n'"
5398,52952748,Garrett-R,charris,2014-12-27 09:17:09,2015-01-18 21:48:42,2015-01-02 21:51:42,closed,,,17,11 - Bug;component: numpy.core,https://api.github.com/repos/numpy/numpy/issues/5398,b'BUG: Fixes #5376: np.ravel to return same array type',b'See commit message for details.'
5386,52673146,maniteja123,jaimefrio,2014-12-22 18:03:13,2015-01-16 19:17:36,2014-12-30 11:48:56,closed,,,57,11 - Bug;component: numpy.core,https://api.github.com/repos/numpy/numpy/issues/5386,b'BUG: Issue 5354 - Fixed segmentation fault when clipping complex arrays',"b'BUG:An attempt to fix Issue #5354 .\r\nThe NULL dereference before checking whether the pointer is a NULL pointer is causing a segmentation fault. I am not sure whether the output coming now is the right one. Please do clarify anything else is wrong except the segmentation fault.\r\n\r\nF_min\r\n(-256+0j)\r\nF.clip(F_min)\r\narray([[ 8.29056000e+06 +0.j , 2.56000000e+02+358.28772462j,\r\n-2.56000000e+02 +0.j , ...,\r\n2.56000000e+02+861.73946261j, -2.56000000e+02 +0.j ,\r\n2.56000000e+02-358.28772462j],\r\n[ 0.00000000e+00 +0.j , 0.00000000e+00 +0.j ,\r\n0.00000000e+00 +0.j , ...,\r\n0.00000000e+00 +0.j , 0.00000000e+00 +0.j ,\r\n0.00000000e+00 +0.j ],\r\n[ 0.00000000e+00 +0.j , 0.00000000e+00 +0.j ,\r\n0.00000000e+00 +0.j , ...,\r\n0.00000000e+00 +0.j , 0.00000000e+00 +0.j ,\r\n0.00000000e+00 +0.j ],\r\n..., \r\n[ 0.00000000e+00 +0.j , 0.00000000e+00 +0.j ,\r\n0.00000000e+00 +0.j , ...,\r\n0.00000000e+00 +0.j , 0.00000000e+00 +0.j ,\r\n0.00000000e+00 +0.j ],\r\n[ 0.00000000e+00 +0.j , 0.00000000e+00 +0.j ,\r\n0.00000000e+00 +0.j , ...,\r\n0.00000000e+00 +0.j , 0.00000000e+00 +0.j ,\r\n0.00000000e+00 +0.j ],\r\n[ 0.00000000e+00 +0.j , 0.00000000e+00 +0.j ,\r\n0.00000000e+00 +0.j , ...,\r\n0.00000000e+00 +0.j , 0.00000000e+00 +0.j ,\r\n0.00000000e+00 +0.j ]])'"
5316,50226925,juliantaylor,charris,2014-11-26 21:03:48,2015-04-22 02:25:06,2015-04-22 02:25:06,closed,,,29,11 - Bug;component: numpy.core,https://api.github.com/repos/numpy/numpy/issues/5316,b'fix 1.9 alignment issues',"b'reduce maximum required alignment to 8 bytes on 32 bit but no sparc and fix alignment flag of string arrays, see commit messages for details'"
5250,47385790,bmerry,charris,2014-10-31 11:47:31,2016-03-13 23:37:21,2016-03-13 23:37:21,closed,,,9,11 - Bug;component: npy_math,https://api.github.com/repos/numpy/numpy/issues/5250,b'bitwise_and.identity is incorrect',"b""In numpy 1.9.0 I get the following\r\n```\r\n>>> numpy.bitwise_and.identity\r\n1\r\n```\r\nBut the correct identity should be a pattern of all 1's (for whatever the operation type is). This leads to bizarre results like the following:\r\n```\r\n>>> numpy.bitwise_and.reduce([4])\r\n0\r\n```"""
5148,44862784,bpires-ualberta,juliantaylor,2014-10-04 00:20:10,2014-10-04 18:35:55,2014-10-04 18:35:55,closed,,,1,11 - Bug;Easy Fix,https://api.github.com/repos/numpy/numpy/issues/5148,b'Numpy crashes with -OO',"b'Hello, I ran `$ python -OO -c \'import numpy\'` on a fresh miniconda install (after `$ conda install numpy`) and I got the following output:\r\n\r\n```\r\nTraceback (most recent call last):\r\n  File ""<string>"", line 1, in <module>\r\n  File ""/Users/obernardo/miniconda/lib/python2.7/site-packages/numpy/__init__.py"", line 191, in <module>\r\n    from . import ma\r\n  File ""/Users/obernardo/miniconda/lib/python2.7/site-packages/numpy/ma/__init__.py"", line 49, in <module>\r\n    from . import extras\r\n  File ""/Users/obernardo/miniconda/lib/python2.7/site-packages/numpy/ma/extras.py"", line 438, in <module>\r\n    :np.apply_over_axes.__doc__.find(\'Notes\')].rstrip() + \\\r\nAttributeError: \'NoneType\' object has no attribute \'find\'\r\n```\r\n\r\nRunning `$ python` gives me the following output (I am running OS X Mavericks on a Dec-2010 MacBook Pro):\r\n\r\n```\r\nPython 2.7.8 |Continuum Analytics, Inc.| (default, Aug 21 2014, 15:21:46) \r\n[GCC 4.2.1 (Apple Inc. build 5577)] on darwin\r\nType ""help"", ""copyright"", ""credits"" or ""license"" for more information.\r\nAnaconda is brought to you by Continuum Analytics.\r\nPlease check out: http://continuum.io/thanks and https://binstar.org\r\n```\r\nFinally, running `python -c \'import numpy\'` works normally. I hope this is enough information for you all, but please let me know if you need more. (It\'s the second bug report I submit in my life, and the first one was about a typo in documentation!)\r\n\r\nThanks a lot for making numpy available to us, it is a very, very useful tool that works greatly for me.'"
5082,43220306,rkern,charris,2014-09-19 09:27:01,2014-09-19 20:33:52,2014-09-19 20:33:52,closed,,,1,11 - Bug,https://api.github.com/repos/numpy/numpy/issues/5082,b'Segmentation fault with argmin() on unicode arrays',"b""`np.zeros(6031, dtype='<U9').argmin()` crashes `master` and at least numpy 1.8. Some smaller arrays work fine.\r\n\r\nNote, there is nothing particularly special about using `zeros()` here; it's just the shortest example that demonstrates the problem."""
5010,41334849,opoplawski,rgommers,2014-08-27 21:51:58,2014-09-16 07:27:24,2014-08-29 19:53:27,closed,,,4,11 - Bug,https://api.github.com/repos/numpy/numpy/issues/5010,b'removed/changed paths in 1.9.0rc1',"b""I'm seeing the following errors from setup.py:\r\n```\r\nnon-existing path in 'numpy/f2py': 'docs'\r\nnon-existing path in 'numpy/f2py': 'f2py.1'\r\nnon-existing path in 'numpy/lib': 'benchmarks'\r\n```\r\nIt would be nice if f2py.1 was installed in /usr/share/man/man1/f2py.1.\r\n"""
4890,38208017,argriffing,charris,2014-07-18 20:07:41,2014-07-27 18:23:20,2014-07-27 18:23:20,closed,,,1,11 - Bug;component: Documentation,https://api.github.com/repos/numpy/numpy/issues/4890,b'DOC: some missing functions',b'I was surprised that `ascontiguousarray` and `asarray_chkfinite` are not in http://docs.scipy.org/doc/numpy/reference/routines.array-manipulation.html#changing-kind-of-array.\r\n'
4848,37245012,gundamlh,seberg,2014-07-07 07:30:59,2014-07-07 18:10:39,2014-07-07 14:20:27,closed,,,13,11 - Bug;component: numpy.linalg,https://api.github.com/repos/numpy/numpy/issues/4848,b'np.linalg._umath_linalg.svd_m has wrong complex type signature',"b'numpy.linalg.svd() works well in the case of fat 2d-arrays, but numpy.linalg.cond() reports an error about ""signature"". I don\'t know how to fix it, so I simply avoid the ""Fat"" case.\r\n\r\n    def my_cond(a, p=None):\r\n        """"""\r\n        Computes the condition number of a matrix (2D-Array).\r\n    \r\n        Call numpy.linalg.cond and avoid its Bug in the case of fat 2D-Arrays.\r\n    \r\n        See also\r\n        ----------\r\n        numpy.linalg.cond\r\n\r\n        """"""\r\n        nrows, ncols = a.shape\r\n        cn = np.linalg.cond(a.T, p) if nrows < ncols else np.linalg.cond(a, p)\r\n        \r\n        return cn\r\n\r\n**EDIT (seberg):** The error is that `np.linalg._umath_linalg.svd_m` should have a complex->float signature just like `svd_n`.'"
4799,35386164,eyurtsev,charris,2014-06-10 14:17:41,2014-06-30 01:44:15,2014-06-30 01:44:15,closed,,,2,11 - Bug,https://api.github.com/repos/numpy/numpy/issues/4799,b'Missing data point in histogram2d when using float32 arrays',"b""I am getting an incorrect count from the histogram2d function when using arrays with dtype=numpy.float32. Specifically, the histogram2d fails to count one of the data points when I use bins=100.\r\n\r\nIf on the other hand I put dtype=numpy.float64, then I get an output of 3 from both function calls below.\r\n\r\n```python\r\nimport numpy\r\n\r\nx = numpy.array([276.318359  , -69.593948  , 21.329449], dtype=numpy.float32)\r\ny = numpy.array([5005.689453, 4481.327637, 6010.369629], dtype=numpy.float32)\r\n\r\ncounts_hist, xedges, yedges = numpy.histogram2d(x, y, bins=200)\r\nprint sum(sum(counts_hist)) # <-- outputs 3\r\n\r\ncounts_hist, xedges, yedges = numpy.histogram2d(x, y, bins=100)\r\nprint sum(sum(counts_hist)) # <-- outputs 2, but expecting 3\r\n```\r\n\r\n# Information\r\n\r\neyurtsev@puddles:~/Desktop$ uname -a\r\nLinux puddles 3.13.0-24-generic #47-Ubuntu SMP Fri May 2 23:30:00 UTC 2014 x86_64 x86_64 x86_64 GNU/Linux\r\n\r\neyurtsev@puddles:~/Desktop$ ipython -c 'import numpy; print numpy.__version__'\r\n1.8.1\r\n\r\nPython 2.7.6 (default, Mar 22 2014, 22:59:56) \r\n\r\n\r\nPlease let me know if there is any more information I can provide that will be helpful."""
4798,35364785,frozflame,pv,2014-06-10 09:28:29,2016-03-02 14:31:47,2016-03-02 14:31:47,closed,,,2,11 - Bug;component: numpy.lib,https://api.github.com/repos/numpy/numpy/issues/4798,"b""numpy.load() can't load matplotlib/sample_data/goog.npy in Python 3""","b""A bug report. New to GitHub, I don't know it's proper to put this here this way.\r\n\r\nSee also in [this](http://stackoverflow.com/questions/24105148/load-npy-file-in-python-3#comment37242668_24117216) stackoverflow post. \r\n\r\n`numpy.load()` can't load `matplotlib/sample_data/goog.npy` in Python 3.4, but works in Python 2.7. NumPy version `1.8,1`:\r\n\r\n```\r\ndatafile = matplotlib.cbook.get_sample_data('goog.npy', asfileobj=False)\r\nnp.load(datafile)\r\n```\r\nand exception raised:\r\n```\r\nUnicodeDecodeError: 'ascii' codec can't decode byte 0xd4 in position 1: ordinal not in range(128)\r\n```\r\nSomeone on stackoverflow suggested to modify function `read_array` in `numpy/lib/format.py` from \r\n```\r\narray = pickle.load(fp)\r\n```\r\nto \r\n\r\n```\r\narray = pickle.load(fp, encoding = 'latin1')  #or\r\narray = pickle.load(fp, encoding = 'bytes') \r\n```\r\nbut didn't work.\r\n\r\nThe `.npy` file can be found [here](https://github.com/matplotlib/sample_data/blob/master/goog.npy). The full traceback I got:\r\n```python\r\nUnicodeDecodeError                        Traceback (most recent call last)\r\n<ipython-input-2-a5884b393c14> in <module>()\r\n----> 1 np.load('Downloads/goog.npy')\r\n\r\n/usr/lib/python3/dist-packages/numpy/lib/npyio.py in load(file, mmap_mode)\r\n    392                 return format.open_memmap(file, mode=mmap_mode)\r\n    393             else:\r\n--> 394                 return format.read_array(fid)\r\n    395         else:\r\n    396             # Try a pickle\r\n\r\n/usr/lib/python3/dist-packages/numpy/lib/format.py in read_array(fp)\r\n    444     if dtype.hasobject:\r\n    445         # The array contained Python objects. We need to unpickle the data.\r\n--> 446         array = pickle.load(fp)\r\n    447     else:\r\n    448         if isfileobj(fp):\r\n\r\nUnicodeDecodeError: 'ascii' codec can't decode byte 0xd4 in position 1: ordinal not in range(128)\r\n```\r\n"""
4778,34990153,taldcroft,charris,2014-06-04 18:46:17,2014-06-04 22:36:18,2014-06-04 22:36:18,closed,,1.9 blockers,15,11 - Bug,https://api.github.com/repos/numpy/numpy/issues/4778,b'PR #4606 introduces regression into astropy table join',"b""The numpy commit e47a50efc284c677ba4d0337e11dc8514fca7e5b causes a failure of an astropy test that works fine with all previous numpy versions through 1.5.  This was determined with git bisect on numpy dev.\r\n\r\nThe failure manifests as an apparent leak of memory bytes between two tables during a table join operation.  This is demonstrated below.  Apologies that I haven't had time to make a simpler test to reproduce without using the `astropy.table.np_utils.join` function, but perhaps the symptoms may be obvious enough?  If not I can try harder to figure out where this is happening within the `join` function.\r\n\r\nThis is discussed in https://github.com/astropy/astropy/issues/2281.\r\n\r\n```\r\nIn [8]: t1\r\nOut[8]: \r\narray([('M31', '2012-01-02', 17.0, 16.0),\r\n       ('M82', '2012-10-29', 16.2, 15.2),\r\n       ('M101', '2012-10-31', 15.1, 15.5)], \r\n      dtype=[('name', 'S4'), ('obs_date', 'S10'), ('mag_b', '<f8'), ('mag_v', '<f8')])\r\n\r\nIn [9]: t2\r\nOut[9]: \r\narray([('NGC3516', '2011-11-11', 42.1), ('M31', '1999-01-05', 43.1),\r\n       ('M82', '2012-10-29', 45.0)], \r\n      dtype=[('name', 'S7'), ('obs_date', 'S10'), ('logLx', '<f8')])\r\n\r\nIn [10]: from astropy.table import np_utils\r\n\r\nIn [11]: t3 = np_utils.join(t1, t2, keys='name', join_type='left')\r\n\r\nIn [12]: t3\r\nOut[12]: \r\nmasked_array(data = [('M101516', '2012-10-31', 15.1, 15.5, --, --)\r\n ('M31', '2012-01-02', 17.0, 16.0, '1999-01-05', 43.1)\r\n ('M82', '2012-10-29', 16.2, 15.2, '2012-10-29', 45.0)],\r\n             mask = [(False, False, False, False, True, True)\r\n (False, False, False, False, False, False)\r\n (False, False, False, False, False, False)],\r\n       fill_value = ('N/A', 'N/A', 1e+20, 1e+20, 'N/A', 1e+20),\r\n            dtype = [('name', 'S7'), ('obs_date_1', 'S10'), ('mag_b', '<f8'), ('mag_v', '<f8'), ('obs_date_2', 'S10'), ('logLx', '<f8')])\r\n\r\n\r\nIn [13]: print t3\r\n[('M101516', '2012-10-31', 15.1, 15.5, --, --)\r\n ('M31', '2012-01-02', 17.0, 16.0, '1999-01-05', 43.1)\r\n ('M82', '2012-10-29', 16.2, 15.2, '2012-10-29', 45.0)]\r\n```\r\nThe expected first value of the first row is `'M101'`.  It appears that the final three characters of the first value in the `t2` table are leaking into the `t3` table (the `516` characters from `NGC3516`)."""
4753,34506076,mhvk,charris,2014-05-28 20:58:16,2015-10-05 15:58:50,2015-10-05 15:53:20,closed,,,36,11 - Bug;component: numpy.core,https://api.github.com/repos/numpy/numpy/issues/4753,b'BUG difference in behaviour for subclass output in ufuncs',"b""If one wants to have the output of a `ufunc` passed to a ndarray subclass, but the input is a regular array, the behaviour differs depending on whether one passes the output as a positional or as a keyword argument: if passed as positional argument, `__numpy_ufunc__` is called, while if passed as a keyword argument, `__array_prepare__` and `__array_wrap__` are called. I would have expected for `__numpy_ufunc__` to be called in both cases.\r\n\r\np.s.  If the input is a subclass, it always works as expected.\r\n\r\nExample script:\r\n```\r\nimport numpy as np\r\n\r\n\r\nclass MyArray(np.ndarray):\r\n    def __array_prepare__(self, obj, context=None):\r\n        print('prepare:', self, obj, context)\r\n        return super(MyArray, self).__array_prepare__(obj, context)\r\n\r\n    def __array_wrap__(self, obj, context):\r\n        print('wrap:', self, obj, context)\r\n        return super(MyArray, self).__array_wrap__(obj, context)\r\n\r\n    def __numpy_ufunc__(self, ufunc, method, i, inputs, **kwargs):\r\n        print('ufunc:', self, ufunc, method, i, inputs, kwargs)\r\n        values = [np.asarray(arg) for arg in inputs]\r\n        if 'out' in kwargs:\r\n            kwargs['out'] = kwargs['out'].view(np.ndarray)\r\n        result = getattr(ufunc, method)(*values, **kwargs) / 2.\r\n        return result.view(MyArray)\r\n\r\na = np.array([-1., -1.]).view(MyArray)\r\nprint(repr(np.sin(np.arange(2.), a)))\r\na = np.array([-1., -1.]).view(MyArray)\r\nprint(repr(np.sin(np.arange(2.), out=a)))\r\n```"""
4738,34234976,rgommers,charris,2014-05-24 14:34:37,2014-06-21 03:42:07,2014-05-24 15:31:53,closed,,,2,11 - Bug;component: Documentation,https://api.github.com/repos/numpy/numpy/issues/4738,"b'DOC: tweak gufunc API documentation, remove broken link.  '",
4736,34158793,isaxs,rgommers,2014-05-23 09:29:31,2014-05-24 16:04:59,2014-05-24 16:04:59,closed,,,5,11 - Bug;component: Documentation;Easy Fix,https://api.github.com/repos/numpy/numpy/issues/4736,b'problem of numpy.fft.fft2 example ',"b""http://docs.scipy.org/doc/numpy/reference/generated/numpy.fft.fft2.html\r\nI run the example,, however, what I got is different from what you shown in the example.\r\nI got \r\narray([[ 50.0 +0.j        ,   0.0 +0.j        ,   0.0 +0.j        ,\r\n          0.0 +0.j        ,   0.0 +0.j        ],\r\n       [-12.5+17.20477401j,   0.0 +0.j        ,   0.0 +0.j        ,\r\n          0.0 +0.j        ,   0.0 +0.j        ],\r\n       [-12.5 +4.0614962j ,   0.0 +0.j        ,   0.0 +0.j        ,\r\n          0.0 +0.j        ,   0.0 +0.j        ],\r\n       [-12.5 -4.0614962j ,   0.0 +0.j        ,   0.0 +0.j        ,\r\n          0.0 +0.j        ,   0.0 +0.j        ],\r\n       [-12.5-17.20477401j,   0.0 +0.j        ,   0.0 +0.j        ,\r\n          0.0 +0.j        ,   0.0 +0.j        ]])\r\nI don't know what happened?\r\nThanks a lot."""
4726,33822439,pitrou,rgommers,2014-05-19 18:01:53,2014-05-24 15:31:56,2014-05-24 15:31:56,closed,,,2,11 - Bug;component: Documentation,https://api.github.com/repos/numpy/numpy/issues/4726,b'dead link in generalized ufunc documentation',"b'http://docs.scipy.org/doc/numpy/reference/c-api.generalized-ufuncs.html has a link to http://scipy.org/scipy/numpy/wiki/GeneralLoopingFunctions, but that URL returns a 404.\r\n'"
4723,33699859,fz0dbx,juliantaylor,2014-05-16 18:48:07,2015-01-27 20:44:56,2015-01-27 20:44:56,closed,,,4,11 - Bug;component: build;Easy Fix,https://api.github.com/repos/numpy/numpy/issues/4723,b'fails to compile on AIX',"b'I am building numpy on AIX 6.1 using the xlc compilers.  They are failing with errors like this:\r\ncreating build/temp.aix-6.1-2.7/build/src.aix-6.1-2.7/numpy/core/src/npysort\r\ncompile options: \'-Ibuild/src.aix-6.1-2.7/numpy/core/src/private -Inumpy/core/include -Ibuild/src.aix-6.1-2.7/numpy/core/include/numpy -Inumpy/core/src/private -Inumpy/core/src -Inumpy/core -Inumpy/core/src/npymath -Inumpy/core/src/multiarray -Inumpy/core/src/umath -Inumpy/core/src/npysort -Inumpy/core/include -I/profit/freeware/python/aix/python2.7.6/include/python2.7 -Ibuild/src.aix-6.1-2.7/numpy/core/src/private -Ibuild/src.aix-6.1-2.7/numpy/core/src/private -Ibuild/src.aix-6.1-2.7/numpy/core/src/private -Ibuild/src.aix-6.1-2.7/numpy/core/src/private -c\'\r\nxlc_r: build/src.aix-6.1-2.7/numpy/core/src/npysort/heapsort.c\r\n""/usr/include/stdio.h"", line 528.12: 1506-343 (S) Redeclaration of fgetpos64 differs from previous declaration on line 323 of ""/usr/include/stdio.h"".\r\n""/usr/include/stdio.h"", line 528.12: 1506-377 (I) The type ""long long*"" of parameter 2 differs from the previous type ""long* restrict"".\r\n""/usr/include/stdio.h"", line 531.12: 1506-343 (S) Redeclaration of fseeko64 differs from previous declaration on line 471 of ""/usr/include/stdio.h"".\r\n""/\r\n\r\nThe problem is that on AIX as well as other platforms, Python.h contains system level defines that are used in standard libraries.  This particular problem is in stdio.h.\r\nOn AIX, Python is built with -DLARGE_FILES and this define is in Python.h(actually pyconfig.h included in Python.h.)  Basically, since Python.h has these system level defines, Python.h should be included before any other include so that the defines are seen first before any other includes are processed.  If you look at all of the Python source code, you will see that this is the case.  In fact, most of the numpy source also does this and it probably is a know fact that it should be done.  However, the following numpy source files do not include Python.h first or in some cases at all.\r\nnumpy/core/src/multiarray/methods.c\r\nnumpy/core/src/umath/test_rational.c.src\r\nnumpy/core/src/umath/operand_flag_test.c.src\r\n\r\nThe following don\'t have include Python.h at all and need to have for them to compile:\r\nnumpy/core/src/npysort/heapsort.c.src\r\nnumpy/core/src/npysort/quicksort.c.src\r\nnumpy/core/src/npysort/mergesort.c.src\r\n\r\nOnce I moved the #include Python.h to be the first include or added it if not there, numpy compiled.'"
4679,32869593,briancheung,jaimefrio,2014-05-06 06:51:44,2015-03-13 00:59:13,2015-03-13 00:59:13,closed,,,4,11 - Bug;component: numpy.lib,https://api.github.com/repos/numpy/numpy/issues/4679,b'BUG: numpy tile does not copy',"b'For single repetitions, tile returns the same reference. More intuitive behavior would be to return a copy regardless of number of repetitions.\r\n```python\r\nIn [1]: import numpy as np\r\nIn [2]: x = np.arange(5)\r\nIn [3]: y = np.tile(x,(1,1))\r\nIn [4]: y\r\nOut[4]: array([[0, 1, 2, 3, 4]])\r\nIn [5]: y+=3\r\nIn [6]: y\r\nOut[6]: array([[3, 4, 5, 6, 7]])\r\nIn [7]: x\r\nOut[7]: array([3, 4, 5, 6, 7])\r\n```'"
4677,32827672,charris,charris,2014-05-05 17:28:43,2014-07-27 10:09:54,2014-05-05 17:53:43,closed,,1.9 blockers,1,11 - Bug;component: numpy.ma;priority: high,https://api.github.com/repos/numpy/numpy/issues/4677,b'BUG: Fix test error in scipy introduced by commit d8fd283.',"b'Revert ""ENH: ma.asarray() and ma.asanyarray() will pass through input\r\n        of the correct type.""\r\n\r\nThis reverts commit d8fd28389adb491e24b7cdc25cd1b20f539310c3.\r\n\r\nThat commit caused test errors in scipy, which was apparently\r\nexpecting a copy rather than a passed through array. The idea\r\nmay be good, but at a minimum it should probably be preceded\r\nby a deprecation period.\r\n\r\nCloses #4675.'"
4664,32757571,charris,charris,2014-05-03 23:43:47,2014-05-04 13:23:53,2014-05-04 12:59:53,closed,,,13,11 - Bug;component: build;priority: high,https://api.github.com/repos/numpy/numpy/issues/4664,b'Travis tests are busted.',"b'I suspect there has been a change in the configuration of some of the build machines, but maybe something else is broken. The end of the traceback is:\r\n```\r\nFile ""/tmp/pip-0jmng0-build/numpy/distutils/command/install.py"", line 33, in setuptools_run\r\n\r\nreturn old_install_mod._install.run(self)\r\n\r\nAttributeError: \'module\' object has no attribute \'_install\'\r\n```\r\nWhere `old_install_mod` is python\'s `distutils.command.install`.'"
4658,32742020,tjlane,rkern,2014-05-03 07:37:35,2014-06-23 12:03:06,2014-06-23 12:03:06,closed,,,3,11 - Bug;component: Documentation;component: numpy.random;Easy Fix,https://api.github.com/repos/numpy/numpy/issues/4658,b'Bug in behavior of np.random.negative_binomial',"b""Hi,\r\nI haven't delved into the code, but I think the random number generation in `np.random.negative_binomial` is screwed. A simple test shows that, e.g. the numerical mean is not the same as what is analytically expected even for large empirical samples:\r\n\r\n```\r\nIn [1]: from numpy import random\r\nIn [2]: n = 10\r\nIn [3]: p = 0.25\r\nIn [4]: print random.negative_binomial(n, p, 10000).mean()\r\n30.1287\r\nIn [5]: print n*p / (1-p)\r\n3.33333333333\r\n```\r\n\r\nThe last two numbers should be the same :).\r\n\r\nSee: http://en.wikipedia.org/wiki/Negative_binomial_distribution, cited in the doc string of `random.negative_binomial`.\r\n\r\n"""
4656,32708975,foogod,charris,2014-05-02 17:19:13,2014-06-23 22:15:11,2014-05-06 23:13:34,closed,,,22,11 - Bug;component: numpy.fft,https://api.github.com/repos/numpy/numpy/issues/4656,b'Fix for #4655: Make fftpack._raw_fft threadsafe',b'This patch replaces the naive dictionary-cache implementation in _raw_fft with an equivalent cache that will perform correctly in a multithreaded context.'
4655,32707928,foogod,juliantaylor,2014-05-02 17:03:54,2014-05-09 10:40:05,2014-05-09 10:40:05,closed,,,1,11 - Bug;component: numpy.fft,https://api.github.com/repos/numpy/numpy/issues/4655,b'numpy.fft.fft / rfft / etc routines are not threadsafe',"b'It appears that numpy.fft.fftpack._raw_fft is doing internal caching in a non-threadsafe manner, causing data corruption if FFTs are done on similarly-sized arrays from multiple threads at the same time.\r\n\r\nThe following sample code can be used to reproduce the issue:\r\n\r\n```\r\nimport numpy\r\nimport threading\r\n\r\nmat = numpy.random.random((1000,1000))\r\nresult = numpy.fft.fft(mat)\r\n\r\ndef do_test():\r\n    global mat, result\r\n    r = numpy.fft.fft(mat)\r\n    if not (r == result).all():\r\n        print ""FAILED: %s produced wrong result."" % (threading.current_thread().name,)\r\n\r\nfor i in xrange(16):\r\n    threading.Thread(target=do_test).start()\r\n```\r\n'"
4653,32657288,alimuldal,alimuldal,2014-05-01 23:37:49,2014-05-03 11:49:47,2014-05-03 11:49:47,closed,,1.9 blockers,7,11 - Bug;12 - Regression,https://api.github.com/repos/numpy/numpy/issues/4653,b'Memory leaks with np.random.shuffle',"b'Hi everyone,\r\n\r\nI\'ve found a nasty memory leak while using `np.random.shuffle`:\r\n\r\n    import numpy as np\r\n\r\n    @profile\r\n    def shuffle_leaktest():\r\n        x = np.random.randn(1000, 1000)\r\n        for ii in xrange(1000):\r\n            np.random.shuffle(x)\r\n        del x\r\n\r\n    if __name__ == \'__main__\':\r\n        print ""numpy version: "" + np.__version__\r\n        shuffle_leaktest()\r\n\r\n`$ python -m memory_profiler shuffle_leaktest.py`\r\n\r\n    numpy version: 1.9.0.dev-fae89b0\r\n    Filename: shuffle_leaktest.py\r\n\r\n    Line #    Mem usage    Increment   Line Contents\r\n    ================================================\r\n         3  110.535 MiB    0.000 MiB   @profile\r\n         4                             def shuffle_leaktest():\r\n         5  118.195 MiB    7.660 MiB       x = np.random.randn(1000, 1000)\r\n         6  337.770 MiB  219.574 MiB       for ii in xrange(1000):\r\n         7  337.770 MiB    0.000 MiB           np.random.shuffle(x)\r\n         8  337.770 MiB    0.000 MiB       del x\r\n\r\nUsing `git bisect` I\'ve tracked down the first instance of memory leakage to commit 607863d7387e80dab4b064856b598a8c86e9bee4.\r\n\r\nNo leak:\r\n\r\n     numpy version: 1.9.0.dev-c7a30d5\r\n     Filename: shuffle_leaktest.py\r\n\r\n     Line #    Mem usage    Increment   Line Contents\r\n     ================================================\r\n          3  103.633 MiB    0.000 MiB   @profile\r\n          4                             def shuffle_leaktest():\r\n          5  111.285 MiB    7.652 MiB       x = np.random.randn(1000, 1000)\r\n          6  111.305 MiB    0.020 MiB       for ii in xrange(1000):\r\n          7  111.305 MiB    0.000 MiB           np.random.shuffle(x)\r\n          8  103.672 MiB   -7.633 MiB       del x\r\n\r\nLeak:\r\n\r\n     numpy version: 1.9.0.dev-607863d\r\n     Filename: shuffle_leaktest.py\r\n\r\n     Line #    Mem usage    Increment   Line Contents\r\n     ================================================\r\n          3  112.664 MiB    0.000 MiB   @profile\r\n          4                             def shuffle_leaktest():\r\n          5  120.316 MiB    7.652 MiB       x = np.random.randn(1000, 1000)\r\n          6  183.031 MiB   62.715 MiB       for ii in xrange(1000):\r\n          7  183.031 MiB    0.000 MiB           np.random.shuffle(x)\r\n          8  175.398 MiB   -7.633 MiB       del x\r\n\r\nHowever, this leak seems to be much less pronounced than the one I\'m currently seeing in master. It seems that things suddenly got a lot worse with commit 9f8771accdc11a83dc928a99bd0ba48fe7bcca89:\r\n\r\nSmall leak:\r\n\r\n     numpy version: 1.9.0.dev-f57c77b\r\n     Filename: shuffle_leaktest.py\r\n\r\n     Line #    Mem usage    Increment   Line Contents\r\n     ================================================\r\n          3   87.219 MiB    0.000 MiB   @profile\r\n          4                             def shuffle_leaktest():\r\n          5   94.871 MiB    7.652 MiB       x = np.random.randn(1000, 1000)\r\n          6  157.789 MiB   62.918 MiB       for ii in xrange(1000):\r\n          7  157.789 MiB    0.000 MiB           np.random.shuffle(x)\r\n          8  150.156 MiB   -7.633 MiB       del x\r\n\r\nBig leak:\r\n\r\n     numpy version: 1.9.0.dev-9f8771a\r\n     Filename: shuffle_leaktest.py\r\n\r\n     Line #    Mem usage    Increment   Line Contents\r\n     ================================================\r\n          3  118.914 MiB    0.000 MiB   @profile\r\n          4                             def shuffle_leaktest():\r\n          5  126.566 MiB    7.652 MiB       x = np.random.randn(1000, 1000)\r\n          6  346.133 MiB  219.566 MiB       for ii in xrange(1000):\r\n          7  346.133 MiB    0.000 MiB           np.random.shuffle(x)\r\n          8  346.133 MiB    0.000 MiB       del x\r\n'"
4652,32596803,ogh,juliantaylor,2014-05-01 06:13:05,2014-05-02 10:00:24,2014-05-02 10:00:24,closed,,,5,11 - Bug,https://api.github.com/repos/numpy/numpy/issues/4652,b'Memory leak in combination with Theano',"b'Hi everyone,\r\n\r\nI found a memory leak writing code using the [theano](http://deeplearning.net/software/theano/) module and I was able to trace it back to numpy.\r\n\r\n[I already posted on the theano mailing list about it](https://groups.google.com/forum/#!topic/theano-dev/3gI_S9ns9oE)\r\n\r\nSample code to reproduce the leak:\r\n\r\nRequired modules:\r\n  - Numpy ([commit](https://github.com/numpy/numpy/commit/0c9f285f38ea4d143c5e79badd0d36cb808242a6): `0c9f285f38ea4d143c5e79badd0d36cb808242a6`)\r\n  - Scipy ([commit](https://github.com/scipy/scipy/commit/d9a8c214c4cea75f7d240957a646b562cf081f8b): `d9a8c214c4cea75f7d240957a646b562cf081f8b`)\r\n  - Theano ([commit](https://github.com/Theano/Theano/commit/26d913091e56b3e80e7c562175b856a90dd782e4): `26d913091e56b3e80e7c562175b856a90dd782e4`)\r\n  - for ""@profile"" decorator: memory_profiler and psutils\r\n  - I also use OpenBlas\r\n\r\n```ruby\r\nimport theano\r\nfrom theano import tensor as T\r\nimport numpy as np\r\n\r\nk = T.iscalar(""k"")\r\nA = T.vector(""A"")\r\n\r\n# Symbolic description of the result\r\nresult, updates = theano.scan(fn=lambda prior_result, A: prior_result * A,\r\n                              outputs_info=T.ones_like(A),\r\n                              non_sequences=A,\r\n                              n_steps=k)\r\n\r\nprint ""Compiling function""\r\npower = theano.function(inputs=[A,k], outputs=result, updates=updates)\r\nprint ""Compiling function - done""\r\n\r\nip = np.arange(10000)\r\nx = None\r\nprint ""Starting loop""\r\n@profile\r\ndef test():\r\n    for i in xrange(10000):\r\n        x = power(ip,6)\r\ntest()\r\nprint ""Done.""\r\n```\r\n\r\nFor more logs:\r\nhttps://gist.github.com/ogh/b6694c8eb7793b454dee\r\n\r\n\r\nWith the same configuration except for numpy switched out with a version from last September everything works fine without any leak.\r\n(tried the November version since I was using it on a server where I did not have the memory leak)\r\n\r\nThe version of numpy that works without a leak: [commit](https://github.com/numpy/numpy/tree/135443768a24ab4fbfd4fa5c8fc40f27d2e25c96)`135443768a24ab4fbfd4fa5c8fc40f27d2e25c96`\r\n\r\nCan you give me any advice on how to narrow down the problem further?'"
4649,32434164,alanbriolat,charris,2014-04-29 10:32:51,2015-01-23 22:13:08,2015-01-23 22:02:41,closed,,,3,11 - Bug;component: numpy.lib,https://api.github.com/repos/numpy/numpy/issues/4649,b'Fix np.genfromtxt field name handling when dtype != None',"b""``np.genfromtxt`` validates field names twice: once in ``genfromtxt`` and once in ``easy_dtype``.  Whilst the arguments to ``genfromtxt`` are used in the first validation, they aren't passed to ``easy_dtype`` (which is used only when ``dtype != None``) and therefore in this case the default validation (strip non-alphanum, replace spaces) gets confusingly applied, ignoring ``genfromtxt``'s arguments.\r\n\r\nThis patch adds failing tests for the issue and fixes ``genfromtxt`` by passing the appropriate arguments onwards to ``easy_dtype``.\r\n\r\nThis is probably the least invasive way to fix the issue.  In my opinion, the whole thing is a nest of poorly-defined responsibilities between ``genfromtxt``, ``easy_dtype`` and ``NameValidator``, especially since the latter two are only used in the former.  I'm willing to take the time to try and clean that up if it's likely to be well-received."""
4631,31896454,WarrenWeckesser,charris,2014-04-21 13:45:23,2014-05-04 13:35:17,2014-05-04 13:35:17,closed,,,1,11 - Bug;component: numpy.polynomial,https://api.github.com/repos/numpy/numpy/issues/4631,"b""BUG: polynomial: UnboundLocalError: local variable 'quo' referenced before assignment""","b""An error was reported on stackoverflow (http://stackoverflow.com/questions/23186008/numpy-namespace-issue).  My answer, repeated here, describes the problem.\r\n\r\nIn the implementation of `__rtruediv__` at https://github.com/numpy/numpy/blob/master/numpy/polynomial/_polybase.py#L421, you can see that if `len(self.coef)` is not 1, the statement\r\n\r\n        return self.__class__(quo, self.domain, self.window)\r\n\r\nis executed, but `quo` is not defined.\r\n\r\nHere's a simple example that generates the error:\r\n\r\n    In [1]: import numpy.polynomial.polynomial as npp\r\n\r\n    In [2]: p1 = npp.Polynomial([1,2])\r\n\r\n    In [3]: p2 = npp.Polynomial([3,4])\r\n\r\n    In [4]: npp.polydiv(p1, p2)\r\n    ---------------------------------------------------------------------------\r\n    UnboundLocalError                         Traceback (most recent call last)\r\n    <ipython-input-4-00c25f56fb20> in <module>()\r\n    ----> 1 npp.polydiv(p1, p2)\r\n\r\n        /Users/warren/anaconda/lib/python2.7/site-packages/numpy/polynomial/polynomial.pyc in polydiv(c1, c2)\r\n        406     len2 = len(c2)\r\n        407     if len2 == 1 :\r\n    --> 408         return c1/c2[-1], c1[:1]*0\r\n        409     elif len1 < len2 :\r\n        410         return c1[:1]*0, c1\r\n\r\n    /Users/warren/anaconda/lib/python2.7/site-packages/numpy/polynomial/polynomial.pyc in __rtruediv__(self, other)\r\n\r\n    UnboundLocalError: local variable 'quo' referenced before assignment\r\n\r\n"""
4630,31888864,rgommers,charris,2014-04-21 09:51:57,2014-06-25 02:49:20,2014-04-22 17:48:04,closed,,,8,11 - Bug;component: numpy.distutils,https://api.github.com/repos/numpy/numpy/issues/4630,"b'BLD: remove ""-Wl,-framework,Python"" from linker flags for Intel compiler...'","b'....\r\n\r\nThe ""-Wl,-undefined,dynamic_lookup"" flag is enough to make things work\r\nwith OS X bundles.  On the mailing list an issue was reported with\r\nAnaconda (non-framework build) where f2py was picking up the system framework\r\nPython instead of the Anaconda one.\r\n\r\nThanks to @rkern for explaining how to fix this.'"
4627,31852319,rgommers,charris,2014-04-19 18:58:05,2014-06-25 00:14:51,2014-06-25 00:14:51,closed,,,2,11 - Bug;12 - Regression;component: numpy.ma,https://api.github.com/repos/numpy/numpy/issues/4627,b'``ma.apply_along_axis`` regression',"b'After merging gh-4463, a ``scipy.stats.mstats.trim`` is failing: https://github.com/scipy/scipy/issues/3554\r\n\r\nIt looks to me like the expected result for this test is correct, but the mask has one row too many of the mask set to true:\r\n\r\n    import numpy as np\r\n    from scipy import stats\r\n\r\n    x = np.ma.arange(110).reshape(11, 10)\r\n    x[1] = np.ma.masked\r\n\r\n    trimx = stats.mstats.trim(x, (0.1,0.2), relative=True, axis=0)\r\n    np.testing.assert_equal(trimx._mask.ravel(), [1]*20 + [0]*70 + [1]*20)\r\n\r\n    trimx = stats.mstats.trim(x.T, (0.1,0.2), relative=True, axis=-1)\r\n    np.testing.assert_equal(trimx.T._mask.ravel(), [1]*20 + [0]*70 + [1]*20)'"
4623,31662189,vgweirs,rgommers,2014-04-16 17:30:49,2015-01-02 12:04:44,2015-01-02 12:04:44,closed,,,8,11 - Bug;component: Documentation;component: numpy.f2py,https://api.github.com/repos/numpy/numpy/issues/4623,b'link to f2py manual pdf is broken ',"b'From http://docs.scipy.org, the link to the html version of the guide is fine:\r\nhttp://docs.scipy.org/doc/numpy-dev/f2py/\r\n\r\nBut the link to the pdf version:\r\nhttp://docs.scipy.org/doc/numpy-dev/f2py-1.8.1.pdf\r\ngives a file not found error:\r\n""The requested URL /doc/numpy-dev/f2py-1.8.1.pdf was not found on this server.""'"
4601,31069658,jprafael,jaimefrio,2014-04-08 13:23:41,2015-05-04 12:51:46,2015-05-04 12:51:46,closed,,,6,11 - Bug;component: numpy.lib,https://api.github.com/repos/numpy/numpy/issues/4601,b'trapz returns wrong values when x is out of order',"b'Internally, trapz uses np.diff() to calculate dx. This makes the assumption that the x values are increasing monotonically. This leads to wrong values when x does not have this property:\r\n\r\n```python\r\nx = array([0, 1, 2])\r\ny = array([0, 2, 4])\r\ntrapz(y, x) # 4, correct value\r\ntrapz(y[::-1], x[::-1]) # -4, incorrect value\r\n\r\nidx = random.permutation(arange(3))\r\nx_shuffled = x[idx]\r\ny_shuffled = y[idx]\r\ntrapz(y_shuffled, x_shuffled) # 1, incorrect value\r\n```\r\n\r\nThis limitation of trapz should be fixed by sorting both y,x values before proceeding. I can sugest two possible courses of action: Either properly document trapz, indicating this limitation, and add a new ""safe_trapz"" that fixes this. Or do the exact opposite, have trapz sort the input values, and add a ""fast_trapz"" that doesn\'t. '"
4523,29809707,larsmans,rgommers,2014-03-20 11:03:41,2015-01-02 18:54:52,2015-01-02 18:54:52,closed,rgommers,,8,11 - Bug;component: Documentation,https://api.github.com/repos/numpy/numpy/issues/4523,b'Where is the npy format documented?',"b""The docstring for [`np.save`](https://github.com/numpy/numpy/blob/master/numpy/lib/npyio.py#L404) says:\r\n\r\n```rst\r\nNotes\r\n-----\r\nFor a description of the ``.npy`` format, see `format`.\r\n```\r\n\r\nWhere's that?"""
4516,29751451,michelmno,rgommers,2014-03-19 16:57:36,2014-04-24 05:46:08,2014-04-24 05:46:08,closed,,,8,11 - Bug;component: build;priority: normal,https://api.github.com/repos/numpy/numpy/issues/4516,b'numpy failed to build on ppc64le archi',"b'trying to build numpy on fedora for ppc64le archi. (numpy-1.8.0-5.fc21.src.rpm)\r\nthe build is failing with following log extract:\r\n\r\n===\r\n...\r\n Traceback (most recent call last):\r\n      File ""setup.py"", line 192, in <module>\r\n        setup_package()\r\n    ...\r\n      File ""numpy/core/setup_common.py"", line 305, in long_double_representation\r\n        raise ValueError(""Unrecognized format (%s)"" % saw)\r\n    ValueError: Unrecognized format ([\'001\', \'043\', \'105\', \'147\', \'211\', \'253\', \'315\', \'357\', \'000\', \'000\', \'000\', \'124\', \'064\', \'157\', \'235\', \'301\', \'000\', \'000\', \'000\', \'000\', \'000\', \'000\', \'000\', \'0\r\n ===\r\n\r\nrelated fedora bugzilla: https://bugzilla.redhat.com/show_bug.cgi?id=1078354\r\n'"
4490,29394910,charris,charris,2014-03-13 22:19:49,2014-07-10 16:27:30,2014-03-23 00:03:05,closed,,,2,09 - Enhancement;11 - Bug;component: numpy.random;priority: normal,https://api.github.com/repos/numpy/numpy/issues/4490,b'Fix random multivariate normal',b'Check that covariance matrix passed to random.multivariate_normal is positive-semidefinite. Also refactor that function a bit to avoid a DeprecationWarning and potential integer overflow.'
4485,29267523,EelcoHoogendoorn,mwiebe,2014-03-12 14:34:56,2014-03-17 19:13:49,2014-03-17 19:13:49,closed,,,15,11 - Bug;component: numpy.core;priority: normal,https://api.github.com/repos/numpy/numpy/issues/4485,b'obscure einsum bug',"b""I have ran into an obscure einsum bug.\r\n\r\nThings which I have been able to pinpoint, is that there is an interaction between the mixed datatypes of the arguments, and the small and identical axes sizes. Making both types identical, or changing the 'p' axis to 4, means the problem disappears.\r\n\r\nThe nature of the error is that in the output of es, es[0,0] is equal to es[1,0], which must be some sort of indexing error in einsum. However, all other entries appear to be computed correctly.\r\n\r\n<code>\r\n    import numpy as np\r\n    A = np.random.rand(3,3).astype(np.float64)\r\n    B = np.random.rand(3,3,64,64).astype(np.float32)\r\n    es = np.einsum   ('cl,cpxy->lpxy', A,B)\r\n    tp = np.tensordot(A,B, axes=(0,0))\r\n    print np.allclose(es[0,0], es[1,0])\r\n    print np.allclose(es, tp)\r\n</code>\r\nNote: I am using numpy 1.8.0, Anaconda python win7 64bit"""
4478,29138603,gerritholl,gerritholl,2014-03-10 22:27:39,2015-12-02 13:02:26,2015-12-02 13:02:26,closed,,,2,11 - Bug;component: numpy.ma;priority: normal,https://api.github.com/repos/numpy/numpy/issues/4478,b'numpy.ma.core.mvoid.__repr__ and __str__ fail on structured arrays with vector members',"b'`numpy.ma.core.mvoid.__repr__` (and `.__str__`) are unable to handle structured arrays with vector members.  See below, tested against the latest git revision:\r\n\r\n```\r\n$ python3.3\r\nPython 3.3.2+ (default, Feb 28 2014, 00:52:16) \r\n[GCC 4.8.1] on linux\r\nType ""help"", ""copyright"", ""credits"" or ""license"" for more information.\r\n>>> import numpy\r\n>>> import numpy, numpy.ma\r\n>>> M = numpy.ma.masked_array([((3,4), (4,5,6)), ((7,8), (9,10,11))], dtype=[(""A"", ""<f4"", 2), (""B"", ""<f4"", 3)], mask=[((True, False), (False, False, False)), ((False, False), (False, False, False))])\r\n>>> M[0]\r\nTraceback (most recent call last):\r\n  File ""<stdin>"", line 1, in <module>\r\n  File ""/home/gerrit/venv/python-3.3-bleed/lib/python3.3/site-packages/numpy/ma/core.py"", line 5635, in __repr__\r\n    if not any(m):\r\n  File ""/home/gerrit/venv/python-3.3-bleed/lib/python3.3/site-packages/numpy/ma/core.py"", line 6025, in __call__\r\n    return method(MaskedArray(a), *args, **params)\r\n  File ""/home/gerrit/venv/python-3.3-bleed/lib/python3.3/site-packages/numpy/ma/core.py"", line 4302, in any\r\n    d = self.filled(False).any(axis=axis).view(type(self))\r\n  File ""/home/gerrit/venv/python-3.3-bleed/lib/python3.3/site-packages/numpy/core/_methods.py"", line 33, in _any\r\n    keepdims=keepdims)\r\nValueError: The truth value of an array with more than one element is ambiguous. Use a.any() or a.all()\r\n```\r\n\r\nIt fails only on display:\r\n\r\n```\r\n>>> aa = M[0]\r\n>>> aa\r\nTraceback (most recent call last):\r\n  File ""<stdin>"", line 1, in <module>\r\n  File ""/home/gerrit/venv/python-3.3-bleed/lib/python3.3/site-packages/numpy/ma/core.py"", line 5635, in __repr__\r\n    if not any(m):\r\n  File ""/home/gerrit/venv/python-3.3-bleed/lib/python3.3/site-packages/numpy/ma/core.py"", line 6025, in __call__\r\n    return method(MaskedArray(a), *args, **params)\r\n  File ""/home/gerrit/venv/python-3.3-bleed/lib/python3.3/site-packages/numpy/ma/core.py"", line 4302, in any\r\n    d = self.filled(False).any(axis=axis).view(type(self))\r\n  File ""/home/gerrit/venv/python-3.3-bleed/lib/python3.3/site-packages/numpy/core/_methods.py"", line 33, in _any\r\n    keepdims=keepdims)\r\nValueError: The truth value of an array with more than one element is ambiguous. Use a.any() or a.all()\r\n```\r\n\r\nso the bug is in `numpy.ma.core.mvoid.__repr__` and its twin brother `numpy.ma.core.mvoid.__str__`.  \'numpy.ma.core.MaskedArray.__repr__\' has no problem:\r\n\r\n```\r\n>>> M[0:1]\r\nmasked_array(data = [([3.0, 4.0], [4.0, 5.0, 6.0])],\r\n             mask = [([False, False], [False, False, False])],\r\n       fill_value = ([1.0000000200408773e+20, 1.0000000200408773e+20], [1.0000000200408773e+20, 1.0000000200408773e+20, 1.0000000200408773e+20]),\r\n            dtype = [(\'A\', \'<f4\', (2,)), (\'B\', \'<f4\', (3,))])\r\n```\r\n\r\nThis is against the latest git revision at the time of writing:\r\n\r\n```\r\n>>> import numpy.version\r\n>>> numpy.version.version\r\n\'1.9.0.dev-a2177a2\'\r\n```'"
4423,28589867,charris,rgommers,2014-03-02 22:09:09,2014-08-10 12:37:44,2014-03-02 22:29:34,closed,,,1,11 - Bug;component: Documentation,https://api.github.com/repos/numpy/numpy/issues/4423,b'BUG: DOC: Fix documentation build.',b'The documentation was not building. The apparent cause was a problem in\r\nparsing some `...` constructs in 1.9.0-notes.rst. Some of those\r\nconstructs looked intended as links and others just looked wrong. All\r\nuses of `...` were replaced by inline literals ``...`` just to be safe.\r\nI have no idea where or what the actual bug was.\r\n\r\nAlso spellchecked and reformatted for line length.\r\n\r\nCloses #4346.'
4381,28424180,scottransom,charris,2014-02-27 14:50:07,2015-08-28 18:29:13,2015-08-28 18:29:13,closed,,,11,11 - Bug;component: numpy.core;priority: normal,https://api.github.com/repos/numpy/numpy/issues/4381,b'BUG:  not assigning full precision values to longdouble scalars',"b'If you try to set a longdouble scalar with a string, it appears to go through Python\'s normal string-parsing and therefore gets converted to a C double rather than a long double:\r\n\r\nIn [19]: numpy.longdouble(""1.12345678901234567890"")\r\nOut[19]: 1.1234567890123456912\r\n\r\nNote the loss of those last couple digits.\r\n\r\nIn [20]: numpy.float(""1.12345678901234567890"")\r\nOut[20]: 1.1234567890123457\r\n\r\nIn [21]: numpy.longdouble(""1.12345678901234567890"") - numpy.float(""1.12345678901234567890"")\r\nOut[21]: 0.0\r\n\r\nAnd so internally they are identical.\r\n\r\nOne solution to this is a special case for longdoubles and to use strtold() to do the conversion.\r\n\r\nCheers,\r\n\r\nScott\r\n'"
4359,28168809,abalkin,charris,2014-02-24 15:20:14,2014-03-02 03:29:56,2014-03-02 03:29:56,closed,,,1,11 - Bug;component: numpy.core;priority: normal,https://api.github.com/repos/numpy/numpy/issues/4359,b'BUG: Infinite recursion from str.format on a flex array element ',"b'```\r\n>>> dt = dtype([(\'date\', \'<M8[D]\'), (\'val\', \'<f8\')])\r\n>>> r = array([(\'2000-01-01\', 1)], dt)\r\n>>> \'{}\'.format(r[0])\r\nTraceback (most recent call last):\r\n  File ""<stdin>"", line 1, in <module>\r\nRuntimeError: maximum recursion depth exceeded while calling a Python object\r\n```\r\n\r\n'"
4357,28162151,bdkearns,charris,2014-02-24 13:47:35,2014-03-05 19:09:11,2014-03-05 19:09:11,closed,,,0,11 - Bug;component: numpy.core;priority: normal,https://api.github.com/repos/numpy/numpy/issues/4357,b'SystemError when printing name of dtype with user-defined type object',"b'````\r\n$ python\r\nPython 2.7.5+ (default, Sep 19 2013, 13:48:49)\r\n[GCC 4.8.1] on linux2\r\nType ""help"", ""copyright"", ""credits"" or ""license"" for more information.\r\n>>> import numpy as np\r\n>>> class xyz(np.void): pass\r\n>>> np.dtype(xyz).name\r\nTraceback (most recent call last):\r\n  File ""<stdin>"", line 1, in <module>\r\nSystemError: Negative size passed to PyString_FromStringAndSize\r\n$ python -c ""import numpy; print numpy.__version__""\r\n1.8.0\r\n````'"
4354,28123355,charris,juliantaylor,2014-02-23 18:07:43,2014-03-03 18:30:39,2014-03-03 18:30:39,closed,,,1,11 - Bug;component: numpy.lib;Easy Fix;priority: normal,https://api.github.com/repos/numpy/numpy/issues/4354,b'Buggy byte_bounds() in numpy/lib/utils.py',"b""See discussion at #3732. It fails for datetime arrays.\r\n```\r\nIn [52]: from datetime import datetime\r\n\r\nIn [53]: dts = [datetime(2005, 1, i) for i in range(1, 11)]\r\n\r\nIn [54]: arr = np.array(dts).astype('M8[ns]')\r\n\r\nIn [55]: byte_bounds(arr)\r\n---------------------------------------------------------------------------\r\nValueError                                Traceback (most recent call last)\r\n<ipython-input-55-084f96ed2076> in <module>()\r\n----> 1 byte_bounds(arr)\r\n\r\n/home/charris/.local/lib/python2.7/site-packages/numpy/lib/utils.pyc in byte_bounds(a)\r\n    211     astrides = ai['strides']\r\n    212     ashape = ai['shape']\r\n--> 213     bytes_a = int(ai['typestr'][2:])\r\n    214 \r\n    215     a_low = a_high = a_data\r\n\r\nValueError: invalid literal for int() with base 10: '8[ns]'\r\n```"""
4346,28086314,tchajed,rgommers,2014-02-22 01:46:44,2014-03-02 22:29:34,2014-03-02 22:29:34,closed,,1.9 blockers,6,11 - Bug;component: Documentation,https://api.github.com/repos/numpy/numpy/issues/4346,b'DOC: latest doc does not compile',"b""I'm unable to compile the latest documentation, though v1.7.1 works on my machine. I'm using OS X 10.9.1, Homebrew-provided Python 2.7.6. The error I get is a stacktrace from Sphinx, which I've filed at https://groups.google.com/forum/#!topic/sphinx-dev/NFdR-mztURc."""
4340,28065130,jaimefrio,charris,2014-02-21 19:13:20,2014-02-27 20:37:44,2014-02-21 22:15:32,closed,,,2,11 - Bug;component: numpy.lib;Easy Fix,https://api.github.com/repos/numpy/numpy/issues/4340,b'Running np.lib.test() causes a failure in np.core.test()',"b'With numpy built from master I am seeing the following weird behavior:\r\n\r\n```\r\n>>> import numpy as np\r\n>>> np.__version__\r\n\'1.9.0.dev-Unknown\'\r\n>>> np.core.test() # All tests pass\r\n>>> np.core.test() # All tests pass\r\n>>> np.lib.test() # All tests pass\r\n>>> np.core.test()\r\n======================================================================\r\nFAIL: test_empty (test_multiarray.TestStats)\r\n----------------------------------------------------------------------\r\nTraceback (most recent call last):\r\n  File ""C:\\WinPython-32bit-np-dev\\python-2.7.5\\lib\\site-packages\\numpy\\core\\tests\\test_multiarray.py"", line 3030, in test_empty\r\n    assert_(len(w) > 0)\r\n  File ""C:\\WinPython-32bit-np-dev\\python-2.7.5\\lib\\site-packages\\numpy\\testing\\utils.py"", line 49, in assert_\r\n    raise AssertionError(smsg)\r\nAssertionError\r\n```\r\n\r\nApparently `lib` is tested after `core`, because running the full test suite once raises no errors, although it will if I launch it again.\r\n\r\nMy build is a little shabby (MinGW under Windows), and the statement ""All test pass"" when I run `np.core.test()` is not fully true, as I always get 2 failures from `test_umath.TestComplexFunctions` about precision loss with `sinh`, but this should be unrelated to what I am seeing now. Can someone confirm it?'"
4314,27746544,matthew-brett,charris,2014-02-17 20:17:27,2014-03-26 22:41:39,2014-03-26 22:41:39,closed,seberg,1.9 blockers,11,11 - Bug;12 - Regression;component: numpy.core;priority: normal,https://api.github.com/repos/numpy/numpy/issues/4314,b'Bus error on SPARC for test_recfunctions.TestRecFunctions:test_find_duplicates',"b'I am getting a bus error on Debian SPARC during testing of the recarray functions.\r\n\r\nOn standard Debian squeeze system (`uname -a`):\r\n\r\n    Linux vagus 2.6.32-5-sparc64-smp #1 SMP Tue Sep 24 00:00:54 UTC 2013 sparc64 GNU/Linux\r\n\r\nRunning:\r\n\r\n    ./runtests.py -t numpy/lib/tests/test_recfunctions.py:TestRecFunctions --verbose\r\n\r\ngives:\r\n\r\n    Building, see build.log...\r\n    Build OK\r\n    Running unit tests for numpy\r\n    NumPy version 1.9.0.dev-297f54b\r\n    NumPy is installed in /home/matthew/dev_trees/numpy/build/testenv/lib/python2.6/site-packages/numpy\r\n    Python version 2.6.6 (r266:84292, Dec 26 2010, 23:29:26) [GCC 4.4.5 20100913 (prerelease)]\r\n    nose version 1.3.0\r\n    test_drop_fields (test_recfunctions.TestRecFunctions) ... ok\r\n    test_find_duplicates (test_recfunctions.TestRecFunctions) ... Bus error'"
4300,27676689,charris,seberg,2014-02-16 17:15:36,2014-07-10 19:50:17,2014-02-16 19:11:37,closed,,,1,11 - Bug;component: numpy.f2py,https://api.github.com/repos/numpy/numpy/issues/4300,b'BUG: Fix typo in f2py/cfuncs.py.',"b'Replace ""insinged_long_long"" by ""unsigned_long_long"". Patch due to trac\r\nuser pepijndevos.\r\n\r\nCloses #636.'"
4295,27614060,yarikoptic,charris,2014-02-14 18:11:43,2014-02-27 21:31:35,2014-02-27 21:31:35,closed,,,8,11 - Bug;12 - Regression;component: numpy.lib;priority: normal,https://api.github.com/repos/numpy/numpy/issues/4295,"b""regression: corrcoef -- doesn't work now in 1.9.0.dev with lists args""","b'```\r\n$> python -c \'import numpy as np; print np.__version__; print np.corrcoef([0, 1, 0], [1, 0, 1]); print np.result_type([0], [0], np.float64)\' 1.7.1\r\n[[ 1. -1.]\r\n [-1.  1.]]\r\nTraceback (most recent call last):\r\n  File ""<string>"", line 1, in <module>\r\nTypeError: data type not understood\r\n\r\n$> bep -l python2.7 turn_on github=numpy                                                                                                   \r\n\tTurning on numpy [master] python2.7 github\r\nAttempting to turn on numpy [master]...\r\nSuccessfully turned on numpy [master].\r\n\r\n$> python -c \'import numpy as np; print np.__version__; print np.corrcoef([0, 1, 0], [1, 0, 1]); print np.result_type([0], [0], np.float64)\'\r\n1.9.0.dev-95d7083\r\nTraceback (most recent call last):\r\n  File ""<string>"", line 1, in <module>\r\n  File ""/home/yoh/.local/lib/python2.7/site-packages/numpy/lib/function_base.py"", line 1899, in corrcoef\r\n    c = cov(x, y, rowvar, bias, ddof)\r\n  File ""/home/yoh/.local/lib/python2.7/site-packages/numpy/lib/function_base.py"", line 1816, in cov\r\n    dtype = np.result_type(m, y, np.float64)\r\nTypeError: data type not understood\r\n```\r\n'"
4277,27254422,xnx,charris,2014-02-10 10:30:17,2016-01-06 19:28:46,2016-01-06 19:28:46,closed,,,3,11 - Bug;component: numpy.ma;priority: normal,https://api.github.com/repos/numpy/numpy/issues/4277,b'numpy.matrix.trace() returns another matrix instead of a scalar',"b""Maybe there's some good reason for this that I'm missing, but wouldn't it be better if `X.trace()` for a matrix `X` returned the trace as a scalar instead of a 1x1 matrix?"""
4263,27065334,demitri,jaimefrio,2014-02-06 17:01:56,2016-01-25 00:18:24,2016-01-25 00:18:24,closed,,,7,11 - Bug;component: numpy.random;priority: normal,https://api.github.com/repos/numpy/numpy/issues/4263,b'np.random.uniform documentation incorrect',"b'This is in reference to:\r\n<http://docs.scipy.org/doc/numpy/reference/generated/numpy.random.uniform.html>\r\n\r\nConsider this code:\r\n\r\n\timport numpy as np\r\n\r\n\tnorm_min = np.zeros(1)\r\n\tnorm_max = np.zeros(1) + 10\r\n\r\n\tprint ""Input type: {0}."".format(type(norm_min))\r\n\r\n\tnorm_init = np.random.uniform(low=norm_min, high=norm_max)\r\n\r\n\tprint ""Output type: {0}."".format(type(norm_init))\r\n\r\n\tprint norm_init.tolist()\r\n\r\nThe documentation says the return type from this method is an `ndarray`, however, if the input arrays are single-element, the result is a float. Either the method is incorrect in returning a float (I believe if you give it a single-element array, that is what it should be returned), or else the documentation should note this.\r\n\r\nYes, this can be fixed with:\r\n\r\n    norm_init = np.random.uniform(low=norm_min, high=norm_max, size=norm_min.size)\r\n\r\nbut that does not address the contradiction above.'"
4249,26717610,fkbreitl,fkbreitl,2014-01-31 21:40:11,2014-02-11 01:40:48,2014-02-11 01:40:48,closed,,,2,11 - Bug;component: numpy.ma,https://api.github.com/repos/numpy/numpy/issues/4249,b'multiprocessing fails with masked arrays',"b'This is the code:\r\n\r\n---\r\n\r\n#!/usr/bin/env python                                                          \r\n\r\nimport numpy as np\r\nimport multiprocessing\r\n\r\na = np.ma.masked_equal([0, 0], 0)\r\npool = multiprocessing.Pool(2)\r\npool.apply_async(np.median, (a,)).get()\r\n\r\n--\r\n\r\nThis is the problem:\r\nProcess PoolWorker-1:\r\nTraceback (most recent call last):\r\n  File ""/usr/lib/python2.6/multiprocessing/process.py"", line 232, in _bootstrap\r\n    self.run()\r\n  File ""/usr/lib/python2.6/multiprocessing/process.py"", line 88, in run\r\n    self._target(*self._args, **self._kwargs)\r\n  File ""/usr/lib/python2.6/multiprocessing/pool.py"", line 71, in worker\r\n    put((job, i, result))\r\n  File ""/usr/lib/python2.6/multiprocessing/queues.py"", line 366, in put\r\n    return send(obj)\r\n  File ""/opt/cep/lofar/external/lib/python/site-packages/numpy/ma/core.py"", line 5473, in __reduce__\r\n    self.__getstate__())\r\n  File ""/opt/cep/lofar/external/lib/python/site-packages/numpy/ma/core.py"", line 5446, in __getstate__\r\n    self._fill_value,\r\nAttributeError: \'MaskedConstant\' object has no attribute \'_fill_value\'\r\n'"
4225,26179776,pbrod,charris,2014-01-23 16:42:28,2014-03-02 03:38:17,2014-03-02 03:38:17,closed,,,3,11 - Bug;component: numpy.core;Easy Fix;priority: normal,https://api.github.com/repos/numpy/numpy/issues/4225,b'np.log1p(inf) returns NaN while it should return inf',"b""I am using numpy version 1.8.0 on windows 7 and here is the result for np.log1p\r\n\r\nIn [2]: np.log1p(np.inf)\r\nOut[2]: nan\r\n\r\nIn [3]: np.__version__\r\nOut[3]: '1.8.0'"""
4216,25919133,gabobert,ahaldane,2014-01-20 13:34:41,2016-01-11 04:06:53,2016-01-11 04:06:53,closed,,,2,11 - Bug;component: numpy.lib;priority: normal,https://api.github.com/repos/numpy/numpy/issues/4216,b'BUG: recfunctions.join_by fails if the keys are not in the same order',"b""When joining two recarrays and the keys are not in the same order in the two recarrays the join_by function fails, because it assumes the key fields to be in the same order.\r\n\r\nExample:\r\n\r\nfrom numpy.lib.recfunctions import rec_join\r\nfrom numpy import recarray\r\n\r\na = recarray((1,), [('key1', int), ('key2', int), ('x', int)])\r\nb = recarray((1,), [('key2', int), ('key1', int), ('y', int)])\r\na[0] = (0,1,50)\r\nb[0] = (1,0,100)\r\n\r\nab = rec_join(('key1', 'key2'), a, b, jointype='inner', r1postfix='', r2postfix='')\r\n\r\nThis outputs:\r\n\r\nTypeError: invalid type promotion\r\n\r\nbecause the wrong keys are concatenated.\r\n\r\nThe problem is lines 910-911 in recfunctions.py:\r\nr1k = drop_fields(r1, [n for n in r1names if n not in key])\r\nr2k = drop_fields(r2, [n for n in r2names if n not in key])\r\n\r\nAfter this the fields should also be sorted for both arrays.\r\n\r\nVersion: Numpy 1.8, python 2.7.1"""
4195,25508664,bryanwweber,bryanwweber,2014-01-13 16:25:34,2014-01-15 19:27:10,2014-01-15 19:27:10,closed,,,4,11 - Bug;component: numpy.core,https://api.github.com/repos/numpy/numpy/issues/4195,"b'Unable to compile SciPy Python 3, error in npy_3kcompat.h'","b'Hello,\r\nI\'m trying to compile SciPy using the most recent NumPy commit, 1.9.0.dev-0b85f91. The file scipy/sparse/sparsetools/csr_wrap.cxx includes numpy/core/include/numpy/npy_py3kcompat.h and this file is throwing an error with both the GCC compiler and the Intel compiler on Ubuntu 12.04.3. The Intel compiler says that the ""return value type does not match the function type"" on lines 196 and 213 of npy_3kcompat.h, where `-1` is returned. Other places in the same function return `NULL`. This was changed in commit 41690fcf9bff30cb3d49d8c147bca1f595bfa70b'"
4192,25462590,juliantaylor,juliantaylor,2014-01-12 13:40:59,2014-05-26 16:49:38,2014-05-26 16:49:38,closed,,,3,11 - Bug;component: build;priority: normal,https://api.github.com/repos/numpy/numpy/issues/4192,b'openblas configuration assumes lapack is embedded',"b'lapack_opt_info checks for openblas and stops, this is wrong openblas is not guaranteed to have lapack embedded.\r\nIn linux distributions this is always the case so you end up with these type of errors on import:\r\n\r\n    numpy/linalg/lapack_lite.so: undefined symbol: dpotrf_'"
4181,25354398,ckuehne,rgommers,2014-01-09 20:51:42,2015-01-17 17:42:34,2015-01-17 17:42:34,closed,,,10,11 - Bug;component: Documentation;component: numpy.random;Easy Fix,https://api.github.com/repos/numpy/numpy/issues/4181,b'The docstring of np.random.pareto (Version 1.8.0) contains multiple critical errors',"b'The docstring of np.random.pareto (Version 1.8.0) contains multiple errors.  In a nutshell np.random.pareto does not draw samples from the Pareto distribution shown under \'Notes\' in the docstring.  Instead it draws samples from a Lomax distribution (also stated in the docstring).  However, the description in the docstring of how to convert those Lomax random variates to a Pareto distribution is wrong.  Further, the examples are faulty.\r\n\r\nMore detailed:\r\nThe function np.random.pareto draws random variates from a Lomax distribution with shape a and location m\'=1.  To convert \r\nthose samples to a classical Pareto distribution with shape a and \r\nlocation m you have to add 1 and multiply by m, instead of adding m as \r\nstated in the docstring. \r\n\r\nMore specifically, the docstring says: \r\n""The Lomax or Pareto II distribution is a shifted Pareto distribution. The \r\nclassical Pareto distribution can be obtained from the Lomax distribution \r\nby adding the location parameter m, see below."" \r\n\r\nInstead, it should read ""[..] by adding 1 and multiplying my m, see below."" \r\n\r\nThe example at the bottom therefore _should_ read: \r\n\r\n>>> a, m = 3., 1. # shape and mode \r\n>>> s = (np.random.pareto(a, 1000) + 1) * m \r\n\r\nMaybe an example with m=10 makes it clearer \r\n>>> a, m = 3., 10. # shape and mode \r\n>>> s = (np.random.pareto(a, 1000) + 1) * m \r\n\r\nAdditionally, calling m the location parameter could be misleading. \r\nFor simple Pareto (Type I) distributions it is usually referred to as \r\nthe x_min or the scale parameter of the distribution.  When discussing \r\ngeneralized Pareto distributions m is also called the scale \r\nparameter (a constant factor) while mu is the location (an additive \r\nterm) [1].  I assume the misleading naming could have caused some \r\nconfusion and lead to the errors described above. \r\n\r\nLast but not least I think it might also cause confusion to call \r\na function \'random.pareto\' while its meaning is \'shifted by -1 pareto\'. :) \r\n\r\n[1] http://en.wikipedia.org/wiki/Generalized_Pareto_distribution'"
4160,24928290,mhvk,pv,2013-12-31 18:46:52,2014-05-18 18:41:26,2014-01-08 18:35:02,closed,,1.9 blockers,8,11 - Bug;component: numpy.core,https://api.github.com/repos/numpy/numpy/issues/4160,b'BUG: __numpy_ufunc__ passes on only a single output argument',"b""I'm trying to use `__numpy_ufunc__` for the `Quantity` subclass in astropy (which adds and propagates units associated with the array), and while mostly it is a joy compared to the previous `__array_prepare__` etc tangle, for functions with two outputs there is a problem, in that only one output is passed on among the keyword arguments.  This can be seen from the following example:\r\n```\r\nimport numpy as np\r\nclass trial(np.ndarray):               \r\n    def __new__(cls, *args, **kwargs):\r\n        return np.array(*args, **kwargs).view(cls)\r\n    def __numpy_ufunc__(self, ufunc, method, i, inputs, **kwargs):\r\n        print(self, ufunc, method, i, inputs, kwargs)\r\n        inputs = [arg.view(np.ndarray) for arg in inputs]\r\n        return ufunc(*inputs, **kwargs)\r\n\r\na = trial(100)\r\nb = np.array([1.])\r\nc = np.array([2.])\r\nnp.modf(a, b)\r\n# 100 <ufunc 'modf'> __call__ 0 (trial(100),) {'out': array([ 1.])}\r\n# (array([ 0.]), array([ 100.]))\r\nnp.modf(a, b, c)\r\n# 100 <ufunc 'modf'> __call__ 0 (trial(100),) {'out': array([ 2.])}\r\n# (array([ 0.]), array([ 100.]))\r\n```"""
4136,24701590,rgommers,rgommers,2013-12-23 10:51:15,2013-12-23 15:20:04,2013-12-23 12:52:13,closed,,1.9 blockers,4,11 - Bug;component: numpy.core,https://api.github.com/repos/numpy/numpy/issues/4136,b'sum() bug with float96 under python3.4b1',"b'Standard python3.4 debug build on 32-bit linux, gcc 4.8.1. To reproduce:\r\n\r\n    >>> import numpy as np\r\n    >>> d = np.arange(1, 3, dtype=np.float96)\r\n    >>> np.sum(d)\r\n    3.0\r\n    >>> np.sum(d[::-1])\r\n    2.0\r\n    >>> d\r\n    array([ 1.0,  2.0], dtype=float96)\r\n    >>> d[::-1]\r\n    array([ 2.0,  1.0], dtype=float96)\r\n    >>> d.sum()\r\n    3.0\r\n    >>> d[::-1].sum()\r\n    2.0\r\n\r\nShows up in these tests:\r\n\r\n    ======================================================================\r\n    FAIL: test_sum (test_ufunc.TestUfunc)\r\n    ----------------------------------------------------------------------\r\n    Traceback (most recent call last):\r\n      File ""/home/rgommers/Code/numpy/numpy/core/tests/test_ufunc.py"", line 332, in test_sum\r\n        assert_almost_equal(np.sum(d[::-1]), tgt)\r\n      File ""/home/rgommers/Code/numpy/numpy/testing/utils.py"", line 477, in assert_almost_equal\r\n        raise AssertionError(_build_err_msg())\r\n    AssertionError: \r\n    Arrays are not almost equal to 7 decimals\r\n     ACTUAL: 2.0\r\n     DESIRED: 3.0\r\n\r\n    ======================================================================\r\n    FAIL: test_sum_complex (test_ufunc.TestUfunc)\r\n    ----------------------------------------------------------------------\r\n    Traceback (most recent call last):\r\n      File ""/home/rgommers/Code/numpy/numpy/testing/utils.py"", line 454, in assert_almost_equal\r\n        assert_almost_equal(actualr, desiredr, decimal=decimal)\r\n      File ""/home/rgommers/Code/numpy/numpy/testing/utils.py"", line 461, in assert_almost_equal\r\n        return assert_array_almost_equal(actual, desired, decimal, err_msg)\r\n    AssertionError: \r\n    Arrays are not almost equal to 7 decimals\r\n\r\n    (mismatch 100.0%)\r\n     x: array(2.0, dtype=float96)\r\n     y: array(3.0, dtype=float96)\r\n\r\n    During handling of the above exception, another exception occurred:\r\n\r\n    Traceback (most recent call last):\r\n      File ""/home/rgommers/Code/numpy/numpy/core/tests/test_ufunc.py"", line 353, in test_sum_complex\r\n        assert_almost_equal(np.sum(d[::-1]), tgt)\r\n      File ""/home/rgommers/Code/numpy/numpy/testing/utils.py"", line 457, in assert_almost_equal\r\n        raise AssertionError(_build_err_msg())\r\n    AssertionError: \r\n    Arrays are not almost equal to 7 decimals\r\n     ACTUAL: (2-2j)\r\n     DESIRED: (3-3j)\r\n\r\nI haven\'t looked at the second error above when building the error message.'"
4097,23698164,rgommers,pv,2013-12-04 07:04:47,2013-12-04 19:59:20,2013-12-04 09:27:48,closed,,,4,11 - Bug;component: numpy.linalg,https://api.github.com/repos/numpy/numpy/issues/4097,b'Missing gufuncs in 1.8.0',"b'I just installed 1.8.0 with ``pip-3.3 install numpy --user``, and I get lots of test failures like:\r\n\r\n    ======================================================================\r\n    ERROR: test_vector_single (test_gufuncs_linalg.TestSolve)\r\n    ----------------------------------------------------------------------\r\n    Traceback (most recent call last):\r\n      File ""/home/rgommers/.local/lib/python3.3/site-packages/numpy/linalg/tests/test_gufuncs_linalg.py"", line 206, in test_vector_single\r\n        array(b, dtype=single))\r\n      File ""/home/rgommers/.local/lib/python3.3/site-packages/numpy/linalg/tests/test_gufuncs_linalg.py"", line 375, in do\r\n        assert_almost_equal(b, gula.matrix_multiply(a,x))\r\n      File ""/home/rgommers/.local/lib/python3.3/site-packages/numpy/linalg/_gufuncs_linalg.py"", line 304, in matrix_multiply\r\n        return _impl.matrix_multiply(a,b,**kwargs)\r\n    AttributeError: \'module\' object has no attribute \'matrix_multiply\'\r\n\r\n32-bit Linux system, gcc 4.8.1. Haven\'t investigated in detail yet, maybe someone can easily tell what\'s going on here?\r\n'"
3993,21761568,garaud,charris,2013-10-29 14:47:58,2015-01-30 22:22:40,2015-01-30 22:22:40,closed,,,2,11 - Bug;component: numpy.lib;priority: normal,https://api.github.com/repos/numpy/numpy/issues/3993,b'recarray attributes of type strings will create a ndarray of strings instead of a chararray',"b""Hi,\r\n\r\nI recently read on the Numpy doc about ``numpy.chararray``: \r\n\r\n> The chararray class exists for backwards compatibility with Numarray, it is\r\n  not recommended for new development. Starting from numpy 1.4, if one needs\r\n  arrays of strings, it is recommended to use arrays of dtype object_, string_\r\n  or unicode_, and use the free functions in the numpy.char module for fast\r\n  vectorized string operations.\r\n\r\nMoreover, I found that ``numpy.recarray`` turns all Numpy strings dtypes into a\r\n``chararray`` instead of a ``ndarray`` of strings. Is there a reason?\r\n\r\nExample:\r\n```\r\nimport numpy as np\r\na = np.array([('babar', 42), ('celeste', 12)], dtype=[('name', '|S7'), ('age', np.int_)])\r\nreca = a.view(np.recarray)\r\nprint type(reca.name) # => chararray\r\n```\r\n\r\nwhereas ```a['name']``` returns a ``ndarray`` of type ``|S7``.\r\n\r\nCan you think it's a relevant idea to have the same numpy type for ``a['name']``\r\nand ``reca.name``? Thus, it would be possible to get rid of ``chararray`` in this case.\r\n\r\nThanks,\r\nDamien G.\r\n"""
3988,21692072,letmaik,charris,2013-10-28 14:22:50,2014-03-12 18:38:39,2014-03-12 18:38:39,closed,,,8,11 - Bug;component: numpy.f2py;priority: normal,https://api.github.com/repos/numpy/numpy/issues/3988,b'f2py fails on callback',"b'I\'m trying to call f2py on the Fortran code from http://geo.phys.spbu.ru/~tsyganenko/Geopack-2008.html but get the following errors:\r\n\r\n```\r\n$ f2py -c -m geopack Geopack-2008.f\r\nrunning build\r\nrunning config_cc\r\nunifing config_cc, config, build_clib, build_ext, build commands --compiler options\r\nrunning config_fc\r\nunifing config_fc, config, build_clib, build_ext, build commands --fcompiler options\r\nrunning build_src\r\nbuild_src\r\nbuilding extension ""geopack"" sources\r\nf2py options: []\r\nf2py:> /tmp/tmpUzyLjG/src.linux-x86_64-2.7/geopackmodule.c\r\ncreating /tmp/tmpUzyLjG\r\ncreating /tmp/tmpUzyLjG/src.linux-x86_64-2.7\r\nReading fortran codes...\r\n\tReading file \'Geopack-2008.f\' (format:fix,strict)\r\nrmbadname1: Replacing ""min"" with ""min_bn"".\r\nrmbadname1: Replacing ""min"" with ""min_bn"".\r\nrmbadname1: Replacing ""min"" with ""min_bn"".\r\nPost-processing...\r\n\tBlock: geopack\r\n{}\r\nIn: :geopack:Geopack-2008.f:igrf_gsw_08\r\nvars2fortran: No typespec for argument ""xgsw"".\r\n{}\r\n\r\n... (many more of those typespec messages) ...\r\n\r\nIn: :geopack:Geopack-2008.f:t96_mgnp_08\r\nvars2fortran: No typespec for argument ""id"".\r\n\t\t\tBlock: t96_mgnp_08\r\nPost-processing (stage 2)...\r\nBuilding modules...\r\n\tConstructing call-back function ""cb_exname_in_rhand_08__user__routines""\r\n\t  def exname(iopt,parmod,psi,x,y,z,bxgsw,bygsw,bzgsw): return \r\n\tConstructing call-back function ""cb_inname_in_rhand_08__user__routines""\r\n\t  def inname(x,y,z,hxgsw,hygsw,hzgsw): return \r\n\tBuilding module ""geopack""...\r\n\t\tConstructing wrapper function ""igrf_gsw_08""...\r\n\t\t  igrf_gsw_08(xgsw,ygsw,zgsw,hxgsw,hygsw,hzgsw)\r\n\t\tConstructing wrapper function ""igrf_geo_08""...\r\n\t\t  igrf_geo_08(r,theta,phi,br,btheta,bphi)\r\n\t\tConstructing wrapper function ""dip_08""...\r\n\t\t  dip_08(xgsw,ygsw,zgsw,bxgsw,bygsw,bzgsw)\r\n\t\tConstructing wrapper function ""sun_08""...\r\n\t\t  sun_08(iyear,iday,ihour,min_bn,isec,gst,slong,srasn,sdec)\r\n\t\tConstructing wrapper function ""sphcar_08""...\r\n\t\t  sphcar_08(r,theta,phi,x,y,z,j)\r\n\t\tConstructing wrapper function ""bspcar_08""...\r\n\t\t  bspcar_08(theta,phi,br,btheta,bphi,bx,by,bz)\r\n\t\tConstructing wrapper function ""bcarsp_08""...\r\n\t\t  bcarsp_08(x,y,z,bx,by,bz,br,btheta,bphi)\r\n\t\tConstructing wrapper function ""recalc_08""...\r\n\t\t  recalc_08(iyear,iday,ihour,min_bn,isec,vgsex,vgsey,vgsez)\r\n\t\tConstructing wrapper function ""gswgse_08""...\r\n\t\t  gswgse_08(xgsw,ygsw,zgsw,xgse,ygse,zgse,j)\r\n\t\tConstructing wrapper function ""geomag_08""...\r\n\t\t  geomag_08(xgeo,ygeo,zgeo,xmag,ymag,zmag,j)\r\n\t\tConstructing wrapper function ""geigeo_08""...\r\n\t\t  geigeo_08(xgei,ygei,zgei,xgeo,ygeo,zgeo,j)\r\n\t\tConstructing wrapper function ""magsm_08""...\r\n\t\t  magsm_08(xmag,ymag,zmag,xsm,ysm,zsm,j)\r\n\t\tConstructing wrapper function ""smgsw_08""...\r\n\t\t  smgsw_08(xsm,ysm,zsm,xgsw,ygsw,zgsw,j)\r\n\t\tConstructing wrapper function ""geogsw_08""...\r\n\t\t  geogsw_08(xgeo,ygeo,zgeo,xgsw,ygsw,zgsw,j)\r\n\t\tConstructing wrapper function ""geodgeo_08""...\r\n\t\t  geodgeo_08(h,xmu,r,theta,j)\r\n\t\tConstructing wrapper function ""rhand_08""...\r\n\t\t  rhand_08(x,y,z,r1,r2,r3,iopt,parmod,exname,inname,[exname_extra_args,inname_extra_args])\r\n\t\tConstructing wrapper function ""step_08""...\r\nroutsign2map: Confused: function step_08 has externals [\'exname\', \'inname\'] but no ""use"" statement.\r\nsign2map: Confused: external exname is not in lcb_map[].\r\nappend_needs: unknown need \'exname\'\r\nappend_needs: unknown need \'exname\'\r\nsign2map: Confused: external inname is not in lcb_map[].\r\nappend_needs: unknown need \'inname\'\r\nappend_needs: unknown need \'inname\'\r\n\t\t  step_08(x,y,z,ds,dsmax,errin,iopt,parmod,exname,inname,[exname_extra_args,inname_extra_args])\r\n\t\tConstructing wrapper function ""trace_08""...\r\nroutsign2map: Confused: function trace_08 has externals [\'exname\', \'inname\'] but no ""use"" statement.\r\nsign2map: Confused: external exname is not in lcb_map[].\r\nappend_needs: unknown need \'exname\'\r\nappend_needs: unknown need \'exname\'\r\nsign2map: Confused: external inname is not in lcb_map[].\r\nappend_needs: unknown need \'inname\'\r\nappend_needs: unknown need \'inname\'\r\n\t\t  trace_08(xi,yi,zi,dir,dsmax,err,rlim,r0,iopt,parmod,exname,inname,xf,yf,zf,xx,yy,zz,l,[lmax,exname_extra_args,inname_extra_args])\r\n\t\tConstructing wrapper function ""shuetal_mgnp_08""...\r\n\t\t  shuetal_mgnp_08(xn_pd,vel,bzimf,xgsw,ygsw,zgsw,xmgnp,ymgnp,zmgnp,dist,id)\r\n\t\tConstructing wrapper function ""t96_mgnp_08""...\r\n\t\t  t96_mgnp_08(xn_pd,vel,xgsw,ygsw,zgsw,xmgnp,ymgnp,zmgnp,dist,id)\r\n\t\tConstructing COMMON block support for ""geopack2""...\r\n\t\t  g,h,rec\r\n\t\tConstructing COMMON block support for ""geopack1""...\r\n\t\t  aa,sps,cps,bb\r\n\tWrote C/API module ""geopack"" to file ""/tmp/tmpUzyLjG/src.linux-x86_64-2.7/geopackmodule.c""\r\n\tFortran 77 wrappers are saved to ""/tmp/tmpUzyLjG/src.linux-x86_64-2.7/geopack-f2pywrappers.f""\r\n  adding \'/tmp/tmpUzyLjG/src.linux-x86_64-2.7/fortranobject.c\' to sources.\r\n  adding \'/tmp/tmpUzyLjG/src.linux-x86_64-2.7\' to include_dirs.\r\ncopying /usr/lib/python2.7/dist-packages/numpy/f2py/src/fortranobject.c -> /tmp/tmpUzyLjG/src.linux-x86_64-2.7\r\ncopying /usr/lib/python2.7/dist-packages/numpy/f2py/src/fortranobject.h -> /tmp/tmpUzyLjG/src.linux-x86_64-2.7\r\n  adding \'/tmp/tmpUzyLjG/src.linux-x86_64-2.7/geopack-f2pywrappers.f\' to sources.\r\nbuild_src: building npy-pkg config files\r\nrunning build_ext\r\ncustomize UnixCCompiler\r\ncustomize UnixCCompiler using build_ext\r\ncustomize GnuFCompiler\r\nCould not locate executable g77\r\nCould not locate executable f77\r\ncustomize IntelFCompiler\r\nFound executable /usr/local/bin/ifort\r\ncustomize LaheyFCompiler\r\nCould not locate executable lf95\r\ncustomize PGroupFCompiler\r\nCould not locate executable pgf90\r\nCould not locate executable pgf77\r\ncustomize AbsoftFCompiler\r\nCould not locate executable f90\r\ncustomize NAGFCompiler\r\nFound executable /usr/bin/f95\r\ncustomize VastFCompiler\r\ncustomize CompaqFCompiler\r\nCould not locate executable fort\r\ncustomize IntelItaniumFCompiler\r\ncustomize IntelEM64TFCompiler\r\ncustomize IntelEM64TFCompiler\r\ncustomize IntelEM64TFCompiler using build_ext\r\nbuilding \'geopack\' extension\r\ncompiling C sources\r\nC compiler: gcc -pthread -fno-strict-aliasing -DNDEBUG -g -fwrapv -O2 -Wall -Wstrict-prototypes -fPIC\r\n\r\ncreating /tmp/tmpUzyLjG/tmp\r\ncreating /tmp/tmpUzyLjG/tmp/tmpUzyLjG\r\ncreating /tmp/tmpUzyLjG/tmp/tmpUzyLjG/src.linux-x86_64-2.7\r\ncompile options: \'-I/tmp/tmpUzyLjG/src.linux-x86_64-2.7 -I/usr/lib/python2.7/dist-packages/numpy/core/include -I/usr/include/python2.7 -c\'\r\ngcc: /tmp/tmpUzyLjG/src.linux-x86_64-2.7/fortranobject.c\r\ngcc: /tmp/tmpUzyLjG/src.linux-x86_64-2.7/geopackmodule.c\r\n/tmp/tmpUzyLjG/src.linux-x86_64-2.7/geopackmodule.c: In function \xa1\xaecb_exname_in_rhand_08__user__routines\xa1\xaf:\r\n/tmp/tmpUzyLjG/src.linux-x86_64-2.7/geopackmodule.c:374:7: warning: variable \xa1\xaecapi_j\xa1\xaf set but not used [-Wunused-but-set-variable]\r\n/tmp/tmpUzyLjG/src.linux-x86_64-2.7/geopackmodule.c: In function \xa1\xaecb_inname_in_rhand_08__user__routines\xa1\xaf:\r\n/tmp/tmpUzyLjG/src.linux-x86_64-2.7/geopackmodule.c:511:7: warning: variable \xa1\xaecapi_j\xa1\xaf set but not used [-Wunused-but-set-variable]\r\n/tmp/tmpUzyLjG/src.linux-x86_64-2.7/geopackmodule.c: In function \xa1\xaef2py_rout_geopack_step_08\xa1\xaf:\r\n/tmp/tmpUzyLjG/src.linux-x86_64-2.7/geopackmodule.c:2659:3: error: unknown type name \xa1\xaeexname_typedef\xa1\xaf\r\n/tmp/tmpUzyLjG/src.linux-x86_64-2.7/geopackmodule.c:2664:3: error: unknown type name \xa1\xaeinname_typedef\xa1\xaf\r\n/tmp/tmpUzyLjG/src.linux-x86_64-2.7/geopackmodule.c:2678:15: warning: assignment makes integer from pointer without a cast [enabled by default]\r\n/tmp/tmpUzyLjG/src.linux-x86_64-2.7/geopackmodule.c:2680:17: error: \xa1\xaeexname\xa1\xaf undeclared (first use in this function)\r\n/tmp/tmpUzyLjG/src.linux-x86_64-2.7/geopackmodule.c:2680:17: note: each undeclared identifier is reported only once for each function it appears in\r\n/tmp/tmpUzyLjG/src.linux-x86_64-2.7/geopackmodule.c:2683:25: error: \xa1\xaeexname_nofargs\xa1\xaf undeclared (first use in this function)\r\n/tmp/tmpUzyLjG/src.linux-x86_64-2.7/geopackmodule.c:2684:3: error: stray \xa1\xae#\xa1\xaf in program\r\n/tmp/tmpUzyLjG/src.linux-x86_64-2.7/geopackmodule.c:2684:3: error: stray \xa1\xae#\xa1\xaf in program\r\n/tmp/tmpUzyLjG/src.linux-x86_64-2.7/geopackmodule.c:2684:53: error: \xa1\xaemaxnofargs\xa1\xaf undeclared (first use in this function)\r\n/tmp/tmpUzyLjG/src.linux-x86_64-2.7/geopackmodule.c:2684:3: error: stray \xa1\xae#\xa1\xaf in program\r\n/tmp/tmpUzyLjG/src.linux-x86_64-2.7/geopackmodule.c:2684:3: error: stray \xa1\xae#\xa1\xaf in program\r\n/tmp/tmpUzyLjG/src.linux-x86_64-2.7/geopackmodule.c:2684:66: error: \xa1\xaenofoptargs\xa1\xaf undeclared (first use in this function)\r\n/tmp/tmpUzyLjG/src.linux-x86_64-2.7/geopackmodule.c:2705:15: warning: assignment makes integer from pointer without a cast [enabled by default]\r\n/tmp/tmpUzyLjG/src.linux-x86_64-2.7/geopackmodule.c:2707:17: error: \xa1\xaeinname\xa1\xaf undeclared (first use in this function)\r\n/tmp/tmpUzyLjG/src.linux-x86_64-2.7/geopackmodule.c:2710:25: error: \xa1\xaeinname_nofargs\xa1\xaf undeclared (first use in this function)\r\n/tmp/tmpUzyLjG/src.linux-x86_64-2.7/geopackmodule.c:2711:3: error: stray \xa1\xae#\xa1\xaf in program\r\n/tmp/tmpUzyLjG/src.linux-x86_64-2.7/geopackmodule.c:2711:3: error: stray \xa1\xae#\xa1\xaf in program\r\n/tmp/tmpUzyLjG/src.linux-x86_64-2.7/geopackmodule.c:2711:3: error: stray \xa1\xae#\xa1\xaf in program\r\n/tmp/tmpUzyLjG/src.linux-x86_64-2.7/geopackmodule.c:2711:3: error: stray \xa1\xae#\xa1\xaf in program\r\n/tmp/tmpUzyLjG/src.linux-x86_64-2.7/geopackmodule.c:2743:9: warning: passing argument 9 of \xa1\xaef2py_func\xa1\xaf makes pointer from integer without a cast [enabled by default]\r\n/tmp/tmpUzyLjG/src.linux-x86_64-2.7/geopackmodule.c:2743:9: note: expected \xa1\xaevoid *\xa1\xaf but argument is of type \xa1\xaeint\xa1\xaf\r\n/tmp/tmpUzyLjG/src.linux-x86_64-2.7/geopackmodule.c:2743:9: warning: passing argument 10 of \xa1\xaef2py_func\xa1\xaf makes pointer from integer without a cast [enabled by default]\r\n/tmp/tmpUzyLjG/src.linux-x86_64-2.7/geopackmodule.c:2743:9: note: expected \xa1\xaevoid *\xa1\xaf but argument is of type \xa1\xaeint\xa1\xaf\r\n/tmp/tmpUzyLjG/src.linux-x86_64-2.7/geopackmodule.c: In function \xa1\xaef2py_rout_geopack_trace_08\xa1\xaf:\r\n/tmp/tmpUzyLjG/src.linux-x86_64-2.7/geopackmodule.c:2877:3: error: unknown type name \xa1\xaeexname_typedef\xa1\xaf\r\n/tmp/tmpUzyLjG/src.linux-x86_64-2.7/geopackmodule.c:2882:3: error: unknown type name \xa1\xaeinname_typedef\xa1\xaf\r\n/tmp/tmpUzyLjG/src.linux-x86_64-2.7/geopackmodule.c:2930:15: warning: assignment makes integer from pointer without a cast [enabled by default]\r\n/tmp/tmpUzyLjG/src.linux-x86_64-2.7/geopackmodule.c:2932:17: error: \xa1\xaeexname\xa1\xaf undeclared (first use in this function)\r\n/tmp/tmpUzyLjG/src.linux-x86_64-2.7/geopackmodule.c:2935:25: error: \xa1\xaeexname_nofargs\xa1\xaf undeclared (first use in this function)\r\n/tmp/tmpUzyLjG/src.linux-x86_64-2.7/geopackmodule.c:2936:3: error: stray \xa1\xae#\xa1\xaf in program\r\n/tmp/tmpUzyLjG/src.linux-x86_64-2.7/geopackmodule.c:2936:3: error: stray \xa1\xae#\xa1\xaf in program\r\n/tmp/tmpUzyLjG/src.linux-x86_64-2.7/geopackmodule.c:2936:53: error: \xa1\xaemaxnofargs\xa1\xaf undeclared (first use in this function)\r\n/tmp/tmpUzyLjG/src.linux-x86_64-2.7/geopackmodule.c:2936:3: error: stray \xa1\xae#\xa1\xaf in program\r\n/tmp/tmpUzyLjG/src.linux-x86_64-2.7/geopackmodule.c:2936:3: error: stray \xa1\xae#\xa1\xaf in program\r\n/tmp/tmpUzyLjG/src.linux-x86_64-2.7/geopackmodule.c:2936:66: error: \xa1\xaenofoptargs\xa1\xaf undeclared (first use in this function)\r\n/tmp/tmpUzyLjG/src.linux-x86_64-2.7/geopackmodule.c:2991:15: warning: assignment makes integer from pointer without a cast [enabled by default]\r\n/tmp/tmpUzyLjG/src.linux-x86_64-2.7/geopackmodule.c:2993:17: error: \xa1\xaeinname\xa1\xaf undeclared (first use in this function)\r\n/tmp/tmpUzyLjG/src.linux-x86_64-2.7/geopackmodule.c:2996:25: error: \xa1\xaeinname_nofargs\xa1\xaf undeclared (first use in this function)\r\n/tmp/tmpUzyLjG/src.linux-x86_64-2.7/geopackmodule.c:2997:3: error: stray \xa1\xae#\xa1\xaf in program\r\n/tmp/tmpUzyLjG/src.linux-x86_64-2.7/geopackmodule.c:2997:3: error: stray \xa1\xae#\xa1\xaf in program\r\n/tmp/tmpUzyLjG/src.linux-x86_64-2.7/geopackmodule.c:2997:3: error: stray \xa1\xae#\xa1\xaf in program\r\n/tmp/tmpUzyLjG/src.linux-x86_64-2.7/geopackmodule.c:2997:3: error: stray \xa1\xae#\xa1\xaf in program\r\n/tmp/tmpUzyLjG/src.linux-x86_64-2.7/geopackmodule.c:3042:9: warning: passing argument 11 of \xa1\xaef2py_func\xa1\xaf makes pointer from integer without a cast [enabled by default]\r\n/tmp/tmpUzyLjG/src.linux-x86_64-2.7/geopackmodule.c:3042:9: note: expected \xa1\xaevoid *\xa1\xaf but argument is of type \xa1\xaeint\xa1\xaf\r\n/tmp/tmpUzyLjG/src.linux-x86_64-2.7/geopackmodule.c:3042:9: warning: passing argument 12 of \xa1\xaef2py_func\xa1\xaf makes pointer from integer without a cast [enabled by default]\r\n/tmp/tmpUzyLjG/src.linux-x86_64-2.7/geopackmodule.c:3042:9: note: expected \xa1\xaevoid *\xa1\xaf but argument is of type \xa1\xaeint\xa1\xaf\r\n/tmp/tmpUzyLjG/src.linux-x86_64-2.7/geopackmodule.c: In function \xa1\xaecb_exname_in_rhand_08__user__routines\xa1\xaf:\r\n/tmp/tmpUzyLjG/src.linux-x86_64-2.7/geopackmodule.c:374:7: warning: variable \xa1\xaecapi_j\xa1\xaf set but not used [-Wunused-but-set-variable]\r\n/tmp/tmpUzyLjG/src.linux-x86_64-2.7/geopackmodule.c: In function \xa1\xaecb_inname_in_rhand_08__user__routines\xa1\xaf:\r\n/tmp/tmpUzyLjG/src.linux-x86_64-2.7/geopackmodule.c:511:7: warning: variable \xa1\xaecapi_j\xa1\xaf set but not used [-Wunused-but-set-variable]\r\n/tmp/tmpUzyLjG/src.linux-x86_64-2.7/geopackmodule.c: In function \xa1\xaef2py_rout_geopack_step_08\xa1\xaf:\r\n/tmp/tmpUzyLjG/src.linux-x86_64-2.7/geopackmodule.c:2659:3: error: unknown type name \xa1\xaeexname_typedef\xa1\xaf\r\n/tmp/tmpUzyLjG/src.linux-x86_64-2.7/geopackmodule.c:2664:3: error: unknown type name \xa1\xaeinname_typedef\xa1\xaf\r\n/tmp/tmpUzyLjG/src.linux-x86_64-2.7/geopackmodule.c:2678:15: warning: assignment makes integer from pointer without a cast [enabled by default]\r\n/tmp/tmpUzyLjG/src.linux-x86_64-2.7/geopackmodule.c:2680:17: error: \xa1\xaeexname\xa1\xaf undeclared (first use in this function)\r\n/tmp/tmpUzyLjG/src.linux-x86_64-2.7/geopackmodule.c:2680:17: note: each undeclared identifier is reported only once for each function it appears in\r\n/tmp/tmpUzyLjG/src.linux-x86_64-2.7/geopackmodule.c:2683:25: error: \xa1\xaeexname_nofargs\xa1\xaf undeclared (first use in this function)\r\n/tmp/tmpUzyLjG/src.linux-x86_64-2.7/geopackmodule.c:2684:3: error: stray \xa1\xae#\xa1\xaf in program\r\n/tmp/tmpUzyLjG/src.linux-x86_64-2.7/geopackmodule.c:2684:3: error: stray \xa1\xae#\xa1\xaf in program\r\n/tmp/tmpUzyLjG/src.linux-x86_64-2.7/geopackmodule.c:2684:53: error: \xa1\xaemaxnofargs\xa1\xaf undeclared (first use in this function)\r\n/tmp/tmpUzyLjG/src.linux-x86_64-2.7/geopackmodule.c:2684:3: error: stray \xa1\xae#\xa1\xaf in program\r\n/tmp/tmpUzyLjG/src.linux-x86_64-2.7/geopackmodule.c:2684:3: error: stray \xa1\xae#\xa1\xaf in program\r\n/tmp/tmpUzyLjG/src.linux-x86_64-2.7/geopackmodule.c:2684:66: error: \xa1\xaenofoptargs\xa1\xaf undeclared (first use in this function)\r\n/tmp/tmpUzyLjG/src.linux-x86_64-2.7/geopackmodule.c:2705:15: warning: assignment makes integer from pointer without a cast [enabled by default]\r\n/tmp/tmpUzyLjG/src.linux-x86_64-2.7/geopackmodule.c:2707:17: error: \xa1\xaeinname\xa1\xaf undeclared (first use in this function)\r\n/tmp/tmpUzyLjG/src.linux-x86_64-2.7/geopackmodule.c:2710:25: error: \xa1\xaeinname_nofargs\xa1\xaf undeclared (first use in this function)\r\n/tmp/tmpUzyLjG/src.linux-x86_64-2.7/geopackmodule.c:2711:3: error: stray \xa1\xae#\xa1\xaf in program\r\n/tmp/tmpUzyLjG/src.linux-x86_64-2.7/geopackmodule.c:2711:3: error: stray \xa1\xae#\xa1\xaf in program\r\n/tmp/tmpUzyLjG/src.linux-x86_64-2.7/geopackmodule.c:2711:3: error: stray \xa1\xae#\xa1\xaf in program\r\n/tmp/tmpUzyLjG/src.linux-x86_64-2.7/geopackmodule.c:2711:3: error: stray \xa1\xae#\xa1\xaf in program\r\n/tmp/tmpUzyLjG/src.linux-x86_64-2.7/geopackmodule.c:2743:9: warning: passing argument 9 of \xa1\xaef2py_func\xa1\xaf makes pointer from integer without a cast [enabled by default]\r\n/tmp/tmpUzyLjG/src.linux-x86_64-2.7/geopackmodule.c:2743:9: note: expected \xa1\xaevoid *\xa1\xaf but argument is of type \xa1\xaeint\xa1\xaf\r\n/tmp/tmpUzyLjG/src.linux-x86_64-2.7/geopackmodule.c:2743:9: warning: passing argument 10 of \xa1\xaef2py_func\xa1\xaf makes pointer from integer without a cast [enabled by default]\r\n/tmp/tmpUzyLjG/src.linux-x86_64-2.7/geopackmodule.c:2743:9: note: expected \xa1\xaevoid *\xa1\xaf but argument is of type \xa1\xaeint\xa1\xaf\r\n/tmp/tmpUzyLjG/src.linux-x86_64-2.7/geopackmodule.c: In function \xa1\xaef2py_rout_geopack_trace_08\xa1\xaf:\r\n/tmp/tmpUzyLjG/src.linux-x86_64-2.7/geopackmodule.c:2877:3: error: unknown type name \xa1\xaeexname_typedef\xa1\xaf\r\n/tmp/tmpUzyLjG/src.linux-x86_64-2.7/geopackmodule.c:2882:3: error: unknown type name \xa1\xaeinname_typedef\xa1\xaf\r\n/tmp/tmpUzyLjG/src.linux-x86_64-2.7/geopackmodule.c:2930:15: warning: assignment makes integer from pointer without a cast [enabled by default]\r\n/tmp/tmpUzyLjG/src.linux-x86_64-2.7/geopackmodule.c:2932:17: error: \xa1\xaeexname\xa1\xaf undeclared (first use in this function)\r\n/tmp/tmpUzyLjG/src.linux-x86_64-2.7/geopackmodule.c:2935:25: error: \xa1\xaeexname_nofargs\xa1\xaf undeclared (first use in this function)\r\n/tmp/tmpUzyLjG/src.linux-x86_64-2.7/geopackmodule.c:2936:3: error: stray \xa1\xae#\xa1\xaf in program\r\n/tmp/tmpUzyLjG/src.linux-x86_64-2.7/geopackmodule.c:2936:3: error: stray \xa1\xae#\xa1\xaf in program\r\n/tmp/tmpUzyLjG/src.linux-x86_64-2.7/geopackmodule.c:2936:53: error: \xa1\xaemaxnofargs\xa1\xaf undeclared (first use in this function)\r\n/tmp/tmpUzyLjG/src.linux-x86_64-2.7/geopackmodule.c:2936:3: error: stray \xa1\xae#\xa1\xaf in program\r\n/tmp/tmpUzyLjG/src.linux-x86_64-2.7/geopackmodule.c:2936:3: error: stray \xa1\xae#\xa1\xaf in program\r\n/tmp/tmpUzyLjG/src.linux-x86_64-2.7/geopackmodule.c:2936:66: error: \xa1\xaenofoptargs\xa1\xaf undeclared (first use in this function)\r\n/tmp/tmpUzyLjG/src.linux-x86_64-2.7/geopackmodule.c:2991:15: warning: assignment makes integer from pointer without a cast [enabled by default]\r\n/tmp/tmpUzyLjG/src.linux-x86_64-2.7/geopackmodule.c:2993:17: error: \xa1\xaeinname\xa1\xaf undeclared (first use in this function)\r\n/tmp/tmpUzyLjG/src.linux-x86_64-2.7/geopackmodule.c:2996:25: error: \xa1\xaeinname_nofargs\xa1\xaf undeclared (first use in this function)\r\n/tmp/tmpUzyLjG/src.linux-x86_64-2.7/geopackmodule.c:2997:3: error: stray \xa1\xae#\xa1\xaf in program\r\n/tmp/tmpUzyLjG/src.linux-x86_64-2.7/geopackmodule.c:2997:3: error: stray \xa1\xae#\xa1\xaf in program\r\n/tmp/tmpUzyLjG/src.linux-x86_64-2.7/geopackmodule.c:2997:3: error: stray \xa1\xae#\xa1\xaf in program\r\n/tmp/tmpUzyLjG/src.linux-x86_64-2.7/geopackmodule.c:2997:3: error: stray \xa1\xae#\xa1\xaf in program\r\n/tmp/tmpUzyLjG/src.linux-x86_64-2.7/geopackmodule.c:3042:9: warning: passing argument 11 of \xa1\xaef2py_func\xa1\xaf makes pointer from integer without a cast [enabled by default]\r\n/tmp/tmpUzyLjG/src.linux-x86_64-2.7/geopackmodule.c:3042:9: note: expected \xa1\xaevoid *\xa1\xaf but argument is of type \xa1\xaeint\xa1\xaf\r\n/tmp/tmpUzyLjG/src.linux-x86_64-2.7/geopackmodule.c:3042:9: warning: passing argument 12 of \xa1\xaef2py_func\xa1\xaf makes pointer from integer without a cast [enabled by default]\r\n/tmp/tmpUzyLjG/src.linux-x86_64-2.7/geopackmodule.c:3042:9: note: expected \xa1\xaevoid *\xa1\xaf but argument is of type \xa1\xaeint\xa1\xaf\r\nerror: Command ""gcc -pthread -fno-strict-aliasing -DNDEBUG -g -fwrapv -O2 -Wall -Wstrict-prototypes -fPIC -I/tmp/tmpUzyLjG/src.linux-x86_64-2.7 -I/usr/lib/python2.7/dist-packages/numpy/core/include -I/usr/include/python2.7 -c /tmp/tmpUzyLjG/src.linux-x86_64-2.7/geopackmodule.c -o /tmp/tmpUzyLjG/tmp/tmpUzyLjG/src.linux-x86_64-2.7/geopackmodule.o"" failed with exit status 1\r\n```\r\n\r\nPlease rephrase the issue title if it\'s too meaningless.'"
3985,21653170,jseabold,jseabold,2013-10-27 14:07:10,2014-10-21 12:02:54,2014-10-21 12:02:54,closed,,,3,11 - Bug;component: numpy.distutils;priority: normal,https://api.github.com/repos/numpy/numpy/issues/3985,b'numpy.distutils ignores paths in any site.cfg sections',"b'I just ran into this issue, which seemed vaguely familiar. Seems I ran into a few years ago too.\r\n\r\nhttp://numpy-discussion.10968.n7.nabble.com/why-doesn-t-numpy-distutils-find-ATLAS-td763.html\r\n\r\nI think my reading at the time was right. Consider a typical (for me) site.cfg\r\n\r\n```\r\n[DEFAULT]\r\nlibrary_dirs = /home/skipper/.local/lib\r\ninclude_dirs = /home/skipper/.local/include\r\n\r\n[openblas]\r\nlibraries = openblas\r\n```\r\n\r\nThese directories are then never looked at by the usual numpy.distutils get_info functions AFAICT.\r\n\r\nActually, even if I specify site.cfg as \r\n\r\n```\r\n[openblas]\r\nlibraries = openblas\r\nlibrary_dirs = /home/skipper/.local/lib\r\ninclude_dirs = /home/skipper/.local/include\r\n```\r\n\r\nThese directories are not found.\r\n\r\n```\r\n>>> from numpy.distutils.system_info import get_info\r\n>>> get_info(""openblas"")\r\n{}\r\n>>> get_info(""blas_opt"")\r\n/usr/local/lib/python2.7/dist-packages/numpy/distutils/system_info.py:1522: UserWarning: \r\n    Atlas (http://math-atlas.sourceforge.net/) libraries not found.\r\n    Directories to search for the libraries can be specified in the\r\n    numpy/distutils/site.cfg file (section [atlas]) or by setting\r\n    the ATLAS environment variable.\r\n  warnings.warn(AtlasNotFoundError.__doc__)\r\n/usr/local/lib/python2.7/dist-packages/numpy/distutils/system_info.py:1531: UserWarning: \r\n    Blas (http://www.netlib.org/blas/) libraries not found.\r\n    Directories to search for the libraries can be specified in the\r\n    numpy/distutils/site.cfg file (section [blas]) or by setting\r\n    the BLAS environment variable.\r\n  warnings.warn(BlasNotFoundError.__doc__)\r\n/usr/local/lib/python2.7/dist-packages/numpy/distutils/system_info.py:1534: UserWarning: \r\n    Blas (http://www.netlib.org/blas/) sources not found.\r\n    Directories to search for the sources can be specified in the\r\n    numpy/distutils/site.cfg file (section [blas_src]) or by setting\r\n    the BLAS_SRC environment variable.\r\n  warnings.warn(BlasSrcNotFoundError.__doc__)\r\n{}\r\n```\r\n\r\nThe above looks like a bug to me. Because the build info is correctly recorded, though I suppose unrelated to the above, which I was assuming is runtime info.\r\n\r\n```\r\n>>> from numpy.__config__ import get_info\r\n>>> get_info(""blas_opt"")\r\n{\'libraries\': [\'openblas\', \'openblas\'], \'library_dirs\': [\'/home/skipper/.local/lib\'], \'language\': \'f77\'}\r\n>>> get_info(""openblas"")\r\n{\'libraries\': [\'openblas\', \'openblas\'], \'library_dirs\': [\'/home/skipper/.local/lib\'], \'language\': \'f77\'}\r\n```\r\n\r\nThis suggests to me that it\'s more robust in package building to use this get_info written at build time than the numpy.distutils which is common among packages that use this for support.\r\n\r\nShould I try to patch this?'"
3939,21188968,seberg,ahaldane,2013-10-17 22:10:06,2016-06-01 21:35:16,2016-06-01 21:35:16,closed,,,4,11 - Bug;component: numpy.core;priority: normal,https://api.github.com/repos/numpy/numpy/issues/3939,b'Unicode byteorder seems mostly broken',"b""Is it supposed to be possible to use non-native unicode byteorder?\r\n\r\nThe unicode comparison functions cannot handle non-native byteorder, however this also applies to the dtype transfer functions. The copyswap functions *do* anticipate it, but only for 4-byte wide unicode (and I think there can be 2-byte wide as a compile option?), maybe that is why printing works...\r\n\r\n```python\r\nIn [19]: a = np.array(['asdf']).astype(unicode)\r\n\r\nIn [20]: a.byteswap().newbyteorder()\r\nOut[20]: \r\narray([u'asdf'], \r\n      dtype='>U4')\r\n\r\nIn [21]: a.astype('>U4')\r\nOut[21]: \r\narray([u'\\U61000000\\U73000000\\U64000000\\U66000000'], \r\n      dtype='>U4')\r\n\r\nIn [22]: a == a.byteswap().newbyteorder()\r\nOut[22]: array([False], dtype=bool)\r\n```"""
3934,21166263,joergdietrich,juliantaylor,2013-10-17 16:29:56,2014-11-25 19:05:38,2014-11-25 19:05:38,closed,,,2,11 - Bug;component: numpy.lib;priority: normal,https://api.github.com/repos/numpy/numpy/issues/3934,b'pickling recarray records destroys information',"b'```\r\nimport pickle\r\nimport sys\r\nimport numpy as np\r\n\r\narr = np.array(([11.1, 12.3,  15.2], )).T\r\ntab3 = np.rec.fromrecords(arr, names=[""v""])\r\nprint tab3[0]\r\nprint pickle.loads(pickle.dumps(tab3[0]))\r\nprint\r\nprint sys.version\r\nprint np.__version__\r\nprint pickle.__version__\r\n```\r\n\r\nOutput:\r\n```\r\n(11.1,)\r\n(9.482614e-317,)\r\n\r\n2.7.5+ (default, Sep 17 2013, 15:31:50) \r\n[GCC 4.8.1]\r\n1.7.1\r\n$Revision: 72223 $\r\n```'"
3926,21077711,mcgfeller,charris,2013-10-16 12:47:15,2015-01-21 22:26:07,2015-01-21 22:26:07,closed,,,0,11 - Bug;component: numpy.core;priority: normal,https://api.github.com/repos/numpy/numpy/issues/3926,"b""Pickling numpy.string_('') fails with ValueError: itemsize cannot be zero""","b'```Python \r\n>>> import pickle,numpy\r\n>>> numpy.version.version\r\n1.7.1\r\n>>> pickle.loads(pickle.dumps(numpy.string_(\'\')))\r\nTraceback (most recent call last):\r\n  File ""<interactive input>"", line 1, in <module>\r\n  File ""C:\\Quantax\\trunk\\Python\\lib\\pickle.py"", line 1382, in loads\r\n    return Unpickler(file).load()\r\n  File ""C:\\Quantax\\trunk\\Python\\lib\\pickle.py"", line 858, in load\r\n    dispatch[key](self)\r\n  File ""C:\\Quantax\\trunk\\Python\\lib\\pickle.py"", line 1133, in load_reduce\r\n    value = func(*args)\r\nValueError: itemsize cannot be zero\r\n>>> \r\n```'"
3897,20906409,rgommers,rgommers,2013-10-12 06:24:27,2013-10-12 19:55:05,2013-10-12 11:43:10,closed,,,6,11 - Bug;component: numpy.lib,https://api.github.com/repos/numpy/numpy/issues/3897,"b""np.info doesn't work on Python 3.x""","b'    >>> np.info(np.sin)\r\n    Traceback (most recent call last):\r\n      File ""<stdin>"", line 1, in <module>\r\n      File ""/home/rgommers/.local/lib/python3.3/site-packages/numpy/lib/utils.py"", line 556, in info\r\n        elif isinstance(object, types.InstanceType): ## check for __call__ method\r\n    AttributeError: \'module\' object has no attribute \'InstanceType\'\r\n\r\nOriginally reported at https://github.com/scipy/scipy/issues/2981'"
3892,20832588,ariddell,jaimefrio,2013-10-10 20:19:16,2014-09-30 23:16:46,2014-09-30 23:16:46,closed,,,7,11 - Bug;component: Documentation;priority: normal,https://api.github.com/repos/numpy/numpy/issues/3892,b'in1d fails if second argument is a set',"b""\r\nnumpy.in1d does not behave like ``in`` if the second argument is a set. Is this a bug? If not, perhaps a prominent warning would be helpful.\r\n\r\n    >>> s = {'a', 'b'}\r\n    >>> s\r\n    set(['a', 'b'])\r\n    >>> x = np.array(['a', 'b', 'c'])\r\n    >>> np.in1d(x, s)\r\n    array([False, False, False], dtype=bool)\r\n    >>> l = list(s)\r\n    >>> np.in1d(x, l)\r\n    array([ True,  True, False], dtype=bool)\r\n\r\nPython 2.7.4, NumPy '1.9.0.dev-b91c711'"""
3889,20784953,aksarkar,charris,2013-10-10 03:04:26,2015-10-23 23:44:52,2015-10-23 23:44:52,closed,,,5,11 - Bug;component: build;priority: normal,https://api.github.com/repos/numpy/numpy/issues/3889,b'Bento does not install _numpyconfig.h',"b'This breaks the scipy build:\r\n\r\n```\r\nIn file included from /home/unix/aksarkar/py27/lib/python2.7/site-packages/numpy/core/include/numpy/npy_common.h:5:0,\r\n                 from /home/unix/aksarkar/py27/lib/python2.7/site-packages/numpy/core/include/numpy/ndarraytypes.h:4,\r\n                 from /home/unix/aksarkar/py27/lib/python2.7/site-packages/numpy/core/include/numpy/ndarrayobject.h:17,\r\n                 from /home/unix/aksarkar/py27/lib/python2.7/site-packages/numpy/core/include/numpy/arrayobject.h:4,\r\n                 from /home/unix/aksarkar/py27/lib/python2.7/site-packages/numpy/f2py/src/fortranobject.h:13,\r\n                 from scipy/linalg/_interpolative-fortranobject.c:2:\r\n/home/unix/aksarkar/py27/lib/python2.7/site-packages/numpy/core/include/numpy/numpyconfig.h:4:26: fatal error: _numpyconfig.h: No such file or directory\r\n #include ""_numpyconfig.h""\r\n```\r\n\r\nPython 2.7.3\r\nBento 2be31f5\r\nnumpy 7457f15'"
3877,20585907,aksarkar,charris,2013-10-06 20:47:49,2015-10-23 23:43:15,2015-10-23 23:43:15,closed,,,3,11 - Bug;component: build;priority: normal,https://api.github.com/repos/numpy/numpy/issues/3877,b'Bento build broken under Python 3.2',"b'2to3\'d bscript to take care of the rename of ```__builtin__``` to ```builtins```.\r\n\r\n```\r\n$ BENTOMAKER_DEBUG=1 ~/.local/src/Bento/bentomaker-3.2 build -j 16\r\nRunning from numpy source directory.\r\n  File ""/home/unix/aksarkar/.local/src/Bento/bentomakerlib/bentomaker.py"", line 486, in noexc_main\r\n    main(argv)\r\n  File ""/home/unix/aksarkar/.local/src/Bento/bentomakerlib/bentomaker.py"", line 251, in main\r\n    return _wrapped_main(global_context, popts, run_node, top_node, build_node)\r\n  File ""/home/unix/aksarkar/.local/src/Bento/bentomakerlib/bentomaker.py"", line 279, in _wrapped_main\r\n    mods = set_main(package, top_node, build_node)\r\n  File ""/home/unix/aksarkar/.local/src/Bento/bento/commands/wrapper_utils.py"", line 91, in set_main\r\n    modules.append(create_hook_module(hook_node.abspath()))\r\n  File ""/home/unix/aksarkar/.local/src/Bento/bento/commands/hooks.py"", line 221, in create_hook_module\r\n    raise InvalidHook(msg)\r\nCould not import hook file \'/home/unix/aksarkar/.local/src/numpy/numpy/core/bscript\': caught exception ImportError(\'No module nam\\\r\ned genapi\',)\r\nOriginal traceback (most recent call last)\r\n  File ""/home/unix/aksarkar/.local/src/Bento/bento/commands/hooks.py"", line 208, in create_hook_module\r\n    exec(compile(code, main_file, \'exec\'), module.__dict__)\r\n  File ""/home/unix/aksarkar/.local/src/numpy/numpy/core/bscript"", line 21, in <module>\r\n    from code_generators import generate_numpy_api, generate_ufunc_api, \\\r\n  File ""/home/unix/aksarkar/.local/src/numpy/numpy/core/code_generators/generate_numpy_api.py"", line 4, in <module>\r\n    import genapi\r\n```\r\n\r\nnumpy 7457f156\r\nBento 2be31f57'"
3871,20581493,pv,charris,2013-10-06 15:41:47,2013-10-06 16:25:00,2013-10-06 16:25:00,closed,,,1,11 - Bug;component: numpy.core;Easy Fix,https://api.github.com/repos/numpy/numpy/issues/3871,b'npy_math.h has invalid isinf for Solaris with SUNWspro12.2',"b'See https://github.com/scipy/scipy/issues/2894\r\n\r\nFor this Solaris C/C++ compiler, `npy_isinf` expands to a missing symbol.\r\nAccording to the report, can be avoided by adding\r\n```\r\n#ifdef __SUNPRO_CC\r\n#include <sunmath.h>\r\n#endif\r\n```\r\n'"
3812,20194425,pv,pv,2013-09-27 20:53:50,2014-06-19 15:54:32,2013-10-19 21:40:46,closed,,,2,11 - Bug;component: numpy.core,https://api.github.com/repos/numpy/numpy/issues/3812,"b""__numpy_ufunc__ shouldn't disable the default Python binop mechanism""","b""If a class has a `__numpy_ufunc__` method defined, this disables the usual Python binary operation mechanism, because Numpy's `__add__` etc. are implemented via Ufuncs.\r\n\r\nExample:\r\n```\r\nimport numpy as np\r\n\r\nclass Foo(object):\r\n    def __numpy_ufunc__(self, *args, **kw):\r\n        return NotImplemented\r\n    def __add__(self, other):\r\n        return 1\r\n    def __radd__(self, other):\r\n        return 1\r\n\r\nx = np.array([1,2,3])\r\ny = Foo()\r\nx + y   \r\n\r\n# Traceback (most recent call last):\r\n# TypeError: __numpy_ufunc__ not implemented for this type.\r\n```\r\n\r\nThe fix is probably to alter the methods in Numpy's `multiarray/number.c` so that either (i) the TypeError is caught and converted to NotImplemented, or (ii) a special internal kwarg is passed to the Numpy ufuncs that instructs them to return NotImplemented rather than raising errors.\r\n\r\nThe problem with (i) is that also other TypeErrors could end up being caught, which may be confusing. (ii) doesn't have this issue, and would allow fixing the issue that ufuncs return NotImplemented in some cases (they shouldn't --- NotImplemented should ever appear only when dealing with Python's binop mechanism).\r\n"""
3759,19624264,yarikoptic,seberg,2013-09-17 16:11:55,2014-05-04 19:54:48,2014-05-04 19:54:48,closed,,,6,11 - Bug;54 - Needs decision;component: numpy.core;priority: normal,https://api.github.com/repos/numpy/numpy/issues/3759,"b""== None seems to do 'is None' for the array instead of returning element-wise comparison""","b'May be related to #1608 \r\nI understand that None is quite different beast but since comparison to None is allowed, I do not see why ""a == None"" should just return False instead of returning a bool dtyped array with element-wise comparisons as it does for other types.  See below that it simply returns False while comparing to None array contains.\r\n\r\n```\r\n$> PYTHONPATH=$PWD/lib.linux-x86_64-3.3 python3 -c \'import numpy; a=numpy.array([1, None, ""str""]); print([a==x for x in a])\'  \r\n[array([ True, False, False], dtype=bool), False, array([False, False,  True], dtype=bool)]\r\n\r\n$> PYTHONPATH=$PWD/lib.linux-x86_64-2.7 python -c \'import numpy; a=numpy.array([1, None, ""str""]); print([a==x for x in a])\' \r\n[array([ True, False, False], dtype=bool), False, array([False, False,  True], dtype=bool)]\r\n```'"
3671,18837902,charris,charris,2013-09-01 15:06:21,2014-02-23 17:54:33,2014-02-23 17:54:20,closed,,,6,11 - Bug;component: Other,https://api.github.com/repos/numpy/numpy/issues/3671,b'Travisbot is missing some tests',"b'On my platform, fedora 19, numpy.test() runs several hundred more tests than Travisbot. It would be good to track this down.'"
3615,18045771,Juanlu001,charris,2013-08-14 10:47:54,2014-07-16 19:21:53,2014-06-25 16:28:59,closed,,,6,11 - Bug;component: Documentation;component: numpy.polynomial,https://api.github.com/repos/numpy/numpy/issues/3615,b'Problem with imports in polynomial.polynomial docstring examples',"b'In most of the functions in polynomial.polynomial you can read this line:\r\n\r\n    >>> from numpy import polynomial as P\r\n\r\nand then:\r\n\r\n    >>> P.polyline(1,-1)\r\n    >>> sum = P.polyadd(c1,c2); sum\r\n    >>> P.polysub(c1,c2)\r\n    >>> P.polyder(c) # (d/dx)(c) = 2 + 6x + 12x**2\r\n    [...]\r\n\r\nhttps://github.com/numpy/numpy/blob/v1.7.1/numpy/polynomial/polynomial.py\r\n\r\nbut *all* these lines fail because all those members are part of the polynomial module in the polynomial package. It should be therefore like:\r\n\r\n    >>> P.polynomial.polyline(1,-1)\r\n    >>> sum = P.polynomial.polyadd(c1,c2); sum\r\n    >>> P.polynomial.polysub(c1,c2)\r\n    >>> P.polynomial.polyder(c) # (d/dx)(c) = 2 + 6x + 12x**2\r\n    [...]\r\n\r\nNevertheless, this looks like a bit too long for me and I wonder if it would be possible to import some convenience functions using power series polynomials (polynomial.polyfit and things like that) directly into the polynomial package namespace.\r\n\r\nI wrote ""polynomial"" too many times already :)'"
3598,17913638,rgommers,charris,2013-08-11 15:21:47,2013-08-12 19:30:36,2013-08-12 13:13:33,closed,,1.8 blockers,5,11 - Bug;component: Other;priority: high,https://api.github.com/repos/numpy/numpy/issues/3598,b'Build fails with Python 3.4a1',"b'End of build log:\r\n\r\n    gcc: numpy/core/src/multiarray/arrayobject.c\r\n    numpy/core/src/multiarray/arrayobject.c: In function \xa1\xaearray_richcompare\xa1\xaf:\r\n    numpy/core/src/multiarray/arrayobject.c:1307:13: error: ISO C90 forbids mixed declarations and code [-Werror=declaration-after-statement]\r\n    numpy/core/src/multiarray/arrayobject.c:1364:13: error: ISO C90 forbids mixed declarations and code [-Werror=declaration-after-statement]\r\n    cc1: some warnings being treated as errors\r\n    numpy/core/src/multiarray/arrayobject.c: In function array_richcompare:\r\n    numpy/core/src/multiarray/arrayobject.c:1307:13: error: ISO C90 forbids mixed declarations and code [-Werror=declaration-after-statement]\r\n    numpy/core/src/multiarray/arrayobject.c:1364:13: error: ISO C90 forbids mixed declarations and code [-Werror=declaration-after-statement]\r\n    cc1: some warnings being treated as errors\r\n    error: Command ""gcc -pthread -Wno-unused-result -Werror=declaration-after-statement -DNDEBUG -g -fwrapv -O3 -Wall -Wstrict-prototypes -fPIC -DHAVE_NPY_CONFIG_H=1 -Inumpy/core/include -Ibuild/src.linux-i686-3.4/numpy/core/include/numpy -Inumpy/core/src/private -Inumpy/core/src -Inumpy/core -Inumpy/core/src/npymath -Inumpy/core/src/multiarray -Inumpy/core/src/umath -Inumpy/core/src/npysort -Inumpy/core/include -I/home/rgommers/Code/pythons/include/python3.4m -c numpy/core/src/multiarray/arrayobject.c -o build/temp.linux-i686-3.4/numpy/core/src/multiarray/arrayobject.o"" failed with exit status 1\r\n\r\n\r\nWith Python 3.3 these are the default distutils compile flags:\r\n\r\n    C compiler: i686-linux-gnu-gcc -pthread -DNDEBUG -g -fwrapv -O2 -Wall \r\n    -Wstrict-prototypes -g -fstack-protector --param=ssp-buffer-size=4 -Wformat\r\n    -Werror=format-security -D_FORTIFY_SOURCE=2 -fPIC\r\n\r\nWith Python 3.4 this becomes:\r\n\r\n    C compiler: gcc -pthread -Wno-unused-result -Werror=declaration-after-statement\r\n    -DNDEBUG -g -fwrapv -O3 -Wall -Wstrict-prototypes -fPIC\r\n\r\nhttp://docs.python.org/3.4/whatsnew/3.4.html says ""No build and C API changes"", so I\'d think the compile args shouldn\'t change. But I can\'t find so quickly who decided this and why. \r\n\r\nFix in numpy or file bug against Python? Or both?'"
3581,17678382,potyt,charris,2013-08-06 08:33:42,2015-06-19 21:38:56,2015-06-19 21:38:56,closed,,,20,11 - Bug;component: numpy.lib;priority: normal,https://api.github.com/repos/numpy/numpy/issues/3581,"b'record array is made up of numpy.void, not numpy.record'","b""I raised this previously on the PyTables issue list, but it they have asked me to transfer to numpy. (https://github.com/PyTables/PyTables/issues/271)\r\n\r\n    >>> import numpy as np\r\n    >>> a = (1, 2, 3)\r\n    >>> ra = np.rec.fromrecords([a])\r\n    >>> na = np.array([a], dtype='i8,i8,i8').view(type=np.recarray)\r\n    >>> na\r\n    rec.array([(1, 2, 3)], \r\n          dtype=[('f0', '<i8'), ('f1', '<i8'), ('f2', '<i8')])\r\n    >>> ra\r\n    rec.array([(1, 2, 3)], \r\n          dtype=[('f0', '<i8'), ('f1', '<i8'), ('f2', '<i8')])\r\n    >>> type(ra)\r\n    <class 'numpy.core.records.recarray'>\r\n    >>> type(na)\r\n    <class 'numpy.core.records.recarray'>\r\n    >>> ra[0]\r\n    (1, 2, 3)\r\n    >>> na[0]\r\n    (1, 2, 3)\r\n    >>> type(ra[0])\r\n    <class 'numpy.core.records.record'>\r\n    >>> type(na[0])\r\n    <class 'numpy.void'>\r\n\r\nAny reason why .view can't return record arrays instead of sort of fake record arrays, or voidarrays? Is there a cast missing in the code somewhere?"""
3544,17091491,cpelley,cpelley,2013-07-23 09:26:52,2016-02-04 10:29:48,2016-02-04 10:29:48,closed,,,7,11 - Bug;component: numpy.ma;priority: normal,https://api.github.com/repos/numpy/numpy/issues/3544,b'BUG: str and repr special methods blow up memory usage',"b'```Python\r\n>>> arr = np.zeros([43200, 21600], dtype=np.int8)\r\n>>> z = np.ma.masked_values(arr, 0)\r\n>>> print z\r\nTraceback (most recent call last):\r\n  File ""<stdin>"", line 1, in <module>\r\n  File ""/usr/local/sci/lib/python2.7/site-packages/numpy/ma/core.py"", line 3530, in __str__\r\n    res = self._data.astype(""|O8"")\r\nMemoryError\r\n```\r\n\r\nCalculated memory usage:\r\n(43200*21600.*8) + (43200*21600)\r\n8398080000.0 bits --> 0.9776651859283 GB'"
3488,16190181,mgeier,charris,2013-06-30 17:10:37,2014-05-04 14:34:25,2014-05-04 14:34:25,closed,,,1,11 - Bug;component: Documentation;Easy Fix;priority: normal,https://api.github.com/repos/numpy/numpy/issues/3488,b'`column_stack()`: error in documentation',"b""in `numy/lib/shape_base.py`, around line 277:\r\n\r\n    This function is equivalent to ``np.vstack(tup).T``.\r\n\r\nIf I'm not mistaken, this was true for the old behaviour.\r\nCurrently, inputs with >= 2 dimensions are not transposed (which is good!) and therefore it is not equivalent anymore.\r\n\r\nHere is an example, the commented line gives an error:\r\n\r\n```python\r\na = array([[1, 2], [3, 4], [5, 6]])\r\nb = array([11, 12, 13])\r\ncolumn_stack((a, b))\r\n#vstack((a, b)).T\r\n```"""
3484,16163867,justinvf,charris,2013-06-28 22:00:54,2015-06-13 11:05:42,2015-06-13 11:05:42,closed,,,7,11 - Bug;component: numpy.core;priority: normal,https://api.github.com/repos/numpy/numpy/issues/3484,b'Division broken when dtype specified',"b""In a head build using python 3:\r\n\r\n```{python}\r\n>>> np.__version__\r\n'1.8.0.dev-069e9b0'\r\n>>> np.divide(.4, 1.0, dtype=np.float)\r\n0.0\r\n>>> np.divide(.4, 1.0)\r\n0.40000000000000002\r\n```"""
3473,15993067,dlangenk,charris,2013-06-25 18:18:36,2014-05-05 18:16:39,2014-05-05 18:16:08,closed,,,3,11 - Bug,https://api.github.com/repos/numpy/numpy/issues/3473,b'Save large array with numpy.savez(_compressed)',"b""longer version: http://stackoverflow.com/questions/17298129/python-pickle-size-limit\r\n\r\nSave data with:\r\n```python\r\nimport numpy\r\nl=numpy.zeros((1810392,255))\r\nnumpy.savez_compressed('file.npz',l)\r\n```\r\n\r\nLoad data again with:\r\n```python\r\nimport numpy\r\nl=numpy.load('file.npz')\r\nl['arr_0']\r\n```\r\n\r\nresults in error message: http://pastebin.com/ms3xhsaV\r\n\r\nOS: MacOSX 10.8.4 (64bit) 4GB RAM and Linux CentOS 6.4 (64bit) 250GB RAM \r\nPython: 2.7.4 (Mac) / 2.73 (Linux)\r\nNumpy: 1.8.0.dev-20224ea (Mac) / 1.7.0 (Linux)"""
3442,15594735,pv,seberg,2013-06-15 17:50:34,2013-06-17 17:13:23,2013-06-17 17:13:23,closed,,,4,11 - Bug;component: numpy.core,https://api.github.com/repos/numpy/numpy/issues/3442,b'Regression: float64 and Python long int multiplication fails',"b'Multiplying float64 and Python long integers with large values fails on current Numpy master. This used to work (and works on 1.7.1).\r\n\r\nOn master at 65fe95ccc73:\r\n```\r\nPython 2.7.4 (default, Apr 19 2013, 18:28:01) \r\n>>> np.float64(1.0) * 123123123123123123123L\r\nTraceback (most recent call last):\r\n  File ""<stdin>"", line 1, in <module>\r\nTypeError: unsupported operand type(s) for *: \'numpy.float64\' and \'long\'\r\n```\r\n\r\nSpotted in Scipy.'"
3428,15456021,prossahl,seberg,2013-06-12 15:15:22,2014-08-13 18:44:29,2014-08-13 18:44:29,closed,,,3,11 - Bug;12 - Regression;Easy Fix,https://api.github.com/repos/numpy/numpy/issues/3428,b'Regression in 1.7.1 ctor.c setArrayFromSequence()',"b'setArrayFromSequence() returns error code 0 on error:\r\n\r\n    >>> arr = np.array([[1,2,3],[4,5,6]])\r\n    >>> arr[:,1] = [] # This blows up in 1.6.2, not in 1.7.1\r\n    >>> arr[0,1]\r\n    2\r\n    >>> arr # Kaboom!\r\n\r\nHere is the patch:\r\n\r\n    diff -ur numpy-1.7.1_orig/numpy/core/src/multiarray/ctors.c numpy-1.7.1/numpy/core/src/multiarray/ctors.c\r\n    --- numpy-1.7.1_orig/numpy/core/src/multiarray/ctors.c\t2013-04-07 06:04:05.000000000 +0100\r\n    +++ numpy-1.7.1/numpy/core/src/multiarray/ctors.c\t2013-06-12 15:25:59.423961489 +0100\r\n    @@ -383,7 +383,7 @@\r\n                             int dim, npy_intp offset)\r\n     {\r\n         Py_ssize_t i, slen;\r\n    -    int res = 0;\r\n    +    int res = -1;\r\n     \r\n         /*\r\n          * This code is to ensure that the sequence access below will\r\n    diff -ur numpy-1.7.1_orig/numpy/core/tests/test_regression.py numpy-1.7.1/numpy/core/tests/test_regression.py\r\n    --- numpy-1.7.1_orig/numpy/core/tests/test_regression.py\t2013-04-07 06:04:05.000000000 +0100\r\n    +++ numpy-1.7.1/numpy/core/tests/test_regression.py\t2013-06-12 14:42:54.469727026 +0100\r\n    @@ -1816,7 +1816,14 @@\r\n                                   order=\'F\')\r\n             assert_array_equal(arr2, data_back)\r\n     \r\n    -\r\n    +    def test_setArrayFromSequence_fails(self):\r\n    +        # 1.6.2 passes this test, 1.7.1 fails\r\n    +        arr = np.array([[1,2,3],[4,5,6]])\r\n    +        try:\r\n    +            arr[:,1] = []\r\n    +        except ValueError:\r\n    +            pass\r\n    +        str(arr)\r\n     \r\n     \r\n     if __name__ == ""__main__"":\r\n'"
3388,15040477,rgommers,shoyer,2013-06-02 13:36:11,2016-01-22 00:08:47,2016-01-22 00:08:47,closed,,,9,11 - Bug;54 - Needs decision;component: numpy.core,https://api.github.com/repos/numpy/numpy/issues/3388,b'Datetime timezone handling broken in 1.7.x',"b'For a description, see http://thread.gmane.org/gmane.comp.python.numeric.general/53805\r\n\r\nSomething needs to be done about this for 1.8.0'"
3368,14765979,WarrenWeckesser,seberg,2013-05-26 03:42:45,2014-01-27 17:34:16,2014-01-27 17:34:16,closed,,,1,11 - Bug;component: numpy.ma;Easy Fix;priority: normal,https://api.github.com/repos/numpy/numpy/issues/3368,"b""BUG: ma: Inconsistent return type from the 'count' method.""","b""Example:\r\n\r\n    In [6]: a = ma.masked_array([1, 2, 3])\r\n\r\n    In [7]: b = ma.masked_array([1, 2, 3], mask=False)\r\n\r\n    In [8]: a\r\n    Out[8]: \r\n    masked_array(data = [1 2 3],\r\n                 mask = False,\r\n           fill_value = 999999)\r\n\r\n    In [9]: b\r\n    Out[9]: \r\n    masked_array(data = [1 2 3],\r\n                 mask = [False False False],\r\n           fill_value = 999999)\r\n\r\nNotice the difference: `a.mask` is the scalar value `False`, while `b.mask` is an array:\r\n\r\n    In [10]: a.mask\r\n    Out[10]: False\r\n\r\n    In [11]: b.mask\r\n    Out[11]: array([False, False, False], dtype=bool)\r\n\r\nThat's not the problem.  They both represent the same data: a 1-D array with the values [1, 2, 3], with none of the values masked.\r\n\r\nBecause these represent the same data, I would expect the `count` method for these two arrays to return *exactly* the same thing. However,\r\n\r\n    In [12]: a.count(axis=0)  # Returns an integer\r\n    Out[12]: 3\r\n\r\n    In [13]: b.count(axis=0)  # Returns a scalar array\r\n    Out[13]: array(3)\r\n\r\nWhile the different return values act similarly in many cases, it is a nuisance (and a bug, in my opinion) that the return types are not the same.\r\n"""
3363,14755461,juliantaylor,charris,2013-05-25 09:02:31,2013-08-11 21:27:39,2013-08-11 21:27:39,closed,cournape,1.8 blockers,5,11 - Bug;component: numpy.core,https://api.github.com/repos/numpy/numpy/issues/3363,b'test_operand_flags failure on 32 bit',"b'with current git head:\r\n\r\n```\r\nERROR: test_operand_flags (test_ufunc.TestUfunc)\r\n----------------------------------------------------------------------\r\nTraceback (most recent call last):\r\n  File ""/local/lib/python2.7/site-packages/numpy/core/tests/test_ufunc.py"", line 807, in test_operand_flags\r\n    opflag_tests.inplace_add(a[:-1,:-1], b)\r\nTypeError: ufunc \'inplace_add\' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule \'\'safe\'\'\r\n```\r\n\r\nit works on 64 bit.'"
3334,14328664,jnlanl,charris,2013-05-14 20:08:49,2014-02-20 14:46:50,2014-02-20 14:46:50,closed,,,10,11 - Bug;component: numpy.distutils,https://api.github.com/repos/numpy/numpy/issues/3334,b'numpy.distutils 1.7.0+ breaks with easy_install',"b'Platform: win32, python 2.6 binary installer from python.org, numpy binary installer of versions given, mingw32 compiler (specified in distutils.cfg)\r\n\r\n""easy_install ffnet"" works fine with numpy 1.6.2; with numpy 1.7.0, it raises a SandboxViolation:\r\n> Wrote C/API module ""_pikaia"" to file ""build\\src.win32-2.6\\ffnet\\fortran\\_pikaiamodule.c""\r\n> Fortran 77 wrappers are saved to ""build\\src.win32-2.6\\ffnet\\fortran\\_pikaia-f2pywrappers.f""\r\n> error: Setup script exited with error: SandboxViolation: open(\'C:\\\\Python26\\\\lib\r\ns\\\\libmsvcr90.def\', \'w\') {}\r\n\r\nI know distribution/setup tools are a little flavour-of-the-month, but I haven\'t seen a call that numpy.distutils is incompatible with easy_install now (ffnet still recommends easy_install).'"
3311,14043461,hillierdani,charris,2013-05-07 10:56:29,2014-03-04 02:17:01,2014-03-04 02:17:01,closed,,,0,11 - Bug;component: numpy.core;priority: normal,https://api.github.com/repos/numpy/numpy/issues/3311,b'bug in deepcopy() of rank-zero arrays',"b""I cite Chris Baker's message from numpy discussion, since I encountered the exact same bug and I could not find it reporter here:\r\n\r\nHi folks, \r\n\r\nIn [264]: np.__version__ \r\nOut[264]: '1.7.0' \r\n\r\nI just noticed that deep copying a rank-zero array yields a scalar -- \r\nprobably not what we want. \r\n\r\nIn [242]: a1 = np.array(3) \r\n\r\nIn [243]: type(a1), a1 \r\nOut[243]: (numpy.ndarray, array(3)) \r\n\r\nIn [244]: a2 = copy.deepcopy(a1) \r\n\r\nIn [245]: type(a2), a2 \r\nOut[245]: (numpy.int32, 3) \r\n\r\nregular copy.copy() seems to work fine: \r\n\r\nIn [246]: a3 = copy.copy(a1) \r\n\r\nIn [247]: type(a3), a3 \r\nOut[247]: (numpy.ndarray, array(3)) \r\n\r\nHigher-rank arrays seem to work fine: \r\n\r\nIn [253]: a1 = np.array((3,4)) \r\n\r\nIn [254]: type(a1), a1 \r\nOut[254]: (numpy.ndarray, array([3, 4])) \r\n\r\nIn [255]: a2 = copy.deepcopy(a1) \r\n\r\nIn [256]: type(a2), a2 \r\nOut[256]: (numpy.ndarray, array([3, 4])) \r\n\r\nArray scalars seem to work fine as well: \r\n\r\nIn [257]: s1 = np.float32(3) \r\n\r\nIn [258]: s2 = copy.deepcopy(s1) \r\n\r\nIn [261]: type(s1), s1 \r\nOut[261]: (numpy.float32, 3.0) \r\n\r\nIn [262]: type(s2), s2 \r\nOut[262]: (numpy.float32, 3.0) \r\n\r\nThere are other ways to copy arrays, but in this case, I had a dict \r\nwith a bunch of arrays in it, and needed a deepcopy of the dict. I was \r\nsurprised to find that my rank-0 array got turned into a scalar."""
3285,13735452,alex-me,charris,2013-04-28 15:23:57,2014-03-12 14:16:57,2014-03-12 14:16:57,closed,,,1,11 - Bug;component: numpy.lib;Easy Fix;priority: normal,https://api.github.com/repos/numpy/numpy/issues/3285,b'_vectorize_call error when otype attribute is set after vectorize object creation',"b'if a vectorize object is created without otype argument, an attempt to set it later causes an error:\r\n```python\r\nv = numpy.vectorize( lambda x: x )\r\nv.otypes=\'i\'\r\nv( [1,2] )\r\nTraceback (most recent call last):\r\n  File ""<stdin>"", line 1, in <module>\r\n  File ""/usr/lib64/python2.7/site-packages/numpy/lib/function_base.py"", line 1873, in __call__\r\n    return self._vectorize_call(func=func, args=vargs)\r\n  File ""/usr/lib64/python2.7/site-packages/numpy/lib/function_base.py"", line 1933, in _vectorize_call\r\n    ufunc, otypes = self._get_ufunc_and_otypes(func=func, args=args)\r\n  File ""/usr/lib64/python2.7/site-packages/numpy/lib/function_base.py"", line 1886, in _get_ufunc_and_otypes\r\n    if func is self.pyfunc and self._ufunc is not None:\r\nAttributeError: \'vectorize\' object has no attribute \'_ufunc\'\r\n```\r\n'"
3276,13683780,taldcroft,charris,2013-04-26 11:20:18,2015-10-20 03:10:15,2015-10-20 03:10:15,closed,,,6,11 - Bug;component: numpy.ma;priority: normal,https://api.github.com/repos/numpy/numpy/issues/3276,b'Segmentation fault using ma.masked_all with Python 3.3',"b'Using `ma.masked_all()` with a unicode string on linux-64 with python 3.3 and numpy 1.7.0, there is a segmentation fault shown below.  This is not present in python 3.2 or python 2.7.\r\n\r\n```\r\nccosmos$ ipython3\r\nPython 3.3.0 |Anaconda 1.4.0 (64-bit)| (default, Feb 25 2013, 15:57:27) \r\n...\r\n\r\nIn [1]: import numpy.ma as ma\r\n\r\nIn [2]: t = ma.masked_all(3, dtype=[(\'a\', \'<U3\')])\r\n\r\nIn [3]: print(t)\r\n---------------------------------------------------------------------------\r\nValueError                                Traceback (most recent call last)\r\n<ipython-input-3-d6c4f5caf31e> in <module>()\r\n----> 1 print(t)\r\n\r\n/home/aldcroft/soft/anaconda/envs/py3/lib/python3.3/site-packages/numpy/ma/core.py in __str__(self)\r\n   3538                 else:\r\n   3539                     rdtype = _recursive_make_descr(self.dtype, ""O"")\r\n-> 3540                     res = self._data.astype(rdtype)\r\n   3541                     _recursive_printoption(res, m, f)\r\n   3542         else:\r\n\r\nValueError: character U+53000464 is not in range [U+0000; U+10ffff]\r\n\r\nIn [4]: print(repr(t))\r\nSegmentation fault\r\n```'"
3259,13340620,gbb,charris,2013-04-18 09:19:53,2014-03-24 16:20:28,2014-03-24 16:20:28,closed,,,15,11 - Bug;component: numpy.lib;priority: normal,https://api.github.com/repos/numpy/numpy/issues/3259,b'More bugs in numpy.select & numpy.choose',"b'In issue #3254, I noted this part of the traceback:\r\n\r\n```\r\nValueError: Need between 2 and (32) array objects (inclusive).\r\n```\r\n\r\nI decided to test this error message, and found the following extra bugs, separate to  issue #3254.\r\n\r\nBUG 1. The error message is wrong and precisely but incorrectly describes numpy\'s behaviour.\r\n\r\nBUG 2. Numpy does not handle size \'32 inclusive\' arrays, but rather, size 30 inclusive. Both 31 and 32 element arrays generate errors. ** this may indicate an off-by-2 array handling error somewhere **\r\n\r\nBUG 3. Zero- and 1-element arrays do not generate errors, but (according to the error message) should. My feeling is that this is a feature rather than a bug. Not sure about correct result to return for case zero. ** these two cases also seem like an off-by-2 array handling error **\r\n\r\nBUG 4. (I assume) there are no test cases that check for these bugs and detect them automatically or they would be known already. Since there are a few bugs in relation to choose/select array size handling, maybe test cases can be added to stop this from happening again in future? I hope the bug demo code below is useful for this.\r\n\r\nThe array-related bugs may have been fixed already by patch https://github.com/numpy/numpy/issues/226\r\nSee: https://github.com/numpy/numpy/issues/3254#issuecomment-16499519\r\nBut this would need to be checked after the merge conflicts are sorted.\r\n\r\n==== Test code ====\r\n```\r\nimport numpy as np\r\n\r\nfor i in [0,1,2,30,31,32,33]:\r\n\r\n        try:\r\n                choices=[(3>1)]*i\r\n                results=[2]*i\r\n\r\n                print np.select(choices,results)\r\n        except ValueError as e:\r\n                print ""Error in case: "",i,"" ,"",e\r\n```\r\n\r\n==== Expected Output ====\r\n```\r\nError in case:  0  , Need between 2 and (32) array objects (inclusive).\r\nError in case:  1  , Need between 2 and (32) array objects (inclusive).\r\n2\r\n2\r\n2\r\n2\r\nError in case:  33  , Need between 2 and (32) array objects (inclusive).\r\n```\r\n==== Actual Output ====\r\n```\r\n0\r\n2\r\n2\r\n2\r\nError in case:  31  , Need between 2 and (32) array objects (inclusive).\r\nError in case:  32  , Need between 2 and (32) array objects (inclusive).\r\nError in case:  33  , Need between 2 and (32) array objects (inclusive).\r\n```\r\n\r\nN.B. cases 0, 1, 31, 32.\r\n\r\nComplete traceback:\r\n```\r\nTraceback (most recent call last):\r\n  File ""numpy5.py"", line 21, in <module>\r\n    print np.select(choices,results)\r\n  File ""/Library/Python/2.7/site-packages/numpy-override/numpy/lib/function_base.py"", line 779, in select\r\n    return choose(S, tuple(choicelist))\r\n  File ""/Library/Python/2.7/site-packages/numpy-override/numpy/core/fromnumeric.py"", line 297, in choose\r\n    return choose(choices, out=out, mode=mode)\r\nValueError: Need between 2 and (32) array objects (inclusive).\r\n```\r\nRelated issues:\r\n\r\nhttps://github.com/numpy/numpy/issues/3254\r\nhttps://github.com/numpy/numpy/pull/226\r\nhttp://mail.scipy.org/pipermail/numpy-discussion/2011-July/057831.html\r\n\r\nThanks for your time in reading this issue report.'"
3254,13286211,gbb,charris,2013-04-17 08:39:21,2014-03-28 13:50:00,2014-03-28 13:50:00,closed,,,7,11 - Bug;component: numpy.lib;priority: normal,https://api.github.com/repos/numpy/numpy/issues/3254,b'numpy.select affected by numpy.choose regression.',"b'There is a bug in numpy.select(), originating from an unsolved regression bug in numpy.choose(), which limits the number of items from which to select to 32  (NPY_MAXARGS).\r\n\r\nThis behaviour is not documented in the numpy documentation for numpy.select.\r\n\r\nThis bug affects a project I\'m working on and unfortunately is going to be tricky to work around due to a constraint on how I can use numpy. (I can only execute a single expression; numpy.select allowed an elegant and obvious solution).\r\n\r\n\r\n- A code sample that shows the bug, with expected and actual output, and without explicit use of numpy.choose:\r\n\r\nCode:\r\n```\r\nimport numpy as np\r\n\r\nchoices=[(3>1)]*20\r\nresults=[1]*20\r\n\r\nprint np.select(choices,results)\r\n\r\nchoices=[(3>1)]*100\r\nresults=[1]*100\r\n    \r\nprint np.select(choices,results)\r\n```\r\n\r\nExpected output: \r\n```\r\n1\r\n1\r\n```\r\nActual output:\r\n```\r\n1\r\nTraceback (most recent call last):\r\n  File ""numpy5.py"", line 11, in <module>\r\n    np.select(choices,results)\r\n  File ""/Library/Python/2.7/site-packages/numpy-override/numpy/lib/function_base.py"", line 779, in select\r\n    return choose(S, tuple(choicelist))\r\n  File ""/Library/Python/2.7/site-packages/numpy-override/numpy/core/fromnumeric.py"", line 297, in choose\r\n    return choose(choices, out=out, mode=mode)\r\nValueError: Need between 2 and (32) array objects (inclusive).\r\n```\r\n\r\n- A related mailing list thread about the regression in numpy.choose from June 2011.\r\n\r\nhttp://www.mail-archive.com/numpy-discussion@scipy.org/msg31915.html\r\n\r\n- A related bugfix pull request which is apparently partially incomplete / not integrated. \r\n\r\nhttps://github.com/numpy/numpy/pull/226\r\n\r\n\r\n- Other related links / discussion\r\n\r\nhttp://mail.scipy.org/pipermail/numpy-discussion/2012-August/063646.html\r\nhttp://stackoverflow.com/questions/11570157/numpy-choose-32-choice-limitation\r\nhttp://comments.gmane.org/gmane.comp.python.scientific.user/28521\r\nhttp://www.mail-archive.com/numpy-discussion@scipy.org/msg31915.html\r\n'"
3253,13284263,mwtoews,jaimefrio,2013-04-17 07:29:58,2015-06-05 15:43:41,2015-06-05 15:43:41,closed,,,3,11 - Bug;component: numpy.core;Easy Fix;priority: normal,https://api.github.com/repos/numpy/numpy/issues/3253,b'Cannot get a view from a composite array with object data members',"b'With NumPy 1.7.1 on Win64 with Python 2.7 I see a new issue that was not a problem on a previous version (e.g., 1.6.2).\r\n\r\nConsider a composite data type, where a view is obtained from:\r\n```python\r\nimport numpy as np\r\ndat1 = np.zeros(3, [(\'A\', \'i\'), (\'B\', \'f\')])\r\nnew1 = dat1[[\'B\', \'A\']]\r\nprint(repr(new1))\r\n# array([(0.0, 0), (0.0, 0), (0.0, 0)], \r\n#      dtype=[(\'B\', \'<f4\'), (\'A\', \'<i4\')])\r\n```\r\ncool (note: back in 1.4.1 although a subset could be made, the order was the same as the original).\r\n\r\nHowever, if one of types used in the composite data type is \'|O8\', I can no longer obtain a view:\r\n```python\r\ndat2 = np.zeros(3, [(\'A\', \'i\'), (\'B\', \'|O8\')])\r\nnew2 = dat2[[\'B\', \'A\']]\r\n```\r\n> Traceback (most recent call last):\r\n>   File ""<interactive input>"", line 1, in <module>\r\n>   File ""C:\\Python27\\lib\\site-packages\\numpy\\core\\_internal.py"", line 296, in _index_fields\r\n>     view = ary.view(dtype=view_dtype)\r\n> TypeError: Cannot change data-type for object array.\r\n'"
3219,13031991,tkf,jjhelmus,2013-04-10 18:01:42,2015-10-30 02:33:18,2015-10-30 02:33:18,closed,,,1,11 - Bug;component: numpy.ma;priority: normal,https://api.github.com/repos/numpy/numpy/issues/3219,b'MaskedArray.dot not considering mask?',"b'`masked.dot(other)` is equivalent to `numpy.dot(masked, other)`, rather than `numpy.ma.dot(masked, other)`.\r\n\r\n```py\r\nIn [1]:\r\nimport numpy\r\na = numpy.ma.array([0, 1], mask=True)\r\nb = numpy.ma.array([0, 1])\r\n\r\nIn [2]:\r\na.dot(b)\r\nOut [2]:\r\n1\r\n\r\nIn [3]:\r\nnumpy.ma.dot(a, b)\r\nOut [3]:\r\nmasked_array(data = --,\r\n             mask = True,\r\n       fill_value = 999999)\r\n```\r\n'"
3213,12987174,hamogu,charris,2013-04-09 19:10:23,2014-03-28 23:33:13,2014-03-28 23:33:13,closed,,,4,11 - Bug;component: numpy.ma;priority: normal,https://api.github.com/repos/numpy/numpy/issues/3213,b'Assigning a fill_value in masked array fails silently for wrong type',"b""I try to assign a `fill_value` to a masked array. If it's the right type (e.g. an `int` in an array of type `int`), it works, but if I try to assign a `fill_value` of the wrong dtype (e.g. a `string` in an array of type `int`, it fails silently. I don't know if this is a bug or a feature, but I had expected a `ValueError` or something similar if the value cannot be broadcasted to the required type.\r\n\r\n```\r\nIn [1]: x = np.ma.array(np.arange(3).reshape(3), mask=[[1, 0, 0]])\r\n\r\nIn [2]: print repr(x)\r\nmasked_array(data = [-- 1 2],\r\n             mask = [ True False False],\r\n       fill_value = 999999)\r\n\r\n\r\nIn [3]: x.fill_value = 'n.a.'\r\n\r\nIn [4]: print repr(x)\r\nmasked_array(data = [-- 1 2],\r\n             mask = [ True False False],\r\n       fill_value = 999999)\r\n\r\n\r\nIn [5]: x.fill_value = -99\r\n\r\nIn [6]: print repr(x)\r\nmasked_array(data = [-- 1 2],\r\n             mask = [ True False False],\r\n       fill_value = -99)\r\n```"""
3195,12804656,julien-diener,jaimefrio,2013-04-04 15:13:30,2015-05-05 04:03:22,2015-05-05 04:03:22,closed,,,1,11 - Bug;component: numpy.lib;priority: normal,https://api.github.com/repos/numpy/numpy/issues/3195,b'segmentation fault with numpy.place',"b'Hi, \r\n\r\nOn my install at least (see below), I append to find an easy way to make a segmentation fault:\r\n\r\n```\r\na = np.zeros(3,dtype=object)\r\nnp.place(a,[0,1,1],[])\r\n```\r\n\r\nI understand this is not be the right way to set some elements of an object array to an empty list (sadly), but still it should probably not crash python\r\n\r\nos: mac10.6\r\npython: 2.7.3   - with ipython 0.13.1\r\nnumpy 1.6.2'"
3175,12559786,megies,seberg,2013-03-28 11:18:13,2014-02-22 19:39:42,2014-02-22 19:39:42,closed,,,8,11 - Bug;component: numpy.core;priority: normal,https://api.github.com/repos/numpy/numpy/issues/3175,b'segmentation fault with numpy.array() from bytearray',"b""I experience segmentation faults on certain systems when constructing a numpy array from a bytearray. The following code shows the problem:\r\n```python\r\nimport numpy as np\r\nbs = b'074906D SSB  00BH'\r\nba = bytearray(bs)\r\nx = np.array(ba, dtype=np.uint8)\r\n```\r\nI am getting segfaults on these systems:\r\n - Python 2.6.6, Numpy 1.6.2, 32bit\r\n - Python 2.6.6, Numpy 1.7.0, 32bit\r\n - Python 2.6.6, Numpy 1.6.2, 64bit\r\n - Python 2.6.6, Numpy 1.7.0, 64bit\r\n\r\nIn contrast, the above example is running on this system:\r\n - Python 2.7.3, Numpy 1.6.2, 64bit\r\n\r\nSo it seems the problem is connected to Numpy's interaction with Python 2.6?\r\n\r\nUsing `np.frombuffer` instead of `np.array` works on all systems:\r\n```python\r\nx = np.frombuffer(ba, dtype=np.uint8)\r\n```"""
3173,12546289,saffsd,charris,2013-03-28 02:39:20,2014-02-27 19:21:00,2014-02-22 19:46:00,closed,,,4,11 - Bug;component: numpy.random;priority: normal,https://api.github.com/repos/numpy/numpy/issues/3173,"b""Segmentation fault when 'size' argument to numpy.random.multinomial has type numpy.uint32.""","b'Steps to reproduce:\r\n\r\nPython 2.7.3 (default, Aug  1 2012, 05:14:39) \r\n[GCC 4.6.3] on linux2\r\nType ""help"", ""copyright"", ""credits"" or ""license"" for more information.\r\n>>> import numpy as np\r\n>>> np.random.multinomial(1,[0.5,0.5],np.uint32(1))\r\narray([0, 1, 1])\r\n>>> np.uint32(1)\r\n1\r\n>>> np.random.multinomial(1,[0.5,0.5],np.uint32(1))\r\narray([0, 1, 0])\r\n>>> np.random.multinomial(1,[0.5,0.5],np.uint32(1))\r\narray([0, 1, 0])\r\n>>> np.random.multinomial(1,[0.5,0.5],np.uint32(1))\r\n*** glibc detected *** python: free(): invalid next size (fast): 0x0000000001bbfb90 ***\r\n\r\nIt also seems that numpy.random.multinomial behaves incorrectly when the `size` argument is of type `numpy.uint32` - in the above example, each vector is of length 3 whereas the expected behaviour is an array of length 2.\r\n\r\nSome details about the platform:\r\n>>> numpy.__version__\r\n\'1.6.1\'\r\n\r\nlsb_release -a\r\nNo LSB modules are available.\r\nDistributor ID:\tUbuntu\r\nDescription:\tUbuntu 12.04.1 LTS\r\nRelease:\t12.04\r\nCodename:\tprecise\r\n\r\nuname -ar\r\nLinux mlui 3.2.0-38-generic #61-Ubuntu SMP Tue Feb 19 12:18:21 UTC 2013 x86_64 x86_64 x86_64 GNU/Linux\r\n\r\n'"
3171,12514375,goyodiaz,njsmith,2013-03-27 14:34:44,2015-07-11 21:07:28,2015-07-11 21:07:28,closed,,,2,11 - Bug;component: numpy.ma;Easy Fix;priority: normal,https://api.github.com/repos/numpy/numpy/issues/3171,b'ma.polyfit() returns nans when there are masked nans in the input',"b'This used to return (almost) [1., 1.] but returns [nan, nan] in numpy 1.7.\r\n\r\n    import numpy as np\r\n    x = np.ma.array([np.nan, 1., 2.], mask=[True, False, False])\r\n    y = np.ma.array([np.nan, 2., 3.], mask=[True, False, False])\r\n    np.ma.polyfit(x, y, 1)\r\n\r\nChanging the last line of ma.ployfit() this way seems to work for me:\r\n\r\n    return np.polyfit(x.filled(), y.filled(), deg, rcond, full, w, cov)\r\n\r\nBut it does not make much sense to me, to be honest.'"
3126,11730123,mbyt,charris,2013-03-06 20:04:36,2015-06-11 22:09:53,2015-06-11 22:09:53,closed,,,16,11 - Bug;component: numpy.core;priority: normal,https://api.github.com/repos/numpy/numpy/issues/3126,b'Inconsistent array assignment for structured arrays',"b'When assigning arrays inside structured arrays without a left sided `[:]`, only the first element gets actually assigned. This is shown in the following code snippet, where a structured array is initialized with zeros, and then filled by assignment of an array, and the assignment of a structured array. The assignment of the array only assigns the first value, where the assignment of the structured array assigns all values:\r\n```python\r\nIn [2]: np.__version__\r\nOut[2]: \'1.7.0\'\r\nIn [3]: struct_dt = np.dtype([\r\n   ...:     (\'elem\', \'i4\', 5),\r\n   ...: ])\r\nIn [4]: dt = np.dtype([\r\n   ...:     (\'field\', \'i4\', 10),\r\n   ...:     (\'struct\', struct_dt)\r\n   ...: ])\r\nIn [5]: x = np.zeros(1, dt)\r\nIn [6]: x[0][\'field\']  = np.ones(10, dtype=\'i4\')\r\nIn [7]: x[0][\'struct\'] = np.ones(1, dtype=struct_dt)\r\nIn [8]: x\r\nOut[8]: \r\narray([([1, 0, 0, 0, 0, 0, 0, 0, 0, 0], ([1, 1, 1, 1, 1],))], \r\n      dtype=[(\'field\', \'<i4\', (10,)), (\'struct\', [(\'elem\', \'<i4\', (5,))])])\r\n```\r\nThe expected result is that all elements of `x[0][\'field\']` are 1.\r\n\r\nHowever, `x[0][\'field\']` ""recognizes"" some part of the assigned array, as it will complain about broadcasting problems for wrong sizes:\r\n```python\r\nIn [9]: x[0][\'field\'] = np.ones(9, dtype=\'i4\')\r\n---------------------------------------------------------------------------\r\nValueError                                Traceback (most recent call last)\r\n<ipython-input-9-80d7cbce6711> in <module>()\r\n----> 1 x[0][\'field\'] = np.ones(9, dtype=\'i4\')\r\n\r\nValueError: could not broadcast input array from shape (9) into shape (9,10)\r\n```\r\n\r\nAs mentioned in the beginning, adding `[:]` on the left side (In [6]) will correctly set all elements to 1. If the shown assignment is not allowed, I would have expected that an exception gets raised?'"
2972,10774634,gerritholl,charris,2013-02-08 10:41:42,2015-05-02 16:18:44,2015-05-02 16:18:44,closed,,,3,11 - Bug;component: numpy.ma;priority: normal,https://api.github.com/repos/numpy/numpy/issues/2972,b'Accessing fields for a masked structured array fails with ValueError',"b'I\'m trying to create a mask for a structured array. When I try to access a field from the array or simply represent it, numpy throws a `ValueError: field names A not found`, as illustrated below. \r\n\r\n```\r\n>>> R = numpy.empty(10, dtype=[(""A"", ""<f2""), (""B"", ""<f4"")])\r\n>>> Rm = numpy.ma.masked_where(R[""A""]<0.1, R)\r\n>>> Rm[""A""]\r\nTraceback (most recent call last):\r\n  File ""<stdin>"", line 1, in <module>\r\n  File ""/local/gerrit/python3.2-bleed/lib/python3.2/site-packages/numpy/ma/core.py"", line 3014, in __getitem__\r\n    dout._mask = _mask[indx]\r\nValueError: field named A not found.\r\n>>> print(Rm)\r\nTraceback (most recent call last):\r\n  File ""<stdin>"", line 1, in <module>\r\n  File ""/local/gerrit/python3.2-bleed/lib/python3.2/site-packages/numpy/ma/core.py"", line 3583, in __str__\r\n    _recursive_printoption(res, m, f)\r\n  File ""/local/gerrit/python3.2-bleed/lib/python3.2/site-packages/numpy/ma/core.py"", line 2294, in _recursive_printoption\r\n    (curdata, curmask) = (result[name], mask[name])\r\nValueError: field named A not found.\r\n>>> print(numpy.version.version)\r\n1.8.0.dev-b8bfcd0\r\n>>> print(numpy.version.git_revision)\r\nb8bfcd02a2f246a9c23675e1650c3d316d733306\r\n```\r\n\r\nI tested it with the stable version `1.6.2` and the bleeding-edge version obtained directly from `git`.\r\nIt also fails in earlier stable versions (tested with 1.6.2).\r\n\r\nNote: if I instead create directly a masked array with `numpy.ma.empty`, I get a *different* error:\r\n\r\n```\r\n>>> R2 = numpy.ma.empty(10, dtype=[(""A"", ""<f2""), (""B"", ""<f4"")])\r\n>>> Rm2 = numpy.ma.masked_where(R2[""A""]<0.1, R2)\r\nTraceback (most recent call last):\r\n  File ""<stdin>"", line 1, in <module>\r\n  File ""/local/gerrit/python3.2-bleed/lib/python3.2/site-packages/numpy/ma/core.py"", line 1810, in masked_where\r\n    cond = mask_or(cond, a._mask)\r\n  File ""/local/gerrit/python3.2-bleed/lib/python3.2/site-packages/numpy/ma/core.py"", line 1627, in mask_or\r\n    raise ValueError(""Incompatible dtypes \'%s\'<>\'%s\'"" % (dtype1, dtype2))\r\nValueError: Incompatible dtypes \'bool\'<>\'[(\'A\', \'?\'), (\'B\', \'?\')]\r\n```'"
2969,10748975,mrjbq7,njsmith,2013-02-07 18:14:16,2013-03-02 12:30:59,2013-03-02 12:30:59,closed,,1.7 stable backport,21,11 - Bug;priority: normal,https://api.github.com/repos/numpy/numpy/issues/2969,b'1.7 should include this memory leak fix',"b""While investigating a memory leak in scikit-learn (https://github.com/scikit-learn/scikit-learn/issues/1663), I discovered that the memory leak was caused by a bug in ``numpy``.\r\n\r\nThe fix to the memory leak was committed to ``numpy`` in September 2012 (https://github.com/numpy/numpy/commit/80b3a3401382cb3f14c5b76dd90d9f932f50ad15), but isn't in the maintenance/1.7.x branch.\r\n\r\nAre there plans to backport it to 1.7 and make a new release?\r\n\r\nThanks,"""
2917,9996981,llvilanova,charris,2013-01-15 21:51:56,2014-11-30 17:20:53,2014-11-30 17:20:53,closed,,,1,11 - Bug;component: numpy.lib;Easy Fix;priority: normal,https://api.github.com/repos/numpy/numpy/issues/2917,b'`numpy.lib._iotools.StringConverter.upgrade` should have a return value',"b'According to the documentation, routine `upgrade` should return the value of the conversion, but it does not.'"
2912,9921266,callegar,rgommers,2013-01-13 12:29:44,2015-03-25 06:48:29,2015-03-25 06:48:29,closed,,,5,11 - Bug;component: numpy.testing;Easy Fix;priority: normal,https://api.github.com/repos/numpy/numpy/issues/2912,b'numpy.testing.assert_allclose reports wrong mismatch %',"b'numpy.testing.assert_allclose([1,2,3],[1,2.01,3]) returns\r\n\r\nmismatch 100.0%\r\n\r\nnumpy.testing.assert_almost_equal([1,2,3],[1,2.01,3]) correctly returns\r\n\r\nmismatch 33%'"
2877,9604734,Erdaron,charris,2013-01-01 21:05:21,2014-02-25 04:47:55,2014-02-25 04:47:55,closed,,,3,11 - Bug;component: numpy.core;priority: normal,https://api.github.com/repos/numpy/numpy/issues/2877,b'uint64 causing errors when used to address byte position in a large binary file',"b'I am working with large binary files (several gigabytes each), and I need to be able to address specific bytes in those files. So I keep addresses of data within these files using 64-bit integers, specifically numpy types int64 and uint64. However, I noticed that the unsigned version is giving an error:\r\n\r\n>>> ids1 = np.fromfile(\'TR_45_3 ch 0 cluster 1.txt\', dtype = np.uint64, sep = \' \')\r\n>>> ids1[-1]\r\n4999998\r\n>>> tes4530.goto(ids1[-1])\r\n\r\nTraceback (most recent call last):\r\n  File ""<pyshell#55>"", line 1, in <module>\r\n    tes4530.goto(ids1[-1])\r\n  File ""xxx\\tes_utility.py"", line 32, in goto\r\n    self.f.seek(newpos * 2 * self.rec_len)\r\nOverflowError: Python int too large to convert to C long  \r\n\r\nIf record addresses are stored using the signed version (numpy.int64), no such error occurs.\r\n\r\ntes4530 above is an instance of a class I wrote to help accessing these files. Relevant code is reproduced below:\r\n\r\nclass TESstream1:\r\n    #Objects of this class allow loading and searching data from a\r\n    # a binary file containing single-channel data\r\n    def __init__(self, fname, rec_len = 256, outtype = np.float32):\r\n        #rec_len - number of data points per record\r\n        #outtype - number type used in the outputs\r\n        self.records = os.path.getsize(fname) / (2 * rec_len)\r\n        self.f = open(fname, \'rb\')\r\n        self.rec_len = rec_len\r\n        self.fname = fname\r\n        self.outtype = outtype\r\n        self.x = 2 ** 15 #offset to compensate for data being unsigned\r\n    def goto(self, newpos):\r\n        #go to the beginning of the record specified by newpos)\r\n        self.f.seek(newpos * 2 * self.rec_len) \r\n    def read(self, Nrec = 1):\r\n        #returns the next Nrec records\r\n        d = np.fromfile(self.f, dtype = np.uint16, count = Nrec * self.rec_len)\r\n        if self.outtype != np.uint16:\r\n            d = np.array(d, dtype = self.outtype)\r\n        return np.reshape(d, (Nrec, self.rec_len)) - self.x\r\n\r\nIn particular, errors begin to arise when the record address is 4194304 or higher (this translates to byte address 2^31 - 256 data points per record, 2 bytes per data point).\r\n\r\nUsing the signed version (numpy.int64) does not raise any errors, and it appears that the correct records are being addressed (access does not appear to reset to the beginning of file or read random bits, for example).\r\n\r\nI am using Python 2.7.2 64-bit, numpy numpy 1.6.1 64-bit (from Christoph Gohlke\'s repository), running on Windows 7 x64.'"
2860,9548718,amschne,charris,2012-12-28 00:01:16,2014-02-16 03:25:26,2014-02-16 03:25:26,closed,,,17,11 - Bug;component: numpy.linalg;priority: normal,https://api.github.com/repos/numpy/numpy/issues/2860,b'numpy.test() fails for 1.8.0.dev-a8c641f on OS X 10.8.2',"b'On OS X 10.8.2 (Core i7), numpy.test() for numpy 1.8.0.dev-a8c641f fails the following test:\r\n\r\n```\r\nFAIL: Test numpy dot with different order C, F\r\n----------------------------------------------------------------------\r\nTraceback (most recent call last):\r\n  File ""/usr/local/lib/python2.7/site-packages/nose/case.py"", line 197, in runTest\r\n    self.test(*self.arg)\r\n  File ""/usr/local/lib/python2.7/site-packages/numpy/core/tests/test_blasdot.py"", line 119, in test_dot_array_order\r\n    assert_array_equal(a.dot(a_T), a.dot(a.T))\r\n  File ""/usr/local/lib/python2.7/site-packages/numpy/testing/utils.py"", line 719, in assert_array_equal\r\n    verbose=verbose, header=\'Arrays are not equal\')\r\n  File ""/usr/local/lib/python2.7/site-packages/numpy/testing/utils.py"", line 645, in assert_array_compare\r\n    raise AssertionError(msg)\r\nAssertionError: \r\nArrays are not equal\r\n\r\n(mismatch 11.0%)\r\n x: array([[  8.33980975,  -1.73402744,   8.39918067,  -0.92846214,\r\n         -1.42408847,   3.07286699,   2.08420574,  -0.48730198,\r\n          0.1639567 ,  -1.04598212],...\r\n y: array([[  8.33980975,  -1.73402744,   8.39918067,  -0.92846214,\r\n         -1.42408847,   3.07286699,   2.08420574,  -0.48730198,\r\n          0.1639567 ,  -1.04598212],...\r\n\r\n----------------------------------------------------------------------\r\nRan 4801 tests in 18.344s\r\n\r\nFAILED (KNOWNFAIL=5, SKIP=5, failures=1)\r\n<nose.result.TextTestResult run=4801 errors=0 failures=1>\r\n```\r\nHere\'s my compiler info:\r\n```\r\n    build_src\r\n    building py_modules sources\r\n    building library ""npymath"" sources\r\n    customize Gnu95FCompiler\r\n    Found executable /usr/local/bin/gfortran\r\n    customize Gnu95FCompiler\r\n    customize Gnu95FCompiler using config\r\n    C compiler: cc -fno-strict-aliasing -fno-common -dynamic -I/usr/local/include -DNDEBUG -g -O3 -Wall -Wstrict-prototypes\r\n\r\n    compile options: \'-I/private/var/folders/sz/fc0nh0x16fv3ytl31cff6tq80000gn/T/pip-build/numpy-dev/numpy/core/src/private -I/private/var/folders/sz/fc0nh0x16fv3ytl31cff6tq80000gn/T/pip-build/numpy-dev/numpy/core/src -I/private/var/folders/sz/fc0nh0x16fv3ytl31cff6tq80000gn/T/pip-build/numpy-dev/numpy/core -I/private/var/folders/sz/fc0nh0x16fv3ytl31cff6tq80000gn/T/pip-build/numpy-dev/numpy/core/src/npymath -I/private/var/folders/sz/fc0nh0x16fv3ytl31cff6tq80000gn/T/pip-build/numpy-dev/numpy/core/src/multiarray -I/private/var/folders/sz/fc0nh0x16fv3ytl31cff6tq80000gn/T/pip-build/numpy-dev/numpy/core/src/umath -I/private/var/folders/sz/fc0nh0x16fv3ytl31cff6tq80000gn/T/pip-build/numpy-dev/numpy/core/src/npysort -I/private/var/folders/sz/fc0nh0x16fv3ytl31cff6tq80000gn/T/pip-build/numpy-dev/numpy/core/include -I/usr/local/Cellar/python/2.7.3/Frameworks/Python.framework/Versions/2.7/include/python2.7 -c\'\r\n```\r\n```\r\n$ cc --version\r\nApple clang version 4.1 (tags/Apple/clang-421.11.66) (based on LLVM 3.1svn)\r\nTarget: x86_64-apple-darwin12.2.1\r\nThread model: posix\r\n\r\n$ gfortran --version\r\nGNU Fortran (GCC) 4.7.2\r\n\r\n$ python --version\r\nPython 2.7.3\r\n```'"
2807,9209515,abingham,charris,2012-12-12 08:53:20,2014-03-01 16:14:17,2014-03-01 14:04:07,closed,,,0,11 - Bug;component: Documentation;Easy Fix;priority: normal,https://api.github.com/repos/numpy/numpy/issues/2807,"b'Docstring for numpy.load() incorrectly describes ""file-like object"" requirements.'","b'numpy.load() says that the `file` parameter must support seek() and read(). However, in the event that pickle.load() is invoked on the file (i.e. via the _cload() function), the file must also support readline(). According to the pickle documentation (and based on my actual experience), the pickle.load() requirements on the file-like object are:\r\n\r\n  The file-like object must have two methods, a read() method\r\n  that takes an integer argument, and a readline() method that\r\n  requires no arguments.\r\n\r\nSo, it seems that the numpy.load() docstring should be updated to indicate this somehow.'"
2799,9104545,pchanial,charris,2012-12-07 23:17:20,2014-09-03 20:29:09,2014-02-22 15:58:19,closed,,,6,11 - Bug;component: numpy.lib;Easy Fix,https://api.github.com/repos/numpy/numpy/issues/2799,b'Make unique behave like sort when the argument is a list',"b'The sort and unique functions do not handle lists in a consistent manner.\n\n```python\n>>> a = [complex(1,0), complex(1,-1), 1]\n>>> np.sort(a)\narray([ 1.-1.j,  1.+0.j,  1.+0.j]) # OK\n>>> np.sort(np.array(a))\narray([ 1.-1.j,  1.+0.j,  1.+0.j]) # OK\n>>> np.unique(np.array(a))\narray([ 1.-1.j,  1.+0.j ]) # OK\n```\nbut\n```python\n>>> np.unique(a)\nTypeError: no ordering relation is defined for complex numbers\n```\n'"
2757,8556946,charris,charris,2012-11-21 20:15:03,2012-11-25 17:28:16,2012-11-25 17:28:16,closed,,,3,11 - Bug;component: numpy.ma,https://api.github.com/repos/numpy/numpy/issues/2757,b'numpy/ma/tests/test_core.py Heisenbug at line 2731',"b'This is the odd ""invalid value encountered in power"" bug at line 2731 of test_core.py that shows up in the Travis tests now and then. It can be made reproducible by modifying test_varstd_specialcases as follows.\n\n    def test_varstd_specialcases(self):\n        ""Test a special case for var""\n        nout = -np.ones(1, dtype=float)\n        mout = -ones(1, dtype=float)\n\nThis is either a bug in the test, or a bug in the ma var/std method code.'"
2756,8553075,tjligocki,charris,2012-11-21 18:07:49,2012-11-21 19:55:36,2012-11-21 19:55:36,closed,,,4,03 - Development;11 - Bug;component: numpy.core,https://api.github.com/repos/numpy/numpy/issues/2756,"b'array ""reshape"" crashes when size in one dimension is greater than 2^31'","b'I am having a problem with ""reshape"" crashing:\n\n     > python\n     Python 2.6.4 (r264:75706, Jan 16 2010, 21:11:47)\n     [GCC 4.3.2] on linux2\n     Type ""help"", ""copyright"", ""credits"" or ""license"" for more information.\n     >>> import numpy\n     >>> numpy.version.version\n     \'1.6.2\'\n     >>> npData = numpy.ones([701,701,7899],dtype=numpy.dtype(\'b\'))\n     >>> npDataSubset = npData[[slice(0,700),slice(0,700),slice(0,5000)]]\n     >>> npDataOutput = npDataSubset.reshape([700*700*5000],order=\'F\')\n     Segmentation fault\n\nIf I change the ""5000"" to a ""4000"", everything is fine.  I\'m not running out of memory - my system had 48 GB of memory and nothing else is using a significant portion of this memory.\n\nNote:  700x700x4000 = 1,960,000,000 < 2^31 and 700x700x5000 = 2450000000 > 2^31.  I suspect somewhere in the underlying code there is a signed 32-bit integer being used for an index/pointer offset (this is running on a 64-bit machine).\n\nI did some searching of the archives and didn\'t find a match for this problem and posted to the numpy-discussion group.  Francesc Alted suggested I submit a ticket.\n\nThank you for any and all help!'"
2750,8444293,cgohlke,certik,2012-11-17 20:12:00,2013-04-25 17:51:31,2012-12-21 01:03:00,closed,,NumPy 1.7,6,11 - Bug;component: numpy.core;priority: normal,https://api.github.com/repos/numpy/numpy/issues/2750,b'test_unicode fails on Python 3.3',"b'Test_unicode fails with numpy-1.7.0rc1.dev-win*-py3.3 (3a52aa06c5), built with Visual Studio 2010 and Intel MKL 11. All other tests pass.\n\n```\n======================================================================\nFAIL: Check assignment of 0-dimensional objects with values\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File ""X:\\Python33\\lib\\site-packages\\numpy\\core\\tests\\test_unicode.py"", line 209, in test_values0D\n    self.content_check(ua, ua[()], 4*self.ulen)\n  File ""X:\\Python33\\lib\\site-packages\\numpy\\core\\tests\\test_unicode.py"", line 199, in content_check\n    self.assertTrue(buffer_length(ua_scalar) == 2*2*self.ulen)\nAssertionError: False is not true\n\n======================================================================\nFAIL: Check assignment of multi-dimensional objects with values\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File ""X:\\Python33\\lib\\site-packages\\numpy\\core\\tests\\test_unicode.py"", line 223, in test_valuesMD\n    self.content_check(ua, ua[0,0,0], 4*self.ulen*2*3*4)\n  File ""X:\\Python33\\lib\\site-packages\\numpy\\core\\tests\\test_unicode.py"", line 199, in content_check\n    self.assertTrue(buffer_length(ua_scalar) == 2*2*self.ulen)\nAssertionError: False is not true\n\n======================================================================\nFAIL: Check assignment of single-dimensional objects with values\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File ""X:\\Python33\\lib\\site-packages\\numpy\\core\\tests\\test_unicode.py"", line 215, in test_valuesSD\n    self.content_check(ua, ua[0], 4*self.ulen*2)\n  File ""X:\\Python33\\lib\\site-packages\\numpy\\core\\tests\\test_unicode.py"", line 199, in content_check\n    self.assertTrue(buffer_length(ua_scalar) == 2*2*self.ulen)\nAssertionError: False is not true\n\n======================================================================\nFAIL: Check assignment of 0-dimensional objects with values\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File ""X:\\Python33\\lib\\site-packages\\numpy\\core\\tests\\test_unicode.py"", line 209, in test_values0D\n    self.content_check(ua, ua[()], 4*self.ulen)\n  File ""X:\\Python33\\lib\\site-packages\\numpy\\core\\tests\\test_unicode.py"", line 199, in content_check\n    self.assertTrue(buffer_length(ua_scalar) == 2*2*self.ulen)\nAssertionError: False is not true\n\n======================================================================\nFAIL: Check assignment of multi-dimensional objects with values\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File ""X:\\Python33\\lib\\site-packages\\numpy\\core\\tests\\test_unicode.py"", line 223, in test_valuesMD\n    self.content_check(ua, ua[0,0,0], 4*self.ulen*2*3*4)\n  File ""X:\\Python33\\lib\\site-packages\\numpy\\core\\tests\\test_unicode.py"", line 199, in content_check\n    self.assertTrue(buffer_length(ua_scalar) == 2*2*self.ulen)\nAssertionError: False is not true\n\n======================================================================\nFAIL: Check assignment of single-dimensional objects with values\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File ""X:\\Python33\\lib\\site-packages\\numpy\\core\\tests\\test_unicode.py"", line 215, in test_valuesSD\n    self.content_check(ua, ua[0], 4*self.ulen*2)\n  File ""X:\\Python33\\lib\\site-packages\\numpy\\core\\tests\\test_unicode.py"", line 199, in content_check\n    self.assertTrue(buffer_length(ua_scalar) == 2*2*self.ulen)\nAssertionError: False is not true\n\n======================================================================\nFAIL: Check assignment of 0-dimensional objects with values\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File ""X:\\Python33\\lib\\site-packages\\numpy\\core\\tests\\test_unicode.py"", line 209, in test_values0D\n    self.content_check(ua, ua[()], 4*self.ulen)\n  File ""X:\\Python33\\lib\\site-packages\\numpy\\core\\tests\\test_unicode.py"", line 199, in content_check\n    self.assertTrue(buffer_length(ua_scalar) == 2*2*self.ulen)\nAssertionError: False is not true\n\n======================================================================\nFAIL: Check assignment of multi-dimensional objects with values\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File ""X:\\Python33\\lib\\site-packages\\numpy\\core\\tests\\test_unicode.py"", line 223, in test_valuesMD\n    self.content_check(ua, ua[0,0,0], 4*self.ulen*2*3*4)\n  File ""X:\\Python33\\lib\\site-packages\\numpy\\core\\tests\\test_unicode.py"", line 199, in content_check\n    self.assertTrue(buffer_length(ua_scalar) == 2*2*self.ulen)\nAssertionError: False is not true\n\n======================================================================\nFAIL: Check assignment of single-dimensional objects with values\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File ""X:\\Python33\\lib\\site-packages\\numpy\\core\\tests\\test_unicode.py"", line 215, in test_valuesSD\n    self.content_check(ua, ua[0], 4*self.ulen*2)\n  File ""X:\\Python33\\lib\\site-packages\\numpy\\core\\tests\\test_unicode.py"", line 199, in content_check\n    self.assertTrue(buffer_length(ua_scalar) == 2*2*self.ulen)\nAssertionError: False is not true\n\n======================================================================\nFAIL: Check creation of 0-dimensional objects with values\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File ""X:\\Python33\\lib\\site-packages\\numpy\\core\\tests\\test_unicode.py"", line 123, in test_values0D\n    self.content_check(ua, ua[()], 4*self.ulen)\n  File ""X:\\Python33\\lib\\site-packages\\numpy\\core\\tests\\test_unicode.py"", line 114, in content_check\n    self.assertTrue(buffer_length(ua_scalar) == 2*2*self.ulen)\nAssertionError: False is not true\n\n======================================================================\nFAIL: Check creation of multi-dimensional objects with values\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File ""X:\\Python33\\lib\\site-packages\\numpy\\core\\tests\\test_unicode.py"", line 134, in test_valuesMD\n    self.content_check(ua, ua[0,0,0], 4*self.ulen*2*3*4)\n  File ""X:\\Python33\\lib\\site-packages\\numpy\\core\\tests\\test_unicode.py"", line 114, in content_check\n    self.assertTrue(buffer_length(ua_scalar) == 2*2*self.ulen)\nAssertionError: False is not true\n\n======================================================================\nFAIL: Check creation of single-dimensional objects with values\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File ""X:\\Python33\\lib\\site-packages\\numpy\\core\\tests\\test_unicode.py"", line 128, in test_valuesSD\n    self.content_check(ua, ua[0], 4*self.ulen*2)\n  File ""X:\\Python33\\lib\\site-packages\\numpy\\core\\tests\\test_unicode.py"", line 114, in content_check\n    self.assertTrue(buffer_length(ua_scalar) == 2*2*self.ulen)\nAssertionError: False is not true\n\n======================================================================\nFAIL: Check creation of 0-dimensional objects with values\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File ""X:\\Python33\\lib\\site-packages\\numpy\\core\\tests\\test_unicode.py"", line 123, in test_values0D\n    self.content_check(ua, ua[()], 4*self.ulen)\n  File ""X:\\Python33\\lib\\site-packages\\numpy\\core\\tests\\test_unicode.py"", line 114, in content_check\n    self.assertTrue(buffer_length(ua_scalar) == 2*2*self.ulen)\nAssertionError: False is not true\n\n======================================================================\nFAIL: Check creation of multi-dimensional objects with values\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File ""X:\\Python33\\lib\\site-packages\\numpy\\core\\tests\\test_unicode.py"", line 134, in test_valuesMD\n    self.content_check(ua, ua[0,0,0], 4*self.ulen*2*3*4)\n  File ""X:\\Python33\\lib\\site-packages\\numpy\\core\\tests\\test_unicode.py"", line 114, in content_check\n    self.assertTrue(buffer_length(ua_scalar) == 2*2*self.ulen)\nAssertionError: False is not true\n\n======================================================================\nFAIL: Check creation of single-dimensional objects with values\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File ""X:\\Python33\\lib\\site-packages\\numpy\\core\\tests\\test_unicode.py"", line 128, in test_valuesSD\n    self.content_check(ua, ua[0], 4*self.ulen*2)\n  File ""X:\\Python33\\lib\\site-packages\\numpy\\core\\tests\\test_unicode.py"", line 114, in content_check\n    self.assertTrue(buffer_length(ua_scalar) == 2*2*self.ulen)\nAssertionError: False is not true\n\n======================================================================\nFAIL: Check creation of 0-dimensional objects with values\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File ""X:\\Python33\\lib\\site-packages\\numpy\\core\\tests\\test_unicode.py"", line 123, in test_values0D\n    self.content_check(ua, ua[()], 4*self.ulen)\n  File ""X:\\Python33\\lib\\site-packages\\numpy\\core\\tests\\test_unicode.py"", line 114, in content_check\n    self.assertTrue(buffer_length(ua_scalar) == 2*2*self.ulen)\nAssertionError: False is not true\n\n======================================================================\nFAIL: Check creation of multi-dimensional objects with values\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File ""X:\\Python33\\lib\\site-packages\\numpy\\core\\tests\\test_unicode.py"", line 134, in test_valuesMD\n    self.content_check(ua, ua[0,0,0], 4*self.ulen*2*3*4)\n  File ""X:\\Python33\\lib\\site-packages\\numpy\\core\\tests\\test_unicode.py"", line 114, in content_check\n    self.assertTrue(buffer_length(ua_scalar) == 2*2*self.ulen)\nAssertionError: False is not true\n\n======================================================================\nFAIL: Check creation of single-dimensional objects with values\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File ""X:\\Python33\\lib\\site-packages\\numpy\\core\\tests\\test_unicode.py"", line 128, in test_valuesSD\n    self.content_check(ua, ua[0], 4*self.ulen*2)\n  File ""X:\\Python33\\lib\\site-packages\\numpy\\core\\tests\\test_unicode.py"", line 114, in content_check\n    self.assertTrue(buffer_length(ua_scalar) == 2*2*self.ulen)\nAssertionError: False is not true\n```'"
2690,7731864,numpy-gitbot,pv,2012-10-19 22:36:00,2012-10-20 00:21:58,2012-10-20 00:21:58,closed,,,3,11 - Bug;component: Other;priority: highest,https://api.github.com/repos/numpy/numpy/issues/2690,b'Online NumPy documentation is missing parts. (Trac #2099)',"b""_Original ticket http://projects.scipy.org/numpy/ticket/2099 on 2012-04-05 by trac user ewtoombs, assigned to unknown._\n\nDocumentation is missing in the current *default* version:\nhttp://docs.scipy.org/doc/numpy/reference/routines.array-manipulation.html\nthat is present in an older version:\nhttp://docs.scipy.org/doc/numpy-1.6.0/reference/routines.array-manipulation.html\n\nI don't know how that could possibly have happened, but this is pretty serious and it should be fixed."""
2689,7731863,numpy-gitbot,njsmith,2012-10-19 22:35:59,2013-09-15 18:21:41,2013-09-15 18:21:41,closed,,,2,11 - Bug;component: Documentation;priority: normal,https://api.github.com/repos/numpy/numpy/issues/2689,"b""Documentation of numpy.histogram2d() doesn't state x and y need the same size (Trac #2098)""","b'_Original ticket http://projects.scipy.org/numpy/ticket/2098 on 2012-04-05 by trac user Sven Marnach, assigned to @pv._\n\nThe documentation describes the parameters as\n\n\n    x : array_like, shape(N,)\n    y : array_like, shape(M,)\n\n\nThis gives the impression that `x` and `y` may have different shapes and left me confused as to what this function actually does.  If I pass two arrays of different sizes, I get the even more confusing error message\n\n\n    ValueError: setting an array element with a sequence.\n\n\nThe documentation should probably state that the values from `x` and `y` are paired, so in contrast to an 1D histogram, the order of the entries in `x` and `y` matter, at least relative to each other.'"
2688,7731862,numpy-gitbot,numpy-gitbot,2012-10-19 22:35:55,2012-10-19 22:35:58,2012-10-19 22:35:58,closed,,NumPy 1.7,10,11 - Bug;component: numpy.core;priority: normal,https://api.github.com/repos/numpy/numpy/issues/2688,b'searchsorted(sorter=) test error (Trac #2097)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/2097 on 2012-04-04 by @rgommers, assigned to @charris._\n\nThe new sorter keyword for searchsorted added in [313fe460](http://github.com/numpy/numpy/commit/313fe460) has a problem:\n\n\n    ======================================================================\n    ERROR: test_searchsorted_with_sorter (test_multiarray.TestMethods)\n    ----------------------------------------------------------------------\n    Traceback (most recent call last):\n      File ""/Users/rgommers/Code/numpy/numpy/core/tests/test_multiarray.py"", line 763, in test_searchsorted_with_sorter\n        assert_equal(b.searchsorted(k), a.searchsorted(k, sorter=s))\n    ValueError: sorter elements must be non-negative\n    \n    ----------------------------------------------------------------------\n\n\nI checked that s doesn\'t contain non-negative values; something goes wrong in the error checking.'"
2687,7731860,numpy-gitbot,charris,2012-10-19 22:35:54,2013-08-30 03:56:39,2013-08-30 03:56:39,closed,,,4,11 - Bug;component: numpy.core;priority: normal,https://api.github.com/repos/numpy/numpy/issues/2687,"b'ndarray.dot rejects ""out"" argument (Trac #2096)'","b'_Original ticket http://projects.scipy.org/numpy/ticket/2096 on 2012-04-02 by trac user JLull, assigned to unknown._\n\nTesting with python 2.7.2, Pywin32 build 217, and numpy-1.6.1-win32-superpack-python2.7.exe, any call to ndarray.dot() with an ""out"" argument fails:\n\n>>> import numpy\n>>> numpy.version.version\n\'1.6.1\'\n>>> a=numpy.array(((1,2),(3,4)))\n>>> b=numpy.array((5,6))\n>>> c=numpy.array((7,8))\n>>> a.dot(b)\narray([17, 39])\n>>> a.dot(b,c)\nTraceback (most recent call last):\n  File ""<interactive input>"", line 1, in <module>\nTypeError: function takes exactly 1 argument (2 given)\n>>> a.dot(b,out=c)\nTraceback (most recent call last):\n  File ""<interactive input>"", line 1, in <module>\nTypeError: dot() takes no keyword arguments\n\nSimilar calls to numpy.dot() succeed:\n\n>>> numpy.dot(a,b,c)\narray([17, 39])\n>>> numpy.dot(a,b,out=c)\narray([17, 39])\n\nSimilar calls to matrix.dot() with an ""out"" argument also fail (not shown)'"
2686,7731858,numpy-gitbot,seberg,2012-10-19 22:35:52,2014-02-15 01:49:31,2013-12-05 09:52:30,closed,,,2,11 - Bug;component: numpy.core;priority: normal,https://api.github.com/repos/numpy/numpy/issues/2686,b'np.array_equal does not works for string arrays (Trac #2095)',"b""_Original ticket http://projects.scipy.org/numpy/ticket/2095 on 2012-03-30 by trac user shima__shima, assigned to unknown._\n\nif dtype of arrays are string, such as '|S10', np.array_equal does not work.\nThis function is implemented as follows:\nnumpy/core/numeric.py, line 1966\nreturn bool(logical_and.reduce(equal(a1,a2).ravel()))\n\nHowever, np.equal is not implemented for strings. This issue can be avoided by replacing this line by\nreturn bool(logical_and.reduce((a1 == a2).ravel()))\n\nThe same issue occurs in array_equiv at line 2008.\n\n"""
2685,7731857,numpy-gitbot,certik,2012-10-19 22:35:50,2013-02-06 19:52:39,2013-02-06 19:52:39,closed,,NumPy 1.7,6,11 - Bug;component: Other;priority: normal,https://api.github.com/repos/numpy/numpy/issues/2685,b'Casting rule change since 1.6.1 (Trac #2093)',"b""_Original ticket http://projects.scipy.org/numpy/ticket/2093 on 2012-03-28 by @matthew-brett, assigned to unknown._\n\nThis, in numpy 1.6.1:\n\nIn [2]: (np.zeros((2,), dtype=np.uint8) + np.int16(257)).dtype\nOut[2]: dtype('int16')\n\nchanged to this in current trunk:\n\nIn [2]: (np.zeros((2,), dtype=np.uint8) + np.int16(257)).dtype\nOut[2]: dtype('uint16')\n\nwhich is different still in previous versions of numpy (e.g. 1.4.1):\n\nIn [2]: (np.zeros((2,), dtype=np.uint8) + np.int16(257)).dtype\nOut[2]: dtype('uint8')\n\n(see below for more versions)\n\nMy impression had been that the plan was to avoid changes in the\ncasting rules if possible.\n\nI assume this change was not intentional? \n\nTesting with this script:\n\n\n\n    import numpy as np\n    \n    Adata = np.zeros((2,), dtype=np.uint8)\n    Bdata = np.zeros((2,), dtype=np.int16)\n    Bzero = np.int16(0)\n    Bbig = np.int16(256)\n    \n    print np.__version__\n    print 'Array add', (Adata + Bdata).dtype\n    print 'Scalar 0 add', (Adata + Bzero).dtype\n    print 'Scalar 256 add', (Adata + Bbig).dtype\n\n\n\nGives the following output:\n\n\n\n    1.4.1\n    Array add int16\n    Scalar 0 add uint8\n    Scalar 256 add uint8\n    \n    1.5.1\n    Array add int16\n    Scalar 0 add uint8\n    Scalar 256 add uint8\n    \n    1.6.1\n    Array add int16\n    Scalar 0 add uint8\n    Scalar 256 add int16\n    \n    1.7.0.dev-aae5b0a\n    Array add int16\n    Scalar 0 add uint8\n    Scalar 256 add uint16\n\n"""
2684,7731856,numpy-gitbot,charris,2012-10-19 22:35:49,2013-06-15 16:58:56,2013-06-15 16:58:56,closed,,,1,11 - Bug;component: numpy.ma;priority: high,https://api.github.com/repos/numpy/numpy/issues/2684,b'numpy.ma.average casts complex to float under certain conditions (Trac #2092)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/2092 on 2012-03-27 by trac user wucknitz, assigned to @pierregm._\n\nHi,\n\nwhen calling numpy.ma.average with a complex array, with weights and an argument for ""axis"", the complex number is reduced to real.\nSee attached test script and the output here:\n\n\n\n    numpy version 1.3.0\n    with mask, no axis and with axis:\n    (2+3j)\n    2.0\n    without mask, no axis and with axis:\n    (2+2j)\n    (2+2j)\n\n\n\nVersion 1.6.1 still has the problem, even though (under python 2.7) it at leasts complains about discarding an imaginary part.\n\nIt is easy to track the bug down in numpy/ma/extras.py, where the type is sometimes cast to float. For me it does the trick to add the following lines:\n\n\n\n    # use type complex if necessary\n    if np.iscomplexobj (a):\n        type= complex\n    else:\n        type= float\n\n\n\nAnd then use ""type"" instead of ""float"" in all lines with ""n = ..."" that now use float explicitly.\n\nThere may be better ways to fix the problem.\n\n\nCheers,\nOlaf\n'"
2683,7731855,numpy-gitbot,cournape,2012-10-19 22:35:47,2013-01-21 18:44:31,2013-01-21 18:44:31,closed,,,1,11 - Bug;component: numpy.linalg;priority: normal,https://api.github.com/repos/numpy/numpy/issues/2683,b'Problem on OSX 10.7 with lapack_lite functions and multiprocessing (Trac #2091)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/2091 on 2012-03-26 by trac user dougal, assigned to @pv._\n\nThe following code segfaults for me on OSX 10.7.3.\n\n\n\n    from __future__ import print_function\n    \n    import numpy as np\n    import multiprocessing as mp\n    import scipy.linalg\n    \n    def f(a):\n        print(""about to call"")\n    \n        ### these all cause crashes\n        sign, x = np.linalg.slogdet(a)\n        #x = np.linalg.det(a)\n        #x = np.linalg.inv(a).sum()\n    \n        ### these are all fine\n        #x = scipy.linalg.expm3(a).sum()\n        #x = np.dot(a, a.T).sum()\n    \n        print(""result:"", x)\n        return x\n    \n    def call_proc(a):\n        print(""\\ncalling with multiprocessing"")\n        p = mp.Process(target=f, args=(a,))\n        p.start()\n        p.join()\n    \n    \n    if __name__ == \'__main__\':\n        import sys\n        n = int(sys.argv[1]) if len(sys.argv) > 1 else 50\n    \n        a = np.random.normal(0, 2, (n, n))\n        f(a)\n    \n        call_proc(a)\n\n\n\nThis code causes a segfault (trying to access e.g. `0x0000000000000108`); when I do a core dump, the backtrace is:\n\n\n\n    #0  0x00007fff8832c324 in dispatch_group_async_f ()\n    #1  0x00007fff8b2fed3e in dgetrf_ ()\n    #2  0x000000010ac0c26a in initlapack_lite ()\n    #3  0x000000010a5a8d77 in PyEval_EvalFrameEx ()\n    #4  0x000000010a5abdf7 in PyEval_EvalCode ()\n    #5  0x000000010a5a8e0a in PyEval_EvalFrameEx ()\n    #6  0x000000010a5abcd8 in PyEval_EvalCodeEx ()\n    #7  0x000000010a549abf in PyClassMethod_New ()\n    #8  0x000000010a528d32 in PyObject_Call ()\n    #9  0x000000010a5a95ec in PyEval_EvalFrameEx ()\n    #10 0x000000010a5abdf7 in PyEval_EvalCode ()\n    #11 0x000000010a5a8e0a in PyEval_EvalFrameEx ()\n    #12 0x000000010a5abdf7 in PyEval_EvalCode ()\n    #13 0x000000010a5a8e0a in PyEval_EvalFrameEx ()\n    #14 0x000000010a5abcd8 in PyEval_EvalCodeEx ()\n    #15 0x000000010a549abf in PyClassMethod_New ()\n    #16 0x000000010a528d32 in PyObject_Call ()\n    #17 0x000000010a5376e9 in PyInstance_New ()\n    #18 0x000000010a528d32 in PyObject_Call ()\n    #19 0x000000010a573484 in _PyObject_SlotCompare ()\n    #20 0x000000010a56db7a in PyType_Modified ()\n    #21 0x000000010a528d32 in PyObject_Call ()\n    #22 0x000000010a5a8f63 in PyEval_EvalFrameEx ()\n    #23 0x000000010a5abdf7 in PyEval_EvalCode ()\n    #24 0x000000010a5a8e0a in PyEval_EvalFrameEx ()\n    #25 0x000000010a5abcd8 in PyEval_EvalCodeEx ()\n    #26 0x000000010a5abe6c in PyEval_EvalCode ()\n    #27 0x000000010a5a8e0a in PyEval_EvalFrameEx ()\n    #28 0x000000010a5abcd8 in PyEval_EvalCodeEx ()\n    #29 0x000000010a5abd4d in PyEval_EvalCode ()\n    #30 0x000000010a5c308f in Py_CompileString ()\n    #31 0x000000010a5c314f in PyRun_FileExFlags ()\n    #32 0x000000010a5c42a2 in PyRun_SimpleFileExFlags ()\n    #33 0x000000010a5d42af in Py_Main ()\n    #34 0x000000010a519e88 in ?? ()\n\n\n\nSo it seems like the Apple Grand Central Dispatch stuff isn\'t playing nice with multiprocessing in this case.\n\nIf it\'s helpful, the full OSX ""problem report"" is [https://gist.github.com/2209271 here].\n\nThis happens when `f()` calls any of the `numpy.linalg` functions there, but not for the matrix multiplication or the `scipy.linalg.expm3` call (which doesn\'t call anything from lapack_lite; if I use one of the other `scipy.linalg` functions that do call e.g. `solve`, then it also segfaults).\n\nIf I comment out the call to `f` from the main process, it runs fine.\n\nThis happens for `n >= 33`; for `n <= 32`, it\'s fine. Note that 32*32=1024, which seems like a reasonable cutoff point for when Accelerate would start parallelizing.\n\nOf course, it doesn\'t matter if the original `f` call is on the same matrix (it\'s being pickled, after all) -- as long as it\'s also big. Calls with one big, one small matrix or two small matrices (defining ""small"" as ""n x n for n <= 32"") run fine. It can also be a different function, e.g. first `np.linalg.inv` and then call out to another process for `np.linalg.slogdet`.\n\n\nThis happens for me on my OSX 10.7.3 desktop with\n\n * python 2.6.7, numpy 1.5.1\n * python 2.7.1, numpy 1.5.1, scipy 0.10.0\n * python 3.2.2, numpy 1.6.1, scipy 0.10.1\n\nThe 2.6 and 2.7 are I think the default system installs; I installed the 3.2 versions manually from the source tarballs. All of those numpys are linked to the system Accelerate framework:\n\n\n\n    $ otool -L `python3.2 -c \'from numpy.core import _dotblas; print(_dotblas.__file__)\'`\n    /Library/Frameworks/Python.framework/Versions/3.2/lib/python3.2/site-packages/numpy/core/_dotblas.so:\n        /System/Library/Frameworks/Accelerate.framework/Versions/A/Accelerate (compatibility version 1.0.0, current version 4.0.0)\n        /usr/lib/libSystem.B.dylib (compatibility version 1.0.0, current version 125.2.1)\n\n\nI get the same behavior on another Mac with a similar setup.\n\nBut all of the options for `f` work on other machines running\n\n * OSX 10.6.8 with Python 2.6.1 and numpy 1.2.1 linked to Accelerate 4 and vecLib 268 (except that it doesn\'t have scipy or slogdet)\n * Debian 6 with Python 3.2.2, numpy 1.6.1, and scipy 0.10.1 linked to the system ATLAS\n * Ubuntu 11.04 with Python 2.7.1, numpy 1.5.1 and scipy 0.8.0 linked to system ATLAS\n\nSo, I\'m not 100% sure this counts as a numpy bug, rather than one in multiprocessing or Accelerate; if you think I should just report it to one of them, let me know.\n\nAny workarounds would also be appreciated, as this is currently making my life harder. :)'"
2681,7731852,numpy-gitbot,pv,2012-10-19 22:35:45,2014-02-21 15:14:48,2014-02-21 15:14:48,closed,,,2,11 - Bug;component: numpy.core;priority: high,https://api.github.com/repos/numpy/numpy/issues/2681,b'Wrong method resolution for `multiply` & other arithmetic ufuncs (Trac #2089)',"b""_Original ticket http://projects.scipy.org/numpy/ticket/2089 on 2012-03-22 by @pv, assigned to unknown._\n\n`multiply` and the other arithmetic ufuncs fall back to `PyNumber_*` methods before trying `obj.<ufunc_name>` methods.\n\nThis is problematic for sparse matrices and matrices:\n\n\n    import numpy as np\n    import scipy.sparse as sp\n    A = sp.rand(20,20,density=0.1)\n    B = sp.rand(20,20,density=0.1)\n    print (np.multiply(A,B) - A.dot(B)).todense().max()\n    # out: 0.0\n\n\nSo, `multiply` actually calls the matrix multiply.\n\nThe reason seems to be that in `numpy/core/code_generators/generate_umath.py` for these ufuncs the resolution ends with:\n\n\n            TD(O, f='PyNumber_Multiply'),\n\n\nwhich ends up calling `__mul__`. The fix could be to change this to\n\n\n            TD(O, f='NPy_ElementwiseMultiply'),\n\n\nwhich would try to call `multiply` before falling back to `PyNumber_*`.\n"""
2680,7731850,numpy-gitbot,charris,2012-10-19 22:35:43,2014-02-21 14:49:15,2014-02-21 14:49:15,closed,,,1,11 - Bug;component: Other;priority: normal,https://api.github.com/repos/numpy/numpy/issues/2680,b'cov() fails for complex input (Trac #2088)',"b""_Original ticket http://projects.scipy.org/numpy/ticket/2088 on 2012-03-21 by trac user shoyer, assigned to unknown._\n\nThe cov() function in lib/function_base.py casts all input to 'float' and hence fails on complex inputs. Note that the code already includes the appropriate .conj() to handle complex inputs properly [1], so it only fails on complex inputs because of the type casting. This should be an easy fix.\n\n[1] http://en.wikipedia.org/wiki/Covariance_matrix#Complex_random_vectors"""
2679,7731849,numpy-gitbot,charris,2012-10-19 22:35:42,2012-10-20 00:40:13,2012-10-20 00:40:13,closed,,,1,11 - Bug;component: numpy.matrixlib;priority: normal,https://api.github.com/repos/numpy/numpy/issues/2679,"b'In-place math functions like exp(A, out=A) giving wrong results with integer arguments (Trac #2087)'","b""_Original ticket http://projects.scipy.org/numpy/ticket/2087 on 2012-03-20 by trac user chris, assigned to unknown._\n\nGiven an input matrix A with dtype 'int64', a mathematical function\nlike exp incorrectly keeps the type of A as an integer type producing\na wrong result if used as an in-place operation\nnumpy.exp(A, out=A)\n\nThe other version utilising a new result matrix works correctly:\nA = numpy.exp(A)\n\nTested on MacPort (Mac OS X 10.6.8), Python 2.7.2 and Python 3.2.2.\n\nExample:\n\n\n\n    A = numpy.array([[1, 0],[0,1]])\n    A.dtype\n    ->dtype('int64')\n    numpy.exp(A)\n    ->array([[ 2.71828183,  1.        ],\n    ->          [ 1.        ,          2.71828183]]) # correct result\n    \n    A = numpy.array([[1, 0],[0,1]])\n    numpy.exp(A, out=A)\n    ->array([[2, 1],\n    ->         [1, 2]]) # wrong result\n    A.dtype\n    -> dtype('int64')\n    A == numpy.array([[2, 1],[1,2]])\n    -> array([[ True,  True],\n    ->          [ True,  True]], dtype=bool)\n\n"""
2678,7731848,numpy-gitbot,numpy-gitbot,2012-10-19 22:35:40,2012-10-19 22:35:41,2012-10-19 22:35:41,closed,,NumPy 1.7,2,11 - Bug;component: numpy.core;priority: normal,https://api.github.com/repos/numpy/numpy/issues/2678,"b'dtype constructor ignores byte order for datetime, timedelta (Trac #2086)'","b""_Original ticket http://projects.scipy.org/numpy/ticket/2086 on 2012-03-19 by @charris, assigned to unknown._\n\nOn Intel (little endian):\n\n\n\n\n    In [1]: dtype('>M8[s]')\n    Out[1]: dtype('<M8[s]')\n    \n    In [2]: dtype('>m8[s]')\n    Out[2]: dtype('<m8[s]')\n    \n\n\n"""
2677,7731846,numpy-gitbot,numpy-gitbot,2012-10-19 22:35:37,2012-10-23 02:46:38,2012-10-19 22:35:39,closed,,,2,11 - Bug;component: Other;priority: normal,https://api.github.com/repos/numpy/numpy/issues/2677,b'Testsuite fails with Python 2.7.3rc1 and 3.2.3rc1 (Debian) (Trac #2085)',"b""_Original ticket http://projects.scipy.org/numpy/ticket/2085 on 2012-03-19 by @sandrotosi, assigned to unknown._\n\nHello,\nrunning numpy test suite with python versions 2.7.3rc1 and 3.2.3rc1 (as available in Debian), returns this errors:\n\n2.7.3rc1\n\n\n\n    Running unit tests for numpy\n    NumPy version 1.6.1\n    NumPy is installed in /build/buildd-python-numpy_1.6.1-6-i386-lYkcLV/python-numpy-1.6.1/debian/tmp/usr/lib/python2.7/dist-packages/numpy\n    Python version 2.7.3rc1 (default, Mar 10 2012, 00:01:06) [GCC 4.6.3]\n    nose version 1.1.2\n    .........................Debug memory block at address p=0xaa13400: API 'm'\n        8 bytes originally requested\n        The 3 pad bytes at p-3 are FORBIDDENBYTE, as expected.\n        The 4 pad bytes at tail=0xaa13408 are FORBIDDENBYTE, as expected.\n        The block was made by call #1026630 to debug malloc/realloc.\n        Data at p: a3 03 00 00 00 00 00 00\n    Fatal Python error: bad ID: Allocated using API 'm', verified using API 'o'\n\n\n\n3.2.3rc1\n\n\n\n    Running unit tests for numpy\n    NumPy version 1.6.1\n    NumPy is installed in /build/buildd-python-numpy_1.6.1-6-i386-lYkcLV/python-numpy-1.6.1/debian/tmp/usr/lib/python3/dist-packages/numpy\n    Python version 3.2.3rc1 (default, Mar  9 2012, 20:32:02) [GCC 4.6.3]\n    nose version 1.1.2\n    /usr/lib/python3/dist-packages/nose/core.py:247: ResourceWarning: unclosed file <_io.TextIOWrapper name='/usr/lib/python3/dist-packages/nose/usage.txt' mode='r' encoding='ANSI_X3.4-1968'>\n      os.path.dirname(__file__), 'usage.txt'), 'r').read()\n    .........................Debug memory block at address p=0xa625310: API 'm'\n        8 bytes originally requested\n        The 3 pad bytes at p-3 are FORBIDDENBYTE, as expected.\n        The 4 pad bytes at tail=0xa625318 are FORBIDDENBYTE, as expected.\n        The block was made by call #1475913 to debug malloc/realloc.\n        Data at p: a3 03 00 00 00 00 00 00\n    Fatal Python error: bad ID: Allocated using API 'm', verified using API 'o'\n    Aborted\n\n\n\nIt might be something related to newer CPython versions, given testsuite executed on 2.6.7 works fine, but I'm asking you first, just to be sure.\n\nRegards,\nSandro"""
2676,7731842,numpy-gitbot,charris,2012-10-19 22:35:35,2016-01-06 19:16:23,2016-01-06 19:16:23,closed,,,6,11 - Bug;component: numpy.core;priority: normal,https://api.github.com/repos/numpy/numpy/issues/2676,b'Issue with concatenating structured arrays (segmentation fault) (Trac #2084)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/2084 on 2012-03-19 by @astrofrog, assigned to unknown._\n\nThe following demonstrates the issue - even though Numpy knows how to concatenate the fields of a structured array, it crashes if one tries to concatenate the structured arrays themselves:\n\n\n\n    \n    In [1]: import numpy as np\n    \n    In [2]: d1 = np.array(zip([\'a\',\'b\',\'c\']), dtype=[(\'b\', \'|S1\')])\n    \n    In [3]: d2 = np.array(zip([\'aa\',\'bb\',\'cc\']), dtype=[(\'b\', \'|S2\')])\n    \n    In [4]: np.hstack([d1[\'b\'],d2[\'b\']])\n    Out[4]: \n    array([\'a\', \'b\', \'c\', \'aa\', \'bb\', \'cc\'], \n          dtype=\'|S2\')\n    \n    In [5]: np.hstack([d1, d2])\n    ---------------------------------------------------------------------------\n    TypeError                                 Traceback (most recent call last)\n    /Users/tom/<ipython-input-5-bd5cc420043d> in <module>()\n    ----> 1 np.hstack([d1, d2])\n    \n    /opt/local/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/numpy/core/shape_base.pyc in hstack(tup)\n        268 \n        269     """"""\n    --> 270     return _nx.concatenate(map(atleast_1d,tup),1)\n        271 \n    \n    TypeError: invalid type promotion\n\n\n\nA similar issue occurs with floating-point values of different endian-ness:\n\n\n\n    In [1]: import numpy as np\n    \n    In [2]: d1 = np.array(zip([1,2,3]), dtype=[(\'a\', \'<f4\')])\n    \n    In [3]: d2 = np.array(zip([1,2,3]), dtype=[(\'a\', \'>f4\')])\n    \n    In [4]: np.hstack([d1[\'a\'],d2[\'a\']])\n    Out[4]: array([ 1.,  2.,  3.,  1.,  2.,  3.], dtype=float32)\n    \n    In [5]: np.hstack([d1, d2])\n    ---------------------------------------------------------------------------\n    TypeError                                 Traceback (most recent call last)\n    /Users/tom/<ipython-input-5-bd5cc420043d> in <module>()\n    ----> 1 np.hstack([d1, d2])\n    \n    /Users/tom/Library/Python/2.7/lib/python/site-packages/numpy/core/shape_base.pyc in hstack(tup)\n        271     # As a special case, dimension 0 of 1-dimensional arrays is ""horizontal""\n        272     if arrs[0].ndim == 1:\n    --> 273         return _nx.concatenate(arrs, 0)\n        274     else:\n        275         return _nx.concatenate(arrs, 1)\n    \n    TypeError: invalid type promotion\n\n\n\nIn some cases, this can even cause segmentation faults, though I have yet to find a way to reproduce this consistently.'"
2675,7731839,numpy-gitbot,seberg,2012-10-19 22:35:34,2013-12-05 09:55:45,2013-12-05 09:55:45,closed,,,4,11 - Bug;component: Other;priority: normal,https://api.github.com/repos/numpy/numpy/issues/2675,b'numpy installation problem (Trac #2083)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/2083 on 2012-03-16 by trac user joujisan, assigned to unknown._\n\nNumpy version: 1.6.1\nOS: Windows 7 x64 and python 3.2\nError Message: Python 2.6 is required, which was not found in the registry\n\nSolution proposed at http://tech.valgog.com/2010/01/after-installing-64-bit-windows-7-at.html :\nThe problem is the pywin32 is a 32 bit installer, it will look for the Python reg entries in the Wow6432Node, the following .reg file will add the entries, ensure the paths are correct for your install.\n\n[HKEY_LOCAL_MACHINE\\SOFTWARE\\Wow6432Node\\Python\\PythonCore\\3.2\\InstallPath]\n@=""C:\\\\Python32\\\\""\n\n[HKEY_LOCAL_MACHINE\\SOFTWARE\\Wow6432Node\\Python\\PythonCore\\3.2\\InstallPath\\InstallGroup]\n@=""Python 3.2""\n\n[HKEY_LOCAL_MACHINE\\SOFTWARE\\Wow6432Node\\Python\\PythonCore\\3.2\\Modules]\n\n[HKEY_LOCAL_MACHINE\\SOFTWARE\\Wow6432Node\\Python\\PythonCore\\3.2\\PythonPath]\n@=""C:\\\\Python32\\\\Lib;C:\\\\Python32\\\\DLLs""\n\n\nIs it correct?\n'"
2673,7731836,numpy-gitbot,numpy-gitbot,2012-10-19 22:35:27,2012-10-19 22:35:31,2012-10-19 22:35:31,closed,,NumPy 1.7,13,11 - Bug;component: numpy.core;priority: normal,https://api.github.com/repos/numpy/numpy/issues/2673,b'Unicode string is truncated when python uses 2 byte unicode. (Trac #2081)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/2081 on 2012-03-14 by trac user taldcroft, assigned to unknown._\n\nUsing numpy devel with Python 3.2 gives an unexpected result trying to initialize an array from numpy string objects.  This is a regression from previous behavior (devel prior to about two weeks ago and 1.6.1).\n\ndevel:\n\n\n\n    >>> d = np.array([\'a\'])\n    >>> np.asarray([d[0]])\n    array([\'\'], \n          dtype=\'<U0\')\n\n\n\nIn numpy 1.6.1:\n\n\n\n    >>> d = np.array([\'a\'])\n    >>> np.asarray([d[0]])\n    array([\'a\'], \n          dtype=\'<U1\')\n\n\n\nIf one uses a longer string like ""abcd"" instead of ""a"" then the result is ""ab"", so it looks like the actual output length is // 2 from the desired length.  Perhaps this is related to:\n\nhttps://github.com/numpy/numpy/commit/91f87e1f613630ff0ad9864017f059afcd6e57f1\n\n'"
2672,7731834,numpy-gitbot,numpy-gitbot,2012-10-19 22:35:25,2012-10-19 22:35:26,2012-10-19 22:35:26,closed,,,4,11 - Bug;component: numpy.core;priority: normal,https://api.github.com/repos/numpy/numpy/issues/2672,b'Issue with memory mapping large files (Trac #2080)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/2080 on 2012-03-13 by trac user for_usenet, assigned to unknown._\n\nI\'ve been using Numpy to read, organize and process data files.\n\nThe size of these files are quite variable, but they have a fixed size header, after which, the data payload can range anywhere from a few MB to a few GB in size.\n\nI\'ve been able to read and process smaller files just fine, but when I tried to read a 12 GB file, I get the following error:\n\n  File ""/Library/Python/2.6/site-packages/numpy-1.6.1-py2.6-macosx-10.6-universal.egg/numpy/core/memmap.py"", line 237, in __new__\n    mm = mmap.mmap(fid.fileno(), bytes, access=acc, offset=start)\nValueError: mmap length is greater than file size\n\nThe error occurs for Numpy 1.6.1 on Mac OS X 10.6.8 64-bit with Python 2.6, and on openSUSE 11.4 64-bit with python 2.7.\n\nThe snippet of code that gives the above error is:\n\n        self.rawDataHeader.seek (0, 0)\n        self.rawData4Recon = np.memmap (self.rawDataHeader, mode = \'r\',\n                                        dtype = np.int16,\n                                        offset = self.rawDataOffset(),\n                                        shape = self.rawDataShape())\n\nPlease let me know if there\'s anything I can do to help track down or debug this error.'"
2670,7731831,numpy-gitbot,numpy-gitbot,2012-10-19 22:35:20,2014-09-03 00:06:40,2012-10-19 22:35:22,closed,,NumPy 1.7,7,11 - Bug;component: numpy.core;priority: high,https://api.github.com/repos/numpy/numpy/issues/2670,b'min/max/mean of empty arrays (Trac #2078)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/2078 on 2012-03-11 by trac user muellner, assigned to unknown._\n\n[]In NumPy release 1.5.1, the minimum/maximum/mean of empty arrays is handled in a sensible way, namely by returning an empty array:\n\n\n\n    >>> numpy.min(numpy.zeros((0,2)), axis=1)\n    array([], dtype=float64)\n\n\n\nLikewise for max and mean.\n\nThis behavior is broken in NumPy 1.7.0.dev-56f66bb, and the line above raises a ValueError. Is this a bug or a feature? Personally, I prefer the old behavior, as it allows the easy handling of special cases (zero-sized arrays) without the need for extra checks.'"
2668,7731828,numpy-gitbot,certik,2012-10-19 22:35:16,2013-09-22 21:14:29,2012-12-14 04:38:35,closed,,NumPy 1.7,7,11 - Bug;component: Other;priority: high,https://api.github.com/repos/numpy/numpy/issues/2668,b'Bus error for F order ndarray creation on SPARC (Trac #2076)',"b""_Original ticket http://projects.scipy.org/numpy/ticket/2076 on 2012-03-08 by @matthew-brett, assigned to unknown._\n\nThis test, using numpy '1.7.0.dev-7c07089':\n\n\n\n    import numpy as np\n    \n    from StringIO import StringIO as BytesIO\n    \n    from numpy.testing import assert_array_equal\n    \n    \n    def test_2d_buf():\n       dtt = np.complex64\n       arr = np.arange(10, dtype=dtt)\n       # 2D array\n       arr2 = np.reshape(arr, (2, 5))\n       # Fortran write followed by (C or F) read caused bus error\n       data_str = arr2.tostring('F')\n       data_back = np.ndarray(arr2.shape,\n                              arr2.dtype,\n                              buffer=data_str,\n                              order='F')\n       assert_array_equal(arr2, data_back)\n\n\n\ncauses a bus error on Debian squeezy on SPARC64.  This is only so for complex types as `dtt`, and if the array is > 1D.  Debug log attached."""
2666,7731824,numpy-gitbot,seberg,2012-10-19 22:35:12,2013-01-03 19:33:58,2013-01-03 19:33:58,closed,,,4,11 - Bug;component: numpy.random;priority: normal,https://api.github.com/repos/numpy/numpy/issues/2666,b'random.shuffle fails if row in multidimensional array is None (Trac #2074)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/2074 on 2012-03-05 by trac user tillahoffmann, assigned to unknown._\n\nThe random.shuffle fails if an array is multidimensional and one of the rows is None:\n\n\n    from numpy.random import shuffle\n    a = [1,2,3,None]\n    shuffle(a) #Works fine\n    b = [(1,1),(2,2),(3,3),None]\n    shuffle(b) #Fails\n\n\n\nwith the following error message\n\n\n\n    Traceback (most recent call last):\n      File ""<stdin>"", line 1, in <module>\n      File ""mtrand.pyx"", line 4283, in mtrand.RandomState.shuffle (numpy/random/mtrand/mtrand.c:18131)\n    TypeError: \'NoneType\' object is unsliceable\n\n\n'"
2665,7731823,numpy-gitbot,numpy-gitbot,2012-10-19 22:35:06,2012-10-19 22:35:11,2012-10-19 22:35:11,closed,,NumPy 1.7,16,11 - Bug;component: numpy.core;priority: normal,https://api.github.com/repos/numpy/numpy/issues/2665,b'stride_tricks with float16 (Trac #2073)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/2073 on 2012-03-05 by trac user npinto, assigned to unknown._\n\nIt looks like stride_tricks don\'t work with float16:\n\n\n\n\n    % python bug.py                                                                                                                                                                                                                                                                                                    (develop\xa1\xad)\n    trying with float32\n    trying with float16\n    Traceback (most recent call last):\n      File ""bug.py"", line 18, in <module>\n        arr_out = as_strided(arr_in, shape=new_shape, strides=new_strides)\n      File ""/usr/lib64/python2.6/site-packages/numpy/lib/stride_tricks.py"", line 28, in as_strided\n        return np.asarray(DummyArray(interface, base=x))\n      File ""/usr/lib64/python2.6/site-packages/numpy/core/numeric.py"", line 235, in asarray\n        return array(a, dtype, copy=False, order=order)\n    ValueError: unsupported typestring\n\n'"
2664,7731822,numpy-gitbot,numpy-gitbot,2012-10-19 22:35:03,2012-10-19 22:35:04,2012-10-19 22:35:04,closed,,NumPy 1.7,2,11 - Bug;component: Documentation;priority: highest,https://api.github.com/repos/numpy/numpy/issues/2664,"b'Label NA-masked arrays and datetime as ""experimental (Trac #2072)'","b'_Original ticket http://projects.scipy.org/numpy/ticket/2072 on 2012-03-03 by @rgommers, assigned to @pv._\n\nIn order to signal to users that the implementation of masked arrays and datetime can still change, we had decided to label both as experimental.  \n\nThis should be done in several obvious places in the documentation, and in the release notes.'"
2663,7731820,numpy-gitbot,numpy-gitbot,2012-10-19 22:35:01,2012-10-19 22:35:02,2012-10-19 22:35:02,closed,,NumPy 1.7,2,11 - Bug;component: numpy.core;priority: highest,https://api.github.com/repos/numpy/numpy/issues/2663,b'Python 2.4 compatibility broken (Trac #2071)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/2071 on 2012-03-03 by @rgommers, assigned to @mwiebe._\n\n`itertools.combinations` doesn\'t even exist in Python 2.5, so that should certainly be fixed.\n\n\n\n    ======================================================================\n    ERROR: test_dtype.TestDtypeAttributeDeletion.test_dtype_non_writable_attributes_deletion\n    ----------------------------------------------------------------------\n    Traceback (most recent call last):\n      File ""/Library/Frameworks/Python.framework/Versions/2.4/lib/python2.4/site-packages/nose-1.1.2-py2.4.egg/nose/case.py"", line 197, in runTest\n        self.test(*self.arg)\n      File ""/Library/Frameworks/Python.framework/Versions/2.4/lib/python2.4/site-packages/numpy/core/tests/test_dtype.py"", line 412, in test_dtype_non_writable_attributes_deletion\n        assert_raises(AttributeError, delattr, dt, s)\n      File ""/Library/Frameworks/Python.framework/Versions/2.4/lib/python2.4/site-packages/numpy/testing/utils.py"", line 1053, in assert_raises\n        return nose.tools.assert_raises(*args,**kwargs)\n      File ""/Library/Frameworks/Python.framework/Versions/2.4//lib/python2.4/unittest.py"", line 320, in failUnlessRaises\n        callableObj(*args, **kwargs)\n    TypeError: attribute \'subdtype\' of \'numpy.dtype\' objects is not writable\n    \n    ======================================================================\n    ERROR: test_maskna.test_array_maskna_view_dtype\n    ----------------------------------------------------------------------\n    Traceback (most recent call last):\n      File ""/Library/Frameworks/Python.framework/Versions/2.4/lib/python2.4/site-packages/nose-1.1.2-py2.4.egg/nose/case.py"", line 197, in runTest\n        self.test(*self.arg)\n      File ""/Library/Frameworks/Python.framework/Versions/2.4/lib/python2.4/site-packages/numpy/core/tests/test_maskna.py"", line 467, in test_array_maskna_view_dtype\n        for x in itertools.combinations(tcs, 2):\n    AttributeError: \'module\' object has no attribute \'combinations\'\n    \n    ======================================================================\n    ERROR: test_nditer.test_iter_writable_attribute_deletion\n    ----------------------------------------------------------------------\n    Traceback (most recent call last):\n      File ""/Library/Frameworks/Python.framework/Versions/2.4/lib/python2.4/site-packages/nose-1.1.2-py2.4.egg/nose/case.py"", line 197, in runTest\n        self.test(*self.arg)\n      File ""/Library/Frameworks/Python.framework/Versions/2.4/lib/python2.4/site-packages/numpy/core/tests/test_nditer.py"", line 2564, in test_iter_writable_attribute_deletion\n        assert_raises(AttributeError, delattr, it, s)\n      File ""/Library/Frameworks/Python.framework/Versions/2.4/lib/python2.4/site-packages/numpy/testing/utils.py"", line 1053, in assert_raises\n        return nose.tools.assert_raises(*args,**kwargs)\n      File ""/Library/Frameworks/Python.framework/Versions/2.4//lib/python2.4/unittest.py"", line 320, in failUnlessRaises\n        callableObj(*args, **kwargs)\n    TypeError: attribute \'value\' of \'numpy.nditer\' objects is not writable\n    \n    ----------------------------------------------------------------------\n\n'"
2661,7731817,numpy-gitbot,seberg,2012-10-19 22:34:58,2013-10-25 15:52:49,2013-10-25 15:52:49,closed,,,2,11 - Bug;component: Other;priority: normal,https://api.github.com/repos/numpy/numpy/issues/2661,b'boolean indexing with no matches should leave shape same (Trac #2069)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/2069 on 2012-03-02 by trac user shaunc, assigned to unknown._\n\n\n\n    >>> a = array( [ [ 1, 1 ] ] )\n    >>> a[ a == 0 ].shape\n    (0, )\n\n\n\nThis is also puzzling as:\n\n\n    >>> aa == 0\n    array([[False, False]], dtype=bool)\n    \n    >>> b = [ [ False, False ] ]\n    >>> a [ b ]\n    >>> aa[ bb ]\n    array([[1, 1],\n            [1, 1]])\n\n'"
2659,7731815,numpy-gitbot,numpy-gitbot,2012-10-19 22:34:53,2012-10-19 22:34:55,2012-10-19 22:34:55,closed,,,6,11 - Bug;component: numpy.core;priority: normal,https://api.github.com/repos/numpy/numpy/issues/2659,"b'when x is an N-D array, list(x) produces surprising results (Trac #2067)'","b'_Original ticket http://projects.scipy.org/numpy/ticket/2067 on 2012-02-26 by trac user pfeldman, assigned to unknown._\n\nx= array([[1,2],[3,4]])\n\nlist(x)\n[array([1, 2]), array([3, 4])]\n\nlist(x.ravel())\n[1, 2, 3, 4]\n\nThe behavior of list(x) is not what any reasonable person would want, and does not make sense conceptually either.  (A Numpy 2-D array is not a nesting of 1-D arrays).  list(x.ravel()) works but is cumbersome.'"
2658,7731812,numpy-gitbot,numpy-gitbot,2012-10-19 22:34:50,2012-10-19 22:34:52,2012-10-19 22:34:52,closed,,NumPy 1.7,10,11 - Bug;component: numpy.core;priority: high,https://api.github.com/repos/numpy/numpy/issues/2658,b'np.searchsorted segfaults when input is a recarray (Trac #2066)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/2066 on 2012-02-26 by trac user josh.ayers, assigned to unknown._\n\nThe following code segfaults.  I\'m running NumPy 1.6.1 on Windows 7.\n\n\n\n    import numpy as np\n    dtype = np.format_parser([\'i4\', \'i4\'], [], [])\n    a = np.recarray((2, ), dtype)\n    np.searchsorted(a, 1)\n\n\n\nThe gdb output is below:\n\n\n    (gdb) run -c ""import crash; crash.run()""\n    \n    Starting program: c:\\python27\\python.exe -c ""import crash; crash.run()""\n    [New Thread 3520.0x9cc]\n    \n    Program received signal SIGSEGV, Segmentation fault.\n    0x673982ac in PyArray_SearchSorted ()\n       from c:\\python27\\lib\\site-packages\\numpy\\core\\multiarray.pyd\n    \n    (gdb) bt\n    \n    #0  0x673982ac in PyArray_SearchSorted ()\n       from c:\\python27\\lib\\site-packages\\numpy\\core\\multiarray.pyd\n    #1  0x673986e8 in array_searchsorted ()\n       from c:\\python27\\lib\\site-packages\\numpy\\core\\multiarray.pyd\n    #2  0x1e0887c7 in python27!PyCFunction_Call () from c:\\python27\\python27.dll\n    #3  0x1e0bf781 in python27!PyEval_GetFuncDesc () from c:\\python27\\python27.dll\n    #4  0x0262abe8 in ?? ()\n    #5  0x1e1d57f8 in python27!PySuper_Type () from c:\\python27\\python27.dll\n    #6  0x00000002 in ?? ()\n    #7  0x01cedf30 in ?? ()\n    Backtrace stopped: previous frame inner to this frame (corrupt stack?)\n    (gdb)\n\n'"
2656,7731810,numpy-gitbot,charris,2012-10-19 22:34:46,2014-09-30 03:34:22,2014-09-30 03:34:22,closed,,,8,11 - Bug;component: Other;priority: normal,https://api.github.com/repos/numpy/numpy/issues/2656,b'numpy.digitize uses a linear search when it should be using binary search (Trac #2064)',"b""_Original ticket http://projects.scipy.org/numpy/ticket/2064 on 2012-02-25 by trac user jpeel, assigned to unknown._\n\nIn numpy/lib/src/_compiled_base.c, numpy.digitize's code uses linear searches rather than binary searches as it should. The difference in speed is quite enormous when using very many bins. Quite frankly, it should probably use searchsorted after checking that the bins are monotonic.\n\nThis was opened as a result of a question on stackoverflow\n[http://stackoverflow.com/questions/9444409/why-is-numpy-much-slower-than-matlab-on-a-digitize-example/9445500#9445500]\nYou can see an example of the speed issue there."""
2655,7731807,numpy-gitbot,numpy-gitbot,2012-10-19 22:34:42,2014-02-25 23:12:58,2012-10-19 22:34:45,closed,,NumPy 1.7,11,11 - Bug;component: numpy.core;priority: highest,https://api.github.com/repos/numpy/numpy/issues/2655,b'unique() does not seem to return correct index if array larger than 16 (Trac #2063)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/2063 on 2012-02-23 by trac user lolowizard, assigned to unknown._\n\nUnique seem to return the index of the last occurence rather than first occurence if len(array)>16\n\nTo reproduce:\n\n\n    v=[0,0,0,0,0,1,1,1,1,1,1,2,2,2,2,2,2]\n    w=[0,0,0,0,0,1,1,1,1,1,1,2,2,2,2]\n\n\nOnly difference between v and w is the two extra values at the end.\n \nThen:\n\n\n    unique(v,return_index=True)\n    unique(w,return_index=True)\n\n\nLook at the results for both commands:\n\n\n    (array([0, 1, 2]), array([ 0, 10, 15]))\n     \n    (array([0, 1, 2]), array([0, 5, 9]))\n\n\nThe two commands should return the same index!'"
2654,7731806,numpy-gitbot,seberg,2012-10-19 22:34:40,2013-04-12 21:26:22,2013-04-12 21:26:22,closed,,,2,11 - Bug;component: numpy.core;priority: normal,https://api.github.com/repos/numpy/numpy/issues/2654,b'Numpy array direct indexing of complex numbers causes crash (Trac #2062)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/2062 on 2012-02-23 by trac user nschutten, assigned to unknown._\n\nOn my computer (with Python 2.6 32b), I get the following:\n\nfrom numpy import *\na=array([1j,2j])\na[0:1:1]\n(this gives output: ""array([0.+1,j])""\n\nIf I then try the direct index e.g. ""a[1]"", python crashes.\n\n(I have tried different 2.6 versions of Python as well as the latest Numpy/Scipy, but the issue remains).\n\nAny thoughts?\n\nRegards,\n\nNiels'"
2653,7731804,numpy-gitbot,numpy-gitbot,2012-10-19 22:34:36,2012-10-19 22:34:39,2012-10-19 22:34:39,closed,,,12,11 - Bug;component: Documentation;priority: normal,https://api.github.com/repos/numpy/numpy/issues/2653,b'difference between behavior of assignment division and future division not documented (Trac #2061)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/2061 on 2012-02-21 by trac user AlanFrankel, assigned to @pv._\n\nI just ran into the same issue described in bug 1734 (assignment division not compatible with future division). Namely, I expected to see that the results of \n\narray_a /= scalar_s\n\nwould depend on whether a ""from __future__ import division"" statement was included in the code. Eventually, I figured out this had no effect; the only way I could get true division, which I wanted, was to use:\n\narray_a = array_a / scalar_s\n\nI see that bug 1734 has been marked ""won\'t fix"". Whether or not I agree with that assessment, I definitely think that this behavior should be in user-accessible documentation (not just in the bug database). The ""Mathematical Functions"" page ( http://docs.scipy.org/doc/numpy/reference/routines.math.html ) doesn\'t have any reference to the assignment operators at all (+=, -=, *=, /=), which in my opinion is a glaring omission, especially since it\'s hard to search for these strings via a punctuation-stripping search engine. The assignment operators should be listed (or there should be a link to them), and the fact that ""/="" gives different results from ""/"" should be stated.'"
2652,7731801,numpy-gitbot,numpy-gitbot,2012-10-19 22:34:33,2012-10-19 22:34:35,2012-10-19 22:34:35,closed,,NumPy 1.7,4,11 - Bug;component: numpy.core;priority: normal,https://api.github.com/repos/numpy/numpy/issues/2652,"b'Blasdot tests with ""out"" argument failing (Trac #2060)'","b'_Original ticket http://projects.scipy.org/numpy/ticket/2060 on 2012-02-20 by @rgommers, assigned to unknown._\n\nOn Python 2.5 seeing these failures, works on 3.1:\n\n\n\n    ======================================================================\n    ERROR: test_blasdot.test_dot_3args\n    ----------------------------------------------------------------------\n    Traceback (most recent call last):\n      File ""C:\\Python25\\lib\\site-packages\\nose-0.11.3-py2.5.egg\\nose\\case.py"", line 186, in runTest\n        self.test(*self.arg)\n      File ""C:\\Python25\\Lib\\site-packages\\numpy\\core\\tests\\test_blasdot.py"", line 51, in test_dot_3args\n        np.dot(f,v,r)\n    TypeError: function takes exactly 2 arguments (3 given)\n    \n    ======================================================================\n    ERROR: test_blasdot.test_dot_3args_errors\n    ----------------------------------------------------------------------\n    Traceback (most recent call last):\n      File ""C:\\Python25\\lib\\site-packages\\nose-0.11.3-py2.5.egg\\nose\\case.py"", line 186, in runTest\n        self.test(*self.arg)\n      File ""C:\\Python25\\Lib\\site-packages\\numpy\\core\\tests\\test_blasdot.py"", line 69, in test_dot_3args_errors\n        assert_raises(ValueError, np.dot, f, v, r)\n      File ""C:\\Python25\\Lib\\site-packages\\numpy\\testing\\utils.py"", line 1053, in assert_raises\n        return nose.tools.assert_raises(*args,**kwargs)\n      File ""C:\\Python25\\lib\\unittest.py"", line 320, in failUnlessRaises\n        callableObj(*args, **kwargs)\n    TypeError: function takes exactly 2 arguments (3 given)\n\n'"
2651,7731799,numpy-gitbot,charris,2012-10-19 22:34:31,2014-02-15 17:24:57,2014-02-15 17:24:57,closed,,,5,11 - Bug;component: numpy.core;priority: normal,https://api.github.com/repos/numpy/numpy/issues/2651,b'Numpy float plus/times poly1d gives array (Trac #2059)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/2059 on 2012-02-20 by trac user ezander, assigned to unknown._\n\nMultiplication or addition of a poly1d object with a numpy float from the left, gives an ndarray object, instead of an poly1d. See the following code:\n\nIn [38]: a=np.float64(3.0)\nIn [39]: a+np.poly1d([1,1,1])\nOut[39]: array([ 4.,  4.,  4.])\nIn [40]: np.poly1d([1,1,1])+a\nOut[40]: poly1d([ 1.,  1.,  4.])\n'"
2649,7731797,numpy-gitbot,charris,2012-10-19 22:34:28,2014-02-21 05:44:33,2014-02-21 05:44:33,closed,,,2,11 - Bug;component: numpy.matrixlib;priority: normal,https://api.github.com/repos/numpy/numpy/issues/2649,b'Invalid output shape from np.dot with matrixes (Trac #2057)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/2057 on 2012-02-17 by @pv, assigned to unknown._\n\nhttp://permalink.gmane.org/gmane.comp.python.scientific.user/31095\n\nConsider this:\n\n\n    import numpy as np\n    x = np.arange(5)\n    I = np.asmatrix(np.identity(5))\n    print np.dot(I, x).shape\n    # -> (1, 5)\n\n\nwhile `(5, 1)` would be what is expected based on usual linear algebra rules.\n\nIt might also be a mistake to return a matrix from mixed matrix--array computations.\n'"
2644,7731790,numpy-gitbot,charris,2012-10-19 22:34:20,2014-02-15 21:47:50,2014-02-15 21:47:50,closed,,,1,11 - Bug;component: Other;priority: normal,https://api.github.com/repos/numpy/numpy/issues/2644,b'numpy record dtypes segfault (Trac #2052)',"b""_Original ticket http://projects.scipy.org/numpy/ticket/2052 on 2012-02-13 by trac user fijal, assigned to unknown._\n\nAn example session:\n\n\n\n\n\n\n    >>> from numpy import *\n    >>> a = zeros(2, dtype=[('x', int), ('y', float)])\n    >>> a['x']\n    array([0, 0])\n    >>> a[0]\n    (0, 0.0)\n    >>> del a[0]['x']\n    Segmentation fault\n    \n\n\n"""
2640,7731785,numpy-gitbot,numpy-gitbot,2012-10-19 22:34:13,2012-10-19 22:34:15,2012-10-19 22:34:15,closed,,NumPy 1.7,4,11 - Bug;component: numpy.lib;priority: normal,https://api.github.com/repos/numpy/numpy/issues/2640,b'memory overflow when using numpy load in a loop (Trac #2048)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/2048 on 2012-02-11 by trac user eldada, assigned to unknown._\n\nLooping over npz files load causes memory overflow (depending on the file list length).\nNone of the following seems to help[[BR]]\n\n1. Deleting the variable which stores the data in the file.[[BR]]\n\n2. Using mmap.[[BR]]\n\n3. calling gc.collect() (garbage collection).[[BR]]\n[[BR]]\n\n\nThe following code should reproduce the phenomenon:[[BR]]\n\n\nimport numpy as np[[BR]]\n\n\n#generate a file for the demo[[BR]]\n\nX = np.random.randn(1000,1000)[[BR]]\n\nnp.savez(\'tmp.npz\',X=X)[[BR]]\n[[BR]]\n\n\n#here come the overflow:[[BR]]\n\nfor i in xrange(1000000):[[BR]]\n\n    data = np.load(\'tmp.npz\')[[BR]]\n\n    data.close()  # avoid the ""too many files are open"" error[[BR]]\n\n[[BR]]\n\n# in my real application the loop is over a list of files and the overflow exceeds 24GB of RAM! [[BR]]\n\n\n# please note that this was tried on ubuntu 11.10, and for both numpy v 1.5.1 as well as 1.6.0\n'"
2638,7731781,numpy-gitbot,numpy-gitbot,2012-10-19 22:34:04,2012-10-23 02:46:34,2012-10-19 22:34:08,closed,,NumPy 1.7,9,11 - Bug;component: numpy.core;priority: normal,https://api.github.com/repos/numpy/numpy/issues/2638,b'Deleting ndarray.real on an instance segfaults (Trac #2046)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/2046 on 2012-02-10 by @alex, assigned to @charris._\n\nTested on the latest numpy master from github:\n\n\n\n    (e268cfc7-ff3f-4d97-a02c-27481c8a8186)alex@alex-gaynor-laptop:~/.virtualenvs/e268cfc7-ff3f-4d97-a02c-27481c8a8186$ python\n    Python 2.7.2+ (default, Oct  4 2011, 20:06:09) \n    [GCC 4.6.1] on linux2\n    Type ""help"", ""copyright"", ""credits"" or ""license"" for more information.\n    >>> import numpy\n    >>> del numpy.arange(5).real\n    Segmentation fault\n    \n\n\n\n'"
2637,7731780,numpy-gitbot,numpy-gitbot,2012-10-19 22:34:02,2012-10-19 22:34:03,2012-10-19 22:34:03,closed,,NumPy 1.7,2,11 - Bug;component: numpy.core;priority: normal,https://api.github.com/repos/numpy/numpy/issues/2637,b'Trying to delete an item from a flatiter segfaults (Trac #2045)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/2045 on 2012-02-10 by @alex, assigned to unknown._\n\nTested at the latest master of the github repo:\n\n\n\n    (e268cfc7-ff3f-4d97-a02c-27481c8a8186)alex@alex-gaynor-laptop:~/.virtualenvs/e268cfc7-ff3f-4d97-a02c-27481c8a8186$ python\n    Python 2.7.2+ (default, Oct  4 2011, 20:06:09) \n    [GCC 4.6.1] on linux2\n    Type ""help"", ""copyright"", ""credits"" or ""license"" for more information.\n    >>> import numpy\n    >>> numpy.arange(2)\n    array([0, 1])\n    >>> numpy.arange(2).flat\n    <numpy.flatiter object at 0x2e49910>\n    >>> del numpy.arange(2).flat[1]\n    Segmentation fault\n    \n\n'"
2636,7731779,numpy-gitbot,numpy-gitbot,2012-10-19 22:34:00,2012-10-19 22:34:01,2012-10-19 22:34:01,closed,,NumPy 1.7,2,11 - Bug;component: numpy.core;priority: normal,https://api.github.com/repos/numpy/numpy/issues/2636,b'Trying to delete ndarray.flat from an instance segfaults (Trac #2044)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/2044 on 2012-02-10 by @alex, assigned to unknown._\n\nTested at the latest master of numpy from github:\n\n\n\n    (e5dd45b0-c56f-4e03-8b53-e3fda8cc68bc)alex@alex-gaynor-laptop:~/.virtualenvs/e5dd45b0-c56f-4e03-8b53-e3fda8cc68bc$ python\n    Python 2.7.2+ (default, Oct  4 2011, 20:06:09) \n    [GCC 4.6.1] on linux2\n    Type ""help"", ""copyright"", ""credits"" or ""license"" for more information.\n    >>> import numpy\n    >>> numpy.arange(2)\n    array([0, 1])\n    >>> numpy.arange(2).flat\n    <numpy.flatiter object at 0x2ea3800>\n    >>> del numpy.arange(2).flat\n    Segmentation fault\n\n'"
2635,7731778,numpy-gitbot,seberg,2012-10-19 22:33:58,2013-10-16 18:16:03,2013-10-16 18:16:03,closed,,,2,11 - Bug;component: numpy.core;priority: normal,https://api.github.com/repos/numpy/numpy/issues/2635,"b""Can't index with a zero length bool array (Trac #2043)""","b""_Original ticket http://projects.scipy.org/numpy/ticket/2043 on 2012-02-09 by trac user radford, assigned to unknown._\n\nYou can index an array with a boolean array for all lengths except zero.  Specifically this works for i>0, but not when it's i==0.\n\n    i = 0; np.arange(3*i).reshape(3,i)[:,np.bool_([True] * i)]\n\nAttached is a proposed patch to fix the problem.\n"""
2634,7731775,numpy-gitbot,numpy-gitbot,2012-10-19 22:33:56,2012-10-19 22:33:57,2012-10-19 22:33:57,closed,,,3,11 - Bug;component: Other;priority: high,https://api.github.com/repos/numpy/numpy/issues/2634,b'complex log breaks log(conj(x)) = conj(log(x)) invariant (Trac #2042)',"b""_Original ticket http://projects.scipy.org/numpy/ticket/2042 on 2012-02-09 by trac user radford, assigned to unknown._\n\nThe following should both be true, but the second fails.\n\n  numpy.log(-1.0+0.0j) ==  numpy.pi * 1j\n  numpy.log(-1.0-0.0j) == -numpy.pi * 1j\n\nBackground: The c99 clog() function guarantees clog(conj(x)) == conj(clog(x)) and numpy attempts to conform to conform to the C99 standard, but doesn't in the above case.\n"""
2632,7731772,numpy-gitbot,charris,2012-10-19 22:33:54,2014-02-21 16:06:23,2014-02-21 04:45:38,closed,,,7,11 - Bug;component: Other;priority: normal,https://api.github.com/repos/numpy/numpy/issues/2632,b'f2py does not treat quad precision real/complex (Trac #2040)',"b""_Original ticket http://projects.scipy.org/numpy/ticket/2040 on 2012-02-07 by @inducer, assigned to unknown._\n\nAs is visible from this code:\n\nhttps://github.com/numpy/numpy/blob/master/numpy/f2py/capi_maps.py#L35\n\nf2py incorrectly maps quad precision real/complex down to their real-valued counterparts, leading to crashes and/or incorrect data in user applications. Compiler support for quad in icc and gcc (both C- and Fortran-side) is decent nowadays, so there's little reason to do this, IMO. If this has a chance of getting in, I'd try to provide a patch."""
2631,7731770,numpy-gitbot,numpy-gitbot,2012-10-19 22:33:49,2013-09-28 13:39:18,2012-10-19 22:33:52,closed,,NumPy 1.7,6,11 - Bug;component: numpy.distutils;priority: normal,https://api.github.com/repos/numpy/numpy/issues/2631,b'Numpy wrongly assumes that any non-i386 OS X (Darwin) system is PowerPC (Trac #2039)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/2039 on 2012-02-04 by trac user jdemeyer, assigned to @cournape._\n\nApparently Numpy forgot about the existence of ""x86_64"" systems:\n\n\n    Python 2.7.2 (default, Feb  3 2012, 15:29:15)\n    [GCC 4.2.1 (Apple Inc. build 5666) (dot 3)] on darwin\n    Type ""help"", ""copyright"", ""credits"" or ""license"" for more information.\n    >>> from distutils.util import get_platform\n    >>> get_platform()\n    \'macosx-10.6-x86_64\'\n\n\n\nThe bug is in `src/numpy/distutils/system_info.py`:\n\n\n            if sys.platform==\'darwin\' and not os.environ.get(\'ATLAS\',None):\n                args = []\n                link_args = []\n                if get_platform()[-4:] == \'i386\':\n                    intel = 1\n                else:\n                    intel = 0\n                if os.path.exists(\'/System/Library/Frameworks/Accelerate.framework/\'):\n                    if intel:\n                        args.extend([\'-msse3\'])\n                    else:\n                        args.extend([\'-faltivec\'])\n                    link_args.extend([\'-Wl,-framework\',\'-Wl,Accelerate\'])\n\n'"
2630,7731769,numpy-gitbot,numpy-gitbot,2012-10-19 22:33:47,2012-10-19 22:33:48,2012-10-19 22:33:48,closed,,NumPy 1.7,2,11 - Bug;component: numpy.core;priority: normal,https://api.github.com/repos/numpy/numpy/issues/2630,b'numpy.core.arrayprint.IntegerFormatter uses wrong exception catching code (Trac #2038)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/2038 on 2012-02-03 by trac user fijal, assigned to unknown._\n\ncode goes like this:\n\n        except TypeError, NotImplementedError:\n            # if reduce(data) fails, this instance will not be called, just\n            # instantiated in formatdict.\n            pass\n        except ValueError:\n            # this occurs when everything is NA\n            pass\n\nshould be:\n        except (TypeError, NotImplementedError):\n           ...\n\n\ninstead'"
2628,7731765,numpy-gitbot,numpy-gitbot,2012-10-19 22:33:44,2012-10-19 22:33:45,2012-10-19 22:33:45,closed,,,2,11 - Bug;component: Other;priority: normal,https://api.github.com/repos/numpy/numpy/issues/2628,b'Leak when mixing OpenCV GetMat and NumPy asarray (Trac #2036)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/2036 on 2012-02-02 by trac user r2d3, assigned to unknown._\n\nThe following code leaks \n\nMy profiling tool (Instruments on OSX) that OpenCV cvmat_array_struct allocated the memory. But I suspect asarray to keep a reference on it in some way.\n\nOSX 10.6\nPython 2.6\nNumpy 1.6.1\nOpenCV 2.3.1\n\nThe leaking sample code :\n\nimport cv\nimport numpy as N\n\nwhile True:\n    img = cv.CreateImage((800,600), 8, 1); \n    numpy_Img = N.asarray(cv.GetMat(img))\n'"
2625,7731761,numpy-gitbot,numpy-gitbot,2012-10-19 22:33:38,2012-10-23 02:46:29,2012-10-19 22:33:39,closed,,NumPy 1.7,4,11 - Bug;component: numpy.core;priority: normal,https://api.github.com/repos/numpy/numpy/issues/2625,b'a ** 2.0 has incorrect type (Trac #2033)',"b""_Original ticket http://projects.scipy.org/numpy/ticket/2033 on 2012-01-30 by trac user kasal, assigned to @teoliphant._\n\nHello,\nI observe an incorrect evaluation of the power operator for the exponent = 2.0:\n\n\n    print 'NumPy:', np.__version__\n    a = np.array([2, 4], dtype=np.int16)\n    for e in np.arange(5.0):\n        s = 'a**{}'.format(e)\n        print '{:9} {}'.format(s, repr(eval(s)))\n    \n    !NumPy: 1.6.0\n    a**0.0    array([ 1.,  1.])\n    a**1.0    array([ 2.,  4.])\n    a**2.0    array([ 4, 16], dtype=int16)\n    a**3.0    array([  8.,  64.])\n    a**4.0    array([  16.,  256.])\n\n\n\nIn all other cases, the output dtype is float, because of te float exponent.  But 'a**2.0' seems to be incorrectly reduced to 'a*a'."""
2624,7731759,numpy-gitbot,charris,2012-10-19 22:33:34,2014-03-01 16:43:28,2014-03-01 16:43:28,closed,,,7,11 - Bug;component: Other;Easy Fix;Patch;priority: normal,https://api.github.com/repos/numpy/numpy/issues/2624,"b""cross doesn't broadcast correctly (Trac #2032)""","b'_Original ticket http://projects.scipy.org/numpy/ticket/2032 on 2012-01-27 by @girving, assigned to unknown._\n\ncross doesn\'t broadcast correctly in all cases.  Here\'s an example:\n\n    >>> cross(random.randn(2,1,3),random.randn(5,3))\n    Traceback (most recent call last):\n      File ""<stdin>"", line 1, in <module>\n      File ""/opt/local/Library/Frameworks/Python.framework/Versions/2.6/lib/python2.6/site-packages/numpy/core/numeric.py"", line 1377, in cross\n        x = a[1]*b[2] - a[2]*b[1]\n    ValueError: operands could not be broadcast together with shapes (1,2) (5)'"
2621,7731753,numpy-gitbot,numpy-gitbot,2012-10-19 22:33:28,2012-10-19 22:33:29,2012-10-19 22:33:29,closed,,NumPy 1.7,5,11 - Bug;component: numpy.core;priority: high,https://api.github.com/repos/numpy/numpy/issues/2621,b'Should not allow views of NA-masked arrays which change the array size (Trac #2029)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/2029 on 2012-01-25 by @mwiebe, assigned to unknown._\n\nChuck posted an example:\n\n\n\n    Looks like views of masked arrays have other problems:\n    \n    In [13]: a = ones(3, int16, maskna=1)\n    \n    In [14]: a.view(int8)\n    Out[14]: array([1, 0, 1, NA, 1, NA], dtype=int8)\n\n\n\nThis looks like a serious bug to me, to avoid memory corruption issues it should raise an exception.'"
2620,7731751,numpy-gitbot,seberg,2012-10-19 22:33:26,2013-12-05 09:38:10,2013-12-05 09:38:10,closed,,,2,11 - Bug;component: Other;priority: normal,https://api.github.com/repos/numpy/numpy/issues/2620,"b""dtype detection doesn't check for unsigned long long (Trac #2028)""","b'_Original ticket http://projects.scipy.org/numpy/ticket/2028 on 2012-01-25 by @mwiebe, assigned to unknown._\n\nThis was reported on the mailing list here:\nhttp://comments.gmane.org/gmane.comp.python.numeric.general/47557\n\nThe fix needs to go in the function _array_find_python_scalar_type in common.c, here as of this bug report:\nhttps://github.com/numpy/numpy/blob/master/numpy/core/src/multiarray/common.c#L18\n'"
2619,7731748,numpy-gitbot,numpy-gitbot,2012-10-19 22:33:24,2012-10-23 02:46:26,2012-10-19 22:33:25,closed,,NumPy 1.7,4,11 - Bug;component: numpy.core;priority: high,https://api.github.com/repos/numpy/numpy/issues/2619,b'einsum/iterator bug (Trac #2027)',"b""_Original ticket http://projects.scipy.org/numpy/ticket/2027 on 2012-01-21 by @mwiebe, assigned to unknown._\n\nThis was reported by royf by reopening ticket #2478. I'm moving it to a new ticket, as it's a new bug, even though it's very similar in nature to the one reopened.\n\nProblem not solved in 1.6.1, or a very similar problem remains:\n\nimport numpy; print(numpy.version.full_version); a = numpy.arange(1, 3); b = numpy.arange(1, 5).reshape(2, 2); c = numpy.arange(1, 9).reshape(4, 2); numpy.einsum('x,yx,zx->xzy', a, b, c)\n\n1.6.1 array([[[ 1, 3],\n\n[ 3, 9], [ 1, 3], [ 3, 9]],\n\n[[ 8, 16],\n\n[16, 32], [ 8, 16], [16, 32]]])\n\n\nThe correct result is\n\nnumpy.array([[[a[x]*b[y, x]*c[z, x] for y in range(2)] for z in range(4)] for x in range(2)])\n\narray([[[ 1, 3],\n\n[ 3, 9], [ 5, 15], [ 7, 21]],\n\n[[ 8, 16],\n\n[16, 32], [24, 48], [32, 64]]])\n"""
2618,7731747,numpy-gitbot,seberg,2012-10-19 22:33:22,2013-12-05 09:36:26,2013-12-05 09:36:26,closed,,,2,11 - Bug;component: Other;priority: normal,https://api.github.com/repos/numpy/numpy/issues/2618,b'NA causes problems for the real/imag views. (Trac #2025)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/2025 on 2012-01-21 by @charris, assigned to unknown._\n\n\n\n    In [5]: a = np.array([np.NA], maskna=1)\n    \n    In [6]: a.real\n    Out[6]: array([ NA], dtype=float64)\n    \n    In [7]: a.imag\n    Out[7]: array([ 0.])\n\n\n\nImaginary part should show NA.\n\n\n\n    In [8]: a = np.array([np.NA], dtype=np.complex128, maskna=1)\n    \n    In [9]: a.real\n    ---------------------------------------------------------------------------\n    ValueError                                Traceback (most recent call last)\n    /home/charris/<ipython-input-9-f93368bb6a37> in <module>()\n    ----> 1 a.real\n    \n    ValueError: Cannot construct a view of data together with the NPY_ARRAY_MASKNA flag, the NA mask must be added later\n    \n    In [10]: a.imag\n    ---------------------------------------------------------------------------\n    ValueError                                Traceback (most recent call last)\n    /home/charris/<ipython-input-10-e8e5f986ad96> in <module>()\n    ----> 1 a.imag\n    \n    ValueError: Cannot construct a view of data together with the NPY_ARRAY_MASKNA flag, the NA mask must be added later\n    \n\n\n'"
2617,7731742,numpy-gitbot,charris,2012-10-19 22:33:20,2014-02-21 04:21:30,2014-02-21 04:21:30,closed,,,4,11 - Bug;component: numpy.core;priority: normal,https://api.github.com/repos/numpy/numpy/issues/2617,b'NULL bytes removed from end of string in NumPy array (Trac #2024)',"b""_Original ticket http://projects.scipy.org/numpy/ticket/2024 on 2012-01-19 by trac user edcjones, assigned to unknown._\n\nI use Debian stable on a PC. The distribution uses Python 2.6.6 and\nNumPy 1.4.1.\n\nIn Python and I assume in NumPy, strings are not NULL-terminated.\nThe following program strips the zero bytess from the end of a string:\n\n#! /usr/bin/env python\n\nimport numpy\n\nDT = numpy.dtype([('hashcode',  numpy.str_, 16)])\nbadstring = 4 * chr(0) + 'ABCDEFGH' + 4 * chr(0)\nprint repr(badstring)\narr = numpy.array((badstring,), dtype=DT)\nprint repr(arr)\ns = str(arr['hashcode'])\nprint len(s), repr(s)\n\nThe output is:\n\n'\\x00\\x00\\x00\\x00ABCDEFGH\\x00\\x00\\x00\\x00'\narray(('\\x00\\x00\\x00\\x00ABCDEFGH',), \n      dtype=[('hashcode', '|S16')])\n12 '\\x00\\x00\\x00\\x00ABCDEFGH'\n\nIt appears that the string is being treated like a C-string somewhere in\nNumPy.\n"""
2616,7731741,numpy-gitbot,seberg,2012-10-19 22:33:19,2016-03-03 11:24:50,2016-03-03 11:24:50,closed,,,1,11 - Bug;component: Other;priority: high,https://api.github.com/repos/numpy/numpy/issues/2616,b'float128 does not convert correctly from strings (Trac #2023)',"b""_Original ticket http://projects.scipy.org/numpy/ticket/2023 on 2012-01-18 by trac user parejkoj, assigned to unknown._\n\nConverting strings to float128/dtype('f16') does not produce the desired precision, but rather converts to float64 first. I'm using OS X 10.6.8, numpy 1.6.1, python 2.6.7, compiled under Fink.\n\nExample:\n\n\n\n    a=np.float128('0.12345678901234567890')\n    b=np.float64('0.12345678901234567890')\n    repr(a)\n    repr(b)\n    a==b\n\n\n\nproduces:\n\n\n\n    '0.12345678901234567737'\n    '0.12345678901234568'\n    True\n\n\n\nWhen it should produce:\n\n\n\n    '0.12345678901234567890'\n    '0.12345678901234568'\n    False\n\n\n\nI couldn't find another bug report about this, but this email thread describes the same problem:\n\nhttp://comments.gmane.org/gmane.comp.python.numeric.general/46380\n\nWhereas this bug report from two years ago seems to show correct behavior:\n\nhttp://projects.scipy.org/numpy/ticket/1311"""
2614,7731736,numpy-gitbot,numpy-gitbot,2012-10-19 22:33:15,2012-10-19 22:33:16,2012-10-19 22:33:16,closed,,NumPy 1.7,3,11 - Bug;component: numpy.core;priority: normal,https://api.github.com/repos/numpy/numpy/issues/2614,b'segfault on searchsorted (Trac #2021)',"b""_Original ticket http://projects.scipy.org/numpy/ticket/2021 on 2012-01-17 by trac user adamklein, assigned to unknown._\n\nThis results in a segfault -\n\nIn [10]: x = np.array([1,2,3], 'datetime64[D]')\n\nIn [11]: x.searchsorted(2)\n\n"""
2611,7731730,numpy-gitbot,charris,2012-10-19 22:33:10,2016-01-06 19:14:02,2016-01-06 19:14:01,closed,,,2,11 - Bug;component: Other;priority: normal,https://api.github.com/repos/numpy/numpy/issues/2611,b'Bug in distutils: compiling on Windows fails if Python is installed in a path with spaces. (Trac #2018)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/2018 on 2012-01-13 by trac user almar, assigned to @cournape._\n\nI found a bug in numpy.distutils, which is causing problems with compiling Cython code on Windows. I have reproduced this on Python 2.6 and Python 3.2 (32 bit). (I first thought this issue had to do with the normal distutils package: bugs.python.org/issue13765)\n\nThe problem occurs with the native msvc compiler. Using gcc (MinGW) works fine.\n\nThe problem is that the command to link the libraries does not put double quotes around paths that have spaces in them. Unfortunately, the path where I have Python installed has spaces in it (""c:/program files/python26""). Small example of part of a link command: \n\n/LIBPATH:C:\\Program Files (x86)\\python32\\libs. \n\nNote that the include_dirs DO have double quotes around them.\n\nI traced the problem down to the custom CCompiler_spawn() function which replaces the distutils spawn function. If I understand correctly, the idea is to use numpy\'s quote_args() in gen_lib_options() to put quotes around given library dirs, and to not check for the need of quotes in spawn. It seems, however, as if one forgot that the libary dirs returned by _distutils_gen_lib_options() can also contain spaces. And they do if you install Python in ""program files"".\n\nAnyway, I propose to fix the problem by placing the following line at the very start of the CCompiler_spawn() function: \ncmd = quote_args(cmd)\n\nAdditionally, I propose to change quote_args to also check whether the LAST character is a quote. This seems a bit more robust. Consider the two cases:\n/LIBPATH:""C:\\Program Files (x86)\\python32\\libs""\n""/LIBPATH:C:\\Program Files (x86)\\python32\\libs""\n\n\n\n===== Below follows a minimal Cython example and traceback =====\n\n===== test_.pyx\ndef foo():\nprint(\'hello\')\n\n\n===== setup.py\nimport os, sys\nfrom Cython.Distutils import build_ext\nfrom distutils.core import setup\nfrom distutils.extension import Extension\nfrom numpy.distutils.misc_util import get_numpy_include_dirs\n\n# Ugly hack so I can run setup.py in my IDE\nsys.argv = [\'setup.py\', \'build_ext\', \'--inplace\']\n\n# Init include dirs\ninclude_dirs = [\'.\']\ninclude_dirs.extend(get_numpy_include_dirs())\n\n# Creat Extensions\next_modules = [\n     Extension(\'test_\', [\'test_.pyx\'],\n        include_dirs=include_dirs,\n        ),\n     ]\n\n# Compile\nsetup(\n    cmdclass = {\'build_ext\': build_ext},\n    ext_modules = ext_modules,\n    )\n\nprint(\'Successfully compiled cython file: test_\')\n\n\n===== output when running setup.py\nrunning build_ext\nNo module named msvccompiler in numpy.distutils; trying from distutils\ncythoning test_.pyx to test_.c\nbuilding \'test_\' extension\nC:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\BIN\\cl.exe /c /nologo /Ox /MD /W3 /GS- /DNDEBUG -I. -I""C:\\Program Files (x86)\\python32\\lib\\site-packages\\numpy\\core\\include"" -I""C:\\Program Files (x86)\\python32\\include"" -I""C:\\Program Files (x86)\\python32\\PC"" /Tctest_.c /Fobuild\\temp.win32-3.2\\Release\\test_.obj\nFound executable C:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\BIN\\cl.exe\nC:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\BIN\\link.exe /DLL /nologo /INCREMENTAL:NO /LIBPATH:C:\\Program Files (x86)\\python32\\libs /LIBPATH:C:\\Program Files (x86)\\python32\\PCbuild /EXPORT:PyInit_test_ build\\temp.win32-3.2\\Release\\test_.obj /OUT:C:\\almar\\projects\\py\\cmu1394\\test_.pyd /IMPLIB:build\\temp.win32-3.2\\Release\\test_.lib /MANIFESTFILE:build\\temp.win32-3.2\\Release\\test_.pyd.manifest\nFound executable C:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\BIN\\link.exe\nLINK : fatal error LNK1181: cannot open input file \'Files.obj\''"
2610,7731728,numpy-gitbot,numpy-gitbot,2012-10-19 22:33:08,2012-10-19 22:33:09,2012-10-19 22:33:09,closed,,NumPy 1.7,3,11 - Bug;component: numpy.core;priority: normal,https://api.github.com/repos/numpy/numpy/issues/2610,"b'On 32 bit, uintp and uint32 do not have the same hash (Trac #2017)'","b'_Original ticket http://projects.scipy.org/numpy/ticket/2017 on 2012-01-12 by trac user twiecki, assigned to unknown._\n\n>>> np.uintp\nnumpy.uint32\n>>> np.dtype(np.uintp) == np.dtype(np.uint32) \nTrue\n>>> hash(np.dtype(np.uintp)) == hash(np.dtype(np.uint32))\nFalse\n\nThis creates a problem for using dtypes as dict keys. Also, it seems that this bug is not present on 64 bit, where uintp and uint64 have the same hash.'"
2607,7731722,numpy-gitbot,seberg,2012-10-19 22:33:03,2013-10-22 09:53:32,2013-10-22 09:53:32,closed,,,4,11 - Bug;component: numpy.core;priority: normal,https://api.github.com/repos/numpy/numpy/issues/2607,b'm68k \xa1\xb0long double\xa1\xb1 format isn\xa1\xaft recognised (Trac #2014)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/2014 on 2012-01-11 by @sandrotosi, assigned to unknown._\n\nHello,\na fellow Debian Developer has rebuilt numpy on m68k architecture and reported (http;//bugs.debian.org/655388) a failure in detecting the long double format:\n\n\n\n    [\xa1\xad]\n    compile options: \'-Inumpy/core/src/private -Inumpy/core/src -Inumpy/core -Inumpy/core/src/npymath -Inumpy/core/src/multiarray -Inumpy/core/src/umath -Inumpy/core/include -I/usr/include/python2.6_d -c\'\n    gcc: _configtest.c\n    _configtest.c:4:5: warning: function declaration isn\'t a prototype [-Wstrict-prototypes]\n    success!\n    removing: _configtest.c _configtest.o\n    C compiler: gcc -pthread -fno-strict-aliasing -g -Wall -Wstrict-prototypes -fPIC\n    \n    compile options: \'-Inumpy/core/src/private -Inumpy/core/src -Inumpy/core -Inumpy/core/src/npymath -Inumpy/core/src/multiarray -Inumpy/core/src/umath -Inumpy/core/include -I/usr/include/python2.6_d -c\'\n    gcc: _configtest.c\n    removing: _configtest.c _configtest.o\n    Traceback (most recent call last):\n     File ""setup.py"", line 211, in <module>\n       setup_package()\n     File ""setup.py"", line 204, in setup_package\n       configuration=configuration )\n     File ""/tmp/buildd/python-numpy-1.5.1/numpy/distutils/core.py"", line 186, in setup\n       return old_setup(**new_attr)\n     File ""/usr/lib/python2.6/distutils/core.py"", line 152, in setup\n       dist.run_commands()\n     File ""/usr/lib/python2.6/distutils/dist.py"", line 975, in run_commands\n       self.run_command(cmd)\n     File ""/usr/lib/python2.6/distutils/dist.py"", line 995, in run_command\n       cmd_obj.run()\n     File ""/tmp/buildd/python-numpy-1.5.1/numpy/distutils/command/build.py"", line 37, in run\n       old_build.run(self)\n     File ""/usr/lib/python2.6/distutils/command/build.py"", line 135, in run\n       self.run_command(cmd_name)\n     File ""/usr/lib/python2.6/distutils/cmd.py"", line 333, in run_command\n       self.distribution.run_command(command)\n     File ""/usr/lib/python2.6/distutils/dist.py"", line 995, in run_command\n       cmd_obj.run()\n     File ""/tmp/buildd/python-numpy-1.5.1/numpy/distutils/command/build_src.py"", line 152, in run\n       self.build_sources()\n     File ""/tmp/buildd/python-numpy-1.5.1/numpy/distutils/command/build_src.py"", line 169, in build_sources\n       self.build_extension_sources(ext)\n     File ""/tmp/buildd/python-numpy-1.5.1/numpy/distutils/command/build_src.py"", line 328, in build_extension_sources\n       sources = self.generate_sources(sources, ext)\n     File ""/tmp/buildd/python-numpy-1.5.1/numpy/distutils/command/build_src.py"", line 385, in generate_sources\n       source = func(extension, build_dir)\n     File ""numpy/core/setup.py"", line 434, in generate_config_h\n       rep = check_long_double_representation(config_cmd)\n     File ""numpy/core/setup_common.py"", line 136, in check_long_double_representation\n       type = long_double_representation(pyod(object))\n     File ""numpy/core/setup_common.py"", line 268, in long_double_representation\n       raise ValueError(""Unrecognized format (%s)"" % saw)\n    ValueError: Unrecognized format ([\'000\', \'000\', \'000\', \'000\', \'001\', \'043\', \'105\', \'147\', \'211\', \'253\', \'315\', \'357\', \'300\', \'031\', \'000\', \'000\', \'353\', \'171\', \'242\', \'240\', \'000\', \'000\', \'000\', \'000\', \'376\', \'334\', \'272\', \'230\', \'166\', \'124\', \'062\', \'020\'])\n    [58723 refs]\n    dh_auto_build: python2.6-dbg setup.py build --force returned exit code 1\n\n\n\nthe reported traceback is for 1.5.1 but it applies also for 1.6.1.\n\nRegards,\nSandro'"
2605,7731718,numpy-gitbot,charris,2012-10-19 22:32:59,2014-02-21 04:13:45,2014-02-21 04:12:52,closed,,,3,11 - Bug;component: numpy.core;priority: normal,https://api.github.com/repos/numpy/numpy/issues/2605,"b""Creating an array from a sequence of arrays of datetime64's gives error (Trac #2012)""","b'_Original ticket http://projects.scipy.org/numpy/ticket/2012 on 2012-01-05 by trac user jsalvatier, assigned to unknown._\n\nThis works\n\n\n\n    In [43]: a = array(1.5, complex64)\n    \n    In [44]: array((a,a))\n    Out[44]: array([ 1.5+0.j,  1.5+0.j], dtype=complex64)\n\n\n\nbut this does not\n\n\n\n    In [46]: b = array(datetime(2009, 1, 1, 0, 0), datetime64)\n    \n    In [47]: array((b,b))\n    ---------------------------------------------------------------------------\n    ValueError                                Traceback (most recent call last)\n    \n    C:\\Users\\jsalvatier\\workspace\\varscale\\src\\varscale\\timevars.py in <module>()\n    ----> 1\n          2\n          3\n          4\n          5\n    \n    ValueError: error setting an array element with a sequence\n\n\n'"
2604,7731717,numpy-gitbot,seberg,2012-10-19 22:32:58,2013-04-21 20:38:08,2013-04-21 20:38:08,closed,,,1,11 - Bug;component: numpy.core;priority: normal,https://api.github.com/repos/numpy/numpy/issues/2604,b'nested_iters does not accept length zero nest (and no documentation) (Trac #2011)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/2011 on 2012-01-05 by trac user jsalvatier, assigned to unknown._\n\nWhile using the nested_iters function, I\'ve noticed that it does not accept length zero nestings. For example, the following fails:\n\nnested_iters([ones(3),ones(3)], [[], [0]])\n\nwith ""ValueError: If \'op_axes\' or \'itershape\' is not NULL in theiterator constructor, \'oa_ndim\' must be greater than zero""\n\nThis makes a certain amount of sense to me, but I think having the iterator with the empty axes have a single iteration would be more useful. For example, if you are using nested_iters to ally a function along a specific set of axes, you\'ll otherwise have to special case the case where those axes take up the whole array (which is my use case). This is not much of a hassle for me, but I thought other people might like to know.\n\nAlso, I could not find any nested_iters documentation.'"
2603,7731716,numpy-gitbot,charris,2012-10-19 22:32:57,2014-02-21 04:05:11,2014-02-21 04:05:11,closed,,,2,11 - Bug;component: Other;priority: normal,https://api.github.com/repos/numpy/numpy/issues/2603,b'dtype() construction fails when metadata = None (Trac #2010)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/2010 on 2012-01-04 by trac user tilkau, assigned to unknown._\n\n>>> np.dtype(\'H\', metadata={\'foo\':1})\ndtype(\'uint16\')\n\n>>> np.dtype(\'H\', metadata=None)\nTypeError: argument 4 must be dict, not None\n\nIMO metadata=None makes sense -- it means ""don\'t update the metadata"". Note that this would produce a different result than passing {} -- that results in \'mydtype.metadata\' returning \'dict_proxy({})\' rather than None.\n\nI\'m writing a higher-level dtype+support-system constructor, and currently, due to this bug, I\'m using everywhere this wrapper function instead of np.dtype:\n\ndef dtype(dt, metadata=None, **kwargs):\n    """"""DType wrapper that avoids crashery when metadata=None""""""\n    if metadata:\n        return np.dtype (dt,metadata = metadata, **kwargs)\n    return np.dtype (dt,**kwargs)\n\nThe offending line seems to be around line 237 of core/src/multiarray/descriptor.c\n'"
2602,7731714,numpy-gitbot,numpy-gitbot,2012-10-19 22:32:55,2012-10-19 22:32:55,2012-10-19 22:32:55,closed,,NumPy 1.7,2,11 - Bug;component: numpy.core;priority: high,https://api.github.com/repos/numpy/numpy/issues/2602,b'Forward operations of numpy.ndarray incompatible with numpy.float** (Trac #2009)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/2009 on 2012-01-04 by trac user mrclary, assigned to unknown._\n\nForward operations (+-*/) involving a numpy.ndarray of dtype=object and numpy.float** give a TypeError. Leftward operations do not give a TypeError.[[BR]]\n\n\n    numpy.array([1.], dtype=object) + numpy.float(1)  # OK\n    numpy.array([1.], dtype=object) + numpy.float16(1)  # Not OK\n    numpy.array([1.], dtype=object) + numpy.float32(1)  # Not OK\n    numpy.array([1.], dtype=object) + numpy.float64(1)  # Not OK\n    numpy.array([1.], dtype=object) + numpy.float128(1)  # Not OK\n    numpy.float16(1) + numpy.array([1.], dtype=object)  # OK\n    numpy.float32(1) + numpy.array([1.], dtype=object)  # OK\n    numpy.float64(1) + numpy.array([1.], dtype=object)  # OK\n    numpy.float128(1) + numpy.array([1.], dtype=object)  # OK\n\n\n\nNumpy 1.6.1\nPython 2.7.2\nBoth via MacPorts\nMac OS X 10.7.2'"
2600,7731711,numpy-gitbot,seberg,2012-10-19 22:32:52,2014-02-17 18:27:01,2014-02-17 18:27:01,closed,,,2,11 - Bug;component: numpy.core;priority: normal,https://api.github.com/repos/numpy/numpy/issues/2600,b'Correct handling of empty arrays (Trac #2007)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/2007 on 2011-12-28 by @rgommers, assigned to unknown._\n\nThis is a single ticket to describe issues related to empty arrays.  Triggered by #2587 and discussion on ML starting on 25 Dec 2011 titled ""Indexing empty dimensions with empty arrays"".\n\nEmpty arrays are not handled well in NumPy.  Operations like indexing should have well-defined behavior for empty arrays, and all functions should do something sensible.  A summary of how all this is supposed to work should be added to the User Guide.\n\nIssue: indexing with empty index array doesn\'t work on empty arrays with shape other than (0,):\n\n\n    >>> x = np.ones((5,0))\n    >>> x[idx]  #works\n    array([], shape=(0, 0), dtype=float64)\n    >>> x[:, idx]  #doesn\'t work\n    Traceback (most recent call last):\n      File ""<ipython-input-27-7038691cb565>"", line 1, in <module>\n        x[:, idx]  #doesn\'t work\n    IndexError: invalid index\n\n\n\nIssue: calculating a determinant of an empty array results in a segfault:\n\n\n    np.linalg.det(np.zeros((0,0)))\n    Parameter 4 to routine DGETRF was incorrect\n    <segfault>\n\n\n\nAll functions should do something sensible for all empty input.  Example:\n\n\n    >>> np.meshgrid([], [])   # ok\n    (array([], shape=(0, 0), dtype=float64),\n     array([], shape=(0, 0), dtype=float64))\n    >>> np.meshgrid([], np.ones((3,0)))   # not ok\n    ...\n    ValueError\n\n\n\nPatches to improve handling of empty array are very welcome.  New specific issues can be added to this ticket.'"
2599,7731710,numpy-gitbot,jaimefrio,2012-10-19 22:32:51,2015-06-05 15:43:41,2015-06-05 15:43:41,closed,,,3,11 - Bug;component: numpy.core;Easy Fix;Patch;priority: normal,https://api.github.com/repos/numpy/numpy/issues/2599,"b'Why does recarray assignment fail: ""cannot call setfield on an object array""? (Trac #2006)'","b'_Original ticket http://projects.scipy.org/numpy/ticket/2006 on 2011-12-23 by trac user kevin000, assigned to unknown._\n\nUsing a recarray with member assignment fails if any column uses the object data type.  I don\'t understand why this fails, especially since the dictionary style assignment works.\n\n\n# Brief example showing what recarray assignments succeed or fail\nimport numpy as np\n\n# recarray with integer datatypes\ndt = np.dtype([(\'foo\', \'i8\'), (\'bar\', \'i8\')])\nr = np.zeros((1,3), dtype=dt).view(np.recarray)\nr[\'foo\'] = np.array([1, 2, 3])      # OK\nr.foo = np.array([1, 2, 3])         # OK\n\n# recarray with an object datatype\ndt = np.dtype([(\'foo\', \'i8\'), (\'bar\', \'O8\')])\nr = np.zeros((1,3), dtype=dt).view(np.recarray)\nr[\'foo\'] = np.array([1, 2, 3])      # OK\nr.foo = np.array([1, 2, 3])         # RuntimeError\n\n\nFor the relevant C code search for ""cannot call setfield on an object array"" in this file:\n\nhttps://github.com/numpy/numpy/blob/master/numpy/core/src/multiarray/methods.c\n\nThanks!\n\nKevin\n'"
2597,7731707,numpy-gitbot,numpy-gitbot,2012-10-19 22:32:48,2012-10-23 02:46:25,2012-10-19 22:32:48,closed,,,2,11 - Bug;component: numpy.core;priority: normal,https://api.github.com/repos/numpy/numpy/issues/2597,b'NA incompatible with astype method. (Trac #2004)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/2004 on 2011-12-23 by @charris, assigned to unknown._\n\nTo wit:\n\n\n\n    In [13]: x = ones(5, maskna=1)\n    \n    In [14]: x[2] = NA\n    \n    In [15]: x.astype(double)\n    ---------------------------------------------------------------------------\n    ValueError                                Traceback (most recent call last)\n    /home/charris/<ipython-input-15-c95438174230> in <module>()\n    ----> 1 x.astype(double)\n    \n    ValueError: Cannot assign NA to an array which does not support NAs\n    \n\n\n\nI suspect the easiest thing to do here is propagate the MASKNA flag.'"
2596,7731705,numpy-gitbot,charris,2012-10-19 22:32:46,2014-02-21 03:44:24,2014-02-21 03:44:24,closed,,,2,11 - Bug;component: Other;priority: normal,https://api.github.com/repos/numpy/numpy/issues/2596,b'matlib parse fails on MacOS10.7 but works on Ubuntu 10.04 (Trac #2003)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/2003 on 2011-12-22 by trac user hajons, assigned to unknown._\n\nI have attached a script that parses a matlab file and stores data in a file. It works well on Ubuntu 10.04 with python 2.6.5, but fails on MacOs 10.7 both on python 2.6.1 and 2.7.1 (MacOS version of python). I don\'t have any other problems with python on MacOS. Scipy version 0.11 and numpy version 2.0.0.\n\nThe error message I get on MacOS is this:\nseldmac6145:Proximates 23056164$ python parse_proximity.py realitymining.mat \nDone loading matlab data.\nTraceback (most recent call last):\n  File ""parse_proximity.py"", line 79, in <module>\n    get_events(matlab_obj)\n  File ""parse_proximity.py"", line 18, in get_events\n    subject_mac = int(subject_object.my_mac[0][0][0], 16)\nAttributeError: \'numpy.void\' object has no attribute \'my_mac\''"
2595,7731704,numpy-gitbot,seberg,2012-10-19 22:32:44,2013-12-05 09:20:39,2013-12-05 09:20:39,closed,,,1,11 - Bug;component: Other;priority: normal,https://api.github.com/repos/numpy/numpy/issues/2595,b'doc for concatenate with ndarray argument (Trac #2002)',"b""_Original ticket http://projects.scipy.org/numpy/ticket/2002 on 2011-12-16 by trac user hpaulj, assigned to unknown._\n\nThe doc string for concatenate does not explain what happens when the argument is a single ndarray, as opposed to a tuple of arrays.  kron(), for example, uses concatenate like this to consolidate axes.\n\nIt appears that concatenate(a,axis=n) is equivalent to\nconcatenate([x for x in a], axis=n)\n\nThat is, it splits the array on the 1st axis, and joins the subarrays on their n'th axis.  The net effect is to consolidate the 1st and n+1 axes of a.  \n\nThe same issue applies to the docs for hstack and vstack.\n"""
2594,7731703,numpy-gitbot,seberg,2012-10-19 22:32:42,2013-12-05 09:06:54,2013-12-05 09:06:54,closed,,,4,11 - Bug;component: Other;priority: normal,https://api.github.com/repos/numpy/numpy/issues/2594,b'Seg fault when using r_ incorrectly (Trac #2001)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/2001 on 2011-12-16 by trac user claumann, assigned to unknown._\n\nHowdy-\nJust discovered a segfault when calling r_ on a list of arrays of record type in a recent snapshot. See minimal session below.\nBest, C\n\n\n\n\n    $ python\n    Enthought Python Distribution -- www.enthought.com\n    Version: 7.1-1 (64-bit)\n    \n    Python 2.7.2 |EPD 7.1-1 (64-bit)| (default, Jul  3 2011, 15:56:02) \n    [GCC 4.0.1 (Apple Inc. build 5493)] on darwin\n    Type ""packages"", ""demo"" or ""enthought"" for more information.\n    >>> import numpy as np\n    >>> np.__version__\n    \'2.0.0.dev-26aa3cf\'\n    >>> dat1 = np.zeros(5, dtype=[(\'a\', \'<f8\')])\n    >>> dat2 = np.zeros(5, dtype=[(\'a\', \'<f8\')])\n    >>> np.r_[dat1,dat2]\n    array([(0.0,), (0.0,), (0.0,), (0.0,), (0.0,), (0.0,), (0.0,), (0.0,),\n           (0.0,), (0.0,)], \n          dtype=[(\'a\', \'<f8\')])\n    >>> np.r_[[dat1,dat2]]\n    Segmentation fault: 11\n    \n    $ uname -a\n    Darwin blackbear.local 11.2.0 Darwin Kernel Version 11.2.0: Tue Aug  9 20:54:00 PDT 2011; root:xnu-1699.24.8~1/RELEASE_X86_64 x86_64\n    \n    \n\n\n'"
2593,7731702,numpy-gitbot,seberg,2012-10-19 22:32:41,2013-12-05 09:09:27,2013-12-05 09:09:27,closed,,,1,11 - Bug;component: Other;priority: normal,https://api.github.com/repos/numpy/numpy/issues/2593,b'numpy.add.reduceat no longer works on degenerate arrays (Trac #2000)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/2000 on 2011-12-16 by trac user dalleyg, assigned to unknown._\n\nThe following works on numpy 1.4.1:\n\n$ python -c \'from numpy import *; print __version__; print add.reduceat(zeros((0,)), [])\'\n1.4.1\n[]\n\nbut does not work on 1.6.1:\n\npython -c \'from numpy import *; print __version__; print add.reduceat(zeros((0,)), [])\'\n1.6.1\nTraceback (most recent call last):\n  File ""<string>"", line 1, in <module>\nValueError: cannot remove a zero-sized axis from an iterator\n\nIt would be helpful if it could be made to work again (e.g. it should return the input array if both the ""a"" and ""indices"" input arrays are empty).'"
2592,7731701,numpy-gitbot,charris,2012-10-19 22:32:39,2013-07-08 16:16:57,2013-07-08 16:16:57,closed,,,3,11 - Bug;component: numpy.core;priority: normal,https://api.github.com/repos/numpy/numpy/issues/2592,b'fromiter swallows exceptions (Trac #1999)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/1999 on 2011-12-16 by trac user ged, assigned to unknown._\n\nnumpy.fromiter with a count argument hides any exception that might be raised by the iterator as: ValueError: iterator too short\n\nThis is quite annoying because it makes for a totally ununderstandable/unrelated exception in many cases.\n\nThis was already reported on the mailing list by smund Hjulstad a few months ago but AFAIK nobody ever answered him.\n\nThis bug is present in numpy 1.6.1 but I think it has been there for quite a while.\n\nSee attached test case.'"
2591,7731698,numpy-gitbot,charris,2012-10-19 22:32:37,2014-04-05 20:49:38,2014-04-05 20:49:38,closed,,,2,11 - Bug;component: Other;Easy Fix;Patch;priority: normal,https://api.github.com/repos/numpy/numpy/issues/2591,b'loadtxt should give line numbers of problems (Trac #1998)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/1998 on 2011-12-15 by @samtygier, assigned to unknown._\n\ncurrently input like\n\n\n    1 2 3\n    4 5 6\n    78\n\n\nwill cause loadtxt to give the following error\n\n\n    Traceback (most recent call last):\n      File ""./np_lt.py"", line 5, in <module>\n        numpy.loadtxt(sys.argv[1])\n      File ""/usr/lib/python2.7/site-packages/numpy/lib/npyio.py"", line 804, in loadtxt\n        X = np.array(X, dtype)\n    ValueError: setting an array element with a sequence.\n\n\n\nThis would be far more useful, if it contained some information about where the problem was.\n\nThis is similar to the bug #1810 , but for the loadtxt function.\n\nI attach a patch that gives the following message:\n\n\n    ValueError: Wrong number of columns at line 3\n\n\nit also provides a test that the input raises the correct error. Inconveniently it is the same error type as before, so the test is not very useful. However I thing ValueError is probably the most appropriate in this case. Maybe there is a way to check the exception message.'"
2590,7731697,numpy-gitbot,charris,2012-10-19 22:32:35,2014-02-21 03:37:37,2014-02-21 03:37:37,closed,,,1,11 - Bug;component: numpy.core;priority: normal,https://api.github.com/repos/numpy/numpy/issues/2590,b'asarray may truncate strings if the input has numbers (Trac #1997)',"b""_Original ticket http://projects.scipy.org/numpy/ticket/1997 on 2011-12-15 by trac user dalleyg, assigned to unknown._\n\nIn the following example, numpy.asarray chooses the dtype '|S1', causing the integer 10's string form to be truncated to '1'\n\n>>> numpy.asarray(['1', 10])\narray(['1', '1'],\n      dtype='|S1')\n\n>>> numpy.__version__\n'1.6.1'\n"""
2589,7731696,numpy-gitbot,numpy-gitbot,2012-10-19 22:32:33,2012-10-19 22:32:34,2012-10-19 22:32:34,closed,,,1,11 - Bug;component: Other;priority: normal,https://api.github.com/repos/numpy/numpy/issues/2589,b'sin(180) != 0 (Trac #1996)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/1996 on 2011-12-14 by trac user ilshat, assigned to unknown._\n\n>>> import math\n>>> math.sin(math.pi)\n1.2246467991473532e-16\n\nMust calculate more precisely!'"
2588,7731694,numpy-gitbot,seberg,2012-10-19 22:32:32,2013-12-09 15:32:27,2013-12-09 15:32:27,closed,,,3,11 - Bug;component: numpy.core;priority: normal,https://api.github.com/repos/numpy/numpy/issues/2588,b'DOC: numpy.correlate() docstring is wrong (Trac #1995)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/1995 on 2011-12-13 by trac user O.C., assigned to unknown._\n\nThe docstring of numpy.correlate() indicates:\nz[k] = sum_n a[n] * conj(v[n+k])\n\nThis is wrong. According to my tests, the real behavior is in fact:\nz[k] = sum_n a[n] * conj(v[n-k]) \nor equivalently:\nz[k] = sum_n a[k+n] * conj(v[n]) '"
2587,7731693,numpy-gitbot,seberg,2012-10-19 22:32:29,2013-05-11 15:45:25,2013-05-11 15:45:25,closed,,,6,11 - Bug;component: numpy.core;priority: normal,https://api.github.com/repos/numpy/numpy/issues/2587,b'Empty indices in empty arrays raise IndexError (Trac #1994)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/1994 on 2011-12-13 by trac user jordigh, assigned to unknown._\n\nLet x be an array and consider the following expression:\n\n\n\n    x[:, idx]\n\n\n\nThis should be valid as long as all elements of idx are nonnegative integers less than x.shape[1], right?\n\nHowever, this is not true if, say, x.shape == (5, 0) and idx = []. The statement ""all elements of idx are nonnegative integers less than 0"" is still true, however this causes an error.\n\nNote that the following does not error out, however:\n\n\n\n    x = np.array([])\n    x[ [] ]\n\n\n\nSo this looks like a bug to me. I have had independent confirmation in IRC of this behaviour in 1.6.1 and 1.5.0.\n\nThe reason why I would like this fixed is that I don\'t want to have to special-case my indexing code for indexing arrays with empty dimensions with an empty index array. I could work around this, but I would rather not.'"
2585,7731688,numpy-gitbot,ahaldane,2012-10-19 22:32:26,2016-06-02 16:51:24,2016-06-02 16:51:24,closed,,,1,11 - Bug;component: Other;priority: normal,https://api.github.com/repos/numpy/numpy/issues/2585,b'data leakage with S0 in record dtype (Trac #1992)',"b""_Original ticket http://projects.scipy.org/numpy/ticket/1992 on 2011-12-12 by trac user hpaulj, assigned to unknown._\n\nAs of numpy 1.5.1 (and earlier)\n\n\n\n\n    >>> x = np.zeros(1, 'S,i')\n    >>> x['f0']='A'\n    >>> x\n    array([('', 65)], dtype=[('f0','|S0'),('f1','<i4')])\n\n\n\n\nIn contrast, if the assigned dtype is \n'S1,i'\n, x is then ('A',0)\n\nSo not only is there ambiguity as to what a 'S' dtype produces (as discussed in other tickets), but assignment to that record leaks over to the adjacent field.\n\nI first encountered this in an introduction to numpy for Ironpython, but it occurs in all versions that I've tested.\n"""
2583,7731683,numpy-gitbot,numpy-gitbot,2012-10-19 22:32:22,2012-10-19 22:32:23,2012-10-19 22:32:23,closed,,NumPy 1.7,6,11 - Bug;component: numpy.core;priority: normal,https://api.github.com/repos/numpy/numpy/issues/2583,b'Data can be truncated in creation of an array from a mixed sequence of numeric values and strings (Trac #1990)',"b""_Original ticket http://projects.scipy.org/numpy/ticket/1990 on 2011-12-05 by @thouis, assigned to unknown._\n\nWhen an array is created from a sequence of numeric (boolean, int, float, complex) and string (bytes, str, unicode) values, the resulting array type is string, but only the string values are being used to choose the string length, leading to truncation of data.\n\nCode:\nimport numpy as np\nfor numericval in [True, 1234, 123.4, complex(1, 3)]:\n    for stringconversion in [str, unicode, bytes]:\n       print repr(np.array([numericval, stringconversion('abc')]))\n\nResult:\narray(['Tru', 'abc'], \n      dtype='|S3')\narray([u'Tru', u'abc'], \n      dtype='<U3')\narray(['Tru', 'abc'], \n      dtype='|S3')\narray(['123', 'abc'], \n      dtype='|S3')\narray([u'123', u'abc'], \n      dtype='<U3')\narray(['123', 'abc'], \n      dtype='|S3')\narray(['123', 'abc'], \n      dtype='|S3')\narray([u'123', u'abc'], \n      dtype='<U3')\narray(['123', 'abc'], \n      dtype='|S3')\narray(['(1+', 'abc'], \n      dtype='|S3')\narray([u'(1+', u'abc'], \n      dtype='<U3')\narray(['(1+', 'abc'], \n      dtype='|S3')\n"""
2581,7731680,numpy-gitbot,numpy-gitbot,2012-10-19 22:32:18,2012-10-19 22:32:19,2012-10-19 22:32:19,closed,,NumPy 1.7,4,11 - Bug;component: numpy.core;priority: normal,https://api.github.com/repos/numpy/numpy/issues/2581,"b""ndarray.min failure with dtype='O' on Python 3.1 (Trac #1988)""","b""_Original ticket http://projects.scipy.org/numpy/ticket/1988 on 2011-11-25 by @wesm, assigned to unknown._\n\nThis little fun bug came up when I was running my pandas test suite on Python 3.1\n\narr = np.array([-0.05, 0, 0.04], dtype='O')\narr.min()\n\nreturns 0.04 on NumPy 1.6.1, Python 3.1.4. Will test on 3.2 also..."""
2580,7731678,numpy-gitbot,numpy-gitbot,2012-10-19 22:32:16,2012-10-19 22:32:17,2012-10-19 22:32:17,closed,,,3,11 - Bug;component: Other;priority: normal,https://api.github.com/repos/numpy/numpy/issues/2580,b'polyfit and basic arithmetic function errors with clang on Mac OS X Lion (Trac #1987)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/1987 on 2011-11-23 by trac user deil, assigned to unknown._\n\nI get two test failures of 2.0.0.dev-7f302cc with clang.\n\nFurthermore I get a MismatchCAPIWarning when building numpy, which results in a `""Using deprecated NumPy API""` when building scipy.\n\nThe full build and test logs are attached.\n\nSee http://mail.scipy.org/pipermail/scipy-user/2011-November/031042.html\n\nSystem info:\n\n\n    Mac OS X Lion 10.7.2 (11C74)\n    XCode 4.2.1 (4D502)\n    \n    $ which python; python\n    /opt/local/bin/python\n    Python 2.7.2 (default, Nov 23 2011, 11:40:08) \n    [GCC 4.2.1 (Based on Apple Inc. build 5658) (LLVM build 2335.15.00)] on darwin\n    \n    $ which clang; clang --version\n    /usr/bin/clang\n    Apple clang version 3.0 (tags/Apple/clang-211.12) (based on LLVM 3.0svn)\n    Target: x86_64-apple-darwin11.2.0\n    \n    $ which gfortran; gfortran --version\n    /opt/local/bin/gfortran\n    GNU Fortran (GCC) 4.4.6\n\n\n\nTest warning and failures:\n\n\n    /Users/deil/Library/Python/2.7/lib/python/site-packages/numpy/ma/core.py:4778: RuntimeWarning: invalid value encountered in power\n      np.power(out, 0.5, out=out, casting=\'unsafe\')\n    ======================================================================\n    FAIL: Test basic arithmetic function errors\n    ----------------------------------------------------------------------\n    Traceback (most recent call last):\n      File ""/Users/deil/Library/Python/2.7/lib/python/site-packages/numpy/core/tests/test_numeric.py"", line 319, in test_floating_exceptions\n        lambda a,b:a*b, ft_tiny, ft_tiny)\n      File ""/Users/deil/Library/Python/2.7/lib/python/site-packages/numpy/core/tests/test_numeric.py"", line 270, in assert_raises_fpe\n        ""Type %s did not raise fpe error \'%s\'."" % (ftype, fpeerr))\n      File ""/Users/deil/Library/Python/2.7/lib/python/site-packages/numpy/testing/utils.py"", line 34, in assert_\n        raise AssertionError(msg)\n    AssertionError: Type <type \'numpy.complex64\'> did not raise fpe error \'\'.\n    \n    ======================================================================\n    FAIL: Tests polyfit\n    ----------------------------------------------------------------------\n    Traceback (most recent call last):\n      File ""/Users/deil/Library/Python/2.7/lib/python/site-packages/numpy/ma/tests/test_extras.py"", line 622, in test_polyfit\n        assert_almost_equal(a, a_)\n      File ""/Users/deil/Library/Python/2.7/lib/python/site-packages/numpy/ma/testutils.py"", line 155, in assert_almost_equal\n        err_msg=err_msg, verbose=verbose)\n      File ""/Users/deil/Library/Python/2.7/lib/python/site-packages/numpy/ma/testutils.py"", line 221, in assert_array_almost_equal\n        header=\'Arrays are not almost equal\')\n      File ""/Users/deil/Library/Python/2.7/lib/python/site-packages/numpy/ma/testutils.py"", line 186, in assert_array_compare\n        verbose=verbose, header=header)\n      File ""/Users/deil/Library/Python/2.7/lib/python/site-packages/numpy/testing/utils.py"", line 677, in assert_array_compare\n        raise AssertionError(msg)\n    AssertionError: \n    Arrays are not almost equal\n    \n    (mismatch 100.0%)\n     x: array([ 4.25134878,  1.14131297,  0.20519666,  0.01701   ])\n     y: array([ 1.9345248 ,  0.49711011,  0.10202554,  0.00928034])\n\n\n\nMismatchCAPIWarning in numpy build:\n\n\n    numpy/core/setup_common.py:86: MismatchCAPIWarning: API mismatch detected, the C API version numbers have to be updated. Current C api version is 6, with checksum eb54c77ff4149bab310324cd7c0cb176, but recorded checksum for C API version 6 in codegen_dir/cversions.txt is e61d5dc51fa1c6459328266e215d6987. If functions were added in the C API, you have to update C_API_VERSION  in numpy/core/setup_common.py.\n      MismatchCAPIWarning)\n\n\n\nWarning in scipy build:\n\n\n    /Users/deil/Library/Python/2.7/lib/python/site-packages/numpy/core/include/numpy/npy_deprecated_api.h:11:2: warning: #warning ""Using deprecated NumPy API, disable it by #defining NPY_NO_DEPRECATED_API"" [-W#warnings]\n\n\n\nI also see this C API Warning on a Linux machine. Is this a bug in numpy or an installation problem on my side? Does it have any consequences on numpy / scipy working properly?\n\nThe polyfit failure apparently is known, on the mailing list Charles Harris wrote:\n""Don\'t worry about this one, it comes from Travis changing the unmasked version of polyfit which changes the singular values, etc.""'"
2579,7731677,numpy-gitbot,numpy-gitbot,2012-10-19 22:32:13,2012-10-19 22:32:14,2012-10-19 22:32:14,closed,,,2,11 - Bug;component: numpy.distutils;priority: normal,https://api.github.com/repos/numpy/numpy/issues/2579,b'Fix bento build with macport gfortran (Trac #1986)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/1986 on 2011-11-22 by @cournape, assigned to @cournape._\n\nSee https://github.com/cournape/Bento/issues/62'"
2578,7731675,numpy-gitbot,numpy-gitbot,2012-10-19 22:32:12,2012-10-23 02:46:19,2012-10-19 22:32:12,closed,,,1,11 - Bug;component: Other;priority: normal,https://api.github.com/repos/numpy/numpy/issues/2578,b'histogram2d (Trac #1985)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/1985 on 2011-11-22 by trac user gsiisg, assigned to unknown._\n\nI notice that when I plot two variables, the x and y axis are flipped according to the online example, so I did a simple distribution of points\n\nx=np.array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10,  1])\ny=np.array([ 10,  20,  30,  40,  50,  60,  70,  80,  90, 100, 100])\nH, yedges, xedges = np.histogram2d(y,x)\nextent = [xedges[0], xedges[-1], yedges[0], yedges[-1]]\npylab.imshow(H, extent=extent, interpolation=\'nearest\',origin=\'lower\',aspect=\'auto\')\n\nI had to enter into histgram2d() the ""y"" before the ""x"" to get the graph to come out as expected.'"
2577,7731674,numpy-gitbot,charris,2012-10-19 22:32:09,2014-02-21 01:13:04,2014-02-21 01:13:04,closed,,,6,11 - Bug;component: Other;priority: normal,https://api.github.com/repos/numpy/numpy/issues/2577,b'Bento build script does not populate version.py (Trac #1984)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/1984 on 2011-11-20 by @stefanv, assigned to unknown._\n\nCurrently, building by Bento does not generate versions inside of version.py, breaking other projects such as matplotlib.'"
2576,7731673,numpy-gitbot,seberg,2012-10-19 22:32:08,2013-03-31 22:04:36,2013-03-31 22:04:36,closed,,NumPy 2.0,3,11 - Bug;component: numpy.core;priority: normal,https://api.github.com/repos/numpy/numpy/issues/2576,b'segmentation fault with dot product of sparse matrices (Trac #1983)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/1983 on 2011-11-18 by trac user fp4code, assigned to unknown._\n\nThe dot product of two sparse matrices crashes python.\nThe defect has appeared with\n\n\n\n    commit 867cabefe92b127b765580432b4c05d92342e275\n    Author: Mark Wiebe <mwiebe@enthought.com>\n    Date:   Fri Jul 22 10:24:14 2011 -0500\n\n\n\nHere an example:\n\n\n\n    ######################################\n    import sys, numpy, scipy, scipy.sparse\n    md = numpy.matrix(numpy.zeros((2,2))); md[0,1]=-1; md[1,0]=1\n    ms = scipy.sparse.lil_matrix(md)\n    print(sys.version)           # 2.7.2 [GCC 4.5.2]\n    print(numpy.version.version) # 2.0.0.dev-867cabe to 7297785\n    print(scipy.version.version) # 0.11.0.dev-badad3f or earlier\n    print(md*md)                 # OK\n    print(numpy.dot(md,md))      # OK\n    print(ms*ms)                 # OK\n    print(numpy.dot(ms,ms))      # Segmentation fault #\n    ###################################################\n\n'"
2575,7731671,numpy-gitbot,charris,2012-10-19 22:32:05,2014-02-21 01:12:21,2014-02-21 01:12:21,closed,,,4,11 - Bug;component: numpy.core;priority: normal,https://api.github.com/repos/numpy/numpy/issues/2575,b'In-place arithmetic operations: wrong calculation order? (Trac #1982)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/1982 on 2011-11-18 by trac user ling, assigned to unknown._\n\nIn-place operation like ""subtract(b[:-1], b[1:], b[:-1])"" used to work fine in Numpy 1.4.1, but sometimes fails with Numpy 1.6.0.  See the example below (the problematic output is Out[6]):\n\n\n\n    In [1]: import numpy; numpy.__version__\n    Out[1]: \'1.6.0\'\n    \n    In [2]: a = numpy.arange(12).reshape((3, 4))\n    \n    In [3]: b = a[::-1].copy(); numpy.subtract(b[:-1], b[1:])\n    Out[3]: \n    array([[4, 4, 4, 4],\n           [4, 4, 4, 4]])\n    \n    In [4]: numpy.subtract(b[:-1], b[1:], b[:-1])\n    Out[4]: \n    array([[4, 4, 4, 4],\n           [4, 4, 4, 4]])\n    \n    In [5]: b = a[::-1]; numpy.subtract(b[:-1], b[1:])\n    Out[5]: \n    array([[4, 4, 4, 4],\n           [4, 4, 4, 4]])\n    \n    In [6]: numpy.subtract(b[:-1], b[1:], b[:-1])\n    Out[6]: \n    array([[4, 5, 6, 7],\n           [4, 4, 4, 4]])\n\n\n\nSimilar problem happens to other in-place operations (e.g., multiply, divide).\n'"
2574,7731669,numpy-gitbot,seberg,2012-10-19 22:32:04,2013-12-09 15:37:55,2013-12-09 15:37:55,closed,,,4,11 - Bug;component: Other;priority: normal,https://api.github.com/repos/numpy/numpy/issues/2574,b'numpy crash under windows with a very big array (Trac #1981)',"b""_Original ticket http://projects.scipy.org/numpy/ticket/1981 on 2011-11-15 by trac user bred, assigned to unknown._\n\nI'm using: [[BR]]\npython 3.2 (32bit) [[BR]]\nnumpy 1.6.1 (32bit) [[BR]]\nWindows 7 (64 bit) [[BR]]\n\n\nIn some case numpy crash if we use a very big array.\n\nfor example try this:\n\n\n\n    import numpy\n    y = numpy.ones( (40393836, 2) )\n    y + 1\n\n\n\n\nAs a result python crash while it's computing y + 1"""
2573,7731667,numpy-gitbot,seberg,2012-10-19 22:32:02,2013-11-13 17:44:50,2013-11-13 17:44:50,closed,,,2,11 - Bug;component: Other;priority: normal,https://api.github.com/repos/numpy/numpy/issues/2573,"b'Matrix A from zeros, after changing values, yields strange A*A.T behavior (Trac #1980)'","b'_Original ticket http://projects.scipy.org/numpy/ticket/1980 on 2011-11-15 by trac user ehassler, assigned to unknown._\n\nApologies if this is expected behavior, or if dupe.  I searched trac for ""zeros"" and ""multiply"" and found nothing that described this.\n  \nI\'m making a permutation matrix P, starting with zeros and setting the 1\'s.  When I do P.T*P or P*P.T I get all 0\'s back.  But if I multiply P by an identical matrix manually constructed, or if I use asmatrix to redefine P as itself, I get the expected behavior (that is, I get an identity matrix back).  I\'ve included example code at the bottom.\n\nIt seems like either one of the following should happen:\n- P should zero out everything it\'s multiplied into and raise errors when I change a value, forcing it to be all zeros all the time.\n- P*P.T = I\n\n\n\nimport numpy;\n\nP0 = numpy.zeros((6,6),dtype=numpy.float64);\nfor coord in zip(range(6),(1,3,5,0,2,4)):\n\tP0[coord[0],coord[1]] = 1.;\n\nP1 = numpy.matrix([\n\t[ 0.,  1.,  0.,  0.,  0.,  0.],\n\t[ 0.,  0.,  0.,  1.,  0.,  0.],\n\t[ 0.,  0.,  0.,  0.,  0.,  1.],\n\t[ 1.,  0.,  0.,  0.,  0.,  0.],\n\t[ 0.,  0.,  1.,  0.,  0.,  0.],\n\t[ 0.,  0.,  0.,  0.,  1.,  0.]\n], dtype=numpy.float64);\n\nprint numpy.all(P0 == P1);  # True\n\nprint numpy.all(P0*P0.T == P1*P1.T) # False\n\nprint numpy.all(P0*P1.T == P1*P1.T) # True\n\nprint numpy.all(P1*P0.T == P1*P1.T) # True\n\nP0 = numpy.asmatrix(P0,dtype=numpy.float64);\n\nprint numpy.all(P0*P0.T == P1*P1.T) # True'"
2572,7731665,numpy-gitbot,njsmith,2012-10-19 22:32:01,2015-10-19 03:05:17,2015-10-19 03:05:17,closed,,,2,11 - Bug;component: Other;priority: normal,https://api.github.com/repos/numpy/numpy/issues/2572,b'empty_like does not copy mask (Trac #1979)',"b""_Original ticket http://projects.scipy.org/numpy/ticket/1979 on 2011-11-14 by trac user mauro, assigned to unknown._\n\nIf empty_like (and also zeros_like, ones_like) is called with a masked array, then the returned array's mask is identical to the originals (i.e. shares same reference).\n\nI think what should happen is that a new mask is returned set to False."""
2569,7731660,numpy-gitbot,charris,2012-10-19 22:31:56,2014-02-21 02:43:07,2014-02-21 02:43:07,closed,,,2,11 - Bug;component: numpy.linalg;priority: normal,https://api.github.com/repos/numpy/numpy/issues/2569,b'linalg.qr returns incorrect shape for nx1 arrays (Trac #1976)',"b""_Original ticket http://projects.scipy.org/numpy/ticket/1976 on 2011-11-10 by trac user bransfop, assigned to @pv._\n\nScipy's linalg.qr returns the correct shape when decomposing the vector [[1],[0]] while Numpy's linalg.qr does not. The correct shape should be 2x2 for Q and 2x1 for R. Numpy's linalg.qr returns a 2x1 and 1x1 array while Scipy's linalg.qr returns a 2x2 and 2x1 array. Scipy is correct. """
2568,7731659,numpy-gitbot,numpy-gitbot,2012-10-19 22:31:55,2012-10-19 22:31:55,2012-10-19 22:31:55,closed,,,1,11 - Bug;component: Other;priority: normal,https://api.github.com/repos/numpy/numpy/issues/2568,b'[Mixing integers and floats] : wrong results in algebraic equation (Trac #1975)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/1975 on 2011-11-09 by trac user bde, assigned to unknown._\n\nI\'m experiencing a strange behavior of numpy when using a ndarray filled with integers in an algebraic equation with floats. See code snippet below :\n\n\n\n\n    >>>import numpy\n    >>> def A(ar): return ((12200**2)*(ar**4)) / ( (ar**2+20.6**2) * (ar**2+12200**2) * (ar**2+107.7**2)**0.5 * (ar**2+737.9**2)**0.5 )\n    ... \n    >>> A(numpy.array([1,2,3])) //array with integers\n    array([  2.95808751e-08,  -3.77586449e-07,  -1.61632406e-07]) // negative numbers are wrong (A is never negative)\n    >>> A(numpy.array([1,2.0,3.0])) //array of int and floats\n    array([  2.95808751e-08,   4.69917244e-07,   2.35099089e-06]) // correct!\n    >>> A(numpy.array([1.,2,3.0]))  \n    array([  2.95808751e-08,   4.69917244e-07,   2.35099089e-06]) // correct!\n    >>> A(1)\n    2.9580875078524171e-08\n    >>> A(1.)\n    2.9580875078524171e-08\n    >>> A(2)\n    4.6991724410274925e-07\n    >>> A(2.0)\n    4.6991724410274925e-07\n    \n\n\n\nIs it a problem related to the way numpy makes the cast from int to float ? This is strange because there is no need to have ALL the numbers \nof ""ar"" to be float in order to make it work, one can remain int as you can see below...'"
2567,7731658,numpy-gitbot,charris,2012-10-19 22:31:54,2013-06-16 02:26:17,2013-06-16 02:26:17,closed,,,2,11 - Bug;component: numpy.ma;priority: normal,https://api.github.com/repos/numpy/numpy/issues/2567,b'Subscript assignment on `hard_mask` masked array produces wrong result whenever the subscripted mask returns all False (i.e. `nomask`) (Trac #1974)',"b""_Original ticket http://projects.scipy.org/numpy/ticket/1974 on 2011-11-08 by trac user codewarrior, assigned to @pierregm._\n\nUsing subscript assignment on a `hard_mask` masked array with a slice or other index that selects a fully unmasked section of the masked array will result in the second item of the section being assigned to instead of the entire section.\n\nUpon investigating, it is because mask_or reduces the fully unmasked section of the mask to a single 'nomask' value, which is negated and used to subscript-assign the section of the data array. This is incorrect because negating 'nomask' produces a single 'True' value, which turns into a '1' and selects the second item of the section.\n\nThis is apparently due to a brain fart on line 3038 of numpy.ma.core.py, in the final else: clause of MaskedArray.__setitem__()\n\nThe original code reads:\n\n\n\n    \n    mindx = mask_or(_mask[indx], mval, copy=True)\n    dindx = self._data[indx]\n    if dindx.size > 1:\n        dindx[~mindx] = dval\n    elif mindx is nomask:\n        dindx = dval\n    \n\n\n\nIt seems like it should be checking 'mindx.size' and not 'dindx.size' because mask_or is free to shrink the return value down to 'nomask' which would have size 1. When I use this corrected code, I no longer observe the problem:\n\n\n\n    \n    mindx = mask_or(_mask[indx], mval, copy=True)\n    dindx = self._data[indx]\n    if mindx.size > 1:\n        dindx[~mindx] = dval\n    elif mindx is nomask:\n        dindx = dval\n\n\n\nThis was apparently fixed in  https://github.com/numpy/numpy/commit/a6e869b70b09df9381d341ed0d2b18f88d8fe3d6 but that fix can't be backported to 1.6 because it uses np.copyto().\n\n\nHere is code that demonstrates the error.\n\n\n\n    \n    >>> from numpy import *\n    >>> a = arange(30)\n    >>> a.shape=5,6\n    >>> b = zeros_like(a)\n    >>> m = ma.masked_array(a,b,hard_mask=True) #only happens when hard_mask is True\n    >>> m\n    \n    masked_array(data =\n     [[0 1 2 3 4 5]\n     [6 7 8 9 10 11]\n     [12 13 14 15 16 17]\n     [18 19 20 21 22 23]\n     [24 25 26 27 28 29]],\n                 mask =\n     [[False False False False False False]\n     [False False False False False False]\n     [False False False False False False]\n     [False False False False False False]\n     [False False False False False False]],\n           fill_value = 999999)\n    \n    >>> m[:] = 333\n    >>> m                      #entire array should be 333 now\n    masked_array(data =\n     [[0 1 2 3 4 5]\n     [333 333 333 333 333 333] #uh-oh, only the second element is set\n     [12 13 14 15 16 17] \n     [18 19 20 21 22 23]\n     [24 25 26 27 28 29]],\n                 mask =\n     [[False False False False False False]\n     [False False False False False False]\n     [False False False False False False]\n     [False False False False False False]\n     [False False False False False False]],\n           fill_value = 999999)\n\n\n"""
2566,7731657,numpy-gitbot,numpy-gitbot,2012-10-19 22:31:50,2012-10-19 22:31:52,2012-10-19 22:31:52,closed,,NumPy 1.7,5,11 - Bug;component: numpy.ma;priority: high,https://api.github.com/repos/numpy/numpy/issues/2566,b'The *.astype method output array loses the maskna property. (Trac #1973)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/1973 on 2011-11-04 by @bsouthey, assigned to @pierregm._\n\nI get an error when displaying a masked array that contains the new missing value, np.NA under 64-bit Linux. But the operations seem to work as expected.\n\n\n\n    >>> import numpy as np\n    >>> np.__version__\n    \'2.0.0.dev-7297785\'\n    >>> b=np.ma.array([3,5,np.NA,6], mask=[0,0,1,0])\n    >>> b\n    Traceback (most recent call last):\n      File ""<stdin>"", line 1, in <module>\n      File ""/usr/lib64/python2.7/site-packages/numpy/ma/core.py"", line 3551, in __repr__\n        data=str(self), mask=str(self._mask),\n      File ""/usr/lib64/python2.7/site-packages/numpy/ma/core.py"", line 3534, in __str__\n        res = self._data.astype(""O"")\n    ValueError: Cannot assign NA to an array which does not support NAs\n    >>> b._data\n    array([3, 5, NA, 6])\n    >>> b.sum()\n    14\n    >>> b.mask=[0,0,0,0]\n    >>> b\n    Traceback (most recent call last):\n      File ""<stdin>"", line 1, in <module>\n      File ""/usr/lib64/python2.7/site-packages/numpy/ma/core.py"", line 3551, in __repr__\n        data=str(self), mask=str(self._mask),\n      File ""/usr/lib64/python2.7/site-packages/numpy/ma/core.py"", line 3534, in __str__\n        res = self._data.astype(""O"")\n    ValueError: Cannot assign NA to an array which does not support NAs\n    >>> b.sum()\n    NA(dtype=\'int64\')\n\n\n'"
2561,7731651,numpy-gitbot,charris,2012-10-19 22:31:44,2013-10-12 19:55:05,2013-10-10 21:14:55,closed,,,1,11 - Bug;component: numpy.lib;priority: normal,https://api.github.com/repos/numpy/numpy/issues/2561,b'PY3K bug in numpy.info (numpy/lib/utils.py) (Trac #1968)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/1968 on 2011-10-24 by @WarrenWeckesser, assigned to unknown._\n\nThe problem was reported in a scipy ticket:\n\n    http://projects.scipy.org/scipy/ticket/1541\n\nbut it is a Py3K issue in numpy.info.  Specifically, the code in numpy/lib/utils.py uses types.InstanceType, but that name no longer exists in Python 3.x.\n'"
2560,7731650,numpy-gitbot,charris,2012-10-19 22:31:42,2014-02-21 00:37:08,2014-02-21 00:37:08,closed,,NumPy 2.0,2,11 - Bug;component: Other;priority: normal,https://api.github.com/repos/numpy/numpy/issues/2560,b'Buffer test error on python 3. (Trac #1967)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/1967 on 2011-10-23 by @charris, assigned to @pv._\n\n\n\n    ERROR: test_multiarray.TestFromBuffer.test_empty(\'\', array([], dtype=float64), {})\n    ----------------------------------------------------------------------\n    Traceback (most recent call last):\n      File ""/usr/lib/python3.2/site-packages/nose/case.py"", line 198, in runTest\n        self.test(*self.arg)\n      File ""/home/charris/.local/lib/python3.2/site-packages/numpy/core/tests/test_multiarray.py"", line 1446, in tst_basic\n        assert_array_equal(np.frombuffer(buffer,**kwargs),expected)\n    AttributeError: \'str\' object has no attribute \'__buffer__\'\n    \n\n\n'"
2559,7731649,numpy-gitbot,charris,2012-10-19 22:31:41,2014-02-21 00:36:20,2014-02-21 00:36:20,closed,,,1,11 - Bug;component: numpy.distutils;priority: high,https://api.github.com/repos/numpy/numpy/issues/2559,b'numpy distutils fails to recognize current gfortran from mingw (Trac #1966)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/1966 on 2011-10-22 by trac user jarrodwilcox, assigned to @cournape._\n\nThere is no gfortran.py file in the directory.\n\nThere is a gnu file that in theory recognizes gfortran as an f77 compiler.  However, it does not appear to recognize the current gfortran.exe version distributed by MinGW.\n\nIdeally, a gfortran.py file is needed.  however, at least F77 code could be compiled in f2py if gnu were fixed.\n\nif you can not replicate the error in five minutes with a Windows 32 machine, please email me for further details.'"
2557,7731646,numpy-gitbot,numpy-gitbot,2012-10-19 22:31:38,2012-10-23 02:46:18,2012-10-19 22:31:38,closed,,,1,11 - Bug;component: Other;priority: normal,https://api.github.com/repos/numpy/numpy/issues/2557,b'followup to  #1962 (Trac #1964)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/1964 on 2011-10-18 by trac user linden_paul, assigned to unknown._\n\nI narrowed the problem down to a group of pyd files includeing multiarray.pyd in the numpy core.  I have embedded python in MATLAB.  However, a call to these pyd files in the numpy core cause MATLAB to fail.  Is this a MATLAB problem or a Numpy problem?\n\nfollow-up to ticket  #2555'"
2556,7731645,numpy-gitbot,numpy-gitbot,2012-10-19 22:31:36,2012-10-19 22:31:37,2012-10-19 22:31:37,closed,,,1,11 - Bug;component: Other;priority: high,https://api.github.com/repos/numpy/numpy/issues/2556,b'hNumPy Example List wiki page is corrupted (Trac #1963)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/1963 on 2011-10-16 by trac user AlanFrankel, assigned to unknown._\n\nI\'ve been editing the ""Tentative NumPy Tutorial"" and occasionally referring to the ""NumPy Example List"" ( http://www.scipy.org/Numpy_Example_List ). In the process, I think I mistakenly corrupted the NumPy Example List. Since the website does not offer any wiki-type functionality for reverting changes or referring to a history of changes, there doesn\'t seem to be a way for me to fix the problem. Nor is there a ""Contact Us"" link on the page, so this was the only way I could find to report the problem. '"
2555,7731644,numpy-gitbot,numpy-gitbot,2012-10-19 22:31:34,2012-10-19 22:31:34,2012-10-19 22:31:34,closed,,,1,11 - Bug;component: Other;priority: normal,https://api.github.com/repos/numpy/numpy/issues/2555,b'import multi array: DLL load failed: a dynamic link library <DLL> initialization routine failed (Trac #1962)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/1962 on 2011-10-14 by trac user linden_paul, assigned to unknown._\n\nI am trying to embed a Python2.6 (also using numpy and scipy) into a large C program.  Simple programs worked fine.  However, if the python module that I am calling from C includes the line \nfrom numpy import *\nThe whole thing fails and I get an error in visual studios when the python module runs.\nR6034: an application has made an attempt to load the c runtime library incorrectly.  Using dependency walker I narrowed down the problem to:\nGetProcAddress(0x73C10000 [DWMAPI.DLL], ""DwmGetWindowAttribute"") called from ""UXTHEME.DLL"" at address 0x7404C3DB and returned 0x73C11C76.\nGetProcAddress(0x75520000 [GDI32.DLL], ""GdiIsMetaPrintDC"") called from ""USP10.DLL"" at address 0x75AA8306 and returned 0x75528AB9.\nDllMain(0x5C7B0000, DLL_PROCESS_ATTACH, 0x00000000) in ""MSVCR90.DLL"" returned 0 (0x0).\nDllMain(0x5C7B0000, DLL_PROCESS_DETACH, 0x00000000) in ""MSVCR90.DLL"" called.\nDllMain(0x5C7B0000, DLL_PROCESS_DETACH, 0x00000000) in ""MSVCR90.DLL"" returned 0 (0x0).\nUnloaded ""MULTIARRAY.PYD"" at address 0x69B80000.\nUnloaded ""MSVCR90.DLL"" at address 0x5C7B0000.\nLoadLibraryExA(""C:\\Python26\\Lib\\site-packages\\numpy\\core\\multiarray.pyd"", 0x00000000, LOAD_WITH_ALTERED_SEARCH_PATH) returned NULL. Error: A dynamic link library (DLL) initialization routine failed (1114).\nSecond chance exception 0xC0000005 (Access Violation) occurred in ""PYTHON26.DLL"" at address 0x1E01A2FA.\nExited ""PYTHON_TEST.EXE"" (process 0x1064) with code -1073741819 (0xC0000005).\n\nThen I just adjusted the Python module to just import numarray\n\nfrom numpy import numarray\n\ndef my_eig(a,b,c,d):\n    print \'hello world\'\n    return x\n\nIn the command window the error displayed is: \nImport multiarray\nImportError: DLL load failed: A dynamic link library (DLL) initialization routine failed.  \n\nI should note that numpy and scipy work fine if run from IDLE.   \n'"
2554,7731643,numpy-gitbot,numpy-gitbot,2012-10-19 22:31:32,2013-10-11 22:47:42,2012-10-19 22:31:33,closed,,,5,11 - Bug;component: numpy.core;priority: normal,https://api.github.com/repos/numpy/numpy/issues/2554,"b""numpy.log() doesn't accept very large numbers (Trac #1961)""","b'_Original ticket http://projects.scipy.org/numpy/ticket/1961 on 2011-10-13 by trac user staticfloat, assigned to unknown._\n\nIf I type numpy.log(2**63), I get the expected answer of 42.975.\n\n\nIf I type numpy.log(2**64), I get:\n\nAttributeError                            Traceback (most recent call last)\n/Users/sabae/<ipython-input-40-d6bd9063dbbc> in <module>()\n----> 1 np.log(2**63)\n\nAttributeError: log\n\nMy numpy.version.version says ""1.6.1"", but that is not an option in the dropdown box, so I\'ve set it to ""devel""'"
2552,7731640,numpy-gitbot,charris,2012-10-19 22:31:29,2014-03-10 15:15:02,2014-03-10 15:15:02,closed,,,1,11 - Bug;component: numpy.testing;Easy Fix;priority: normal,https://api.github.com/repos/numpy/numpy/issues/2552,"b'assert_equal should test for equality, not for inequality (Trac #1959)'","b""_Original ticket http://projects.scipy.org/numpy/ticket/1959 on 2011-10-07 by trac user ezander, assigned to unknown._\n\nI just had the strange indicent that I had two objects, call them a and b, that compared fine when I used `self.assertEqual(a, b)` in a `unittest.TestCase` derived class, but failed when I used `assert_equal(a, b)` from `numpy.testing`. The reason for this strange behaviour was that `assertEqual` uses something like `not(a==b)`  in its test, while `numpy.assert_equal` uses `a!=b`. Therefore, the standard unittest uses `__eq__` to compare the objects, while numpy uses `__ne__`, which I hadn't overwritten. Sure, it was partly my fault here, because I had forgotten to overwrite `__ne__` appropriately, but there can also be cases, where this is on purpose that e.g. both return True (just consider NaN). So, the question is which of both test is more appropriate for `assert_equal`. I think, `not(a==b)` would be the right one, as I am asking for the objects to be equal, and not for them to be not unequal (then the function should be called something like `assert_not_unequal` or `assert_not_not_equal`)."""
2551,7731638,numpy-gitbot,rgommers,2012-10-19 22:31:28,2012-12-08 21:23:34,2012-12-08 21:23:34,closed,,,1,11 - Bug;component: numpy.distutils;priority: normal,https://api.github.com/repos/numpy/numpy/issues/2551,b'SWIG target filetype bug (Trac #1958)',"b""_Original ticket http://projects.scipy.org/numpy/ticket/1958 on 2011-10-03 by trac user woosong, assigned to @cournape._\n\nWhen SWIG is used in distutils with swig_opts '-c++' target filetype is set to be '.cpp'. However, when .i file has a header /* -*- c++ -*- */ in front, target filetype is incorrectly set to '.c' causing error.\n\nhttps://github.com/numpy/numpy/blob/master/numpy/distutils/command/build_src.py#L642 \n\nThis line sets the target_ext to '.c' but does not change it according to typ in the following several lines. Should be a simple fix."""
2550,7731636,numpy-gitbot,numpy-gitbot,2012-10-19 22:31:26,2012-10-19 22:31:26,2012-10-19 22:31:26,closed,,,2,11 - Bug;component: Other;priority: normal,https://api.github.com/repos/numpy/numpy/issues/2550,b'column mean is not invariant to row permutation (Trac #1957)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/1957 on 2011-09-29 by trac user john200p4, assigned to unknown._\n\nHello.\nI noticed this behavior and do not know if it is a bug.  Given a large matrix, the column means will be slightly different depending on the permutation of the rows.  For example:\n\n>>> a = random.rand(2300,20)\n>>> ii = random.permutation(2300)\n>>> b = a[ii].copy()\n\n>>> abs(a.mean(0) - b.mean(0)).max()\n1.3322676295501878e-15\n \n>>> abs(a.mean(0) - b[argsort(ii)].mean(0)).max()\n0.0\n\n'"
2549,7731635,numpy-gitbot,numpy-gitbot,2012-10-19 22:31:23,2012-10-19 22:31:24,2012-10-19 22:31:24,closed,,1.6.1,3,11 - Bug;component: Other;priority: normal,https://api.github.com/repos/numpy/numpy/issues/2549,b'inner1d sometimes dumps core on arrays whose shape contains 0 (Trac #1956)',"b""_Original ticket http://projects.scipy.org/numpy/ticket/1956 on 2011-09-29 by trac user tbarnetlamb, assigned to unknown._\n\nThe following appears to be an error:\n\nIn [1]: import numpy.version\n\nIn [2]: numpy.version.version\nOut[2]: '1.4.1'\n\nIn [3]: from numpy.core.umath_tests import inner1d\n\nIn [4]: inner1d(numpy.zeros((0,)), numpy.zeros((0,))) # okay\nOut[4]: 0.0\n\nIn [5]: inner1d(numpy.zeros((0, 2)), numpy.zeros((0, 2))) # crashes\nFatal Python error: PyEval_RestoreThread: NULL tstate\nAbort\n\n"""
2546,7731628,numpy-gitbot,charris,2012-10-19 22:31:19,2013-05-09 16:48:44,2013-05-09 16:48:44,closed,,,4,11 - Bug;component: Other;priority: normal,https://api.github.com/repos/numpy/numpy/issues/2546,b'fill_diagonal fail on rectangular arrays (Trac #1953)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/1953 on 2011-09-18 by trac user dimasad, assigned to unknown._\n\nFor rectangular arrays that are more tall than large, fill_diagonal wraps up.\n\nExample:\n\n\n\n    >>> a = np.zeros((4,2))\n    >>> np.fill_diagonal(a,4)\n    >>> a\n    array([[ 4.,  0.],\n           [ 0.,  4.],\n           [ 0.,  0.],\n           [ 4.,  0.]])\n\n\n\nWhen it should be just\n\n\n    >>> a\n    array([[ 4.,  0.],\n           [ 0.,  4.],\n           [ 0.,  0.],\n           [ 0.,  0.]])\n\n\n'"
2545,7731626,numpy-gitbot,numpy-gitbot,2012-10-19 22:31:16,2012-10-19 22:31:18,2012-10-19 22:31:18,closed,,NumPy 1.7,5,11 - Bug;component: numpy.core;priority: normal,https://api.github.com/repos/numpy/numpy/issues/2545,b'Float not allowed in std ddof (Trac #1952)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/1952 on 2011-09-11 by @pv, assigned to unknown._\n\nThis should also take a floating-point value:\n\n\n    >>> np.array([1, 1, 2]).std(ddof=1.4)\n    TypeError: integer argument expected, got float\n\n\n\nIn earlier versions of Numpy, this raised a DeprecationWarning --- which is also not correct behavior.'"
2544,7731625,numpy-gitbot,charris,2012-10-19 22:31:12,2014-02-21 00:14:40,2014-02-21 00:14:40,closed,,,9,11 - Bug;component: Other;priority: normal,https://api.github.com/repos/numpy/numpy/issues/2544,"b""Numpy doesn't build with llvm-gcc on OS X 10.7 (Lion) (Trac #1951)""","b'_Original ticket http://projects.scipy.org/numpy/ticket/1951 on 2011-09-10 by @fonnesbeck, assigned to unknown._\n\nThe current main repository code no longer builds on OSX 10.7. Sometime during the last 3 weeks, something in multiarray was broken. Here is the relevant part of the build log:\n\n\n\n    In file included from numpy/core/src/multiarray/multiarraymodule_onefile.c:45:\n    numpy/core/src/multiarray/lowlevel_strided_loops.c.src: At top level:\n    numpy/core/src/multiarray/lowlevel_strided_loops.c.src:314: error: expected \xa1\xae=\xa1\xaf, \xa1\xae,\xa1\xaf, \xa1\xae;\xa1\xaf, \xa1\xaeasm\xa1\xaf or \xa1\xae__attribute__\xa1\xaf before \xa1\xae*\xa1\xaf token\n    numpy/core/src/multiarray/lowlevel_strided_loops.c.src:469: error: expected \xa1\xae=\xa1\xaf, \xa1\xae,\xa1\xaf, \xa1\xae;\xa1\xaf, \xa1\xaeasm\xa1\xaf or \xa1\xae__attribute__\xa1\xaf before \xa1\xae*\xa1\xaf token\n    numpy/core/src/multiarray/lowlevel_strided_loops.c.src:469: error: expected \xa1\xae=\xa1\xaf, \xa1\xae,\xa1\xaf, \xa1\xae;\xa1\xaf, \xa1\xaeasm\xa1\xaf or \xa1\xae__attribute__\xa1\xaf before \xa1\xae*\xa1\xaf token\n    numpy/core/src/multiarray/lowlevel_strided_loops.c.src:851: error: expected \xa1\xae=\xa1\xaf, \xa1\xae,\xa1\xaf, \xa1\xae;\xa1\xaf, \xa1\xaeasm\xa1\xaf or \xa1\xae__attribute__\xa1\xaf before \xa1\xae*\xa1\xaf token\n    numpy/core/src/multiarray/lowlevel_strided_loops.c.src:932: error: expected declaration specifiers or \xa1\xae...\xa1\xaf before \xa1\xaePyArray_StridedTransferFn\xa1\xaf\n    numpy/core/src/multiarray/lowlevel_strided_loops.c.src:934: error: conflicting types for \xa1\xaePyArray_TransferNDimToStrided\xa1\xaf\n    numpy/core/src/private/lowlevel_strided_loops.h:317: error: previous declaration of \xa1\xaePyArray_TransferNDimToStrided\xa1\xaf was here\n    numpy/core/src/multiarray/lowlevel_strided_loops.c.src: In function \xa1\xaePyArray_TransferNDimToStrided\xa1\xaf:\n    numpy/core/src/multiarray/lowlevel_strided_loops.c.src:943: warning: implicit declaration of function \xa1\xaestransfer\xa1\xaf\n    numpy/core/src/multiarray/lowlevel_strided_loops.c.src: At top level:\n    numpy/core/src/multiarray/lowlevel_strided_loops.c.src:1051: error: expected declaration specifiers or \xa1\xae...\xa1\xaf before \xa1\xaePyArray_StridedTransferFn\xa1\xaf\n    numpy/core/src/multiarray/lowlevel_strided_loops.c.src:1053: error: conflicting types for \xa1\xaePyArray_TransferStridedToNDim\xa1\xaf\n    numpy/core/src/private/lowlevel_strided_loops.h:327: error: previous declaration of \xa1\xaePyArray_TransferStridedToNDim\xa1\xaf was here\n    numpy/core/src/multiarray/lowlevel_strided_loops.c.src:1171: error: expected declaration specifiers or \xa1\xae...\xa1\xaf before \xa1\xaePyArray_MaskedStridedTransferFn\xa1\xaf\n    numpy/core/src/multiarray/lowlevel_strided_loops.c.src:1173: error: conflicting types for \xa1\xaePyArray_TransferMaskedStridedToNDim\xa1\xaf\n    numpy/core/src/private/lowlevel_strided_loops.h:338: error: previous declaration of \xa1\xaePyArray_TransferMaskedStridedToNDim\xa1\xaf was here\n    In file included from numpy/core/src/multiarray/multiarraymodule_onefile.c:47:\n    numpy/core/src/multiarray/einsum.c.src: In function \xa1\xaePyArray_EinsteinSum\xa1\xaf:\n    numpy/core/src/multiarray/einsum.c.src:3016: warning: implicit declaration of function \xa1\xaePyArray_FillWithZero\xa1\xaf\n    In file included from numpy/core/src/multiarray/multiarraymodule_onefile.c:49:\n    numpy/core/src/multiarray/array_assign_scalar.c: At top level:\n    numpy/core/src/multiarray/array_assign_scalar.c:335: error: conflicting types for \xa1\xaePyArray_AssignRawScalar\xa1\xaf\n    numpy/core/src/multiarray/array_assign_scalar.c:335: note: an argument type that has a default promotion can\xa1\xaft match an empty parameter name list declaration\n    numpy/core/src/multiarray/convert.c:407: error: previous implicit declaration of \xa1\xaePyArray_AssignRawScalar\xa1\xaf was here\n    In file included from numpy/core/src/multiarray/multiarraymodule_onefile.c:50:\n    numpy/core/src/multiarray/array_assign_array.c:392: error: conflicting types for \xa1\xaePyArray_AssignArray\xa1\xaf\n    numpy/core/src/multiarray/array_assign_array.c:392: note: an argument type that has a default promotion can\xa1\xaft match an empty parameter name list declaration\n    numpy/core/src/multiarray/ctors.c:2907: error: previous implicit declaration of \xa1\xaePyArray_AssignArray\xa1\xaf was here\n    numpy/core/src/multiarray/array_assign_array.c: In function \xa1\xaePyArray_AssignArray\xa1\xaf:\n    numpy/core/src/multiarray/array_assign_array.c:403: warning: initialization makes pointer from integer without a cast\n    numpy/core/src/multiarray/array_assign_array.c:407: warning: implicit declaration of function \xa1\xaePyArray_AssignNA\xa1\xaf\n    In file included from numpy/core/src/multiarray/multiarraymodule_onefile.c:51:\n    numpy/core/src/multiarray/reduction.c: At top level:\n    numpy/core/src/multiarray/reduction.c:801: error: conflicting types for \xa1\xaePyArray_ReduceWrapper\xa1\xaf\n    numpy/core/src/multiarray/item_selection.c:2028: error: previous implicit declaration of \xa1\xaePyArray_ReduceWrapper\xa1\xaf was here\n    In file included from numpy/core/src/multiarray/multiarraymodule_onefile.c:52:\n    numpy/core/src/multiarray/na_mask.c:55: error: static declaration of \xa1\xaePyArray_ContainsNA\xa1\xaf follows non-static declaration\n    numpy/core/src/multiarray/common.c:104: error: previous implicit declaration of \xa1\xaePyArray_ContainsNA\xa1\xaf was here\n    numpy/core/src/multiarray/na_mask.c:243: error: conflicting types for \xa1\xaePyArray_AssignMaskNA\xa1\xaf\n    numpy/core/src/multiarray/na_mask.c:243: note: an argument type that has a default promotion can\xa1\xaft match an empty parameter name list declaration\n    numpy/core/src/multiarray/ctors.c:2670: error: previous implicit declaration of \xa1\xaePyArray_AssignMaskNA\xa1\xaf was here\n    numpy/core/src/multiarray/na_mask.c:331: error: conflicting types for \xa1\xaePyArray_AllocateMaskNA\xa1\xaf\n    numpy/core/src/multiarray/na_mask.c:331: note: an argument type that has a default promotion can\xa1\xaft match an empty parameter name list declaration\n    numpy/core/src/multiarray/flagsobject.c:286: error: previous implicit declaration of \xa1\xaePyArray_AllocateMaskNA\xa1\xaf was here\n    numpy/core/src/multiarray/na_mask.c:468: error: conflicting types for \xa1\xaePyArray_AssignNA\xa1\xaf\n    numpy/core/src/multiarray/na_mask.c:468: note: an argument type that has a default promotion can\xa1\xaft match an empty parameter name list declaration\n    numpy/core/src/multiarray/array_assign_array.c:407: error: previous implicit declaration of \xa1\xaePyArray_AssignNA\xa1\xaf was here\n    numpy/core/src/multiarray/na_mask.c: In function \xa1\xaePyArray_IsNA\xa1\xaf:\n    numpy/core/src/multiarray/na_mask.c:500: error: \xa1\xaeNpyNA_Type\xa1\xaf undeclared (first use in this function)\n    In file included from numpy/core/src/multiarray/multiarraymodule_onefile.c:53:\n    numpy/core/src/multiarray/na_object.c: In function \xa1\xaena_call\xa1\xaf:\n    numpy/core/src/multiarray/na_object.c:84: error: \xa1\xaeNpyNA_Type\xa1\xaf undeclared (first use in this function)\n    numpy/core/src/multiarray/na_object.c: In function \xa1\xaena_richcompare\xa1\xaf:\n    numpy/core/src/multiarray/na_object.c:164: warning: assignment makes pointer from integer without a cast\n    numpy/core/src/multiarray/na_object.c: In function \xa1\xaeNpyNA_CombineNA\xa1\xaf:\n    numpy/core/src/multiarray/na_object.c:285: error: \xa1\xaeNpyNA_Type\xa1\xaf undeclared (first use in this function)\n    numpy/core/src/multiarray/na_object.c: In function \xa1\xaeNpyNA_CombineNAWithObject\xa1\xaf:\n    numpy/core/src/multiarray/na_object.c:328: error: \xa1\xaeNpyNA_Type\xa1\xaf undeclared (first use in this function)\n    numpy/core/src/multiarray/na_object.c: At top level:\n    numpy/core/src/multiarray/na_object.c:424: error: conflicting types for \xa1\xaeNpyNA_FromObject\xa1\xaf\n    numpy/core/src/multiarray/scalarapi.c:824: error: previous implicit declaration of \xa1\xaeNpyNA_FromObject\xa1\xaf was here\n    numpy/core/src/multiarray/na_object.c: In function \xa1\xaeNpyNA_FromObject\xa1\xaf:\n    numpy/core/src/multiarray/na_object.c:426: error: \xa1\xaeNpyNA_Type\xa1\xaf undeclared (first use in this function)\n    numpy/core/src/multiarray/na_object.c: At top level:\n    numpy/core/src/multiarray/na_object.c:489: error: conflicting types for \xa1\xaeNpyNA_FromDTypeAndPayload\xa1\xaf\n    numpy/core/src/multiarray/mapping.c:1806: error: previous implicit declaration of \xa1\xaeNpyNA_FromDTypeAndPayload\xa1\xaf was here\n    numpy/core/src/multiarray/na_object.c: In function \xa1\xaeNpyNA_FromDTypeAndPayload\xa1\xaf:\n    numpy/core/src/multiarray/na_object.c:493: error: \xa1\xaeNpy_NA\xa1\xaf undeclared (first use in this function)\n    numpy/core/src/multiarray/na_object.c:497: error: \xa1\xaeNpyNA_Type\xa1\xaf undeclared (first use in this function)\n    numpy/core/src/multiarray/na_object.c: In function \xa1\xaena_binaryop\xa1\xaf:\n    numpy/core/src/multiarray/na_object.c:551: error: \xa1\xaeNpyNA_Type\xa1\xaf undeclared (first use in this function)\n    numpy/core/src/multiarray/na_object.c: In function \xa1\xaena_and\xa1\xaf:\n    numpy/core/src/multiarray/na_object.c:577: error: \xa1\xaeNpyNA_Type\xa1\xaf undeclared (first use in this function)\n    numpy/core/src/multiarray/na_object.c: In function \xa1\xaena_or\xa1\xaf:\n    numpy/core/src/multiarray/na_object.c:615: error: \xa1\xaeNpyNA_Type\xa1\xaf undeclared (first use in this function)\n    error: Command ""llvm-gcc-4.2 -DNDEBUG -g -fwrapv -Os -Wall -Wstrict-prototypes -arch x86_64 -pipe -Inumpy/core/include -Ibuild/src.macosx-10.7-x86_64-2.7/numpy/core/include/numpy -Inumpy/core/src/private -Inumpy/core/src -Inumpy/core -Inumpy/core/src/npymath -Inumpy/core/src/multiarray -Inumpy/core/src/umath -Inumpy/core/src/npysort -Inumpy/core/include -I/System/Library/Frameworks/Python.framework/Versions/2.7/include/python2.7 -Ibuild/src.macosx-10.7-x86_64-2.7/numpy/core/src/multiarray -Ibuild/src.macosx-10.7-x86_64-2.7/numpy/core/src/umath -c numpy/core/src/multiarray/multiarraymodule_onefile.c -o build/temp.macosx-10.7-x86_64-2.7/numpy/core/src/multiarray/multiarraymodule_onefile.o"" failed with exit status 1\n\n'"
2541,7731619,numpy-gitbot,numpy-gitbot,2012-10-19 22:31:05,2012-10-19 22:31:07,2012-10-19 22:31:07,closed,,NumPy 1.7,9,11 - Bug;component: numpy.core;priority: normal,https://api.github.com/repos/numpy/numpy/issues/2541,b'chararray subscription returns empty string instead of empty list (Trac #1948)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/1948 on 2011-09-06 by trac user jazzer, assigned to unknown._\n\nCurrent behaviour (1.5.1, 1.6.1):\n\n\n    >>> import numpy\n    >>> a=numpy.rec.array([(""a"",1),(""bb"",2),(""cc"",3)],dtype=[(\'s\',\'|S4\'),(\'n\',\'i4\')])\n    >>> print a.s[a.s>\'b\']\n    [\'bb\' \'cc\']\n    >>> print a.s[a.s>\'c\']\n    [\'cc\']\n    >>> print a.s[a.s>\'d\']\n    \n    >>> a.s[a.s>\'d\']\n    \'\'\n\n\n\nThe correct behaviour (1.2.1):\n\n\n    >>> print a.s[a.s>\'d\']\n    []\n    >>> a.s[a.s>\'d\']\n    chararray([],\n          dtype=\'|S4\')\n\n\n\nThe bug was introduced in the [7deb4d5db4282e1e1c86](http://github.com/numpy/numpy/commit/7deb4d5db4282e1e1c86), file numpy/core/defchararray.py (I\'m not sure to which NumPy release this commit corresponds, it\'s somewhere between 1.2.1 and 1.5.1):\n\n\n         def __getitem__(self, obj):\n             val = ndarray.__getitem__(self, obj)\n    -        if isinstance(val, (string_, unicode_)):\n    +        if issubclass(val.dtype.type, character):\n                 temp = val.rstrip()\n\n\nReverting the change in this line fixes the bug.'"
2540,7731618,numpy-gitbot,numpy-gitbot,2012-10-19 22:31:03,2012-10-19 22:31:04,2012-10-19 22:31:04,closed,,,1,11 - Bug;component: Other;priority: normal,https://api.github.com/repos/numpy/numpy/issues/2540,b'Numerical error in Numpy causes different eigenvector matrices to be returned when close to identity. (Trac #1947)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/1947 on 2011-09-05 by trac user shyuep, assigned to unknown._\n\nUsing numpy to find eigenvectors, I have found that different results are returned for matrices very close to identity.\n\nAn example of the output:\n>>> import numpy as np\n>>> mat = np.array([[  1,   0,   5.55111512e-17], [  0,   1,   0],  [  5.55111512e-17,   0,   1]])\n>>> np.linalg.eig(mat)\n(array([ 1.,  1.,  1.]), array([[ 0.70710678, -0.70710678,  0.        ],\n       [ 0.        ,  0.        ,  1.        ],\n       [ 0.70710678,  0.70710678,  0.        ]]))\n>>> mat = np.array([[  1,   0,   5.55111512e-19], [  0,   1,   0],  [  5.55111512e-17,   0,   1]])\n>>> np.linalg.eig(mat)\n(array([ 1.,  1.,  1.]), array([[ 0.09950372, -0.15094684,  0.        ],\n       [ 0.        ,  0.        ,  1.        ],\n       [ 0.99503719,  0.98854188,  0.        ]]))\n>>> mat = np.array([[  1,   0,   5.55111512e-29], [  0,   1,   0],  [  5.55111512e-17,   0,   1]])\n>>> np.linalg.eig(mat)\n(array([ 1.,  1.,  1.]), array([[  1.00000000e-06,  -9.09494745e-07,   0.00000000e+00],\n       [  0.00000000e+00,   0.00000000e+00,   1.00000000e+00],\n       [  1.00000000e+00,   1.00000000e+00,   0.00000000e+00]]))\n>>> mat = np.array([[  1,  0,   0], [  0,   1,   0],  [ 0,   0,   1]])\n>>> np.linalg.eig(mat)\n(array([ 1.,  1.,  1.]), array([[ 1.,  0.,  0.],\n       [ 0.,  1.,  0.],\n       [ 0.,  0.,  1.]]))\n\nThe first three matrices only differ in one element in the exponent, going from 5.55111512e-17 to 5.55111512e-19 to 5.55111512e-29, i.e., very small numbers and the matrices are essentially the identiy matrix.  However, in all cases, different eigenvectors are returned.  While all the eigenvectors are valid of course, the different answers creates issues in comparing the eigenvectors obtained via automatically generated matrices.  \n\nThis issue does not appear in other numerical packages in other languages.  I have tested the Jama package in Java and consistent eigenvectors are obtained.'"
2538,7731615,numpy-gitbot,numpy-gitbot,2012-10-19 22:31:00,2012-10-19 22:31:01,2012-10-19 22:31:01,closed,,,1,11 - Bug;component: Other;priority: normal,https://api.github.com/repos/numpy/numpy/issues/2538,"b'matrix([1,2,3]) and matrix([[1,2,3]]) gives the same result (Trac #1945)'","b'_Original ticket http://projects.scipy.org/numpy/ticket/1945 on 2011-08-28 by trac user smichr, assigned to unknown._\n\nIt would be convenient if the former representation gave a column vector (matrix([[1],[2],[3]]) instead of being equivalent to the row vector (matrix([[1,2,3]])).'"
2537,7731613,numpy-gitbot,numpy-gitbot,2012-10-19 22:30:56,2013-06-15 18:37:24,2012-10-19 22:30:59,closed,,NumPy 1.7,9,11 - Bug;component: numpy.core;priority: normal,https://api.github.com/repos/numpy/numpy/issues/2537,b'ieee754.c in numpy-1.6.1 doesnt compile under cygwin (Trac #1944)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/1944 on 2011-08-25 by trac user sebastian_sohr, assigned to unknown._\n\nAt least compile and install works with the following change:\n\nIn numpy/core/src/npymath/ieee754.c\n\nreplace\n\n# elif defined(__CYGWIN__)\n#  include ""fenv/fenv.c""\n# endif \n\nby\n\n# elif defined(__CYGWIN__)\n#  include ""__numpy/__fenv/fenv.h""\n# endif\n\ndont know whether functionality is ok'"
2536,7731612,numpy-gitbot,numpy-gitbot,2012-10-19 22:30:54,2014-09-22 14:54:11,2012-10-19 22:30:55,closed,,NumPy 1.7,5,11 - Bug;component: numpy.core;priority: normal,https://api.github.com/repos/numpy/numpy/issues/2536,b'numpy.frombuffer fails when given an empty buffer (Trac #1943)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/1943 on 2011-08-25 by trac user hniksic, assigned to unknown._\n\nnumpy.frombuffer raises an exception when given an empty buffer, where one would expect it to return an empty array of given dtype.  For example:\n\n\n\n    >>> import array, numpy as np\n    >>> np.frombuffer(array.array(\'d\'))\n    Traceback (most recent call last):\n      File ""<stdin>"", line 1, in <module>\n    ValueError: offset must be non-negative and smaller than buffer lenth (0)\n\n\n\nThis requires code converting buffers to numpy arrays to special-case empty buffers.  Furthermore, the problem is often not discovered until someone actually passes a zero-sized buffer to the code that calls frombuffer, and trips over this exception at run-time.\n'"
2535,7731609,numpy-gitbot,numpy-gitbot,2012-10-19 22:30:52,2012-10-19 22:30:52,2012-10-19 22:30:52,closed,,,2,11 - Bug;component: numpy.f2py;priority: highest,https://api.github.com/repos/numpy/numpy/issues/2535,b'fortranobject.h not found on Debian Wheezy testing with kernel 3.0.0-1-486 (Trac #1942)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/1942 on 2011-08-25 by trac user SergeStroobandt, assigned to @pearu._\n\nWhat steps will reproduce the problem?[[BR]]\n\neasy_install pymc[[BR]]\nor[[BR]]\nsudo easy_install pymc[[BR]]\n\nWhat is the expected output? What do you see instead?\n\n\t\tConstructing wrapper function ""aniso_geo_rad""...[[BR]]\t\t  aniso_geo_rad(d,x,y,inc,ecc,[cmin,cmax,symm])\t[[BR]]Wrote C/API module ""distances"" to file ""build/src.linux-i686-2.6/pymc/gp/cov_funs/distancesmodule.c""\nCould not locate executable g77[[BR]]\nCould not locate executable f77[[BR]]\nCould not locate executable ifort[[BR]]\nCould not locate executable ifc[[BR]]\nCould not locate executable lf95[[BR]]\nCould not locate executable pgf90[[BR]]\nCould not locate executable pgf77[[BR]]\nCould not locate executable f90[[BR]]\nFound executable /usr/bin/f95[[BR]]\nCould not locate executable fort[[BR]]\nCould not locate executable efort[[BR]]\nCould not locate executable efc[[BR]]\nFound executable /usr/bin/gfortran[[BR]]\nIn file included from build/src.linux-i686-2.6/fortranobject.c:2:0:[[BR]]\nbuild/src.linux-i686-2.6/fortranobject.h:7:20: fatal error: [[BR]]Python.h: No such file or directory[[BR]]\ncompilation terminated.[[BR]]\nIn file included from build/src.linux-i686-2.6/fortranobject.c:2:0:[[BR]]\nbuild/src.linux-i686-2.6/fortranobject.h:7:20: fatal error: [[BR]]Python.h: No such file or directory\ncompilation terminated.[[BR]]\nerror: Setup script exited with error: Command ""gcc -pthread -fno-strict-aliasing -DNDEBUG -g -fwrapv -O2 -Wall -Wstrict-prototypes -fPIC -DNO_ATLAS_INFO=1 -Ibuild/src.linux-i686-2.6 -I/usr/lib/pymodules/python2.6/numpy/core/include -I/usr/include/python2.6 -c build/src.linux-i686-2.6/fortranobject.c -o build/temp.linux-i686-2.6/build/src.linux-i686-2.6/fortranobject.o"" failed with exit status 1\n/usr/lib/pymodules/python2.6/numpy/distutils/misc_util.py:251: RuntimeWarning: Parent module \'numpy.distutils\' not found while handling absolute import[[BR]]\n  from numpy.distutils import log[[BR]]\n[[BR]]\nWhat version of the product are you using? On what operating system?[[BR]]\n[[BR]]\nLinux Mint Debian (= Debian Wheezy testing)[[BR]]\nkernel 3.0.0-1-486[[BR]]\non a VirtualBox machine[[BR]]\n[[BR]]\nPlease provide any additional information below.[[BR]]\n[[BR]]\ndpkg -S fortranobject.h[[BR]]\npython-numpy: /usr/share/pyshared/numpy/f2py/src/fortranobject.h[[BR]]'"
2532,7731605,numpy-gitbot,charris,2012-10-19 22:30:46,2014-02-20 23:56:20,2014-02-20 23:56:20,closed,,,1,11 - Bug;component: Other;priority: normal,https://api.github.com/repos/numpy/numpy/issues/2532,b'Datetime tests incorrectly require pytz module (Trac #1939)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/1939 on 2011-08-19 by @bsouthey, assigned to unknown._\n\nWith the new datetime features, Numpy tests require the use of the pytz module. This breaks the Numpy policy of requiring no other dependencies. The tests in test_datetime.py need to rewritten to avoid this module. '"
2531,7731603,numpy-gitbot,numpy-gitbot,2012-10-19 22:30:44,2012-10-19 22:30:45,2012-10-19 22:30:45,closed,,1.6.2,2,11 - Bug;component: numpy.core;priority: high,https://api.github.com/repos/numpy/numpy/issues/2531,b'nditer reusing reduce loop inappropriately (Trac #1938)',"b""_Original ticket http://projects.scipy.org/numpy/ticket/1938 on 2011-08-18 by @mwiebe, assigned to @mwiebe._\n\nIn changing how reductions work in my missingdata branch, the following caused a memory corruption:\n\na = np.random.rand(100,100,100)\nnp.minimum.reduce(a)\n\nI've tracked this down to the logic for reusing the reduction double loop structure when the buffer is smaller than the innermost loop."""
2530,7731601,numpy-gitbot,numpy-gitbot,2012-10-19 22:30:41,2012-10-19 22:30:42,2012-10-19 22:30:42,closed,,NumPy 1.7,4,11 - Bug;component: numpy.core;priority: normal,https://api.github.com/repos/numpy/numpy/issues/2530,b'Segfault triggered by importing print_coercion_tables.py (Trac #1937)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/1937 on 2011-08-16 by @charris, assigned to unknown._\n\nHere:\n\n\n\n\n    array + scalar\n    + ? b h i l q p B H I L Q P e f d g F D G S U V O M m\n    ? ? b h i l l l B H I L L L e f d g F D G O O # O ! m\n    b b b b b b b b b b b b b b e f d g F D G O O # O ! m\n    h h h h h h h h h h h h h h f f d g F D G O O # O ! m\n    i i i i i i i i i i i i i i d d d g D D G O O # O ! m\n    l l l l l l l l l l l l l l d d d g D D G O O # O ! m\n    q l l l l l l l l l l l l l d d d g D D G O O # O ! m\n    p l l l l l l l l l l l l l d d d g D D G O O # O ! m\n    B B B B B B B B B B B B B B e f d g F D G O O # O ! m\n    H H H H H H H H H H H H H H f f d g F D G O O # O ! m\n    I I I I I I I I I I I I I I d d d g D D G O O # O ! m\n    L L L L L L L L L L L L L L d d d g D D G O O # O ! m\n    Q L L L L L L L L L L L L L d d d g D D G O O # O ! m\n    P L L L L L L L L L L L L L d d d g D D G O O # O ! m\n    e e e e e e e e e e e e e e e e e e F F F O O # O ! #\n    f f f f f f f f f f f f f f f f f f F F F O O # O ! #\n    d d d d d d d d d d d d d d d d d d D D D O O # O ! #\n    g g g g g g g g g g g g g g g g g g G G G O O # O ! #\n    F F F F F F F F F F F F F F F F F F F F F O O # O ! #\n    D D D D D D D D D D D D D D D D D D D D D O O # O ! #\n    G G G G G G G G G G G G G G G G G G G G G O O # O ! #\n    S O O O O O O O O O O O O O O O O O O O O O O # O ! O\n    U O O O O O O O O O O O O O O O O O O O O O O # O ! O\n    Segmentation fault (core dumped)\n\n\n'"
2529,7731599,numpy-gitbot,numpy-gitbot,2012-10-19 22:30:37,2012-10-19 22:30:39,2012-10-19 22:30:39,closed,,NumPy 1.7,7,11 - Bug;component: numpy.lib;priority: normal,https://api.github.com/repos/numpy/numpy/issues/2529,"b'loadtxt with nested dtype fails with ""ValueError: setting an array element with a sequence"" (Trac #1936)'","b'_Original ticket http://projects.scipy.org/numpy/ticket/1936 on 2011-08-16 by @gerritholl, assigned to unknown._\n\nI\'m sure this used to work. It also works for someone else on IRC.\n\n\n\n    $ python\n    Python 2.6.6 (r266:84292, Sep 15 2010, 16:22:56) \n    [GCC 4.4.5] on linux2\n    Type ""help"", ""copyright"", ""credits"" or ""license"" for more information.\n    >>> from numpy import loadtxt, uint8\n    >>> from StringIO import StringIO\n    >>> from numpy.version import version\n    >>> print version\n    2.0.0.dev-5cf0a07\n    >>> loadtxt(StringIO(""0 1 2 3""), dtype=[(""a"", uint8, 2), (""b"", uint8, 2)])\n    Traceback (most recent call last):\n      File ""<stdin>"", line 1, in <module>\n      File ""/storage4/home/gerrit/.local/lib/python2.6/site-packages/numpy/lib/npyio.py"", line 806, in loadtxt\n        X = np.array(X, dtype)\n    ValueError: setting an array element with a sequence.\n    >>> loadtxt(StringIO(""0 1 2 3""), dtype=[(""a"", uint8, 4)])\n    Traceback (most recent call last):\n      File ""<stdin>"", line 1, in <module>\n      File ""/storage4/home/gerrit/.local/lib/python2.6/site-packages/numpy/lib/npyio.py"", line 806, in loadtxt\n        X = np.array(X, dtype)\n    ValueError: setting an array element with a sequence.\n\n\n\nWhat\'s going on here?'"
2528,7731598,numpy-gitbot,pv,2012-10-19 22:30:36,2014-02-17 09:11:57,2014-02-17 09:11:57,closed,,,3,11 - Bug;component: Other;priority: normal,https://api.github.com/repos/numpy/numpy/issues/2528,b'numpydoc - latex longtables error (Trac #1935)',"b""_Original ticket http://projects.scipy.org/numpy/ticket/1935 on 2011-08-15 by @matthew-brett, assigned to unknown._\n\nI've run into an odd problem that seems to be an interaction of\nnumpydoc and autosummary and large classes.\n\nIn summary, large classes and numpydoc lead to large tables of class\nmethods, and there seems to be an error in the creation of the large\ntables in latex.\n\nSpecifically, if I run 'make latexpdf' with the attached minimal\nsphinx setup, I get a pdflatex error ending thus:\n\n...\n\n\n    l.118 \\begin{longtable}{LL}\n    \n    and this is because longtable does not accept LL as an argument, but\n    needs '|l|l|' (bar - el - bar - el - bar).\n\n\n\nI see in sphinx.writers.latex.py, around line 657, that sphinx knows\nabout this in general, and long tables in standard ReST work fine with the el-bar arguments passed to longtable.\n\n\n\n           if self.table.colspec:\n               self.body.append(self.table.colspec)\n           else:\n               if self.table.has_problematic:\n                   colwidth = 0.95 / self.table.colcount\n                   colspec = ('p{%.3f\\\\linewidth}|' % colwidth) * \\\n                             self.table.colcount\n                   self.body.append('{|' + colspec + '}\\n')\n               elif self.table.longtable:\n                   self.body.append('{|' + ('l|' * self.table.colcount) + '}\\n')\n               else:\n                   self.body.append('{|' + ('L|' * self.table.colcount) + '}\\n')\n\n\n\nHowever, using numpydoc and autosummary (see the conf.py file), what\nseems to happen is that, when we reach the self.table.colspec test at the beginning of the snippet above, 'self.table.colspec' is defined:\n\n\n\n    In [1]: self.table.colspec\n    Out[1]: '{LL}\\n'\n\n\n\nand thus the LL gets written as the arg to longtable:\n\n\n\n    \\begin{longtable}{LL}\n\n\n\nand the pdf build breaks.\n\nI'm using the numpydoc out of the current numpy source tree."""
2526,7731596,numpy-gitbot,numpy-gitbot,2012-10-19 22:30:33,2012-10-19 22:30:33,2012-10-19 22:30:33,closed,,,2,11 - Bug;component: Other;priority: normal,https://api.github.com/repos/numpy/numpy/issues/2526,b'format strings: native size used instead of standard size (Trac #1933)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/1933 on 2011-08-12 by trac user skrah, assigned to unknown._\n\nI think this array should fit into a buffer of size 4,\neven on a 64-bit platform:\n\n\n\n    >>> import struct\n    >>> struct.calcsize(\'=l\')\n    4\n    >>> ndarray(buffer=bytearray(4), shape=[1], dtype=""=l"")\n    Traceback (most recent call last):\n      File ""<stdin>"", line 1, in <module>\n    TypeError: buffer is too small for requested array\n    \n    \n    >>> ndarray(buffer=bytearray(8), shape=[1], dtype=""=l"")\n    array([0])\n\n'"
2525,7731595,numpy-gitbot,rgommers,2012-10-19 22:30:31,2013-06-29 10:02:56,2013-06-29 10:02:56,closed,,,6,11 - Bug;component: numpy.f2py;priority: normal,https://api.github.com/repos/numpy/numpy/issues/2525,b'f2py crashes with UnboundLocalError exception (Trac #1932)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/1932 on 2011-08-12 by trac user josdekloe, assigned to @pearu._\n\nI have been trying to use the f2py routinely to build an interface around the ECMWF BUFR library. See http://code.google.com/p/pybufr-ecmwf/ for details. This works fine for the python 2.x versions.\n\nHowever, I also tried to add the possibility to use python3 and here I encountered some trouble. My python code converts properly to python3 using to 2to3 tool, but when I try to use the python3 version of f2py I encounter this error somewhere deep inside the f2py internals:\n\nPost-processing (stage 2)...\nSaving signatures to file ""f2py_build/signatures.pyf""\nTraceback (most recent call last):\n  File ""./run_f2py_tool.py"", line 11, in <module>\n    main()\n  File ""/usr/lib64/python3.2/site-packages/numpy/f2py/f2py2e.py"", line 563, in main\n    run_main(sys.argv[1:])\n  File ""/usr/lib64/python3.2/site-packages/numpy/f2py/f2py2e.py"", line 342, in run_main\n    postlist=callcrackfortran(files,options)\n  File ""/usr/lib64/python3.2/site-packages/numpy/f2py/f2py2e.py"", line 279, in callcrackfortran\n    pyf=crackfortran.crack2fortran(postlist)\n  File ""/usr/lib64/python3.2/site-packages/numpy/f2py/crackfortran.py"", line 2693, in crack2fortran\n    pyf=crack2fortrangen(block)+\'\\n\'\n  File ""/usr/lib64/python3.2/site-packages/numpy/f2py/crackfortran.py"", line 2465, in crack2fortrangen\n    ret=ret+crack2fortrangen(g,tab)\n  File ""/usr/lib64/python3.2/site-packages/numpy/f2py/crackfortran.py"", line 2505, in crack2fortrangen\n    body=crack2fortrangen(block[\'body\'],tab+tabchar)\n  File ""/usr/lib64/python3.2/site-packages/numpy/f2py/crackfortran.py"", line 2465, in crack2fortrangen\n    ret=ret+crack2fortrangen(g,tab)\n  File ""/usr/lib64/python3.2/site-packages/numpy/f2py/crackfortran.py"", line 2505, in crack2fortrangen\n    body=crack2fortrangen(block[\'body\'],tab+tabchar)\n  File ""/usr/lib64/python3.2/site-packages/numpy/f2py/crackfortran.py"", line 2465, in crack2fortrangen\n    ret=ret+crack2fortrangen(g,tab)\n  File ""/usr/lib64/python3.2/site-packages/numpy/f2py/crackfortran.py"", line 2506, in crack2fortrangen\n    vars=vars2fortran(block,block[\'vars\'],al,tab+tabchar)\n  File ""/usr/lib64/python3.2/site-packages/numpy/f2py/crackfortran.py"", line 2655, in vars2fortran\n    lst = true_intent_list(vars[a])\n  File ""/usr/lib64/python3.2/site-packages/numpy/f2py/crackfortran.py"", line 2557, in true_intent_list\n    if c:\nUnboundLocalError: local variable \'c\' referenced before assignment\nERROR: build of python wrapper failed\nthe signatures file could not be found\nTraceback (most recent call last):\n  File ""./build_interface.py"", line 1803, in <module>\n    BI.build()\n  File ""./build_interface.py"", line 543, in build\n    self.generate_python_wrapper(source_dir)\n  File ""./build_interface.py"", line 1667, in generate_python_wrapper\n    raise InterfaceBuildError\n__main__.InterfaceBuildError\n>\n\nI any additional information is needed I would be happy to provide it.'"
2523,7731590,numpy-gitbot,numpy-gitbot,2012-10-19 22:30:27,2012-10-23 02:46:17,2012-10-19 22:30:28,closed,,,1,11 - Bug;component: numpy.core;priority: high,https://api.github.com/repos/numpy/numpy/issues/2523,b'np.left_shift and np.right_shift fail on np.uint64 scalar types (Trac #1930)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/1930 on 2011-08-10 by trac user tlatorre, assigned to unknown._\n\n\n\n    >>> np.uint64(5) << 1\n    Traceback (most recent call last):\n      File ""<stdin>"", line 1, in <module>\n    TypeError: ufunc \'left_shift\' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule \'safe\'\n    >>> np.uint64(5) >> 3\n    Traceback (most recent call last):\n      File ""<stdin>"", line 1, in <module>\n    TypeError: ufunc \'right_shift\' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule \'safe\'\n\n'"
2521,7731588,numpy-gitbot,charris,2012-10-19 22:30:24,2014-01-13 19:04:58,2013-03-02 01:48:39,closed,,,3,11 - Bug;component: numpy.f2py;priority: normal,https://api.github.com/repos/numpy/numpy/issues/2521,b'PyArray_API is *not* a unique symbol. (Trac #1928)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/1928 on 2011-08-10 by trac user phil@..., assigned to @pearu._\n\nnumpy makes the API to its array type available through the symbol PyArray_API.  But it also allows users to make it available through some other symbol by defining PY_ARRAY_UNIQUE_SYMBOL to be whatever other symbol is desired.  (Why anyone would want to use a different symbol name never became clear to me, but some do.)\n\n__multiarray_api.h has some C preprocessor magic that defines the symbol one way if PY_ARRAY_UNIQUE_SYMBOL is defined, and another way if PY_ARRAY_UNIQUE_SYMBOL is not defined.  It all works well, except...\n\n...In the numpy header fortranobject.h, PY_ARRAY_UNIQUE_SYMBOL is defined as PyArray_API.  This makes it look as if a different symbol is being used, but the ""different"" symbol being used is the same as the ""real"" symbol for the API.  This results in anyone including fortranobject.h (scipy does) having a definition of PyArray_API that does not play well at all with the ""real"" global definition of PyArray_API.\n\nI was sometimes getting a crash when invoking ""import scipy.signal""  I tracked it down to:\n - signal imports special (directly or indirectly)\n - import of special results in call of C function initspecfun()\n - initspecfun() calls _import_array\n - _import_array executes this line of code:\n    PyArray_API = (void **)PyCObject_AsVoidPtr(c_api);\n\nIt was this statement that was causing trouble.  My debugger was telling me that the value being returned from PyCObject_AsVoidPtr was the same as the address of PyArray_API.  In other words, after the above statement, &PyArray_API == PyArray_API is true.  I\'m pretty sure that\'s not good.  It resulted in the first attempt to access the contents of PyArray_API (a call to PyArray_GetNDArrayCVersion() a few lines later) crashing.\n\nThe crash only happens if I do the ""import scipy.signal"" after I import my own C-python module that uses numpy arrays.  I suppose it could be a bug in my code, but I can\'t see how.  My source file just has a ""#include <numarray/libnumarray.h>"", without define any optional symbols (no PY_ARRAY_UNIQUE_SYMBOL, no NO_IMPORT or NO_IMPORT_ARRAY).  It does not anywhere (directly) reference PyArray_API.  The only thing the init routine does with numpy is call _import_array.  Of course, my module has routines that do stuff with numpy arrays, but I don\'t call any of those between importing my module and importing scipy.signal to get the crash.  If I am doing something wrong, then consider this to be a bug report on the docs, which have not made it clear what I am doing wrong.  (I\'ve looked.  A bit.)\n\nI tried to fix the problem by removing the #define of PY_ARRAY_UNIQUE_SYMBOL in fortranobject.h.  That did indeed prevent the crash when I import my module followed by scipy.signal.  However, if I import scipy.signal *without* first importing my module, the attempt to import scipy.signal raises in ImportError with complaint of undefined symbol PyArray_API.\n\nI then tried to fix it by changing the define of PY_ARRAY_UNIQUE_SYMBOL in fortranobject.h to something (anything) other than PyArray_API.  That worked.  I am now able to import scipy.signal whether or not I first import my module.  Is that the ""right"" fix?  You decide.\n\nPython 2.5.4\nnumpy 1.5.1rc2\nscipy 0.8.0'"
2519,7731585,numpy-gitbot,numpy-gitbot,2012-10-19 22:30:18,2012-10-19 22:30:21,2012-10-19 22:30:21,closed,,1.6.2,13,11 - Bug;component: numpy.core;priority: normal,https://api.github.com/repos/numpy/numpy/issues/2519,b'test_umath_complex fails under OS X Lion (Trac #1926)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/1926 on 2011-08-05 by trac user RuiPereira, assigned to unknown._\n\n8 tests related to umath_complex fail when testing numpy 1.6.1 under OS X Lion. The same tests fail with numpy 1.5.1 shipped with the system as well as with the most recent HEAD from github.\n\n\n\n    python -c ""import numpy; numpy.test()""\n    Running unit tests for numpy\n    NumPy version 1.6.1\n    NumPy is installed in /Library/Python/2.7/site-packages/numpy\n    Python version 2.7.1 (r271:86832, Jun 16 2011, 16:59:05) [GCC 4.2.1 (Based on Apple Inc. build 5658) (LLVM build 2335.15.00)]\n    nose version 1.0.0\n\n\n(...)\n\n\n    ======================================================================\n    FAIL: test_umath_complex.TestCsqrt.test_special_values(<ufunc \'sqrt\'>, 1, inf, inf, inf)\n    ----------------------------------------------------------------------\n    Traceback (most recent call last):\n      File ""/Library/Python/2.7/site-packages/nose/case.py"", line 187, in runTest\n        self.test(*self.arg)\n      File ""/Library/Python/2.7/site-packages/numpy/core/tests/test_umath_complex.py"", line 578, in check_complex_value\n        assert_equal(f(z1), z2)\n      File ""/Library/Python/2.7/site-packages/numpy/testing/utils.py"", line 256, in assert_equal\n        return assert_array_equal(actual, desired, err_msg, verbose)\n      File ""/Library/Python/2.7/site-packages/numpy/testing/utils.py"", line 707, in assert_array_equal\n        verbose=verbose, header=\'Arrays are not equal\')\n      File ""/Library/Python/2.7/site-packages/numpy/testing/utils.py"", line 605, in assert_array_compare\n        chk_same_position(x_id, y_id, hasval=\'nan\')\n      File ""/Library/Python/2.7/site-packages/numpy/testing/utils.py"", line 588, in chk_same_position\n        raise AssertionError(msg)\n    AssertionError: \n    Arrays are not equal\n    \n    x and y nan location mismatch:\n     x: array([ nan+infj])\n     y: array((inf+infj))\n    \n    ======================================================================\n    FAIL: test_umath_complex.TestCsqrt.test_special_values(<ufunc \'sqrt\'>, -1, inf, inf, inf)\n    ----------------------------------------------------------------------\n    Traceback (most recent call last):\n      File ""/Library/Python/2.7/site-packages/nose/case.py"", line 187, in runTest\n        self.test(*self.arg)\n      File ""/Library/Python/2.7/site-packages/numpy/core/tests/test_umath_complex.py"", line 578, in check_complex_value\n        assert_equal(f(z1), z2)\n      File ""/Library/Python/2.7/site-packages/numpy/testing/utils.py"", line 256, in assert_equal\n        return assert_array_equal(actual, desired, err_msg, verbose)\n      File ""/Library/Python/2.7/site-packages/numpy/testing/utils.py"", line 707, in assert_array_equal\n        verbose=verbose, header=\'Arrays are not equal\')\n      File ""/Library/Python/2.7/site-packages/numpy/testing/utils.py"", line 605, in assert_array_compare\n        chk_same_position(x_id, y_id, hasval=\'nan\')\n      File ""/Library/Python/2.7/site-packages/numpy/testing/utils.py"", line 588, in chk_same_position\n        raise AssertionError(msg)\n    AssertionError: \n    Arrays are not equal\n    \n    x and y nan location mismatch:\n     x: array([ nan+infj])\n     y: array((inf+infj))\n    \n    ======================================================================\n    FAIL: test_umath_complex.TestCsqrt.test_special_values(<ufunc \'sqrt\'>, 0.0, inf, inf, inf)\n    ----------------------------------------------------------------------\n    Traceback (most recent call last):\n      File ""/Library/Python/2.7/site-packages/nose/case.py"", line 187, in runTest\n        self.test(*self.arg)\n      File ""/Library/Python/2.7/site-packages/numpy/core/tests/test_umath_complex.py"", line 578, in check_complex_value\n        assert_equal(f(z1), z2)\n      File ""/Library/Python/2.7/site-packages/numpy/testing/utils.py"", line 256, in assert_equal\n        return assert_array_equal(actual, desired, err_msg, verbose)\n      File ""/Library/Python/2.7/site-packages/numpy/testing/utils.py"", line 707, in assert_array_equal\n        verbose=verbose, header=\'Arrays are not equal\')\n      File ""/Library/Python/2.7/site-packages/numpy/testing/utils.py"", line 605, in assert_array_compare\n        chk_same_position(x_id, y_id, hasval=\'nan\')\n      File ""/Library/Python/2.7/site-packages/numpy/testing/utils.py"", line 588, in chk_same_position\n        raise AssertionError(msg)\n    AssertionError: \n    Arrays are not equal\n    \n    x and y nan location mismatch:\n     x: array([ nan+infj])\n     y: array((inf+infj))\n    \n    ======================================================================\n    FAIL: test_umath_complex.TestCsqrt.test_special_values(<ufunc \'sqrt\'>, -0.0, inf, inf, inf)\n    ----------------------------------------------------------------------\n    Traceback (most recent call last):\n      File ""/Library/Python/2.7/site-packages/nose/case.py"", line 187, in runTest\n        self.test(*self.arg)\n      File ""/Library/Python/2.7/site-packages/numpy/core/tests/test_umath_complex.py"", line 578, in check_complex_value\n        assert_equal(f(z1), z2)\n      File ""/Library/Python/2.7/site-packages/numpy/testing/utils.py"", line 256, in assert_equal\n        return assert_array_equal(actual, desired, err_msg, verbose)\n      File ""/Library/Python/2.7/site-packages/numpy/testing/utils.py"", line 707, in assert_array_equal\n        verbose=verbose, header=\'Arrays are not equal\')\n      File ""/Library/Python/2.7/site-packages/numpy/testing/utils.py"", line 605, in assert_array_compare\n        chk_same_position(x_id, y_id, hasval=\'nan\')\n      File ""/Library/Python/2.7/site-packages/numpy/testing/utils.py"", line 588, in chk_same_position\n        raise AssertionError(msg)\n    AssertionError: \n    Arrays are not equal\n    \n    x and y nan location mismatch:\n     x: array([ nan+infj])\n     y: array((inf+infj))\n    \n    ======================================================================\n    FAIL: test_umath_complex.TestCsqrt.test_special_values(<ufunc \'sqrt\'>, inf, inf, inf, inf)\n    ----------------------------------------------------------------------\n    Traceback (most recent call last):\n      File ""/Library/Python/2.7/site-packages/nose/case.py"", line 187, in runTest\n        self.test(*self.arg)\n      File ""/Library/Python/2.7/site-packages/numpy/core/tests/test_umath_complex.py"", line 578, in check_complex_value\n        assert_equal(f(z1), z2)\n      File ""/Library/Python/2.7/site-packages/numpy/testing/utils.py"", line 256, in assert_equal\n        return assert_array_equal(actual, desired, err_msg, verbose)\n      File ""/Library/Python/2.7/site-packages/numpy/testing/utils.py"", line 707, in assert_array_equal\n        verbose=verbose, header=\'Arrays are not equal\')\n      File ""/Library/Python/2.7/site-packages/numpy/testing/utils.py"", line 605, in assert_array_compare\n        chk_same_position(x_id, y_id, hasval=\'nan\')\n      File ""/Library/Python/2.7/site-packages/numpy/testing/utils.py"", line 588, in chk_same_position\n        raise AssertionError(msg)\n    AssertionError: \n    Arrays are not equal\n    \n    x and y nan location mismatch:\n     x: array([ nan+infj])\n     y: array((inf+infj))\n    \n    ======================================================================\n    FAIL: test_umath_complex.TestCsqrt.test_special_values(<ufunc \'sqrt\'>, -inf, inf, inf, inf)\n    ----------------------------------------------------------------------\n    Traceback (most recent call last):\n      File ""/Library/Python/2.7/site-packages/nose/case.py"", line 187, in runTest\n        self.test(*self.arg)\n      File ""/Library/Python/2.7/site-packages/numpy/core/tests/test_umath_complex.py"", line 578, in check_complex_value\n        assert_equal(f(z1), z2)\n      File ""/Library/Python/2.7/site-packages/numpy/testing/utils.py"", line 256, in assert_equal\n        return assert_array_equal(actual, desired, err_msg, verbose)\n      File ""/Library/Python/2.7/site-packages/numpy/testing/utils.py"", line 707, in assert_array_equal\n        verbose=verbose, header=\'Arrays are not equal\')\n      File ""/Library/Python/2.7/site-packages/numpy/testing/utils.py"", line 605, in assert_array_compare\n        chk_same_position(x_id, y_id, hasval=\'nan\')\n      File ""/Library/Python/2.7/site-packages/numpy/testing/utils.py"", line 588, in chk_same_position\n        raise AssertionError(msg)\n    AssertionError: \n    Arrays are not equal\n    \n    x and y nan location mismatch:\n     x: array([ nan+infj])\n     y: array((inf+infj))\n    \n    ======================================================================\n    FAIL: test_umath_complex.TestCsqrt.test_special_values(<ufunc \'sqrt\'>, nan, inf, inf, inf)\n    ----------------------------------------------------------------------\n    Traceback (most recent call last):\n      File ""/Library/Python/2.7/site-packages/nose/case.py"", line 187, in runTest\n        self.test(*self.arg)\n      File ""/Library/Python/2.7/site-packages/numpy/core/tests/test_umath_complex.py"", line 578, in check_complex_value\n        assert_equal(f(z1), z2)\n      File ""/Library/Python/2.7/site-packages/numpy/testing/utils.py"", line 256, in assert_equal\n        return assert_array_equal(actual, desired, err_msg, verbose)\n      File ""/Library/Python/2.7/site-packages/numpy/testing/utils.py"", line 707, in assert_array_equal\n        verbose=verbose, header=\'Arrays are not equal\')\n      File ""/Library/Python/2.7/site-packages/numpy/testing/utils.py"", line 605, in assert_array_compare\n        chk_same_position(x_id, y_id, hasval=\'nan\')\n      File ""/Library/Python/2.7/site-packages/numpy/testing/utils.py"", line 588, in chk_same_position\n        raise AssertionError(msg)\n    AssertionError: \n    Arrays are not equal\n    \n    x and y nan location mismatch:\n     x: array([ nan+infj])\n     y: array((inf+infj))\n    \n    ======================================================================\n    FAIL: test_umath_complex.TestCsqrt.test_special_values(<ufunc \'sqrt\'>, -inf, 1, 0.0, inf)\n    ----------------------------------------------------------------------\n    Traceback (most recent call last):\n      File ""/Library/Python/2.7/site-packages/nose/case.py"", line 187, in runTest\n        self.test(*self.arg)\n      File ""/Library/Python/2.7/site-packages/numpy/core/tests/test_umath_complex.py"", line 578, in check_complex_value\n        assert_equal(f(z1), z2)\n      File ""/Library/Python/2.7/site-packages/numpy/testing/utils.py"", line 256, in assert_equal\n        return assert_array_equal(actual, desired, err_msg, verbose)\n      File ""/Library/Python/2.7/site-packages/numpy/testing/utils.py"", line 707, in assert_array_equal\n        verbose=verbose, header=\'Arrays are not equal\')\n      File ""/Library/Python/2.7/site-packages/numpy/testing/utils.py"", line 605, in assert_array_compare\n        chk_same_position(x_id, y_id, hasval=\'nan\')\n      File ""/Library/Python/2.7/site-packages/numpy/testing/utils.py"", line 588, in chk_same_position\n        raise AssertionError(msg)\n    AssertionError: \n    Arrays are not equal\n    \n    x and y nan location mismatch:\n     x: array([ nan+infj])\n     y: array(infj)\n    \n    ----------------------------------------------------------------------\n    Ran 3533 tests in 22.955s\n    \n    FAILED (KNOWNFAIL=3, SKIP=2, failures=8)\n\n\n'"
2518,7731584,numpy-gitbot,charris,2012-10-19 22:30:17,2014-02-20 23:51:51,2014-02-20 23:51:51,closed,,,1,11 - Bug;component: Other;priority: normal,https://api.github.com/repos/numpy/numpy/issues/2518,"b""output of b'\\x00' is an empty bytes object (Trac #1925)""","b'_Original ticket http://projects.scipy.org/numpy/ticket/1925 on 2011-08-04 by trac user skrah, assigned to unknown._\n\nI\'m not sure if packing a buffer directly via the struct module\nis supported. I came across this corner case:\n\n\n\n    >>> import struct\n    >>> buf = bytearray(2)\n    >>> struct.pack_into(""c"", buf, 0, b\'\\x00\')\n    >>> struct.pack_into(""c"", buf, 1, b\'\\x01\')\n    >>> nd = ndarray(buffer=buf, shape=[2], dtype=""c"")\n    >>> nd.tolist()\n    [b\'\', b\'\\x01\']\n    >>> struct.unpack_from(""c"", buf, 0)\n    (b\'\\x00\',)\n    >>> struct.unpack_from(""c"", buf, 1)\n    (b\'\\x01\',)\n\n\n\n\nThe first character in the tolist() representation should be b\'\\x00\'.\n\n\n\n'"
2516,7731580,numpy-gitbot,charris,2012-10-19 22:30:14,2014-02-20 23:43:00,2014-02-20 23:43:00,closed,,,2,11 - Bug;component: Other;priority: normal,https://api.github.com/repos/numpy/numpy/issues/2516,b'Datetime related failures under python 3 (Trac #1923)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/1923 on 2011-08-02 by @rgommers, assigned to unknown._\n\nThese are found with Python 3.2 in a virtualenv on OS X.\n\n\n    ======================================================================\n    ERROR: test_datetime_array_str (test_datetime.TestDateTime)\n    ----------------------------------------------------------------------\n    Traceback (most recent call last):\n      File ""/Users/rgommers/Code/numpy/build/py3k/numpy/core/tests/test_datetime.py"", line 510, in test_datetime_array_str\n        assert_equal(str(a), ""[\'2011-03-16\' \'1920-01-01\' \'2013-05-19\']"")\n      File ""/Users/rgommers/Code/numpy/build/py3k/numpy/core/numeric.py"", line 1385, in array_str\n        return array2string(a, max_line_width, precision, suppress_small, \' \', """", str)\n      File ""/Users/rgommers/Code/numpy/build/py3k/numpy/core/arrayprint.py"", line 437, in array2string\n        separator, prefix, formatter=formatter)\n      File ""/Users/rgommers/Code/numpy/build/py3k/numpy/core/arrayprint.py"", line 313, in _array2string\n        _summaryEdgeItems, summary_insert)[:-1]\n      File ""/Users/rgommers/Code/numpy/build/py3k/numpy/core/arrayprint.py"", line 480, in _formatArray\n        word = format_function(a[-i]) + separator\n      File ""/Users/rgommers/Code/numpy/build/py3k/numpy/core/arrayprint.py"", line 726, in __call__\n        casting=self.casting)\n    TypeError: Cannot create a local timezone-based date string from a NumPy datetime without forcing \'unsafe\' casting\n    \n    ======================================================================\n    ERROR: test_datetime_divide (test_datetime.TestDateTime)\n    ----------------------------------------------------------------------\n    Traceback (most recent call last):\n      File ""/Users/rgommers/Code/numpy/build/py3k/numpy/core/tests/test_datetime.py"", line 926, in test_datetime_divide\n        assert_equal(tda / tdb, 6.0 / 9.0)\n    TypeError: internal error: could not find appropriate datetime inner loop in true_divide ufunc\n    \n    \n    ======================================================================\n    FAIL: test_datetime_as_string (test_datetime.TestDateTime)\n    ----------------------------------------------------------------------\n    Traceback (most recent call last):\n      File ""/Users/rgommers/Code/numpy/build/py3k/numpy/core/tests/test_datetime.py"", line 1166, in test_datetime_as_string\n        \'1959\')\n      File ""/Users/rgommers/Code/numpy/build/py3k/numpy/testing/utils.py"", line 313, in assert_equal\n        raise AssertionError(msg)\n    AssertionError: \n    Items are not equal:\n     ACTUAL: b\'1959\'\n     DESIRED: \'1959\'\n    \n    ======================================================================\n    FAIL: test_datetime_as_string_timezone (test_datetime.TestDateTime)\n    ----------------------------------------------------------------------\n    Traceback (most recent call last):\n      File ""/Users/rgommers/Code/numpy/build/py3k/numpy/core/tests/test_datetime.py"", line 1277, in test_datetime_as_string_timezone\n        \'2010-03-15T06:30Z\')\n      File ""/Users/rgommers/Code/numpy/build/py3k/numpy/testing/utils.py"", line 313, in assert_equal\n        raise AssertionError(msg)\n    AssertionError: \n    Items are not equal:\n     ACTUAL: b\'2010-03-15T06:30Z\'\n     DESIRED: \'2010-03-15T06:30Z\'\n    \n    ----------------------------------------------------------------------\n\n'"
2515,7731579,numpy-gitbot,seberg,2012-10-19 22:30:13,2013-10-25 16:21:28,2013-10-25 16:21:28,closed,,,1,11 - Bug;component: numpy.numarray;priority: normal,https://api.github.com/repos/numpy/numpy/issues/2515,b'Indexing arrays with arrays having redundant entries (Trac #1922)',"b""_Original ticket http://projects.scipy.org/numpy/ticket/1922 on 2011-08-02 by trac user gfabbian, assigned to unknown._\n\nI'm experiencing a problem with array indexing. Suppose you have an array a and another array b you want to use to use as index for a in order to assign some values to the position pointed by b elements.\n\n\n\n\n    >>>a=numpy.zeros(5)\n    \n    >>> print a\n    \n    >>>[ 0.  0.  0.  0.  0.]\n\n\n\n\nNow I would like to increase the second element twice using this technique\n\n\n\n    >>>b=numpy.array([1,1])\n    \n    >>>a[b]+=1.\n    \n    >>> print a\n    \n    >>>[ 0.  1.  0.  0.  0.]\n    \n\n\n\nwhile I expected to have\n\n\n\n    >>>[ 0.  2.  0.  0.  0.]\n\n\n \n\nThere are no problems if the array b has no redundancies (all values of its elements are different).\nIs it a bug or I'm missing something?\n\n\nThanks in advance"""
2514,7731578,numpy-gitbot,numpy-gitbot,2012-10-19 22:30:11,2012-10-19 22:30:12,2012-10-19 22:30:12,closed,,,1,11 - Bug;component: Other;priority: normal,https://api.github.com/repos/numpy/numpy/issues/2514,b'method index and coords of flatiter object are one-off (Trac #1921)',"b""_Original ticket http://projects.scipy.org/numpy/ticket/1921 on 2011-08-02 by trac user rvdb, assigned to unknown._\n\nSomewhere i read that the flatiter iterator object returned by a.flat where a is some ndarray have methods index and coords. And indeed they have but they seem to be 'one-off':\n\nIn [71]: a = ones((3,3))\n\nIn [72]: fla = a.flat\n\nIn [73]: for va in fla:\n   ....:       print fla.index, fla.coords, va\n   ....: \n1 (0, 1) 1.0\n2 (0, 2) 1.0\n3 (1, 0) 1.0\n4 (1, 1) 1.0\n5 (1, 2) 1.0\n6 (2, 0) 1.0\n7 (2, 1) 1.0\n8 (2, 2) 1.0\n9 (3, 0) 1.0\n\nOtherwise it seems a quite fast way to iterate over all elements...\n\n"""
2512,7731573,numpy-gitbot,numpy-gitbot,2012-10-19 22:30:00,2012-10-19 22:30:04,2012-10-19 22:30:04,closed,,1.6.2,13,11 - Bug;component: numpy.core;priority: normal,https://api.github.com/repos/numpy/numpy/issues/2512,b'import_umath macro has return type incompatible with Python 3 (Trac #1919)',"b""_Original ticket http://projects.scipy.org/numpy/ticket/1919 on 2011-07-30 by trac user Arfrever, assigned to unknown._\n\nimport_umath macro (generated by numpy/core/code_generators/generate_ufunc_api.py) currently always returns void, which causes compilation failure when trying to use this function in an init function in extension module with Python 3.\n\nI suggest that the same solution be implemented, which is used for import_array macro (generated by numpy/core/code_generators/generate_numpy_api.py). I'm attaching the patch."""
2511,7731572,numpy-gitbot,numpy-gitbot,2012-10-19 22:29:58,2012-10-19 22:29:59,2012-10-19 22:29:59,closed,,NumPy 1.7,4,11 - Bug;component: numpy.lib;priority: normal,https://api.github.com/repos/numpy/numpy/issues/2511,"b""Failed to compile numpy: PyArrayObject has no member 'ob_type' (Trac #1918)""","b'_Original ticket http://projects.scipy.org/numpy/ticket/1918 on 2011-07-30 by trac user _v_l, assigned to unknown._\n\nHi.[[BR]]\n\nI\'m on Archlinux x86_64, gcc 4.6.1, python 2.7.2 and 3.2.1.[[BR]]\n\nI try to compile numpy using python of 2 and 3 versions but it fails on python3 with the following (a bit reformatted):[[BR]]\n\n\n    creating build/temp.linux-x86_64-3.2/numpy/lib\n    creating build/temp.linux-x86_64-3.2/numpy/lib/src\n    compile options: \'-Inumpy/core/include -Ibuild/src.linux-x86_64-3.2/numpy/core/include/numpy \\\n      -Inumpy/core/src/private -Inumpy/core/src -Inumpy/core -Inumpy/core/src/npymath \\\n      -Inumpy/core/src/multiarray -Inumpy/core/src/umath -Inumpy/core/src/npysort -Inumpy/core/include \\\n      -I/usr/include/python3.2mu -Ibuild/src.linux-x86_64-3.2/numpy/core/src/multiarray \\\n      -Ibuild/src.linux-x86_64-3.2/numpy/core/src/umath -c\'\n    gcc: numpy/lib/src/_compiled_base.c\n    numpy/lib/src/_compiled_base.c: In function \'pack_or_unpack_bits\':\n    numpy/lib/src/_compiled_base.c:1317:51: error: \'PyArrayObject\' has no member named \'ob_type\'\n    numpy/lib/src/_compiled_base.c:1357:43: error: \'PyArrayObject\' has no member named \'ob_type\'\n    numpy/lib/src/_compiled_base.c: In function \'pack_or_unpack_bits\':\n    numpy/lib/src/_compiled_base.c:1317:51: error: \'PyArrayObject\' has no member named \'ob_type\'\n    numpy/lib/src/_compiled_base.c:1357:43: error: \'PyArrayObject\' has no member named \'ob_type\'\n    error: Command ""gcc -pthread -DDYNAMIC_ANNOTATIONS_ENABLED=1 -DNDEBUG -g -fwrapv -O3 -Wall \\\n      -Wstrict-prototypes -march=x86-64 -mtune=generic -O2 -pipe -fPIC -Inumpy/core/include \\\n      -Ibuild/src.linux-x86_64-3.2/numpy/core/include/numpy -Inumpy/core/src/private -Inumpy/core/src \\\n      -Inumpy/core -Inumpy/core/src/npymath -Inumpy/core/src/multiarray -Inumpy/core/src/umath \\\n      -Inumpy/core/src/npysort -Inumpy/core/include -I/usr/include/python3.2mu \\\n      -Ibuild/src.linux-x86_64-3.2/numpy/core/src/multiarray \\\n      -Ibuild/src.linux-x86_64-3.2/numpy/core/src/umath -c numpy/lib/src/_compiled_base.c \\\n      -o build/temp.linux-x86_64-3.2/numpy/lib/src/_compiled_base.o"" failed with exit status 1\n\n\n\nFor both versions the build options are:\n\n\n      setup.py config_fc --fcompiler=gnu95 build\n\n'"
2510,7731569,numpy-gitbot,numpy-gitbot,2012-10-19 22:29:54,2012-10-19 22:29:56,2012-10-19 22:29:56,closed,,NumPy 1.7,9,11 - Bug;component: numpy.core;priority: highest,https://api.github.com/repos/numpy/numpy/issues/2510,b'Memory leak in 2.0.0.dev-Unknown (Trac #1917)',"b""_Original ticket http://projects.scipy.org/numpy/ticket/1917 on 2011-07-28 by trac user jiffyclub, assigned to unknown._\n\nThe following code overruns my system's memory in a fraction of a second:\n\n\n\n    >>> import numpy as np\n    >>> np.__version__\n    '2.0.0.dev-Unknown'\n    >>> def test():\n    ...     a = np.zeros((10000,10000),dtype=np.float)\n    ... \n    >>> while True:\n    ...     test()\n    ... \n\n\n\nI believe this is the most recent numpy, checked out and compiled last night (7-28-2011). I'm using Python 2.7.1 on Mac OS 10.6.8.\n"""
2509,7731568,numpy-gitbot,charris,2012-10-19 22:29:53,2015-01-23 21:57:53,2015-01-23 21:57:53,closed,,,3,11 - Bug;component: Other;priority: normal,https://api.github.com/repos/numpy/numpy/issues/2509,b'genfromtxt strips brackets from names (Trac #1916)',"b""_Original ticket http://projects.scipy.org/numpy/ticket/1916 on 2011-07-28 by trac user mboquien, assigned to unknown._\n\ngenfromtxt systematically strips any bracket ([]) from the name of the columns. Here is a short snippet exhibitting the problem.\n\nIn [1]: from StringIO import StringIO\n\nIn [2]: s = StringIO('1 2\\n3 4')\n\nIn [3]: d = genfromtxt(s,names=['a[1]','a[2]'])\n\nIn [4]: d\n\nOut[4]: \narray([(1.0, 2.0), (3.0, 4.0)], \n      dtype=[('a1', '<f8'), ('a2', '<f8')])\n\nNote that 'a[1]' and 'a[2]' have unexpectedly been substituted with 'a1' and 'a2'.\n\nThank you very much, regards,\n\nM\xa8\xa6d\xa8\xa6ric"""
2507,7731564,numpy-gitbot,charris,2012-10-19 22:29:50,2014-02-21 02:08:17,2014-02-21 02:08:17,closed,,,3,11 - Bug;component: numpy.core;priority: normal,https://api.github.com/repos/numpy/numpy/issues/2507,b'Delayed ValueError when using count_nonzero with object array (Trac #1914)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/1914 on 2011-07-25 by trac user rcl33, assigned to unknown._\n\nUsing count_nonzero on an array with dtype=numpy.object causes an error on the next logical test.\n\nExample:\n\n\n    import numpy\n    \n    x = numpy.zeros((3,), dtype=numpy.object)\n    x[0] = numpy.zeros((30,))\n    \n    # This sets up the error\n    numpy.count_nonzero(x)\n    \n    # A for loop or truth test triggers error\n    for i in [1]: print i\n    \n    # Result is exception:\n    # ValueError: The truth value of an array with more than one element is ambiguous. Use a.any() or a.all()\n\n\n'"
2506,7731563,numpy-gitbot,charris,2012-10-19 22:29:48,2013-05-29 14:04:12,2013-05-23 17:19:12,closed,,,6,11 - Bug;component: Other;priority: normal,https://api.github.com/repos/numpy/numpy/issues/2506,"b""PyUFunc_RegisterLoopForType doesn't work for custom data types (Trac #1913)""","b""_Original ticket http://projects.scipy.org/numpy/ticket/1913 on 2011-07-21 by trac user jvporter, assigned to unknown._\n\nI upgraded from NumPy 1.5 to 1.6, and found that ufuncs on my custom array data type stopped working (specifically == and !=). I don't think I'm doing anything wrong, but it's possible that something about the API has changed here. For reference, the code where I'm attempting this looks like so (minus some preprocessor magic):\n\n\n\n        HANDLE_NPYTYPE = PyArray_RegisterDataType(descr);\n    \n        types[0] = types[1] = HANDLE_NPYTYPE; types[2] = NPY_BOOL;\n        PyUFunc_RegisterLoopForType(eq, HANDLE_NPYTYPE,\n                                    Arr_equal,types,0);\n\n\n\nIf you need more context, the full source file is here: http://trac.mcs.anl.gov/projects/ITAPS/browser/python/trunk/iBase_handleTempl.def"""
2505,7731562,numpy-gitbot,numpy-gitbot,2012-10-19 22:29:46,2012-10-19 22:29:47,2012-10-19 22:29:47,closed,,NumPy 1.7,4,11 - Bug;component: numpy.core;priority: normal,https://api.github.com/repos/numpy/numpy/issues/2505,b'datetime and record arrays/masked arrays (Trac #1912)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/1912 on 2011-07-18 by @chrisjordansquire, assigned to unknown._\n\nI\'m using the 2.0.0 development version of numpy on ububtu 10.10 . \n\nWhen string arguments for the dtype are given for a record array, and one of the individual dtypes is datetime64[D], the day part is lost and the datetime become generic. This makes it impossible to assign anything to it. \n\nFor example, look at\nnp.zeros(4, dtype = \',\'.join([\'datetime64[D]\', \'i4\']))\n\nThis gives an array with dtype dtype=[(\'f0\', <M8), (\'f1\', \'<i4\')], where the <M8 should be <M8[D]. \n\n\nA different bug happens when putting datetimes into masked arrays. For example,  \nnp.ma.zeros(4,dtype= \'datetime64[D],i4\')\ngives a ValueError: mismatch in size of old and new data-descriptor with traceback\n\n\n\n\n\n/home/intern/my26/lib/python2.6/site-packages/numpy/ma/core.pyc in __call__(self, a, *args, **params)\n   7142             _extras[p] = params.pop(p)\n   7143         # Get the result\n\n-> 7144         result = self._func.__call__(a, *args, **params).view(MaskedArray)\n   7145         if ""fill_value"" in common_params:\n   7146             result.fill_value = _extras.get(""fill_value"", None)\n\n/home/intern/my26/lib/python2.6/site-packages/numpy/ma/core.pyc in __array_finalize__(self, obj)\n   2794         if self.dtype.names:\n   2795             if self._fill_value is None:\n-> 2796                 self._fill_value = _check_fill_value(None, self.dtype)\n   2797         return\n   2798 \n\n/home/intern/my26/lib/python2.6/site-packages/numpy/ma/core.pyc in _check_fill_value(fill_value, ndtype)\n    392         if fields:\n    393             descr = ndtype.descr\n--> 394             fill_value = np.array(_recursive_set_default_fill_value(descr),\n    395                                   dtype=ndtype,)\n    396         else:\n\n/home/intern/my26/lib/python2.6/site-packages/numpy/ma/core.pyc in _recursive_set_default_fill_value(dtypedescr)\n    360             deflist.append(tuple(_recursive_set_default_fill_value(currenttype)))\n    361         else:\n--> 362             deflist.append(default_fill_value(np.dtype(currenttype)))\n    363     return tuple(deflist)\n    364 \n\nValueError: mismatch in size of old and new data-descriptor\n'"
2503,7731560,numpy-gitbot,seberg,2012-10-19 22:29:43,2013-01-06 10:42:23,2013-01-06 10:42:23,closed,,,2,11 - Bug;component: numpy.core;priority: low,https://api.github.com/repos/numpy/numpy/issues/2503,b'Check buffer bounds in ndarray creation (Trac #1910)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/1910 on 2011-07-18 by @pv, assigned to unknown._\n\nForwarded from Stefan Krah:\n\n----------------------------------------\n\nWith a recent NumPy clone + Python3.3, I get this invalid access:\n\n\n    Python 3.3.0a0 (default:1dd6908df8f5, Jul 16 2011, 11:16:00) \n    [GCC 4.4.3] on linux2\n    Type ""help"", ""copyright"", ""credits"" or ""license"" for more information.\n    >>> from numpy import *\n    >>> x = ndarray(buffer=bytearray([1,2,3,4,5,6,7,8,9,10]), shape=[2,3], strides=[-3, -2], dtype=""B"", offset=5)\n    >>> x\n    array([[  6,   4,   2],\n           [  3,   1, 251]], dtype=\'uint8\')\n    >>> x[1][2]\n    251\n    >>> \n\n\nI think NumPy should probably refuse to create such an array, like here:\n\n\n    >>> x = ndarray(buffer=bytearray([1,2,3,4,5,6,7,8,9,10]), shape=[2,3], strides=[-3, -2], dtype=""B"", offset=0)\n    Traceback (most recent call last):\n      File ""<stdin>"", line 1, in <module>\n    ValueError: strides is incompatible with shape of requested array and size of buffer\n\n\n'"
2502,7731557,numpy-gitbot,numpy-gitbot,2012-10-19 22:29:38,2012-10-19 22:29:41,2012-10-19 22:29:41,closed,,NumPy 1.7,11,11 - Bug;component: numpy.core;priority: highest,https://api.github.com/repos/numpy/numpy/issues/2502,b'Datetime related build error on Windows (Trac #1909)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/1909 on 2011-07-17 by @rgommers, assigned to @mwiebe._\n\nOnly in master. Builds okay on OS X.\n\n\n    creating build\\temp.win32-2.6\\Release\\numpy\\core\\src\\multiarray\n    compile options: \'-Inumpy\\core\\include -Ibuild\\src.win32-2.6\\numpy\\core\\include/numpy -Inumpy\\core\\src\\private -Inumpy\\core\\src -Inumpy\\core -Inumpy\\core\\src\\npymath -Inumpy\\core\\src\\multiarray -Inumpy\\core\\src\\umath -Inumpy\\core\\src\\npysort -Inumpy\\core\\include -IC:\\Python26\\include -IC:\\Python26\\PC -Ibuild\\src.win32-2.6\\numpy\\core\\src\\multiarray -Ibuild\\src.win32-2.6\\numpy\\core\\src\\umath -c\'\n    gcc -mno-cygwin -O2 -Wall -Wstrict-prototypes -Inumpy\\core\\include -Ibuild\\src.win32-2.6\\numpy\\core\\include/numpy -Inumpy\\core\\src\\private -Inumpy\\core\\src -Inumpy\\core -Inumpy\\core\\src\\npymath -Inumpy\\core\\src\\multiarray -Inumpy\\core\\src\\umath -Inumpy\\core\\src\\npysort -Inumpy\\core\\include -IC:\\Python26\\include -IC:\\Python26\\PC -Ibuild\\src.win32-2.6\\numpy\\core\\src\\multiarray -Ibuild\\src.win32-2.6\\numpy\\core\\src\\umath -c numpy\\core\\src\\multiarray\\multiarraymodule_onefile.c -o build\\temp.win32-2.6\\Release\\numpy\\core\\src\\multiarray\\multiarraymodule_onefile.o\n    g++ -mno-cygwin -shared build\\temp.win32-2.6\\Release\\numpy\\core\\src\\multiarray\\multiarraymodule_onefile.o -LC:\\Python26\\libs -LC:\\Python26\\PCbuild -Lbuild\\temp.win32-2.6 -lnpymath -lnpysort -lpython26 -lmsvcr90 -o build\\lib.win32-2.6\\numpy\\core\\multiarray.pyd\n    build\\temp.win32-2.6\\Release\\numpy\\core\\src\\multiarray\\multiarraymodule_onefile.o:multiarraymodule_onefile.c:(.text+0x7b15): undefined reference to `localtime_s\'\n    build\\temp.win32-2.6\\Release\\numpy\\core\\src\\multiarray\\multiarraymodule_onefile.o:multiarraymodule_onefile.c:(.text+0x8139): undefined reference to `gmtime_s\'\n    build\\temp.win32-2.6\\Release\\numpy\\core\\src\\multiarray\\multiarraymodule_onefile.o:multiarraymodule_onefile.c:(.text+0x98d1): undefined reference to `localtime_s\'\n    collect2: ld returned 1 exit status\n    error: Command ""g++ -mno-cygwin -shared build\\temp.win32-2.6\\Release\\numpy\\core\\src\\multiarray\\multiarraymodule_onefile.o -LC:\\Python26\\libs -LC:\\Python26\\PCbuild -Lbuild\\temp.win32-2.6 -lnpymath -lnpysort -lpython26 -lmsvcr90 -o build\\lib.win32-2.6\\numpy\\core\\multiarray.pyd"" failed with exit status 1\n\n'"
2501,7731555,numpy-gitbot,charris,2012-10-19 22:29:36,2014-02-21 01:50:33,2014-02-21 01:50:33,closed,,,3,11 - Bug;component: numpy.core;priority: normal,https://api.github.com/repos/numpy/numpy/issues/2501,b'Incorrect parsing of dtype comma separated strings that have datatime64 (Trac #1908)',"b""_Original ticket http://projects.scipy.org/numpy/ticket/1908 on 2011-07-16 by trac user rocha, assigned to unknown._\n\nThe following dtypes should use the same datetime64 time resultions, however one is in [us] and the other in [s]:\n\n>>> print numpy.dtype('i, datetime64[s]');\n[('f0', '<i4'), ('f1', ('<M8[us]', {}))]\n\n>>> print numpy.dtype([('f1', 'i'), ('f2', 'datetime64[s]')])\n[('f1', '<i4'), ('f2', ('<M8[s]', {}))]\n\nPython 2.6.6\nnumpy 1.6.1rc3\n\n"""
2500,7731554,numpy-gitbot,charris,2012-10-19 22:29:35,2014-02-21 01:45:18,2014-02-21 01:45:18,closed,,,2,11 - Bug;component: Other;priority: normal,https://api.github.com/repos/numpy/numpy/issues/2500,b'treat an array with a single value as a scaler (Trac #1907)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/1907 on 2011-07-14 by trac user rgrout, assigned to unknown._\n\nIf I have an array([3]) (an array with a single value), I should be able to take the dot product with another vector or matrix as though I were multiplying by a scalar.\n\nFor example.\n[[[\na=array([3])\nb = array([3,5,6,2,3]).reshape((2,2))\nc = rand(5,5)\nnp.dot(a,b)==3*b\nnp.dot(a,c)==3*c\n]]]\n'"
2499,7731553,numpy-gitbot,charris,2012-10-19 22:29:33,2014-02-20 23:39:03,2014-02-20 23:39:03,closed,,,2,11 - Bug;component: Other;priority: normal,https://api.github.com/repos/numpy/numpy/issues/2499,b'FAIL: test_two_keys_two_vars (test_recfunctions.TestJoinBy2) (Trac #1906)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/1906 on 2011-07-14 by @stsci-sienkiew, assigned to unknown._\n\nObserved in 32 bit python 2.7 on mac leopard and red hat enterprise 4 linux.  Not observed in any of my 64 bit systems.\n\n\n\n    FAIL: test_two_keys_two_vars (test_recfunctions.TestJoinBy2)\n    ----------------------------------------------------------------------\n    Traceback (most recent call last):\n      File ""/usr/stsci/pyssgdev/2.7/numpy/lib/tests/test_recfunctions.py"", line 677, in test_two_keys_two_vars\n        assert_equal(test, control)\n      File ""/usr/stsci/pyssgdev/2.7/numpy/ma/testutils.py"", line 120, in assert_equal\n        return assert_array_equal(actual, desired, err_msg)\n      File ""/usr/stsci/pyssgdev/2.7/numpy/ma/testutils.py"", line 193, in assert_array_equal\n        header=\'Arrays are not equal\')\n      File ""/usr/stsci/pyssgdev/2.7/numpy/ma/testutils.py"", line 186, in assert_array_compare\n        verbose=verbose, header=header)\n      File ""/usr/stsci/pyssgdev/2.7/numpy/testing/utils.py"", line 635, in assert_array_compare\n        raise AssertionError(msg)\n    AssertionError: \n    Arrays are not equal\n    \n    (mismatch 100.0%)\n     x: array([(10, 0, 50, 65, 10, 0), (11, 0, 51, 66, 11, 1),\n           (10, 1, 52, 67, 12, 2), (11, 1, 53, 68, 13, 3),\n           (10, 2, 54, 69, 14, 4), (11, 2, 55, 70, 15, 5),...\n     y: array([(10L, 0L, 50L, 65L, 10L, 0L), (11L, 0L, 51L, 66L, 11L, 1L),\n           (10L, 1L, 52L, 67L, 12L, 2L), (11L, 1L, 53L, 68L, 13L, 3L),\n           (10L, 2L, 54L, 69L, 14L, 4L), (11L, 2L, 55L, 70L, 15L, 5L),...\n    \n\n\n'"
2498,7731552,numpy-gitbot,numpy-gitbot,2012-10-19 22:29:30,2012-10-19 22:29:32,2012-10-19 22:29:32,closed,,NumPy 1.7,8,11 - Bug;component: numpy.core;priority: normal,https://api.github.com/repos/numpy/numpy/issues/2498,b'numpy/core/numeric/allclose() fails to test for NaN inputs (Trac #1905)',"b""_Original ticket http://projects.scipy.org/numpy/ticket/1905 on 2011-07-12 by trac user robertpyle, assigned to @rgommers._\n\nDespite a comment that says NaNs in either input cause it to return False, routine allclose() in core/numeric.py fails to test its inputs for NaN.  This causes a warning to be issued by numpy.test(), at least on MacOSX 10.6.8  with python.org python2.7.1, numpy 1.6.1.rc3.\n\nA 2-line addition fixes this.  Here's the diff:\n\n\n    1915a1916,1917\n    >     if any(isnan(x)) or any(isnan(y)):\n    >         return False\n\n"""
2497,7731550,numpy-gitbot,charris,2012-10-19 22:29:29,2014-02-20 23:30:08,2014-02-20 23:30:08,closed,,,4,11 - Bug;component: numpy.core;priority: normal,https://api.github.com/repos/numpy/numpy/issues/2497,b'ndarray derived classes: inconsistent return type of min() (Trac #1904)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/1904 on 2011-07-12 by trac user cstraehl, assigned to unknown._\r\n```\r\nimport numpy\r\n\r\nclass Test(numpy.ndarray):\r\n    def __init__(self, *args):\r\n        numpy.ndarray.__init__(self,*args)\r\n\r\na1 = numpy.ndarray((1,))\r\na2 = Test((1,))\r\n```\r\n# we expect the type to be the same\r\n# because we did not overload the min() function...\r\nassert type(a1) == type(a2), ""inconsitent type""'"
2496,7731548,numpy-gitbot,numpy-gitbot,2012-10-19 22:29:26,2012-10-19 22:29:27,2012-10-19 22:29:27,closed,,NumPy 1.7,3,11 - Bug;component: Documentation;priority: normal,https://api.github.com/repos/numpy/numpy/issues/2496,b'sphinxext issue with field names (Trac #1903)',"b""_Original ticket http://projects.scipy.org/numpy/ticket/1903 on 2011-07-11 by @astrofrog, assigned to @pv._\n\nI am having an issue with sphinxext that can also be seen on the following page:\n\nhttp://docs.scipy.org/doc/scipy/reference/generated/scipy.integrate.quad.html#scipy.integrate.quad\n\nThe ':' after Parameters is on the next line. I think there should be no space before the colons, which would solve this issue."""
2495,7731547,numpy-gitbot,charris,2012-10-19 22:29:24,2013-06-17 00:40:59,2013-06-17 00:40:59,closed,,,0,11 - Bug;component: numpy.ma;priority: normal,https://api.github.com/repos/numpy/numpy/issues/2495,b'numpy.ma.compress fails because of the argument order (Trac #1902)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/1902 on 2011-07-11 by @efiring, assigned to @pierregm._\n\nThe _frommethod class used to make ma.compress assumes the first argument is the object on which the function is acting, but the compress signature is compress(cond, arr). Example of the resulting failure:\n\n\n\n    In [14]: arr = np.arange(8)\n    \n    In [15]: arr.shape = 4,2\n    \n    In [16]: cond = np.array([True, False, True, True])\n    \n    In [17]: np.ma.compress(cond, arr, axis=0)\n    ---------------------------------------------------------------------------\n    ValueError                                Traceback (most recent call last)\n    /home/efiring/<ipython-input-17-50a13b754f15> in <module>()\n    ----> 1 np.ma.compress(cond, arr, axis=0)\n    \n    /usr/local/lib/python2.7/dist-packages/numpy/ma/core.pyc in __call__(self, a, *args, **params)\n       5931         method = getattr(a, method_name, None)\n       5932         if method is not None:\n    -> 5933             return method(*args, **params)\n       5934         # Still here ? Then a is not a MaskedArray\n    \n       5935         method = getattr(MaskedArray, method_name, None)\n    \n    ValueError: condition must be 1-d array\n    \n    \n\n\n'"
2493,7731544,numpy-gitbot,rgommers,2012-10-19 22:29:21,2014-02-21 05:39:17,2014-02-21 05:39:17,closed,,,3,11 - Bug;component: Other;priority: normal,https://api.github.com/repos/numpy/numpy/issues/2493,"b""weave raise invalid version number '4.' error (Trac #1900)""","b'_Original ticket http://projects.scipy.org/numpy/ticket/1900 on 2011-07-11 by trac user hyry0088, assigned to unknown._\n\nWhen updated to NumPy 1.6.0, weave can\'t compile c code by using mingw.\n\nIt raise ValueError: invalid version number \'4.\'.\n\nFollowing is the test program:\n\nfrom scipy.weave import inline\na = 0\ninline(""a+=1;"", [""a""], compiler=""gcc"")\n\nTo fix it:\n\nopen file: numpy/distutils/mingw32compiler.py\n\nreplace two ""4."" by ""4.0""'"
2492,7731543,numpy-gitbot,numpy-gitbot,2012-10-19 22:29:19,2012-10-19 22:29:20,2012-10-19 22:29:20,closed,,NumPy 1.7,3,11 - Bug;component: numpy.lib;priority: normal,https://api.github.com/repos/numpy/numpy/issues/2492,b'histogramdd improperly handles empty arrays with known bins (Trac #1899)',"b""_Original ticket http://projects.scipy.org/numpy/ticket/1899 on 2011-07-09 by trac user WeatherGod, assigned to unknown._\n\nSubject says it all.  In particular, this impacts histogram2d.  histogramdd appears to attempt to handle this case, but doesn't do so correctly.\n\n\n    >>> np.histogram2d([], [], bins=4)\n    (array([ 0.,  0.]), array([ 0.  ,  0.25,  0.5 ,  0.75,  1.  ]), array([ 0.  ,  0.25,  0.5 ,  0.75,  1.  ]))\n\n\nThe first element of the return tuple is a 1-D array with two elements. What is expected is a 2-D 4x4 array. Consider the following with non-empty inputs:\n\n\n    >>> np.histogram2d([0.3], [0.7], bins=4)\n    (array([[ 0.,  0.,  0.,  0.],\n           [ 0.,  0.,  0.,  0.],\n           [ 0.,  0.,  1.,  0.],\n           [ 0.,  0.,  0.,  0.]]), array([-0.2 ,  0.05,  0.3 ,  0.55,  0.8 ]), array([ 0.2 ,  0.45,  0.7 ,  0.95,  1.2 ]))\n\n\nFor comparison, consider how histogram behaves with empty inputs:\n\n\n    >>> np.histogram([], bins=4)\n    (array([0, 0, 0, 0]), array([ 0.  ,  0.25,  0.5 ,  0.75,  1.  ]))\n\n\n"""
2491,7731542,numpy-gitbot,seberg,2012-10-19 22:29:17,2016-03-23 13:14:08,2016-03-23 13:14:08,closed,,,2,11 - Bug;component: Other;priority: normal,https://api.github.com/repos/numpy/numpy/issues/2491,b'Casting complex numpy array scalars to Python scalars (Trac #1898)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/1898 on 2011-07-08 by @inducer, assigned to unknown._\n\nContrast this:\n\n\n\n    >>> x = np.array(17+3j, dtype=np.complex128)\n    >>> complex(x)\n    Traceback (most recent call last):\n      File ""<stdin>"", line 1, in <module>\n    TypeError: can\'t convert complex to float\n\n\n\nwith this:\n\n\n\n    >>> x = np.array(17, dtype=np.float64)\n    >>> float(x)\n    17.0\n\n\n\nThere\'s no obvious reason why one should work, but not the other. (In other words, numpy implements .__float__() but not .__complex__().)'"
2490,7731540,numpy-gitbot,charris,2012-10-19 22:29:15,2013-06-17 00:49:16,2013-06-17 00:49:16,closed,,,6,11 - Bug;component: numpy.ma;priority: high,https://api.github.com/repos/numpy/numpy/issues/2490,b'Pickling a numpy.ma.MaskedConstant fails (Trac #1897)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/1897 on 2011-07-07 by @jpaalasm, assigned to @pierregm._\n\n\n\n    Python 2.7.1+ (r271:86832, Apr 11 2011, 18:13:53) \n    [GCC 4.5.2] on linux2\n    Type ""help"", ""copyright"", ""credits"" or ""license"" for more information.\n    >>> import pickle; import numpy; numpy.__version__\n    \'1.5.1\'\n    >>> ma = numpy.ma.MaskedArray([0, 0, 0], mask=True)\n    >>> m = ma[0]\n    >>> m\n    masked\n    >>> pickle.dumps(m)\n    Traceback (most recent call last):\n      File ""<stdin>"", line 1, in <module>\n      File ""/usr/lib/python2.7/pickle.py"", line 1374, in dumps\n        Pickler(file, protocol).dump(obj)\n      File ""/usr/lib/python2.7/pickle.py"", line 224, in dump\n        self.save(obj)\n      File ""/usr/lib/python2.7/pickle.py"", line 306, in save\n        rv = reduce(self.proto)\n      File ""/usr/lib/pymodules/python2.7/numpy/ma/core.py"", line 5494, in __reduce__\n        self.__getstate__())\n      File ""/usr/lib/pymodules/python2.7/numpy/ma/core.py"", line 5467, in __getstate__\n        self._fill_value,\n    AttributeError: \'MaskedConstant\' object has no attribute \'_fill_value\'\n    >>> \n\n\n'"
2489,7731537,numpy-gitbot,numpy-gitbot,2012-10-19 22:29:10,2012-10-19 22:29:14,2012-10-19 22:29:14,closed,,1.6.1,12,11 - Bug;component: numpy.core;priority: normal,https://api.github.com/repos/numpy/numpy/issues/2489,b'Another crash in numpy.subtract (Trac #1896)',"b""_Original ticket http://projects.scipy.org/numpy/ticket/1896 on 2011-07-06 by @r-owen, assigned to unknown._\n\nI've seen this crash on MacOS X 10.6 using python.org Python 2.7.2 (32-bit backward compatible version) and three flavors of numpy:\n * numpy 1.6.0 standard Mac binary\n * numpy 1.6.0 built from source\n * numpy 1.6.1rc2 built from source\n\nI have attached a data file and script. Text in the script shows how to run it. You can choose to use Tkinter or not, but I find the bug shows up more reliably if you use Tkinter (the configure event triggers numpy.subtract)."""
2488,7731534,numpy-gitbot,numpy-gitbot,2012-10-19 22:29:07,2012-10-23 02:46:13,2012-10-19 22:29:09,closed,,1.6.1,7,11 - Bug;component: Official binaries;priority: normal,https://api.github.com/repos/numpy/numpy/issues/2488,b'segfault in numpy.subtract on MacOS X 10.5 (Trac #1895)',"b""_Original ticket http://projects.scipy.org/numpy/ticket/1895 on 2011-07-05 by @r-owen, assigned to @rgommers._\n\nUsing the attached pickled data file and script I'm reliably getting a segfault in numpy.subtract on MacOS X 10.5.8 with a fresh Mac Python 2.7.2 32-bit from python.org and a fresh install of the official numpy 1.6.0 Mac binary.\n\nThe self-test reports no errors (3 known fail, 2 skip, 3179 tests in all).\n\nOther tid-bits that may be relevant:\n * I started with a larger data file and kept trying different subregions. The attached data file is about the smallest subregion I could find that showed the problem. Below that the crash went away.\n * If I convert it to float32 I still get the crash.\n * I don't see the crash on MacOS X 10.6.2 using the same python and numpy binary installer.\n"""
2487,7731531,numpy-gitbot,numpy-gitbot,2012-10-19 22:29:02,2012-10-19 22:29:06,2012-10-19 22:29:06,closed,,NumPy 1.7,12,11 - Bug;component: numpy.testing;priority: normal,https://api.github.com/repos/numpy/numpy/issues/2487,"b'""DeprecationWarning: Setting NumPy dtype names is deprecated"" in several tests (Trac #1894)'","b'_Original ticket http://projects.scipy.org/numpy/ticket/1894 on 2011-07-05 by @stsci-sienkiew, assigned to unknown._\n\n`DeprecationWarning: Setting NumPy dtype names is deprecated, the dtype will become immutable in a future version`\n\nnumpy/core/tests/test_regression.py line 1016, 1425\n\nnumpy/lib/_iotools.py line 832, 839, 842\n\nnumpy/lib/npyio.py line 1619\n\nnumpy/core/tests/test_multiarray.py line 1319\n\n'"
2485,7731526,numpy-gitbot,seberg,2012-10-19 22:28:57,2014-01-29 11:27:42,2013-12-16 23:22:58,closed,,,10,11 - Bug;component: Other;priority: normal,https://api.github.com/repos/numpy/numpy/issues/2485,"b""object arrays converted to string arrays of 'S' dtype have default length. (Trac #1892)""","b""_Original ticket http://projects.scipy.org/numpy/ticket/1892 on 2011-07-04 by trac user ehiggs, assigned to unknown._\n\nI'm sure this must have been reported before, but I can't find it in the bug tracker. The bug is that calling a vectorized function on a string type truncates the string to '|S8' regardless of the original length.\n\nExample:\n\nIn [1]: import numpy\n\nIn [2]: def __f(x):\n\n   ...:     return x  \n\n   ...: \n\nIn [3]: f = numpy.vectorize(__f)\n\nIn [4]: s = '2011-07-04'\n\nIn [5]: y = f(s)\n\nIn [6]: y  \n\nOut[6]: \narray('2011-07-04', \n      dtype='|S10')\n\nIn [8]: z = f(numpy.array([s,s,s,s]))\n\nIn [9]: z\nOut[9]: \narray(['2011-07-', '2011-07-', '2011-07-', '2011-07-'], \n      dtype='|S8')\n\nIf this has been raised, please merge this in so I can track progress on the original."""
2484,7731525,numpy-gitbot,seberg,2012-10-19 22:28:56,2014-02-10 22:15:39,2014-02-10 22:15:39,closed,,,1,11 - Bug;component: Other;priority: normal,https://api.github.com/repos/numpy/numpy/issues/2484,b'Inconsisitent error when assigning rhs floats to lhs ints. (Trac #1891)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/1891 on 2011-07-02 by @charris, assigned to unknown._\n\nExamples\n\n\n\n    a = np.zeros(10, dtype=int)\n    a[[1,4]] = np.array([1.1, 4]) # TypeError\n    a[1:3] = np.array([1.1, 4]) # Casts to int\n    a[[1,4]] = [1.1, 4] # Casts to int\n\n\n\n'"
2483,7731523,numpy-gitbot,numpy-gitbot,2012-10-19 22:28:52,2012-10-23 02:46:10,2012-10-19 22:28:54,closed,,,6,11 - Bug;component: Other;priority: normal,https://api.github.com/repos/numpy/numpy/issues/2483,b'piecewise throws TypeError for int input and sin (Trac #1890)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/1890 on 2011-07-01 by trac user deil, assigned to unknown._\n\nI would have expected the following np.piecewise call to work:\n\n\n    >>> x = np.arange(0, 10)\n    >>> np.piecewise(x, [x < 5, x >= 5], [lambda x: -x, lambda x: np.sin(x)])\n    Traceback (most recent call last):\n      File ""<stdin>"", line 1, in <module>\n      File ""/opt/local/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/numpy/lib/function_base.py"", line 715, in piecewise\n        y[condlist[k]] = item(vals, *args, **kw)\n    TypeError: array cannot be safely cast to required type\n    >>> x.dtype\n    dtype(\'int64\')\n\n\n\nIt works for an array of floats though:\n\n\n    >>> x = np.arange(0, 10, dtype=float)\n    >>> np.piecewise(x, [x < 5, x >= 5], [lambda x: -x, lambda x: np.sin(x)])\n    array([-0.        , -1.        , -2.        , -3.        , -4.        ,\n           -0.95892427, -0.2794155 ,  0.6569866 ,  0.98935825,  0.41211849])\n\n\n\nIs this a bug?\n'"
2482,7731522,numpy-gitbot,numpy-gitbot,2012-10-19 22:28:50,2012-10-19 22:28:51,2012-10-19 22:28:51,closed,,,3,11 - Bug;component: numpy.distutils;priority: normal,https://api.github.com/repos/numpy/numpy/issues/2482,b'Numpy links wrong lapack blas and atlas in lapack_lite.so (Trac #1889)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/1889 on 2011-06-30 by trac user maldun, assigned to @cournape._\n\nI\'m working on Ubuntu 10.10/11.04, and Opensuse 11.4. I installed Gentoo prefix on both systems and compiled the blas lapack and atlas versions from. \n\nNo I installed numpy linked with the libraries from prefix\nOn Ubuntu it worked fine. On openSuse I got the following error message when I try to import numpy\n\n\n\n    parmenides@math146 ~/gentoo $ python\n    Python 2.7.1 (r271:86832, Jun 30 2011, 08:50:27) \n    [GCC 4.4.5] on linux2\n    Type ""help"", ""copyright"", ""credits"" or ""license"" for more information.\n    >>> import numpy\n    Traceback (most recent call last):\n      File ""<stdin>"", line 1, in <module>\n      File ""/home/parmenides/gentoo/usr/lib/python2.7/site-packages/numpy/__init__.py"", line 136, in <module>\n        import add_newdocs\n      File ""/home/parmenides/gentoo/usr/lib/python2.7/site-packages/numpy/add_newdocs.py"", line 9, in <module>\n        from numpy.lib import add_newdoc\n      File ""/home/parmenides/gentoo/usr/lib/python2.7/site-packages/numpy/lib/__init__.py"", line 13, in <module>\n        from polynomial import *\n      File ""/home/parmenides/gentoo/usr/lib/python2.7/site-packages/numpy/lib/polynomial.py"", line 17, in <module>\n        from numpy.linalg import eigvals, lstsq\n      File ""/home/parmenides/gentoo/usr/lib/python2.7/site-packages/numpy/linalg/__init__.py"", line 48, in <module>\n        from linalg import *\n      File ""/home/parmenides/gentoo/usr/lib/python2.7/site-packages/numpy/linalg/linalg.py"", line 23, in <module>\n        from numpy.linalg import lapack_lite\n    ImportError: liblapack.so.0: cannot open shared object file: No such file or directory\n    >>> quit()\n\n\n\nbut blas, lapack and atlas should have been built properly.\n\nThen after some other failed experiments I tried my build of lapack_lite.so from ubuntu in the opensuse version and got this:\n\n\n\n\n    ....\n        from numpy.linalg import lapack_lite\n    ImportError: liblapack.so.3gf: cannot open shared object file: No such file or directory\n\n\n\nwhen I opended with emacs the lapack_lite.so with my emacs I found this entry within the assembler code:\n\n\n\n\n    liblapack.so.3gf...libblas.so.3gf\n\n\n\nThe gag behind this is that this doesn\'t appear in my directory where I installed blas, lapack and atlas but in my /usr/lib directory. But my site cfg holds the following:\n\n\n\n\n    [atlas]\n    include_dirs = /home/maldun/Gentoo/usr/include  \n    library_dirs = /home/maldun/Gentoo/usr/lib/blas/threaded-atlas:/home/maldun/Gentoo/usr/lib/blas/reference:/home/maldun/Gentoo/usr/lib/lapack/atlas:/home/maldun/Gentoo/usr/lib\n    atlas_libs = cblas, atlas, blas  \n    lapack_libs = lapack, blas, cblas, atlas  \n    [blas_opt]\n    include_dirs = /home/maldun/Gentoo/usr/include  \n    library_dirs = /home/maldun/Gentoo/usr/lib/blas/threaded-atlas:/home/maldun/Gentoo/usr/lib/blas/reference:/home/maldun/Gentoo/usr/lib\n    libraries = cblas, atlas, blas  \n    [lapack_opt]\n    library_dirs = /home/maldun/Gentoo/usr/lib/lapack/atlas:/home/maldun/Gentoo/usr/lib/blas/reference:/home/maldun/Gentoo/usr/lib/blas/threaded-atlas:/home/maldun/Gentoo/usr/lib\n    libraries = lapack, blas, cblas, atlas  \n\n\n\nand those files are not located there!\n\nMy PATH, LIBRARY_PATH, and LD_LIBRARY_PATH also don\'t point there:\n\n\n\n\n    maldun@math112:~/Gentoo$ echo $LD_LIBRARY_PATH\n    /home/maldun/Gentoo/usr/lib:/home/maldun/Gentoo/lib/\n    maldun@math112:~/Gentoo$ echo $LIBRARY_PATH\n    /home/maldun/Gentoo/usr/lib:/home/maldun/Gentoo/lib/\n    maldun@math112:~/Gentoo$ echo $PATH                        \n    /home/maldun/Gentoo/usr/bin:/home/maldun/Gentoo/bin:/home/maldun/Gentoo/opt/bin:/home/maldun/Gentoo/usr/sbin:/home/maldun/Gentoo/sbin:/home/maldun/Gentoo/usr/x86_64-pc-linux-gnu/binutils-bin/2.21.51.0.7:/home/maldun/Gentoo/usr/x86_64-pc-linux-gnu/gcc-bin/4.4.5\n\n\n\nThis shouldn\'t be happening if I want to build exclusively with one version of BLAS/LAPACK/ATLAS, but I don\'t know how to fix this issue!\n\nPlease help me!\n\ngreez,\nmaldun'"
2480,7731519,numpy-gitbot,charris,2012-10-19 22:28:47,2014-02-20 23:00:39,2014-02-20 23:00:39,closed,,,2,11 - Bug;component: numpy.core;priority: normal,https://api.github.com/repos/numpy/numpy/issues/2480,b'broken int64 format in timedelta64 for Python < 2.7 (Trac #1887)',"b""_Original ticket http://projects.scipy.org/numpy/ticket/1887 on 2011-06-29 by @dhomeier, assigned to unknown._\n\nWith Python versions 2.4-2.6, the output of np.timedelta only produces the format string since (probably) merging the datetime branch, like this:\n\n\n    >>> np.__version__\n    '2.0.0.dev-f7c16d7'\n    >>> np.timedelta64(3)\n    numpy.timedelta64(%lld,'generic')\n    >>> str(np.timedelta64(3, 's'))\n    '%lld seconds'\n\n\nor in the most recent version\n\n\n    >>> np.__version__\n    '2.0.0.dev-192ac74'\n    >>> np.timedelta64(3)\n    numpy.timedelta64(%lld)\n\n\nmaking the corresponding tests fail, whereas with 2.7 and 3.2 the intended output is produced:\n\n\n    >>> np.timedelta64(3)\n    numpy.timedelta64(3)\n    >>> str(np.timedelta64(3, 's'))\n    '3 seconds'\n\n\n(Tested on MacOS X 10.5/ppc and 10.6/x86_64)"""
2479,7731517,numpy-gitbot,charris,2012-10-19 22:28:45,2014-02-20 22:24:18,2014-02-20 22:24:18,closed,,,2,11 - Bug;component: numpy.core;priority: normal,https://api.github.com/repos/numpy/numpy/issues/2479,b'ndarray.data not compatible between python 2.7 and 3.2 versions (Trac #1886)',"b""_Original ticket http://projects.scipy.org/numpy/ticket/1886 on 2011-06-29 by trac user axh, assigned to unknown._\n\nI am running python 3.2 / 2.7.2 with the standards from Fedora 15\n\nnumpy.x86_64\n1:1.5.1-1.fc15\n\npython3-numpy-f2py.x86_64\n1:1.5.1-1.fc15\n\nHere is the issue:\n\nwith\n\ni4 = np.ndarray([1],dtype=np.int32)\n\nin 2,7 I have\n\ntype(i4.data)\n<type 'buffer'>\n\nlen(i4.data[:])\n4\n\nso the buffer is byte-size \n\nin 3.2 the data buffer comes in chunks of the size of the basic type\n\nlen(i4.data[0])\n4\n\nlen(i4.data)\n1\n\ntype(i4.data)\n<class 'memoryview'>\n\nIt would be most desirable to switch this back to a mode that provides byte-size buffer in the same way in both versions.  Especially, it would be good if the buffer type memory layout does not depend on the type of objects it stores.  It should be just a data buffer.\n\n-Alexander\n"""
2478,7731516,numpy-gitbot,numpy-gitbot,2012-10-19 22:28:42,2012-10-23 02:46:04,2012-10-19 22:28:44,closed,,1.6.1,5,11 - Bug;component: numpy.core;priority: normal,https://api.github.com/repos/numpy/numpy/issues/2478,b'einsum wrong result / crash (Trac #1885)',"b""_Original ticket http://projects.scipy.org/numpy/ticket/1885 on 2011-06-28 by trac user royf, assigned to unknown._\n\nnumpy.einsum sometimes returns wrong results.\nConsider the following example:\n>>> p = numpy.array([.5, .5])\n>>> q = numpy.array([[0.26894142, 1-0.26894142], [1-0.26894142, 0.26894142]])\n>>> r = numpy.identity(2)\n...\n>>> p, q, r\n(array([ 0.5,  0.5]), array([[ 0.26894142,  0.73105858],\n       [ 0.73105858,  0.26894142]]), array([[ 1.,  0.],\n       [ 0.,  1.]]))\n>>> numpy.einsum('z,mz,zm->', p, q, r)\n3.7305612660634556e+177\n>>> numpy.einsum('z,mz,zm->', p, q, r)\n0.26894141999999999\n>>> numpy.einsum('z,mz,zm->', p, q, r)\n3.7305612660634556e+177\n>>> numpy.einsum('z,mz,zm->', p, q, r)\n0.26894141999999999\n>>> numpy.einsum('z,mz,zm->', p, q, r)\n3.7305612660634556e+177\n>>> numpy.einsum('z,mz,zm->', p, q, r)\n0.26894141999999999\n>>> numpy.einsum('z,mz,zm->', p, q, r)\n0.26894141999999999\n>>> numpy.einsum('z,mz,zm->', p, q, r)\n0.13447070999999999\n\nIn other runs this same example crashes the process.\n\nThe correct answer is 0.26894142.\nInterestingly, one of the answers returned is half the correct one.\nThis probably has to do with the specific value of p in the example.\nMy guess is it's something like an off-by-one bug.\n\nI'd try to fix it myself,\nbut the code is a scary mess :(\n\nGood luck!\n"""
2476,7731512,numpy-gitbot,charris,2012-10-19 22:28:39,2014-02-20 21:55:47,2014-02-20 21:55:47,closed,,,4,11 - Bug;component: numpy.ma;priority: normal,https://api.github.com/repos/numpy/numpy/issues/2476,b'unpickling a pickled empty masked array error (Trac #1883)',"b""_Original ticket http://projects.scipy.org/numpy/ticket/1883 on 2011-06-28 by trac user mauro, assigned to @pierregm._\n\nWhen unpickling an empty masked array the following error is thrown:\nTypeError: object pickle not returning list\n\nCode:\n\nimport numpy as np\n\nimport cPickle as pickle\n#import pickle as pickle\n\nma = np.ma.core.MaskedArray()\n\nwith open('tmp.pkl', 'wb') as fil:\n    pickle.dump(ma, fil, protocol=pickle.HIGHEST_PROTOCOL)\n\nwith open('tmp.pkl') as fil:\n    pickle.load(fil)\n"""
2474,7731510,numpy-gitbot,seberg,2012-10-19 22:28:36,2013-12-12 21:11:15,2013-12-12 21:11:15,closed,,,3,11 - Bug;component: numpy.core;priority: normal,https://api.github.com/repos/numpy/numpy/issues/2474,b'Segfault during garbage collection after some operations with arrays (Trac #1881)',"b""_Original ticket http://projects.scipy.org/numpy/ticket/1881 on 2011-06-28 by trac user Bogdan, assigned to unknown._\n\nSystem:\nOSX 10.6.7\nPython 2.6.1 (the one provided with system)\nNumpy 2.0.0.dev-3071eab (installed via SciPy Superpack)\n\nAfter running the file (attached) I get a segfault. Can't find any other lines to remove, because the bug disappears. GDB trace:\n\n\n\n    Program received signal EXC_BAD_ACCESS, Could not access memory.\n    Reason: KERN_INVALID_ADDRESS at address: 0x000000000000000a\n    0x00000001000b03eb in Py_Main ()\n    (gdb) bt\n    #0  0x00000001000b03eb in Py_Main ()\n    #1  0x0000000100039751 in PyDict_GetItemString ()\n    #2  0x00000001000b0bc4 in PyObject_GC_Track ()\n    #3  0x00000001000b118a in PyGC_Collect ()\n    #4  0x00000001000a30ca in Py_Finalize ()\n    #5  0x00000001000b03b1 in Py_Main ()\n    #6  0x0000000100000e6c in ?? ()\n\n\n"""
2473,7731509,numpy-gitbot,numpy-gitbot,2012-10-19 22:28:34,2012-10-23 02:46:01,2012-10-19 22:28:34,closed,,,2,11 - Bug;component: numpy.core;priority: normal,https://api.github.com/repos/numpy/numpy/issues/2473,b'FAIL: test_timedelta_scalar_construction (Trac #1880)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/1880 on 2011-06-26 by @nilswagner01, assigned to unknown._\n\n\n\n    ======================================================================\n    FAIL: test_timedelta_scalar_construction (test_datetime.TestDateTime)\n    ----------------------------------------------------------------------\n    Traceback (most recent call last):\n      File ""/home/nwagner/local/lib64/python2.6/site-packages/numpy/core/tests/test_datetime.py"", line 189, in test_timedelta_scalar_construction\n        assert_equal(str(np.timedelta64(3, \'s\')), \'3 seconds\')\n      File ""/home/nwagner/local/lib64/python2.6/site-packages/numpy/testing/utils.py"", line 313, in assert_equal\n        raise AssertionError(msg)\n    AssertionError: \n    Items are not equal:\n     ACTUAL: \'%lld seconds\'\n     DESIRED: \'3 seconds\'\n    \n\n\n'"
2472,7731508,numpy-gitbot,numpy-gitbot,2012-10-19 22:28:32,2012-10-19 22:28:32,2012-10-19 22:28:32,closed,,,1,11 - Bug;component: numpy.core;priority: normal,https://api.github.com/repos/numpy/numpy/issues/2472,b'bug of numpy.ndarray.ndim (Trac #1879)',"b""_Original ticket http://projects.scipy.org/numpy/ticket/1879 on 2011-06-25 by trac user coneagoe, assigned to unknown._\n\n1) It is OK, an array is created without argument _dtype_. While ndarray.ndim will be zero if the argument is specified.\n\n\n\n    >>> y = numpy.array([1, 2, 3])\n    >>> y\n    array([1, 2, 3])\n    >>> y.ndim\n    1\n    >>> y = numpy.array((1, 2, 3), dtype = [('a', numpy.int), ('b', numpy.int), ('c', numpy.int)])\n    >>> y\n    array((1, 2, 3),\n          dtype=[('a', '<i4'), ('b', '<i4'), ('c', '<i4')])\n    >>> y.ndim\n    0\n\n"""
2471,7731506,numpy-gitbot,numpy-gitbot,2012-10-19 22:28:26,2012-10-19 22:28:31,2012-10-19 22:28:31,closed,,NumPy 1.7,7,11 - Bug;component: numpy.core;priority: normal,https://api.github.com/repos/numpy/numpy/issues/2471,b'numpy.argmin() fails to find the minimum for the most negative integer (Trac #1878)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/1878 on 2011-06-22 by trac user tlatorre, assigned to unknown._\n\n\n\n    #!python\n    >>> a = np.array([-2**7, -2**7+1, -2**7+2], dtype=np.int8)\n    >>> a\n    array([-128, -127, -126], dtype=int8)\n    >>> np.argmin(a)\n    1\n    >>> b = np.array([-2**15, -2**15+1, -2**15+2], dtype=np.int16)\n    >>> b\n    array([-32768, -32767, -32766], dtype=int16)\n    >>> np.argmin(b)\n    1\n    >>> c = np.array([-2**31, -2**31+1, -2**31+2], dtype=np.int32)\n    >>> c\n    array([-2147483648, -2147483647, -2147483646], dtype=int32)\n    >>> np.argmin(c)\n    1\n\n'"
2470,7731505,numpy-gitbot,numpy-gitbot,2012-10-19 22:28:24,2012-10-19 22:28:25,2012-10-19 22:28:25,closed,,1.6.1,1,11 - Bug;component: Other;priority: normal,https://api.github.com/repos/numpy/numpy/issues/2470,b'Incorrect RuntimeWarning on first call to numpy.where (Trac #1877)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/1877 on 2011-06-21 by trac user deil, assigned to unknown._\n\nOn my Mac OS 10.6 with python 2.7 and numpy 1.6.0 installed via macports I get the following RunTimeWarning on the first call to numpy.where, but not on\nsubsequent calls:\n\n\n\n    $ python\n    Python 2.7.1 (r271:86832, May 15 2011, 23:17:21) \n    [GCC 4.2.1 (Apple Inc. build 5666) (dot 3)] on darwin\n    Type ""help"", ""copyright"", ""credits"" or ""license"" for more information.\n    >>> import numpy as np\n    >>> np.where([False, True],np.log([0, 1]), 42)\n    __main__:1: RuntimeWarning: divide by zero encountered in log\n    array([ 42.,   0.])\n    >>> np.where([False, True],np.log([0, 1]), 42)\n    array([ 42.,   0.])\n    >>> np.__version__\n    \'1.6.0\'\n\n\n\nThis warning occurs when calling np.log(0), which here shouldn\'t have been invoked, right?\nOn a Linux box I have I don\'t get the warning using the same commands.\n'"
2469,7731503,numpy-gitbot,charris,2012-10-19 22:28:23,2014-03-16 19:50:54,2014-03-16 19:50:54,closed,,,3,11 - Bug;component: numpy.core;Easy Fix;Patch;priority: normal,https://api.github.com/repos/numpy/numpy/issues/2469,b'dot() non-symmetrical for scalar*matrix of objects (Trac #1876)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/1876 on 2011-06-21 by @lebigot, assigned to unknown._\n\nNumPy\'s dot() function has a non-symmetrical behavior for scalar multipliers, when one of the objects is a matrix of objects:\n\n\n\n    >>> arr = matrix([1, 2], dtype=object)\n    >>> dot(arr, 3)\n    matrix([[3, 6]], dtype=object)\n    >>> dot(3, arr)\n    NotImplemented\n\n\n\n(My implementation of NumPy uses BLAS, but I think I remember also seeing this problem with the basic implementation.)\n\n\nA consequence of this is the following failed simple multiplication:\n\n\n\n    >>> arr*3\n    matrix([[3, 6]], dtype=object)\n    >>> 3*arr\n    ------------------------------------------------------------\n    Traceback (most recent call last):\n      File ""<ipython console>"", line 1, in <module>\n    TypeError: unsupported operand type(s) for *: \'int\' and \'matrix\'\n\n\n\nThe final TypeError looks definitely like a bug.  Mathematically, one also wants to have a symmetrical dot() product, for scalars (both dot(3, arr) and dot(arr, 3) should work), no?  A symmetrical dot() product for matrices of objects would solve both problems.'"
2468,7731502,numpy-gitbot,numpy-gitbot,2012-10-19 22:28:20,2012-10-19 22:28:21,2012-10-19 22:28:21,closed,,NumPy 1.7,3,11 - Bug;component: numpy.core;priority: normal,https://api.github.com/repos/numpy/numpy/issues/2468,b'hex output format changed in Python3 (Trac #1875)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/1875 on 2011-06-21 by @dhomeier, assigned to unknown._\n\ntest_arrayprint.py fails on python3.x with \n\n\n\n    FAIL: Test custom format function for each element in array.\n    ----------------------------------------------------------------------\n    Traceback (most recent call last):\n      File ""/Users/derek/lib/python3.2/site-packages/numpy/core/tests/test_arrayprint.py"", line 86, in test_format_function\n        ""[0x0L 0x1L 0x2L]"")\n      File ""/Users/derek/lib/python3.2/site-packages/numpy/testing/utils.py"", line 313, in assert_equal\n        raise AssertionError(msg)\n    AssertionError: \n    Items are not equal:\n     ACTUAL: \'[0x0 0x1 0x2]\'\n     DESIRED: \'[0x0L 0x1L 0x2L]\'\n\n\nApparently the hex() and oct() functions have been decided to print out a format without the trailing \'L\' as of python3 - [http://mail.python.org/pipermail/python-dev/2006-June/065946.html], so I suggest to define the expected result depending on the version (see patch).'"
2467,7731501,numpy-gitbot,numpy-gitbot,2012-10-19 22:28:17,2012-10-19 22:28:19,2012-10-19 22:28:19,closed,,1.6.1,6,11 - Bug;component: numpy.f2py;priority: normal,https://api.github.com/repos/numpy/numpy/issues/2467,b'f2py --include_path option not functional (Trac #1874)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/1874 on 2011-06-21 by @pearu, assigned to @rgommers._\n\nSee\n\n  http://cens.ioc.ee/pipermail/f2py-users/2011-June/002231.html\n\nfor the bug report.\n\nA fix is coming up soon.\n'"
2466,7731500,numpy-gitbot,charris,2012-10-19 22:28:15,2014-02-27 01:03:53,2014-02-27 01:03:53,closed,,,3,11 - Bug;component: Other;priority: normal,https://api.github.com/repos/numpy/numpy/issues/2466,b'Recarrays do not work with numpy.lib.stride_tricks.as_strided (Trac #1873)',"b""_Original ticket http://projects.scipy.org/numpy/ticket/1873 on 2011-06-21 by trac user irwin, assigned to unknown._\n\nIt seems that as_strided does not work as it should for recarrays. I think the issue is that the named fields of a recarray do not survive being run through as_strided. For example, the second print statement below is not able to output the array using numpy 1.6:\n\n-----\nimport numpy\nimport numpy.lib.stride_tricks\n\nt = numpy.dtype({'names': ['a', 'b'], 'formats': [numpy.float64, numpy.float64]}, align = True)\n\na = numpy.zeros(10, dtype = t)\nprint a\nprint numpy.lib.stride_tricks.as_strided(a)\n-----\n\nI had a look at stride_tricks.py, but I am not familiar enough with __array_interface__ to suggest a fix. I would be grateful if someone else is able to resolve this."""
2465,7731499,numpy-gitbot,charris,2012-10-19 22:28:14,2014-02-20 21:08:06,2014-02-20 21:08:06,closed,,,1,11 - Bug;component: Other;priority: normal,https://api.github.com/repos/numpy/numpy/issues/2465,"b""Problem with matrix(dtype='complex') in Python 2.5 (Trac #1872)""","b""_Original ticket http://projects.scipy.org/numpy/ticket/1872 on 2011-06-20 by trac user asmeurer, assigned to unknown._\n\nIf I put the following in a file called numpyfloattest.py\n\n\n\n    import numpy\n    \n    class A(object):\n        def __float__(self):\n            return 2.0\n        def __complex__(self):\n            return 5.0j\n    \n    a = A()\n    \n    print numpy.matrix([[a]], dtype='complex')\n\n\n\nI get\n\n\n\n    $python2.5 numpyfloattest.py \n    [[ 2.+0.j]]\n    $python2.6 numpyfloattest.py \n    [[ 0.+5.j]]\n    $python2.7 numpyfloattest.py \n    [[ 0.+5.j]]\n\n\n\nIn other words, for some reason, in Python 2.5 it is calling float() on the data even though the dtype is complex.  As you can imagine, this causes problems when the data is an object that represents a complex number.  In particular, this bug is causing problems with SymPy code that tries to convert the SymPy matrix [[0, -I], [I, 0]] to a numpy matrix (I is sympy.I, i.e., sqrt(-1)).   See https://groups.google.com/d/topic/sympy/9FOPjxC0D6s/discussion."""
2463,7731497,numpy-gitbot,numpy-gitbot,2012-10-19 22:28:07,2012-10-19 22:28:11,2012-10-19 22:28:11,closed,,1.6.1,12,11 - Bug;component: numpy.core;priority: high,https://api.github.com/repos/numpy/numpy/issues/2463,b'Cannot assign a list-of-lists to dtype=object ndarray if sublists are equal-length (Trac #1870)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/1870 on 2011-06-16 by trac user mjuric, assigned to unknown._\n\nThis snippet illustrates the problem:\n\n\tx = np.zeros(4, dtype=object)\n\ty = [[1], [2], [3], [4]]\n\tx[:] = y\n\nIn versions prior to 1.6, this code (as expected) assigned the sublists of y to x (so that, for example, x[2] would become [2]).\n\nIn 1.6, this code raises an exception:\n\n\tValueError: output operand requires a reduction, but reduction is not enabled\n\nHowever, if y is not a list of lists with equal number of elements:\n\n\tx = np.zeros(4, dtype=object)\n\ty = [[1], [2, 3], [3], [4]]\n\tx[:] = y\n\nno exception is raised.\n'"
2461,7731494,numpy-gitbot,numpy-gitbot,2012-10-19 22:28:02,2012-10-19 22:28:04,2012-10-19 22:28:04,closed,,NumPy 1.7,3,11 - Bug;component: numpy.core;priority: high,https://api.github.com/repos/numpy/numpy/issues/2461,b'datetime-fixes break numpy on python2.4 (Trac #1868)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/1868 on 2011-06-15 by @dhomeier, assigned to unknown._\n\nSince merging of the datetime-fixes [commits a827436 - does not build +  f986fd4]  numpy fails to load in python2.4, at least on MacOS X i386+ppc:\n\n\n\n    Python 2.4.4 (#1, Jan  5 2011, 03:05:41) \n    [GCC 4.0.1 (Apple Inc. build 5493)] on darwin\n    Type ""help"", ""copyright"", ""credits"" or ""license"" for more information.\n    >>> import numpy \n    Traceback (most recent call last):\n      File ""<stdin>"", line 1, in ?\n      File ""/Users/derek/lib/python2.4/site-packages/numpy/__init__.py"", line 137, in ?\n        import add_newdocs\n      File ""/Users/derek/lib/python2.4/site-packages/numpy/add_newdocs.py"", line 9, in ?\n        from numpy.lib import add_newdoc\n      File ""/Users/derek/lib/python2.4/site-packages/numpy/lib/__init__.py"", line 4, in ?\n        from type_check import *\n      File ""/Users/derek/lib/python2.4/site-packages/numpy/lib/type_check.py"", line 8, in ?\n        import numpy.core.numeric as _nx\n      File ""/Users/derek/lib/python2.4/site-packages/numpy/core/__init__.py"", line 5, in ?\n        import multiarray\n    ImportError: Failure linking new module: /Users/derek/lib/python2.4/site-packages/numpy/core/multiarray.so: Symbol not found: _PyErr_WarnEx\n      Referenced from: /Users/derek/lib/python2.4/site-packages/numpy/core/multiarray.so\n      Expected in: dynamic lookup\n\n\n\nI reckon the solution can be found in this changeset [http://projects.scipy.org/numpy/changeset/7996]\n'"
2460,7731492,numpy-gitbot,numpy-gitbot,2012-10-19 22:27:59,2012-10-19 22:28:01,2012-10-19 22:28:01,closed,,NumPy 1.7,8,11 - Bug;component: numpy.core;priority: normal,https://api.github.com/repos/numpy/numpy/issues/2460,b'numpy.absolute() can return a negative value (Trac #1867)',"b""_Original ticket http://projects.scipy.org/numpy/ticket/1867 on 2011-06-14 by trac user phil.hodge, assigned to unknown._\n\nOn a 32-bit Linux machine, when the input to the np.absolute() function is\na big-endian, floating point array, the output is the same as the input,\neven if the input array contains negative values.  Here is an example:\n\n{{{>>> print np.__version__\n2.0.0.dev-Unknown\n>>> x = np.array([-1., 0., 1.], dtype='>f8')\n>>> print np.absolute(x)\n[ -1.00000000e+00   0.00000000e+00   1.00000000e+00]\n>>> print np.absolute(x) - x\n[ 0.  0.  0.]}}}"""
2458,7731488,numpy-gitbot,numpy-gitbot,2012-10-19 22:27:52,2012-10-19 22:27:56,2012-10-19 22:27:56,closed,,NumPy 1.7,7,11 - Bug;component: numpy.core;priority: normal,https://api.github.com/repos/numpy/numpy/issues/2458,b'test_datetime.TestDateTime errors (Trac #1865)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/1865 on 2011-06-13 by @stsci-sienkiew, assigned to unknown._\n\nStarted doing this on RHE 5 64 bit, python 2.7, on Jun 8.  \n\n\n\n    ======================================================================\n    ERROR: test_datetime_add (test_datetime.TestDateTime)\n    ----------------------------------------------------------------------\n    Traceback (most recent call last):\n      File ""/usr/stsci/pyssgdev/2.7/numpy/core/tests/test_datetime.py"", line 459, in test_datetime_add\n        (np.datetime64(\'2012-12-21\', \'[D]\'),\n    SystemError: NULL result without error in PyObject_Call\n    \n    ======================================================================\n    ERROR: test_datetime_as_string (test_datetime.TestDateTime)\n    ----------------------------------------------------------------------\n    Traceback (most recent call last):\n      File ""/usr/stsci/pyssgdev/2.7/numpy/core/tests/test_datetime.py"", line 880, in test_datetime_as_string\n        assert_equal(np.datetime_as_string(np.datetime64(date, \'Y\')),\n    SystemError: NULL result without error in PyObject_Call\n    \n    ======================================================================\n    ERROR: test_datetime_divide (test_datetime.TestDateTime)\n    ----------------------------------------------------------------------\n    Traceback (most recent call last):\n      File ""/usr/stsci/pyssgdev/2.7/numpy/core/tests/test_datetime.py"", line 635, in test_datetime_divide\n        (np.datetime64(\'2012-12-21\', \'[D]\'),\n    SystemError: NULL result without error in PyObject_Call\n    \n    ======================================================================\n    ERROR: test_datetime_multiply (test_datetime.TestDateTime)\n    ----------------------------------------------------------------------\n    Traceback (most recent call last):\n      File ""/usr/stsci/pyssgdev/2.7/numpy/core/tests/test_datetime.py"", line 594, in test_datetime_multiply\n        (np.datetime64(\'2012-12-21\', \'[D]\'),\n    SystemError: NULL result without error in PyObject_Call\n    \n    ======================================================================\n    ERROR: test_datetime_nat_casting (test_datetime.TestDateTime)\n    ----------------------------------------------------------------------\n    Traceback (most recent call last):\n      File ""/usr/stsci/pyssgdev/2.7/numpy/core/tests/test_datetime.py"", line 163, in test_datetime_nat_casting\n        b = np.datetime64(\'NaT\', \'[D]\')\n    SystemError: NULL result without error in PyObject_Call\n    \n    ======================================================================\n    ERROR: test_datetime_scalar_construction (test_datetime.TestDateTime)\n    ----------------------------------------------------------------------\n    Traceback (most recent call last):\n      File ""/usr/stsci/pyssgdev/2.7/numpy/core/tests/test_datetime.py"", line 78, in test_datetime_scalar_construction\n        assert_equal(np.datetime64(\'1950-03-12\', \'D\'),\n    SystemError: NULL result without error in PyObject_Call\n    \n    ======================================================================\n    ERROR: test_datetime_subtract (test_datetime.TestDateTime)\n    ----------------------------------------------------------------------\n    Traceback (most recent call last):\n      File ""/usr/stsci/pyssgdev/2.7/numpy/core/tests/test_datetime.py"", line 532, in test_datetime_subtract\n        (np.datetime64(\'2012-12-21\', \'[D]\'),\n    SystemError: NULL result without error in PyObject_Call\n    \n    ======================================================================\n    ERROR: test_different_unit_comparison (test_datetime.TestDateTime)\n    ----------------------------------------------------------------------\n    Traceback (most recent call last):\n      File ""/usr/stsci/pyssgdev/2.7/numpy/core/tests/test_datetime.py"", line 371, in test_different_unit_comparison\n        assert_equal(np.datetime64(\'1945\', unit1),\n    SystemError: NULL result without error in PyObject_Call\n    \n    ======================================================================\n    ERROR: test_string_parser_variants (test_datetime.TestDateTime)\n    ----------------------------------------------------------------------\n    Traceback (most recent call last):\n      File ""/usr/stsci/pyssgdev/2.7/numpy/core/tests/test_datetime.py"", line 787, in test_string_parser_variants\n        assert_equal(np.datetime64(\'1977-03-02T12:30-0230\'),\n    SystemError: NULL result without error in PyObject_Call\n    \n    ----------------------------------------------------------------------\n\n\n\nChecked out on Jun 8 ~20:00 EDT.  Version \n\n76ca55f8f399a9eb8081b75c3c9c2ac075a4af9a\n\nthrough\n\na1e7be3cb49577d77831e2246f39bb80acd5a22f\n\n'"
2456,7731486,numpy-gitbot,numpy-gitbot,2012-10-19 22:27:48,2012-10-19 22:27:49,2012-10-19 22:27:49,closed,,1.6.1,3,11 - Bug;component: numpy.core;priority: normal,https://api.github.com/repos/numpy/numpy/issues/2456,b'Buggy results when operating on array copied with astype() (Trac #1863)',"b""_Original ticket http://projects.scipy.org/numpy/ticket/1863 on 2011-06-08 by trac user embray, assigned to unknown._\n\nI'm getting really buggy results from any mathematical operation I do on an array of float64 that was obtained by calling `arr.astype('float64')` on an existing array of float64s.\n\nHere's an example that illustrates the problem (the fft stuff is irrelevant; it just creates an array similar to the one my code is bugging out on):\n\n\n\n    #!python\n    import numpy\n    from numpy import fft\n    \n    \n    shape = (32, 16)\n    type = numpy.complex64\n    true = numpy.arange(shape[0] * shape[1], dtype=type)\n    true.shape = shape\n    \n    y = fft.fft(true, shape[0], 0)\n    y = y.imag\n    \n    z = y.astype(numpy.float64)\n    \n    print (y ** 2)[3]\n    print (z ** 2)[3]\n\n\n\nThis particular example also throws a `RuntimeWarning: overflow encountered in square` when squaring `z`, the copy of the original array `y`.\n\nThis just started happening recently using the latest from git.  I'm betting it has something to do with [https://github.com/numpy/numpy/commit/a17a4996e4ed63d1b855a0917fb5fcdd5855a7d0 this commit] that made changes to astype(), but I haven't tracked down the exact issue yet."""
2454,7731482,numpy-gitbot,numpy-gitbot,2012-10-19 22:27:45,2012-10-19 22:27:45,2012-10-19 22:27:45,closed,,,0,11 - Bug;component: Documentation;priority: normal,https://api.github.com/repos/numpy/numpy/issues/2454,b'documentation incorrect about python 3 support (Trac #1861)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/1861 on 2011-06-07 by @stsci-sienkiew, assigned to @pv._\n\nThe release notes for numpy 1.5 and 1.6 both claim python 3 support.\n\nhttp://new.scipy.org/faq.html#python-version-support says that neither numpy nor scipy are compatible with python 3.  This is the second google hit for ""numpy python3"" and the first google hit for ""scipy python3"".\n\nhttp://scipy.org/FAQ#head-fbdfa57ebeb7a730265d5281c32ce493e298171c says that numpy works only with python 2.4 and 2.5.\n\nI was not able to find a statement about python 3 on numpy.scipy.org\n\nI think a clear statement about python 3 support is a good idea.  It is not clear to me where exactly it belongs in the organization of the web site, but Download, Getting Started, and Documentation are all good candidates.\n\n'"
2452,7731478,numpy-gitbot,numpy-gitbot,2012-10-19 22:27:41,2012-10-19 22:27:42,2012-10-19 22:27:42,closed,,NumPy 1.7,3,11 - Bug;component: numpy.core;priority: normal,https://api.github.com/repos/numpy/numpy/issues/2452,b'Broadcasting fails for A *= B (Trac #1859)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/1859 on 2011-06-07 by @gerritholl, assigned to unknown._\n\nThe shape of the rhs in an operation A *= B is wrongly read, and thus the operation fails. See code below.\n\n\n\n    $ python\n    Python 2.6.6 (r266:84292, Sep 15 2010, 16:22:56) \n    [GCC 4.4.5] on linux2\n    Type ""help"", ""copyright"", ""credits"" or ""license"" for more information.\n    >>> from numpy import zeros\n    >>> A1 = zeros((2, 1, 1))\n    >>> A2 = zeros((2,))\n    >>> A1 * A2 # works\n    array([[[ 0.,  0.]],\n    \n           [[ 0.,  0.]]])\n    >>> A1 *= A2 # fails\n    Traceback (most recent call last):\n      File ""<stdin>"", line 1, in <module>\n    ValueError: non-broadcastable output operand with shape (2,1,1) doesn\'t match the broadcast shape (0,140018678770184,2)\n    >>> A1 *= A2 # fails\n    Traceback (most recent call last):\n      File ""<stdin>"", line 1, in <module>\n    ValueError: non-broadcastable output operand with shape (2,1,1) doesn\'t match the broadcast shape (0,0,2)\n    >>> A1 *= A2 # fails\n    Traceback (most recent call last):\n      File ""<stdin>"", line 1, in <module>\n    ValueError: non-broadcastable output operand with shape (2,1,1) doesn\'t match the broadcast shape (14885712,6881,2)\n    >>> from numpy.version import full_version, git_revision\n    >>> print full_version\n    2.0.0.dev-3071eab\n    >>> print git_revision\n    3071eab84b81ef6e0d157d46404c631547fed763\n\n\n\nThe same for +=, /=, etc.'"
2450,7731475,numpy-gitbot,numpy-gitbot,2012-10-19 22:27:31,2012-10-19 22:27:39,2012-10-19 22:27:39,closed,,NumPy 1.7,24,11 - Bug;component: numpy.distutils;priority: normal,https://api.github.com/repos/numpy/numpy/issues/2450,"b""Pip install into virtualenv doesn't work (Trac #1857)""","b'_Original ticket http://projects.scipy.org/numpy/ticket/1857 on 2011-06-03 by @rgommers, assigned to @rgommers._\n\nFrom Matthew Brett:\n\nI\'ve appended the result of a fresh python3.2 virtualenv and a ""pip\ninstall numpy"".\n\n\n\n       RefactoringTool:\n    /home/mb312/.virtualenvs/bare-32/build/numpy/build/py3k/numpy/core/defchararray.py\n       Running from numpy source directory.Traceback (most recent call last):\n         File ""<string>"", line 14, in <module>\n         File ""/home/mb312/.virtualenvs/bare-32/build/numpy/setup.py"",\n    line 211, in <module>\n           setup_package()\n         File ""/home/mb312/.virtualenvs/bare-32/build/numpy/setup.py"",\n    line 204, in setup_package\n           configuration=configuration )\n         File ""/home/mb312/.virtualenvs/bare-32/build/numpy/build/py3k/numpy/distutils/core.py"",\n    line 152, in setup\n           config = configuration()\n         File ""/home/mb312/.virtualenvs/bare-32/build/numpy/setup.py"",\n    line 151, in configuration\n           config.add_subpackage(\'numpy\')\n         File ""/home/mb312/.virtualenvs/bare-32/build/numpy/build/py3k/numpy/distutils/misc_util.py"",\n    line 972, in add_subpackage\n           caller_level = 2)\n         File ""/home/mb312/.virtualenvs/bare-32/build/numpy/build/py3k/numpy/distutils/misc_util.py"",\n    line 941, in get_subpackage\n           caller_level = caller_level + 1)\n         File ""/home/mb312/.virtualenvs/bare-32/build/numpy/build/py3k/numpy/distutils/misc_util.py"",\n    line 878, in _get_configuration_from_setup_py\n           config = setup_module.configuration(*args)\n         File ""numpy/setup.py"", line 5, in configuration\n           config = Configuration(\'numpy\',parent_package,top_path)\n         File ""/home/mb312/.virtualenvs/bare-32/build/numpy/build/py3k/numpy/distutils/misc_util.py"",\n    line 713, in __init__\n           raise ValueError(""%r is not a directory"" % (package_path,))\n       ValueError: \'build/py3k/numpy\' is not a directory\n\n'"
2447,7731469,numpy-gitbot,numpy-gitbot,2012-10-19 22:27:24,2012-10-19 22:27:25,2012-10-19 22:27:25,closed,,,1,11 - Bug;component: Other;priority: normal,https://api.github.com/repos/numpy/numpy/issues/2447,b'Problem of convergence depending on platform : Intel or Amd (Trac #1854)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/1854 on 2011-05-31 by trac user aquassarim, assigned to unknown._\n\nHello to everyone,\n\nI expect my post to be relevant on this site since I am not sure of the source of my problem. If not, please forgive me.\n\nI face a problem with linalg in solving a non linear problem with a \nNewton Raphson scheme :\nA(x) x = b, with A an array of shape (40,40), x and b arrays of shape\n(40,).\nBasically I do : r(x) = A(x) x - b\ndx = -inv(At(x)) r(x)\nx += dx\nand so on until r(x) is small enaugth (At is the tangent matrix of my \nNewton Raphson scheme).\n\nOn my work computer, my scheme achieves his goal (it converges and find the solution) whereas on my personnal computer it diverges.\n\nThe code is exactly the same. I use numpy.arrays with dtype=""float64"", linalg.inv, np.dot, la.norm and that\'s all for my Newton Raphson.\nThe problem is of small dimension (40x40 matrix) and I obtain the same results with the use of a preconditionnor before solving.\n\nBoth my computers have 64 bits processors and OS :\n- professional :\n- Intel(R) Core(TM)2 Quad CPU Q9400 @ 2.66GHz\n- Linux 2.6.32-31-generic #61-Ubuntu SMP Fri Apr 8 18:25:51\nUTC 2011 x86_64 GNU/Linux (Ubuntu 10.04 LTS)\n- python 2.6.5, gcc 4.4.3\n- numpy 1.3.0\n\n- personnal :\n- AMD Phenom(tm) II X4 955 Processor\n- Linux 2.6.38-8-generic #42-Ubuntu SMP Mon Apr 11 03:31:24\nUTC 2011 x86_64 x86_64 x86_64 GNU/Linux (Ubuntu 11.04)\n- Python 2.7.1+, GCC 4.5.2\n- numpy 1.5.1\n\nI do not understand where it can come from.\nI also have to say that on another computer, with Amd 64 processor to and also running under Ubuntu 11.04, the calculation also fails...\n\nDoes someone have any idea on how to fix it on my Amd computer ?\nCan it be a floating point precision difference ? (I checked the tangent matrix on both my computers, they are very closed the one from each other on the first iterations... But it appears to be enought to make my calculation diverges on Amd...)\n\nThanks :) !\n\nWhen I try to use ""float32"" instead of ""float64"" both calculations fail.\nWhen I try to use ""float128"" I have an exception about a unsupported type in linalg.\n'"
2446,7731468,numpy-gitbot,numpy-gitbot,2012-10-19 22:27:22,2012-10-19 22:27:22,2012-10-19 22:27:22,closed,,,1,11 - Bug;component: Other;priority: normal,https://api.github.com/repos/numpy/numpy/issues/2446,b'Complex Number error (Trac #1853)',"b""_Original ticket http://projects.scipy.org/numpy/ticket/1853 on 2011-05-31 by trac user anirudh215, assigned to unknown._\n\nHey guys,\nSorry about this, but last night I was so sleepy that I made a mistake in what I wanted to say. After posting a ticket, I just fell flat on my face to find the ticket has been closed already. Thus, I'm opening a new ticket with what I intended to say.\n\nIf I run the following code (Please don't analyze the code. It isn't anything useful, but I've only used it to illustrate the problem.):\n\n    import numpy as np h = np.ones(5, dtype=np.complex64) for p in range(5):\n\n        h[p] = 1-p*j\n\n    print(h)\n\nI get an error. It tells me the global variable 'j' is not defined. I obviously mean the complex number j. It should recognize this.\n\nHowever if I change the code to:\n\n    import numpy as np h = np.ones(5, dtype=np.complex64) for p in range(5):\n\n        h[p] = 1-np.complex(0,p)\n\n    print(h)\n\nI get what I want.\n\nSorry about the confusion. Thanks!"""
2445,7731463,numpy-gitbot,numpy-gitbot,2012-10-19 22:27:19,2012-10-19 22:27:20,2012-10-19 22:27:20,closed,,,1,11 - Bug;component: Other;priority: normal,https://api.github.com/repos/numpy/numpy/issues/2445,b'Complex number confusion (Trac #1852)',"b""_Original ticket http://projects.scipy.org/numpy/ticket/1852 on 2011-05-30 by trac user anirudh215, assigned to unknown._\n\nIf I run the following code (Please don't analyze the code. It isn't anything useful, but I've only used it to illustrate the problem.):\n\n   import numpy as np\n   h = np.ones(5, dtype=np.complex64)\n   for p in range(5):\n      h[p] = 1-5*j\n   print(h)\n\nI get an error. It tells me the global variable 'j' is not defined. I obviously mean the complex number j. It should recognize this.\n\nHowever if I change the code to:\n   import numpy as np\n   h = np.ones(5, dtype=np.complex64)\n   for p in range(5):\n      h[p] = 1-np.complex(0,5)\n   print(h)\n\nI get what I want."""
2444,7731462,numpy-gitbot,numpy-gitbot,2012-10-19 22:27:14,2012-10-19 22:27:17,2012-10-19 22:27:17,closed,,1.6.1,7,11 - Bug;component: numpy.distutils;priority: normal,https://api.github.com/repos/numpy/numpy/issues/2444,b'regression for SWIG based code in 1.6.0 (Trac #1851)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/1851 on 2011-05-29 by @rgommers, assigned to @pearu._\n\nReported on the mailing list:\n\n\n    line 332, in build_extension_sources\n         sources = self.swig_sources(sources, ext)\n       File\n    ""/home/bsesar/usr/pydebug/lib/python2.7/site-packages/numpy/distutils/command/build_src.py"",\n    \n    line 646, in swig_sources\n         extension.swig_opts.remove(\'-c++\')\n    AttributeError: \'str\' object has no attribute \'remove\'\n\n\n\nThe reason is that `swig_opts` is a string. This bug was introduced in [ff0822c4](http://github.com/numpy/numpy/commit/ff0822c4) and can be fixed by inserting\n\n\n        if isinstance(extension.swig_opts, basestring):\n            extension.swig_opts = extension.swig_opts.split()\n\n\njust above the if-block where the error occurs.\n\nPearu, since you made that change, can you please check this fix is correct and complete?'"
2442,7731458,numpy-gitbot,numpy-gitbot,2012-10-19 22:27:09,2012-10-19 22:27:10,2012-10-19 22:27:10,closed,,,1,11 - Bug;component: numpy.testing;priority: normal,https://api.github.com/repos/numpy/numpy/issues/2442,b'nose-1.0.0 test failures on Mac OS X 10.6.7 and Xcode 4.0.2 using numpy-1.6.0 (Trac #1849)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/1849 on 2011-05-29 by trac user elvisjohndowson, assigned to unknown._\n\nHi,\n      I just installed numpy-1.6.0 and nose-1.0.0 on Mac OS X 10.6.7, using Xcode-4.0.2 and gfortran-4.2-5664 (from the R tools site).\n\nWhen I run the tests, I get 1 failure and 1 error. \n\n\n======================================================================\nERROR: Tests the min/max functions with explicit outputs\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File ""/System/Library/Frameworks/Python.framework/Versions/2.6/Extras/lib/python/numpy/ma/tests/test_core.py"", line 699, in test_minmax_funcs_with_output\n    result = npfunc(xm,axis=0,out=nout)\n  File ""/System/Library/Frameworks/Python.framework/Versions/2.6/Extras/lib/python/numpy/core/fromnumeric.py"", line 1569, in amin\n    return amin(axis, out)\n  File ""/System/Library/Frameworks/Python.framework/Versions/2.6/Extras/lib/python/numpy/ma/core.py"", line 3119, in min\n    np.putmask(out, newmask, np.nan)\nValueError: cannot convert float NaN to integer\n\n======================================================================\nFAIL: test_umath.TestComplexFunctions.test_against_cmath\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File ""/Library/Python/2.6/site-packages/nose-1.0.0-py2.6.egg/nose/case.py"", line 187, in runTest\n    self.test(*self.arg)\n  File ""/System/Library/Frameworks/Python.framework/Versions/2.6/Extras/lib/python/numpy/core/tests/test_umath.py"", line 268, in test_against_cmath\n    assert abs(a - b) < atol, ""%s %s: %s; cmath: %s""%(fname,p,a,b)\nAssertionError: arcsin 2: (1.57079632679-1.31695789692j); cmath: (1.57079632679+1.31695789692j)\n\n----------------------------------------------------------------------\nRan 1740 tests in 11.679s\n\nFAILED (KNOWNFAIL=1, errors=1, failures=1)\n<nose.result.TextTestResult run=1740 errors=1 failures=1>\n\n\nHere are the commands that I used to build numpy and nose:\n\n\nStep 36.00: Install Numerical Python library.\n\nStep 36.01: Download numpy 1.6.0 for python-2.6 from \n\nhttp://sourceforge.net/projects/numpy/files/NumPy/1.6.0/numpy-1.6.0.tar.gz/download\n\n\n\n$ cd numpy-1.6.0\n$ env ARCHFLAGS=""-arch i386 -arch x86_64"" python setup.py build \n$ sudo env ARCHFLAGS=""-arch i386 -arch x86_64"" python setup.py install\n$ cd ../\n\n\nStep 36.02: Download nose-1.0.0 to test the numpy installation from \n\nhttp://somethingaboutorange.com/mrl/projects/nose/nose-1.0.0.tar.gz\n\n$ cd nose-1.0.0\n$ env ARCHFLAGS=""-arch i386 -arch x86_64"" python setup.py build \n$ sudo env ARCHFLAGS=""-arch i386 -arch x86_64"" python setup.py install\n$ cd ../\n\nStep 36.03: Test the numpy installation.\n\n$ export VERSIONER_PYTHON_PREFER_32_BIT=yes\n\n$ python\n>>> import numpy\n>>> numpy.test(\'1\',\'10\')\n>>> exit()\n$ \n'"
2441,7731457,numpy-gitbot,numpy-gitbot,2012-10-19 22:27:07,2012-10-23 02:45:58,2012-10-19 22:27:08,closed,,NumPy 1.7,4,11 - Bug;component: numpy.lib;priority: normal,https://api.github.com/repos/numpy/numpy/issues/2441,b'tril and triu return value has the wrong dtype (Trac #1848)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/1848 on 2011-05-28 by @WarrenWeckesser, assigned to unknown._\n\ntril (and triu, which defers to tril for documentation of its\nreturn value), says that the return value is the same type as\nthe input.  This fails for float32 and complex64 input arrays:\n\n\n    In [16]: a = array([[1,2],[3,4]], dtype=float32)\n    \n    In [17]: tril(a).dtype\n    Out[17]: dtype(\'float64\')\n    \n    In [18]: b = array([[1+1j,2],[3,4]], dtype=complex64)\n    \n    In [19]: tril(b).dtype\n    Out[19]: dtype(\'complex128\')\n    \n\n\ntril looks like this:\n\n\n    def tril(m, k=0):\n        m = asanyarray(m)\n        out = multiply(tri(m.shape[0], m.shape[1], k=k, dtype=int),m)\n        return out\n\n\nand `tri(m.shape[0], m.shape[1], k=k, dtype=int)` is an array of\ninteger zeros and ones.  The problem is that the multiplication\nof a float32 array by an array of integers result in a float64\narray:\n\n\n    In [168]: a = array([[1.0, 2.0], [3.0, 4.0]], dtype=float32)\n    \n    In [169]: m = array([[1, 1], [0, 1]])\n    \n    In [170]: a*m\n    Out[170]: \n    array([[ 1.,  2.],\n           [ 0.,  4.]])\n    \n    In [171]: m*a\n    Out[171]: \n    array([[ 1.,  2.],\n           [ 0.,  4.]])\n    \n\n\nNote that multiplying a float32 array by an integer scalar does not \nchange the type:\n\n\n    In [172]: a*3\n    Out[172]: \n    array([[  3.,   6.],\n           [  9.,  12.]], dtype=float32)\n    \n    In [173]: a*array(3)\n    Out[173]: \n    array([[  3.,   6.],\n           [  9.,  12.]], dtype=float32)\n    \n\n\nwhich seems inconsistent.\n\nThe problem with tril and triu was also pointed out by ""eat"" in #2318.\n'"
2440,7731456,numpy-gitbot,numpy-gitbot,2012-10-19 22:27:05,2012-10-19 22:27:05,2012-10-19 22:27:05,closed,,,1,11 - Bug;component: Other;priority: normal,https://api.github.com/repos/numpy/numpy/issues/2440,b'Inconsistent indexing of ndarray with lists (Trac #1847)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/1847 on 2011-05-28 by trac user gmotron, assigned to unknown._\n\nIn a multi dimensional array, numpy crashes (in iPython and python) when I use two lists as indexes.  The following code demonstrates this, first by showing many ways that work, and then combining the working methods to create a failure.\n\n\n    from numpy import *\n    \n    \n    a = 2\n    b = 50\n    c = 1000\n    \n    data = zeros( (a,b,c) )\n    \n    \n    data[0, 0:b:5, :]\n    \n    data[0, :, 0:c:10 ]\n    \n    data[0, 0:b:5, 0:c:10  ]\n    \n    \n    bSub = range(0, b, 5)\n    cSub = range(0, c, 10)\n    \n    data[0, bSub, :]\n    data[0, :, cSub]\n    data[0, bSub, cSub]\n\n\n\nThe crash output in iPython is\n\n\n\n    /home/pcuser/trunk/python/autotune/bugExample.py in <module>()\n         21 data[0, bSub, :]\n         22 data[0, :, cSub]\n    ---> 23 data[0, bSub, cSub]\n         24 \n         25 \n    \n    ValueError: shape mismatch: objects cannot be broadcast to a single shape\n    \n\n\n\nor in normal python\n\n\n\n    Traceback (most recent call last):\n      File ""bugExample.py"", line 23, in <module>\n        data[0, bSub, cSub]\n    ValueError: shape mismatch: objects cannot be broadcast to a single shape\n\n\n'"
2439,7731455,numpy-gitbot,numpy-gitbot,2012-10-19 22:27:02,2012-10-19 22:27:04,2012-10-19 22:27:04,closed,,,6,11 - Bug;component: numpy.linalg;priority: normal,https://api.github.com/repos/numpy/numpy/issues/2439,b'np.linalg.cond gives incorrect results for large ill-conditioned matrices (Trac #1846)',"b""_Original ticket http://projects.scipy.org/numpy/ticket/1846 on 2011-05-27 by trac user rgrout, assigned to @pv._\n\nHi,\n\nI notice the following behaviour.  \n\n\n\n    In [31]: np.linalg.cond(np.vander(np.arange(1,16)))\n    Warning: invalid value encountered in power\n    Warning: invalid value encountered in power\n    Warning: invalid value encountered in power\n    Warning: invalid value encountered in power\n    Warning: invalid value encountered in power\n    Warning: invalid value encountered in power\n    Warning: invalid value encountered in power\n    Out[31]: 1166991362111.4319\n\n\n\nWhere as Matlab and Octave agree on\n\n\n    octave:2> cond(vander(1:15))\n    ans =  2.5824e+21\n\n\n\nLook at the source code, both numpy and matlab/octave attempt to find the condition number in the same way (by calculating the SVD).  However, the SVD that numpy returns is completely different than matlab/octave's SVD.\n\nWhen I give np.vander a small range (np.arange(10)), numpy returns a condition number that agrees with octave."""
2438,7731453,numpy-gitbot,certik,2012-10-19 22:27:00,2013-07-02 19:30:57,2013-07-02 19:30:57,closed,,,8,11 - Bug;component: numpy.core;priority: high,https://api.github.com/repos/numpy/numpy/issues/2438,b'The memory layout is wrong after sliced (Trac #1845)',"b""_Original ticket http://projects.scipy.org/numpy/ticket/1845 on 2011-05-27 by trac user ddev, assigned to unknown._\n\nWhen you get a slice of an ndarray, it is a view into the memory of the array, so doing a setitem to the slice changes the parent array. If however you pickle out a tuple of the parent array and the slice, the slice comes back as its own array, no longer pointing at the parent. I've seen this happen on Linux with Python 2.6.4 with several different versions of numpy up to 1.6.0.\n\nPerhaps the pickling should throw an error if arrays's OWNDATA flag is not set?\n\nThe following code:\n\n\n    import numpy,pickle\n    \n    array = numpy.arange(2)\n    slice = array[::2]\n    \n    array_,slice_ = pickle.loads(pickle.dumps((array,slice)))\n    \n    slice[0]  = 7\n    slice_[0] = 7\n    \n    print 'original', array , slice\n    print 'pickled ', array_, slice_\n\n\nPrints:\n\n\n    original [7 1] [7]\n    pickled  [0 1] [7]\n\n\n\n"""
2437,7731451,numpy-gitbot,numpy-gitbot,2012-10-19 22:26:58,2012-10-19 22:26:59,2012-10-19 22:26:59,closed,,1.6.0,2,11 - Bug;component: numpy.ma;priority: normal,https://api.github.com/repos/numpy/numpy/issues/2437,b'1-D masked array (numpy.ma) is corrupted by numpy.atleast_2d (Trac #1844)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/1844 on 2011-05-26 by trac user doylejg, assigned to @pierregm._\n\nI construct a 1 dimensional masked array then create a second 2-D array from the original array and the original array is modified. Best explained with an example shown below.\n\n\n\n    ar = numpy.ma.masked_where([False,False,False,True],[1,2,3,99])\n    ar2 = numpy.atleast_2d(ar)\n    print ar\n    \n\n\n\nBelow is the traceback from the failed print line\n\n\n    Traceback (most recent call last):\n      File ""<stdin>"", line 1, in <module>\n      File ""/usr/lib/pymodules/python2.7/numpy/ma/core.py"", line 3570, in __repr__\n        data=str(self), mask=str(self._mask),\n      File ""/usr/lib/pymodules/python2.7/numpy/ma/core.py"", line 3554, in __str__\n        res[m] = f\n    ValueError: boolean index array should have 1 dimension\n\n'"
2436,7731450,numpy-gitbot,numpy-gitbot,2012-10-19 22:26:55,2012-10-19 22:26:57,2012-10-19 22:26:57,closed,,1.6.1,5,11 - Bug;component: Other;priority: normal,https://api.github.com/repos/numpy/numpy/issues/2436,b'numpy.rec.array fails with open file on Py3 (Trac #1843)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/1843 on 2011-05-26 by @cgohlke, assigned to unknown._\n\nAs discussed on the [http://mail.scipy.org/pipermail/numpy-discussion/2011-May/056446.html mailing list], the following code raises a ValueError on Python 3, but works as expected with Python 2:\n\n\n\n    import sys, numpy\n    fd = open(sys.executable, \'rb\')\n    numpy.rec.array(fd, dtype=[(\'_\', \'b\')])\n    Traceback (most recent call last):\n       File ""<stdin>"", line 1, in <module>\n       File ""C:\\Python32\\lib\\site-packages\\numpy\\core\\records.py"", line 799, \n    in array\n         raise ValueError(""Unknown input type"")\n    ValueError: Unknown input type\n\n\n\nThe problem seems to be the test for file objects in numpy/compat/py3k.py:\n\n\n\n         def isfileobj(f):\n             return isinstance(f, io.FileIO)\n\n\n\nIf this is updated to include _io.BufferedReader, the type of `fd`, \nnumpy.rec.array works with file objects opened in \'rb\' mode:\n\n\n\n        def isfileobj(f):\n             return isinstance(f, (io.FileIO, io._io.BufferedReader))\n\n\n\nI am not sure this is the best/correct fix.\n\nTested with numpy 1.6.0 on Windows.\n'"
2433,7731446,numpy-gitbot,charris,2012-10-19 22:26:50,2013-02-15 02:27:05,2013-02-15 02:27:05,closed,,NumPy 1.7,2,11 - Bug;component: numpy.core;priority: normal,https://api.github.com/repos/numpy/numpy/issues/2433,b'.fill() writes to array even if flags.writable = False (Trac #1840)',"b""_Original ticket http://projects.scipy.org/numpy/ticket/1840 on 2011-05-25 by @gerritholl, assigned to unknown._\n\nUsing a recent bleeding edge numpy (I didn't test with older versions), an array can be written to with .fill() even if X.flags.writeable is set to False. That doesn't look like something that should happen on purpose.\n\n\n\n    \n    In [1]: X = rand(2, 2)\n    \n    In [2]: X.flags.writeable = False\n    \n    In [3]: X.fill(42)\n    \n    In [4]: print X\n    [[ 42.  42.]\n     [ 42.  42.]]\n    \n    In [6]: print numpy.version.full_version\n    2.0.0.dev-3071eab\n    \n    In [7]: print numpy.version.git_revision\n    3071eab84b81ef6e0d157d46404c631547fed763\n\n"""
2432,7731445,numpy-gitbot,njsmith,2012-10-19 22:26:49,2012-12-08 19:57:28,2012-12-08 19:57:28,closed,,,0,11 - Bug;component: numpy.ma;priority: normal,https://api.github.com/repos/numpy/numpy/issues/2432,b'cannot access masked array rows with np.object dtype (Trac #1839)',"b""_Original ticket http://projects.scipy.org/numpy/ticket/1839 on 2011-05-24 by trac user risa2000, assigned to @pierregm._\n\nUsing masked array with np.object type makes the rows with that type, which also contain masked values raise an exception.\n\nSlightly modified sample from documentation follows:\n\n\n    In [22]: from numpy import ma\n    \n    In [23]: y = ma.masked_array([(1,'2'), (3, '4')], mask=[(0, 0), (0, 1)], dtype=[('a', int), ('b', np.object)])\n    \n    In [24]: y[0]\n    Out[24]: (1, '2')\n    \n    In [25]: y[1]\n    ---------------------------------------------------------------------------\n    ValueError                                Traceback (most recent call last)\n    \n    f:\\Work\\python\\apps\\icao\\icao_results.py in <module>()\n    ----> 1\n          2\n          3\n          4\n          5\n    \n    C:\\Python27\\lib\\site-packages\\numpy\\ma\\core.pyc in __getitem__(self, indx)\n       2946 #                return mvoid(dout, mask=mask)\n    \n       2947                 if flatten_mask(mask).any():\n    -> 2948                     dout = mvoid(dout, mask=mask)\n       2949                 else:\n       2950                     return dout\n    \n    C:\\Python27\\lib\\site-packages\\numpy\\ma\\core.pyc in __new__(self, data, mask, dtype, fill_value)\n       5506         dtype = dtype or data.dtype\n       5507         _data = ndarray((), dtype=dtype)\n    -> 5508         _data[()] = data\n       5509         _data = _data.view(self)\n       5510         if mask is not nomask:\n    \n    ValueError: Setting void-array with object members using buffer.\n    \n    In [26]: y\n    Out[26]:\n    masked_array(data = [(1, '2') (3, --)],\n                 mask = [(False, False) (False, True)],\n           fill_value = (999999, '?'),\n                dtype = [('a', '<i4'), ('b', '|O4')])\n\n\n"""
2431,7731442,numpy-gitbot,numpy-gitbot,2012-10-19 22:26:47,2012-10-19 22:26:48,2012-10-19 22:26:48,closed,,1.6.1,2,11 - Bug;component: Other;priority: normal,https://api.github.com/repos/numpy/numpy/issues/2431,b'object <-> structured type arrays regression (Trac #1838)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/1838 on 2011-05-21 by @mwiebe, assigned to unknown._\n\nReported by Mark Dickinson here:\n\nhttp://mail.scipy.org/pipermail/numpy-discussion/2011-May/056375.html'"
2430,7731439,numpy-gitbot,numpy-gitbot,2012-10-19 22:26:43,2012-10-19 22:26:46,2012-10-19 22:26:46,closed,,1.6.1,11,11 - Bug;component: numpy.core;priority: normal,https://api.github.com/repos/numpy/numpy/issues/2430,b'einsum throws nan or freezes python for specific array shapes (Trac #1837)',"b""_Original ticket http://projects.scipy.org/numpy/ticket/1837 on 2011-05-19 by trac user wieland, assigned to unknown._\n\nThe examples below throw np.nan (first three expressions) or freeze python. However, it depends on the dimensions again. If you put 2 instead of five for the first axis of A and B, the first two expressions evaluate correctly. The last expression also evaluates in this case but gives the wrong result (8600832 instead of 11059200).\n\n\n\n\n    A = ones((2, 12, 4, 2, 200))\n    B = ones((2, 12, 12))\n    \n    print einsum('ijklm,ijklm,ijn,ijn->',A,A,B,B)\n    print einsum('ijklm,ijklm,ijn->',A,A,B)\n    print einsum(A,[0,2]+range(5,8),A,[1,3]+range(5,8),B,[0,3,4],B,[0,4,2],[])\n\n\n"""
2429,7731438,numpy-gitbot,numpy-gitbot,2012-10-19 22:26:41,2012-10-19 22:26:41,2012-10-19 22:26:41,closed,,,2,11 - Bug;component: numpy.core;priority: normal,https://api.github.com/repos/numpy/numpy/issues/2429,b'dot() fails for complex arguments (Trac #1836)',"b""_Original ticket http://projects.scipy.org/numpy/ticket/1836 on 2011-05-19 by trac user aickley, assigned to unknown._\n\nPre-multiplying a complex matrix with a complex vector doesn't work right, namely\n\n\n    x = array([1j, 0])\n    A = array([[1j, 0], [0, 0]])\n    print x.dot(A)[0]\n\n\nyields essentially zero.\n\nI also noticed that\n\n\n    x.dot(A.T)\n\n\nworks correctly while\n\n\n    (A.T).dot(x)\n\n\nalso fails.\n\nI'm running an 32-bit Ubuntu 10.04.2 LTS with a numpy 1.6.0 built from source. Actually I get the same error with the prepackaged ubuntu package (1.3.0) and if I build numpy 1.7.0 from source."""
2428,7731437,numpy-gitbot,charris,2012-10-19 22:26:37,2014-02-19 22:39:46,2014-02-19 22:39:46,closed,,,7,11 - Bug;component: numpy.f2py;priority: normal,https://api.github.com/repos/numpy/numpy/issues/2428,b'f2py error when using assumed shape arrays and parametrized kinds (Trac #1835)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/1835 on 2011-05-18 by trac user lorenz, assigned to @pearu._\n\nI have a small problem when using both the new assumed shape support (see ticket #2129) and kind statements via a parameter (see ticket #2345). Sorry it didn\'t spot this earlier!\n\nConsider the following two files:\n\n`precision.f90`\n\n\n    module precision\n      integer, parameter :: rk = 8\n    end module\n\n\n\n`test.f90`\n\n\n    module test\n    \n    contains\n    \n    subroutine testfunc(x, res)\n      use precision\n    \n      implicit none\n    \n      real(kind=rk), intent(in) :: x(:)\n      real(kind=rk), intent(out) :: res\n    \n      integer :: i\n    \n      print *, ""x ="", x\n    \n      res = 0.0\n      do i = 1, size(x)\n        res = res + x(i)\n      enddo\n    end subroutine\n    \n    end module\n\n\n\nThe compilation fails with:\n\n\n    #> gfortran -c precision.f90 \n    #> f2py --build-dir build -c -m test test.f90 precision.o --fcompiler=gnu95\n    Reading .f2py_f2cmap ...\n    \tMapping ""real(kind=rk)"" to ""double""\n    \tMapping ""integer(kind=ik)"" to ""int""\n    Succesfully applied user defined changes from .f2py_f2cmap\n    running build\n    running config_cc\n    unifing config_cc, config, build_clib, build_ext, build commands --compiler options\n    running config_fc\n    unifing config_fc, config, build_clib, build_ext, build commands --fcompiler options\n    running build_src\n    build_src\n    building extension ""test"" sources\n    f2py options: []\n      adding \'build/src.linux-x86_64-2.7/fortranobject.c\' to sources.\n      adding \'build/src.linux-x86_64-2.7\' to include_dirs.\n      adding \'build/src.linux-x86_64-2.7/test-f2pywrappers2.f90\' to sources.\n    build_src: building npy-pkg config files\n    running build_ext\n    customize UnixCCompiler\n    customize UnixCCompiler using build_ext\n    customize Gnu95FCompiler\n    Found executable /afs/mpa/@sys/system/MPA-6.00/usr/bin/gfortran\n    customize Gnu95FCompiler using build_ext\n    building \'test\' extension\n    compiling C sources\n    C compiler: gcc -pthread -fno-strict-aliasing -g -O2 -DNDEBUG -g -fwrapv -O3 -Wall -Wstrict-prototypes -fPIC\n    \n    compile options: \'-Ibuild/src.linux-x86_64-2.7 -I/usr/common/pdsoft/appl/python-2.7.1-amd64/lib/python2.7/site-packages/numpy/core/include -I/usr/common/pdsoft/appl/python-2.7.1-amd64/include/python2.7 -c\'\n    gcc: build/src.linux-x86_64-2.7/fortranobject.c\n    gcc: build/src.linux-x86_64-2.7/testmodule.c\n    compiling Fortran 90 module sources\n    Fortran f77 compiler: /afs/mpa/@sys/system/MPA-6.00/usr/bin/gfortran -Wall -ffixed-form -fno-second-underscore -fPIC -O3 -funroll-loops\n    Fortran f90 compiler: /afs/mpa/@sys/system/MPA-6.00/usr/bin/gfortran -Wall -fno-second-underscore -fPIC -O3 -funroll-loops\n    Fortran fix compiler: /afs/mpa/@sys/system/MPA-6.00/usr/bin/gfortran -Wall -ffixed-form -fno-second-underscore -Wall -fno-second-underscore -fPIC -O3 -funroll-loops\n    compile options: \'-Ibuild/src.linux-x86_64-2.7 -I/usr/common/pdsoft/appl/python-2.7.1-amd64/lib/python2.7/site-packages/numpy/core/include -I/usr/common/pdsoft/appl/python-2.7.1-amd64/include/python2.7 -c\'\n    extra options: \'-Jbuild/ -Ibuild/\'\n    gfortran:f90: test.f90\n    gfortran:f90: precision.f90\n    compiling Fortran sources\n    Fortran f77 compiler: /afs/mpa/@sys/system/MPA-6.00/usr/bin/gfortran -Wall -ffixed-form -fno-second-underscore -fPIC -O3 -funroll-loops\n    Fortran f90 compiler: /afs/mpa/@sys/system/MPA-6.00/usr/bin/gfortran -Wall -fno-second-underscore -fPIC -O3 -funroll-loops\n    Fortran fix compiler: /afs/mpa/@sys/system/MPA-6.00/usr/bin/gfortran -Wall -ffixed-form -fno-second-underscore -Wall -fno-second-underscore -fPIC -O3 -funroll-loops\n    compile options: \'-Ibuild/src.linux-x86_64-2.7 -I/usr/common/pdsoft/appl/python-2.7.1-amd64/lib/python2.7/site-packages/numpy/core/include -I/usr/common/pdsoft/appl/python-2.7.1-amd64/include/python2.7 -c\'\n    extra options: \'-Jbuild/ -Ibuild/\'\n    gfortran:f90: build/src.linux-x86_64-2.7/test-f2pywrappers2.f90\n    build/src.linux-x86_64-2.7/test-f2pywrappers2.f90:17.16:\n    \n          real(kind=rk) res\n                    1\n    Error: Parameter \'rk\' at (1) has not been declared or is a variable, which does not reduce to a constant expression\n    build/src.linux-x86_64-2.7/test-f2pywrappers2.f90:19.16:\n    \n          real(kind=rk) x(f2py_x_d0)\n                    1\n    Error: Parameter \'rk\' at (1) has not been declared or is a variable, which does not reduce to a constant expression\n    build/src.linux-x86_64-2.7/test-f2pywrappers2.f90:17.16:\n    \n          real(kind=rk) res\n                    1\n    Error: Parameter \'rk\' at (1) has not been declared or is a variable, which does not reduce to a constant expression\n    build/src.linux-x86_64-2.7/test-f2pywrappers2.f90:19.16:\n    \n          real(kind=rk) x(f2py_x_d0)\n                    1\n    Error: Parameter \'rk\' at (1) has not been declared or is a variable, which does not reduce to a constant expression\n\n\n\nThe cause is the omission of an ""use precision"" statement in the interface declaration for `f2pywrap_test_testfunc` in the generated routine `f2pyinittest()` in `test-f2pywrappers2.f90`:\n\n\n    !     -*- f90 -*-\n    !     This file is autogenerated with f2py (version:2)\n    !     It contains Fortran 90 wrappers to fortran functions.\n    \n          subroutine f2pywrap_test_testfunc (x, res, f2py_x_d0)\n          use test, only : testfunc\n                    use precision\n          real(kind=rk) res\n          integer f2py_x_d0\n          real(kind=rk) x(f2py_x_d0)\n          call testfunc(x, res)\n          end subroutine f2pywrap_test_testfunc\n          \n          subroutine f2pyinittest(f2pysetupfunc)\n          interface \n          subroutine f2pywrap_test_testfunc (x, res, f2py_x_d0)\n          real(kind=rk) res\n          integer f2py_x_d0\n          real(kind=rk) x(f2py_x_d0)\n          end subroutine f2pywrap_test_testfunc\n          end interface\n          external f2pysetupfunc\n          call f2pysetupfunc(f2pywrap_test_testfunc)\n          end subroutine f2pyinittest\n    \n    \n\n\n\nI.e. a patch to it would look like:\n\n\n    --- build/src.linux-x86_64-2.7/test-f2pywrappers2.f90   2011-05-18 15:33:47.000000000 +0200\n    +++ test-f2pywrappers2.f90      2011-05-18 15:33:43.000000000 +0200\n    @@ -14,6 +14,7 @@\n           subroutine f2pyinittest(f2pysetupfunc)\n           interface \n           subroutine f2pywrap_test_testfunc (x, res, f2py_x_d0)\n    +      use precision\n           real(kind=rk) res\n           integer f2py_x_d0\n           real(kind=rk) x(f2py_x_d0)\n\n\n\nI would suggest that all modules {{{use}}d by the original function should - to be on the safe side - also be stated in any interface declarations.\n\nNote that this error is only present when  using both assumed shape support _and_ parametrized `kind` statements. If `test.f90` is changed to\n\n\n    ...\n    subroutine testfunc(x, n, res)\n      use precision\n    \n      implicit none\n    \n      integer, intent(in) :: n\n      real(kind=rk), intent(in) :: x(n)\n    ...\n\n\neverything works as expected.\n\nRegards,\n    Lorenz'"
2427,7731436,numpy-gitbot,numpy-gitbot,2012-10-19 22:26:35,2012-10-19 22:26:36,2012-10-19 22:26:36,closed,,1.6.1,2,11 - Bug;component: numpy.core;priority: normal,https://api.github.com/repos/numpy/numpy/issues/2427,b'einsum fails for specific shapes (Trac #1834)',"b""_Original ticket http://projects.scipy.org/numpy/ticket/1834 on 2011-05-18 by trac user wieland, assigned to unknown._\n\nGiven two arrays\n\n\n    d = 3\n    T = random.random((2,d,d))\n    W = random.random((2,d,d,i))\n\n\nthe following equality should always hold (up to a rounding arrow):\n\n\n    all(einsum('ij...,j...->i...',T[0],W[0],dtype=float64) + einsum('ij...,j...->i...',T[1],W[1],dtype=float64) - einsum('pij,pjts->its',T,W,dtype=float64) < 1e-10)\n\n\nHowever, for d > 2 you always find i's such that the equality is not fulfilled. More specifically:\n\n\n    d = 3, i = 911...1365\n    d = 8, I = 129..204, 257..341\n\n\nUsed Numpy 1.6 and Python 2.6.6.\n\nMailing list discussion: http://mail.scipy.org/pipermail/numpy-discussion/2011-May/056340.html"""
2424,7731433,numpy-gitbot,numpy-gitbot,2012-10-19 22:26:30,2012-10-19 22:26:31,2012-10-19 22:26:31,closed,,,1,11 - Bug;component: numpy.linalg;priority: high,https://api.github.com/repos/numpy/numpy/issues/2424,b'linalg.eig and linalg.eigh yields different results on a symmetric matrix (randomized signs) (Trac #1831)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/1831 on 2011-05-15 by trac user tommy_carstensen, assigned to @pv._\n\nThe eigenvalues are the same, but some of the signs of the values in the eigenvectors are reversed. Is it a bug, or am I not using it correctly?\n\nsymmetric_matrix = [[  92.2308943    -0.66200473   77.97395776]\n [  -0.66200473   22.32583547   -6.30294705]\n [  77.97395776   -6.30294705  168.44327022]]\n\nlinalg.eig(symmetric_matrix) =\n[ 217.29080501   43.90403054   21.80516445] [[ 0.52896445 -0.84363444 -0.09207356]\n [-0.02921532 -0.12653319  0.99153206]\n [ 0.84814095  0.52179525  0.09157861]]\n\nlinalg.eigh(symmetric_matrix) =\n[  21.80516445   43.90403054  217.29080501] [[-0.09207356  0.84363444 -0.52896445]\n [ 0.99153206  0.12653319  0.02921532]\n [ 0.09157861 -0.52179525 -0.84814095]]\n'"
2423,7731432,numpy-gitbot,charris,2012-10-19 22:26:29,2014-03-01 16:14:17,2014-03-01 14:04:34,closed,,,3,11 - Bug;component: Documentation;Easy Fix;priority: normal,https://api.github.com/repos/numpy/numpy/issues/2423,b'example on numpy.histogram2d is broken (Trac #1830)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/1830 on 2011-05-14 by @samtygier, assigned to @pv._\n\nthe matplotlib example in http://docs.scipy.org/doc/numpy/reference/generated/numpy.histogram2d.html plots the data with the axis the wrong way. i think this is mostly the fault of imshow working in backwards coordinates.\n\nthe lines should be:\n\n\n\n    extent = [xedges[0], xedges[-1], yedges[0], yedges[-1]]\n    plt.imshow(H.transpose(), extent=extent, interpolation=\'nearest\', origin=""lower"")\n\n\n\n\n\ntest script (broken, as per numpy docs):\n\n\n\n    x = np.array([2,   2, -1, -1, -0.2])\n    y = np.array([1,-1.1,  1, -1,  0.5])\n    H, xedges, yedges = np.histogram2d(x,y, bins=(50, 50))\n    extent = [yedges[0], yedges[-1], xedges[-1], xedges[0]]\n    plt.imshow(H, extent=extent, interpolation=\'nearest\')\n    plt.show()\n\n\n\n\ntest script (fixed):\n\n\n\n    x = np.array([2,   2, -1, -1, -0.2])\n    y = np.array([1,-1.1,  1, -1,  0.5])\n    H, xedges, yedges = np.histogram2d(x,y, bins=(50, 50))\n    extent = [xedges[0], xedges[-1], yedges[0], yedges[-1]]\n    plt.imshow(H.transpose(), extent=extent, interpolation=\'nearest\', origin=""lower"")\n    plt.show()\n\n\n\n \n'"
2422,7731431,numpy-gitbot,charris,2012-10-19 22:26:28,2014-02-19 22:35:52,2014-02-19 22:35:52,closed,,,1,11 - Bug;component: numpy.core;priority: normal,https://api.github.com/repos/numpy/numpy/issues/2422,b'ComplexWarning exceptions swallowed (Trac #1829)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/1829 on 2011-05-13 by @pv, assigned to unknown._\n\nThis should raise ComplexWarning as an error:\n\n\n    import numpy as np, warnings\n    warnings.simplefilter(""error"", np.ComplexWarning)\n    x = np.ones(2)\n    x += 1j\n\n\nInstead, it only prints the warning message. Apparently, something swallows the exceptions along this code path.\n\nThe following works as intended, though:\n\n\n    >>> x[...] = np.array(1j)\n    Traceback (most recent call last):\n      File ""<stdin>"", line 1, in <module>\n    numpy.core.numeric.ComplexWarning: Casting complex values to real discards the imaginary part\n\n\n'"
2421,7731430,numpy-gitbot,numpy-gitbot,2012-10-19 22:26:25,2012-10-23 02:45:56,2012-10-19 22:26:26,closed,,1.6.0,5,11 - Bug;component: numpy.f2py;priority: normal,https://api.github.com/repos/numpy/numpy/issues/2421,"b""f2py fails to compile(KeyError: 'coutput') (Trac #1828)""","b'_Original ticket http://projects.scipy.org/numpy/ticket/1828 on 2011-05-12 by trac user Iceman, assigned to @pearu._\n\nWhen I try to compile any fortran file with f2py I get the next error message:\n\n\n\n\n    f2py -c control.f90 -m control\n    \n    running build\n    running config_cc\n    unifing config_cc, config, build_clib, build_ext, build commands --compiler options\n    running config_fc\n    unifing config_fc, config, build_clib, build_ext, build commands --fcompiler options\n    running build_src\n    build_src\n    building extension ""control"" sources\n    f2py options: []\n    f2py:> /tmp/tmps7XyGJ/src.linux-i686-2.6/controlmodule.c\n    creating /tmp/tmps7XyGJ\n    creating /tmp/tmps7XyGJ/src.linux-i686-2.6\n    Reading fortran codes...\n    \tReading file \'control.f90\' (format:free)\n    Post-processing...\n    \tBlock: control\n    \t\t\tBlock: control_fortran\n    \t\t\t\tBlock: control_1\n    Post-processing (stage 2)...\n    \tBlock: control\n    \t\tBlock: unknown_interface\n    \t\t\tBlock: control_fortran\n    \t\t\t\tBlock: control_1\n    Building modules...\n    \tBuilding module ""control""...\n    \t\tConstructing F90 module support for ""control_fortran""...\n    \t\t\tConstructing wrapper function ""control_fortran.control_1""...\n    \t\t\t  salidas = control_1(ent_analogicas,ent_digitales,[n_analogicas,n_digitales])\n    Traceback (most recent call last):\n      File ""/usr/local/bin/f2py"", line 24, in <module>\n        main()\n      File ""/usr/local/lib/python2.6/dist-packages/numpy/f2py/f2py2e.py"", line 561, in main\n        run_compile()\n      File ""/usr/local/lib/python2.6/dist-packages/numpy/f2py/f2py2e.py"", line 547, in run_compile\n        setup(ext_modules = [ext])\n      File ""/usr/local/lib/python2.6/dist-packages/numpy/distutils/core.py"", line 186, in setup\n        return old_setup(**new_attr)\n      File ""/usr/lib/python2.6/distutils/core.py"", line 152, in setup\n        dist.run_commands()\n      File ""/usr/lib/python2.6/distutils/dist.py"", line 975, in run_commands\n        self.run_command(cmd)\n      File ""/usr/lib/python2.6/distutils/dist.py"", line 995, in run_command\n        cmd_obj.run()\n      File ""/usr/local/lib/python2.6/dist-packages/numpy/distutils/command/build.py"", line 37, in run\n        old_build.run(self)\n      File ""/usr/lib/python2.6/distutils/command/build.py"", line 135, in run\n        self.run_command(cmd_name)\n      File ""/usr/lib/python2.6/distutils/cmd.py"", line 333, in run_command\n        self.distribution.run_command(command)\n      File ""/usr/lib/python2.6/distutils/dist.py"", line 995, in run_command\n        cmd_obj.run()\n      File ""/usr/local/lib/python2.6/dist-packages/numpy/distutils/command/build_src.py"", line 152, in run\n        self.build_sources()\n      File ""/usr/local/lib/python2.6/dist-packages/numpy/distutils/command/build_src.py"", line 169, in build_sources\n        self.build_extension_sources(ext)\n      File ""/usr/local/lib/python2.6/dist-packages/numpy/distutils/command/build_src.py"", line 334, in build_extension_sources\n        sources = self.f2py_sources(sources, ext)\n      File ""/usr/local/lib/python2.6/dist-packages/numpy/distutils/command/build_src.py"", line 593, in f2py_sources\n        [\'-m\',ext_name]+f_sources)\n      File ""/usr/local/lib/python2.6/dist-packages/numpy/f2py/f2py2e.py"", line 369, in run_main\n        ret=buildmodules(postlist)\n      File ""/usr/local/lib/python2.6/dist-packages/numpy/f2py/f2py2e.py"", line 316, in buildmodules\n        dict_append(ret[mnames[i]],rules.buildmodule(modules[i],um))\n      File ""/usr/local/lib/python2.6/dist-packages/numpy/f2py/rules.py"", line 1254, in buildmodule\n        fn = os.path.join(options[\'buildpath\'],vrd[\'coutput\'])\n    KeyError: \'coutput\'\n    \n\n\n\nWhy I get this error message? I am under Ubuntu 10.04 and I am compiling with gfortran.'"
2420,7731428,numpy-gitbot,numpy-gitbot,2012-10-19 22:26:21,2012-10-19 22:26:23,2012-10-19 22:26:23,closed,,1.6.0,2,11 - Bug;component: Other;priority: normal,https://api.github.com/repos/numpy/numpy/issues/2420,b'Inconsistent output dtype in mixed scalar-array operations (Trac #1827)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/1827 on 2011-05-10 by trac user tihocan, assigned to unknown._\n\nIt looks like the resulting dtype of a ""+"" operation between a scalar and an array can depend on the order of the arguments. This seems wrong.\n\nTested with numpy 1.5.1 under Ubuntu 11.04 (64-bit).\n\n\n\n    In [4]: (numpy.array(0, dtype=\'uint16\') + numpy.array([1], dtype=\'int8\')).dtype\n    Out[4]: dtype(\'int16\')\n    \n    In [6]: (numpy.array([1], dtype=\'int8\') + numpy.array(0, dtype=\'uint16\')).dtype\n    Out[6]: dtype(\'int8\')\n\n'"
2419,7731427,numpy-gitbot,numpy-gitbot,2012-10-19 22:26:19,2012-10-19 22:26:20,2012-10-19 22:26:20,closed,,,1,11 - Bug;component: Other;priority: normal,https://api.github.com/repos/numpy/numpy/issues/2419,b'numpy dtype incorrectly reports duplicate elements (Trac #1826)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/1826 on 2011-05-10 by trac user shegler, assigned to unknown._\n\nWhen using custom named data types, the wrong element is reported as the conflicting one. The following snippet\n\n\n    dt=numpy.dtype([\n    \t(\'a\',\'f8\'),\n    \t(\'a\',\'f8\'),\n    \t(\'b\',\'f8\'),\n    ])\n\n\nreports:\n\n\n    Traceback (most recent call last):\n      File ""dtype_bug.py"", line 8, in <module>\n        (\'b\',\'f8\'),\n    ValueError: two fields with the same name\n\n\n\nIt should, however, report the name which occurs twice, ""a"" in this case.'"
2414,7731422,numpy-gitbot,numpy-gitbot,2012-10-19 22:26:11,2012-10-19 22:26:11,2012-10-19 22:26:11,closed,,,1,11 - Bug;component: numpy.core;priority: normal,https://api.github.com/repos/numpy/numpy/issues/2414,b'numpy string arrays truncate trailing null bytes (Trac #1821)',"b""_Original ticket http://projects.scipy.org/numpy/ticket/1821 on 2011-05-06 by trac user saffsd, assigned to unknown._\n\n    >>> numpy.__version__\n    '1.3.0'\n    >>> map(len,numpy.array(['\\x00','\\x00X','X\\x00','\\x00\\x00']))\n    [0, 2, 1, 0]\n\nThis bug prevents round-trip behaviour for conversion from list->array->list:\n\n    >>> list(numpy.array(['\\x00'])) == ['\\x00']\n    False\n"""
2413,7731420,numpy-gitbot,charris,2012-10-19 22:26:09,2013-02-13 03:58:01,2013-02-13 03:58:01,closed,,,5,11 - Bug;component: Other;priority: normal,https://api.github.com/repos/numpy/numpy/issues/2413,b'Memory leak in numpy.lib.npyio.NpzFile (Trac #1820)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/1820 on 2011-05-05 by trac user benanne, assigned to unknown._\n\nThe __del__ method of NpzFile is prone to causing memory leaks. This problem just bit me pretty hard as I have a generator that loads up close to a million .npz files in turn.\n\nI think it is related to what is mentioned here: http://utcc.utoronto.ca/~cks/space/blog/python/DebuggingPythonMemoryLeaks\n\n""There are more obscure ways to hold references alive, including: a reference cycle involving an object with a __del__ method. As the gc module mentions, Python can\'t pick an order to destroy things in so it just stuffs them into a holding list for your program to look at.""\n\nSomeone on the #python IRC channel on FreeNode also told me: ""objects that implement __del__ are never collected if they\'re in a reference cycle.""\n\nI think I\'ve identified this reference cycle to be ""self.f = BagObj(self)"" in the __init__ method of NpzFile.\n\nThe problem occurs in numpy 1.5.1, and also with the NpzFile / BagObj code from trunk that I tried: https://github.com/numpy/numpy/blob/fd2630366581049af6c9acc4b41315363b47b55a/numpy/lib/npyio.py\n\nI also found another version that doesn\'t have the __del__ method, so it doesn\'t have the problem: http://svn.scipy.org/svn/numpy/trunk/numpy/lib/npyio.py\nI\'m presuming this is an old version from before git was used?\n\nGetting rid of the __del__ method in the current code fixes the problem, but then the own_fid flag no longer works of course. Luckily it is an acceptable fix in my case since I don\'t use this flag.\n\nI have attached some code that demonstrates the problem. I used it on an npz file of about 70kB containing 3 matrices (also attached), but if my assumptions are correct the problem should occur with any npz file.'"
2412,7731418,numpy-gitbot,numpy-gitbot,2012-10-19 22:26:07,2012-10-19 22:26:08,2012-10-19 22:26:08,closed,,,2,11 - Bug;component: Other;priority: normal,https://api.github.com/repos/numpy/numpy/issues/2412,"b""unexpected behaviour for numpy 'sum' (Trac #1819)""","b'_Original ticket http://projects.scipy.org/numpy/ticket/1819 on 2011-05-05 by @gerritholl, assigned to unknown._\n\nnumpy \'sum\' does not work as expected on a list of elements. I think it is good if numpy\'s functions work where builtins work, but here it obviously doesn\'t:\n\n\n\n    In [97]: a = rand(5, 1, 1); b = rand(1, 5, 1); c = rand(1, 5, 5)\n    \n    In [98]: __builtins__.sum([a, b, c])\n    Out[98]: \n    array([[[ 1.34984882,  1.42768038,  0.7970086 ,  1.26296369,  1.21887566],\n            [ 0.74989493,  0.58476975,  0.78491321,  1.19311338,  0.4112359 ],\n            [ 1.8563255 ,  1.23005   ,  1.8958019 ,  1.90095001,  1.42403426],\n            [ 1.22509658,  1.05595136,  1.06340261,  0.63567017,  1.30473052],\n            [ 0.38608382,  0.67873255,  0.83798171,  0.81364562,  0.25934601]],\n    \n           [[ 1.4516518 ,  1.52948336,  0.89881158,  1.36476667,  1.32067864],\n            [ 0.85169791,  0.68657273,  0.88671619,  1.29491636,  0.51303888],\n            [ 1.95812848,  1.33185298,  1.99760488,  2.00275299,  1.52583724],\n            [ 1.32689956,  1.15775434,  1.16520559,  0.73747315,  1.4065335 ],\n            [ 0.4878868 ,  0.78053553,  0.93978469,  0.9154486 ,  0.36114899]],\n    \n           [[ 2.23280273,  2.3106343 ,  1.67996252,  2.1459176 ,  2.10182958],\n            [ 1.63284885,  1.46772367,  1.66786713,  2.0760673 ,  1.29418982],\n            [ 2.73927942,  2.11300391,  2.77875582,  2.78390393,  2.30698818],\n            [ 2.1080505 ,  1.93890528,  1.94635653,  1.51862408,  2.18768444],\n            [ 1.26903773,  1.56168646,  1.72093562,  1.69659954,  1.14229993]],\n    \n           [[ 1.69520205,  1.77303361,  1.14236183,  1.60831692,  1.56422889],\n            [ 1.09524816,  0.93012298,  1.13026644,  1.53846661,  0.75658913],\n            [ 2.20167873,  1.57540323,  2.24115513,  2.24630324,  1.76938749],\n            [ 1.57044981,  1.40130459,  1.40875584,  0.9810234 ,  1.65008375],\n            [ 0.73143704,  1.02408578,  1.18333494,  1.15899885,  0.60469924]],\n    \n           [[ 1.31299812,  1.39082968,  0.7601579 ,  1.22611299,  1.18202496],\n            [ 0.71304424,  0.54791905,  0.74806251,  1.15626269,  0.3743852 ],\n            [ 1.8194748 ,  1.1931993 ,  1.85895121,  1.86409932,  1.38718357],\n            [ 1.18824588,  1.01910067,  1.02655192,  0.59881947,  1.26787983],\n            [ 0.34923312,  0.64188185,  0.80113101,  0.77679493,  0.22249532]]])\n    \n    In [99]: numpy.sum([a, b, c])\n    ---------------------------------------------------------------------------\n    ValueError                                Traceback (most recent call last)\n    \n    /storage4/home/gerrit/svn/faculteitsstuff/spacemaster_round_7_assistance/<ipython console> in <module>()\n    \n    /storage4/home/gerrit/.local/lib/python2.6/site-packages/numpy/core/fromnumeric.pyc in sum(a, axis, dtype, out)\n       1426         sum = a.sum\n       1427     except AttributeError:\n    -> 1428         return _wrapit(a, \'sum\', axis, dtype, out)\n       1429     return sum(axis, dtype, out)\n       1430 \n    \n    /storage4/home/gerrit/.local/lib/python2.6/site-packages/numpy/core/fromnumeric.pyc in _wrapit(obj, method, *args, **kwds)\n         35     except AttributeError:\n         36         wrap = None\n    ---> 37     result = getattr(asarray(obj),method)(*args, **kwds)\n         38     if wrap:\n         39         if not isinstance(result, mu.ndarray):\n    \n    /storage4/home/gerrit/.local/lib/python2.6/site-packages/numpy/core/numeric.pyc in asarray(a, dtype, order)\n        282 \n        283     """"""\n    --> 284     return array(a, dtype, copy=False, order=order)\n        285 \n        286 def asanyarray(a, dtype=None, order=None):\n    \n    ValueError: setting an array element with a sequence.\n    \n    In [101]: numpy.version.version\n    Out[101]: \'2.0.0.dev-12d0200\'\n    \n\n\n\nShould numpy\'s sum here behave like builtin sum?'"
2411,7731416,numpy-gitbot,rgommers,2012-10-19 22:26:05,2014-12-10 18:51:12,2014-02-19 22:20:35,closed,,,8,11 - Bug;component: numpy.distutils;priority: normal,https://api.github.com/repos/numpy/numpy/issues/2411,b'gfortran missing -shared flag when building extensions with numpy.distutils and -fPIC missing for gfortran on x64 (Trac #1818)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/1818 on 2011-05-04 by trac user winterstream, assigned to @cournape._\n\nI attempted to compile PyMC, which makes use of numpy.distutils to\nbuild its Fortran extensions.\n\nThe build first failed because gfortran was executed without the\n-shared flag (so there was a missing main). I hacked this into numpy/distutils/fcompiler/gnu.py:248 by changing \'linker_so\'    : [""<F90>"", ""-Wall""], to \'linker_so\'    : [""<F90>"", ""-Wall"", ""-shared""]\n\nI also hacked -fPIC into the file by adding it to _EXTRAFLAGS.\n\nNeither of these hacks are solutions but I hope that it helps to pinpoint a fix.'"
2409,7731414,numpy-gitbot,charris,2012-10-19 22:26:01,2014-02-20 17:14:51,2014-02-20 17:14:51,closed,,,2,11 - Bug;component: numpy.core;priority: normal,https://api.github.com/repos/numpy/numpy/issues/2409,b'numpy.double comparison with list is confusing (Trac #1816)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/1816 on 2011-05-02 by trac user boz, assigned to unknown._\n\nComparison of a scalar numpy.double with iterables is a bit confusing.\nConsider an example\n\n\n    f = numpy.double(1./3.)\n    if f == []:\n        print(""expect this code"")\n\n\nBut the print statement never runs, since comparison returns [] which is False. At least for me this is counterintuitive.\n\n'"
2408,7731413,numpy-gitbot,charris,2012-10-19 22:25:49,2014-02-20 17:08:06,2014-02-20 17:08:06,closed,,,15,11 - Bug;component: numpy.testing;priority: normal,https://api.github.com/repos/numpy/numpy/issues/2408,b'Segmentation Fault when running numpy test (Trac #1815)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/1815 on 2011-04-30 by trac user alex_lai, assigned to unknown._\n\nHi experts,\n  I\xa1\xafm wondering if anyone would look into this issue. While testing numpy package, Python crashed with the following error:\n\nsbtorsvr391:~ $ cd /home/dcottr/local/tests\nsbtorsvr391:~/local/tests $ export PYTHONPATH=$PYTHONPATH:~/local/lib/python3.1/site-packages\n\nsbtorsvr391:~/local/tests $ /usr/local/bin/python3 -c ""import numpy; numpy.test()""\nRunning unit tests for numpy\nNumPy version 1.5.1\nNumPy is installed in /home/dcottr/local/lib/python3.1/site-packages/numpy\n\nPython version 3.1.2 (r312:79147, Mar 23 2010, 02:42:06) [GCC 3.4.6]\nnose version 1.0.0\n..S...............................................................................................................................................S........Warning: invalid value encountered in isfinite\n............................................................................................................................................................................................Warning: invalid value encountered in isinf\nWarning: invalid value encountered in isinf\negmentation Fault (core dumped)\n\n\n            Below is the stack trace from the core dump:\n\n# mdb core_sbtorsvr391_python3_10439_5000_1304101376_11246\n\nLoading modules: [ libc.so.1 libavl.so.1 libuutil.so.1 ld.so.1 ]\n\n> \n> ::stack\nlibc.so.1`strlen+0x50(fba55238, ffbf9ef8, ffbf9761, 0, 0, 0)\nlibc.so.1`sprintf+0x40(ffbf9f18, 7fffffff, 7ffffc00, 2, 2, 1b74cc)\ntest_array_from_pyobj_ext.so`array_from_pyobj+0x4e0(6, 17d3ec0, 1, 7, 16176c0, ff13a5a0)\ntest_array_from_pyobj_ext.so`f2py_rout_wrap_call+0xbc(1, 1, 0, 17f000, fffffffe, fba65b94)\nPyCFunction_Call+0x90(15ff350, 1841900, 1844e90, 0, 1, 183df38)\nPyEval_EvalFrameEx+0x4f10(0, ffbfa1c0, 1615770, 1, 16491b0, 15ff350)\nPyEval_EvalCodeEx+0x874(1615770, 161ff60, 0, 160cf3c, 5, 0)\nfunction_call+0x8c(162e270, 160cf30, 0, 17f000, fffffffe, 40)\nPyObject_Call+0x44(162e270, 160cf30, 0, 160cf3c, 4, 16176c0)\nmethod_call+0x8c(162e270, 18418d0, 0, 1849f60, 1, 3f)\nPyObject_Call+0x44(176b620, 18418d0, 0, 2ed5c, 2efe0, 176b620)\nslot_tp_init+0x7c(176b620, 18418d0, 0, 2, 1, 16296d0)\ntype_call+0xdc(16521a0, 18418d0, 0, 17f000, fffffffe, 3e)\nPyObject_Call+0x44(16521a0, 18418d0, 0, 18418d8, 1820030, 183ddbc)\nPyEval_EvalFrameEx+0x37b4(0, ffbfa688, 162e9b0, 1, 16259c0, 16521a0)\nPyEval_EvalFrameEx+0x5c98(0, ffbfa788, 16154e8, 1, 1626030, 162eb28)\nPyEval_EvalFrameEx+0x5c98(0, ffbfa888, 52b260, 1, 57ec00, 162e468)\nPyEval_EvalCodeEx+0x874(52b260, 5229c0, 0, 1808834, 2, 1ac03c)\nfunction_call+0x8c(5a36a8, 1808828, 0, 17f000, fffffffe, 3a)\nPyObject_Call+0x44(5a36a8, 1808828, 1825a50, 19b000, 163ab30, fe36c4)\nPyEval_EvalFrameEx+0x13bc(0, fe36c8, 52b2f0, 1, 526d50, 1808828)\nPyEval_EvalCodeEx+0x874(52b2f0, 1, 0, 1808c1c, 2, 0)\nfunction_call+0x8c(5a3738, 1808c10, 0, 17f000, fffffffe, 38)\nPyObject_Call+0x44(5a3738, 1808c10, 0, 1808c10, 1, 1849e50)\nmethod_call+0x8c(5a3738, 1630450, 0, 1630440, 9, 37)\nPyObject_Call+0x44(1612850, 1630450, 0, 193618, 2, 1612850)\nslot_tp_call+0x7c(163ab30, 1630450, 0, 17f000, fffffffe, 36)\nPyObject_Call+0x44(163ab30, 1630450, 0, 1630458, 1849e50, fe355c)\nPyEval_EvalFrameEx+0x37b4(0, ffbfaf78, b1e0f8, 1, a873a0, 163ab30)\nPyEval_EvalFrameEx+0x5c98(0, ffbfb078, b1e0b0, 1, b1db58, b1ed20)\nPyEval_EvalCodeEx+0x874(b1e0b0, b0e810, 0, 180b67c, 2, 1ac03c)\nfunction_call+0x8c(b1ecd8, 180b670, 0, 17f000, fffffffe, 33)\nPyObject_Call+0x44(b1ecd8, 180b670, 18258a0, 19b000, 163abf0, fe2f3c)\nPyEval_EvalFrameEx+0x13bc(0, fe2f40, b1ccc8, 1, b1a350, 180b670)\nPyEval_EvalCodeEx+0x874(b1ccc8, 1, 0, 1844dac, 2, 0)\nfunction_call+0x8c(b1ea50, 1844da0, 0, 17f000, fffffffe, 31)\nPyObject_Call+0x44(b1ea50, 1844da0, 0, 1844da0, 1, e4ddf0)\nmethod_call+0x8c(b1ea50, 16306d0, 0, 16306c0, b, 30)\nPyObject_Call+0x44(176b5a8, 16306d0, 0, 1ab728, 18f708, 176b5a8)\nslot_tp_call+0x7c(163abf0, 16306d0, 0, 17f000, fffffffe, 2f)\nPyObject_Call+0x44(163abf0, 16306d0, 0, 16306d8, e4ddf0, 18374d8)\nPyEval_EvalFrameEx+0x37b4(0, ffbfb768, b2e4e8, 1, ad9ce8, 163abf0)\nPyEval_EvalCodeEx+0x874(b2e4e8, b1b4b0, 0, 18087bc, 2, 1ac03c)\nfunction_call+0x8c(a00390, 18087b0, 0, 17f000, fffffffe, 2d)\nPyObject_Call+0x44(a00390, 18087b0, 176c810, 19b000, 165c450, 182ea24)\nPyEval_EvalFrameEx+0x13bc(0, 182ea28, b2e380, 1, b1ad50, 18087b0)\nPyEval_EvalCodeEx+0x874(b2e380, 1, 0, 176b8ac, 2, 0)\nfunction_call+0x8c(a002b8, 176b8a0, 0, 17f000, fffffffe, 2b)\nPyObject_Call+0x44(a002b8, 176b8a0, 0, 176b8a0, 1, e4ddf0)\nmethod_call+0x8c(a002b8, 16141b0, 0, 16141a0, 9, 2a)\nPyObject_Call+0x44(1612c10, 16141b0, 0, 1ab728, 18f708, 1612c10)\nslot_tp_call+0x7c(165c450, 16141b0, 0, 17f000, fffffffe, 29)\nPyObject_Call+0x44(165c450, 16141b0, 0, 16141b8, e4ddf0, 1645cf0)\nPyEval_EvalFrameEx+0x37b4(0, ffbfbe58, b2e4e8, 1, ad9ce8, 165c450)\nPyEval_EvalCodeEx+0x874(b2e4e8, b1b4b0, 0, 16296a4, 2, 1ac03c)\nfunction_call+0x8c(a00390, 1629698, 0, 17f000, fffffffe, 27)\nPyObject_Call+0x44(a00390, 1629698, 161f8a0, 19b000, 176a270, 124868c)\nPyEval_EvalFrameEx+0x13bc(0, 1248690, b2e380, 1, b1ad50, 1629698)\nPyEval_EvalCodeEx+0x874(b2e380, 1, 0, 16127bc, 2, 0)\n> ::quit\n\nThe C library used by Python is as follows:\n\n\nsbtorsvr391:~/local/tests $ ldd /usr/local/bin/python3|grep libc\n        libc.so.1 =>        /lib/libc.so.1\n        /platform/SUNW,Sun-Fire-V490/lib/libc_psr.so.1\n \nsbtorsvr391:~ $ ls -l /lib/libc.so.1\n-rwxr-xr-x 1 root bin 1640776 Aug 10  2010 /lib/libc.so.1\n\nsbtorsvr391:~ $ pkgchk -l -p /lib/libc.so.1\nNOTE: Couldn\'t lock the package database.\nPathname: /lib/libc.so.1\nType: regular file\nExpected mode: 0755\nExpected owner: root\nExpected group: bin\nExpected file size (bytes): 1640776\nExpected sum(1) of contents: 50250\nExpected last modification: Aug 10 13:55:34 2010\nReferenced by the following packages:\n        SUNWcslr\nCurrent status: installed\n\nsbtorsvr391:~ $ pkginfo -l SUNWcslr\n   PKGINST:  SUNWcslr\n      NAME:  Core Solaris Libraries (Root)\n  CATEGORY:  system\n      ARCH:  sparc\n   VERSION:  11.10.0,REV=2005.01.21.15.53\n   BASEDIR:  /\n    VENDOR:  Sun Microsystems, Inc.\n      DESC:  core software for a specific instruction-set architecture\n    PSTAMP:  on10-patch20100511083333\n  INSTDATE:  Jan 22 2011 16:10\n   HOTLINE:  Please contact your local service provider\n    STATUS:  completely installed\n     FILES:      245 installed pathnames\n                   2 shared pathnames\n                   5 directories\n                 133 executables\n               34303 blocks used (approx)\n\n\nThe same problem doesn\'t occur when the command is run as root.\n\nI opened a ticket with Python support. they responsed with the comment:\n-----------\nThe issue is actually in numpy. In numpy/f2py/src/fortranobject.c, function array_from_pyobj(), there is::\n\n        sprintf(mess,""failed to initialize intent(inout|inplace|cache) array""\n                "" -- input must be array but got %s"",\n                PyString_AsString(PyObject_Str(PyObject_Type(obj)))\n                );\n\n(In numpy headers, PyString_AsString is aliased to PyBytes_AsString.) Besides the reference leaks, this function will fail when given the unicode string returned by PyObject_Str(), and sprintf receives the null string...\nPlease report this to numpy.\n--------------\n\n\n\nI\'m hoping I will find answer to this issue here...\n\n\nThanks in advance,\n\nAlex'"
2406,7731410,numpy-gitbot,numpy-gitbot,2012-10-19 22:25:44,2012-10-19 22:25:46,2012-10-19 22:25:46,closed,,NumPy 1.7,3,11 - Bug;component: Documentation;priority: normal,https://api.github.com/repos/numpy/numpy/issues/2406,b'percentile  examples (Trac #1813)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/1813 on 2011-04-28 by trac user nzarate, assigned to @pv._\n\nThe percentile function do not give the posted answer; e.g.\n\nnp.percentile(a, 0.5) \n\nshould be\n\nnp.percentile(a, 50)\n\nThanks\nnz\n'"
2405,7731409,numpy-gitbot,charris,2012-10-19 22:25:42,2014-02-19 21:45:03,2014-02-19 21:45:03,closed,,NumPy 2.0,3,11 - Bug;component: numpy.core;priority: normal,https://api.github.com/repos/numpy/numpy/issues/2405,b'FAIL: string test on win 32 Py 3.2 has dtype U5 instead of S5 (Trac #1812)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/1812 on 2011-04-27 by @rgommers, assigned to unknown._\n\n\n\n    ======================================================================\n    FAIL: Ticket #1748\n    ----------------------------------------------------------------------\n    Traceback (most recent call last):\n      File ""Z:\\Users\\zouzoujing\\.wine\\drive_c\\Python32\\lib\\site-packages\\numpy\\core\\tests\\test_regression.py"", line 1550, in test_string_astype\n        assert_equal(b.dtype, np.dtype(\'S5\'))\n      File ""Z:\\Users\\zouzoujing\\.wine\\drive_c\\Python32\\lib\\site-packages\\numpy\\testing\\utils.py"", line 313, in assert_equal\n        raise AssertionError(msg)\n    AssertionError: \n    Items are not equal:\n     ACTUAL: dtype(\'<U5\')\n     DESIRED: dtype(\'|S5\')\n\n\n\nTest issue or actual issue?\n'"
2404,7731407,numpy-gitbot,numpy-gitbot,2012-10-19 22:25:38,2012-10-19 22:25:41,2012-10-19 22:25:41,closed,,1.6.0,7,11 - Bug;component: Other;priority: normal,https://api.github.com/repos/numpy/numpy/issues/2404,b'test fails: test_array_too_big (test_regression.TestRegression) (Trac #1811)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/1811 on 2011-04-27 by @stsci-sienkiew, assigned to unknown._\n\n\n\n    ======================================================================\n    ERROR: test_array_too_big (test_regression.TestRegression)\n    Ticket #1080.\n    ----------------------------------------------------------------------\n    Traceback (most recent call last):\n      File ""/usr/stsci/pyssgdev/2.7/numpy/core/tests/test_regression.py"", line 1157, in test_array_too_big\n        assert_raises(MemoryError, np.zeros, [2**30]*2, np.int8)\n      File ""/usr/stsci/pyssgdev/2.7/numpy/testing/utils.py"", line 1007, in assert_raises\n        return nose.tools.assert_raises(*args,**kwargs)\n      File ""/usr/stsci/pyssgdev/Python-2.7/lib/python2.7/unittest/case.py"", line 456, in assertRaises\n        callableObj(*args, **kwargs)\n    ValueError: array is too big.\n    \n\n\n\nThis is in Python 2.7 on 32 bit Mac and 32 bit Red Hat Enterprise 4.\n\nWorks on Python 2.5, 2.6, 2.7 on 64 bit RHE 5.  Works on Python 2.7 on 64 bit Mac Snow Leopard.  Works on Python 2.7 on 64 bit RHE 4.\n\nThe line of the test that is erroring is:        \n\n\n\n            assert_raises(MemoryError, np.zeros, [2**30]*2, np.int8)\n\n\n'"
2403,7731406,numpy-gitbot,charris,2012-10-19 22:25:37,2013-06-16 13:17:54,2013-06-16 13:17:54,closed,,,2,11 - Bug;component: numpy.ma;priority: normal,https://api.github.com/repos/numpy/numpy/issues/2403,b'masked array with named components does not behave as expected (Trac #1810)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/1810 on 2011-04-27 by trac user risa2000, assigned to @pierregm._\n\nIn the included file is the log from IPython.\nAccording to doc, assigning valid value should unmask the item\n-> this is not happening (see In&Out 4,5 and 6,7 in the file)\n\nThe mask is intact (In&Out 8)\n\nManually changing mask (In&Out 9+10) seems to change the mask, but the unmasked value is arbitrary and not possible to change (In&Out 11+12 and 13+14).'"
2400,7731401,numpy-gitbot,charris,2012-10-19 22:25:30,2014-02-19 21:25:54,2014-02-19 21:25:54,closed,,,2,11 - Bug;component: numpy.core;priority: normal,https://api.github.com/repos/numpy/numpy/issues/2400,b'Resizing string array to zero length causes datatype to change to 1 character. (Trac #1807)',"b""_Original ticket http://projects.scipy.org/numpy/ticket/1807 on 2011-04-25 by trac user bellamyj, assigned to unknown._\n\nIf a string array is resized to zero length, and then to non-zero length, the data type will change to a single character (|S1).\n\nSee the attached code for an example.\n\nI'm running 32 bit Python 2.7.1 on Windows and !NumPy 1.5.1."""
2399,7731399,numpy-gitbot,rgommers,2012-10-19 22:25:28,2014-02-19 22:22:24,2014-02-19 22:22:24,closed,,,2,11 - Bug;component: numpy.core;priority: normal,https://api.github.com/repos/numpy/numpy/issues/2399,b'Datetime needs docs and updated NEP (Trac #1806)',"b""_Original ticket http://projects.scipy.org/numpy/ticket/1806 on 2011-04-22 by @rgommers, assigned to unknown._\n\nAPI docs as well as docstrings for the few Python-level functions are needed. Furthermore, the datetime NEP needs to be updated so it's clear what is implemented and what not. Also, the other datetime related NEP needs to be updated too.\n\nA small tutorial would be a good bonus, could be easily extracted from the NEP. """
2398,7731398,numpy-gitbot,numpy-gitbot,2012-10-19 22:25:21,2012-10-19 22:25:27,2012-10-19 22:25:27,closed,,1.6.0,22,11 - Bug;component: Other;priority: highest,https://api.github.com/repos/numpy/numpy/issues/2398,b'Test errors when the char type is unsigned. (Trac #1805)',"b""_Original ticket http://projects.scipy.org/numpy/ticket/1805 on 2011-04-21 by trac user manowar, assigned to unknown._\n\nHi!\n\nI'm trying to port the NumPy to the armv5tel platform. While most of the code seem to work, there is a problem in initialize_casting_tables() function, numpy/core/src/multiarray/scalartypes.c.src:3642:\n\nthe table index update operation\n\nk = _npy_next_larger_type_table[k]\n\nresults in an infinite loop, because _npy_next_larger_type_table[0] is 255 and _npy_next_larger_type_table[255] is 0. No loop escape (break) condition is either satisfied.\n\nSo, the initialize_casting_tables() function does never return and the loading of the numpy module hangs forever in dl_load multiarray.so taking 99% of CPU time.\n\nI'm not sure assuming that the problem is ARM-specific. What steps should I perform to expose the roots of the problem?\n\n\n  TIA,\n    Paul.\n"""
2397,7731397,numpy-gitbot,charris,2012-10-19 22:25:20,2014-02-19 21:09:49,2014-02-19 21:09:49,closed,,,1,11 - Bug;component: Other;priority: normal,https://api.github.com/repos/numpy/numpy/issues/2397,b'numpy.apply_along_axis returns strange dimensionless array (Trac #1804)',"b""_Original ticket http://projects.scipy.org/numpy/ticket/1804 on 2011-04-20 by trac user Mark@..., assigned to unknown._\n\nIn [18]: \nx=numpy.apply_along_axis(numpy.sum, 0, numpy.ones((1,))); \nprint x.shape, type(x), x, x==1\n\nIn [19]: \nIn [20]: () <type 'numpy.ndarray'> 1.0 True\n\n"""
2396,7731396,numpy-gitbot,charris,2012-10-19 22:25:19,2015-08-01 21:03:33,2014-02-19 21:05:32,closed,,,8,11 - Bug;component: Other;priority: normal,https://api.github.com/repos/numpy/numpy/issues/2396,b'ndarray dump function (and straight cPickle) fails for large arrays (Trac #1803)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/1803 on 2011-04-19 by trac user meawoppl, assigned to unknown._\n\na = zeros((300000, 1000))\nf = open(""test.pkl"", ""w"")\ncPickle.dump(a, f)\n-------------------\nSystemError           Traceback (most recent call last)\n\n/home/kddcup/code/matt/svd-projection/take5/<ipython console> in <module>()\n\nSystemError: error return without exception set\n\nOr using the .dump function:\n\na.dump(""test.pkl"")\n--------------------------------------------------\nSystemError            Traceback (most recent call last)\n\n/home/kddcup/code/matt/svd-projection/take5/<ipython console> in <module>()\n\nSystemError: NULL result without error in PyObject_Call\n\nI am not sure if this is a numpy or Pickle/cPickle glitch.  In either case, a more instructive error message would certainly help.  I think the problem only happens for arrays larger than 2**(32-1) bytes but I would have to experiment more to be sure.  '"
2394,7731393,numpy-gitbot,numpy-gitbot,2012-10-19 22:25:13,2012-10-23 02:45:35,2012-10-19 22:25:16,closed,,1.6.0,6,11 - Bug;component: numpy.random;priority: normal,https://api.github.com/repos/numpy/numpy/issues/2394,b'Failure: test_noncentral_f in random (Trac #1801)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/1801 on 2011-04-17 by @rgommers, assigned to unknown._\n\nReported by Christoph Gohlke against 1.6.0b2 on 64-bit Windows with MKL. Unlike #2361 this seems to be a real bug, not just about test precision.\n\n\n\n    ======================================================================\n    FAIL: test_noncentral_f (test_random.TestRandomDist)\n    ----------------------------------------------------------------------\n    Traceback (most recent call last):\n      File\n    ""X:\\Python26-x64\\lib\\site-packages\\numpy\\random\\tests\\test_random.py"",\n    line 297, in test_noncentral_f\n        np.testing.assert_array_almost_equal(actual, desired, decimal=14)\n      File ""X:\\Python26-x64\\lib\\site-packages\\numpy\\testing\\utils.py"", line\n    800, in assert_array_almost_equal\n        header=(\'Arrays are not almost equal to %d decimals\' % decimal))\n      File ""X:\\Python26-x64\\lib\\site-packages\\numpy\\testing\\utils.py"", line\n    636, in assert_array_compare\n        raise AssertionError(msg)\n    AssertionError:\n    Arrays are not almost equal to 14 decimals\n    \n    (mismatch 100.0%)\n     x: array([[ 1.62003345,  1.7253997 ],\n           [ 0.96735921,  0.42933718],\n           [ 0.71714872,  6.24979552]])\n     y: array([[ 1.405981  ,  0.34207973],\n           [ 3.57715069,  7.92632663],\n           [ 0.43741599,  1.17742088]])\n    \n\n\n\nChristoph, could you please have a look at this? I haven\'t got a 64-bit Windows machine available.'"
2392,7731390,numpy-gitbot,numpy-gitbot,2012-10-19 22:25:09,2012-10-19 22:25:10,2012-10-19 22:25:10,closed,,,2,11 - Bug;component: numpy.testing;priority: normal,https://api.github.com/repos/numpy/numpy/issues/2392,b'assert_approx_equal against 0.0 always fails (Trac #1799)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/1799 on 2011-04-15 by trac user jaety, assigned to unknown._\n\nThe following lines\n\n\n    import numpy as np\n    np.testing.assert_approx_equal(0.0, 0.000000000000001)\n\n\nreturns that the two values are not equal to 7 significant digits. Basically, assert_approx_equal will fail incorrectly if either of the two numbers is identically 0.0, regardless of the number of significant digits you specify, because of the way the floating point numbers are scaled prior to testing them.\n\nI think you need an explicit test for 0.0, something like\n\n\n        # Specially handle desired or actual identically zero\n        if ((desired==0.0 or actual==0.0) and \n             np.abs(desired+actual)*np.power(10,significant)>=1.0):\n            raise AssertionError(msg)\n        else:\n            return\n\n\n'"
2391,7731389,numpy-gitbot,numpy-gitbot,2012-10-19 22:25:07,2012-10-19 22:25:08,2012-10-19 22:25:08,closed,,1.6.0,4,11 - Bug;component: numpy.core;priority: highest,https://api.github.com/repos/numpy/numpy/issues/2391,b'Type promotion rules regression (Trac #1798)',"b""_Original ticket http://projects.scipy.org/numpy/ticket/1798 on 2011-04-11 by @mwiebe, assigned to @mwiebe._\n\n[scalar float64]*[array int8] should produce [array float64], but when the value of the scalar float64 is small, it may produce [array float16] or [array float32]. Here is the current behavior:\n\n\n\n    >>> 3.1*np.ones(2,dtype=np.int8)\n    array([ 3.09960938,  3.09960938], dtype=float16)\n    >>> 1e10*np.ones(2,dtype=np.int8)\n    array([  1.00000000e+10,   1.00000000e+10], dtype=float32)\n    >>> 1e40*np.ones(2,dtype=np.int8)\n    array([  1.00000000e+40,   1.00000000e+40])\n\n\n\nI propose a fix in two parts.\n\n1. Fix this in the PyArray_ResultType/numpy.result_type function of the type promotion API. In particular, the algorithm should track the promoted array and scalar types separately, then if the kind of the promoted scalar type is greater than the kind of the promoted array type, continue the promotion of the promoted array type with the scalars without using minscalartype.\n\n2. Change the ufunc to detect binary operators during creation, and set a flag for it. Then, during evaluation, use PyArray_ResultType to do the type promotion for binary operators instead of the existing slow linear search. The ufunc doesn't have a flags field, but it does have a field called 'check_return' which is unused, and could be repurposed as a flags field without changing the size of the python type."""
2386,7731378,numpy-gitbot,numpy-gitbot,2012-10-19 22:24:57,2012-10-19 22:24:58,2012-10-19 22:24:58,closed,,NumPy 1.7,6,11 - Bug;component: numpy.lib;priority: normal,https://api.github.com/repos/numpy/numpy/issues/2386,b'genfromtxt should probably return an empty array if there is no data. (Trac #1793)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/1793 on 2011-04-04 by @charris, assigned to unknown._\n\ngenfromtxt currently raises an IOError if it reaches the eof without finding a line of data.'"
2385,7731377,numpy-gitbot,juliantaylor,2012-10-19 22:24:56,2013-10-30 08:50:14,2013-10-30 08:50:14,closed,,,0,11 - Bug;component: numpy.core;priority: normal,https://api.github.com/repos/numpy/numpy/issues/2385,"b'absolute(complex(inf)) raises invalid warning (py 3.2, win32) (Trac #1792)'","b'_Original ticket http://projects.scipy.org/numpy/ticket/1792 on 2011-04-03 by @rgommers, assigned to unknown._\n\nHappens only on win32, not on OS X with python 3.2\n\n\n\n    >>> np.abs(np.inf)             \n    inf\n    >>> np.abs(np.complex(np.inf))\n    Warning: invalid value encountered in absolute\n    inf\n\n'"
2384,7731376,numpy-gitbot,charris,2012-10-19 22:24:54,2014-03-13 17:56:50,2014-03-13 17:56:50,closed,,,7,11 - Bug;component: Official binaries;priority: normal,https://api.github.com/repos/numpy/numpy/issues/2384,b'Handle SWIG/Cython/Pyrex files correctly during install (Trac #1791)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/1791 on 2011-04-02 by @rgommers, assigned to @rgommers._\n\nThe files under doc/swig, doc/cython. doc/pyrex should not be installed by default through setup.py because this makes Linux packagers unhappy. In the Windows and OS X installers these files could be put somewhere, because they are useful for users.'"
2383,7731374,numpy-gitbot,numpy-gitbot,2012-10-19 22:24:51,2012-10-23 02:45:34,2012-10-19 22:24:52,closed,,NumPy 1.7,4,11 - Bug;component: numpy.core;priority: normal,https://api.github.com/repos/numpy/numpy/issues/2383,"b'dtype(..., align=True) does not insert trailing padding (Trac #1790)'","b'_Original ticket http://projects.scipy.org/numpy/ticket/1790 on 2011-04-02 by @pv, assigned to @mwiebe._\n\nNote the following:\n\n\n    >>> dt = np.dtype([(\'a\', \'b\'), (\'b\', \'i\'), (\'c\', \'b\')], align=True)\n    >>> dt.itemsize\n    9\n\n\nwhereas\n\n\n    #include <stdio.h>\n    \n    typedef struct {\n        char a;\n        int b;\n        char c;\n    } xxx_t;\n    \n    int main()\n    {\n        printf(""%d\\n"", sizeof(xxx_t));\n        return 0;\n    }\n    \n    /* -> sizeof(xxx_t) == 12 */\n\n\n\nChanging this might cause problems in third-party code. On the other hand, align=True is probably not that often used.\n'"
2381,7731372,numpy-gitbot,numpy-gitbot,2012-10-19 22:24:46,2012-10-19 22:24:48,2012-10-19 22:24:48,closed,,NumPy 1.7,6,11 - Bug;component: numpy.lib;priority: normal,https://api.github.com/repos/numpy/numpy/issues/2381,"b""histogramdd doesn't like bins with infinite edges (Trac #1788)""","b'_Original ticket http://projects.scipy.org/numpy/ticket/1788 on 2011-03-30 by trac user eschlafly, assigned to unknown._\n\nThe following code causes an Overflow Error and doesn\'t need to:\n\n\n\n\n    h,e = histogramdd(randn(100,2), bins=(100,[-inf,0,inf]))\n\n\n\n\nThe problem is the section of code which looks for points on the right edge of the rightmost edge.  Specifically, it looks for the amount that is ""close enough"" to the edge via line 314 (in lib/function_base.py, v1.5.1):\n\n\n\n    decimal = int(-log10(dedges[i].min())) +6\n\n\n\nbut in this case dedges[i].min() == inf, triggering the overflow.\nI would propose looking for the case dedges[i].min() == inf explicitly and not trying to find such points in that case.\n\nOf course, I can get around this, but it\'s really convenient when the library is robust against such situations.\n\nThanks a lot.'"
2380,7731371,numpy-gitbot,charris,2012-10-19 22:24:44,2014-02-19 20:02:09,2014-02-19 20:02:09,closed,,,1,11 - Bug;component: Other;priority: normal,https://api.github.com/repos/numpy/numpy/issues/2380,b'ctypeslib test error on python 3.2 (Trac #1787)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/1787 on 2011-03-29 by @matthew-brett, assigned to unknown._\n\n\n\n    nosetests tmp/junk/lib/python3.2/site-packages/numpy/tests/test_ctypeslib.py\n\n\n\ngives\n\n\n\n    ======================================================================\n    ERROR: Failure: OSError (/home/mb312/tmp/junk/lib/python3.2/site-packages/numpy/core/multiarray.pyd: cannot open shared object file: No such file or directory)\n    ----------------------------------------------------------------------\n    Traceback (most recent call last):\n      File ""/usr/local/lib/python3.2/dist-packages/nose-1.0.0-py3.2.egg/nose/failure.py"", line 37, in runTest\n        raise self.exc_class(self.exc_val).with_traceback(self.tb)\n      File ""/usr/local/lib/python3.2/dist-packages/nose-1.0.0-py3.2.egg/nose/loader.py"", line 390, in loadTestsFromName\n        addr.filename, addr.module)\n      File ""/usr/local/lib/python3.2/dist-packages/nose-1.0.0-py3.2.egg/nose/importer.py"", line 39, in importFromPath\n        return self.importFromDir(dir_path, fqname)\n      File ""/usr/local/lib/python3.2/dist-packages/nose-1.0.0-py3.2.egg/nose/importer.py"", line 86, in importFromDir\n        mod = load_module(part_fqname, fh, filename, desc)\n      File ""/home/mb312/tmp/junk/lib/python3.2/site-packages/numpy/tests/test_ctypeslib.py"", line 8, in <module>\n        cdll = load_library(\'multiarray\', np.core.multiarray.__file__)\n      File ""/home/mb312/tmp/junk/lib/python3.2/site-packages/numpy/ctypeslib.py"", line 122, in load_library\n        raise exc\n      File ""/home/mb312/tmp/junk/lib/python3.2/site-packages/numpy/ctypeslib.py"", line 119, in load_library\n        return ctypes.cdll[libpath]\n      File ""/usr/lib/python3.2/ctypes/__init__.py"", line 415, in __getitem__\n        return getattr(self, name)\n      File ""/usr/lib/python3.2/ctypes/__init__.py"", line 410, in __getattr__\n        dll = self._dlltype(name)\n      File ""/usr/lib/python3.2/ctypes/__init__.py"", line 340, in __init__\n        self._handle = _dlopen(self._name, mode)\n    OSError: /home/mb312/tmp/junk/lib/python3.2/site-packages/numpy/core/multiarray.pyd: cannot open shared object file: No such file or directory\n\n\n\nThis is because the compiled file is now multiarray.cpython-32mu.so not multiarray.so or multiarray.pyd as the ctypeslib was previously expecting.  One fix is to add in ctypeslib around line 100:\n\n\n\n                py_exts = [suf for suf, mode, mtype in imp.get_suffixes()\n                            if mtype == imp.C_EXTENSION]\n\n\n\nto the extensions to be tested (which will pick up .so along with cpython-32mu.so and modulecpython-32mu.so).  This would mean, for non-python libraries, the number of exts to search for would increase, presumably not very usefully because we don\'t often use ctypeslib for python extensions, I suppose.\n'"
2378,7731369,numpy-gitbot,numpy-gitbot,2012-10-19 22:24:38,2012-10-19 22:24:40,2012-10-19 22:24:40,closed,,1.6.0,4,11 - Bug;component: numpy.core;priority: high,https://api.github.com/repos/numpy/numpy/issues/2378,b'fastCopyAndTranspose test error (Trac #1785)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/1785 on 2011-03-27 by @rgommers, assigned to @mwiebe._\n\nIn 1.6.x branch:\n\n\n    ======================================================================\n    ERROR: test_api.test_fastCopyAndTranspose\n    ----------------------------------------------------------------------\n    Traceback (most recent call last):\n      File ""/Library/Frameworks/Python.framework/Versions/2.6/lib/python2.6/site-packages/nose-1.0.0-py2.6.egg/nose/case.py"", line 187, in runTest\n        self.test(*self.arg)\n      File ""/Users/zouzoujing/Code/numpy/numpy/core/tests/test_api.py"", line 11, in test_fastCopyAndTranspose\n        b = np.fastCopyAndTranspose(a)\n    ValueError: only 2-d arrays are allowed\n\n\n'"
2377,7731367,numpy-gitbot,charris,2012-10-19 22:24:37,2014-03-15 04:34:59,2014-03-15 04:34:59,closed,,,2,11 - Bug;component: numpy.core;priority: normal,https://api.github.com/repos/numpy/numpy/issues/2377,b'Support zero-dimensional arrays in __format__ (Trac #1784)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/1784 on 2011-03-25 by @mwiebe, assigned to unknown._\n\nFor #2271, support was added for the format() function in numpy scalars. It would be useful for zero-dimensional arrays to support this as well.'"
2375,7731365,numpy-gitbot,numpy-gitbot,2012-10-19 22:24:33,2012-10-19 22:24:35,2012-10-19 22:24:35,closed,,NumPy 1.7,4,11 - Bug;component: numpy.f2py;priority: normal,https://api.github.com/repos/numpy/numpy/issues/2375,b'KeyError in crackfortran.py (Trac #1782)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/1782 on 2011-03-24 by @fonnesbeck, assigned to @pearu._\n\nI get the following when I try to build extensions with f2py:\n\n\nTraceback (most recent call last):\n  File ""setupegg.py"", line 7, in <module>\n    execfile(\'setup.py\')\n  File ""setup.py"", line 131, in <module>\n    **(config_dict))\n  File ""/Library/Python/2.6/site-packages/numpy-2.0.0.dev_2e96d91_20110324-py2.6-macosx-10.6-universal.egg/numpy/distutils/core.py"", line 186, in setup\n    return old_setup(**new_attr)\n  File ""/System/Library/Frameworks/Python.framework/Versions/2.6/lib/python2.6/distutils/core.py"", line 152, in setup\n    dist.run_commands()\n  File ""/System/Library/Frameworks/Python.framework/Versions/2.6/lib/python2.6/distutils/dist.py"", line 975, in run_commands\n    self.run_command(cmd)\n  File ""/System/Library/Frameworks/Python.framework/Versions/2.6/lib/python2.6/distutils/dist.py"", line 995, in run_command\n    cmd_obj.run()\n  File ""/System/Library/Frameworks/Python.framework/Versions/2.6/Extras/lib/python/setuptools/command/develop.py"", line 27, in run\n    self.install_for_development()\n  File ""/Library/Python/2.6/site-packages/numpy-2.0.0.dev_2e96d91_20110324-py2.6-macosx-10.6-universal.egg/numpy/distutils/command/develop.py"", line 15, in install_for_development\n    old_develop.install_for_development(self)\n  File ""/System/Library/Frameworks/Python.framework/Versions/2.6/Extras/lib/python/setuptools/command/develop.py"", line 85, in install_for_development\n    self.run_command(\'egg_info\')\n  File ""/System/Library/Frameworks/Python.framework/Versions/2.6/lib/python2.6/distutils/cmd.py"", line 333, in run_command\n    self.distribution.run_command(command)\n  File ""/System/Library/Frameworks/Python.framework/Versions/2.6/lib/python2.6/distutils/dist.py"", line 995, in run_command\n    cmd_obj.run()\n  File ""/Library/Python/2.6/site-packages/numpy-2.0.0.dev_2e96d91_20110324-py2.6-macosx-10.6-universal.egg/numpy/distutils/command/egg_info.py"", line 8, in run\n    self.run_command(""build_src"")\n  File ""/System/Library/Frameworks/Python.framework/Versions/2.6/lib/python2.6/distutils/cmd.py"", line 333, in run_command\n    self.distribution.run_command(command)\n  File ""/System/Library/Frameworks/Python.framework/Versions/2.6/lib/python2.6/distutils/dist.py"", line 995, in run_command\n    cmd_obj.run()\n  File ""/Library/Python/2.6/site-packages/numpy-2.0.0.dev_2e96d91_20110324-py2.6-macosx-10.6-universal.egg/numpy/distutils/command/build_src.py"", line 152, in run\n    self.build_sources()\n  File ""/Library/Python/2.6/site-packages/numpy-2.0.0.dev_2e96d91_20110324-py2.6-macosx-10.6-universal.egg/numpy/distutils/command/build_src.py"", line 169, in build_sources\n    self.build_extension_sources(ext)\n  File ""/Library/Python/2.6/site-packages/numpy-2.0.0.dev_2e96d91_20110324-py2.6-macosx-10.6-universal.egg/numpy/distutils/command/build_src.py"", line 334, in build_extension_sources\n    sources = self.f2py_sources(sources, ext)\n  File ""/Library/Python/2.6/site-packages/numpy-2.0.0.dev_2e96d91_20110324-py2.6-macosx-10.6-universal.egg/numpy/distutils/command/build_src.py"", line 593, in f2py_sources\n    [\'-m\',ext_name]+f_sources)\n  File ""/Library/Python/2.6/site-packages/numpy-2.0.0.dev_2e96d91_20110324-py2.6-macosx-10.6-universal.egg/numpy/f2py/f2py2e.py"", line 359, in run_main\n    postlist=callcrackfortran(files,options)\n  File ""/Library/Python/2.6/site-packages/numpy-2.0.0.dev_2e96d91_20110324-py2.6-macosx-10.6-universal.egg/numpy/f2py/f2py2e.py"", line 281, in callcrackfortran\n    postlist=crackfortran.crackfortran(files)\n  File ""/Library/Python/2.6/site-packages/numpy-2.0.0.dev_2e96d91_20110324-py2.6-macosx-10.6-universal.egg/numpy/f2py/crackfortran.py"", line 2721, in crackfortran\n    postlist=postcrack(grouplist[0])\n  File ""/Library/Python/2.6/site-packages/numpy-2.0.0.dev_2e96d91_20110324-py2.6-macosx-10.6-universal.egg/numpy/f2py/crackfortran.py"", line 1554, in postcrack\n    g=postcrack(g,tab=tab+\'\\t\')\n  File ""/Library/Python/2.6/site-packages/numpy-2.0.0.dev_2e96d91_20110324-py2.6-macosx-10.6-universal.egg/numpy/f2py/crackfortran.py"", line 1573, in postcrack\n    block[\'body\']=analyzebody(block,args,tab=tab)\n  File ""/Library/Python/2.6/site-packages/numpy-2.0.0.dev_2e96d91_20110324-py2.6-macosx-10.6-universal.egg/numpy/f2py/crackfortran.py"", line 1722, in analyzebody\n    b=postcrack(b,as_,tab=tab+\'\\t\')\n  File ""/Library/Python/2.6/site-packages/numpy-2.0.0.dev_2e96d91_20110324-py2.6-macosx-10.6-universal.egg/numpy/f2py/crackfortran.py"", line 1573, in postcrack\n    block[\'body\']=analyzebody(block,args,tab=tab)\n  File ""/Library/Python/2.6/site-packages/numpy-2.0.0.dev_2e96d91_20110324-py2.6-macosx-10.6-universal.egg/numpy/f2py/crackfortran.py"", line 1719, in analyzebody\n    b[\'saved_interface\'] = crack2fortrangen(b, \'\\n\'+\' \'*6, as_interface=True)\n  File ""/Library/Python/2.6/site-packages/numpy-2.0.0.dev_2e96d91_20110324-py2.6-macosx-10.6-universal.egg/numpy/f2py/crackfortran.py"", line 2511, in crack2fortrangen\n    al = [a for a in block[\'args\'] if not isintent_callback(vars[a])]\nKeyError: \'n\'\n'"
2374,7731364,numpy-gitbot,charris,2012-10-19 22:24:31,2014-02-19 19:19:03,2014-02-19 19:19:03,closed,,,3,11 - Bug;component: numpy.distutils;priority: lowest,https://api.github.com/repos/numpy/numpy/issues/2374,b'long double representation not recognized (Trac #1781)',"b""_Original ticket http://projects.scipy.org/numpy/ticket/1781 on 2011-03-24 by trac user hoytak, assigned to @cournape._\n\nIn attempting to install numpy from source (commit e6f35b), it seems that whatever long double representation my computer has is not picked up by long_double_representation() in core/setup_common.py.  I attached a pickle file of the lines variable that gets scanned to detect it.\n\nMy machine is an intel i7-2600 running ubuntu 10.10.  The compiler I'm using is intel (icc 12.3), which is also what python was compiled with.  I'm using python version 2.7.1.  \n\nI'd be happy to give any more information about my system that's needed. \n"""
2373,7731362,numpy-gitbot,numpy-gitbot,2012-10-19 22:24:29,2012-10-19 22:24:30,2012-10-19 22:24:30,closed,,1.6.0,2,11 - Bug;component: numpy.core;priority: normal,https://api.github.com/repos/numpy/numpy/issues/2373,b'nditer broadcasting test failure under python 2.4 (Trac #1780)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/1780 on 2011-03-24 by @rgommers, assigned to @mwiebe._\n\nReported on OS X and Linux against 1.6.0b1.\n\nFAIL: test_iterator.test_iter_broadcasting_errors\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File ""/sw/lib/python2.4/site-packages/nose/case.py"", line 187, in\nrunTest\n    self.test(*self.arg)\n  File ""/sw/lib/python2.4/site-packages/numpy/core/tests/\ntest_iterator.py"", line 639, in test_iter_broadcasting_errors\n    \'Message ""%s"" doesn\\\'t contain operand shape (2,3)\' % msg)\n  File ""/sw/lib/python2.4/site-packages/numpy/testing/utils.py"", line\n34, in assert_\n    raise AssertionError(msg)\nAssertionError: Message ""non-broadcastable output operand with shape\n(%zd,%zd) doesn\'t match the broadcast shape (%zd,%zd,%zd)"" doesn\'t\ncontain operand shape (2,3)'"
2371,7731358,numpy-gitbot,numpy-gitbot,2012-10-19 22:24:22,2012-10-19 22:24:23,2012-10-19 22:24:23,closed,,,1,11 - Bug;component: Other;priority: normal,https://api.github.com/repos/numpy/numpy/issues/2371,"b""Object arrays of complex arrays can't be multiplied by numpy floats (Trac #1778)""","b'_Original ticket http://projects.scipy.org/numpy/ticket/1778 on 2011-03-22 by @inducer, assigned to unknown._\n\n\n\n    >>> import numpy as np\n    >>> z = np.array([1j])\n    >>> zz = np.zeros((2,), dtype=object)\n    >>> zz.fill(z)\n    >>> zz\n    array([[ 0.+1.j], [ 0.+1.j]], dtype=object)\n    >>> zz * np.float64(5)\n    Traceback (most recent call last):\n      File ""<stdin>"", line 1, in <module>\n    TypeError: unsupported operand type(s) for *: \'numpy.ndarray\' and \'numpy.float64\'\n    >>> zz * 5.\n    array([[ 0.+5.j], [ 0.+5.j]], dtype=object)\n    >>> \n\n\n\nIn my humble estimation, that TypeError shouldn\'t be happening.'"
2370,7731357,numpy-gitbot,numpy-gitbot,2012-10-19 22:24:20,2012-10-19 22:24:21,2012-10-19 22:24:21,closed,,1.6.0,4,11 - Bug;component: Other;priority: normal,https://api.github.com/repos/numpy/numpy/issues/2370,b'fh is not defined in npyio.py fromregex (Trac #1777)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/1777 on 2011-03-22 by trac user citizenwad, assigned to unknown._\n\nNameError: global name \'fh\' is not defined\nFile ""/Users/williamdawson/Programs/fat_wip.py"", line 263, in <module>\n header_gal = readheader(gal_cat)\nFile ""/Users/williamdawson/Programs/tools.py"", line 96, in readheader\n [(\'column\',numpy.int16),(\'name\',\'S10\')])\nFile ""/Library/Frameworks/EPD64.framework/Versions/7.0/lib/python2.7/site-packages/numpy/lib/npyio.py"", line 972, in fromregex\n\nNote that this code works perfectly fine with the python 2.6 EPD release.\n\nThe readheader program just uses \nheader = numpy.fromregex(catalog,r""ttype([0-9]+)(?:\\s)?=(?:\\s)?(\\w+)"",\n                                 [(\'column\',numpy.int16),(\'name\',\'S10\')])\n\nwhere catalog = [string], Name (perhaps including path) of the catalog\n        that contains all of the data (e.g. x,y,e1,e2,...). Must include\n        ttype header designations for the columns e.g.:\n        #ttype0 = objid\n        #ttype1 = x'"
2369,7731356,numpy-gitbot,numpy-gitbot,2012-10-19 22:24:17,2012-10-19 22:24:19,2012-10-19 22:24:19,closed,,NumPy 1.7,4,11 - Bug;component: numpy.core;priority: normal,https://api.github.com/repos/numpy/numpy/issues/2369,b'Complex divide by zero returns NAN (Trac #1776)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/1776 on 2011-03-18 by trac user ksmith13, assigned to unknown._\n\nDividing a complex numpy array by another with zero values returns nan + nani  instead of inf + infi \n\nEX: np.array([1+4i, 2+3i]) / np.array([0.0, 0.0])'"
2368,7731355,numpy-gitbot,jaimefrio,2012-10-19 22:24:15,2015-05-03 16:21:06,2015-05-03 16:21:06,closed,,,5,11 - Bug;component: numpy.core;priority: normal,https://api.github.com/repos/numpy/numpy/issues/2368,b'frompyfunc function segfault (Trac #1775)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/1775 on 2011-03-18 by trac user borisaqua, assigned to unknown._\n\nfrom numpy import *\nfv = vectorize(lambda a: tuple([a]*50))\nfv([2,3])\n\nProgram received signal SIGSEGV, Segmentation fault.\n0x00007ffff6252acf in ?? () from /usr/lib/pymodules/python2.6/numpy/core/umath.so\n(gdb) bt\n#0  0x00007ffff6252acf in ?? () from /usr/lib/pymodules/python2.6/numpy/core/umath.so\n#1  0x00007ffff6254734 in ?? () from /usr/lib/pymodules/python2.6/numpy/core/umath.so\n#2  0x00007ffff6255928 in ?? () from /usr/lib/pymodules/python2.6/numpy/core/umath.so\n#3  0x0000000000000000 in ?? ()\n(gdb) \n'"
2366,7731353,numpy-gitbot,numpy-gitbot,2012-10-19 22:24:11,2012-10-19 22:24:12,2012-10-19 22:24:12,closed,,1.6.0,2,11 - Bug;component: numpy.core;priority: low,https://api.github.com/repos/numpy/numpy/issues/2366,b'corrcoef warnings (Trac #1773)',"b""_Original ticket http://projects.scipy.org/numpy/ticket/1773 on 2011-03-16 by trac user senyai, assigned to unknown._\n\nHi. I'm pretty sure that corrcoef should not give any warnings with empty arrays:\n>>> numpy.corrcoef([])\nWarning: invalid value encountered in divide\n1\n>>> numpy.corrcoef([],[])\nWarning: invalid value encountered in divide\nWarning: invalid value encountered in divide\narray([[ nan,  nan],\n       [ nan,  nan]])"""
2365,7731351,numpy-gitbot,numpy-gitbot,2012-10-19 22:24:09,2012-10-19 22:24:10,2012-10-19 22:24:10,closed,,NumPy 1.7,4,11 - Bug;component: Documentation;priority: normal,https://api.github.com/repos/numpy/numpy/issues/2365,b'autosummary output for classes broken (Trac #1772)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/1772 on 2011-03-15 by @rgommers, assigned to @pv._\n\nThe methods and attributes sections are wrong, because sphinx tries to import numpy.methodname instead of numpy.classname.methodname.  See numpy.chararray for example.\n\nThis is probably a Sphinx bug (in autosummary/generate.py), but currently we duplicate/extend the autosummary class template in doc/source/reference/_templates. That class template should probably be completely removed anyway, this is fixed in Sphinx. I tried removing it, and the generated pdf got 20 pages longer while the number of warnings went from 1600 down to 800.\n\n'"
2363,7731347,numpy-gitbot,charris,2012-10-19 22:24:04,2014-02-15 21:34:50,2014-02-15 21:34:50,closed,,,9,11 - Bug;component: Other;priority: normal,https://api.github.com/repos/numpy/numpy/issues/2363,b'Segfault with python 3.2 structured array non-existent field (Trac #1770)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/1770 on 2011-03-13 by @matthew-brett, assigned to unknown._\n\n\n\n    $ python3.2\n    Python 3.2 (r32:88452, Feb 20 2011, 11:12:31)\n    [GCC 4.2.1 (Apple Inc. build 5664)] on darwin\n    Type ""help"", ""copyright"", ""credits"" or ""license"" for more information.\n    >>> import numpy as np\n    >>> a = np.zeros((1,), dtype=[(\'f1\', \'f\')])\n    >>> a[\'f1\'] = 1\n    >>> a[\'f2\'] = 1\n    Segmentation fault\n\n\n\n\nAll tests pass with np.test()\n\nExpected behavior with same code on python2.6:\n\n\n\n\n    >>> a[\'f2\'] = 1\n    Traceback (most recent call last):\n     File ""<stdin>"", line 1, in <module>\n    ValueError: field named f2 not found.\n\n\n\nDiscussion on the mailing list with email of same title as this ticket.\n\nChristoph Gohlke suggested the following patch:\n\n\n\n    \n    diff --git a/numpy/core/src/multiarray/mapping.c b/numpy/core/src/multiarray/mapping.c\n    index 8db85bf..3a72811 100644\n    --- a/numpy/core/src/multiarray/mapping.c\n    +++ b/numpy/core/src/multiarray/mapping.c\n    @@ -812,10 +812,16 @@ array_ass_sub(PyArrayObject *self, PyObject *index, PyObject *op)\n                    }\n                }\n            }\n    -\n    +#if defined(NPY_PY3K)\n    +        PyErr_Format(PyExc_ValueError,\n    \n    +                     ""field named %S not found."",\n    +                     index);\n    +#else\n    \n            PyErr_Format(PyExc_ValueError,\n                         ""field named %s not found."",\n                         PyString_AsString(index));\n    +#endif\n    +\n            return -1;\n        }\n\n\n'"
2362,7731345,numpy-gitbot,numpy-gitbot,2012-10-19 22:24:02,2012-10-19 22:24:03,2012-10-19 22:24:03,closed,,1.6.0,2,11 - Bug;component: numpy.testing;priority: normal,https://api.github.com/repos/numpy/numpy/issues/2362,b'assert_almost_equal and assert_array_almost_equal raise ValueError (Trac #1769)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/1769 on 2011-03-11 by @kwgoodman, assigned to unknown._\n\nassert_almost_equal() and assert_array_almost_equal() raise a ValueError instead of AssertionError when the array contains np.inf:\n\n\n    >> a = np.array([[1., 2.], [3., 4.]])\n    >> b = a.copy()\n    >> np.testing.assert_almost_equal(a, b)\n    >> b[0,0] = np.inf\n    >> np.testing.assert_almost_equal(a, b)\n    <snip>\n    ValueError: \n    Arrays are not almost equal\n     x: array([[ 1.,  2.],\n           [ 3.,  4.]])\n     y: array([[ inf,   2.],\n           [  3.,   4.]])\n    >> np.testing.assert_array_almost_equal(a, b)\n    <snip>\n    ValueError: \n    Arrays are not almost equal\n     x: array([[ 1.,  2.],\n           [ 3.,  4.]])\n     y: array([[ inf,   2.],\n           [  3.,   4.]])\n\n'"
2361,7731343,numpy-gitbot,numpy-gitbot,2012-10-19 22:23:58,2012-10-19 22:24:01,2012-10-19 22:24:01,closed,,1.6.0,8,11 - Bug;component: numpy.random;priority: normal,https://api.github.com/repos/numpy/numpy/issues/2361,b'test_random.TestRandomDist - tests too aggressive? (Trac #1768)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/1768 on 2011-03-11 by @stsci-sienkiew, assigned to @rgommers._\n\nThese tests are failing on 32 bit Red Hat Enterprise 4 linux.  They are passing on 64 bit RHE4, 64 bit RHE 5, and 32 bit Mac Leopard.\n\nI have not looked at every single number in this result, but of those that I have, the printed representation of the number is identical.  I suspect the problem may be that 15 decimal places is too high a standard.  assert_array_almost_equal does not actually print all the digits it is comparing, so there is no way to know how far off the actual values are.\n\n\n\n\n    ======================================================================\n    FAIL: test_chisquare (test_random.TestRandomDist)\n    ----------------------------------------------------------------------\n    Traceback (most recent call last):\n      File ""/usr/stsci/pyssgdev/2.7/numpy/random/tests/test_random.py"", line 154, in test_chisquare\n        np.testing.assert_array_almost_equal(actual, desired, decimal=15)\n      File ""/usr/stsci/pyssgdev/2.7/numpy/testing/utils.py"", line 791, in assert_array_almost_equal\n        header=(\'Arrays are not almost equal to %d decimals\' % decimal))\n      File ""/usr/stsci/pyssgdev/2.7/numpy/testing/utils.py"", line 627, in assert_array_compare\n        raise AssertionError(msg)\n    AssertionError: \n    Arrays are not almost equal to 15 decimals\n    \n    (mismatch 50.0%)\n     x: array([[ 63.87858176,  68.68407749],\n           [ 65.77116117,  47.09686762],\n           [ 72.38284032,  74.18408615]])\n     y: array([[ 63.87858176,  68.68407749],\n           [ 65.77116117,  47.09686762],\n           [ 72.38284032,  74.18408615]])\n    \n    ======================================================================\n    FAIL: test_gamma (test_random.TestRandomDist)\n    ----------------------------------------------------------------------\n    Traceback (most recent call last):\n      File ""/usr/stsci/pyssgdev/2.7/numpy/random/tests/test_random.py"", line 190, in test_gamma\n        np.testing.assert_array_almost_equal(actual, desired, decimal=15)\n      File ""/usr/stsci/pyssgdev/2.7/numpy/testing/utils.py"", line 791, in assert_array_almost_equal\n        header=(\'Arrays are not almost equal to %d decimals\' % decimal))\n      File ""/usr/stsci/pyssgdev/2.7/numpy/testing/utils.py"", line 627, in assert_array_compare\n        raise AssertionError(msg)\n    AssertionError: \n    Arrays are not almost equal to 15 decimals\n    \n    (mismatch 16.6666666667%)\n     x: array([[ 24.60509189,  28.54993563],\n           [ 26.1347611 ,  12.56988483],\n           [ 31.71863276,  33.30143303]])\n     y: array([[ 24.60509189,  28.54993563],\n           [ 26.1347611 ,  12.56988483],\n           [ 31.71863276,  33.30143303]])\n    \n    ======================================================================\n    FAIL: test_lognormal (test_random.TestRandomDist)\n    ----------------------------------------------------------------------\n    Traceback (most recent call last):\n      File ""/usr/stsci/pyssgdev/2.7/numpy/random/tests/test_random.py"", line 238, in test_lognormal\n        np.testing.assert_array_almost_equal(actual, desired, decimal=15)\n      File ""/usr/stsci/pyssgdev/2.7/numpy/testing/utils.py"", line 791, in assert_array_almost_equal\n        header=(\'Arrays are not almost equal to %d decimals\' % decimal))\n      File ""/usr/stsci/pyssgdev/2.7/numpy/testing/utils.py"", line 627, in assert_array_compare\n        raise AssertionError(msg)\n    AssertionError: \n    Arrays are not almost equal to 15 decimals\n    \n    (mismatch 66.6666666667%)\n     x: array([[ 16.50698632,  36.54846706],\n           [ 22.678866  ,   0.71617561],\n           [ 65.72798502,  86.84341601]])\n     y: array([[ 16.50698632,  36.54846706],\n           [ 22.678866  ,   0.71617561],\n           [ 65.72798502,  86.84341601]])\n    \n    ======================================================================\n    FAIL: test_noncentral_chisquare (test_random.TestRandomDist)\n    ----------------------------------------------------------------------\n    Traceback (most recent call last):\n      File ""/usr/stsci/pyssgdev/2.7/numpy/random/tests/test_random.py"", line 287, in test_noncentral_chisquare\n        np.testing.assert_array_almost_equal(actual, desired, decimal=15)\n      File ""/usr/stsci/pyssgdev/2.7/numpy/testing/utils.py"", line 791, in assert_array_almost_equal\n        header=(\'Arrays are not almost equal to %d decimals\' % decimal))\n      File ""/usr/stsci/pyssgdev/2.7/numpy/testing/utils.py"", line 627, in assert_array_compare\n        raise AssertionError(msg)\n    AssertionError: \n    Arrays are not almost equal to 15 decimals\n    \n    (mismatch 16.6666666667%)\n     x: array([[ 23.91905354,  13.35324693],\n           [ 31.22452661,  16.60047399],\n           [  5.03461598,  17.94973089]])\n     y: array([[ 23.91905354,  13.35324693],\n           [ 31.22452661,  16.60047399],\n           [  5.03461598,  17.94973089]])\n    \n    ======================================================================\n    FAIL: test_noncentral_f (test_random.TestRandomDist)\n    ----------------------------------------------------------------------\n    Traceback (most recent call last):\n      File ""/usr/stsci/pyssgdev/2.7/numpy/random/tests/test_random.py"", line 296, in test_noncentral_f\n        np.testing.assert_array_almost_equal(actual, desired, decimal=15)\n      File ""/usr/stsci/pyssgdev/2.7/numpy/testing/utils.py"", line 791, in assert_array_almost_equal\n        header=(\'Arrays are not almost equal to %d decimals\' % decimal))\n      File ""/usr/stsci/pyssgdev/2.7/numpy/testing/utils.py"", line 627, in assert_array_compare\n        raise AssertionError(msg)\n    AssertionError: \n    Arrays are not almost equal to 15 decimals\n    \n    (mismatch 16.6666666667%)\n     x: array([[ 1.405981  ,  0.34207973],\n           [ 3.57715069,  7.92632663],\n           [ 0.43741599,  1.17742088]])\n     y: array([[ 1.405981  ,  0.34207973],\n           [ 3.57715069,  7.92632663],\n           [ 0.43741599,  1.17742088]])\n    \n    ======================================================================\n    FAIL: test_rayleigh (test_random.TestRandomDist)\n    ----------------------------------------------------------------------\n    Traceback (most recent call last):\n      File ""/usr/stsci/pyssgdev/2.7/numpy/random/tests/test_random.py"", line 344, in test_rayleigh\n        np.testing.assert_array_almost_equal(actual, desired, decimal=15)\n      File ""/usr/stsci/pyssgdev/2.7/numpy/testing/utils.py"", line 791, in assert_array_almost_equal\n        header=(\'Arrays are not almost equal to %d decimals\' % decimal))\n      File ""/usr/stsci/pyssgdev/2.7/numpy/testing/utils.py"", line 627, in assert_array_compare\n        raise AssertionError(msg)\n    AssertionError: \n    Arrays are not almost equal to 15 decimals\n    \n    (mismatch 16.6666666667%)\n     x: array([[ 13.88824965,  13.38331834],\n           [ 20.95413364,  21.08285016],\n           [ 11.06066537,  17.35468506]])\n     y: array([[ 13.88824965,  13.38331834],\n           [ 20.95413364,  21.08285016],\n           [ 11.06066537,  17.35468506]])\n    \n    ======================================================================\n    FAIL: test_standard_gamma (test_random.TestRandomDist)\n    ----------------------------------------------------------------------\n    Traceback (most recent call last):\n      File ""/usr/stsci/pyssgdev/2.7/numpy/random/tests/test_random.py"", line 368, in test_standard_gamma\n        np.testing.assert_array_almost_equal(actual, desired, decimal=15)\n      File ""/usr/stsci/pyssgdev/2.7/numpy/testing/utils.py"", line 791, in assert_array_almost_equal\n        header=(\'Arrays are not almost equal to %d decimals\' % decimal))\n      File ""/usr/stsci/pyssgdev/2.7/numpy/testing/utils.py"", line 627, in assert_array_compare\n        raise AssertionError(msg)\n    AssertionError: \n    Arrays are not almost equal to 15 decimals\n    \n    (mismatch 66.6666666667%)\n     x: array([[ 5.50841531,  6.6295347 ],\n           [ 5.93988485,  2.31044849],\n           [ 7.54838614,  8.01275609]])\n     y: array([[ 5.50841531,  6.6295347 ],\n           [ 5.93988485,  2.31044849],\n           [ 7.54838614,  8.01275609]])\n    \n    ======================================================================\n    FAIL: test_triangular (test_random.TestRandomDist)\n    ----------------------------------------------------------------------\n    Traceback (most recent call last):\n      File ""/usr/stsci/pyssgdev/2.7/numpy/random/tests/test_random.py"", line 393, in test_triangular\n        np.testing.assert_array_almost_equal(actual, desired, decimal=15)\n      File ""/usr/stsci/pyssgdev/2.7/numpy/testing/utils.py"", line 791, in assert_array_almost_equal\n        header=(\'Arrays are not almost equal to %d decimals\' % decimal))\n      File ""/usr/stsci/pyssgdev/2.7/numpy/testing/utils.py"", line 627, in assert_array_compare\n        raise AssertionError(msg)\n    AssertionError: \n    Arrays are not almost equal to 15 decimals\n    \n    (mismatch 33.3333333333%)\n     x: array([[ 12.68117179,  12.41292061],\n           [ 16.20131377,  16.25692139],\n           [ 11.20400691,  14.49781448]])\n     y: array([[ 12.68117179,  12.41292061],\n           [ 16.20131377,  16.25692139],\n           [ 11.20400691,  14.49781448]])\n    \n    ======================================================================\n    FAIL: test_wald (test_random.TestRandomDist)\n    ----------------------------------------------------------------------\n    Traceback (most recent call last):\n      File ""/usr/stsci/pyssgdev/2.7/numpy/random/tests/test_random.py"", line 418, in test_wald\n        np.testing.assert_array_almost_equal(actual, desired, decimal=15)\n      File ""/usr/stsci/pyssgdev/2.7/numpy/testing/utils.py"", line 791, in assert_array_almost_equal\n        header=(\'Arrays are not almost equal to %d decimals\' % decimal))\n      File ""/usr/stsci/pyssgdev/2.7/numpy/testing/utils.py"", line 627, in assert_array_compare\n        raise AssertionError(msg)\n    AssertionError: \n    Arrays are not almost equal to 15 decimals\n    \n    (mismatch 16.6666666667%)\n     x: array([[ 3.82935266,  5.13125249],\n           [ 0.35045404,  1.50832397],\n           [ 0.2412432 ,  0.22031101]])\n     y: array([[ 3.82935266,  5.13125249],\n           [ 0.35045404,  1.50832397],\n           [ 0.2412432 ,  0.22031101]])\n    \n    ----------------------------------------------------------------------\n\n\n'"
2360,7731342,numpy-gitbot,numpy-gitbot,2012-10-19 22:23:54,2012-10-23 02:45:31,2012-10-19 22:23:57,closed,,1.6.0,8,11 - Bug;component: numpy.f2py;priority: low,https://api.github.com/repos/numpy/numpy/issues/2360,b'f2py assumed shape merge - test failure (Trac #1767)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/1767 on 2011-03-11 by @rgommers, assigned to @pearu._\n\nThe merge of the branch that closed #2129 and #2345 introduced a test failure:\n\n\n    ======================================================================\n    FAIL: test_kind.TestKind.test_all\n    ----------------------------------------------------------------------\n    Traceback (most recent call last):\n      File ""/Library/Frameworks/Python.framework/Versions/2.6/lib/python2.6/site-packages/nose-0.11.1-py2.6.egg/nose/case.py"", line 183, in runTest\n        self.test(*self.arg)\n      File ""/Users/rgommers/Code/numpy/numpy/f2py/tests/test_kind.py"", line 27, in test_all\n        assert selected_int_kind(i)==selectedintkind(i),`i, selected_int_kind(i), selectedintkind(i)`\n    AssertionError: (19, 16, -1)\n    \n    ----------------------------------------------------------------------\n    Ran 3279 tests in 60.489s\n\n\nThis fails with Python 2.6 on OS X but works with Python 3.2.\n\nAlso, some print statements have been left in the code:\n\n\n    ..............This module \'_test_ext_module_5403\' is auto-generated with f2py (version:2).\n    Functions:\n      res = sum(x)\n      res = fsum(x)\n      res = sum_with_use(x)\n    Fortran 90/95 modules:\n      precision --- ik,rk.\n    ..This module \'_test_ext_module_5405\' is auto-generated with f2py (version:2).\n    Functions:\n      res = selectedrealkind(p,r=0)\n      res = selectedintkind(p)\n\n\n'"
2359,7731341,numpy-gitbot,numpy-gitbot,2012-10-19 22:23:52,2012-10-19 22:23:53,2012-10-19 22:23:53,closed,,1.6.0,3,11 - Bug;component: numpy.core;priority: normal,https://api.github.com/repos/numpy/numpy/issues/2359,b'Nested recarray crashes numpy 1.5.x on Python 3.x (Trac #1766)',"b""_Original ticket http://projects.scipy.org/numpy/ticket/1766 on 2011-03-10 by @cgohlke, assigned to unknown._\n\nThis issue was reported at <http://mail.scipy.org/pipermail/numpy-discussion/2011-March/055269.html>.\n\nThe following code crashes with numpy 1.5.x on Windows using official or self compiled binaries for Python 3.x:\n\n\n\n    import numpy\n    numpy.recarray((1,), [('i', [('j', 'i4')], 2)]).data\n\n\n\nThe code works correctly with numpy 1.5.x on Python 2.x and also with numpy 1.6.0dev on Python 3.x. \n\nThe crash is during the 'data' attribute lookup. The 'i' attribute can be accessed without crash, e.g. the following works:\n\n\n\n    numpy.recarray((1,), [('i', [('j', 'i4')], 2)]).i\n    numpy.recarray((1,), [('i', [('j', 'i4')], 2)]).i.j\n\n\n\n"""
2357,7731338,numpy-gitbot,numpy-gitbot,2012-10-19 22:23:48,2012-10-19 22:23:48,2012-10-19 22:23:48,closed,,1.6.0,2,11 - Bug;component: numpy.core;priority: normal,https://api.github.com/repos/numpy/numpy/issues/2357,b'Error message prints dimensions in wrong order? (Trac #1762)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/1762 on 2011-03-10 by @charris, assigned to unknown._\n\n\n\n    ERROR: test_setitem (test_panel.TestWidePanel)\n    ----------------------------------------------------------------------\n    Traceback (most recent call last):\n      File ""/usr/lib64/python2.7/site-packages/pandas/core/tests/test_panel.py"", line 295, in test_setitem\n        self.panel[\'ItemE\'] = df\n      File ""/usr/lib64/python2.7/site-packages/pandas/core/panel.py"", line 330, in __setitem__\n        self.values[loc] = mat\n    ValueError: non-broadcastable output operand with shape (30,4) doesn\'t match the broadcast shape (4,30,1)\n    \n\n\n\nIt appears to me that (4,30,1) should be (1,30,4)'"
2356,7731337,numpy-gitbot,numpy-gitbot,2012-10-19 22:23:46,2012-10-19 22:23:46,2012-10-19 22:23:46,closed,,,2,11 - Bug;component: Other;priority: normal,https://api.github.com/repos/numpy/numpy/issues/2356,b'Inconsistency with type in scalar operations (Trac #1761)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/1761 on 2011-03-08 by @FrancescAlted, assigned to unknown._\n\nI\'m getting different behaviour with type comparison in scalar operations between 1.5.1 and 1.6.  Here it is code that shows the issue:\n\n\n\n    import numpy as np\n    \n    print ""numpy-->"", np.__version__\n    \n    r1 = np.array(8L)\n    print ""r1-->"", `r1`, r1.dtype\n    r1 = r1[()]\n    print ""r1(2)-->"", `r1`, r1.dtype\n    \n    f = long(3)\n    g = np.int16(2)\n    r2 = f+g   # assertion fails only with 1.6\n    #r2 = g+f  # assertion fails with 1.5.1 too\n    print ""r2-->"", `r2`, r2.dtype\n    \n    print ""types-->"", type(r1), type(r2)\n    assert type(r1) is type(r2)\n\n\n\nOutput when using 1.5.1:\n\n\n\n    numpy--> 1.5.1\n    r1--> array(8L) int64\n    r1(2)--> 8 int64\n    r2--> 5 int64\n    types--> <type \'numpy.int64\'> <type \'numpy.int64\'>\n\n\n\nWhen using 1.6 (master):\n\n\n\n    numpy--> 1.6.0.dev-c081ad7\n    r1--> array(8L) int64\n    r1(2)--> 8 int64\n    r2--> 5 int64\n    types--> <type \'numpy.int64\'> <type \'numpy.int64\'>\n    Traceback (most recent call last):\n      File ""/tmp/scalar-types.py"", line 17, in <module>\n        assert type(r1) is type(r2)\n    AssertionError\n\n\n\nInterestingly, if we change the order of the operation:\n\n\n\n    r2 = g+f\n\n\n\nthe resulting type also differs with 1.5.1:\n\n\n\n    numpy--> 1.5.1\n    r1--> array(8L) int64\n    r1(2)--> 8 int64\n    r2--> 5 int64\n    types--> <type \'numpy.int64\'> <type \'numpy.int64\'>\n    Traceback (most recent call last):\n      File ""/tmp/scalar-types.py"", line 17, in <module>\n        assert type(r1) is type(r2)\n    AssertionError\n\n'"
2355,7731336,numpy-gitbot,numpy-gitbot,2012-10-19 22:23:44,2012-10-19 22:23:44,2012-10-19 22:23:44,closed,,1.6.0,2,11 - Bug;component: Other;priority: normal,https://api.github.com/repos/numpy/numpy/issues/2355,b'Copying strided slices does not work on structured arrays with MD  fields (Trac #1760)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/1760 on 2011-03-07 by @FrancescAlted, assigned to unknown._\n\nThe next code snippet shows the problem:\n\n\n\n    import numpy as np\n    \n    print ""numpy version:"", np.__version__\n    \n    r=np.fromstring(\'abcd\'*16*5, dtype=\'i4,(2,3)u2\')\n    #start, stop, step = 0, 5, 1    # step == 1 works\n    start, stop, step = 0, 5, 2\n    r2 = r[start:stop:step]\n    print ""r -->"", r[start][\'f1\']\n    print ""r2 -->"", r2[0][\'f1\']\n    assert np.all(r[start][\'f1\'] == r2[0][\'f1\'])\n\n\n\nUsing numpy 1.5.x:\n\n\n\n    numpy version: 1.5.0.dev\n    r --> [[25185 25699 25185]\n     [25699 25185 25699]]\n    r2 --> [[25185 25699 25185]\n     [25699 25185 25699]]\n\n\n\nUsing current 1.6 in git master:\n\n\n\n    numpy version: 1.6.0.dev-c081ad7\n    r --> [[25185 25699 25185]\n     [25699 25185 25699]]\n    r2 --> [[25185 25185 25185]\n     [25699 25699 25699]]\n    Traceback (most recent call last):\n      File ""/tmp/copy-recarr.py"", line 12, in <module>\n        assert np.all(r[start][\'f1\'] == r2[0][\'f1\'])\n    AssertionError\n\n\n'"
2354,7731335,numpy-gitbot,charris,2012-10-19 22:23:42,2014-03-01 16:14:17,2014-03-01 14:03:54,closed,,,2,11 - Bug;component: Documentation;Easy Fix;priority: normal,https://api.github.com/repos/numpy/numpy/issues/2354,b'add docs for ldexp and frexp (Trac #1759)',"b""_Original ticket http://projects.scipy.org/numpy/ticket/1759 on 2011-03-07 by @rgommers, assigned to @pv._\n\nThe ldexp and frexp docstrings are out of date. It's not clear to me if entries have to be added to core/code_generators/generate_umath.py, or it has to be done in the C source directly."""
2352,7731331,numpy-gitbot,numpy-gitbot,2012-10-19 22:23:36,2012-10-19 22:23:39,2012-10-19 22:23:39,closed,,1.6.0,8,11 - Bug;component: Other;priority: high,https://api.github.com/repos/numpy/numpy/issues/2352,b'Segfault in pandas. (Trac #1757)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/1757 on 2011-03-06 by @charris, assigned to unknown._\n\nThe following code segfaults.\n\n\n\n\n    >>> import pandas\n    >>> import pandas.util.testing as common\n    >>> df = common.makeTimeDataFrame()\n    >>> objs = [df, df]\n    >>> s = pandas.Series(objs, index=[0, 1])\n\n\n\n '"
2351,7731329,numpy-gitbot,numpy-gitbot,2012-10-19 22:23:32,2012-10-19 22:23:35,2012-10-19 22:23:35,closed,,1.6.0,11,11 - Bug;component: Other;priority: normal,https://api.github.com/repos/numpy/numpy/issues/2351,b'Segfault when recasting string arrays (Trac #1756)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/1756 on 2011-03-05 by @FrancescAlted, assigned to unknown._\n\nThe next makes the segfault to happen:\n\n\n\n    import numpy as np\n    \n    arr = np.array([\'1\', \'12\', \'123\', \'1234\', \'12345\'])\n    nparr = np.array(arr, dtype=""|S3"")\n\n\n\nValgrind shows this:\n\n\n\n    ==27003== Invalid write of size 1\n    ==27003==    at 0x4C2860D: memcpy (mc_replace_strmem.c:402)\n    ==27003==    by 0x62746A7: _strided_to_contig (lowlevel_strided_loops.c.src:311)\n    ==27003==    by 0x62B8D09: PyArray_CopyInto (ctors.c:2645)\n    ==27003==  Address 0x6e58522 is 3 bytes after a block of size 15 alloc\'d\n    ==27003==    at 0x4C279AE: malloc (vg_replace_malloc.c:207)\n    ==27003==    by 0x62ABA66: PyArray_NewFromDescr (ctors.c:1013)\n    ==27003==    by 0x61E84FF: ???\n    ==27003==    by 0x93B18CF: ???\n    ==27003==    by 0x61E84AF: ???\n    ==27003==    by 0x6206FCF: ???\n\n\n\nThis happens with current master in numpy-1.6.0.dev_5aa65d9'"
2345,7731322,numpy-gitbot,numpy-gitbot,2012-10-19 22:23:18,2012-10-19 22:23:19,2012-10-19 22:23:19,closed,,1.6.0,4,11 - Bug;component: numpy.f2py;priority: normal,https://api.github.com/repos/numpy/numpy/issues/2345,b'f2py breaks complex kind statements (Trac #1750)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/1750 on 2011-02-26 by trac user lorenz, assigned to @pearu._\n\nf2py apparently tries to translate kind statements it found earlier in the file, this seems to fail if they are not just a simple number. Consider the following example:\n\n\n    module precision\n      integer, parameter :: rk = selected_real_kind(8)\n    end module\n    \n    subroutine test(x, n, res)\n      use precision\n    \n      implicit none\n    \n      real(kind=rk), intent(in) :: x(n)\n      integer :: n\n      real(kind=rk), intent(out) :: res\n    \n      integer :: i\n    \n      print *, ""x ="", x\n    \n      res = 0.0\n      do i = 1, size(x)\n        res = x(i)\n      enddo\n    \n    end subroutine\n\n\n\nCompiling this with f2py:\n\n\n    user@host:~/f2py_kind_test> f2py --build-dir build -c --fcompiler=gnu95 -m test test.f90\n    running build\n    running config_cc\n    unifing config_cc, config, build_clib, build_ext, build commands --compiler options\n    running config_fc\n    unifing config_fc, config, build_clib, build_ext, build commands --fcompiler options\n    running build_src\n    build_src\n    building extension ""test"" sources\n    f2py options: []\n    f2py:> build/src.linux-i686-2.6/testmodule.c\n    Reading fortran codes...\n            Reading file \'test.f90\' (format:free)\n    Post-processing...\n            Block: test\n                            Block: precision\n    In: :test:test.f90:precision\n    get_parameters: got ""name \'selected\' is not defined"" on \'selected\'\n                            Block: test\n    In: :test:test.f90:test\n    get_parameters: got ""name \'selected\' is not defined"" on \'selected\'\n    Post-processing (stage 2)...\n            Block: test\n                    Block: unknown_interface\n                            Block: precision\n                            Block: test\n    Building modules...\n            Building module ""test""...\n                    Constructing wrapper function ""test""...\n    getctype: ""real(kind=selected)"" not supported (use .f2py_f2cmap).\n    getctype: ""real(kind=selected)"" not supported (use .f2py_f2cmap).\n    getctype: ""real(kind=selected)"" not supported (use .f2py_f2cmap).\n    getctype: ""real(kind=selected)"" not supported (use .f2py_f2cmap).\n    getctype: ""real(kind=selected)"" not supported (use .f2py_f2cmap).\n    getctype: ""real(kind=selected)"" not supported (use .f2py_f2cmap).\n                      res = test(x,[n])\n                    Constructing F90 module support for ""precision""...\n                      Variables: rk\n            Wrote C/API module ""test"" to file ""build/src.linux-i686-2.6/testmodule.c""\n            Fortran 90 wrappers are saved to ""build/src.linux-i686-2.6/test-f2pywrappers2.f90""\n      adding \'build/src.linux-i686-2.6/fortranobject.c\' to sources.\n      adding \'build/src.linux-i686-2.6\' to include_dirs.\n      adding \'build/src.linux-i686-2.6/test-f2pywrappers2.f90\' to sources.\n    build_src: building npy-pkg config files\n    running build_ext\n    customize UnixCCompiler\n    customize UnixCCompiler using build_ext\n    customize Gnu95FCompiler\n    Found /usr/bin/gfortran\n    customize Gnu95FCompiler using build_ext\n    building \'test\' extension\n    compiling C sources\n    C compiler: gcc -pthread -fno-strict-aliasing -DNDEBUG -g -fwrapv -O3 -Wall -Wstrict-prototypes -fPIC\n    \n    compile options: \'-Ibuild/src.linux-i686-2.6 -I/afs/mpa/home/lorenz/sys/lib/python2.6/site-packages/numpy/core/include -I/usr/common/pdsoft/appl/pyapps/include/python2.6 -c\'\n    gcc: build/src.linux-i686-2.6/testmodule.c\n    compiling Fortran 90 module sources\n    Fortran f77 compiler: /afs/mpa/@sys/system/MPA-6.00/usr/bin/gfortran -Wall -ffixed-form -fno-second-underscore -fPIC -O3 -funroll-loops\n    Fortran f90 compiler: /afs/mpa/@sys/system/MPA-6.00/usr/bin/gfortran -Wall -fno-second-underscore -fPIC -O3 -funroll-loops\n    Fortran fix compiler: /afs/mpa/@sys/system/MPA-6.00/usr/bin/gfortran -Wall -ffixed-form -fno-second-underscore -Wall -fno-second-underscore -fPIC -O3 -funroll-loops\n    compile options: \'-Ibuild/src.linux-i686-2.6 -I/afs/mpa/home/lorenz/sys/lib/python2.6/site-packages/numpy/core/include -I/usr/common/pdsoft/appl/pyapps/include/python2.6 -c\'\n    extra options: \'-Jbuild/ -Ibuild/\'\n    gfortran:f90: test.f90\n    compiling Fortran sources\n    Fortran f77 compiler: /afs/mpa/@sys/system/MPA-6.00/usr/bin/gfortran -Wall -ffixed-form -fno-second-underscore -fPIC -O3 -funroll-loops\n    Fortran f90 compiler: /afs/mpa/@sys/system/MPA-6.00/usr/bin/gfortran -Wall -fno-second-underscore -fPIC -O3 -funroll-loops\n    Fortran fix compiler: /afs/mpa/@sys/system/MPA-6.00/usr/bin/gfortran -Wall -ffixed-form -fno-second-underscore -Wall -fno-second-underscore -fPIC -O3 -funroll-loops\n    compile options: \'-Ibuild/src.linux-i686-2.6 -I/afs/mpa/home/lorenz/sys/lib/python2.6/site-packages/numpy/core/include -I/usr/common/pdsoft/appl/pyapps/include/python2.6 -c\'\n    extra options: \'-Jbuild/ -Ibuild/\'\n    gfortran:f90: build/src.linux-i686-2.6/test-f2pywrappers2.f90\n    /afs/mpa/@sys/system/MPA-6.00/usr/bin/gfortran -Wall -Wall -shared build/build/src.linux-i686-2.6/testmodule.o build/build/src.linux-i686-2.6/fortranobject.o build/test.o build/build/src.linux-i686-2.6/test-f2pywrappers2.o -lgfortran -o ./test.so\n    running scons\n\n\n\nSome parsing obviously fails, looking at the message\n\n\n    getctype: ""real(kind=selected)"" not supported (use .f2py_f2cmap).\n\n\n\nRunning the example produces wrong results, as apparently the arguments are interpreted as floats:\n\n\n    user@host:~/f2py_kind_test> python -c ""import test; print test.test([1.0,2.0,3.0])""\n     x =   2.0000004731118679       4.27053725193275668E-312   0.0000000000000000     \n    1.0\n\n\n\nChanging ""selected_real_kind(8)"" to ""8"" produces the expected result:\n\n\n    user@host:~/f2py_kind_test> python -c ""import test; print test.test([1.0,2.0,3.0])""\n     x =   1.0000000000000000        2.0000000000000000        3.0000000000000000     \n    6.0\n\n'"
2344,7731321,numpy-gitbot,numpy-gitbot,2012-10-19 22:23:12,2012-10-19 22:23:16,2012-10-19 22:23:16,closed,,1.6.1,12,11 - Bug;component: numpy.distutils;priority: normal,https://api.github.com/repos/numpy/numpy/issues/2344,b'SOABI-problem with external libraries and python3.2 (Trac #1749)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/1749 on 2011-02-24 by trac user don.fanucci, assigned to @cournape._\n\nHi!\nIt seems that from python 3.2 and on, distutils.sysconfig.get_config_vars(\'SO\') behaves differently than for python < 3.2.\nBefore PEP3149 it returned \'.so\' (or, I guess, \'.dll\' under windows), while with version 3.2 of python, you\'ll get \'.cpython-32m.so\'.\n\nSince numpy is using get_config_vars(\'SO\') to determine library filename extensions, numpy with python3.2 fails to properly find external libraries (i.e. liblapack.so, or libmkl_blabla.so, etc).\n\nAs a workaround for this problem, I made some changes to the numpy distutils stuff (see attached patch). The patch seems to work* both on 1.5.1 and latest git HEAD.\n\n*) at least in a ""works for me"" kind of way. :)'"
2343,7731319,numpy-gitbot,numpy-gitbot,2012-10-19 22:23:10,2012-10-19 22:23:11,2012-10-19 22:23:11,closed,,1.6.0,2,11 - Bug;component: numpy.core;priority: highest,https://api.github.com/repos/numpy/numpy/issues/2343,"b""astype('str') behavior is different in 1.6.0 vs 1.5.1 (Trac #1748)""","b""_Original ticket http://projects.scipy.org/numpy/ticket/1748 on 2011-02-21 by @jseabold, assigned to unknown._\n\n\n\n    >>> import numpy as np\n    >>> np.__version__\n    '1.6.0.dev-c50af53'\n    >>> tmp_arr = np.array([['black'],['white'],['other']])\n    >>> tmp_arr.astype('str')\n    array([['b'],\n          ['w'],\n          ['o']],\n         dtype='|S1')\n\n\n\nThe old behavior\n\n\n\n    >>> import numpy as np\n    >>> np.__version__\n    '1.5.1'\n    >>> tmp_arr = np.array([['black'],['white'],['other']])\n    >>> tmp_arr.astype('str')\n    array([['black'],\n          ['white'],\n          ['other']],\n         dtype='|S5')\n\n"""
2342,7731317,numpy-gitbot,numpy-gitbot,2012-10-19 22:23:07,2012-10-19 22:23:09,2012-10-19 22:23:09,closed,,NumPy 1.7,3,11 - Bug;component: numpy.core;priority: normal,https://api.github.com/repos/numpy/numpy/issues/2342,b'numpy.median() and numpy.mean() shoud be more predictable (Trac #1747)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/1747 on 2011-02-19 by trac user eriko, assigned to unknown._\n\nnumpy.mean() and numpy.median() behave differnetly when presented one dimensional input and a given ""axis"" argument. While mean() returns a result, median() raises an IndexError. I think, both ways are fine as long as both functions behave simmilar. \n\nExample code:\n\n\n\n    >>> import numpy\n    >>> numpy.mean(1, axis=0)\n    1.0\n    >>> numpy.median(1, axis=0)\n    Traceback (most recent call last):\n      File ""<stdin>"", line 1, in <module>\n      File ""/Library/Frameworks/Python.framework/Versions/6.2/lib/python2.6/site-packages/numpy/lib/function_base.py"", line 2805, in median\n        index = int(sorted.shape[axis]/2)\n    IndexError: tuple index out of range\n    >>> \n    \n\n\n'"
2341,7731315,numpy-gitbot,numpy-gitbot,2012-10-19 22:23:05,2012-10-19 22:23:06,2012-10-19 22:23:06,closed,,1.6.0,2,11 - Bug;component: Other;priority: normal,https://api.github.com/repos/numpy/numpy/issues/2341,"b'array(), asarray() fail (Trac #1746)'","b""_Original ticket http://projects.scipy.org/numpy/ticket/1746 on 2011-02-18 by trac user pa.basso, assigned to unknown._\n\nI can't make a numpy array with this list:\n\nmtx=[[ 0.,  0.,  0.], [ 0., -1., -2.], [ 1.,  1.,  1.]] \n\nA=np.array(mtx)  # doesn't work\nA=np.asarray(mtx)  # doesn't work\n\nboth return me the following warnings:\n\nWarning: invalid value encountered in double_scalars\nWarning: invalid value encountered in double_scalars\nWarning: invalid value encountered in double_scalars\nWarning: divide by zero encountered in double_scalars\nWarning: invalid value encountered in double_scalars\nWarning: invalid value encountered in double_scalars\nWarning: invalid value encountered in double_scalars\nWarning: invalid value encountered in double_scalars\n\nAnd at the end... \nA = \n[[ nan  nan  nan]\n [ nan  nan  nan]\n [ nan  nan  nan]]\n\nIf I try instead:\n\nA=np.asmatrix(mtx) # this works!!"""
2340,7731312,numpy-gitbot,charris,2012-10-19 22:23:02,2015-04-03 16:54:35,2015-04-03 16:54:35,closed,,,6,11 - Bug;component: numpy.core;Easy Fix;priority: normal,https://api.github.com/repos/numpy/numpy/issues/2340,b'Documentation of ndarray.clip is misleading (Trac #1745)',"b""_Original ticket http://projects.scipy.org/numpy/ticket/1745 on 2011-02-17 by @fengy-research, assigned to unknown._\n\nclip doesn't accept a_min and a_max as keyword arguments.\n\n"""
2337,7731307,numpy-gitbot,numpy-gitbot,2012-10-19 22:22:56,2012-10-19 22:22:57,2012-10-19 22:22:57,closed,,NumPy 2.0,4,11 - Bug;component: numpy.linalg;priority: normal,https://api.github.com/repos/numpy/numpy/issues/2337,b'cholesky error ? (Trac #1742)',"b""_Original ticket http://projects.scipy.org/numpy/ticket/1742 on 2011-02-11 by trac user pcrs, assigned to @pv._\n\n\n\n    from numpy import *\n    from numpy.linalg import cholesky\n    a=array([[1.0, 0.0],[0.0, 1.0]])\n    k=0.3;\n    b=dot(a,array([[cos(k), sin(k)],[-sin(k), cos(k)]]))\n    cholesky(b)\n    array([[ 0.97741316,  0.        ],\n           [-0.30234932,  0.92947371]])\n    dot(c,c.transpose())\n    array([[ 0.95533649, -0.29552021],\n           [-0.29552021,  0.95533649]])\n    b\n    array([[ 0.95533649,  0.29552021],\n           [-0.29552021,  0.95533649]])\n\n\nIsn't dot(c,c.transpose()) not supposed to be equal to b? the sign of b[0,1] is sign inverted"""
2336,7731306,numpy-gitbot,numpy-gitbot,2012-10-19 22:22:53,2012-10-19 22:22:54,2012-10-19 22:22:54,closed,,1.6.0,3,11 - Bug;component: numpy.core;priority: normal,https://api.github.com/repos/numpy/numpy/issues/2336,b'syntax error - development numpy in python 2.5 (Trac #1741)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/1741 on 2011-02-11 by @stsci-sienkiew, assigned to unknown._\n\n\n\n    ======================================================================\n    ERROR: Failure: SyntaxError (invalid syntax (test_regression.py, line 1525))\n    ----------------------------------------------------------------------\n    Traceback (most recent call last):\n      File ""/usr/stsci/pyssgdev/2.5.4/nose/loader.py"", line 379, in loadTestsFromName\n        addr.filename, addr.module)\n      File ""/usr/stsci/pyssgdev/2.5.4/nose/importer.py"", line 39, in importFromPath\n        return self.importFromDir(dir_path, fqname)\n      File ""/usr/stsci/pyssgdev/2.5.4/nose/importer.py"", line 86, in importFromDir\n        mod = load_module(part_fqname, fh, filename, desc)\n      File ""/usr/stsci/pyssgdev/2.5.4/numpy/core/tests/test_regression.py"", line 1525\n        a[()] = b""hello1""\n                        ^\n    SyntaxError: invalid syntax\n    \n\n\n'"
2335,7731304,numpy-gitbot,numpy-gitbot,2012-10-19 22:22:51,2012-10-19 22:22:52,2012-10-19 22:22:52,closed,,NumPy 2.0,1,11 - Bug;component: Other;priority: normal,https://api.github.com/repos/numpy/numpy/issues/2335,b'__nonzero__ inconsistency (Trac #1740)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/1740 on 2011-02-10 by trac user pch, assigned to unknown._\n\nndarrays have a behaviour which is not intuitive.\n\n>>> bool((0,)), bool([0]), bool(array([0]))\n(True, True, False)\n\nThe result should be (True, True, True) imo.\n\n(bool(array(0)) is False as expected)'"
2332,7731297,numpy-gitbot,numpy-gitbot,2012-10-19 22:22:43,2012-10-19 22:22:46,2012-10-19 22:22:46,closed,,1.6.0,13,11 - Bug;component: numpy.core;priority: high,https://api.github.com/repos/numpy/numpy/issues/2332,b'numpy.test() seg faults (Trac #1737)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/1737 on 2011-02-08 by @stsci-sienkiew, assigned to unknown._\n\nnumpy.test() has been seg faulting for about a week.  Today, I narrowed it down to the sequence shown here.\n\nWith python 2.7.1 on 32 and 64 bit Red Hat Enterprise 4 :\n\n\n\n    >>> import numpy as np\n    >>> shape = (2,4,3)\n    >>> rand = np.random.random\n    >>> x = rand(shape).astype(np.complex)*1j\n    >>> import numpy as np\n    >>> \n    >>> shape = (2,4,3)\n    >>> rand = np.random.random\n    >>> x = rand(shape).astype(np.complex)*1j\n    \n    Program received signal SIGSEGV, Segmentation fault.\n    [Switching to Thread -1208502592 (LWP 16307)]\n    0x002a4a94 in ufunc_loop_matches () from /usr/stsci/pyssgdev/2.7/numpy/core/umath.so\n    (gdb) where\n    #0  0x002a4a94 in ufunc_loop_matches () from /usr/stsci/pyssgdev/2.7/numpy/core/umath.so\n    #1  0x002a519f in find_best_ufunc_inner_loop () from /usr/stsci/pyssgdev/2.7/numpy/core/umath.so\n    #2  0x002a74a0 in PyUFunc_GenericFunction () from /usr/stsci/pyssgdev/2.7/numpy/core/umath.so\n    #3  0x002aa02e in ufunc_generic_call () from /usr/stsci/pyssgdev/2.7/numpy/core/umath.so\n    #4  0x080708a4 in PyObject_Call ()\n    #5  0x08070974 in call_function_tail ()\n    #6  0x08070a46 in _PyObject_CallFunction_SizeT ()\n    #7  0x00f54a7f in PyArray_GenericBinaryFunction () from /usr/stsci/pyssgdev/2.7/numpy/core/multiarray.so\n    #8  0x00f54bb2 in array_multiply () from /usr/stsci/pyssgdev/2.7/numpy/core/multiarray.so\n    #9  0x0806df95 in binary_op1 ()\n    #10 0x0806e7fa in PyNumber_Multiply ()\n    #11 0x080ccc13 in PyEval_EvalFrameEx ()\n    #12 0x080d04a3 in PyEval_EvalCodeEx ()\n    #13 0x080cc4ec in PyEval_EvalCode ()\n    #14 0x080ecac8 in run_mod ()\n    #15 0x080eb9c0 in PyRun_InteractiveOneFlags ()\n    #16 0x080eb7dc in PyRun_InteractiveLoopFlags ()\n    #17 0x080eb6d5 in PyRun_AnyFileExFlags ()\n    #18 0x08069892 in Py_Main ()\n    #19 0x08068a80 in main ()\n\n\n\nI got this reproduce-by by trimming down one of the setUp functions in core/tests/test_multiarray.py \n\nIt does not appear to happen on RHE 5 (in python 2.7.1, 2.6.1 or 2.5.4) or on a Mac (in python 2.7).\n\nUnfortunately, I do not currently have a python with debugging symbols.  If I have an opportunity to re-compile python, I will post more details.\n'"
2331,7731296,numpy-gitbot,numpy-gitbot,2012-10-19 22:22:41,2012-10-23 02:45:26,2012-10-19 22:22:41,closed,,,1,11 - Bug;component: numpy.core;priority: normal,https://api.github.com/repos/numpy/numpy/issues/2331,b'Setting a rank-0 string array with a numpy scalar does not work on 1.6.0.dev (Trac #1736)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/1736 on 2011-02-04 by @FrancescAlted, assigned to unknown._\n\nThe next script describes the problem.\n\n\n\n    import numpy as np\n    \n    print ""numpy version:"", np.__version__\n    \n    a = np.zeros((), dtype=""S10"")\n    a[()] = ""hello1""  # works!\n    print a\n    a[()] = np.array(""hello2"")  # fails on 1.6.0.dev\n    print a\n\n\n\nRunning it with 1.5.0:\n\n\n\n    numpy version: 1.5.0.dev7987\n    hello1\n    hello2\n\n\n\nWith 1.6.0.dev:\n\n\n\n    numpy version: 1.6.0.dev-0e60ecb\n    hello1\n    Traceback (most recent call last):\n      File ""/tmp/scalar-string-bug.py"", line 8, in <module>\n        a[()] = np.array(""hello2"")\n    ValueError: cannot set an array element with a sequence\n\n\n'"
2330,7731294,numpy-gitbot,numpy-gitbot,2012-10-19 22:22:39,2012-10-19 22:22:40,2012-10-19 22:22:40,closed,,1.6.0,2,11 - Bug;component: Other;priority: normal,https://api.github.com/repos/numpy/numpy/issues/2330,b'Setting a rank-0 string array with a numpy scalar does not work on 1.6.0.dev (Trac #1735)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/1735 on 2011-02-04 by @FrancescAlted, assigned to unknown._\n\nThe next script describes the problem.\n\n\n\n    import numpy as np\n    \n    print ""numpy version:"", np.__version__\n    \n    a = np.zeros((), dtype=""S10"")\n    a[()] = ""hello1""  # works!\n    print a\n    a[()] = np.array(""hello2"")  # fails on 1.6.0.dev\n    print a\n\n\n\nRunning it with 1.5.0:\n\n\n\n    numpy version: 1.5.0.dev7987\n    hello1\n    hello2\n\n\n\nWith 1.6.0.dev:\n\n\n\n    numpy version: 1.6.0.dev-0e60ecb\n    hello1\n    Traceback (most recent call last):\n      File ""/tmp/scalar-string-bug.py"", line 8, in <module>\n        a[()] = np.array(""hello2"")\n    ValueError: cannot set an array element with a sequence\n\n\n'"
2329,7731293,numpy-gitbot,numpy-gitbot,2012-10-19 22:22:37,2013-03-14 23:09:32,2012-10-19 22:22:38,closed,,,3,11 - Bug;component: numpy.core;priority: normal,https://api.github.com/repos/numpy/numpy/issues/2329,b'assignment division not compatible with future division (Trac #1734)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/1734 on 2011-02-04 by trac user Daan, assigned to unknown._\n\n\n\n    from __future__ import division\n    from numpy import array\n    a = array([1,2,3])\n    a/=max(a)\n\n\n\ngives a = array([0,0,1])\n\nwhile\n\n\n\n    from __future__ import division\n    from numpy import array\n    a = array([1,2,3])\n    a = a/max(a)\n\n\n\ngives a = array([.333, .667, 1.]) as it should.\n\nThe assignment division should be identical to (division + assignment).\n\nNumpy version 1.5.1'"
2328,7731289,numpy-gitbot,numpy-gitbot,2012-10-19 22:22:34,2012-10-19 22:22:36,2012-10-19 22:22:36,closed,,1.6.0,3,11 - Bug;component: Other;priority: normal,https://api.github.com/repos/numpy/numpy/issues/2328,"b'add.accumulate on an array of shape (0,) causes divide-by-zero (Trac #1733)'","b""_Original ticket http://projects.scipy.org/numpy/ticket/1733 on 2011-02-02 by @mdboom, assigned to unknown._\n\nThis works in 1.5.1, fails in git MASTER (a7ffc7a)\n\n\n\n    import numpy as np\n    \n    x = np.array([[42, 0]], dtype=np.uint32)\n    np.add.accumulate(x[:-1,0])\n\n\n\n(This is a simple example of something one of pyfits' unit tests does).\n\nBlame suggests this is possibly related to fadddc7.\n"""
2327,7731287,numpy-gitbot,numpy-gitbot,2012-10-19 22:22:33,2012-10-23 02:45:24,2012-10-19 22:22:33,closed,,NumPy 2.0,1,11 - Bug;component: numpy.core;priority: normal,https://api.github.com/repos/numpy/numpy/issues/2327,b'Set complex128 array with a complex64 element fails (Trac #1732)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/1732 on 2011-02-01 by trac user SevenThunders, assigned to unknown._\n\nObserve the following code snippet:\n\n\n\n\n    import numpy as np\n    z = np.empty((2),dtype=np.complex128)  \n    z[0] = np.complex64(1.+1.j)\n    z[1] = np.complex64(1.+1.j)\n    print z\n    [ 1.+0.j  1.+0.j]\n\n\nNumpy fails to make an obvious conversion from complex64 floats to complex128.  The imaginary parts are lost,  which can lead to surprising and difficult to find bugs.  Now if the intention is for this conversion to be explicit,  then the assignment should have generated an exception, not the bizarre behavior of only keeping the real part.'"
2324,7731280,numpy-gitbot,charris,2012-10-19 22:22:26,2014-02-19 18:39:01,2014-02-19 18:39:01,closed,,NumPy 2.0,2,11 - Bug;component: numpy.core;priority: normal,https://api.github.com/repos/numpy/numpy/issues/2324,b'Wrong behavior: asarray & object with __array__ sets owndata to True (Trac #1729)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/1729 on 2011-01-31 by @pv, assigned to unknown._\n\nIs this really intended:\n\n\n    import numpy as np\n    class Fake(object):\n        def __init__(self, data):\n            self._data = data\n        def __array__(self):\n            return self._data\n    \n    x = np.array([1,2,3])\n    print np.asarray(Fake(x)).flags.owndata\n    # -> True\n\n\n\nThis seems to break the invariant that only one array object can have `owndata` True?\n'"
2322,7731276,numpy-gitbot,numpy-gitbot,2012-10-19 22:22:22,2012-10-19 22:22:22,2012-10-19 22:22:22,closed,,NumPy 2.0,1,11 - Bug;component: numpy.ma;priority: normal,https://api.github.com/repos/numpy/numpy/issues/2322,"b""'MaskedArray' object has no attribute 'log' (Trac #1727)""","b""_Original ticket http://projects.scipy.org/numpy/ticket/1727 on 2011-01-28 by trac user ianmartin, assigned to @pierregm._\n\nThe following snippet\n\n\n    import numpy\n    a = numpy.ma.ones(1)\n    a.log()\n\n\n\nrasies AttributeError: 'MaskedArray' object has no attribute 'log'\n\nWhy does a masked array not have a log function when numpy.ma.log exists?  Could this be added or is it intentionally missing?\n\nThanks"""
2321,7731275,numpy-gitbot,charris,2012-10-19 22:22:19,2015-02-13 17:44:16,2015-02-13 17:44:16,closed,,NumPy 2.0,2,11 - Bug;component: numpy.core;priority: normal,https://api.github.com/repos/numpy/numpy/issues/2321,b'Error in tanh for large complex argument (Trac #1726)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/1726 on 2011-01-28 by trac user mbakker, assigned to unknown._\n\ntanh computes nans for large complex argument:\n\nIn [85]: tanh(1000+0j)\nOut[85]: (nan+nan*j)\n\nwhile the correct answer is 1.0\n\nSolution: Program tanh as:\n\ntanh(z) = (1.0 - exp(-2.0*z)) / (1.0 + exp(-2.0*z))\n\n'"
2320,7731273,numpy-gitbot,numpy-gitbot,2012-10-19 22:22:17,2012-10-19 22:22:18,2012-10-19 22:22:18,closed,,1.6.0,3,11 - Bug;component: numpy.distutils;priority: normal,https://api.github.com/repos/numpy/numpy/issues/2320,b'Solaris Numpy/SciPy distutils problem (Trac #1725)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/1725 on 2011-01-28 by trac user megamic, assigned to @cournape._\n\nWhen trying to build SciPy on Solaris using the Sun Studio compiler, the following error occurs:\n\n\n\n    compile options: \'-Iscipy/ndimage/src -I/opt/local/contrib/lib/python2.7/site-packages/numpy/core/include -I/opt/local/contrib/lib/python2.7/site-packages/numpy/core/include -I/opt/local/contrib/include/python2.7 -c\'\n    extra options: \'-Wall\'\n    cc: scipy/ndimage/src/ni_support.c\n    cc: illegal option -Wall\n    cc: illegal option -Wall\n\n\n\nThe problem of course is that -Wall is not accepted by the compiler, but there seems to be no way to deactivate it.\n\nOne way of getting around the problem is by disabling the extra options in distutils/ccompiler.py in the numpy distro, e.g.\n\n\n\n        if extra_postargs:\n            display += ""\\nextra options: \'%s\'"" %(\'\'.join(extra_postargs))\n\n\n\nTo:\n\n\n\n        if extra_postargs:\n            extra_postargs = [] \n            display += ""\\nextra options: \'%s\'"" %(\'\'.join(extra_postargs))\n\n\n\n'"
2319,7731271,numpy-gitbot,numpy-gitbot,2012-10-19 22:22:07,2012-10-19 22:22:16,2012-10-19 22:22:16,closed,,1.6.0,30,11 - Bug;component: numpy.core;priority: normal,https://api.github.com/repos/numpy/numpy/issues/2319,b'new_iterator branch - bus error (Trac #1724)',"b""_Original ticket http://projects.scipy.org/numpy/ticket/1724 on 2011-01-27 by @rgommers, assigned to unknown._\n\nAfter building Mark Wiebe's new-iterator branch, commit  527de17, I get a bus error on running the tests:\n\n\n    In [2]: np.test()\n    Running unit tests for numpy\n    NumPy version 1.6.0.dev-527de17\n    NumPy is installed in /Users/rgommers/Code/numpy/numpy\n    Python version 2.6.4 (r264:75821M, Oct 27 2009, 19:48:32) [GCC 4.0.1 (Apple Inc. build 5493)]\n    nose version 0.11.1\n    Bus error\n\n\nThis on OS X 10.6, Intel 32-bit and Python 2.6 from python.org.\n\nBuild log attached. There are many build warnings like:\n\n\n    numpy/core/src/npymath/halffloat.c: In function \xa1\xaenpy_doublebits_to_halfbits\xa1\xaf:\n    numpy/core/src/npymath/halffloat.c:355: warning: integer constant is too large for \xa1\xaeunsigned long\xa1\xaf type\n    \n    numpy/core/src/multiarray/lowlevel_strided_loops.c.src: In function \xa1\xae_aligned_swap_strided_to_strided_size8\xa1\xaf:\n\n"""
2317,7731267,numpy-gitbot,seberg,2012-10-19 22:22:03,2014-08-16 08:22:54,2014-08-16 08:22:54,closed,,,2,11 - Bug;component: numpy.lib;priority: normal,https://api.github.com/repos/numpy/numpy/issues/2317,b'genfromtxt does not handle single value missing_values (Trac #1722)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/1722 on 2011-01-25 by @jseabold, assigned to unknown._\n\nfrom StringIO import StringIO\nimport numpy as np\n\ndata = ""1, 2, 3\\n4, ,5""\n\nnp.genfromtxt(StringIO(data), delimiter="","", names=""a,b,c"",\nmissing_values="" "", filling_values=0)\narray([(1.0, 2.0, 3.0), (4.0, nan, 5.0)],\n     dtype=[(\'a\', \'<f8\'), (\'b\', \'<f8\'), (\'c\', \'<f8\')])\n\nnp.genfromtxt(StringIO(data), delimiter="","", names=""a,b,c"",\nmissing_values={\'b\':"" ""}, filling_values={\'b\' : 0})\narray([(1.0, 2.0, 3.0), (4.0, 0.0, 5.0)],\n     dtype=[(\'a\', \'<f8\'), (\'b\', \'<f8\'), (\'c\', \'<f8\')])\n\nUnless I use the dict for missing_values, it doesn\'t fill them in.\nWithout named columns\n\nnp.genfromtxt(StringIO(data), delimiter="","", missing_values="" "",\nfilling_values=0)\narray([[  1.,   2.,   3.],\n      [  4.,  nan,   5.]])\n\nnp.genfromtxt(StringIO(data), delimiter="","", missing_values={1 :"" ""},\nfilling_values={1 :0})\narray([[ 1.,  2.,  3.],\n      [ 4.,  0.,  5.]])'"
2316,7731266,numpy-gitbot,seberg,2012-10-19 22:22:01,2013-12-05 00:07:26,2013-12-05 00:07:26,closed,,NumPy 2.0,4,11 - Bug;component: Other;priority: normal,https://api.github.com/repos/numpy/numpy/issues/2316,b'logical_and () handles nan incorrectly (Trac #1720)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/1720 on 2011-01-24 by trac user joshuaschmitt, assigned to unknown._\n\nwhen one types ""1 and nan"", the return is ""nan"", but when one types ""logical_nan(1,nan)"", the return is ""True"".  This is inconsistent.  '"
2315,7731264,numpy-gitbot,charris,2012-10-19 22:22:00,2014-03-04 23:35:22,2014-03-04 23:35:22,closed,,NumPy 2.0,3,11 - Bug;component: Other;priority: normal,https://api.github.com/repos/numpy/numpy/issues/2315,b'Array compare function might not work for two byteswapped elements. (Trac #1719)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/1719 on 2011-01-23 by @charris, assigned to unknown._\n\nFrom ticket #2087 concerning searchsorted. Searchsorted uses the compare function from the key array and it seems to fail when both the searched array and the key array are byteswapped.'"
2313,7731261,numpy-gitbot,numpy-gitbot,2012-10-19 22:21:55,2012-10-23 02:45:17,2012-10-19 22:21:56,closed,,1.6.0,4,11 - Bug;component: numpy.ma;priority: normal,https://api.github.com/repos/numpy/numpy/issues/2313,"b'npma.sum(a_ma,axis=1) fails when no masked values are found (Trac #1717)'","b'_Original ticket http://projects.scipy.org/numpy/ticket/1717 on 2011-01-18 by trac user markhmoulton@..., assigned to @pierregm._\n\nI am using the Enthought distribution, Numpy version 1.4.0.  Maybe this bug has been fixed already, but I thought it serious enough to mention anyway just in case.\n\nAs the snippet shows, the column of sums of a masked array (axis = 1) is valid when there is at least one masked value, but triggers an error when no masked values are present.  This behavior does not occur when axis = 0 or when the average is used instead.\n\nThis causes Numpy to return an error in a situation that arises routinely, but not uniformly.\n\nFILE\n    /Library/Frameworks/EPD64.framework/Versions/6.2/lib/python2.6/site-packages/numpy/version.py\n\nDATA\n    release = True\n    short_version = \'1.4.0\'\n    version = \'1.4.0\'\n\n>>> a = npr.randint(0,5,(4,3))\n>>> a\narray([[0, 3, 1],\n       [1, 0, 2],\n       [1, 4, 4],\n       [3, 0, 3]])\n\n# Works when 0 is the value to be masked\n>>> a0_ma = npma.masked_values(a,0)\n>>> np.sum(a0_ma,axis=1)\nmasked_array(data = [4 3 9 6],\n             mask = [False False False False],\n       fill_value = 999999)\n\n# Fails when 9 is the value (not present) to be masked\n>>> a9_ma = npma.masked_values(a,9)\n>>> npma.sum(a9_ma,axis=1)\n\nTraceback (most recent call last):\n  File ""<pyshell#511>"", line 1, in <module>\n    np.sum(a9_ma,axis=1)\n  File ""/Library/Frameworks/EPD64.framework/Versions/6.2/lib/python2.6/site-packages/numpy/core/fromnumeric.py"", line 1390, in sum\n    return sum(axis, dtype, out)\n  File ""/Library/Frameworks/EPD64.framework/Versions/6.2/lib/python2.6/site-packages/numpy/ma/core.py"", line 4357, in sum\n    newmask = _mask.all(axis=axis)\nValueError: axis(=1) out of bounds\n\n# The problem does not appear when we sum along the row axis\n>>> npma.sum(a9_ma,axis=0)\nmasked_array(data = [ 5  7 10],\n             mask = False,\n       fill_value = 999999)\n\n# Nor does it appear when we take the average\n>>> npma.average(a9_ma,axis=1)\narray([ 1.33333333,  1.        ,  3.        ,  2.        ])'"
2312,7731260,numpy-gitbot,charris,2012-10-19 22:21:53,2014-02-26 14:50:39,2014-02-26 14:50:39,closed,,NumPy 2.0,0,11 - Bug;component: numpy.core;Easy Fix;priority: normal,https://api.github.com/repos/numpy/numpy/issues/2312,b'ndarray.tofile raises ValueError on IO failure;  would IOError be more appropriate? (Trac #1716)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/1716 on 2011-01-17 by trac user mark.dickinson, assigned to unknown._\n\nThe following exception traceback was reported to me by the user of a numpy-based application:\n\n\n\n\n    File ""C:\\EPD622\\lib\\site-packages\\numpy\\lib\\io.py"", line 345, in save\n    format.write_array(fid, arr)\n    File ""C:\\EPD622\\lib\\site-packages\\numpy\\lib\\format.py"", line 401, in write_array\n    array.tofile(fp)\n    ValueError: 135453 requested and 6 written\n    \n\n\n\nWhile the cause of the error was never explicitly determined, it seems likely to have been as a result of an overfull disk.  The type and message of the exception are a little confusing here;  would it make sense for the exception type to be something like IOError rather than ValueError?\n\nThis was with the version of numpy that ships with EPD 6.2.2, but I believe that the issue is still present in the current numpy source.  The error message appears to be coming from /numpy/core/src/multiarray/convert.c, as a result of a system-level fwrite call failing to write all the expected items (i.e., encountering a system-level IO error).\n'"
2311,7731258,numpy-gitbot,seberg,2012-10-19 22:21:52,2014-02-20 23:26:45,2014-02-20 23:26:45,closed,,NumPy 2.0,11,11 - Bug;component: Other;priority: normal,https://api.github.com/repos/numpy/numpy/issues/2311,b'numpy.array catches to many errors (Trac #1715)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/1715 on 2011-01-15 by trac user nils2, assigned to unknown._\n\nnumpy.array catches to many errors when using the array interface\n\nInstead of failing and re-raising the exception in the following example, numpy simply constructs a 1-element array out of the image\n\n\n    import Image, numpy\n    \n    >>> img = Image.open(""jane-doe.jpg"")\n    >>> img.tobitmap()\n    IOError: decoder jpeg not available ...\n    >>> array = numpy.array(img)\n    >>> array\n    array(<JpegImagePlugin.JpegImageFile instance at 0x101019dd0>, dtype=object)\n\n\n\n'"
2309,7731256,numpy-gitbot,charris,2012-10-19 22:21:47,2014-02-19 19:52:48,2014-02-19 19:52:48,closed,,NumPy 2.0,7,11 - Bug;component: numpy.core;priority: normal,https://api.github.com/repos/numpy/numpy/issues/2309,b'Solaris segfault (Trac #1713)',"b""_Original ticket http://projects.scipy.org/numpy/ticket/1713 on 2011-01-15 by @rgommers, assigned to unknown._\n\nReported on the mailing list on 3 Jan 2011 by John Hunter.\n\n\n\n    johnh@udesktop253:~> gcc --version\n    gcc (GCC) 3.4.3 (csl-sol210-3_4-branch+sol_rpath)\n    Copyright (C) 2004 Free Software Foundation, Inc.\n    This is free software; see the source for copying conditions.  There is NO\n    warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n    \n    johnh@udesktop253:~> uname -a\n    SunOS udesktop253 5.10 Generic_142910-17 i86pc i386 i86pc\n\n\n\n\n\n    johnh@udesktop253:~> cat test.py\n    import numpy as np\n    print np.__version__\n    fs = 1000\n    t = np.linspace(0, 0.3, 301)\n    A = np.array([2, 8]).reshape(-1, 1)\n    f = np.array([150, 140]).reshape(-1, 1)\n    xn = (A * np.exp(2j * np.pi * f * t)).sum(axis=0)\n    \n    johnh@udesktop253:~> python test.py\n    2.0.0.dev-9451260\n    Segmentation Fault (core dumped)\n    johnh@udesktop253:~>\n\n\n\n\n    johnh@udesktop253:~> sudo pstack /var/core/core.python.957\n    core '/var/core/core.python.957' of 9397:       python test.py\n     febf1928 cexp     (0, 0, 0, 0, 8060ab0, 84321ac) + 1b0\n     fe9657e0 npy_cexp (80458e0, 0, 0, 0, 0, 84e2530) + 30\n     fe95064f nc_exp   (8045920, 84e72a0, 8045978, 8045920, 10, 10) + 3f\n     fe937d5b PyUFunc_D_D (84e2530, 84e20f4, 84e25b0, fe950610, 1, 0) + 5b\n     fe95e818 PyUFunc_GenericFunction (81e96e0, 807deac, 0, 80460b8, 2, 2) + 448\n     fe95fb10 ufunc_generic_call (81e96e0, 807deac, 0, fe98a820) + 70\n     feeb2d78 PyObject_Call (81e96e0, 807deac, 0, 80a24ec, 8061c08, 0) + 28\n     fef11900 PyEval_EvalFrame (80a2394, 81645a0, 8079824, 8079824) + 146c\n     fef17708 PyEval_EvalCodeEx (81645a0, 8079824, 8079824, 0, 0, 0) + 620\n     fef178af PyEval_EvalCode (81645a0, 8079824, 8079824, 8061488, fef3d9ee, 0) + 2f\n     fef3d095 PyRun_FileExFlags (feb91c98, 804687b, 101, 8079824, 8079824, 1) + 75\n     fef3d9ee PyRun_SimpleFileExFlags (feb91c98, 804687b, 1, 80465a8, fef454a1, 804687b) + 172\n     fef3e4fd PyRun_AnyFileExFlags (feb91c98, 804687b, 1, 80465a8) + 61\n     fef454a1 Py_Main  (1, 80466b8, feb1cf35, fea935a1, 29, feb96750) + 9d9\n     08050862 main     (2, 80466b8, 80466c4) + 22\n     08050758 _start   (2, 8046874, 804687b, 0, 8046883, 80468ad) + 60\n\n"""
2308,7731255,numpy-gitbot,seberg,2012-10-19 22:21:46,2014-02-19 18:24:02,2014-02-19 18:24:02,closed,,,3,11 - Bug;component: numpy.core;priority: normal,https://api.github.com/repos/numpy/numpy/issues/2308,"b""concatenate ignores 'axis' argument when given 1-dimensional arrays (Trac #1712)""","b'_Original ticket http://projects.scipy.org/numpy/ticket/1712 on 2011-01-14 by trac user chairmanK, assigned to unknown._\n\nI am surprised that concatenate does not complain when I specify an impossible axis.\n\n\n\n    >>> a = numpy.zeros((2,))\n    >>> b = numpy.ones((3,))\n    >>> numpy.concatenate((a, b), axis=0)\n    array([ 0.,  0.,  1.,  1.,  1.])\n    >>> numpy.concatenate((a, b), axis=20)\n    array([ 0.,  0.,  1.,  1.,  1.])\n    >>> numpy.concatenate((a, b), axis=-20)\n    array([ 0.,  0.,  1.,  1.,  1.])\n    >>> numpy.concatenate((a, b), axis=23423432234234234234L)\n    Traceback (most recent call last):\n      File ""<stdin>"", line 1, in <module>\n    OverflowError: long int too large to convert to int\n    >>> numpy.concatenate((a.reshape((a.size, 1)), b), axis=-20)\n    Traceback (most recent call last):\n      File ""<stdin>"", line 1, in <module>\n    ValueError: bad axis1 argument to swapaxes\n    >>> numpy.__version__\n    \'2.0.0.dev-f72c605\'\n\n\n\n\n'"
2307,7731254,numpy-gitbot,seberg,2012-10-19 22:21:44,2014-02-16 23:30:32,2014-02-16 23:30:32,closed,,,2,11 - Bug;component: numpy.numarray;priority: normal,https://api.github.com/repos/numpy/numpy/issues/2307,"b""Bad slice indices / missing function '_resizebuf' in numpy.numarray.functions module (Trac #1711)""","b""_Original ticket http://projects.scipy.org/numpy/ticket/1711 on 2011-01-13 by trac user phensley, assigned to unknown._\n\nIssues:\n\n 1. some slice indices are floats when they should be ints.\n 2. the function '_resizebuf' is missing. \n\nThe bug appears to be present in the versions I've examined: 1.3.0, 1.4.1 and 1.5.1.  I'm attaching a patch which fixed the issue for me. \n\nI've tested the patch against 1.3.0.  It also applies clean against 1.4.1, and against 1.5.1 with 3 lines offset, but I haven't personally tested either of these versions."""
2306,7731253,numpy-gitbot,charris,2012-10-19 22:21:43,2014-02-16 03:14:55,2014-02-16 03:14:55,closed,,NumPy 2.0,1,11 - Bug;component: numpy.core;priority: normal,https://api.github.com/repos/numpy/numpy/issues/2306,"b'output dtype of mean, median, var/std should not depend on axis argument (Trac #1710)'","b""_Original ticket http://projects.scipy.org/numpy/ticket/1710 on 2011-01-12 by @bsouthey, assigned to unknown._\n\nKeith Goodman reported that axis argument determines the output dtype of mean, median, var/std [http://mail.scipy.org/pipermail/numpy-discussion/2010-December/054253.html]\n\nThere should be the expectation the output should be the same regardless of the axis argument. For example, for these floating point and integer examples the output dtype should either be float32 or float64:\n\n\n    >>> np.array([[1, 2], [3, 4]], dtype=np.float32).mean(axis=0).dtype\n    dtype('float32')\n    >>> np.array([[1, 2], [3, 4]], dtype=np.float32).mean(axis=None).dtype\n    dtype('float64')\n    \n    >>> np.array([[1, 2], [3, 4]], dtype=np.int8).mean(axis=None, dtype=np.float32).dtype\n    dtype('float64')\n    >>> np.array([[1, 2], [3, 4]], dtype=np.int8).mean(axis=1, dtype=np.float32).dtype\n    dtype('float32')\n\n\n\n"""
2305,7731252,numpy-gitbot,numpy-gitbot,2012-10-19 22:21:40,2012-10-19 22:21:41,2012-10-19 22:21:41,closed,,NumPy 2.0,2,11 - Bug;component: numpy.core;priority: normal,https://api.github.com/repos/numpy/numpy/issues/2305,b'astype should not raise ComplexWarning (Trac #1709)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/1709 on 2011-01-11 by @rgommers, assigned to unknown._\n\nAn explicit type cast should not raise a warning:\n\n\n    In [1]: x = np.array([1+1j, 1-1j])\n    \n    In [2]: x.astype(np.float64)\n    /Library/Frameworks/Python.framework/Versions/2.6/bin/ipython:1: ComplexWarning: Casting complex values to real discards the imaginary part\n      #!/Library/Frameworks/Python.framework/Versions/2.6/Resources/Python.app/Contents/MacOS/Python\n    Out[2]: array([ 1.,  1.])\n\n'"
2304,7731250,numpy-gitbot,numpy-gitbot,2012-10-19 22:21:38,2012-10-23 02:45:17,2012-10-19 22:21:39,closed,,1.6.0,3,11 - Bug;component: numpy.core;priority: high,https://api.github.com/repos/numpy/numpy/issues/2304,b'pickle.loads() of pickled numpy.array can corrupt memory (Trac #1708)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/1708 on 2011-01-10 by trac user quarl, assigned to unknown._\n\nWe discovered that pickle.loads() on a pickled numpy.ndarray can lead to memory corruption.  I can reproduce the problem with arrays of size 1 (length=1, dtype=bool or byte) pickled using protocols 1 or 2:\n\n\n    pickle.loads(pickle.dumps(numpy.array([True]), protocol=-1))\n\n\n\nIn my tests, this affects Solaris and Linux, Sparc, x86, and x86_64, Python versions up to 2.6.6, numpy version 1.4.1.\n\nAfter unpickling the size-1 array into \'data\', I replace data[0] with an arbitrary byte (0xbb in the example below) and it overwrites some unrelated data (regexp buffers in the example below).  If the original data contains array([2]) instead of array([1]), then it affects ""\\x02"" in the regexp buffer instead of ""\\x01"".\n\nThe second use of pickle.loads() then gets confused.\n\n\n\n    #!/usr/bin/env python\n    \n    import numpy\n    import pickle\n    import re\n    \n    # Unpickle a bool or byte array of length 1:\n    data = numpy.array([1], dtype=\'b\') # similar issue with numpy.array([True])\n    blob = pickle.dumps(data, protocol=1) # protocol 1, -1 exhibit bug, but 0 is \'safe\'\n    data = pickle.loads(blob)\n    \n    print repr(re.sub(""a(.)"", ""\\x01\\\\1"", ""a_""))\n    # \'\\x01_\' [correct]\n    \n    data[0] = 0xbb\n    \n    print repr(re.sub(""a(.)"", ""\\x01\\\\1"", ""a_""))\n    # \'\\xbb_\' [?!]\n    \n    lose = pickle.loads(blob) # crashes\n\n\n'"
2303,7731249,numpy-gitbot,njsmith,2012-10-19 22:21:36,2016-02-23 21:48:57,2016-02-23 21:48:57,closed,,NumPy 2.0,6,11 - Bug;component: numpy.core;Easy Fix;Patch;priority: low,https://api.github.com/repos/numpy/numpy/issues/2303,b'ctypeslib.ndpointer cache ineffective (Trac #1707)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/1707 on 2011-01-10 by trac user Colin Hogben, assigned to unknown._\n\nThe cache of pointer types is queried with a tuple (dtype, ndim, shape, num) but values stored with a bare dtype as key.  Thus queries always miss.\n'"
2302,7731248,numpy-gitbot,numpy-gitbot,2012-10-19 22:21:35,2012-10-19 22:21:35,2012-10-19 22:21:35,closed,,NumPy 2.0,1,11 - Bug;component: Other;priority: normal,https://api.github.com/repos/numpy/numpy/issues/2302,b'Misleading help options (Trac #1706)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/1706 on 2011-01-10 by trac user hector1618, assigned to unknown._\n\nI am a newbie and was using numpy in IPython. When I create a matrix object,say A, and look for options available, it shows some options which are not valid for that object like A.shape(),A.size() in this case. This is really mis-leading for newbie. The code for the same is-\n\n\n\n    \n    In[1]:import numpy as np\n    \n    In[2]:A = np.matrix([[1,2],[3,4]])\n    \n    In[3]:A.shape()\n    \n\n\n '"
2301,7731247,numpy-gitbot,numpy-gitbot,2012-10-19 22:21:32,2012-10-19 22:21:33,2012-10-19 22:21:33,closed,,,3,11 - Bug;component: numpy.core;priority: normal,https://api.github.com/repos/numpy/numpy/issues/2301,b'Unicode breaks numpy.correlate (patch attached) (Trac #1705)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/1705 on 2011-01-06 by trac user pyrtsa, assigned to unknown._\n\n__`numpy.correlate`__ doesn\'t play nicely with __`from __future__ import unicode_literals`__ (nor generally a `unicode` string provided as the `mode` argument). The following call will result in a `TypeError`:\n\n\n    >>> numpy.correlate([1,2,3],[1,2,3],unicode(\'full\'))\n    ---------------------------------------------------------------------------\n    TypeError                                 Traceback (most recent call last)\n    \n    /Users/me/<ipython console> in <module>()\n    \n    /path/to/numpy/core/numeric.pyc in correlate(a, v, mode, old_behavior)\n        692         return multiarray.correlate(a,v,mode)\n        693     else:\n    --> 694         return multiarray.correlate2(a,v,mode)\n        695 \n        696 def convolve(a,v,mode=\'full\'):\n    \n    TypeError: an integer is required\n\n\n\n__This patch__ should fix the problem (Python 2.3 and above):\n\n\n    diff --git a/numpy/core/numeric.py b/numpy/core/numeric.py\n    index dbad73c..519180b 100644\n    --- a/numpy/core/numeric.py\n    +++ b/numpy/core/numeric.py\n    @@ -636,7 +636,7 @@ _mode_from_name_dict = {\'v\': 0,\n                             \'f\' : 2}\n     \n     def _mode_from_name(mode):\n    -    if isinstance(mode, type("""")):\n    +    if isinstance(mode, basestring):\n             return _mode_from_name_dict[mode.lower()[0]]\n         return mode\n     \n\n\n'"
2299,7731243,numpy-gitbot,numpy-gitbot,2012-10-19 22:21:25,2012-10-19 22:21:27,2012-10-19 22:21:27,closed,,1.6.0,6,11 - Bug;component: numpy.core;priority: normal,https://api.github.com/repos/numpy/numpy/issues/2299,"b""fromfile doesn't work with dtype=bool_ and input being floats (Trac #1703)""","b""_Original ticket http://projects.scipy.org/numpy/ticket/1703 on 2010-12-29 by trac user jpeel, assigned to unknown._\n\nCurrently, fromfile doesn't work properly for dtype=bool_ and with floats in the input file. I've attached a patch to fix it as well as a test."""
2298,7731241,numpy-gitbot,charris,2012-10-19 22:21:24,2014-02-19 18:10:00,2014-02-19 18:10:00,closed,,NumPy 2.0,2,11 - Bug;component: numpy.core;priority: normal,https://api.github.com/repos/numpy/numpy/issues/2298,b'dtype truth value is False (Trac #1702)',"b""_Original ticket http://projects.scipy.org/numpy/ticket/1702 on 2010-12-26 by @pv, assigned to unknown._\n\nThis probably shouldn't be like this:\n\n\n    >>> bool(np.dtype('float64'))\n    False\n\n\n\nReported here: http://permalink.gmane.org/gmane.comp.python.numeric.general/41827"""
2297,7731239,numpy-gitbot,numpy-gitbot,2012-10-19 22:21:20,2012-10-23 02:45:15,2012-10-19 22:21:23,closed,,NumPy 2.0,6,11 - Bug;component: numpy.core;priority: normal,https://api.github.com/repos/numpy/numpy/issues/2297,b'Accessing Type Conversion/Promotion/Coercion Rules (Trac #1701)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/1701 on 2010-12-25 by trac user pv00, assigned to unknown._\n\nNumPy dtype arithmetic is the opposite of Python type arithmetic!\n       The operators ""and"" and ""or"" switch roles:\n\n<type \'int\'>  or   <type \'float\'>  =  <type \'int\'>\n<type \'int\'>  and  <type \'float\'>  =  <type \'float\'>\n       int64  or   float64         =         float64\n       int64  and  float64         =         int64\n\n       This will be very confusing to users at large.\n       Can we make the conventions agree in NumPy 2.0?\n\n\n\nMore details: I was happy to find that NumPy exposed the numerical datatype promotion rules such as\n\n        int + float = float\n\nby means of the logical operator or :\n\ndtype(\'int64\'), \' or \', dtype(\'float64\'), \' = \', dtype(\'float64\')\n\nBut then I was shocked to find that Python had the \n_exact_opposite_convention_! \n\nI propose that there be a negotiation between the NumPy developers and the Python developers, and that a consistent convention be set. Right now I think it\'s undocumented (or not very publically documented) behavior, and it would be better to make a change earlier, and fix a relatively small base of code, rather than carry it along forever, a potential source of confusion when code is written and whenever it is debugged.'"
2296,7731237,numpy-gitbot,numpy-gitbot,2012-10-19 22:21:17,2012-10-23 02:45:12,2012-10-19 22:21:18,closed,,NumPy 2.0,2,11 - Bug;component: Official binaries;priority: normal,https://api.github.com/repos/numpy/numpy/issues/2296,b'Registry check fails for MS Install. (Trac #1700)',"b""_Original ticket http://projects.scipy.org/numpy/ticket/1700 on 2010-12-24 by trac user johnmark54, assigned to @rgommers._\n\nAfter installing python binary\n__python-2.7.1.amd64.msi__ from python.org\nthe install of \n__numpy-1.5.0-win32-superpack-python2.7.exe__\nfails with error:''\nPython 2.7 required, which was not found in the registry.'' \n\nReinstalling python, using different versions of python etc. does not help. \nPython runs fine. \n(Is this the right place to report this?)\n\n-john.m.agosta@intel.com"""
2295,7731235,numpy-gitbot,numpy-gitbot,2012-10-19 22:21:15,2012-10-19 22:21:16,2012-10-19 22:21:16,closed,,,5,11 - Bug;component: numpy.core;priority: normal,https://api.github.com/repos/numpy/numpy/issues/2295,b'Failure assigning ctypes arrays to numpy arrays of size 1 on Py3 (Trac #1699)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/1699 on 2010-12-20 by trac user ulfw, assigned to unknown._\n\nI have the following problem: When I create an array of size 1 using numpy.zeros or numpy.array, then assign a slice using [:] notation, it fails, possibly when the right-hand side is used as a buffer.\nThe behavior is inconsistent with earlier NumPy versions.\nThe attached example illustrates the problem.\nNOTE: This was observed in NumPy 1.5.1.'"
2294,7731234,numpy-gitbot,numpy-gitbot,2012-10-19 22:21:13,2012-10-19 22:21:13,2012-10-19 22:21:13,closed,,1.6.0,2,11 - Bug;component: Other;priority: normal,https://api.github.com/repos/numpy/numpy/issues/2294,b'NumPy should classify itself as supporting Python 3 (Trac #1698)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/1698 on 2010-12-20 by trac user loewis, assigned to unknown._\n\nPyPI has now Trove classifiers to indicate what Python versions are supported. It would be good if NumPy would classify itself with these classifiers, in particular\n\n\n\n    Programming Language :: Python :: 3\n\n\n\nDoing so allows automatic checks whether a package has been ported.'"
2293,7731233,numpy-gitbot,numpy-gitbot,2012-10-19 22:21:11,2012-10-19 22:21:11,2012-10-19 22:21:11,closed,,1.6.0,2,11 - Bug;component: Documentation;priority: low,https://api.github.com/repos/numpy/numpy/issues/2293,b'typo in doc of convolve (Trac #1697)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/1697 on 2010-12-16 by trac user buschi, assigned to @pv._\n\n.. math:: (f * g)[n] = \\sum_{m = -\\infty}^{\\infty} f[m] f[n - m]\n\nshould read\n\n.. math:: (f * g)[n] = \\sum_{m = -\\infty}^{\\infty} f[m] g[n - m]\n'"
2292,7731231,numpy-gitbot,numpy-gitbot,2012-10-19 22:21:09,2013-09-09 14:14:58,2012-10-19 22:21:09,closed,,,1,11 - Bug;component: Documentation;priority: normal,https://api.github.com/repos/numpy/numpy/issues/2292,b'Nonexistant savez_compressed (Trac #1696)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/1696 on 2010-12-11 by trac user ipatrol, assigned to @pv._\n\nsavez_compressed is referenced on the generated savez page. Howeverm this simply does not exist. Why is it here?'"
2291,7731228,numpy-gitbot,numpy-gitbot,2012-10-19 22:21:04,2012-10-19 22:21:07,2012-10-19 22:21:07,closed,,1.6.0,6,11 - Bug;component: numpy.core;priority: normal,https://api.github.com/repos/numpy/numpy/issues/2291,"b'numpy.r_[True, False] is not a boolean array (Trac #1695)'","b""_Original ticket http://projects.scipy.org/numpy/ticket/1695 on 2010-12-06 by trac user O.C., assigned to unknown._\n\nHello,\n\nI observe the following behavior:\n\n\n\n    numpy.r_[True, False]   -> array([1, 0], dtype=int8)\n    numpy.r_[True]          -> array([ True], dtype=bool)\n\n\n\n\nI would expect the first line to give a boolean array:\narray([ True, False], dtype=bool)\n\nThis may be a bug.\n\n-- \nO.C.\nnumpy.__version__ = '1.4.1'\n_______________________________________________"""
2290,7731227,numpy-gitbot,numpy-gitbot,2012-10-19 22:21:01,2012-10-19 22:21:03,2012-10-19 22:21:03,closed,,1.6.0,8,11 - Bug;component: numpy.distutils;priority: normal,https://api.github.com/repos/numpy/numpy/issues/2290,b'Adding support to an ARM processor (Trac #1694)',"b""_Original ticket http://projects.scipy.org/numpy/ticket/1694 on 2010-12-05 by trac user Snark, assigned to @cournape._\n\nI'm trying to compile sage on a toshiba AC100 -- this device is a netbook with an ARM-processor.\n\nThe errors are :\nnumpy/core/include/numpy/npy_cpu.h:49: error: #error Unknown CPU, please report this to numpy maintainers with information about your platform (OS, CPU and compiler)\n\nOk, that's what I'll do. The machine is arm-linux-gnueabi, using gcc 4.4.5.\n\nnumpy/core/include/numpy/npy_endian.h:33: error: #error Unknown CPU: can not set endianness\n\nThat one is strange : there is a nice endian.h which numpy could try to detect..."""
2289,7731225,numpy-gitbot,numpy-gitbot,2012-10-19 22:20:58,2012-10-19 22:20:59,2012-10-19 22:20:59,closed,,1.6.0,2,11 - Bug;component: numpy.f2py;priority: normal,https://api.github.com/repos/numpy/numpy/issues/2289,b'Puzzling difference in building wrapper function (Trac #1693)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/1693 on 2010-12-03 by @pearu, assigned to @pearu._\n\nhttp://cens.ioc.ee/pipermail/f2py-users/2010-December/002145.html'"
2288,7731224,numpy-gitbot,numpy-gitbot,2012-10-19 22:20:54,2012-10-19 22:20:57,2012-10-19 22:20:57,closed,,NumPy 2.0,3,11 - Bug;component: Other;priority: normal,https://api.github.com/repos/numpy/numpy/issues/2288,b'numpy.array segfaults on binary image from Python Imaging Library (Trac #1692)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/1692 on 2010-12-03 by @gerritholl, assigned to unknown._\n\nWhen I try to convert a binary image loaded with the Python Imaging Library (version 1.1.7) using numpy (version 2.0.0.dev-12d0200), numpy segfaults. If I convert the image to 8-bit first, numpy can load it fine. \n\n\n\n    14:33:35:14414:gerrit@ubuntu10:~$ python\n    Python 2.6.6 (r266:84292, Sep 15 2010, 16:22:56) \n    [GCC 4.4.5] on linux2\n    Type ""help"", ""copyright"", ""credits"" or ""license"" for more information.\n    >>> import Image, numpy\n    >>> print Image.VERSION, numpy.version.version\n    1.1.7 2.0.0.dev-12d0200\n    >>> im = Image.open(\'/local/gerrit/benchmarking/images/lsm.png\')\n    >>> print im\n    <PngImagePlugin.PngImageFile image mode=1 size=21601x10801 at 0x1B7BD40>\n    >>> imd = numpy.array(im)\n    Segmentation fault\n\n\n\nIf I convert the image to 8-bit first, there is no problem:\n\n\n\n    14:34:14:14414:gerrit@ubuntu10:~$ python\n    Python 2.6.6 (r266:84292, Sep 15 2010, 16:22:56) \n    [GCC 4.4.5] on linux2\n    Type ""help"", ""copyright"", ""credits"" or ""license"" for more information.\n    >>> import Image, numpy\n    >>> im = Image.open(\'/local/gerrit/benchmarking/images/lsm.png\')\n    >>> im = im.convert(\'L\') # convert to 8-bit\n    >>> print im\n    <Image.Image image mode=L size=21601x10801 at 0x2C63488>\n    >>> imd = numpy.array(im)\n    >>> print imd\n    [[  0   0   0 ...,   0   0   0]\n     [  0   0   0 ...,   0   0   0]\n     [  0   0   0 ...,   0   0   0]\n     ..., \n     [255 255 255 ..., 255 255 255]\n     [255 255 255 ..., 255 255 255]\n     [255 255 255 ..., 255 255 255]]\n\n\n\nIf I load a BMP instead of a PNG (also written by PIL), the same segfault occurs:\n\n\n\n    14:38:44:14416:gerrit@ubuntu10:~$ python\n    Python 2.6.6 (r266:84292, Sep 15 2010, 16:22:56) \n    [GCC 4.4.5] on linux2\n    Type ""help"", ""copyright"", ""credits"" or ""license"" for more information.\n    >>> import Image, numpy\n    >>> im = Image.open(\'/local/gerrit/benchmarking/images/lsm.bmp\')\n    >>> print im\n    <BmpImagePlugin.BmpImageFile image mode=1 size=21601x10801 at 0xDD5D40>\n    >>> numpy.array(im)\n    Segmentation fault\n\n\n\nI have attached lsm.png (784 KiB).'"
2287,7731222,numpy-gitbot,numpy-gitbot,2012-10-19 22:20:52,2012-10-19 22:20:53,2012-10-19 22:20:53,closed,,,4,11 - Bug;component: Other;priority: normal,https://api.github.com/repos/numpy/numpy/issues/2287,b'PyArray_FromArray: Properly handle F_CONTIGUOUS with 1D-arrays (Trac #1691)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/1691 on 2010-12-01 by trac user dagss, assigned to unknown._\n\nWhen passing F_CONTIGUOUS to PyArray_FromArray, one is NOT guaranteed an F_CONTIGUOUS array if ndim==1 (in that case one would have to pass C_CONTIGUOUS instead). I find this highly confusing and hope my patch is accepted.\n\nI could not find a way to exercise this from Python, hence no test case (the reason is that np.asfortranarray etc. seems to *always* copy, for some reason...perhaps that should be fixed too). See a Cython test case that gets fixed by this patch inline below.\n\nPatch:\n\nhttps://github.com/dagss/numpy/commit/c5f273898ccd4b4bd45715fdc54f629f6ee0532a\n\n\n\n    """"""\n        >>> a = np.zeros(10)[::2]\n        >>> a = as_f_contiguous_1d(a)\n        >>> a.flags.f_contiguous\n        True\n    """"""\n    \n    cimport numpy as np\n    import numpy as np\n    np.import_array()\n    def as_f_contiguous_1d(arr):\n        return np.PyArray_FROMANY(arr, np.NPY_DOUBLE, 1, 1, np.NPY_F_CONTIGUOUS) \n    \n    \n\n'"
2286,7731220,numpy-gitbot,numpy-gitbot,2012-10-19 22:20:49,2012-10-19 22:20:51,2012-10-19 22:20:51,closed,,1.6.0,4,11 - Bug;component: numpy.random;priority: normal,https://api.github.com/repos/numpy/numpy/issues/2286,"b'numpy.random.randint(-2147483648, 2147483647) raises ValueError: low >= high (Trac #1690)'","b'_Original ticket http://projects.scipy.org/numpy/ticket/1690 on 2010-11-30 by trac user tkf, assigned to @charris._\n\nFollowing example raises ""ValueError: low >= high"".\nIt looks like it is due to overflow of ""diff = hi - lo - 1"" in RandomState.randint.\n\n\n\n    import numpy\n    intinfo = numpy.iinfo(int)\n    numpy.random.randint(-1, intinfo.max)  # raises nothing\n    numpy.random.randint(intinfo.min, intinfo.max)\n    ## numpy.random.randint(-2, intinfo.max)  # raises ValueError too\n\n'"
2285,7731217,numpy-gitbot,charris,2012-10-19 22:20:45,2014-02-15 21:25:13,2014-02-15 21:25:13,closed,,,14,11 - Bug;component: numpy.core;priority: low,https://api.github.com/repos/numpy/numpy/issues/2285,b'fromstring segfaults if reading from text and dtype=bool_ (Trac #1689)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/1689 on 2010-11-30 by @gerritholl, assigned to @charris._\n\nThe code says it all:\n\n\n\n    $ python\n    Python 2.6.6 (r266:84292, Sep 15 2010, 16:22:56) \n    [GCC 4.4.5] on linux2\n    Type ""help"", ""copyright"", ""credits"" or ""license"" for more information.\n    >>> from numpy import fromstring, bool_, version\n    >>> print version.version\n    2.0.0.dev-12d0200\n    >>> fromstring(""1 1"", sep="" "", dtype=bool_)\n    Segmentation fault\n\n'"
2284,7731216,numpy-gitbot,ahaldane,2012-10-19 22:20:44,2015-09-25 02:47:55,2015-09-25 02:47:55,closed,,NumPy 2.0,5,11 - Bug;component: numpy.ma;priority: normal,https://api.github.com/repos/numpy/numpy/issues/2284,b'MaskedArray.__str__ fails with ValueError if data are record array (Trac #1688)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/1688 on 2010-11-29 by @gerritholl, assigned to @pierregm._\n\nWhen a MaskedArray\'s data are a record array,, string representation fails with a ValueError as the mask does not contain the mapping of field names that the data does.\n\nIt appears the records are not carried on to the mask.\n\n\n\n    $ python\n    Python 2.6.6 (r266:84292, Sep 15 2010, 16:22:56) \n    [GCC 4.4.5] on linux2\n    Type ""help"", ""copyright"", ""credits"" or ""license"" for more information.\n    >>> import numpy as np\n    >>> Z = np.empty((5,), dtype=[(\'A\', np.float32), (\'B\', np.uint32)])\n    >>> M = np.ma.masked_where(np.array([True, False, True, False, True]), Z)\n    >>> print M\n    Traceback (most recent call last):\n      File ""<stdin>"", line 1, in <module>\n      File ""/storage4/home/gerrit/.local/lib/python2.6/site-packages/numpy/ma/core.py"", line 3558, in __str__\n        _recursive_printoption(res, m, f)\n      File ""/storage4/home/gerrit/.local/lib/python2.6/site-packages/numpy/ma/core.py"", line 2292, in _recursive_printoption\n        (curdata, curmask) = (result[name], mask[name])\n    ValueError: field named A not found.\n    >>> print np.version.version\n    2.0.0.dev-12d0200\n\n'"
2283,7731215,numpy-gitbot,numpy-gitbot,2012-10-19 22:20:42,2012-10-19 22:20:43,2012-10-19 22:20:43,closed,,,3,11 - Bug;component: Documentation;priority: normal,https://api.github.com/repos/numpy/numpy/issues/2283,b'Example in documentation on default iteration in incorrect (Trac #1687)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/1687 on 2010-11-27 by @gerritholl, assigned to @pv._\n\nAccording to\n\nhttp://docs.scipy.org/doc/numpy/reference/arrays.classes.html#default-iteration\n\n_The default behavior [of _for val in arr_] is equivalent to:_\n\n\n\n    for i in arr.shape[0]:\n        val = arr[i]\n\n\n\nThis cannot be correct, because arr.shape[0] is an int and not iterable. Correct is:\n\n\n\n    for i in xrange(arr.shape[0]):\n        val = arr[i]\n\n'"
2282,7731213,numpy-gitbot,numpy-gitbot,2012-10-19 22:20:40,2012-10-19 22:20:40,2012-10-19 22:20:40,closed,,1.6.0,2,11 - Bug;component: Other;priority: normal,https://api.github.com/repos/numpy/numpy/issues/2282,b'relative imports for python 3 (Trac #1686)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/1686 on 2010-11-25 by trac user sunqiang, assigned to unknown._\n\nhttp://docs.python.org/dev/py3k/whatsnew/3.0.html#removed-syntax said: ""The only acceptable syntax for relative imports is from .[module] import name. All import forms not starting with . are interpreted as absolute imports. (PEP 0328)""\n\nline 128 and 129 of numpy/__init__.py:\n    from version import git_revision as __git_revision__\n    from version import version as __version__\nthey didn\'t follow PEP 0328, so it breaks Python 3.x port. got this error from Python 3.2a4 and NumPy\'s git.\n'"
2281,7731212,numpy-gitbot,pv,2012-10-19 22:20:38,2013-09-29 13:42:49,2013-09-29 13:42:49,closed,,NumPy 2.0,2,11 - Bug;component: numpy.lib;priority: normal,https://api.github.com/repos/numpy/numpy/issues/2281,"b""In savetxt check for 'write' and not for (unused) 'seek' (Trac #1685)""","b""_Original ticket http://projects.scipy.org/numpy/ticket/1685 on 2010-11-24 by trac user naufraghi, assigned to unknown._\n\nsavetxt checks if the first argument is a filename or a filelike object, but it checks for a 'seek' attr, even if in the code below only 'write' and 'close' are used."""
2280,7731211,numpy-gitbot,charris,2012-10-19 22:20:37,2014-02-15 23:51:58,2014-02-15 23:51:58,closed,,NumPy 2.0,2,11 - Bug;component: numpy.core;priority: normal,https://api.github.com/repos/numpy/numpy/issues/2280,b'numpy.allclose does not deal well with the minimal value of int* dtypes (Trac #1684)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/1684 on 2010-11-22 by trac user lamblin, assigned to unknown._\n\nIf I create an array containing the minimal value of an int dtype, for instance an \'int8\' array containing -128, numpy.allclose fails to detect it is ""close"" to itself, although it is equal.\n\n\n    >>> a = numpy.asarray(-128, dtype=\'int8\')\n    >>> numpy.all(a == a)\n    True\n    >>> numpy.allclose(a, a)\n    False\n\n\n\nI would expect:\n\n\n    >>> numpy.allclose(a, a)\n    True\n\n\n\nThis is due to the fact that the tolerance uses numpy.absolute, and in that case, it is negative:\n\n\n    >>> numpy.absolute(a)\n    array([-128], dtype=int8)\n\n\n\nI reproduced the same with int16 and -2**15, int32 and -2**31, and int64 and -2**63.'"
2278,7731208,numpy-gitbot,numpy-gitbot,2012-10-19 22:20:32,2012-10-19 22:20:34,2012-10-19 22:20:34,closed,,1.6.0,4,11 - Bug;priority: normal,https://api.github.com/repos/numpy/numpy/issues/2278,"b""ctypeslib.load_library isn't python 3 compatible. (Trac #1682)""","b'_Original ticket http://projects.scipy.org/numpy/ticket/1682 on 2010-11-20 by @drnlm, assigned to unknown._\n\nPEP 3110 changes the scoping of exceptions in python 3.\n\nctypeslib.load_library assumes the old python 2 scoping, and will throw an UnboundLocalError rather than properly re-raising the ctypes exception as a result.\n\nThe attached patch fixes this.'"
2277,7731206,numpy-gitbot,numpy-gitbot,2012-10-19 22:20:30,2012-10-19 22:20:31,2012-10-19 22:20:31,closed,,1.6.0,5,11 - Bug;component: Documentation;priority: normal,https://api.github.com/repos/numpy/numpy/issues/2277,b'Explain arange floating point issues in docstring (Trac #1681)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/1681 on 2010-11-19 by trac user hongdog, assigned to @pv._\n\nUsing spyder with python 2.6.2 and numpy 1.3.0 on Windows XP, I found the following problem.\n\n--------------\nIn [31]: arange(12.5,13,0.1)\nOut[31]: array([ 12.5,  12.6,  12.7,  12.8,  12.9]) # ""13.0"" is not here\n\nIn [32]: arange(12.6,13,0.1)\nOut[32]: array([ 12.6,  12.7,  12.8,  12.9,  13. ]) # ""13.0"" is here\n--------------\n\nAs shown, the ""end 13.0"" is not shown in 1st array, which is correct based on the document, but shown in 2nd array.  '"
2276,7731205,numpy-gitbot,seberg,2012-10-19 22:20:28,2013-12-12 23:09:41,2013-12-12 23:09:41,closed,,NumPy 2.0,7,11 - Bug;component: Other;priority: normal,https://api.github.com/repos/numpy/numpy/issues/2276,b'constructing an array out of the wrong type fails with SystemError (Trac #1680)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/1680 on 2010-11-19 by trac user exarkun, assigned to unknown._\n\n\n\n    \n    Python 2.6.4 (r264:75706, Dec  7 2009, 18:45:15) \n    [GCC 4.4.1] on linux2\n    Type ""help"", ""copyright"", ""credits"" or ""license"" for more information.\n    >>> class foo: pass\n    ... \n    >>> import numpy\n    >>> numpy.array([foo()], \'f\')\n    Traceback (most recent call last):\n      File ""<stdin>"", line 1, in <module>\n    SystemError: error return without exception set\n    >>> \n\n\n'"
2275,7731203,numpy-gitbot,numpy-gitbot,2012-10-19 22:20:26,2012-10-19 22:20:27,2012-10-19 22:20:27,closed,,1.6.0,2,11 - Bug;component: numpy.f2py;priority: normal,https://api.github.com/repos/numpy/numpy/issues/2275,b'f2py throws AssertionError on fortran 90 files which declare routines with C bindings (Trac #1679)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/1679 on 2010-11-19 by trac user davidpowell, assigned to @pearu._\n\nWhen running f2py on a fortran 90 file with the following contents:\n\n\n\n    interface\n        function my_func(x) bind(c,name=\'my_func\')\n            use iso_c_binding\n            real(c_double), intent(in) :: x\n            real(c_double) :: my_func\n        end function\n    end interface\n\n\n\nIt causes an exception in f2py, ending with the following line:\n\n\n\n      File ""C:\\Python26\\lib\\site-packages\\numpy\\f2py\\crackfortran.py"", line 665, in markoutercomma\n        assert not f,`f,line,l,cc`\n    AssertionError: (1, ""x@)@ bind@(@c,name=\'my_func\'"", ""x@)@ bind@(@c,name=\'my_func\'"", \')\')\n\n\n\nAs far as I understand this is just a bug in the parser, since f2py shouldn\'t care that my fortran code is internally calling C routines.\n'"
2274,7731202,numpy-gitbot,numpy-gitbot,2012-10-19 22:20:24,2012-10-19 22:20:24,2012-10-19 22:20:24,closed,,NumPy 2.0,2,11 - Bug;component: numpy.random;priority: normal,https://api.github.com/repos/numpy/numpy/issues/2274,b'problem in the poisson distribution (Trac #1678)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/1678 on 2010-11-18 by trac user gruel, assigned to unknown._\n\nI tried to use the poissonian distribution but I do think that there are a small problem with it. AS I am not a statician I am not sure but the plot attach seems a little bit strange.\n\nIt has been created pylab:\n\nhist(rand.poisson(100, 10000), 100)\n\nThe regular empty space are not normal.\n\nThe problem is present in 1.5 and also in 2.0.0.dev8597'"
2272,7731200,numpy-gitbot,numpy-gitbot,2012-10-19 22:20:20,2012-10-19 22:20:20,2012-10-19 22:20:20,closed,,1.5.1,2,11 - Bug;component: numpy.lib;priority: normal,https://api.github.com/repos/numpy/numpy/issues/2272,b'dtypes error in recfunctions (Trac #1676)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/1676 on 2010-11-16 by @WeatherGod, assigned to unknown._\n\nI was using append_fields() in numpy.lib.recfunctions when I discovered a slight logic mistake in handling the dtypes argument.\n\nThe code first checks to see if dtypes is None.  If so, it then guesses the dtype info from the input data.  Then, it goes to see if the dtypes is not a sequence and puts it into a list.  This is where the logic breaks down.  It then proceeds to use that dtypes to start merging the data.  However, if you pass in a sequence of dtype, that condition gets skipped and the rest of the function has to figure out the dtype (and ignores the supplied names as well).\n\nI have attached a patch to fix this.  I did not check the rest of the module to see if this mis-logic crops up anywhere else.'"
2271,7731198,numpy-gitbot,numpy-gitbot,2012-10-19 22:20:16,2014-05-12 12:05:18,2012-10-19 22:20:17,closed,,NumPy 1.7,2,11 - Bug;component: numpy.core;priority: normal,https://api.github.com/repos/numpy/numpy/issues/2271,b'No support for `__format__` in scalars/arrays (Trac #1675)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/1675 on 2010-11-15 by @pv, assigned to unknown._\n\nNumpy scalars and arrays don\'t work properly in the `format()` string formatting context:\n\n\n    >>> \'{0:d}\'.format(np.int16(1))\n    Traceback (most recent call last):\n      File ""<stdin>"", line 1, in <module>\n    ValueError: Unknown format code \'d\' for object of type \'str\'\n\n\nThe reason seems to be that the `__format__` method is inherited from `object`, and it converts the item to string via `str` first.\n\nThe correct fix seems to be to implement a properly formatting-code aware `__format__` ourselves. For most types, this can probably be done directly by calling PyInt\'s or PyFloat\'s routine. However, for e.g. long doubles we might want to implement the formatting ourselves.\n'"
2270,7731197,numpy-gitbot,numpy-gitbot,2012-10-19 22:20:13,2012-10-19 22:20:14,2012-10-19 22:20:14,closed,,NumPy 2.0,2,11 - Bug;component: Other;priority: normal,https://api.github.com/repos/numpy/numpy/issues/2270,b'Problems outputting elements of ndarray with numeric formatting (Trac #1674)',"b""_Original ticket http://projects.scipy.org/numpy/ticket/1674 on 2010-11-15 by trac user pv00, assigned to unknown._\n\nHi, what is the best way to print (to a file or to stdout)\nformatted numerical values?\n\nNumpy Documentation only discusses input *from* a file,\nor output of entire arrays.\nI just want tab or space-delimited output of formatted values.\n\nI tried to follow python documentation and find errors. Below is ipython -pylab transcript:\n\nIn [2] import numpy as np\nIn [3]: w = np.arange (1,5,dtype=np.int32).reshape((2,2))\nIn [4]: w\nOut[4]: \narray([[1, 2],\n       [3, 4]], dtype=int32)\n\nIn [5]: w[0,0]\nOut[5]: 1\n\nIn [6]: w[0,0].__class__\nOut[6]: <type 'numpy.int32'>\n\nIn [7]: print('{0:2d}'.format(w[0,0]))\n---------------------------------------------------------------------------\nValueError                                Traceback (most recent call last)\n\n/home/p/o/dev/thesis/python/wavelet/<ipython console> in <module>()\n\nValueError: Unknown format code 'd' for object of type 'str'\n\nIn [8]: \n"""
2268,7731195,numpy-gitbot,numpy-gitbot,2012-10-19 22:20:08,2012-10-19 22:20:10,2012-10-19 22:20:10,closed,,1.6.0,6,11 - Bug;component: numpy.core;priority: normal,https://api.github.com/repos/numpy/numpy/issues/2268,"b""numpy.allclose raises IndexError on scalar 'inf' (Trac #1672)""","b'_Original ticket http://projects.scipy.org/numpy/ticket/1672 on 2010-11-12 by trac user lamblin, assigned to unknown._\n\n>>> numpy.allclose(inf, inf), with inf = float(\'inf\'),\nraises the following exception :\n\n  File ""/usr/lib/python2.6/dist-packages/numpy/core/numeric.py"", line 1671, in allclose\n    if not all(x[xinf] == y[xinf]):\nIndexError: 0-d arrays can\'t be indexed\n\nThe expected behavior is the one of 1-d arrays:\n\n>>> numpy.allclose([inf], [inf])\n\nTrue\n\nThe following work as expected:\n- numpy.allclose(inf, 2) # False\n- numpy.allclose(inf, [inf, 2]) # False\n- numpy.allclose([inf], [inf]) # True\n\nThe following don\'t, and raise the mentionned exception:\n- numpy.allclose(inf, inf)\n- numpy.allclose(inf, [inf])\n- numpy.allclose(inf, [inf, inf])\n\nI\'m using version 1.4.1, but the code does not seem to have change in current git repository.'"
2267,7731193,numpy-gitbot,numpy-gitbot,2012-10-19 22:20:05,2012-10-19 22:20:07,2012-10-19 22:20:07,closed,,1.6.0,4,11 - Bug;component: numpy.core;priority: normal,https://api.github.com/repos/numpy/numpy/issues/2267,"b""scalars don't raise overflow/underflow/divbyzero/invalid (Trac #1671)""","b'_Original ticket http://projects.scipy.org/numpy/ticket/1671 on 2010-11-11 by @mwiebe, assigned to unknown._\n\nAll these cases should be raising, I believe:\n\n\n\n    >>> import numpy as np\n    >>> err = np.seterr(all=\'raise\')\n    \n    >>> np.float32(1e-38) / np.float32(1e30)\n    0.0\n    >>> np.float32(1e-38) / np.array(1e38,np.float32)\n    0.0\n    >>> np.array(1e-38,np.float32) / np.float32(1e30)\n    Traceback (most recent call last):\n      File ""<stdin>"", line 1, in <module>\n    FloatingPointError: underflow encountered in divide\n    \n    >>> np.float64(1e-300) / np.float64(1e300)\n    0.0\n    >>> np.float64(1e-300) / np.array(1e300, dtype=np.float64)\n    0.0\n    >>> np.array(1e-300, dtype=np.float64) / np.float64(1e300)\n    Traceback (most recent call last):\n      File ""<stdin>"", line 1, in <module>\n    FloatingPointError: underflow encountered in divide\n    \n    >>> np.float32(1) / np.float32(0)\n    inf\n    >>> np.array(1,dtype=np.float32) / np.float32(0)\n    Traceback (most recent call last):\n      File ""<stdin>"", line 1, in <module>\n    FloatingPointError: divide by zero encountered in divide\n    \n    >>> np.inf-np.inf\n    nan\n    >>> np.array(np.inf)-np.inf\n    Traceback (most recent call last):\n      File ""<stdin>"", line 1, in <module>\n    FloatingPointError: invalid value encountered in subtract\n    \n\n\n'"
2265,7731191,numpy-gitbot,numpy-gitbot,2012-10-19 22:20:02,2012-10-19 22:20:02,2012-10-19 22:20:02,closed,,NumPy 2.0,1,11 - Bug;component: Other;priority: normal,https://api.github.com/repos/numpy/numpy/issues/2265,b'Numpy for symbian s60 (Trac #1669)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/1669 on 2010-11-10 by trac user jimver, assigned to unknown._\n\nHi,\n\nI am making an application in python and I want to install it to my mobile phone that runs Symbian S60 3rd gen. \n\nThe hello world application works perfect, but when I am importing numpy and install the application I get the message in the mobile screen that numpy is not found!\n\nI there any package like numpy.sis that I can install to the phone?\n\nI am using:\n- Windows 7\n\n- Python 2.5.4\n\n- Python for S60:  Python_2_0_0.sis  and PIPS.sis \n\n- Numpy 1.3.0\n\nThe Python and numpy versions are not the latests, but they are the latests that work with Python for S60 .sis file at this moment (10Nov10). \n\nBR,\n\nDimitrios Ververidis\n\ndimitriosververidis.blogspot.com\n'"
2264,7731190,numpy-gitbot,charris,2012-10-19 22:20:00,2013-06-17 00:55:48,2013-06-17 00:55:48,closed,,NumPy 2.0,4,11 - Bug;component: numpy.ma;priority: normal,https://api.github.com/repos/numpy/numpy/issues/2264,b'Masked array calculations memory leak (Trac #1668)',"b""_Original ticket http://projects.scipy.org/numpy/ticket/1668 on 2010-11-09 by trac user storpipfugl, assigned to @pierregm._\n\nTest code: [[BR]]\n--- [[BR]]\nmem_leak_ma.py[[BR]]\n---\n\nDescription:[[BR]]\nUse mem_leak_ma.py. At the raw_input('check_mem') line the array data_array and masked array cal_data_array are the only arrays in scope. Base memory consumption before calculation is 95 MB. Expected memory consumption at end of test program: 3712**2*(8*2 + 1)/10**6 + 95 = 329 MB. Readout from /proc/<pid>/status at line raw_input('check_mem'):\n\n\n    VmPeak:   848092 kB\n    VmSize:   484768 kB\n\n\nThis leaves 156 MB unaccounted for (VmSize).\n\nExpected behavior:\nThe memory usage at the end of the test program is expected to be comparable to the corresponding example with a regular ndarray plus memory usage for the mask.\n\nWorking code:[[BR]]\n---[[BR]]\nmem_leak.py[[BR]]\n---\n\nUse mem_leak.py. Readout from /proc/<pid>/status at line raw_input('check_mem'):\n\n\n    VmPeak:   417416 kB\n    VmSize:   309768 kB\n\n\nas expected (VmSize).\n\nSystem:[[BR]]\nUbuntu linux 10.04 64 bit[[BR]]\nPython 2.6.5[[BR]]\nReproduced with numpy 1.3.0 and 1.5.0  [[BR]]"""
2261,7731185,numpy-gitbot,rgommers,2012-10-19 22:19:52,2013-09-29 18:46:32,2013-09-29 18:46:32,closed,,NumPy 2.0,6,11 - Bug;component: Other;priority: normal,https://api.github.com/repos/numpy/numpy/issues/2261,b'genfromtxt returns inconsistent output if column converters are used (Trac #1665)',"b""_Original ticket http://projects.scipy.org/numpy/ticket/1665 on 2010-11-08 by trac user dmoore, assigned to @pierregm._\n\n_Disclaimer: This was tested on 1.4.1 I don't know if it was addressed in 1.5 (I suspect not based on mailing list correspondence)._\n\nSimple example of the issue:\n\n\n\n    >>> import numpy, StringIO\n    >>>\n    >>> s=StringIO.StringIO('q1,2\\nq3,4')\n    >>> a=numpy.genfromtxt(s,delimiter=',',converters={0:lambda s:float(s[1:])})\n    >>> a\n    array([(1.0, 2.0), (3.0, 4.0)],\n          dtype=[('f0', '|O4'), ('f1', '<f8')])\n\n\n\nNotice that this is a 1d array of tuples. Since the data are effectively the same type, it would have been preferrable to receive 2d output. Note that specifying the dtype does not help:\n\n\n\n    >>> s=StringIO.StringIO('q1,2\\nq3,4')\n    >>> a=numpy.genfromtxt(s,delimiter=',',converters={0:lambda s:float(s[1:])},dtype=float)\n    >>> a\n    array([(1.0, 2.0), (3.0, 4.0)],\n          dtype=[('f0', '|O4'), ('f1', '<f8')])\n\n\n\ndtype appears to be ignored.\n\nStrangely, however, if the data column could be interpreted without the converter, then the output is produced as desired even if the converter is used:\n\n\n\n    >>> s=StringIO.StringIO('1,2\\n3,4')\n    >>> a=numpy.genfromtxt(s,delimiter=',',converters={0:lambda s:float(s)})\n    >>> a\n    array([[ 1.,  2.],\n           [ 3.,  4.]])\n\n"""
2260,7731182,numpy-gitbot,charris,2012-10-19 22:19:50,2014-02-19 17:33:46,2014-02-19 17:33:46,closed,,NumPy 2.0,4,11 - Bug;component: numpy.core;priority: normal,https://api.github.com/repos/numpy/numpy/issues/2260,b'spacing/nextafter failure on OS X PPC (Trac #1664)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/1664 on 2010-11-08 by @rgommers, assigned to unknown._\n\nOnly the longdouble version fails, as reported by Friedrich Romstedt on-list a few days ago. It should be checked if this can be fixed, if not it can be marked as knownfail like done in the 1.5.x branch in [516aa4a5d1e](http://github.com/numpy/numpy/commit/516aa4a5d1e).'"
2259,7731180,numpy-gitbot,numpy-gitbot,2012-10-19 22:19:48,2012-10-19 22:19:49,2012-10-19 22:19:49,closed,,NumPy 2.0,1,11 - Bug;component: Other;priority: normal,https://api.github.com/repos/numpy/numpy/issues/2259,b'Cannot import numpy (Trac #1663)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/1663 on 2010-11-05 by trac user mstewart, assigned to unknown._\n\nI use macports to update python and numpy software. I recently accomplished a selfupdate and deliberately executed an install of py27-numpy which appeared to \'work.\' I still cannot import numpy within python:\n\n>>> import numpy\nTraceback (most recent call last):\n  File ""<stdin>"", line 1, in <module>\nImportError: No module named numpy\n\nFollowing examples in another bug report, I attempted to append to the sys.path:\n\n>>> sys.path.append(\'/opt/local/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/numpy\')\n\n...but the same error appeared.\n'"
2258,7731178,numpy-gitbot,numpy-gitbot,2012-10-19 22:19:46,2012-10-19 22:19:47,2012-10-19 22:19:47,closed,,1.6.0,3,11 - Bug;component: Other;priority: normal,https://api.github.com/repos/numpy/numpy/issues/2258,b'nonzero() requires swap for float types (Trac #1662)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/1662 on 2010-11-05 by @mwiebe, assigned to unknown._\n\nThe current floating-point nonzero() implementation is incorrect for non-native byte order.  Swapping the order should have no effect, but it can change the result as visible here:\n\n\n\n    >>> import numpy as np\n    >>> a = np.array([0x80000000, 0x00000080, 0], dtype=np.uint32)\n    >>> a.dtype = np.float32\n    >>> print a.nonzero()\n    (array([1]),)\n    >>> print a.byteswap().newbyteorder().nonzero()\n    (array([0]),)\n\n\n\n'"
2257,7731176,numpy-gitbot,numpy-gitbot,2012-10-19 22:19:43,2012-10-19 22:19:45,2012-10-19 22:19:45,closed,,,4,11 - Bug;component: Other;priority: normal,https://api.github.com/repos/numpy/numpy/issues/2257,b'rint(0.5) = 0 ? why? (Trac #1661)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/1661 on 2010-11-03 by trac user fegdri, assigned to unknown._\n\nWhat is wrong with rint, round, around functions?\n\n\n\n    >>> a = np.array([-2.5, -1.5, -1.4, -0.5, 0.5, 1.5, 2.5, 3.4])\n    >>> np.rint(a)\n    array([-2., -2., -1., -0.,  0.,  2.,  2.,  3.])\n    >>> np.around(a)\n    array([-2., -2., -1., -0.,  0.,  2.,  2.,  3.])\n    >>> np.round(a)\n    array([-2., -2., -1., -0.,  0.,  2.,  2.,  3.])\n    >>> np.round_(a)\n    array([-2., -2., -1., -0.,  0.,  2.,  2.,  3.])\n\n\n\nHow can it be that -2 is the nearest number to both -2.5 and -1.5?\n\nI was expecting to see\n\n\n    array([-3., -2., -1., -1., 1., 2., 3., 3.])\n\n\n\n---\n\nVersion: 1.5.1rc1 (win32, python2.7)'"
2256,7731173,numpy-gitbot,numpy-gitbot,2012-10-19 22:19:38,2012-10-19 22:19:42,2012-10-19 22:19:42,closed,,1.5.1,17,11 - Bug;component: numpy.core;priority: normal,https://api.github.com/repos/numpy/numpy/issues/2256,b'~2**32 byte tofile()/fromfile() limit in 64-bit Windows (Trac #1660)',"b""_Original ticket http://projects.scipy.org/numpy/ticket/1660 on 2010-11-03 by trac user mspacek, assigned to @charris._\n\nI'm using Christoph Gohlke's amd64 builds (http://www.lfd.uci.edu/~gohlke/pythonlibs/#numpy) on 64-bit Windows 7, with the official Python 2.6.6 amd64 install. I can't tofile() or save() or fromfile() numpy arrays roughly > 2**32 bytes. For save() and tofile() Python hangs, using 100% CPU on one core. For fromfile(), it raises an IOError. This doesn't happen in 64-bit Linux on the same machine. load() seems to work on any size of file. Here are some examples, and some caveats:\n\n\n\n    # if .tofile() hangs, it hangs immediately:\n    np.zeros(2**32+2**16, np.int8).tofile('test.npy') # hangs, file is 2**16 bytes\n    np.zeros(2**32+2**2,  np.int8).tofile('test.npy') # hangs, file is 0 bytes\n    np.zeros(2**32+2,     np.int8).tofile('test.npy') # hangs, file is 0 bytes\n    np.zeros(2**32+1,     np.int8).tofile('test.npy') # hangs, file is 0 bytes\n    np.zeros(2**32,       np.int8).tofile('test.npy') # hangs, file is 0 bytes\n    np.zeros(2**32-1,     np.int8).tofile('test.npy') # works\n    \n    # if np.save() hangs, it takes a while for it to hang:\n    np.save('test.npy', np.zeros(2**33, np.int8)) # hangs, file is 2**32 bytes, npy header is intact\n    np.save('test.npy', np.zeros(2**33-1, np.int8)) # hangs, file is 2**32 bytes, npy header is intact\n    np.save('test.npy', np.zeros(2**32+2**31, np.int8)) # hangs, file is 2**31 bytes, npy header is intact\n    np.save('test.npy', np.zeros(2**32+2**16, np.int8)) # hangs, file is 2**16 bytes, npy header is intact\n    np.save('test.npy', np.zeros(2**32+2**12, np.int8)) # hangs, file is 2**12 bytes, npy header is intact\n    np.save('test.npy', np.zeros(2**32+2**11, np.int8)) # works\n    np.save('test.npy', np.zeros(2**32+2**10, np.int8)) # works\n    np.save('test.npy', np.zeros(2**32+2**8, np.int8)) # works\n    np.save('test.npy', np.zeros(2**32+2**4, np.int8)) # works\n    np.save('test.npy', np.zeros(2**32+2**2, np.int8)) # works\n    np.save('test.npy', np.zeros(2**32+2, np.int8)) # works\n    np.save('test.npy', np.zeros(2**32+1, np.int8)) # works\n    np.save('test.npy', np.zeros(2**32, np.int8)) # works\n    \n    # I also generated these 3 large files successfully in 64-bit Linux...\n    np.zeros(2**33, np.int8).tofile('test1.npy') # 8 GB\n    np.zeros(2**32, np.int8).tofile('test2.npy') # 4 GB\n    np.save('test3.npy', np.zeros(2**33, np.int8)) # 8 GB\n    \n    # ...and then tried reading them back in 64-bit Win7:\n    a = np.fromfile('test1.npy', dtype=np.int8) # IOError: could not seek in file\n    a = np.fromfile('test2.npy', dtype=np.int8) # IOError: could not seek in file\n    a = np.load('test3.npy') # strangely enough, this works fine, even though it's 8 GB!\n\n\n\nI have this problem regardless of which of Christoph's amd64 numpy builds (1.4.1, 1.5.0, 1.5.1RC1, MKL or non-MKL) I use. This happens on both my 64-bit Win7 i7 12 GB machine, and on another machine running 64-bit WinXP. Christoph has also confirmed this on Python 2.5 through 3.1 and says there is nothing special about his builds, and that this will affect all 64-bit Windows distributions of numpy (EPD, ActiveState, etc).\n"""
2255,7731170,numpy-gitbot,numpy-gitbot,2012-10-19 22:19:36,2012-10-19 22:19:36,2012-10-19 22:19:36,closed,,1.6.0,2,11 - Bug;component: numpy.core;priority: low,https://api.github.com/repos/numpy/numpy/issues/2255,"b""docstring for 'spacing' has a mistake. (Trac #1659)""","b""_Original ticket http://projects.scipy.org/numpy/ticket/1659 on 2010-11-02 by @WarrenWeckesser, assigned to unknown._\n\nThe example in the docstring for the 'spacing' function has a mistake; the line\n\n\n        >>> np.spacing(1, 2) == np.finfo(np.float64).eps\n\n\nshould be\n\n\n        >>> np.spacing(1) == np.finfo(np.float64).eps\n\n"""
2254,7731168,numpy-gitbot,charris,2012-10-19 22:19:34,2014-02-19 23:53:46,2014-02-19 23:53:46,closed,,,1,11 - Bug;component: Other;priority: normal,https://api.github.com/repos/numpy/numpy/issues/2254,b'arrays with 0-length unicode strings does not unpickle well (Trac #1658)',"b""_Original ticket http://projects.scipy.org/numpy/ticket/1658 on 2010-11-02 by @FrancescAlted, assigned to unknown._\n\nThis reproduces the problem:\n\n\n\n    >>> pickle.loads(pickle.dumps(np.array(u'a')))  # 1-length works well\n    \n    array(u'a', \n          dtype='<U1')\n    \n    >>> pickle.loads(pickle.dumps(np.array(u'')))  # 0-length does not work\n    ---------------------------------------------------------------------------\n    TypeError                                 Traceback (most recent call last)\n    \n    /tmp/tables-2.2/<ipython console> in <module>()\n    \n    /usr/local/lib/python2.6/pickle.pyc in loads(str)\n       1372 def loads(str):\n       1373     file = StringIO(str)\n    -> 1374     return Unpickler(file).load()\n       1375 \n       1376 # Doctest\n    \n    \n    /usr/local/lib/python2.6/pickle.pyc in load(self)\n        856             while 1:\n        857                 key = read(1)\n    --> 858                 dispatch[key](self)\n        859         except _Stop, stopinst:\n        860             return stopinst.value\n    \n    /usr/local/lib/python2.6/pickle.pyc in load_reduce(self)\n       1131         args = stack.pop()\n       1132         func = stack[-1]\n    -> 1133         value = func(*args)\n       1134         stack[-1] = value\n       1135     dispatch[REDUCE] = load_reduce\n    \n    TypeError: data type not understood\n    \n\n"""
2252,7731165,numpy-gitbot,numpy-gitbot,2012-10-19 22:19:30,2012-10-19 22:19:31,2012-10-19 22:19:31,closed,,1.5.1,3,11 - Bug;component: Other;priority: normal,https://api.github.com/repos/numpy/numpy/issues/2252,b'genfromtxt bug with delimiter is int type (Trac #1656)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/1656 on 2010-10-31 by trac user sunqiang, assigned to @pierregm._\n\nfrom userguide http://docs.scipy.org/doc/numpy/user/basics.io.genfromtxt.html#the-delimiter-argument (the second example):\n>>> import numpy as np\n>>> from StringIO import StringIO\n>>> data = ""  1  2  3\\n  4  5 67\\n890123  4""\n>>> np.genfromtxt(StringIO(data), delimiter=3)\n------------------------------------------------------------\nTraceback (most recent call last):\n  File ""<ipython console>"", line 1, in <module>\n  File ""C:\\Python27\\lib\\site-packages\\numpy\\lib\\npyio.py"", line 1451, in genfrom\ntxt\n    raise ValueError(errmsg)\nValueError: Some errors were detected !\n    Line #3 (got 3 columns instead of 4)\n\n>>> np.__version__\n\'1.5.1rc1\'\n\nquick and dirty fix: \ninsert ""line = line.rstrip()"" at line 212 of C:\\Python27\\Lib\\site-packages\\numpy\\lib\\_iotools.py, aka, the first line of method _fixedwidth_splitter(self, line) of class LineSplitter:\n'"
2251,7731163,numpy-gitbot,numpy-gitbot,2012-10-19 22:19:28,2012-10-19 22:19:29,2012-10-19 22:19:29,closed,,1.5.1,4,11 - Bug;component: numpy.linalg;priority: normal,https://api.github.com/repos/numpy/numpy/issues/2251,b'Poor precision using linalg.solve for certain matrices (Trac #1655)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/1655 on 2010-10-30 by trac user zoof, assigned to @pv._\n\nThere appears to be a bug in either the linear system solver or in the way than linalg computes LU decompositions.  On a number of different distributions, using somewhat different versions of numpy, I get much better precision by inverting the matrix (linalg.inv) and multiplying than by either linalg.solve alone or linalg.cholesky in combination with linalg.solve.  An example has been posted to: http://pastebin.com/KpXdTVh7\n\nnumpy 1.3.0 on Ubuntu Lucid\nnumpy 1.5.0 on Arch\nnumpy 1.5.1rc1 on Centos'"
2250,7731162,numpy-gitbot,numpy-gitbot,2012-10-19 22:19:26,2012-10-19 22:19:26,2012-10-19 22:19:26,closed,,NumPy 2.0,2,11 - Bug;component: Other;priority: normal,https://api.github.com/repos/numpy/numpy/issues/2250,b'possible race condition with savez (Trac #1654)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/1654 on 2010-10-29 by trac user unclepedro, assigned to unknown._\n\nHi,\n\nnp.savez is not multi-process safe, because it always uses gettempdir() + key + "".npy"". So, if you\'re running the same script over different data sets, you will roach your own data when one process removes the /tmp/arr_0.npy of another process.\n\nAs luck would have it, I\'m in that exact situation, so I have an example error:\n\nTraceback (most recent call last):\n  File ""/home/pedro/prospectus/prelim/bbvs/bin/skldthresh"", line 99, in <module>\n    main()\n  File ""/home/pedro/prospectus/prelim/bbvs/bin/skldthresh"", line 90, in main\n    np.savez(""%smask-t%0.2f"" % (outfile,threshold), result)\n  File ""/usr/lib/python2.5/site-packages/numpy/lib/io.py"", line 230, in savez\n    zip.write(filename, arcname=fname)\n  File ""/usr/lib/python2.5/zipfile.py"", line 541, in write\n    st = os.stat(filename)\nOSError: [Errno 2] No such file or directory: \'/tmp/arr_0.npy\'\n\nFortunately, replacing tempfile.gettempdir() with tempfile.mkdtemp() AND remembering to clean up at the end with os.rmdir(direc) is all it takes to fix it as far as I can tell. \n\nAttached is a patch.\n\n'"
2247,7731159,numpy-gitbot,seberg,2012-10-19 22:19:21,2013-11-10 22:19:21,2013-11-10 22:19:21,closed,,,1,11 - Bug;component: Other;priority: normal,https://api.github.com/repos/numpy/numpy/issues/2247,b'Inconsistency with __index__() for rank-1 arrays? (Trac #1651)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/1651 on 2010-10-28 by @FrancescAlted, assigned to unknown._\n\nI find this a bit misleading:\n\n\n\n    >>> a = np.arange(10)\n    \n    >>> a[np.array(0)]\n    0\n    \n    >>> a[np.array([0])]\n    array([0])\n    \n    >>> a[[0]]\n    array([0])\n\n\n\nBut, for regular python lists we have:\n\n\n\n    >>> l = a.tolist()\n    \n    >>> l[np.array(0)]\n    0\n    \n    >>> l[np.array([0])]\n    0\n\n\n\ni.e. indexing with a rank-0 array and a rank-1 array with one single element return the same result, which I find inconsistent with the expected behaviour for this case, i.e.:\n\n\n\n    >>> l[[0]]\n    ---------------------------------------------------------------------------\n    TypeError                                 Traceback (most recent call \n    last)\n    \n    /tmp/tables-2.2/<ipython console> in <module>()\n    \n    TypeError: list indices must be integers, not list\n\n\n\nThe ultimate reason for all of this is:\n\n\n\n    >>> np.array(0).__index__()\n    0\n    \n    >>> np.array([0]).__index__()\n    0\n\n\n\nBut I wonder why !NumPy needs the latter behaviour, instead of the more logical:\n\n\n\n    >>> np.array([0]).__index__()\n    ---------------------------------------------------------------------------\n    TypeError                                 Traceback (most recent call \n    last)\n    \n    /tmp/tables-2.2/<ipython console> in <module>()\n    \n    TypeError: only rank-0 integer arrays can be converted to an index\n\n\n\nThis inconsistency has indeed introduced a bug in my application and for solving this I\'d need something like:\n\n\n\n    def is_idx(index):\n        """"""Check if an object can work as an index or not.""""""\n    \n        if hasattr(index, ""__index__""):  # Only works on Python 2.5 on\n            if (hasattr(index, ""shape"") and index.shape == (1,)):\n                return False\n            try:\n                idx = index.__index__()\n                return True\n            except TypeError:\n                return False\n    \n        return False\n\n\n\ni.e. for determining if an object can be an index or not, I need to \nexplicitly check for a shape different from (1,), which is unnecessarily complicated.\n\nSo I find the current behaviour prone to introduce errors in apps and I\'m wondering why exactly `np.array([1])` should work as an index at all. It would not be better if `np.array([1]).__index__()` would raise a `TypeError`?\n\nThanks'"
2246,7731157,numpy-gitbot,charris,2012-10-19 22:19:20,2014-02-19 17:31:47,2014-02-19 17:31:47,closed,,NumPy 2.0,2,11 - Bug;component: Official binaries;priority: normal,https://api.github.com/repos/numpy/numpy/issues/2246,b'Notify re-distributors of binaries on SSE2/3 issues (Trac #1650)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/1650 on 2010-10-27 by @pv, assigned to @rgommers._\n\nThe fact that the superpack Windows binary is SSE3-optimized can be confusing for binary redistributors (e.g. users of `py2exe` or similar tools). See #2242 and http://code.google.com/p/anki/issues/detail?id=1570\n\nSomewhere (preferably in the installer?) we probably need to add a notice for binary re-distributors that if they intend to share the installed Numpy libraries further, they should pick the no-SSE version.\n\n(It might also be nice if Numpy could check what is was compiled with and fail on import with an error message...)\n'"
2245,7731156,numpy-gitbot,numpy-gitbot,2012-10-19 22:19:18,2012-10-19 22:19:18,2012-10-19 22:19:18,closed,,NumPy 2.0,2,11 - Bug;component: Official binaries;priority: normal,https://api.github.com/repos/numpy/numpy/issues/2245,b'Strange array behavior in numpy c extension (Trac #1649)',"b""_Original ticket http://projects.scipy.org/numpy/ticket/1649 on 2010-10-25 by trac user c00kiemonster, assigned to @rgommers._\n\nI don't know whether I have made some very trivial mistake here, but I think there is something fishy going on in this particular example of mine.\n\nI have attached four files:\nC_arraytest.h\nsetup.py\ntests.py\nweird.c\n\nI am basically making some numpy c extensions, as described on this page (http://www.scipy.org/Cookbook/C_Extensions/NumPy_arrays). In this very simple example of mine I have included a c extension that returns the same 1d array that it has been given as a parameter (ie a new array, but identical in size and data). Everything works as expected, at least until i feed it with a 1d array that has come from slicing a column from a 2d array. In that case it doesn't return the expected values, instead it seems to be taking the values from the original 2d array. I think this has something to do with the way the pointer is iterating through the data of the 2d array and not the sliced out 1d array. Feel free to compile the c extension (weird.c) and run the tests.py script to replicate the behavior.\n\nI don't really know if this is a bug, but it took me a very long time to weed this particular behavior out (the script in which I found the issue is very much larger) so I thought I'd let you guys know in case there is some bug hidden in there."""
2244,7731155,numpy-gitbot,charris,2012-10-19 22:19:16,2015-10-04 15:11:51,2015-10-04 15:11:51,closed,,NumPy 2.0,0,11 - Bug;component: Other;priority: normal,https://api.github.com/repos/numpy/numpy/issues/2244,"b""Masked round() doesn't work on zero dimensional vectors (Trac #1648)""","b'_Original ticket http://projects.scipy.org/numpy/ticket/1648 on 2010-10-25 by trac user andylei, assigned to unknown._\n\n>>> import numpy as np\n>>> x = np.ma.array(np.array(1.1))\n>>> np.round(x)\nAttributeError\n\n>>> np.ma.round(x)\nAttributeError\n'"
2243,7731154,numpy-gitbot,numpy-gitbot,2012-10-19 22:19:15,2012-10-23 02:45:06,2012-10-19 22:19:15,closed,,NumPy 2.0,1,11 - Bug;component: numpy.core;priority: normal,https://api.github.com/repos/numpy/numpy/issues/2243,b'int32() different behaviour under 1.3.0 and 1.4.1 for single-element arrays (Trac #1647)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/1647 on 2010-10-24 by trac user phaustus, assigned to unknown._\n\nHi,\n\nUnder numpy 1.4.1, the output of:\n\n> int32(array([0.]))\n\nis simply ""0"", whereas under numpy 1.3.0, the output is\n""array([0], dtype=int32)"".  While the former is a number,\nthe latter is an array.  Interestingly, the output for \n\n> int32(array([0.,1.]))\n\nand for\n\n> int32(array([]))\n\nis the same in each version (i.e., both return arrays).\n\nI apologize if this has already been addressed.  I did a search and found nothing.\n\nCheers,\n\nPhaustus\n\n'"
2242,7731151,numpy-gitbot,numpy-gitbot,2012-10-19 22:19:10,2012-10-23 02:45:02,2012-10-19 22:19:13,closed,,NumPy 2.0,9,11 - Bug;component: Official binaries;priority: low,https://api.github.com/repos/numpy/numpy/issues/2242,b'numpy crash inside anki (and mathplotlib) (Trac #1646)',"b""_Original ticket http://projects.scipy.org/numpy/ticket/1646 on 2010-10-24 by trac user batusek, assigned to unknown._\n\nFor a long time I have been trying to solve the issue of crashing anki (spaced repetition learning program) in the numpy library. The issue is tracked here (http://code.google.com/p/anki/issues/detail?id=1570), I will try to summarize it.\n\nAnki for Windows crashes with the message like (the offset changes in time). :\n\nAppName: anki.exe\t AppVer: 0.1.0.0\t ModName: numpy.core._dotblas.pyd\nModVer: 0.0.0.0\t Offset: 00010ffd\n\n\nNow some facts:\n- numpy is called from mathplotlib\n- anki crashes only in some environments (e.g on my desktop PC with Windows XP CZ SP3), while it perfectly works on the others (e.g. my laptop with Windows XP CZ SP3)\n- the crash doesn't occur, when development version of numpy is used (I mean .py instead of the .pyd library) :-(\n- several numpy versions have been tried and all cause the same behavior\n\nThe error probably occurs somewhere around the following lines:\n\n        FigureCanvas.setSizePolicy(self,\n                                   QSizePolicy.Expanding,\n                                   QSizePolicy.Fixed)\n        FigureCanvas.updateGeometry(self)\n\nI am able to do some traces, if you provide my with a debug version of the library. Or, I would at least need any ideas how to reproduce the bug in the development environment. Or I would need some instructions how to build my own version of the numpy.core._dotblas.pyd library so that I can add there some debug traces.\n\nI am able to cooperate to find the root cause of this defect."""
2241,7731150,numpy-gitbot,numpy-gitbot,2012-10-19 22:19:09,2012-10-19 22:19:09,2012-10-19 22:19:09,closed,,NumPy 2.0,1,11 - Bug;component: numpy.core;priority: normal,https://api.github.com/repos/numpy/numpy/issues/2241,b'Setting a value to an indexed array with composite dtype using where or a boolean mask silently fails (Trac #1645)',"b""_Original ticket http://projects.scipy.org/numpy/ticket/1645 on 2010-10-20 by trac user pch, assigned to unknown._\n\nThe following ways to set an array with composite dtype (or fwiw a recarray) fail. Only using a slice works correctly\n\n\n\n    >>> a=zeros((10,), dtype=[('f',int)])\n    >>> a\n    array([(0,), (0,), (0,), (0,), (0,), (0,), (0,), (0,), (0,), (0,)], \n          dtype=[('f', '<i8')])\n    \n    >>> i=array(range(10))\n    >>> a[i<=5]['f'] = 1\n    >>> a\n    array([(0,), (0,), (0,), (0,), (0,), (0,), (0,), (0,), (0,), (0,)], \n          dtype=[('f', '<i8')])\n    \n    >>> a[where(i<=5)]['f'] = 1\n    >>> a\n    array([(0,), (0,), (0,), (0,), (0,), (0,), (0,), (0,), (0,), (0,)], \n          dtype=[('f', '<i8')])\n    \n    >>> a[0:5:2]['f'] = 1\n    >>> a\n    array([(1,), (0,), (1,), (0,), (1,), (0,), (0,), (0,), (0,), (0,)], \n          dtype=[('f', '<i8')])\n    \n\n\n"""
2240,7731147,numpy-gitbot,numpy-gitbot,2012-10-19 22:19:06,2012-10-23 02:44:57,2012-10-19 22:19:06,closed,,,1,11 - Bug;component: numpy.testing;priority: normal,https://api.github.com/repos/numpy/numpy/issues/2240,b'numpy.test() fails test_umath_complex.TestClog on Solaris 5.10 (Trac #1644)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/1644 on 2010-10-20 by trac user lytenyn, assigned to unknown._\n\nRunning numpy.test() fails one test on Sun Solaris 5.10. This is IMHO not a critical test. Do you agree with that?\n\nIf so, could you please mark this test as a known failure, in order to not scare other users? Thanks in advance!\n\nThe following test is failing: \n\n\n\n    FAIL: test_special_values (test_umath_complex.TestClog)\n    ----------------------------------------------------------------------\n    Traceback (most recent call last):\n      File ""/opt/csw/lib/python/site-packages/numpy/testing/decorators.py"", line 215, in knownfailer\n        return f(*args, **kwargs)\n      File ""/opt/csw/lib/python/site-packages/numpy/core/tests/test_umath_complex.py"", line 173, in test_special_values\n        assert_almost_equal(np.log(x), y)\n      File ""/opt/csw/lib/python/site-packages/numpy/testing/utils.py"", line 443, in assert_almost_equal\n        raise AssertionError(msg)\n    AssertionError:\n    Arrays are not almost equal\n     ACTUAL: array([-inf+0.j])\n     DESIRED: (-inf+3.1415926535897931j)\n    >>  raise AssertionError(\'\\nArrays are not almost equal\\n ACTUAL: array([-inf+0.j])\\n DESIRED: (-inf+3.1415926535897931j)\')\n\n\n\nThe full output of numpy.test() is:\n\n\n\n    >>> numpy.test()\n    Running unit tests for numpy\n    NumPy version 1.5.0\n    NumPy is installed in /opt/csw/lib/python/site-packages/numpy\n    Python version 2.6.6 (r266:84292, Oct 12 2010, 15:25:47) [C]\n    nose version 0.11.2\n    ....................................................................\n    ....................................................................\n    ....................................................................\n    ....................................................................\n    ....................................................................\n    ....................................................................\n    ................................................................K...\n    ....................................................................\n    ....................................................................\n    ....................................................................\n    ...................K.........................................Warning: invalid value encountered in power\n    Warning: invalid value encountered in power\n    Warning: invalid value encountered in power\n    Warning: invalid value encountered in power\n    Warning: invalid value encountered in power\n    Warning: invalid value encountered in power\n    Warning: invalid value encountered in power\n    Warning: invalid value encountered in power\n    Warning: invalid value encountered in power\n    Warning: invalid value encountered in power\n    Warning: invalid value encountered in power\n    ...................................................K................\n    ......K.F...........................................................\n    ...........................................S........................\n    ....................................................................\n    ........................................................................................................................................\n    ....................................................................\n    ....................................................................\n    ....................................................................\n    ...................................................................\n    ....................................................................\n    ....................................................................\n    ....................................................................\n    ....................................................................\n    ....................................................................\n    ....................................................................\n    ............................................................................................................................S...........\n    ....................................................................\n    ....................................................................\n    ....................................................................\n    ....................................................................\n    ....................................................................\n    ....................................................................\n    ....................................................................\n    ....................................................................\n    ....................................................................................................\n    ======================================================================\n    FAIL: test_special_values (test_umath_complex.TestClog)\n    ----------------------------------------------------------------------\n    Traceback (most recent call last):\n      File ""/opt/csw/lib/python/site-packages/numpy/testing/decorators.py"", line 215, in knownfailer\n        return f(*args, **kwargs)\n      File ""/opt/csw/lib/python/site-packages/numpy/core/tests/test_umath_complex.py"", line 173, in test_special_values\n        assert_almost_equal(np.log(x), y)\n      File ""/opt/csw/lib/python/site-packages/numpy/testing/utils.py"", line 443, in assert_almost_equal\n        raise AssertionError(msg)\n    AssertionError:\n    Arrays are not almost equal\n     ACTUAL: array([-inf+0.j])\n     DESIRED: (-inf+3.1415926535897931j)\n    >>  raise AssertionError(\'\\nArrays are not almost equal\\n ACTUAL: array([-inf+0.j])\\n DESIRED: (-inf+3.1415926535897931j)\')\n    \n    \n    ----------------------------------------------------------------------\n    Ran 2608 tests in 60.639s\n    \n    FAILED (KNOWNFAIL=4, SKIP=2, failures=1)\n    <nose.result.TextTestResult run=2608 errors=0 failures=1>\n\n'"
2239,7731146,numpy-gitbot,numpy-gitbot,2012-10-19 22:19:03,2012-10-19 22:19:04,2012-10-19 22:19:04,closed,,NumPy 2.0,1,11 - Bug;component: Other;priority: normal,https://api.github.com/repos/numpy/numpy/issues/2239,b'[Py3] numpy arrays not recognized by struct module (Trac #1643)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/1643 on 2010-10-20 by @inducer, assigned to unknown._\n\nThis error is new in Py3/Numpy 1.5 and looks spurious:\n\n\n    >>> import numpy, struct\n    >>> struct.pack(""I"", numpy.uint32(0))\n    Traceback (most recent call last):\n      File ""<stdin>"", line 1, in <module>\n    struct.error: required argument is not an integer\n\n\n\nVersion Info:\n\n\n    Python 3.1.2 (release31-maint, Jul  8 2010, 09:18:08) \n    >>> numpy.__version__\n    \'1.5.1rc1\'\n\n'"
2238,7731145,numpy-gitbot,numpy-gitbot,2012-10-19 22:19:00,2012-10-19 22:19:02,2012-10-19 22:19:02,closed,,1.5.1,5,11 - Bug;component: numpy.core;priority: low,https://api.github.com/repos/numpy/numpy/issues/2238,b'FAIL: test_special_values (test_umath_complex.TestClog)  on Solaris/Sun Studio (Trac #1642)',"b""_Original ticket http://projects.scipy.org/numpy/ticket/1642 on 2010-10-19 by trac user opk, assigned to unknown._\n\nI'm trying to build 1.5.1rc1 on Solaris using Sun Studio. I'm getting messages saying undefined symbol for exp. -lm is needed for exp(). Even the Linux man page for exp suggests linking with -lm. Error message is below. Thank you\n\ncompile options: '-Inumpy/core/src/private -Inumpy/core/src -Inumpy/core -Inumpy/core/src/npymath -Inumpy/core/src/multiarray -Inumpy/core/src/umath -Inumpy/core/include -I/opt/csw/include/python2.6 -c'\ncc: _configtest.c\n/opt/SUNWspro/bin/cc _configtest.o -o _configtest\nUndefined                       first referenced\n symbol                             in file\nexp                                 _configtest.o\nld: fatal: Symbol referencing errors. No output written to _configtest\nUndefined                       first referenced\n symbol                             in file\nexp                                 _configtest.o\nld: fatal: Symbol referencing errors. No output written to _configtest\nfailure.\nremoving: _configtest.c _configtest.o\n"""
2237,7731143,numpy-gitbot,numpy-gitbot,2012-10-19 22:18:58,2012-10-23 02:44:56,2012-10-19 22:18:59,closed,,1.5.1,1,11 - Bug;component: numpy.core;priority: normal,https://api.github.com/repos/numpy/numpy/issues/2237,b'Strange behavior of ldexp on Python2.5 + Wine (Trac #1641)',"b""_Original ticket http://projects.scipy.org/numpy/ticket/1641 on 2010-10-19 by @pv, assigned to unknown._\n\nOn Python 2.5 + MinGW + Wine (and probably on a real Windows, too):\n\n\n    >>> import numpy as np\n    >>> np.iinfo('l').max\n    2147483647\n    >>> np.ldexp(2, 2147483647)\n    0.0\n    >>> np.ldexp(2, 2147483646)\n    0.0\n    >>> np.ldexp(2, 2147483645)\n    Warning: overflow encountered in ldexp\n    inf\n\n\nOn Python 2.6 the above works correctly.\n\nThis occurs also on [d24db3430a](http://github.com/numpy/numpy/commit/d24db3430a) and is therefore independent of #2229.\n"""
2236,7731141,numpy-gitbot,numpy-gitbot,2012-10-19 22:18:56,2012-10-19 22:18:57,2012-10-19 22:18:57,closed,,1.6.0,4,11 - Bug;component: numpy.core;priority: normal,https://api.github.com/repos/numpy/numpy/issues/2236,b'structured array incorrectly gives a broadcast error (Trac #1640)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/1640 on 2010-10-15 by @mwiebe, assigned to unknown._\n\nHere\'s a simple failure that should work:\n\n>>> p = np.rec.recarray((2,),dtype=[(\'f0\',\'f4\',3),(\'f1\',\'f4\',1)])\n>>> p==p\nTraceback (most recent call last):\n  File ""<stdin>"", line 1, in <module>\nValueError: shape mismatch: objects cannot be broadcast to a single shape\n\nA slightly different dtype, and it works:\n\n>>> p = np.rec.recarray((2,),dtype=[(\'f0\',\'f4\',2),(\'f1\',\'f4\',1)])\n>>> p==p\nrec.array([[ True,  True],\n       [ True,  True]], dtype=bool)\n'"
2235,7731139,numpy-gitbot,numpy-gitbot,2012-10-19 22:18:54,2012-10-19 22:18:55,2012-10-19 22:18:55,closed,,1.5.1,3,11 - Bug;component: Other;priority: normal,https://api.github.com/repos/numpy/numpy/issues/2235,b'FAIL: test_complex_scalar_warning (test_regression.TestRegression) (Trac #1639)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/1639 on 2010-10-14 by @stsci-sienkiew, assigned to @pv._\n\n\n\n    ======================================================================\n    FAIL: test_complex_scalar_warning (test_regression.TestRegression)\n    ----------------------------------------------------------------------\n    Traceback (most recent call last):\n      File ""/usr/stsci/pyssgdev/2.5.4/numpy/core/tests/test_regression.py"", line 1407, in test_complex_scalar_warning\n        assert_warns(np.ComplexWarning, float, x)\n      File ""/usr/stsci/pyssgdev/2.5.4/numpy/testing/utils.py"", line 1432, in assert_warns\n        % func.__name__)\n    AssertionError: No warning raised when calling float\n    \n    ----------------------------------------------------------------------\n\n\n\nPython 2.5.4\n\nRed Hat Enterprise 5, 64 bit\n\nMac Leopard\n\nSolaris\n\nRed Hat Enterprise 4, 32 bit\n\nRed Hat Enterprise 4, 64 bit\n\nThis was recently observed in:\n\n\n\n    origin?http://github.com/numpy/numpy.git (fetch)\n    origin?http://github.com/numpy/numpy.git (push)\n    1ee71d93fd069a51f45b4fa91e9e91d083a9334e\n\n\n\nbut has been happening at least since Sept 30.\n'"
2233,7731136,numpy-gitbot,numpy-gitbot,2012-10-19 22:18:49,2012-10-19 22:18:50,2012-10-19 22:18:50,closed,,1.5.1,2,11 - Bug;component: numpy.core;priority: normal,https://api.github.com/repos/numpy/numpy/issues/2233,"b""Dtypes should not use '=' in hashing (Trac #1637)""","b""_Original ticket http://projects.scipy.org/numpy/ticket/1637 on 2010-10-13 by @pv, assigned to unknown._\n\nDtypes with byteorder=='<' and byteorder=='=' should hash equal (on big-endian systems). This does not seem the case now:\nhttp://projects.scipy.org/scipy/ticket/1300\n\nNormally, it's not possible to create dtype objects with the native variant of '<' and '>' as byte order, as that is converted to '=' in PyArray_DescrConverter.\n\nHowever, they might appear from pickling, 3rd party extensions etc., so doing the right thing would be useful.\n"""
2232,7731133,numpy-gitbot,numpy-gitbot,2012-10-19 22:18:47,2012-10-19 22:18:48,2012-10-19 22:18:48,closed,,1.6.0,4,11 - Bug;component: numpy.lib;priority: normal,https://api.github.com/repos/numpy/numpy/issues/2232,b'genfromtxt bug with usecols and names=True (Trac #1636)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/1636 on 2010-10-12 by @jseabold, assigned to unknown._\n\n\n\n    from stringIO import stringIO\n    import numpy as np\n    #np.__version__\n    #1.5.0\n    s = StringIO(""col0,col1,col2,col3,col4\\n0,1,2,3,4\\n0,1,2,3,4\\n0,1,2,3,4"")\n    arr = np.genfromtxt(s, names=True, usecols=(0,2,4), delimiter="","", dtype=[\'int\',\'int\',\'int\'])\n    arr.dtype.names\n    #(\'col0\', \'col1\', \'col2\')\n\n\n\nInterestingly in trying to reproduce, I mistyped the dtype and got the expected names (but no error on my bad dtype).\n\n\n\n    arr = np.genfromtxt(s, names=True, usecols=(0,2,4), delimiter="","", dtype=[\'int\',\'int\',\'int\',\'int\',\'int\'])\n    arr.dtype.names\n    #(\'col0\', \'col2\', \'col4\')\n    \n    It also works as expected with dtype=None.'"
2231,7731130,numpy-gitbot,numpy-gitbot,2012-10-19 22:18:45,2012-10-19 22:18:46,2012-10-19 22:18:46,closed,,1.5.1,3,11 - Bug;component: Other;priority: normal,https://api.github.com/repos/numpy/numpy/issues/2231,b'Wrong isnan-usage (Trac #1635)',"b""_Original ticket http://projects.scipy.org/numpy/ticket/1635 on 2010-10-12 by @nstange, assigned to unknown._\n\nJust for completeness: Don't give system's isnan an int! gcc-4.5.0 will reject this."""
2229,7731125,numpy-gitbot,numpy-gitbot,2012-10-19 22:18:37,2012-10-23 02:44:55,2012-10-19 22:18:42,closed,,1.5.1,16,11 - Bug;component: Other;priority: normal,https://api.github.com/repos/numpy/numpy/issues/2229,b'Changeset 8438 breaks ldexp on 64bit/bigendian systems (Trac #1633)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/1633 on 2010-10-11 by @nstange, assigned to unknown._\n\nTestsuite fails with:\n======================================================================\nFAIL: test_ldexp (test_umath.TestLdexp)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File ""/pf/m/m222086/xas/solaris10/64/python2/python-2.7-ve0-gcc/lib/python2.7/site-packages/numpy/core/tests/test_umath.py"", line 391, in test_ldexp\n    assert_almost_equal(ncu.ldexp(2., 3),  16.)\n  File ""/pf/m/m222086/xas/solaris10/64/python2/python-2.7-ve0-gcc/lib/python2.7/site-packages/numpy/testing/utils.py"", line 463, in assert_almost_equal\n    raise AssertionError(msg)\nAssertionError: \nArrays are not almost equal\n ACTUAL: 2.0\n DESIRED: 16.0\n>>  raise AssertionError(\'\\nArrays are not almost equal\\n ACTUAL: 2.0\\n DESIRED: 16.0\')\n\nThe issue has been introduced here:\nhttp://projects.scipy.org/numpy/changeset/8438\n\nThe reason is in DOUBLE_ldexp (loops.c.src:1122):\nconst int in2 = *(int *)ip2;\n\nSince ip2 is being cast from (long*) to (int*), and thus in2 (exponent) will only receive the first 4 bytes, that is the 4 most significant bytes on bigendian, that is zero on 64bit.\n\nSystem\'s ldexp\'s exp-argument is _always_ an int, and thus in my opinion, the correct behaviour is to reject any exp-argument we cannot convert to an system\'s int, that is an np.intc, and adjusting the docs and the testsuite rather than silently giving invalid results.\n\nThe attached diff\n- fixes the ldexp_signatures to match the system\'s ldexp again (broken by changeset 8438)\n- adjusts the testsuite to only put in system\'s ints'"
2228,7731122,numpy-gitbot,numpy-gitbot,2012-10-19 22:18:34,2012-10-19 22:18:36,2012-10-19 22:18:36,closed,,1.5.1,5,11 - Bug;component: Other;priority: normal,https://api.github.com/repos/numpy/numpy/issues/2228,b'test_structured_arrays_with_objects2 fails with too high refcounts due to gcc 4.5.x bug (Trac #1632)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/1632 on 2010-10-11 by @nstange, assigned to unknown._\n\nHi everybody,\n\nthis isn\'t really a numpy bug but numpy is affected by a gcc bug (that is UNCONFIRMED right now) I\'ve found while debugging the following numpy testsuite failer:\n\n\n    ======================================================================\n    FAIL: Ticket #1299 second test\n    ----------------------------------------------------------------------\n    Traceback (most recent call last):\n      File ""/pf/m/m222086/xas/solaris10/python2/python-2.7-ve0-gcc/lib/python2.7/sit\n    e-packages/numpy/core/tests/test_regression.py"", line 1255, in test_structured_a\n    rrays_with_objects2\n        assert sys.getrefcount(strb) == numb\n    AssertionError: \n        7 = <module \'sys\' (built-in)>.getrefcount(\'aaaa\')\n        array([[(0L, \'aaaa\'), (0L, \'aaaa\')]], \n              dtype=[(\'f0\', \'>i8\'), (\'f1\', \'|O4\')]) = <module \'numpy\' from \'/pf/m/m2\n    22086/xas/solaris10/python2/python-2.7-ve0-gcc/lib/python2.7/site-packages/numpy\n    /__init__.pyc\'>.array([[(0,\'aaaa\'),(1,\'bbbb\')]], \'i8,O\')\n    >>  array([[(0L, \'aaaa\'), (0L, \'aaaa\')]], \n              dtype=[(\'f0\', \'>i8\'), (\'f1\', \'|O4\')])[array([[(0L, \'aaaa\'), (0L, \'aaaa\n    \')]], \n              dtype=[(\'f0\', \'>i8\'), (\'f1\', \'|O4\')]).nonzero()] = array([[(0L, \'aaaa\'\n    ), (0L, \'aaaa\')]], \n              dtype=[(\'f0\', \'>i8\'), (\'f1\', \'|O4\')]).ravel()[:1]\n        assert <module \'sys\' (built-in)>.getrefcount(\'bbbb\') == 7\n        assert <module \'sys\' (built-in)>.getrefcount(\'aaaa\') == 7 + 2\n\n\nYou\'ll find the gcc bug here: http://gcc.gnu.org/bugzilla/show_bug.cgi?id=45967\n\nMaybe we just wait for what the gcc people say about this issue; in the meanwhile you can use the attached patch against numpy-1.5.0 that fixes that issue with a workaround. The workaround isn\'t very clear code (and not commented ;) and thus, it either shouldn\'t be applied to the main branch at all or at least it should be removed again as soon as the issue has been fixed in gcc (again: if it is really a gcc bug).\n\nWishes\n\nNicolai'"
2227,7731117,numpy-gitbot,charris,2012-10-19 22:18:25,2014-02-19 17:30:11,2014-02-19 17:30:11,closed,,,16,11 - Bug;component: Other;priority: normal,https://api.github.com/repos/numpy/numpy/issues/2227,b'Solaris10/SPARC/gcc-4.5.1/32bit: SIGBUS in test_mrecords.py (Trac #1631)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/1631 on 2010-10-10 by @nstange, assigned to @charris._\n\nHi everybody,\n\nfor numpy-1.5.0, the testsuite crashes here with an SIGBUS here:\n""Test filled w/ flexible dtype ... Bus Error (core dumped)"" (numpy-1.5.0/numpy/ma/tests/test_core.py)\nand here:\n""Test that \'exotic\' formats are processed properly ... Bus Error (core dumped)"" (numpy-1.5.0/numpy/ma/tests/test_mrecords.py).\n\nThe problem is that SPARC processors require alignment, that is 8 byte values have to be aligned at 8 byte memory boundraries.\nThe good point is: numpy knows that the array is misaligned (verified using gdb) and thus, the fix is easy (see attached diff 02_put_mask_only_on_behaved_arrays.diff): The check for ISCONTINOUS isn\'t enough in PyArray_PutMask (item_selection.c), also check for ISBEHAVED (= ISALIGNED && ISWRITABLE).\n\n#############\n\nBut now, another problem arises:\na SIGSEGV here:\n""Tests fields retrieval""\n(numpy-1.5.0/numpy/ma/tests/test_mrecords.py:77).\n\nThe problem is in _copy_same_shape(numpy-1.5.0/numpy/core/src/multiarrayctors.c:732): dest->dimensions == NULL.\nPlease also note that maxaxis == -1 at that point.\nCheck the attached diff ""04_copy_from_same_shape_zerodim_fix.diff"" for details. There\'s one point in the diff I\'m unsure about: The right position of \n PyArray_INCREF(src);\n PyArray_XDECREF(dest);\nI tried to resemble the original ""logical"" position, but since I have no clue about Python\'s reference counting, please have a look.\n\n#############\n\nWhile debugging the last SIGSEGV-issue, I stumbled over another mistake (at least I think so):\n\nIn PyArray_IterAllButAxis (numpy-1.5.0/numpy/core/src/multiarray/iterators.c), the minaxis won\'t be set if the first nonzero stride is the smallest one. \nSee attached diff (03_fix_iterallbutaxis_minstride_search.diff) for a fix.\n\n#############\n\nThe reason why I poste those three issues into one report is that the testsuite still doesn\'t succeed and thus, I\'m unsure if I\'ve broken sth. with my diffs.\n\nWhat I get now is:\n======================================================================\nFAIL: Ticket #1897 second test\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File ""/pf/m/m222086/xas/solaris10/python2/python-2.7-ve0-gcc/lib/python2.7/sit\ne-packages/numpy/core/tests/test_regression.py"", line 1255, in test_structured_a\nrrays_with_objects2\n    assert sys.getrefcount(strb) == numb\nAssertionError: \n    7 = <module \'sys\' (built-in)>.getrefcount(\'aaaa\')\n    array([[(0L, \'aaaa\'), (0L, \'aaaa\')]], \n          dtype=[(\'f0\', \'>i8\'), (\'f1\', \'|O4\')]) = <module \'numpy\' from \'/pf/m/m2\n22086/xas/solaris10/python2/python-2.7-ve0-gcc/lib/python2.7/site-packages/numpy\n/__init__.pyc\'>.array([[(0,\'aaaa\'),(1,\'bbbb\')]], \'i8,O\')\n>>  array([[(0L, \'aaaa\'), (0L, \'aaaa\')]], \n          dtype=[(\'f0\', \'>i8\'), (\'f1\', \'|O4\')])[array([[(0L, \'aaaa\'), (0L, \'aaaa\n\')]], \n          dtype=[(\'f0\', \'>i8\'), (\'f1\', \'|O4\')]).nonzero()] = array([[(0L, \'aaaa\'\n), (0L, \'aaaa\')]], \n          dtype=[(\'f0\', \'>i8\'), (\'f1\', \'|O4\')]).ravel()[:1]\n    assert <module \'sys\' (built-in)>.getrefcount(\'bbbb\') == 7\n    assert <module \'sys\' (built-in)>.getrefcount(\'aaaa\') == 7 + 2\n    \n\n======================================================================\nFAIL: Test filled w/ mvoid\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File ""/pf/m/m222086/xas/solaris10/python2/python-2.7-ve0-gcc/lib/python2.7/sit\ne-packages/numpy/ma/tests/test_core.py"", line 518, in test_filled_w_mvoid\n    assert_equal(tuple(test), (1, default_fill_value(1.)))\n  File ""/pf/m/m222086/xas/solaris10/python2/python-2.7-ve0-gcc/lib/python2.7/sit\ne-packages/numpy/ma/testutils.py"", line 94, in assert_equal\n    return _assert_equal_on_sequences(actual, desired, err_msg=\'\')\n  File ""/pf/m/m222086/xas/solaris10/python2/python-2.7-ve0-gcc/lib/python2.7/sit\ne-packages/numpy/ma/testutils.py"", line 66, in _assert_equal_on_sequences\n    assert_equal(actual[k], desired[k], \'item=%r\\n%s\' % (k,err_msg))\n  File ""/pf/m/m222086/xas/solaris10/python2/python-2.7-ve0-gcc/lib/python2.7/sit\ne-packages/numpy/ma/testutils.py"", line 98, in assert_equal\n    raise AssertionError(msg)\nAssertionError: \nItems are not equal:\nitem=1\n\n ACTUAL: 2.0\n DESIRED: 1e+20\n>>  raise AssertionError(\'\\nItems are not equal:\\nitem=1\\n\\n ACTUAL: 2.0\\n DESIR\nED: 1e+20\')\n    \n\nAt least not segfaults/bus errors anymore ;).\nBtw.: I don\'t know what mvoid is, but have a look at the following:\n\nmyuid@myhost:~$ ~/xas/solaris10/python2/python-2.7-ve0-gcc/bin/python         Python 2.7 (r27:82500, Oct  9 2010, 17:26:38)\n[GCC 4.5.1] on sunos5\nType ""help"", ""copyright"", ""credits"" or ""license"" for more information.\n>>> import numpy as np\n>>> import numpy.ma as ma\n>>> import numpy.ma.core\n>>> from numpy.ma.core import *\n>>> x = ma.array([(1,2.)], mask=[(0,1)], dtype=[(\'a\', int), (\'b\', float)])\n>>> print x.filled()\n[(1, 1e+20)]\n>>> x = mvoid((1,2.), mask=[(0,1)], dtype=[(\'a\', int), (\'b\', float)])\n>>> print x.filled()\n(1, 2.0)\n>>>\n\nSince the non-working mvoid-mask could have an impact on results, I cannot release that build to our the scientists at our site. Do you have any idea what the issue could be?\nDo you know what a mvoid is? I can\'t find any documentation about it. I\'m seriously thinking about just removing that class from my numpy build (If I knew that there weren\'t any dependants outside of numpy)...\n\nWishes\n\nNicolai'"
2226,7731116,numpy-gitbot,numpy-gitbot,2012-10-19 22:18:23,2012-10-19 22:18:24,2012-10-19 22:18:24,closed,,NumPy 2.0,1,11 - Bug;component: Documentation;priority: normal,https://api.github.com/repos/numpy/numpy/issues/2226,b'Documentation of known failure testing decorator is incomplete (Trac #1630)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/1630 on 2010-10-10 by trac user jdmarch, assigned to @pv._\n\n[http://projects.scipy.org/numpy/wiki/TestingGuidelines#known-failures-skipping-tests] describes decorators numpy.testing.dec.skipif and knownfailureif. It implies that these two decorators are equally available. However skipif can be used in tests run from the command line with nosetests, and knownfailureif cannot. Ralf Gommers explained: ""Knownfailure is a numpy-specific plugin, which needs to be loaded for tests decorated with @dec.knownfailureif to be marked as K instead of E. This plugin loading is done by the `NoseTester` class (defined in numpy/testing/nosetester.py) which is used when tests are run through numpy.test().""'"
2225,7731115,numpy-gitbot,numpy-gitbot,2012-10-19 22:18:20,2012-10-19 22:18:21,2012-10-19 22:18:21,closed,,1.5.1,5,11 - Bug;component: Other;priority: normal,https://api.github.com/repos/numpy/numpy/issues/2225,b'np.prod returns 0 in case of integer overflow (Trac #1629)',"b""_Original ticket http://projects.scipy.org/numpy/ticket/1629 on 2010-10-10 by trac user kilian, assigned to unknown._\n\nI am using np.prod to calculate the number of elements of a sparse matrix (np.prod(C.shape)) and I noticed the following behavior: In case the result is greater than 2**31, zero is returned. Instead, the result should be converted to int long int (or at least an exception should be raised).\n\n\n\n    >>> import numpy as np\n    >>> np.version.version\n    '1.4.0'\n    >>> np.prod([2**16,2**16])\n    0\n\n\n\n"""
2224,7731113,numpy-gitbot,numpy-gitbot,2012-10-19 22:18:17,2012-10-19 22:18:19,2012-10-19 22:18:19,closed,,1.6.0,3,11 - Bug;component: numpy.lib;priority: high,https://api.github.com/repos/numpy/numpy/issues/2224,b'density keyword for histogram (Trac #1628)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/1628 on 2010-10-08 by @rgommers, assigned to unknown._\n\nIn this thread http://thread.gmane.org/gmane.comp.python.numeric.general/39746/focus=40089 the preferred solution to solve a long-standing bug with `normed=True` in histogram seemed to be to add a new ""density"" keyword and deprecate the ""normed"" keyword. The fix now in trunk is different, see r8672, r8674, r8678.\n\nThose changesets are not in 1.5.x. This should be resolved for the 2.0.0 release.'"
2223,7731112,numpy-gitbot,charris,2012-10-19 22:18:16,2014-02-19 21:56:24,2014-02-19 21:56:24,closed,,NumPy 2.0,5,11 - Bug;component: Documentation;priority: normal,https://api.github.com/repos/numpy/numpy/issues/2223,b'Docs for genfromtxt does not properly explain unmask (Trac #1627)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/1627 on 2010-10-07 by @fonnesbeck, assigned to @pv._\n\nThe description of unmask should include the limitation that all columns must be of the same type. Otherwise, transposition cannot occur, and the resulting output appears to be a bug.'"
2222,7731111,numpy-gitbot,numpy-gitbot,2012-10-19 22:18:14,2012-10-19 22:18:15,2012-10-19 22:18:15,closed,,1.5.1,2,11 - Bug;component: numpy.core;priority: normal,https://api.github.com/repos/numpy/numpy/issues/2222,b'numpy compilation fails on Solaris 10 with SunStudio 12.1 compiler (Trac #1626)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/1626 on 2010-10-06 by trac user plubans580, assigned to unknown._\n\nnumpy.core.umath fails to build on Solaris 10 with Sun Studio 12.1 when compiling numpy/core/src/umath/umathmodule_onefile.c.  The build gives the following error:\n\n\n\n    ...\n    building \'numpy.core.umath\' extension\n    compiling C sources\n    C compiler: /u/peterlu/solaris/sunstudio12.1/bin/cc -DNDEBUG -O -I/u/peterlu/solaris/python/deploy/include -Kpic\n    \n    creating build/temp.solaris-2.10-i86pc-2.5/numpy/core/src/umath\n    compile options: \'-Ibuild/src.solaris-2.10-i86pc-2.5/numpy/core/src/umath \\\n    -Inumpy/core/include -Ibuild/src.solaris-2.10-i86pc-2.5/numpy/core/include/numpy \\\n    -Inumpy/core/src/private -Inumpy/core/src -Inumpy/core -Inumpy/core/src/npymath \\\n    -Inumpy/core/src/multiarray -Inumpy/core/src/umath -Inumpy/core/include \\\n    -I/u/peterlu/solaris/python/deploy/include/python2.5 \\\n    -Ibuild/src.solaris-2.10-i86pc-2.5/numpy/core/src/multiarray \\\n    -Ibuild/src.solaris-2.10-i86pc-2.5/numpy/core/src/umath -c\'\n    cc: numpy/core/src/umath/umathmodule_onefile.c\n    ""numpy/core/include/numpy/ufuncobject.h"", line 384: warning: statement not reached\n    ""numpy/core/src/umath/loops.c.src"", line 1386: operand must have real floating type: op ""isnan""\n    ""numpy/core/src/umath/loops.c.src"", line 1387: operand must have real floating type: op ""isnan""\n    ""numpy/core/src/umath/loops.c.src"", line 1386: operand must have real floating type: op ""isnan""\n    ""numpy/core/src/umath/loops.c.src"", line 1387: operand must have real floating type: op ""isnan""\n    ""numpy/core/src/umath/loops.c.src"", line 1386: operand must have real floating type: op ""isnan""\n    ""numpy/core/src/umath/loops.c.src"", line 1387: operand must have real floating type: op ""isnan""\n    ""numpy/core/src/umath/ufunc_object.c"", line 3823: warning: operands have incompatible pointer types: op ""==""\n    cc: acomp failed for numpy/core/src/umath/umathmodule_onefile.c\n    ""numpy/core/include/numpy/ufuncobject.h"", line 384: warning: statement not reached\n    ""numpy/core/src/umath/loops.c.src"", line 1386: operand must have real floating type: op ""isnan""\n    ""numpy/core/src/umath/loops.c.src"", line 1387: operand must have real floating type: op ""isnan""\n    ""numpy/core/src/umath/loops.c.src"", line 1386: operand must have real floating type: op ""isnan""\n    ""numpy/core/src/umath/loops.c.src"", line 1387: operand must have real floating type: op ""isnan""\n    ""numpy/core/src/umath/loops.c.src"", line 1386: operand must have real floating type: op ""isnan""\n    ""numpy/core/src/umath/loops.c.src"", line 1387: operand must have real floating type: op ""isnan""\n    ""numpy/core/src/umath/ufunc_object.c"", line 3823: warning: operands have incompatible pointer types: op ""==""\n    cc: acomp failed for numpy/core/src/umath/umathmodule_onefile.c\n    error: Command ""/u/peterlu/solaris/sunstudio12.1/bin/cc -DNDEBUG -O \\\n    -I/u/peterlu/solaris/python/deploy/include -Kpic -Ibuild/src.solaris-2.10-i86pc-2.5/numpy/core/src/umath \\\n    -Inumpy/core/include -Ibuild/src.solaris-2.10-i86pc-2.5/numpy/core/include/numpy \\\n    -Inumpy/core/src/private -Inumpy/core/src -Inumpy/core -Inumpy/core/src/npymath \\\n    -Inumpy/core/src/multiarray -Inumpy/core/src/umath -Inumpy/core/include \\\n    -I/u/peterlu/solaris/python/deploy/include/python2.5 -Ibuild/src.solaris-2.10-i86pc-2.5/numpy/core/src/multiarray \\\n    -Ibuild/src.solaris-2.10-i86pc-2.5/numpy/core/src/umath \\\n    -c numpy/core/src/umath/umathmodule_onefile.c \\\n    -o build/temp.solaris-2.10-i86pc-2.5/numpy/core/src/umath/umathmodule_onefile.o"" failed with exit status 1\n    >\n\n\n\nIt looks like the sun compiler is very strict about what arguments its ""isnan"" built-in will accept. Replacing the literal \'0\'s with \'0.0\'s allows the build to complete:\n\n\n\n    \n    --- numpy-1.5.0/numpy/core/src/umath/loops.c.src        2010-08-25 08:32:15.000000000 -0400\n    +++ numpy-1.5.0.new/numpy/core/src/umath/loops.c.src    2010-10-06 01:29:46.735838000 -0400\n    @@ -1376,22 +1376,22 @@\n         }\n     }\n     \n     NPY_NO_EXPORT void\n     C@TYPE@_sign(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))\n     {\n         /* fixme: sign of nan is currently 0 */\n         UNARY_LOOP {\n             const @type@ in1r = ((@type@ *)ip1)[0];\n             const @type@ in1i = ((@type@ *)ip1)[1];\n    -        ((@type@ *)op1)[0] = CGT(in1r, in1i, 0, 0) ?  1 :\n    -                            (CLT(in1r, in1i, 0, 0) ? -1 :\n    +        ((@type@ *)op1)[0] = CGT(in1r, in1i, 0.0, 0.0) ?  1 :\n    +                            (CLT(in1r, in1i, 0.0, 0.0) ? -1 :\n                                 (CEQ(in1r, in1i, 0, 0) ?  0 : NPY_NAN@C@));\n             ((@type@ *)op1)[1] = 0;\n         }\n     }\n     \n     /**begin repeat1\n      * #kind = maximum, minimum#\n      * #OP = CGE, CLE#\n      */\n     NPY_NO_EXPORT void\n\n'"
2221,7731109,numpy-gitbot,numpy-gitbot,2012-10-19 22:18:09,2012-10-19 22:18:13,2012-10-19 22:18:13,closed,,1.5.1,10,11 - Bug;component: numpy.distutils;priority: normal,https://api.github.com/repos/numpy/numpy/issues/2221,"b'Numpy is ignoring the fact ""isfinite"" is undefined (Trac #1625)'","b""_Original ticket http://projects.scipy.org/numpy/ticket/1625 on 2010-10-05 by trac user drkirkby, assigned to unknown._\n\nOn Solaris or !OpenSolaris, when Python is built, it is not compiled as a C99 application. (That's a choice the Python developers took). \n\nTherefore, `isfinite`, which was not defined in the C standard until C99, does not exist. Hence when Python builds, the config.log shows:\n\n\n\n    ac_cv_have_decl_isfinite=no\n\n\n\nThe latest Numpy, (and this includes the latest snapshot taken only an hour or two) ago builds OK on Solaris. However, when one tries to import this into Python with:\n\n\n\n    import numpy\n\n\n\nit generates an error:\n\n\n\n    ImportError: ld.so.1: python: fatal: relocation error: file /home/palmieri/fulvia/numpy/sage-4.6.alpha2/local/lib/python2.6/site-packages/numpy/core/multiarray.so: symbol isfinite: referenced symbol not found\n\n\n\nIt would appear that Numpy is trying to use `isfinite`, despite the fact that Python is built without adding specific C99 support. \n\nLinux systems, which I assume is what most Numpy developers use, defines `isfinite` when one includes `math.h` in a file. But this should not happen unless one builds C99 code, as `isfinite` was not defined until the C99 standard. That's a  problem with Linux - it tends not to conform to standards too well. \n\nSolaris in comparison will not define `isfinite` unless the code is C99. `isfinite` is defined in a header file `/usr/include/iso/math_c99.h` but __not__ in `/usr/include/math.h`. However, if the compiler is building C99 code, then the contents of `/usr/include/iso/math_c99.h` will be included, so `isfinite` will be defined. \n\nI believe this is a bug in Numpy, as it should respect the fact the Python build has determined `isfinite` is undefined (so sets `ac_cv_have_decl_isfinite=no`) and so therefore Numpy should not try to use `isfinite`. \n\nThis came up as a bug when we tried to update Numpy in Sage. It is documented on \n\nhttp://trac.sagemath.org/sage_trac/ticket/9808\n\nbut I believe you will find the information there confusing, as it covers many issues associated with upgrading Numpy and Scipy in Sage. \n\nThe basic problem is Numpy is using `isfinite` even though Python has worked out that it is undefined. \n\nDave """
2220,7731106,numpy-gitbot,numpy-gitbot,2012-10-19 22:18:06,2012-10-19 22:18:07,2012-10-19 22:18:07,closed,,NumPy 2.0,2,11 - Bug;component: numpy.core;priority: high,https://api.github.com/repos/numpy/numpy/issues/2220,b'dot gives wrong result for large array with float32 objects (Trac #1624)',"b""_Original ticket http://projects.scipy.org/numpy/ticket/1624 on 2010-10-01 by trac user c_huettel, assigned to unknown._\n\nwith \nPython 2.6.5 (r265:79063, Apr 16 2010, 13:09:56) \n[GCC 4.4.3] on linux2\ndo:\n\nimport numpy as np\na  = map(lambda i: np.float32( i ), range( 100000 ) )\nx  = np.array( a )\nr0 = np.float32( 0 )\nfor b in a:\n    r0 += b*b\nra = reduce( lambda s,i: s+x[i]*x[i], range(len(x)), np.float32(0) )\nrx = np.dot(x,x)\n\nprint '%1.0f'%(r0), '%1.0f'%(ra), '%1.0f'%(rx), ra-rx\n\nthis gives:\n333328452419584 333328452419584 333328318201856 1.34218e+08\n\nrx, the dot-product from numpy, gives a different result\nas the ( much slower ) r0 and ra computations.\n\nSame results are gotten when\n1) the range is only up to 10000\n2) float instead of float32 is used\n\nWhat is the reason?"""
2218,7731102,numpy-gitbot,seberg,2012-10-19 22:18:03,2013-11-13 17:45:41,2013-11-13 17:45:41,closed,,NumPy 2.0,5,11 - Bug;component: numpy.core;priority: normal,https://api.github.com/repos/numpy/numpy/issues/2218,b'Bus error when attempting to use itemset() on a read-only memory-mapped array (Trac #1622)',"b""_Original ticket http://projects.scipy.org/numpy/ticket/1622 on 2010-09-26 by @WarrenWeckesser, assigned to unknown._\n\nFrom http://projects.scipy.org/scipy/ticket/1202\n\n\n    In [1]: import numpy as np\n    \n    In [2]: np.__version__\n    Out[2]: '1.5.0.dev8712'\n    \n    In [3]: !cat tmp.dat\n    DBC\n    \n    In [4]: m = np.memmap('tmp.dat', np.uint8, 'r')\n    \n    In [5]: m[0:1].itemset(65)\n    Bus error\n\n\nThe bus error does not occur if the file is opened with mode 'r+'. """
2214,7731095,numpy-gitbot,charris,2012-10-19 22:17:55,2014-02-19 16:58:15,2014-02-19 16:58:15,closed,,NumPy 2.0,1,11 - Bug;component: numpy.core;priority: normal,https://api.github.com/repos/numpy/numpy/issues/2214,b'.real on object array misbehaves (Trac #1618)',"b""_Original ticket http://projects.scipy.org/numpy/ticket/1618 on 2010-09-21 by @pv, assigned to unknown._\n\nIt probably shouldn't do this:\n\n\n    >>> import numpy as np\n    >>> x = np.array(1+2j, object)\n    >>> x.real\n    array((1+2j), dtype=object)\n\n\n\nThe implementation of .real for object arrays seems suspicious."""
2213,7731093,numpy-gitbot,numpy-gitbot,2012-10-19 22:17:53,2013-10-26 16:48:44,2012-10-19 22:17:54,closed,,1.5.1,2,11 - Bug;component: numpy.core;priority: normal,https://api.github.com/repos/numpy/numpy/issues/2213,b'Casting numpy.complex64 to (Python) complex chops off imaginary part (Trac #1617)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/1617 on 2010-09-20 by @inducer, assigned to unknown._\n\nExample session:\n\n\n\n    >>> import numpy\n    >>> numpy.complex64(1+2j)\n    (1+2j)\n    >>> complex(numpy.complex64(1+2j))\n    (1+0j)\n\n'"
2210,7731089,numpy-gitbot,numpy-gitbot,2012-10-19 22:17:43,2012-10-19 22:17:45,2012-10-19 22:17:45,closed,,1.6.0,3,11 - Bug;component: numpy.f2py;priority: normal,https://api.github.com/repos/numpy/numpy/issues/2210,b'f2py seems to have problem processing $ extended lines? (Trac #1614)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/1614 on 2010-09-15 by trac user gbrault, assigned to @pearu._\n\nI have this example fortran file from the slicot library, where the $ sign is used to make line extension.\nI get an error with f2py\n\nsage@ubuntu:~/sage/slicot/src_py$ f2py -c -m slycot MD03BD.f -llapack\nrunning build\nrunning config_cc\nunifing config_cc, config, build_clib, build_ext, build commands --compiler options\nrunning config_fc\nunifing config_fc, config, build_clib, build_ext, build commands --fcompiler options\nrunning build_src\nbuilding extension ""slycot"" sources\nf2py options: []\nf2py:> /tmp/tmpdSKvbW/src.linux-i686-2.6/slycotmodule.c\ncreating /tmp/tmpdSKvbW\ncreating /tmp/tmpdSKvbW/src.linux-i686-2.6\nReading fortran codes...\n\tReading file \'MD03BD.f\' (format:fix,strict)\nPost-processing...\n\tBlock: slycot\n\t\t\tBlock: md03bd\n\t\t\t\t\tBlock: fcn\n\t\t\t\t\tBlock: qrfact\n\t\t\t\t\tBlock: lmparm\nPost-processing (stage 2)...\nBuilding modules...\n\tConstructing call-back function ""cb_fcn_in_md03bd__user__routines""\ngetarrdims:warning: assumed shape array, using 0 instead of \'*\'\ngetarrdims:warning: assumed shape array, using 0 instead of \'*\'\ngetarrdims:warning: assumed shape array, using 0 instead of \'*\'\ngetarrdims:warning: assumed shape array, using 0 instead of \'*\'\ngetarrdims:warning: assumed shape array, using 0 instead of \'*\'\ngetarrdims:warning: assumed shape array, using 0 instead of \'*\'\ngetarrdims:warning: assumed shape array, using 0 instead of \'*\'\n\t  def fcn(iflag,m,n,ipar,lipar,dpar1,ldpar1,dpar2,ldpar2,x,nfevl,dwork,dwork,ldjsav,dwork,ldwork,infol): return \n\tConstructing call-back function ""cb_lmparm_in_md03bd__user__routines""\ngetarrdims:warning: assumed shape array, using 0 instead of \'*\'\ngetarrdims:warning: assumed shape array, using 0 instead of \'*\'\n\t  def lmparm(cond,n,ipar,lipar,e_dwork_jac_e,ldj,iwork,diag,e_dwork_e_e,delta,par,e_iwork_n_1_e,e_dwork_iw1_e,e_dwork_iw2_e,toldef,e_dwork_iw3_e,e_ldwork_iw3_1_e,infol): return \n\tConstructing call-back function ""cb_qrfact_in_md03bd__user__routines""\ngetarrdims:warning: assumed shape array, using 0 instead of \'*\'\ngetarrdims:warning: assumed shape array, using 0 instead of \'*\'\n\t  def qrfact(n,ipar,lipar,fnorm,e_dwork_jac_e,ldj,e_dwork_e_e,e_dwork_jw1_e,gnorm,iwork,e_dwork_jw2_e,e_ldwork_jw2_1_e,infol): return \n\tBuilding module ""slycot""...\n\t\tConstructing wrapper function ""md03bd""...\ngetarrdims:warning: assumed shape array, using 0 instead of \'*\'\ngetarrdims:warning: assumed shape array, using 0 instead of \'*\'\ngetarrdims:warning: assumed shape array, using 0 instead of \'*\'\ngetarrdims:warning: assumed shape array, using 0 instead of \'*\'\ngetarrdims:warning: assumed shape array, using 0 instead of \'*\'\ngetarrdims:warning: assumed shape array, using 0 instead of \'*\'\ngetarrdims:warning: assumed shape array, using 0 instead of \'*\'\n\t\t  md03bd(xinit,scale,cond,fcn,qrfact,lmparm,m,n,itmax,factor,nprint,ipar,lipar,dpar1,ldpar1,dpar2,ldpar2,x,diag,nfev,njev,ftol,xtol,gtol,tol,iwork,dwork,ldwork,iwarn,info,[fcn_extra_args,qrfact_extra_args,lmparm_extra_args])\n\tWrote C/API module ""slycot"" to file ""/tmp/tmpdSKvbW/src.linux-i686-2.6/slycotmodule.c""\n  adding \'/tmp/tmpdSKvbW/src.linux-i686-2.6/fortranobject.c\' to sources.\n  adding \'/tmp/tmpdSKvbW/src.linux-i686-2.6\' to include_dirs.\ncopying /usr/lib/python2.6/dist-packages/numpy/f2py/src/fortranobject.c -> /tmp/tmpdSKvbW/src.linux-i686-2.6\ncopying /usr/lib/python2.6/dist-packages/numpy/f2py/src/fortranobject.h -> /tmp/tmpdSKvbW/src.linux-i686-2.6\nrunning build_ext\ncustomize UnixCCompiler\ncustomize UnixCCompiler using build_ext\ncustomize GnuFCompiler\nCould not locate executable g77\nCould not locate executable f77\ncustomize IntelFCompiler\nCould not locate executable ifort\nCould not locate executable ifc\ncustomize LaheyFCompiler\nCould not locate executable lf95\ncustomize PGroupFCompiler\nCould not locate executable pgf90\nCould not locate executable pgf77\ncustomize AbsoftFCompiler\nCould not locate executable f90\ncustomize NAGFCompiler\nFound executable /usr/bin/f95\ncustomize VastFCompiler\ncustomize GnuFCompiler\ncustomize CompaqFCompiler\nCould not locate executable fort\ncustomize IntelItaniumFCompiler\nCould not locate executable efort\nCould not locate executable efc\ncustomize IntelEM64TFCompiler\ncustomize Gnu95FCompiler\nFound executable /usr/bin/gfortran\ncustomize Gnu95FCompiler\ncustomize Gnu95FCompiler using build_ext\nbuilding \'slycot\' extension\ncompiling C sources\nC compiler: gcc -pthread -fno-strict-aliasing -DNDEBUG -g -fwrapv -O2 -Wall -Wstrict-prototypes -fPIC\n\ncreating /tmp/tmpdSKvbW/tmp\ncreating /tmp/tmpdSKvbW/tmp/tmpdSKvbW\ncreating /tmp/tmpdSKvbW/tmp/tmpdSKvbW/src.linux-i686-2.6\ncompile options: \'-I/tmp/tmpdSKvbW/src.linux-i686-2.6 -I/usr/lib/python2.6/dist-packages/numpy/core/include -I/usr/include/python2.6 -c\'\ngcc: /tmp/tmpdSKvbW/src.linux-i686-2.6/slycotmodule.c\n/tmp/tmpdSKvbW/src.linux-i686-2.6/slycotmodule.c:379: error: redefinition of parameter \xa1\xaedwork\xa1\xaf\n/tmp/tmpdSKvbW/src.linux-i686-2.6/slycotmodule.c:379: note: previous definition of \xa1\xaedwork\xa1\xaf was here\n/tmp/tmpdSKvbW/src.linux-i686-2.6/slycotmodule.c:379: error: redefinition of parameter \xa1\xaedwork\xa1\xaf\n/tmp/tmpdSKvbW/src.linux-i686-2.6/slycotmodule.c:379: note: previous definition of \xa1\xaedwork\xa1\xaf was here\n/tmp/tmpdSKvbW/src.linux-i686-2.6/slycotmodule.c:379: error: redefinition of parameter \xa1\xaedwork\xa1\xaf\n/tmp/tmpdSKvbW/src.linux-i686-2.6/slycotmodule.c:379: note: previous definition of \xa1\xaedwork\xa1\xaf was here\n/tmp/tmpdSKvbW/src.linux-i686-2.6/slycotmodule.c:379: error: redefinition of parameter \xa1\xaedwork\xa1\xaf\n/tmp/tmpdSKvbW/src.linux-i686-2.6/slycotmodule.c:379: note: previous definition of \xa1\xaedwork\xa1\xaf was here\nerror: Command ""gcc -pthread -fno-strict-aliasing -DNDEBUG -g -fwrapv -O2 -Wall -Wstrict-prototypes -fPIC -I/tmp/tmpdSKvbW/src.linux-i686-2.6 -I/usr/lib/python2.6/dist-packages/numpy/core/include -I/usr/include/python2.6 -c /tmp/tmpdSKvbW/src.linux-i686-2.6/slycotmodule.c -o /tmp/tmpdSKvbW/tmp/tmpdSKvbW/src.linux-i686-2.6/slycotmodule.o"" failed with exit status 1\n\nThe only difference I see is that this module use $ for line continuation.\n\nDo you think this is the issue?\n\nI have uploaded the fortran file for you to try\n\nBR\n\n'"
2208,7731086,numpy-gitbot,charris,2012-10-19 22:17:41,2014-03-13 15:20:32,2014-03-13 15:20:32,closed,,,2,11 - Bug;component: numpy.core;Easy Fix;Patch;priority: highest,https://api.github.com/repos/numpy/numpy/issues/2208,"b""Alignment don't work in subarrays (Trac #1612)""","b""_Original ticket http://projects.scipy.org/numpy/ticket/1612 on 2010-09-14 by trac user Ihor.Melnyk, assigned to unknown._\n\nSpecifying alignment in dtype specification does not work (alignment should be 4 in both cases):\n\n\n\n    >>> t = np.dtype('1i4', align=True)\n    >>> t.alignment\n    4\n    >>> t = np.dtype('2i4', align=True)\n    >>> t.alignment\n    1\n\n\n\n\nThis is critical to ensure that NPY binary data matches exactly complex structures defined in C.\n\nProposed solution\n\n\n\n\n\n    \n    \n    Index: descriptor.c\n    ===================================================================\n    --- descriptor.c\t(revision 8715)\n    +++ descriptor.c\t(working copy)\n    @@ -254,6 +254,7 @@\n             newdescr->subarray = _pya_malloc(sizeof(PyArray_ArrayDescr));\n             newdescr->subarray->base = type;\n             newdescr->flags = type->flags;\n    +        newdescr->alignment = type->alignment;\n             Py_INCREF(val);\n             newdescr->subarray->shape = val;\n             Py_XDECREF(newdescr->fields);\n\n"""
2207,7731085,numpy-gitbot,charris,2012-10-19 22:17:39,2014-02-20 01:44:38,2014-02-20 01:44:38,closed,,,2,11 - Bug;component: numpy.core;priority: normal,https://api.github.com/repos/numpy/numpy/issues/2207,b'Different behaviour in ndarray.astype() for scalars and arrays (Trac #1611)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/1611 on 2010-09-14 by trac user lorenz, assigned to unknown._\n\nThere is an issue when using astype() on a scalar array,\ni.e. with shape == (), when doing an endiannes change\n(possible in other cases too?)\n\nExample:\n\n>>> import numpy as np\n>>>\n>>> np.array(42).astype("">i4"").dtype\ndtype(\'>i4\')\n>>> np.array(42, dtype="">i4"").astype(\'>i4\').dtype\ndtype(\'int32\')\n>>> np.array([42]).astype("">i4"").dtype\ndtype(\'>i4\')\n>>> np.array([42], dtype="">i4"").astype(\'>i4\').dtype\ndtype(\'>i4\')\n\nAbove one should get dtype(\'>i4\') in both cases.\n\n\n>>> np.array(42, dtype="">f4"").astype(\'>f4\').dtype\ndtype(\'float32\')\n>>> np.array([42], dtype="">f4"").astype(\'>f4\').dtype\ndtype(\'>f4\')\n\nAnd here dtype(\'>f4\') in both cases.\n\n\n>>> np.array(42, dtype="">f8"").astype(\'>f8\').dtype\ndtype(\'float64\')\n>>> np.array([42], dtype="">f8"").astype(\'>f8\').dtype\ndtype(\'>f8\')\n\nAnd here dtype(\'>f8\') in both cases.\n\n\nMy numpy version\n>>> np.version.version\n\'1.4.0.dev7417\''"
2206,7731082,numpy-gitbot,numpy-gitbot,2012-10-19 22:17:35,2012-10-23 02:44:27,2012-10-19 22:17:38,closed,,1.5.1,9,11 - Bug;component: numpy.core;priority: normal,https://api.github.com/repos/numpy/numpy/issues/2206,b'fromfile/tofile mess up file handle position on Python 3 (Trac #1610)',"b""_Original ticket http://projects.scipy.org/numpy/ticket/1610 on 2010-09-11 by @pv, assigned to unknown._\n\n\n\n    >>> import numpy as np\n    >>> f = open('foo.dat', 'w+b')\n    >>> f.write(np.arange(255, dtype='u1').tostring())\n    255\n    >>> f.seek(0)\n    0\n    >>> np.fromfile(f, dtype='u1', count=4)\n    array([0, 1, 2, 3], dtype=uint8)\n    >>> f.tell()\n    255\n\n"""
2205,7731080,numpy-gitbot,numpy-gitbot,2012-10-19 22:17:33,2012-10-19 22:17:34,2012-10-19 22:17:34,closed,,1.5.1,1,11 - Bug;component: numpy.core;priority: normal,https://api.github.com/repos/numpy/numpy/issues/2205,b'_dotblas.dot() not used on Python 3.x (Trac #1609)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/1609 on 2010-09-11 by trac user hagen, assigned to unknown._\n\nUnder Python 3.x, the _dotblas version of numpy.dot() never gets used. This is because the import line\n\n""from _dotblas import dot, ...""\n\nin core/numeric.py doesn\'t get fixed properly by 2to3, apparently because ""_dotblas.so"" isn\'t there when 2to3 is run.'"
2204,7731076,numpy-gitbot,numpy-gitbot,2012-10-19 22:17:27,2012-10-19 22:17:31,2012-10-19 22:17:31,closed,,1.6.0,8,11 - Bug;component: numpy.core;priority: normal,https://api.github.com/repos/numpy/numpy/issues/2204,b'numpy.sort on x.flat modifies x (Trac #1608)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/1608 on 2010-09-09 by trac user carlscheffler, assigned to unknown._\n\n(The code example below should be self-explanatory.)\n\nThe sort function has the side-effect of changing/removing the view information of its argument when called with argument.flat. This side-effect does not appear when using sort(ravel(argument)) rather than sort(argument.flat).\n\nTested on\n * Python version 2.6.5, NumPy version 1.3.0; and\n * Python version 2.6.2, NumPy version 1.2.1.\n\n\n\n    import numpy\n    x = numpy.array([[1,2],[3,4]])\n    x = x.transpose() # Create a transposed view of the original array\n    print x           # [[1, 3], [2, 4]] -- OK\n    y = numpy.sort(numpy.ravel(x))\n    print x           # [[1, 3], [2, 4]] -- OK\n    y = numpy.sort(x.flat)\n    print x           # [[1, 2], [3, 4]] -- ERROR\n\n\n'"
2203,7731074,numpy-gitbot,numpy-gitbot,2012-10-19 22:17:25,2012-10-19 22:17:26,2012-10-19 22:17:26,closed,,1.6.0,3,11 - Bug;component: numpy.lib;priority: high,https://api.github.com/repos/numpy/numpy/issues/2203,b'numpy.genfromtxt() with Python 3.1.2 fails (Trac #1607)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/1607 on 2010-09-09 by trac user magiclamp, assigned to unknown._\n\nHello:\n\ngenfromtxt() fails with the following TypeError.\n\nThanks for the nice package!\n\n[search_dist][10273] > cat z.dat \n\n0.01604 0.02668         0.03254 0.03254         0.15647 0.20313         0.02214 0.02214\n\n[search_dist][10274] > python\n\nPython 3.1.2 (r312:79147, Sep  2 2010, 17:16:43) \n\n[GCC 4.5.0] on linux2\n\nType ""help"", ""copyright"", ""credits"" or ""license"" for more information.\n\n>>> import numpy \n\n>>> numpy.version.version\n\n\'1.5.0\'\n\n>>> numpy.genfromtxt(\'z.dat\')\n\nTraceback (most recent call last):\n  File ""<stdin>"", line 1, in <module>\n  File ""/usr/intel/pkgs/python/3.1.2/lib/python3.1/site-packages/numpy/lib/npyio.py"", line 1126, in genfromtxt\n    first_values = split_line(first_line)\n  File ""/usr/intel/pkgs/python/3.1.2/lib/python3.1/site-packages/numpy/lib/_iotools.py"", line 206, in _delimited_splitter\n    line = line.split(self.comments)[0].strip(asbytes("" \\r\\n""))\nTypeError: Can\'t convert \'bytes\' object to str implicitly\n'"
2202,7731072,numpy-gitbot,numpy-gitbot,2012-10-19 22:17:21,2012-10-19 22:17:23,2012-10-19 22:17:23,closed,,1.6.0,5,11 - Bug;component: numpy.ma;priority: normal,https://api.github.com/repos/numpy/numpy/issues/2202,b'broadcasting masked arrays in exponents (Trac #1606)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/1606 on 2010-09-07 by @WeatherGod, assigned to @pierregm._\n\nHere is a fun one...\n\nimport numpy as np\n\na_2d = np.random.random((3, 5))\nb_1d = np.random.random(5)\nb_2d = np.vstack((b_1d, b_1d, b_1d))\n\na_ma_2d = np.ma.masked_array(a_2d, mask=(numpy.random.random((3, 5)) < 0.25))\nb_ma_1d = np.ma.masked_array(b_1d, mask=(numpy.random.random(5) < 0.25))\nb_ma_2d = np.ma.masked_array(b_2d, mask=(numpy.random.random((3, 5)) < 0.25))\n\n# a**b                    without broadcasting (works)\nprint a_2d**b_2d\n\n# a**b                    with broadcasting (works)\nprint a_2d**b_1d\n\n# a_ma**b_ma     without broadcasting (works)\nprint a_ma_2d**b_ma_2d\n\n# a_ma**b_ma     with broadcasting (works)\nprint a_ma_2d**b_ma_1d\n\n# a**b_ma            without broadcasting (works)\nprint a_2d**b_ma_2d\n\n# a**b_ma            with broadcasting (FAILS)\nprint a_2d**b_ma_1d\nTraceback (most recent call last):\n  File ""<stdin>"", line 1, in <module>\n  File ""/home/bvr/Programs/numpy/numpy/ma/core.py"", line 3697, in __rpow__\n    return power(other, self)\n  File ""/home/bvr/Programs/numpy/numpy/ma/core.py"", line 6043, in power\n    m |= invalid\nValueError: invalid return array shape\n\n# Now, test broadcasting of the other side of the operator\nc = np.random.random(5)\nc_ma = np.ma.masked_array(c, mask=(np.random.random(10) < 0.25))\n\n# c**b_ma                with broadcasting (works)\nprint c**b_ma_2d\n\n# c_ma**b                with broadcasting (FAILS)\nprint c_ma**b_2d\nTraceback (most recent call last):\n  File ""<stdin>"", line 1, in <module>\n  File ""/home/bvr/Programs/numpy/numpy/ma/core.py"", line 3693, in __pow__\n    return power(self, other)\n  File ""/home/bvr/Programs/numpy/numpy/ma/core.py"", line 6043, in power\n    m |= invalid\nValueError: invalid return array shape\n\n\nSo, this fails if we broadcast the masked array portion of a power expression and the other value is a ndarray.\nNote, the same also occurs if we broadcast a masked array in order to raise it to powers indicated by an ndarray.\n\nThis bug was originally reported in http://www.mail-archive.com/numpy-discussion@scipy.org/msg27679.html'"
2201,7731069,numpy-gitbot,numpy-gitbot,2012-10-19 22:17:18,2013-09-22 16:33:55,2012-10-19 22:17:20,closed,,1.5.1,3,11 - Bug;component: Other;priority: normal,https://api.github.com/repos/numpy/numpy/issues/2201,"b""Bug in numpy version 1.5.x: RuntimeWarning: tp_compare didn't return -1 or -2 for exception (Trac #1605)""","b'_Original ticket http://projects.scipy.org/numpy/ticket/1605 on 2010-09-04 by trac user maldun, assigned to unknown._\n\nWe tried to upgrade NumPy in Sage. We managed to get 1.4.1 working. (see http://trac.sagemath.org/sage_trac/ticket/9808 for more info)\nnumpy 1.5.0 should work also, but we have problems with some of the doctests. Example:\n\n\n\n           sage -t -valgrind ""devel/sage/sage/rings/polynomial/polynomial_element.pyx""\n    Total time for all tests: 716.4 seconds\n    maldun@zauberbuch:~/sage/sage-4.5.2$ sage -t  -valgrind ""devel/sage/sage/rings/polynomial/real_roots.pyx\n    > ""\n    ERROR: File ./devel/sage/sage/rings/polynomial/real_roots.pyx\n     is missing\n     \n    ----------------------------------------------------------------------\n    The following tests failed:\n    \n    \n            ./devel/sage/sage/rings/polynomial/real_roots.pyx\n     # File not found\n    Total time for all tests: 0.0 seconds\n    maldun@zauberbuch:~/sage/sage-4.5.2$ sage -t  -valgrind ""devel/sage/sage/rings/polynomial/real_roots.pyx""\n    sage -t -valgrind ""devel/sage/sage/rings/polynomial/real_roots.pyx""\n    **********************************************************************\n    File ""/home/maldun/sage/sage-4.5.2/devel/sage/sage/rings/polynomial/real_roots.pyx"", line 1819, in __main__.example_76\n    Failed example:\n        oc.find_roots()###line 3064:_sage_    >>> oc.find_roots()\n    Expected nothing\n    Got:\n        doctest:1: RuntimeWarning: tp_compare didn\'t return -1 or -2 for exception\n    **********************************************************************\n    File ""/home/maldun/sage/sage-4.5.2/devel/sage/sage/rings/polynomial/real_roots.pyx"", line 1840, in __main__.example_77\n    Failed example:\n        oc.find_roots()###line 3085:_sage_    >>> oc.find_roots()\n    Expected nothing\n    Got:\n        doctest:1: RuntimeWarning: tp_compare didn\'t return -1 or -2 for exception\n    **********************************************************************\n    File ""/home/maldun/sage/sage-4.5.2/devel/sage/sage/rings/polynomial/real_roots.pyx"", line 1934, in __main__.example_80\n    Failed example:\n        oc.find_roots()###line 3157:_sage_    >>> oc.find_roots()\n    Expected nothing\n    Got:\n        doctest:1: RuntimeWarning: tp_compare didn\'t return -1 or -2 for exception\n    **********************************************************************\n    File ""/home/maldun/sage/sage-4.5.2/devel/sage/sage/rings/polynomial/real_roots.pyx"", line 2320, in __main__.example_98\n    Failed example:\n        real_roots(x**Integer(5) * (x**Integer(2) - Integer(9999))**Integer(2) - Integer(1))###line 3870:_sage_    >>> real_roots(x^5 * (x^2 - 9999)^2 - 1)\n    Expected:\n        [((-29274496381311/9007199254740992, 419601125186091/2251799813685248), 1), ((2126658450145849453951061654415153249597/21267647932558653966460912964485513216, 4253316902721330018853696359533061621799/42535295865117307932921825928971026432), 1), ((1063329226287740282451317352558954186101/10633823966279326983230456482242756608, 531664614358685696701445201630854654353/5316911983139663491615228241121378304), 1)]\n    Got:\n        doctest:1: RuntimeWarning: tp_compare didn\'t return -1 or -2 for exception\n        [((-29274496381311/9007199254740992, 419601125186091/2251799813685248), 1), ((2126658450145849453951061654415153249597/21267647932558653966460912964485513216, 4253316902721330018853696359533061621799/42535295865117307932921825928971026432), 1), ((1063329226287740282451317352558954186101/10633823966279326983230456482242756608, 531664614358685696701445201630854654353/5316911983139663491615228241121378304), 1)]\n    **********************************************************************\n    4 items had failures:\n       1 of  10 in __main__.example_76\n       1 of   9 in __main__.example_77\n       1 of  10 in __main__.example_80\n       1 of  44 in __main__.example_98\n    ***Test Failed*** 4 failures.\n             [227.6 s]\n     \n    ----------------------------------------------------------------------\n    The following tests failed:\n    \n    \n            sage -t -valgrind ""devel/sage/sage/rings/polynomial/real_roots.pyx""\n    Total time for all tests: 227.6 seconds\n\n\n\nwithout valgrind we get memory leak\n\nIt seems that it is related to the following bug:\nhttp://groups.google.com/group/cython-users/browse_thread/thread/624c696293b7fe44\n\nIf this problem can be solved we could move to numpy-1.5.0 in sage.\n'"
2200,7731067,numpy-gitbot,numpy-gitbot,2012-10-19 22:17:16,2012-10-19 22:17:17,2012-10-19 22:17:17,closed,,1.5.0,2,11 - Bug;component: Other;priority: normal,https://api.github.com/repos/numpy/numpy/issues/2200,"b""distutils/command/config.py binary search needs floordiv '//' to work under Python3 (Trac #1604)""","b'_Original ticket http://projects.scipy.org/numpy/ticket/1604 on 2010-09-04 by trac user cb123, assigned to unknown._\n\nThere is a bug in the build under Python3.  The symptom is an infinite loop of recompiling a _configtest.c file.\n\nnumpy/distutils/command/config.py uses (hi+lo) / 2 in a binary search.  In py2 \'/\' is ""integer floor div"" but in py3 is ""float converting div"".  The fix is just using \'//\' which has been available since python2.2 (or \'>> 1\' instead of \'/ 2\').  As coded, binary search requires floordiv to converge.\n\nBeyond the non-convergence issue, the tests themselves fail erroneously.  Using a float divide creates a float.  Upon conversion to a string via ""%(size)s"", that creates constants in the generated code like ""<= 16.0"".  Though the value of the expression is integral, as required, these being "".0"" instead of round numbers cause the left operand of the inequality to be promoted to double and \'<=\' to be evaluated in compile-time floating point arithmetic.  Some compilers, e.g. gcc-4.5.1, do not support FP math for compile-time constants like an array length even if it evalutes to an integer.  Other compilers, e.g. clang-1.1, g++-4.5.1, work fine with it.  I have not looked into what relevant standards say, but using \'//\' makes forward python behavior imitate the python-2.7 and early behavior and seems a reasonable fix.\n\nOk.  This is possibly the longest explanation I have ever had for what amounts to a one-character patch. :)'"
2198,7731062,numpy-gitbot,charris,2012-10-19 22:17:11,2014-02-20 01:41:42,2014-02-20 01:41:42,closed,,,3,11 - Bug;component: numpy.distutils;priority: low,https://api.github.com/repos/numpy/numpy/issues/2198,b'Py3k syntax error in setupscons.py (Trac #1602)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/1602 on 2010-09-02 by trac user srid, assigned to @cournape._\n\nnumpy-1.5.0 and Python 3.1.2\n\n\n\n    $ python3 setupscons.py \n      File ""setupscons.py"", line 61\n        except ImportError, e:\n                          ^\n    SyntaxError: invalid syntax\n\n\n\n\nAlso \'import __builtin__\' need to be changed to \'import builtins\' on Py3k.'"
2197,7731060,numpy-gitbot,numpy-gitbot,2012-10-19 22:17:07,2012-10-19 22:17:09,2012-10-19 22:17:09,closed,,NumPy 1.7,7,11 - Bug;component: numpy.distutils;priority: normal,https://api.github.com/repos/numpy/numpy/issues/2197,b'distutils/ccompiler.py:68 UnicodeEncodeError on Python 3.2 (Trac #1601)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/1601 on 2010-09-02 by trac user srid, assigned to @cournape._\n\nPython 3.2 py3k branch | Linux 64-bit (FC4) | GCC 4.0.x | numpy-1.5.0 | ATLAS\n\n\n\n    Running from numpy source directory.Traceback (most recent call last):\n      File ""setup.py"", line 211, in <module>\n        setup_package()\n      File ""setup.py"", line 204, in setup_package\n        configuration=configuration )\n      File ""/tmp/tmpJXOWDV-pypm-numpy-1.5.0/numpy-1.5.0/build/py3k/numpy/distutils/core.py"", line 186, in setup\n        return old_setup(**new_attr)\n      File ""/opt/ActivePython-3.2/lib/python3.2/distutils/core.py"", line 149, in setup\n        dist.run_commands()\n      File ""/opt/ActivePython-3.2/lib/python3.2/distutils/dist.py"", line 919, in run_commands\n        self.run_command(cmd)\n      File ""/opt/ActivePython-3.2/lib/python3.2/distutils/dist.py"", line 938, in run_command\n        cmd_obj.run()\n      File ""/tmp/tmpJXOWDV-pypm-numpy-1.5.0/numpy-1.5.0/build/py3k/numpy/distutils/command/build.py"", line 37, in run\n        old_build.run(self)\n      File ""/opt/ActivePython-3.2/lib/python3.2/distutils/command/build.py"", line 128, in run\n        self.run_command(cmd_name)\n      File ""/opt/ActivePython-3.2/lib/python3.2/distutils/cmd.py"", line 315, in run_command\n        self.distribution.run_command(command)\n      File ""/opt/ActivePython-3.2/lib/python3.2/distutils/dist.py"", line 938, in run_command\n        cmd_obj.run()\n      File ""/tmp/tmpJXOWDV-pypm-numpy-1.5.0/numpy-1.5.0/build/py3k/numpy/distutils/command/build_src.py"", line 152, in run\n        self.build_sources()\n      File ""/tmp/tmpJXOWDV-pypm-numpy-1.5.0/numpy-1.5.0/build/py3k/numpy/distutils/command/build_src.py"", line 169, in build_sources\n        self.build_extension_sources(ext)\n      File ""/tmp/tmpJXOWDV-pypm-numpy-1.5.0/numpy-1.5.0/build/py3k/numpy/distutils/command/build_src.py"", line 328, in build_extension_sources\n        sources = self.generate_sources(sources, ext)\n      File ""/tmp/tmpJXOWDV-pypm-numpy-1.5.0/numpy-1.5.0/build/py3k/numpy/distutils/command/build_src.py"", line 385, in generate_sources\n        source = func(extension, build_dir)\n      File ""numpy/core/setup.py"", line 399, in generate_config_h\n        moredefs, ignored = cocache.check_types(config_cmd, ext, build_dir)\n      File ""numpy/core/setup.py"", line 41, in check_types\n        out = check_types(*a, **kw)\n      File ""numpy/core/setup.py"", line 294, in check_types\n        res = config_cmd.check_type_size(complex_def, expected=2*expected[type])\n      File ""/tmp/tmpJXOWDV-pypm-numpy-1.5.0/numpy-1.5.0/build/py3k/numpy/distutils/command/config.py"", line 236, in check_type_size\n        headers, include_dirs, \'c\')\n      File ""/tmp/tmpJXOWDV-pypm-numpy-1.5.0/numpy-1.5.0/build/py3k/numpy/distutils/command/config.py"", line 99, in _compile\n        (body, headers, include_dirs, lang))\n      File ""/tmp/tmpJXOWDV-pypm-numpy-1.5.0/numpy-1.5.0/build/py3k/numpy/distutils/command/config.py"", line 89, in _wrap_method\n        ret = mth(*((self,)+args))\n      File ""/opt/ActivePython-3.2/lib/python3.2/distutils/command/config.py"", line 135, in _compile\n        self.compiler.compile([src], include_dirs=include_dirs)\n      File ""/tmp/tmpJXOWDV-pypm-numpy-1.5.0/numpy-1.5.0/build/py3k/numpy/distutils/ccompiler.py"", line 33, in <lambda>\n        m = lambda self, *args, **kw: func(self, *args, **kw)\n      File ""/tmp/tmpJXOWDV-pypm-numpy-1.5.0/numpy-1.5.0/build/py3k/numpy/distutils/ccompiler.py"", line 206, in CCompiler_compile\n        self._compile(obj, src, ext, cc_args, extra_postargs, pp_opts)\n      File ""/tmp/tmpJXOWDV-pypm-numpy-1.5.0/numpy-1.5.0/build/py3k/numpy/distutils/ccompiler.py"", line 33, in <lambda>\n        m = lambda self, *args, **kw: func(self, *args, **kw)\n      File ""/tmp/tmpJXOWDV-pypm-numpy-1.5.0/numpy-1.5.0/build/py3k/numpy/distutils/unixccompiler.py"", line 23, in UnixCCompiler__compile\n        extra_postargs, display = display)\n      File ""/tmp/tmpJXOWDV-pypm-numpy-1.5.0/numpy-1.5.0/build/py3k/numpy/distutils/ccompiler.py"", line 33, in <lambda>\n        m = lambda self, *args, **kw: func(self, *args, **kw)\n      File ""/tmp/tmpJXOWDV-pypm-numpy-1.5.0/numpy-1.5.0/build/py3k/numpy/distutils/ccompiler.py"", line 68, in CCompiler_spawn\n        print(o)\n    UnicodeEncodeError: \'ascii\' codec can\'t encode characters in position 50-52: ordinal not in range(128)\n\n\n\n(BTW, there is no 1.5.0 version in \'Version\' list)'"
2196,7731059,numpy-gitbot,ahaldane,2012-10-19 22:17:06,2016-06-02 15:26:52,2016-06-02 15:26:52,closed,,,10,11 - Bug;component: numpy.core;Patch;priority: normal,https://api.github.com/repos/numpy/numpy/issues/2196,b'PyArray_DescrConverter inconsistency with empty arrays in records (Trac #1600)',"b""_Original ticket http://projects.scipy.org/numpy/ticket/1600 on 2010-09-02 by trac user steveb, assigned to unknown._\n\nWhen a record type is defined using a dictionary, dtype doesn't allow zero length arrays.\n\n\n\n    np.dtype([('val1', np.float32, (0,))]) # OK\n    np.dtype({'names': ['val1'], 'formats':[(np.float32, (0,))]}) # Throws TypeError\n\n\n\nIt isn't clear to me why they shouldn't be allowed in this case."""
2195,7731056,numpy-gitbot,seberg,2012-10-19 22:17:04,2013-10-16 18:17:28,2013-10-16 18:17:28,closed,,,3,11 - Bug;component: numpy.core;priority: normal,https://api.github.com/repos/numpy/numpy/issues/2195,b'as_strided arrays are not reshape-able (Trac #1599)',"b""_Original ticket http://projects.scipy.org/numpy/ticket/1599 on 2010-09-01 by trac user dalleyg, assigned to unknown._\n\nArrays created by as_strided are not reshape-able.  If one attempts to reshape, the operation will appear to succeed, but corrupted data will result.\n\nHere's a test example.\n\n\n    import numpy; \n    print numpy.__version__; \n    xx = numpy.arange(3, dtype=int)[None, None, :]; \n    xx2 = numpy.lib.stride_tricks.as_strided(xx, shape=(2,1,3), strides=xx.strides); \n    xx3=xx2.reshape((2,3)); \n    print xx3\n\n\n\nIt prints things like\n\n\n    [[      0       1       2]\n     [5602136      33       0]] \n\n\nNote that the second row should look like the first, but it doesn't.\n\nThis issue exists in numpy 1.3.0 and numpy 1.4.1 (at least).  I do not know if it persists in numpy 1.5.0.\n\nIMHO, reshape should: be generalized to handle  restrided arrays (at least ones that are restrided to perform a cheap tile operation), copy the array if the strides are too nonstandard, and/or raise an exception if the strides are too nonstandard."""
2194,7731055,numpy-gitbot,numpy-gitbot,2012-10-19 22:17:02,2012-10-19 22:17:03,2012-10-19 22:17:03,closed,,1.5.1,3,11 - Bug;component: numpy.core;priority: normal,https://api.github.com/repos/numpy/numpy/issues/2194,b'Segfault when changing the filed names of an structured array (Trac #1598)',"b""_Original ticket http://projects.scipy.org/numpy/ticket/1598 on 2010-09-01 by @FrancescAlted, assigned to unknown._\n\nThe next reproduces the segfault:\n\n\n\n    In [1]: import numpy as np\n    \n    In [2]: np.__version__\n    Out[2]: '1.5.0'\n    \n    In [3]: ra = np.fromiter(((i*3, i*2) for i in xrange(10)), dtype='i8,f8')\n    \n    In [4]: ra.dtype.names = ('f1', 'f2')\n    \n    In [5]: ra\n    Segmentation fault\n    \n\n\n\nI don't know if the `names` filed of a dtype can be changed like this, but numpy let me do that, so..."""
2193,7731054,numpy-gitbot,numpy-gitbot,2012-10-19 22:17:00,2012-10-19 22:17:01,2012-10-19 22:17:01,closed,,1.3.0,2,11 - Bug;component: Other;priority: normal,https://api.github.com/repos/numpy/numpy/issues/2193,b'loadtxt gets stuck on empty files (Trac #1597)',"b""_Original ticket http://projects.scipy.org/numpy/ticket/1597 on 2010-09-01 by trac user ctmedra, assigned to unknown._\n\nI have found that loadtxt gets stuck on empty files. \nMy numpy.__version__  is  '1.2.1'\n\nFor instance:\n\nIn [1]: import numpy\n\nIn [2]: fp=open('foo.dat','w')\n\nIn [3]: fp.close()\n\nIn [4]: numpy.loadtxt('foo.dat')\n\nthen I wait with no answer."""
2192,7731053,numpy-gitbot,numpy-gitbot,2012-10-19 22:16:58,2012-10-19 22:16:59,2012-10-19 22:16:59,closed,,1.5.1,3,11 - Bug;component: Documentation;priority: normal,https://api.github.com/repos/numpy/numpy/issues/2192,b'error building numpy 1.5.0 docs (Trac #1596)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/1596 on 2010-08-31 by @lebedov, assigned to @pv._\n\nWhen I attempted to build the numpy 1.5.0 html docs, I observed the following error:\n\n\n\n    reading sources... [  3%] reference/generated/numpy.atleast_1d\n    reading sources... [  3%] reference/generated/numpy.atleast_2d\n    reading sources... [  3%] reference/generated/numpy.atleast_3d\n    reading sources... [  3%] reference/generated/numpy.average\n    reading sources... [  3%] reference/generated/numpy.bartlett\n    \n    Exception occurred:\n      File ""/usr/lib/python2.6/site-packages/docutils/statemachine.py"", line 1193, in __radd__\n        raise TypeError(\'adding ViewList to a non-ViewList\')\n    TypeError: adding ViewList to a non-ViewList\n    The full traceback has been saved in /tmp/sphinx-err-90cDJW.log, if you want to report the issue t\n    o the developers.\n    Please also report this if it was a user error, so that a better error message can be provided nex\n    t time.\n    Either send bugs to the mailing list at <http://groups.google.com/group/sphinx-dev/>,\n    or report them in the tracker at <http://bitbucket.org/birkenfeld/sphinx/issues/>. Thanks!\n\n\n\nI\'m running the build on 64-bit Linux with python 2.6.5, sphinx 1.0.3, docutils 0.7, jinja2 2.5.1, and pygments 1.3.1.'"
2189,7731049,numpy-gitbot,numpy-gitbot,2012-10-19 22:16:51,2012-10-19 22:16:53,2012-10-19 22:16:53,closed,,1.6.0,3,11 - Bug;component: Other;priority: normal,https://api.github.com/repos/numpy/numpy/issues/2189,b'genfromtxt skip_footer has problems with comments (Trac #1593)',"b""_Original ticket http://projects.scipy.org/numpy/ticket/1593 on 2010-08-26 by trac user miguel, assigned to unknown._\n\nIt seems that genfromtxt's skip_footer parameter in numpy 1.4.1 ignores lines with comments or data with different layout from previous rows.\n\n>>>print np.genfromtxt(StringIO(4*'1 2\\n'+3*'12\\n'), skip_header=2, skip_footer=3)\n[]\n"""
2187,7731047,numpy-gitbot,numpy-gitbot,2012-10-19 22:16:47,2012-10-19 22:16:48,2012-10-19 22:16:48,closed,,1.6.0,3,11 - Bug;component: numpy.lib;priority: normal,https://api.github.com/repos/numpy/numpy/issues/2187,b'flatten_dtype does not handle titles (Trac #1591)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/1591 on 2010-08-23 by trac user nasturtium86, assigned to unknown._\n\nnumpy.lib.io.flatten_dtype() raises ""ValueError: too many values to unpack"" when you run it on a dtype that has titles.\n\nFor example, this code works:\n\n\n\n    import numpy\n    dtype1 = numpy.dtype([(""Current"",""f8""),(""Voltage"",""f8""), ""Power"",""f8"")])\n    print numpy.lib.io.flatten_dtype(dtype1)\n\n\n\nBut this code doesn\'t:\n\n\n\n    import numpy\n    dtype2 = numpy.dtype([((""Amps"",""Current""),""f8""),((""Volts"",""Voltage""),""f8""),((""Watts"",""Power""),""f8"")])\n    print numpy.lib.io.flatten_dtype(dtype2)\n\n\n\nThe following monkey patch fixes the problem:\n\n\n\n    def flatten_dtype(ndtype):\n        """"""\n        Unpack a structured data-type.\n    \n        """"""\n        names = ndtype.names\n        if names is None:\n            return [ndtype]\n        else:\n            types = []\n            for field in names:\n                typ_fields = ndtype.fields[field]\n                flat_dt = flatten_dtype(typ_fields[0])\n                types.extend(flat_dt)\n            return types\n    numpy.lib.io.flatten_dtype=flatten_dtype\n\n\n\nWith this monkey patch in place, both dtype1 and dtype2 are handled correctly.\n\nThere is a thread open about this issue at [http://www.mail-archive.com/numpy-discussion@scipy.org/msg27441.html]'"
2186,7731044,numpy-gitbot,charris,2012-10-19 22:16:46,2014-02-19 16:47:51,2014-02-19 16:47:51,closed,,NumPy 2.0,2,11 - Bug;component: Other;priority: normal,https://api.github.com/repos/numpy/numpy/issues/2186,b'complex array to scalar conversion fails (Trac #1590)',"b""_Original ticket http://projects.scipy.org/numpy/ticket/1590 on 2010-08-22 by trac user drizzd, assigned to unknown._\n\nWhile float(array([1])) returns 1.0 as expected, complex(array([1j])) throws\n\n TypeError: can't convert complex to float\n\nI expected it to succeed and return 1.0j.\n\nI suspect this is the same error triggered by the following code.\n\n a = zeros(2, complex)\n b = ones(1) * 1j\n a[0] = b"""
2185,7731042,numpy-gitbot,numpy-gitbot,2012-10-19 22:16:44,2012-10-19 22:16:44,2012-10-19 22:16:44,closed,,NumPy 2.0,2,11 - Bug;component: Other;priority: high,https://api.github.com/repos/numpy/numpy/issues/2185,b'loadtxt reads floats in as float32 instead of float64 under certain cicumstances (Trac #1589)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/1589 on 2010-08-21 by @astrofrog, assigned to unknown._\n\nI have a file called data.txt with the following contents:\n\n\n\n    $ cat data.txt\n    -9.9999999961922814E-01\n    -9.9999999996192290E-01\n    -9.9999999999619227E-01\n    -9.9999999999961919E-01\n    -9.9999999999996192E-01\n    -9.9999999999999611E-01\n    -1.0000000000000000E+00\n\n\n\nIf I try and read this in using loadtxt, which should read numbers in using (64-bit) float by default, I get:\n\n\n\n    Python 2.6.1 (r261:67515, Feb 11 2010, 00:51:29) \n    [GCC 4.2.1 (Apple Inc. build 5646)] on darwin\n    Type ""help"", ""copyright"", ""credits"" or ""license"" for more information.\n    >>> import numpy as np\n    >>> np.__version__\n    \'2.0.0.dev8657\'\n    >>> np.loadtxt(\'data.txt\')\n    array([-1., -1., -1., -1., -1., -1., -1.])\n\n\n\nIf I now create a file called data2.txt with only the first line:\n\n\n\n    $ cat data2.txt\n    -9.9999999961922814E-01\n\n\n\nloadtxt works correctly:\n\n\n\n    Python 2.6.1 (r261:67515, Feb 11 2010, 00:51:29) \n    [GCC 4.2.1 (Apple Inc. build 5646)] on darwin\n    Type ""help"", ""copyright"", ""credits"" or ""license"" for more information.\n    >>> import numpy as np\n    >>> np.__version__\n    \'2.0.0.dev8657\'\n    >>> np.loadtxt(\'data2.txt\')\n    array(-0.99999999961922814)\n\n'"
2184,7731040,numpy-gitbot,numpy-gitbot,2012-10-19 22:16:39,2012-10-19 22:16:42,2012-10-19 22:16:42,closed,,NumPy 1.7,12,11 - Bug;component: numpy.core;priority: normal,https://api.github.com/repos/numpy/numpy/issues/2184,b'numpy.ndarray.clip segfaults on big-endian dtype (Trac #1588)',"b""_Original ticket http://projects.scipy.org/numpy/ticket/1588 on 2010-08-20 by trac user bdkern, assigned to unknown._\n\n\n\n    import numpy\n    numpy.zeros((1,), dtype='>i2').clip(min=0)\n\n\nsegfaults on three systems tried: Ubuntu / Python 2.5.2 / Numpy 1.1.1, Red Hat / py 2.6.4 / np 1.3.0, WinXP / py 2.5.4 / np 1.3.0.  This same setup also segfaults for dtypes '>f4', '>f8', etc. """
2182,7731037,numpy-gitbot,numpy-gitbot,2012-10-19 22:16:31,2012-10-19 22:16:32,2012-10-19 22:16:32,closed,,1.5.1,4,11 - Bug;component: numpy.ma;priority: high,https://api.github.com/repos/numpy/numpy/issues/2182,"b""numpy.ma.core._print_templates missing 'long' key (Trac #1586)""","b""_Original ticket http://projects.scipy.org/numpy/ticket/1586 on 2010-08-18 by trac user alue, assigned to @pierregm._\n\nNote: I'm not sure what's causing this problem.\n\nAfter downloading from the repository, building, and installing, `numpy.ma.core._print_templates` has no 'long' key, which is referenced in `numpy.ma.core.MaskedArray.__repr__()`.\n\nTo reproduce:\n\n\n\n    $ uname -a\n    Linux HOSTNAME 2.6.32-24-generic #39-Ubuntu SMP Wed Jul 28 06:07:29 UTC 2010 i686 GNU/Linux\n    $ lsb_release -a\n    No LSB modules are available.\n    Distributor ID:\tUbuntu\n    Description:\tUbuntu 10.04.1 LTS\n    Release:\t10.04\n    Codename:\tlucid\n    $ svn co http://svn.scipy.org/svn/numpy/trunk/ numpy >/dev/null\n    $ cd numpy\n    $ python3 setup.py build\n\n\n\nAlthough numpy/ma/core.py does not contain this problem, build/py3k/numpy/ma/core.py does.\n\nOne of the consequences is that calls to `ma.array()` fail."""
2181,7731036,numpy-gitbot,numpy-gitbot,2012-10-19 22:16:29,2012-10-19 22:16:30,2012-10-19 22:16:30,closed,,1.6.0,2,11 - Bug;component: numpy.ma;priority: normal,https://api.github.com/repos/numpy/numpy/issues/2181,b'Contradictory info in MaskedArray documentation (Trac #1584)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/1584 on 2010-08-17 by trac user obernardo, assigned to @pierregm._\n\n>>> help(np.ma.MaskedArray)\n\nreturns a page informing that in MaskedArray constructor, copy = True and then says that the default value is False:\n\n Construction::\n |  \n |    x = MaskedArray(data, mask=nomask, dtype=None, copy=True,\n |                    fill_value=None, keep_mask=True, hard_mask=False,\n |                    shrink=True)\n |  \n |  Parameters\n |  ----------\n \n  ...\n\n |  copy : bool, optional\n |      Whether to copy the input data (True), or to use a reference instead.\n |      Default is False.\n'"
2180,7731032,numpy-gitbot,numpy-gitbot,2012-10-19 22:16:25,2012-10-23 02:44:22,2012-10-19 22:16:28,closed,,1.5.0,9,11 - Bug;component: numpy.core;priority: high,https://api.github.com/repos/numpy/numpy/issues/2180,b'fromfile/tofile py3k errors on Windows (Trac #1583)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/1583 on 2010-08-14 by @rgommers, assigned to unknown._\n\nIn total 38 errors (see attached), all like this:\n\n\n    ======================================================================\n    ERROR: test_multiarray.TestIO.test_ascii\n    ----------------------------------------------------------------------\n    Traceback (most recent call last):\n      File ""Z:\\Users\\rgommers\\.wine\\drive_c\\Python31\\lib\\site-packages\\nose-3.0.0.dev-py3.1.egg\\nose\\case.py"", line 178, in runTest\n        self.test(*self.arg)\n      File ""Z:\\Users\\rgommers\\.wine\\drive_c\\Python31\\lib\\site-packages\\numpy\\core\\tests\\test_multiarray.py"", line 1017, in test_ascii\n        self._check_from(\'1 , 2 , 3 , 4\', [1.,2.,3.,4.], sep=\',\')\n      File ""Z:\\Users\\rgommers\\.wine\\drive_c\\Python31\\lib\\site-packages\\numpy\\core\\tests\\test_multiarray.py"", line 980, in _check_from\n        y = np.fromfile(self.filename, **kw)\n    IOError: first argument must be an open file\n    \n    ======================================================================\n    ERROR: test_multiarray.TestIO.test_ascii\n    ----------------------------------------------------------------------\n    Traceback (most recent call last):\n      File ""Z:\\Users\\rgommers\\.wine\\drive_c\\Python31\\lib\\site-packages\\nose-3.0.0.dev-py3.1.egg\\nose\\case.py"", line 370, in tearDown\n        try_run(self.inst, (\'teardown\', \'tearDown\'))\n      File ""Z:\\Users\\rgommers\\.wine\\drive_c\\Python31\\lib\\site-packages\\nose-3.0.0.dev-py3.1.egg\\nose\\util.py"", line 469, in try_run\n        return func()\n      File ""Z:\\Users\\rgommers\\.wine\\drive_c\\Python31\\lib\\site-packages\\numpy\\core\\tests\\test_multiarray.py"", line 918, in tearDown\n        os.unlink(self.filename)\n    WindowsError: [Error 32] Sharing violation: \'z:\\\\var\\\\folders\\\\uu\\\\uuxfo1nlfae4yyypscz-xe+++ti\\\\-tmp-\\\\tmpdtktwh\'\n\n\nLooks like #1943 is related.'"
2178,7731030,numpy-gitbot,numpy-gitbot,2012-10-19 22:16:21,2012-10-19 22:16:22,2012-10-19 22:16:22,closed,,1.6.0,3,11 - Bug;component: numpy.core;priority: normal,https://api.github.com/repos/numpy/numpy/issues/2178,"b""arr.copy(order={'C','F'}) raises TypeError (Trac #1581)""","b'_Original ticket http://projects.scipy.org/numpy/ticket/1581 on 2010-08-13 by trac user kwmsmith, assigned to unknown._\n\nI\'d really like `arr.copy(order=\'F\')` to work -- is it supposed to as\nits docstring says, or is it supposed to raise a `TypeError` as it does\nnow?\n\nThis is on numpy 1.4\n\n\n\n    >>> import numpy as np\n    >>> a = np.arange(10).reshape(5,2)\n    >>> a\n    array([[0, 1],\n          [2, 3],\n          [4, 5],\n          [6, 7],\n          [8, 9]])\n    >>> print a.copy.__doc__\n    a.copy(order=\'C\')\n    \n       Return a copy of the array.\n    \n       Parameters\n       ----------\n       order : {\'C\', \'F\', \'A\'}, optional\n           By default, the result is stored in C-contiguous (row-major) order in\n           memory.  If `order` is `F`, the result has \'Fortran\' (column-major)\n           order.  If order is \'A\' (\'Any\'), then the result has the same order\n           as the input.\n    \n       Examples\n       --------\n       >>> x = np.array([[1,2,3],[4,5,6]], order=\'F\')\n    \n       >>> y = x.copy()\n    \n       >>> x.fill(0)\n    \n       >>> x\n       array([[0, 0, 0],\n              [0, 0, 0]])\n    \n       >>> y\n       array([[1, 2, 3],\n              [4, 5, 6]])\n    \n       >>> y.flags[\'C_CONTIGUOUS\']\n       True\n    >>> a.copy(order=\'C\')\n    Traceback (most recent call last):\n     File ""<stdin>"", line 1, in <module>\n    TypeError: copy() takes no keyword arguments\n    >>> a.copy(order=\'F\')\n    Traceback (most recent call last):\n     File ""<stdin>"", line 1, in <module>\n    TypeError: copy() takes no keyword arguments\n    >>>\n\n\n\nFrom Pauli Virtanen:\n\nThe problem is probably that the function is using `PyArg_ParseTuple`\ninstead of `PyArg_ParseTupleAndKeywords`.'"
2177,7731028,numpy-gitbot,numpy-gitbot,2012-10-19 22:16:19,2012-10-19 22:16:19,2012-10-19 22:16:19,closed,,,2,11 - Bug;component: numpy.core;priority: high,https://api.github.com/repos/numpy/numpy/issues/2177,b'shape lost inside record arrays (Trac #1580)',"b""_Original ticket http://projects.scipy.org/numpy/ticket/1580 on 2010-08-12 by trac user batripler, assigned to unknown._\n\nThe following code replicates the problem:\n\n\n\n    import numpy\n    def foo(dim):\n      sdt=numpy.dtype([('v',(float,(1,)))])\n      print numpy.empty(dim,sdt)['v'].shape\n      print numpy.empty(dim,numpy.dtype([('d1',sdt),('d2',sdt)]))['d1']['v'].shape\n    def test():\n      foo((2,3))\n      foo((0,3))\n\n\n\nOutput:\n\n\n    (2, 3, 1)\n    (2, 3, 1)\n    (0, 3, 1)\n    (1, 0, 3)\n\n\n\nThe 1st line matches the 2nd line of output, since the array is of non-zero size. The same should be true for the 3rd and 4th lines, when the array happens to be zero-sized (i.e. zero along at least one dimension). Indexing zero-sized record arrays with subarray fields doesn't return arrays of the correct shape.\n"""
2176,7731027,numpy-gitbot,numpy-gitbot,2012-10-19 22:16:17,2012-10-19 22:16:17,2012-10-19 22:16:17,closed,,1.6.0,2,11 - Bug;component: numpy.lib;priority: normal,https://api.github.com/repos/numpy/numpy/issues/2176,b'incorrect check + docstring for tri[ul]_indices_from (Trac #1579)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/1579 on 2010-08-10 by @yarikoptic, assigned to unknown._\n\nincorrect check:\n\n\n    if not arr.ndim==2 and arr.shape[0] == arr.shape[1]:\n\n\nshould be\n\n\n    if not (arr.ndim==2 and arr.shape[0] == arr.shape[1]):\n\n\n\nincorrect docstring:\nsignature is {{{arr,k=0}} while docstring describes n and k (as in tri?_indices functions)'"
2175,7731023,numpy-gitbot,numpy-gitbot,2012-10-19 22:16:06,2012-10-19 22:16:15,2012-10-19 22:16:15,closed,,NumPy 1.7,31,11 - Bug;component: numpy.core;priority: normal,https://api.github.com/repos/numpy/numpy/issues/2175,b'test_from_unicode crashes on Python 2.7 and Numpy 2.0.0-devel (Trac #1578)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/1578 on 2010-08-10 by trac user mbudisic, assigned to unknown._\n\nI am trying to build my entire Python stack from source on x86_64 machine under CentOS, GCC 4.5.0, with custom compiled ATLAS. Numpy builds but its test crash with SIGABRT signal, when ""numpy.test()"" is run.\n\nThis is output into Python shell before exit.\n\n\n\n    test_from_unicode (test_defchararray.TestBasic) ... Debug memory block at address p=0x17941d0: API \'m\'\n        4 bytes originally requested\n        The 7 pad bytes at p-7 are FORBIDDENBYTE, as expected.\n        The 8 pad bytes at tail=0x17941d4 are FORBIDDENBYTE, as expected.\n        The block was made by call #814353 to debug malloc/realloc.\n        Data at p: ff fe 00 00\n    Fatal Python error: bad ID: Allocated using API \'m\', verified using API \'o\'\n\n\n\nI\'m attaching full gdb backtrace and pystack outputs. '"
2174,7731021,numpy-gitbot,numpy-gitbot,2012-10-19 22:16:04,2012-10-19 22:16:05,2012-10-19 22:16:05,closed,,NumPy 2.0,3,11 - Bug;component: numpy.ma;priority: low,https://api.github.com/repos/numpy/numpy/issues/2174,b'numpy.polyfit ignores masks (Trac #1577)',"b""_Original ticket http://projects.scipy.org/numpy/ticket/1577 on 2010-08-10 by trac user gdmcbain, assigned to @pierregm._\n\nA masked array of abscissae gives the same results as if unmasked; compressing it gives a different result, which is perhaps the expected one; e.g., based on the example at [http://docs.scipy.org/doc/numpy/reference/generated/numpy.ma.polyfit.html?highlight=polyfit#numpy.ma.polyfit], the script\n\n\n    import numpy as np\n    import numpy.ma as ma\n    \n    x = np.array ([0.0, 1.0, 2.0, 3.0,  4.0,  5.0])\n    y = np.array ([0.0, 0.8, 0.9, 0.1, -0.8, -1.0])\n    print '  unmasked: ', np.polyfit (x, y, 3)\n    \n    mask = np.zeros (x.shape, dtype = np.bool)\n    mask[2] = True\n    mx = ma.array (x, mask = mask)\n    my = ma.array (y, mask = mask)\n    print '    masked: ', np.polyfit (mx, my, 3)    # ignores mask!\n    print 'compressed: ', np.polyfit (mx.compressed (), my.compressed (), 3)\n\n\nproduces\n\n\n\n      unmasked:  [ 0.08703704 -0.81349206  1.69312169 -0.03968254]\n        masked:  [ 0.08703704 -0.81349206  1.69312169 -0.03968254]\n    compressed:  [ 0.07941176 -0.74159664  1.5210084  -0.01680672]\n    \n\n\n"""
2173,7731020,numpy-gitbot,numpy-gitbot,2012-10-19 22:16:00,2012-10-19 22:16:02,2012-10-19 22:16:02,closed,,1.6.0,2,11 - Bug;component: numpy.ma;priority: normal,https://api.github.com/repos/numpy/numpy/issues/2173,b'numpy.ma.flatnotmasked_contiguous error in slice.stop values (Trac #1576)',"b""_Original ticket http://projects.scipy.org/numpy/ticket/1576 on 2010-08-09 by trac user gdmcbain, assigned to @pierregm._\n\nThe function numpy.ma.flatnotmasked_contiguous returns slices which\nmiss the last element; for example, based on the example at\n[http://docs.scipy.org/doc/numpy/reference/generated/numpy.ma.flatnotmasked_contiguous.html]\n\n\n\n    import numpy as np\n    a = np.arange (10)\n    am = np.ma.array (a, mask = (a < 3) | (a > 8) | (a == 5))\n    segments = np.ma.flatnotmasked_contiguous (am)\n    print 'the masked array:', am\n    print 'flatnotmasked_contiguous: ', segments\n    print am[segments[0]], am[segments[1]]\n\n\n\n\nprints\n\nthe masked array: [-- -- -- 3 4 -- 6 7 8 --]\nflatnotmasked_contiguous:  [slice(3, 4, None), slice(6, 8, None)]\n[3] [6 7]\n\nwhich isn't really what we're after; I would have expected [3 4] and\n[6 7 8]. Compare the similarly named\nmatplotlib.mlab.contiguous_regions which does have the expected\nbehaviour (although its output format is different)\n\n\n\n\n    import matplotlib.mlab\n    segments1 = matplotlib.mlab.contiguous_regions (am)\n    print 'contiguous_regions:', segments1\n    print am[slice (*segments1[0])], am[slice (*segments1[1])]\n\n\n\n\nwhich prints\n\ncontiguous_regions: [(3, 5), (6, 9)]\n[3 4] [6 7 8]\n\n"""
2172,7731018,numpy-gitbot,numpy-gitbot,2012-10-19 22:15:55,2012-10-19 22:15:59,2012-10-19 22:15:59,closed,,1.6.2,7,11 - Bug;component: numpy.core;priority: normal,https://api.github.com/repos/numpy/numpy/issues/2172,b'format gives ValueError when passed float32 (Trac #1575)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/1575 on 2010-08-09 by trac user crm, assigned to unknown._\n\nPassing a float32 to the inbuilt format function returns a value error:\n\n\n\n    >>> format(np.float32(1.23),\'.1f\')\n    Traceback (most recent call last):\n      File ""<stdin>"", line 1, in <module>\n    ValueError: Unknown format code \'f\' for object of type \'str\'\n\n\n\nfloat64 works as expected:\n\n\n    >>> format(np.float64(1.23),\'.1f\')\n    \'1.2\'\n\n\n\npython version: 2.6.5[[BR]]\nnumpy version: 1.4.1[[BR]]\nOS: WindowsXP'"
2171,7731013,numpy-gitbot,numpy-gitbot,2012-10-19 22:15:47,2012-10-19 22:15:53,2012-10-19 22:15:53,closed,,1.5.1,7,11 - Bug;component: numpy.core;priority: normal,https://api.github.com/repos/numpy/numpy/issues/2171,b'1.5.0b1 umath complex failures on Windows (Trac #1574)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/1574 on 2010-08-08 by @rgommers, assigned to unknown._\n\nReported on Windows with Python 2.7 by two people with the 1.5.0b1 binary.\n\n\n\n    Python 2.7 (r27:82525, Jul  4 2010, 09:01:59) [MSC v.1500 32 bit (Intel)] on win32\n    Type ""help"", ""copyright"", ""credits"" or ""license"" for more information.\n    >>> import numpy as np\n    >>> np.test()\n    Running unit tests for numpy\n    NumPy version 1.5.0b1\n    NumPy is installed in C:\\Python27\\lib\\site-packages\\numpy\n    Python version 2.7 (r27:82525, Jul  4 2010, 09:01:59) [MSC v.1500 32 bit (Intel)]\n    nose version 0.11.0\n    ..........................................................................................\n    ....................E.....................................................................\n    ..........................................................................................\n    ..........................................................................................\n    ..........................................................................................\n    .....................K....................................................................\n    ..........................................................................................\n    ..................................................................K.......................\n    ...................................K..K.............Warning: invalid value encountered in\n    absolute\n    .Warning: invalid value encountered in absolute\n    ................K........F....FFFF.....K.F.........FF..FFF.....F..........................\n    ......................................................S...................................\n    ..........................................................................................\n    ..........................................................................................\n    ..........................................................................................\n    ..........................................................................................\n    .......................................K.........K........................................\n    ..........................................................................................\n    ..........................................................................................\n    ..........................................................................................\n    ..........................................................................................\n    ..........................................S...............................................\n    ..........................................................................................\n    ..........................................................................................\n    ..........................................................................................\n    ..........................................................................................\n    ..........................................................................................\n    ..........................................................................................\n    ................................................................\n    ======================================================================\n    ERROR: test_filename (test_memmap.TestMemmap)\n    ----------------------------------------------------------------------\n    Traceback (most recent call last):\n      File ""C:\\Python27\\lib\\site-packages\\numpy\\core\\tests\\test_memmap.py"", line 60, in test_f\n    ilename\n        os.unlink(tmpname)\n    WindowsError: [Error 32] The process cannot access the file because it is being used by an\n    other process: \'c:\\\\users\\\\alanis~1\\\\appdata\\\\local\\\\temp\\\\mmapoo5c2b\'\n    \n    ======================================================================\n    FAIL: test_umath_complex.TestCexp.test_special_values(<ufunc \'exp\'>, inf, 0, inf, 0)\n    test_umath_complex.TestCexp.test_special_values(<ufunc \'exp\'>, inf, 0, inf, 0)\n    ----------------------------------------------------------------------\n    Traceback (most recent call last):\n      File ""C:\\Python27\\lib\\site-packages\\nose\\case.py"", line 183, in runTest\n        self.test(*self.arg)\n      File ""C:\\Python27\\lib\\site-packages\\numpy\\core\\tests\\test_umath_complex.py"", line 539, i\n    n check_complex_value\n        assert_equal(f(z1), z2)\n      File ""C:\\Python27\\lib\\site-packages\\numpy\\testing\\utils.py"", line 256, in assert_equal\n        return assert_array_equal(actual, desired, err_msg, verbose)\n      File ""C:\\Python27\\lib\\site-packages\\numpy\\testing\\utils.py"", line 686, in assert_array_e\n    qual\n        verbose=verbose, header=\'Arrays are not equal\')\n      File ""C:\\Python27\\lib\\site-packages\\numpy\\testing\\utils.py"", line 596, in assert_array_c\n    ompare\n        raise AssertionError(msg)\n    AssertionError:\n    Arrays are not equal\n    \n    (x and y nan location mismatch [ True], False mismatch)\n     x: array([ inf nanj])\n     y: array((inf+0j))\n    >>  raise AssertionError(\'\\nArrays are not equal\\n\\n(x and y nan location mismatch [ True]\n    , False mismatch)\\n x: array([ inf nanj])\\n y: array((inf+0j))\')\n    \n    \n    ======================================================================\n    FAIL: test_umath_complex.TestCexp.test_special_values(None,)\n    test_umath_complex.TestCexp.test_special_values(None,)\n    ----------------------------------------------------------------------\n    Traceback (most recent call last):\n      File ""C:\\Python27\\lib\\site-packages\\nose\\case.py"", line 183, in runTest\n        self.test(*self.arg)\n      File ""C:\\Python27\\lib\\site-packages\\numpy\\core\\tests\\test_umath_complex.py"", line 60, in\n     _check_ninf_inf\n        raise AssertionError(msgform %(z.real, z.imag))\n    AssertionError: cexp(-inf, inf) is (nan, nan), expected (+-0, +-0)\n    >>  raise AssertionError(\'cexp(-inf, inf) is (%f, %f), expected (+-0, +-0)\' %((nan+nan*j).\n    real, (nan+nan*j).imag))\n    \n    \n    ======================================================================\n    FAIL: test_umath_complex.TestCexp.test_special_values(None,)\n    test_umath_complex.TestCexp.test_special_values(None,)\n    ----------------------------------------------------------------------\n    Traceback (most recent call last):\n      File ""C:\\Python27\\lib\\site-packages\\nose\\case.py"", line 183, in runTest\n        self.test(*self.arg)\n      File ""C:\\Python27\\lib\\site-packages\\numpy\\core\\tests\\test_umath_complex.py"", line 73, in\n     _check_inf_inf\n        raise AssertionError(msgform % (z.real, z.imag))\n    AssertionError: cexp(inf, inf) is (nan, nan), expected (+-inf, nan)\n    >>  raise AssertionError(\'cexp(inf, inf) is (%f, %f), expected (+-inf, nan)\' % ((nan+nan*j\n    ).real, (nan+nan*j).imag))\n    \n    \n    ======================================================================\n    FAIL: test_umath_complex.TestCexp.test_special_values(None,)\n    test_umath_complex.TestCexp.test_special_values(None,)\n    ----------------------------------------------------------------------\n    Traceback (most recent call last):\n      File ""C:\\Python27\\lib\\site-packages\\nose\\case.py"", line 183, in runTest\n        self.test(*self.arg)\n      File ""C:\\Python27\\lib\\site-packages\\numpy\\core\\tests\\test_umath_complex.py"", line 86, in\n     _check_ninf_nan\n        raise AssertionError(msgform % (z.real, z.imag))\n    AssertionError: cexp(-inf, nan) is (nan, nan), expected (+-0, +-0)\n    >>  raise AssertionError(\'cexp(-inf, nan) is (%f, %f), expected (+-0, +-0)\' % ((nan+nan*j)\n    .real, (nan+nan*j).imag))\n    \n    \n    ======================================================================\n    FAIL: test_umath_complex.TestCexp.test_special_values(None,)\n    test_umath_complex.TestCexp.test_special_values(None,)\n    ----------------------------------------------------------------------\n    Traceback (most recent call last):\n      File ""C:\\Python27\\lib\\site-packages\\nose\\case.py"", line 183, in runTest\n        self.test(*self.arg)\n      File ""C:\\Python27\\lib\\site-packages\\numpy\\core\\tests\\test_umath_complex.py"", line 99, in\n     _check_inf_nan\n        raise AssertionError(msgform % (z.real, z.imag))\n    AssertionError: cexp(-inf, nan) is (nan, nan), expected (+-inf, nan)\n    >>  raise AssertionError(\'cexp(-inf, nan) is (%f, %f), expected (+-inf, nan)\' % ((nan+nan*\n    j).real, (nan+nan*j).imag))\n    \n    \n    ======================================================================\n    FAIL: test_special_values (test_umath_complex.TestClog)\n    ----------------------------------------------------------------------\n    Traceback (most recent call last):\n      File ""C:\\Python27\\lib\\site-packages\\numpy\\core\\tests\\test_umath_complex.py"", line 144, i\n    n test_special_values\n        self.assertRaises(FloatingPointError, np.log, x)\n    AssertionError: FloatingPointError not raised\n    \n    \n    ======================================================================\n    FAIL: test_umath_complex.TestCsqrt.test_special_values(<ufunc \'sqrt\'>, 1, inf, inf, inf)\n    test_umath_complex.TestCsqrt.test_special_values(<ufunc \'sqrt\'>, 1, inf, inf, inf)\n    ----------------------------------------------------------------------\n    Traceback (most recent call last):\n      File ""C:\\Python27\\lib\\site-packages\\nose\\case.py"", line 183, in runTest\n        self.test(*self.arg)\n      File ""C:\\Python27\\lib\\site-packages\\numpy\\core\\tests\\test_umath_complex.py"", line 539, i\n    n check_complex_value\n        assert_equal(f(z1), z2)\n      File ""C:\\Python27\\lib\\site-packages\\numpy\\testing\\utils.py"", line 256, in assert_equal\n        return assert_array_equal(actual, desired, err_msg, verbose)\n      File ""C:\\Python27\\lib\\site-packages\\numpy\\testing\\utils.py"", line 686, in assert_array_e\n    qual\n        verbose=verbose, header=\'Arrays are not equal\')\n      File ""C:\\Python27\\lib\\site-packages\\numpy\\testing\\utils.py"", line 596, in assert_array_c\n    ompare\n        raise AssertionError(msg)\n    AssertionError:\n    Arrays are not equal\n    \n    (x and y nan location mismatch [ True], False mismatch)\n     x: array([ inf nanj])\n     y: array((inf+infj))\n    >>  raise AssertionError(\'\\nArrays are not equal\\n\\n(x and y nan location mismatch [ True]\n    , False mismatch)\\n x: array([ inf nanj])\\n y: array((inf+infj))\')\n    \n    \n    ======================================================================\n    FAIL: test_umath_complex.TestCsqrt.test_special_values(<ufunc \'sqrt\'>, -1, inf, inf, inf)\n    test_umath_complex.TestCsqrt.test_special_values(<ufunc \'sqrt\'>, -1, inf, inf, inf)\n    ----------------------------------------------------------------------\n    Traceback (most recent call last):\n      File ""C:\\Python27\\lib\\site-packages\\nose\\case.py"", line 183, in runTest\n        self.test(*self.arg)\n      File ""C:\\Python27\\lib\\site-packages\\numpy\\core\\tests\\test_umath_complex.py"", line 539, i\n    n check_complex_value\n        assert_equal(f(z1), z2)\n      File ""C:\\Python27\\lib\\site-packages\\numpy\\testing\\utils.py"", line 256, in assert_equal\n        return assert_array_equal(actual, desired, err_msg, verbose)\n      File ""C:\\Python27\\lib\\site-packages\\numpy\\testing\\utils.py"", line 686, in assert_array_e\n    qual\n        verbose=verbose, header=\'Arrays are not equal\')\n      File ""C:\\Python27\\lib\\site-packages\\numpy\\testing\\utils.py"", line 596, in assert_array_c\n    ompare\n        raise AssertionError(msg)\n    AssertionError:\n    Arrays are not equal\n    \n    (x and y nan location mismatch [ True], False mismatch)\n     x: array([ nan infj])\n     y: array((inf+infj))\n    >>  raise AssertionError(\'\\nArrays are not equal\\n\\n(x and y nan location mismatch [ True]\n    , False mismatch)\\n x: array([ nan infj])\\n y: array((inf+infj))\')\n    \n    \n    ======================================================================\n    FAIL: test_umath_complex.TestCsqrt.test_special_values(<ufunc \'sqrt\'>, inf, inf, inf, inf)\n    \n    test_umath_complex.TestCsqrt.test_special_values(<ufunc \'sqrt\'>, inf, inf, inf, inf)\n    ----------------------------------------------------------------------\n    Traceback (most recent call last):\n      File ""C:\\Python27\\lib\\site-packages\\nose\\case.py"", line 183, in runTest\n        self.test(*self.arg)\n      File ""C:\\Python27\\lib\\site-packages\\numpy\\core\\tests\\test_umath_complex.py"", line 539, i\n    n check_complex_value\n        assert_equal(f(z1), z2)\n      File ""C:\\Python27\\lib\\site-packages\\numpy\\testing\\utils.py"", line 256, in assert_equal\n        return assert_array_equal(actual, desired, err_msg, verbose)\n      File ""C:\\Python27\\lib\\site-packages\\numpy\\testing\\utils.py"", line 686, in assert_array_e\n    qual\n        verbose=verbose, header=\'Arrays are not equal\')\n      File ""C:\\Python27\\lib\\site-packages\\numpy\\testing\\utils.py"", line 596, in assert_array_c\n    ompare\n        raise AssertionError(msg)\n    AssertionError:\n    Arrays are not equal\n    \n    (x and y nan location mismatch [ True], False mismatch)\n     x: array([ inf nanj])\n     y: array((inf+infj))\n    >>  raise AssertionError(\'\\nArrays are not equal\\n\\n(x and y nan location mismatch [ True]\n    , False mismatch)\\n x: array([ inf nanj])\\n y: array((inf+infj))\')\n    \n    \n    ======================================================================\n    FAIL: test_umath_complex.TestCsqrt.test_special_values(<ufunc \'sqrt\'>, -inf, inf, inf, inf\n    )\n    test_umath_complex.TestCsqrt.test_special_values(<ufunc \'sqrt\'>, -inf, inf, inf, inf)\n    ----------------------------------------------------------------------\n    Traceback (most recent call last):\n      File ""C:\\Python27\\lib\\site-packages\\nose\\case.py"", line 183, in runTest\n        self.test(*self.arg)\n      File ""C:\\Python27\\lib\\site-packages\\numpy\\core\\tests\\test_umath_complex.py"", line 539, i\n    n check_complex_value\n        assert_equal(f(z1), z2)\n      File ""C:\\Python27\\lib\\site-packages\\numpy\\testing\\utils.py"", line 256, in assert_equal\n        return assert_array_equal(actual, desired, err_msg, verbose)\n      File ""C:\\Python27\\lib\\site-packages\\numpy\\testing\\utils.py"", line 686, in assert_array_e\n    qual\n        verbose=verbose, header=\'Arrays are not equal\')\n      File ""C:\\Python27\\lib\\site-packages\\numpy\\testing\\utils.py"", line 596, in assert_array_c\n    ompare\n        raise AssertionError(msg)\n    AssertionError:\n    Arrays are not equal\n    \n    (x and y nan location mismatch [ True], False mismatch)\n     x: array([ nan infj])\n     y: array((inf+infj))\n    >>  raise AssertionError(\'\\nArrays are not equal\\n\\n(x and y nan location mismatch [ True]\n    , False mismatch)\\n x: array([ nan infj])\\n y: array((inf+infj))\')\n    \n    \n    ======================================================================\n    FAIL: test_umath_complex.TestCsqrt.test_special_values(<ufunc \'sqrt\'>, nan, inf, inf, inf)\n    \n    test_umath_complex.TestCsqrt.test_special_values(<ufunc \'sqrt\'>, nan, inf, inf, inf)\n    ----------------------------------------------------------------------\n    Traceback (most recent call last):\n      File ""C:\\Python27\\lib\\site-packages\\nose\\case.py"", line 183, in runTest\n        self.test(*self.arg)\n      File ""C:\\Python27\\lib\\site-packages\\numpy\\core\\tests\\test_umath_complex.py"", line 539, i\n    n check_complex_value\n        assert_equal(f(z1), z2)\n      File ""C:\\Python27\\lib\\site-packages\\numpy\\testing\\utils.py"", line 256, in assert_equal\n        return assert_array_equal(actual, desired, err_msg, verbose)\n      File ""C:\\Python27\\lib\\site-packages\\numpy\\testing\\utils.py"", line 686, in assert_array_e\n    qual\n        verbose=verbose, header=\'Arrays are not equal\')\n      File ""C:\\Python27\\lib\\site-packages\\numpy\\testing\\utils.py"", line 596, in assert_array_c\n    ompare\n        raise AssertionError(msg)\n    AssertionError:\n    Arrays are not equal\n    \n    (x and y nan location mismatch [ True], False mismatch)\n     x: array([ nan nanj])\n     y: array((inf+infj))\n    >>  raise AssertionError(\'\\nArrays are not equal\\n\\n(x and y nan location mismatch [ True]\n    , False mismatch)\\n x: array([ nan nanj])\\n y: array((inf+infj))\')\n    \n    \n    ======================================================================\n    FAIL: test_umath_complex.TestCsqrt.test_special_values(None,)\n    test_umath_complex.TestCsqrt.test_special_values(None,)\n    ----------------------------------------------------------------------\n    Traceback (most recent call last):\n      File ""C:\\Python27\\lib\\site-packages\\nose\\case.py"", line 183, in runTest\n        self.test(*self.arg)\n      File ""C:\\Python27\\lib\\site-packages\\numpy\\core\\tests\\test_umath_complex.py"", line 340, i\n    n _check_ninf_nan\n        raise AssertionError(msgform % (z.real, z.imag))\n    AssertionError: csqrt(-inf, nan) is (nan, nan), expected (nan, +-inf)\n    >>  raise AssertionError(\'csqrt(-inf, nan) is (%f, %f), expected (nan, +-inf)\' % ((nan+nan\n    *j).real, (nan+nan*j).imag))\n    \n    \n    ----------------------------------------------------------------------\n    Ran 2456 tests in 19.070s\n    \n    FAILED (KNOWNFAIL=8, SKIP=2, errors=1, failures=12)\n    <nose.result.TextTestResult run=2456 errors=1 failures=12>\n\n'"
2170,7731011,numpy-gitbot,numpy-gitbot,2012-10-19 22:15:44,2012-10-19 22:15:45,2012-10-19 22:15:45,closed,,NumPy 1.7,3,11 - Bug;component: numpy.lib;priority: normal,https://api.github.com/repos/numpy/numpy/issues/2170,b'savetxt complex output (Trac #1573)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/1573 on 2010-08-06 by @nbecker, assigned to unknown._\n\nsavetxt does not work properly for complex.  Seems to only save real part.\n\nI believe savetxt should save complex arrays with elements in the same format python using for complex numbers:\n\nfor e in u:\n   print e\n\nThis gives:\n(r0+i0j)\n(r1+i1j)\n...'"
2169,7731010,numpy-gitbot,numpy-gitbot,2012-10-19 22:15:40,2012-10-19 22:15:42,2012-10-19 22:15:42,closed,,,1,11 - Bug;component: numpy.ma;priority: normal,https://api.github.com/repos/numpy/numpy/issues/2169,b'FloatingPointError: invalid value encountered in isfinite (Trac #1572)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/1572 on 2010-08-04 by trac user nwatanabe, assigned to @pierregm._\n\nnumpy.ma.log10([0.0]) raises an unexpected FloatingPointError in NumPy v1.4.1:\n\n\n\n    >>> j = numpy.seterr(invalid=\'ignore\')\n    >>> numpy.log10(0.0)\n    -inf\n    >>> numpy.ma.log10([0.0])\n    masked_array(data = [--],\n                 mask = [ True],\n           fill_value = 1e+20)\n    \n    >>> j = numpy.seterr(invalid=\'raise\')\n    >>> numpy.log10(0.0)\n    -inf\n    >>> numpy.ma.log10([0.0])\n    Traceback (most recent call last):\n      File ""<stdin>"", line 1, in <module>\n      File ""/share/apps/python/2.6.5/lib/python2.6/site-packages/numpy/ma/core.py"", line 856, in __call__\n        m = ~umath.isfinite(result)\n    FloatingPointError: invalid value encountered in isfinite\n\n'"
2168,7731007,numpy-gitbot,numpy-gitbot,2012-10-19 22:15:37,2012-10-19 22:15:39,2012-10-19 22:15:39,closed,,1.6.0,4,11 - Bug;component: Other;priority: normal,https://api.github.com/repos/numpy/numpy/issues/2168,b'Python3.2a1 errors (Trac #1571)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/1571 on 2010-08-03 by @bsouthey, assigned to unknown._\n\nFirst, string.maketrans function that was depreciated in Python 3.1 was removed in Python3.2.\nhttp://docs.python.org/dev/py3k/whatsnew/3.2.html\n\nConsequently a minor change is needed in line 116 of\nnumpy/core/code_generators/generate_umath.py\n\nAfter doing that, the build on Linux 64 bit, python3.2 crashes due to \'undefined symbol: PyCObject_AsVoidPtr\'.\n\n\n\n    \n    $ python3.2 -c ""import numpy; numpy.test()""\n    Traceback (most recent call last):\n      File ""<string>"", line 1, in <module>\n      File ""/usr/local/lib/python3.2/site-packages/numpy/__init__.py"", line 136, in <module>\n        from . import add_newdocs\n      File ""/usr/local/lib/python3.2/site-packages/numpy/add_newdocs.py"", line 9, in <module>\n        from numpy.lib import add_newdoc\n      File ""/usr/local/lib/python3.2/site-packages/numpy/lib/__init__.py"", line 4, in <module>\n        from .type_check import *\n      File ""/usr/local/lib/python3.2/site-packages/numpy/lib/type_check.py"", line 8, in <module>\n        import numpy.core.numeric as _nx\n      File ""/usr/local/lib/python3.2/site-packages/numpy/core/__init__.py"", line 5, in <module>\n        from . import multiarray\n    ImportError: /usr/local/lib/python3.2/site-packages/numpy/core/multiarray.so: undefined symbol: PyCObject_AsVoidPtr\n    \n\n\n\nFrom the build logs, this is appears to be this section:\n\n\n\n    In file included from /usr/local/include/python3.2/Python.h:8,\n                     from numpy/core/src/multiarray/common.c:2,\n                     from numpy/core/src/multiarray/multiarraymodule_onefile.c:8:\n    /usr/local/include/python3.2/pyconfig.h:137:1: warning: this is the location of the previous definition\n    In file included from numpy/core/src/multiarray/multiarraymodule_onefile.c:14:\n    numpy/core/src/multiarray/arraytypes.c.src: In function \xa1\xaeVOID_getitem\xa1\xaf:\n    numpy/core/src/multiarray/arraytypes.c.src:633: warning: assignment from incompatible pointer type\n    In file included from numpy/core/src/multiarray/multiarraymodule_onefile.c:21:\n    numpy/core/src/multiarray/ctors.c: In function \xa1\xae_array_from_buffer_3118\xa1\xaf:\n    numpy/core/src/multiarray/ctors.c:1656: warning: assignment from incompatible pointer type\n    In file included from numpy/core/src/multiarray/multiarraymodule_onefile.c:25:\n    numpy/core/src/multiarray/getset.c: In function \xa1\xaearray_data_get\xa1\xaf:\n    numpy/core/src/multiarray/getset.c:283: warning: passing argument 1 of \xa1\xaePyMemoryView_FromObject\xa1\xaf from incompatible pointer type\n    /usr/local/include/python3.2/memoryobject.h:54: note: expected \xa1\xaestruct PyObject *\xa1\xaf but argument is of type \xa1\xaestruct PyArrayObject *\xa1\xaf\n    In file included from numpy/core/src/multiarray/multiarraymodule_onefile.c:28:\n    numpy/core/src/multiarray/convert_datatype.c: In function \xa1\xaePyArray_GetCastFunc\xa1\xaf:\n    numpy/core/src/multiarray/convert_datatype.c:106: warning: implicit declaration of function \xa1\xaePyCObject_AsVoidPtr\xa1\xaf\n    numpy/core/src/multiarray/convert_datatype.c:106: warning: assignment makes pointer from integer without a cast\n    \n\n\n'"
2167,7731004,numpy-gitbot,numpy-gitbot,2012-10-19 22:15:33,2012-10-19 22:15:35,2012-10-19 22:15:35,closed,,1.5.0,4,11 - Bug;component: numpy.core;priority: normal,https://api.github.com/repos/numpy/numpy/issues/2167,b'IndexError: index (%Ld) out of range (0<=index<%Ld) in dimension %d (Trac #1570)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/1570 on 2010-08-02 by @cgohlke, assigned to unknown._\n\nUsing numpy 1.4.1 or 1.5b1, built with msvc9 for win-amd64:\n\n\n\n    >>> a = np.arange(10)\n    >>> a.shape = 2, 5\n    >>> a[1, 10]\n    Traceback (most recent call last):\n      File ""<input>"", line 1, in <module>\n    IndexError: index (%Ld) out of range (0<=index<%Ld) in dimension %d \n\n\n\nThe error message should be\n\n\n\n    IndexError: index (10) out of range (0<=index<5) in dimension 1\n\n\n\nThe attached patch uses \'%lld\' instead of \'%Ld\' as an int64 format specifier. This currently works only on Python 2.7 since \'%lld\' is only processed starting with Python 2.7 (see http://bugs.python.org/issue7228). No additional tests fail with this patch applied.\n'"
2165,7731001,numpy-gitbot,numpy-gitbot,2012-10-19 22:15:28,2012-10-19 22:15:29,2012-10-19 22:15:29,closed,,1.5.0,4,11 - Bug;component: numpy.core;priority: normal,https://api.github.com/repos/numpy/numpy/issues/2165,b'Changeset 8541 breaks numscons build (Trac #1568)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/1568 on 2010-07-31 by @cgohlke, assigned to unknown._\n\nOn platforms without ""endian.h"", changesets 8541-3 break the build process using numscons.\n\nThe file _numpyconfig.h ends up containing the following line with illegal C syntax:\n\n@DEFINE_NPY_HAVE_ENDIAN_H@\n\nA patch for numpy 1.5.x is attached. Probably also applies to trunk and 1.4.x.'"
2164,7730997,numpy-gitbot,numpy-gitbot,2012-10-19 22:15:26,2012-10-19 22:15:26,2012-10-19 22:15:26,closed,,NumPy 2.0,1,11 - Bug;component: numpy.numarray;priority: normal,https://api.github.com/repos/numpy/numpy/issues/2164,b'meshgrid reverses dimensions of output? (Trac #1567)',"b""_Original ticket http://projects.scipy.org/numpy/ticket/1567 on 2010-07-29 by trac user auser2, assigned to unknown._\n\nIn the following code, wouldn't it make more sense if\n\nshape(Xmesh)==(NX,NY) \n\nrather than the current way around?  The order of the arguements to meshgrid is (X,Y), so why shouldn't that be the order of the output's scripting?\nCode below:\n\nfrom numpy import meshgrid,arange,shape;\nNX=5;\nNY=10;\nX=arange(NX);\nY=arange(NY);\nXmesh, Ymesh = meshgrid(X,Y);\nassert(shape(Xmesh) == (NY,NX));\n"""
2163,7730995,numpy-gitbot,numpy-gitbot,2012-10-19 22:15:24,2012-10-23 02:44:21,2012-10-19 22:15:25,closed,,1.5.1,1,11 - Bug;component: Other;priority: normal,https://api.github.com/repos/numpy/numpy/issues/2163,"b""fmt='%u' in savetxt behaves the same as  '%d'. (Trac #1566)""","b""_Original ticket http://projects.scipy.org/numpy/ticket/1566 on 2010-07-28 by @fengy-research, assigned to unknown._\n\nAccording to the document of savetxt:\n--------\n        ``u`` : unsigned decimal integer\n         ``x,X`` : unsigned hexadecimal integer\n--------\n\nHowever, the behavior is not as documented:\n\n\n    in [38]: print IDs[0:10]\n    -------> print(IDs[0:10])\n    [9223372043271415339 9223372043271415853 9223372043271415612\n     9223372043271416107 9223372043271415594 9223372043271415836\n     9223372043761290139 9223372044088967272 9223372044088967273\n     9223372043925949039]\n    In [26]: savetxt('/tmp/IDs', IDs, '%u')\n    In [27]: !head /tmp/IDs\n    -9223372030438136277\n    -9223372030438135763\n    -9223372030438136004\n    -9223372030438135509\n    -9223372030438136022\n    -9223372030438135780\n    -9223372029948261477\n    -9223372029620584344\n    -9223372029620584343\n    -9223372029783602577\n\n\n\nThe problem is on lib/io.py:1542,\n\n\n        fh.write(format % tuple(row) + '\\n')\n\n\n\nApparently python doesn't support '%u' in the '%' operator.\n\n\n\n    In [44]: '%u', IDs[0]\n    Out[44]: ('%u', 9223372043271415339)\n    \n    In [45]: print '%u' % IDs[0]\n    -------> print('%u' % IDs[0])\n    -9223372030438136277\n\n\nThus I don't see any easy fix for the problem. What is ironic is that IDs[0] is however properly formatted by 'print'.\n"""
2162,7730993,numpy-gitbot,numpy-gitbot,2012-10-19 22:15:14,2012-10-23 02:44:20,2012-10-19 22:15:23,closed,,1.6.0,16,11 - Bug;component: Other;priority: normal,https://api.github.com/repos/numpy/numpy/issues/2162,b'loadtxt fails to load large unsigned int64 integers. (Trac #1565)',"b""_Original ticket http://projects.scipy.org/numpy/ticket/1565 on 2010-07-28 by @fengy-research, assigned to unknown._\n\nPrepare the following file:\n\n-------file /tmp/test -----\n9223372043271415339\n9223372043271415853\n9223372043271415612\n9223372043271416107\n9223372043271415594\n9223372043271415836\n9223372043761290139\n9223372044088967272\n9223372044088967273\n9223372043925949039\n---------end of file-----\n\nAnd run the following code:\n\nIn [16]: print loadtxt('/tmp/test', dtype='uint64')\n-------> print(loadtxt('/tmp/test', dtype='uint64'))\n[9223372043271415808 9223372043271415808 9223372043271415808\n 9223372043271415808 9223372043271415808 9223372043271415808\n 9223372043761289216 9223372044088967168 9223372044088967168\n 9223372043925948416]\n\nOn the other hand, with fromfile(),\n\nIn [2]: print fromfile('/tmp/test', dtype='uint64', sep=' ')\n------> print(fromfile('/tmp/test', dtype='uint64', sep=' '))\n[9223372043271415339 9223372043271415853 9223372043271415612\n 9223372043271416107 9223372043271415594 9223372043271415836\n 9223372043761290139 9223372044088967272 9223372044088967273\n 9223372043925949039]\n\nClearly the first few numbers are wrongly converted by loadtxt\n\nThe problem was tracked to line 453 in numpy/lib/io.py, _getconv. The conversion for np.integer is int(float(x)), which is inexact for large integers. \n\nI don't know if a priority of normal is appropriate, as this bug will produce hidden errors in programs that use numpy.\n"""
2161,7730992,numpy-gitbot,numpy-gitbot,2012-10-19 22:15:12,2012-10-19 22:15:13,2012-10-19 22:15:13,closed,,1.5.0,2,11 - Bug;component: numpy.core;priority: high,https://api.github.com/repos/numpy/numpy/issues/2161,b'numpy.arange returns array with wrong length (Trac #1564)',"b""_Original ticket http://projects.scipy.org/numpy/ticket/1564 on 2010-07-28 by trac user crassus, assigned to unknown._\n\nI'm running the scipy package within a VM for sage http://sagemath.org/ numpy.version.version: 1.3.0 CPU: Intel i7 \n\nUnder certain circumstances numpy.arange returns an array that contains the stop-parameter. But according to the docs:\n\nstop : number\nEnd of interval.  The interval does not include this value\n\n\nHere is the example\n\nWorks fine:\n\n\n    ydat= numpy.zeros(970)\n    \n    step= float(1.0/400000)\n    xdat= numpy.arange(0, len(ydat)*step, step)\n    \n    print len(ydat)\n    print len(xdat)\n    print xdat[-1]==len(ydat)*step\n\n\n\n\nBug:\n\n\n    ydat= numpy.zeros(971)\n    \n    step= float(1.0/400000)\n    xdat= numpy.arange(0, len(ydat)*step, step)\n    \n    print len(ydat)\n    print len(xdat)\n    print xdat[-1]==len(ydat)*step\n\n\n\n"""
2160,7730989,numpy-gitbot,numpy-gitbot,2012-10-19 22:15:10,2012-10-19 22:15:11,2012-10-19 22:15:11,closed,,1.6.0,3,11 - Bug;component: Other;priority: normal,https://api.github.com/repos/numpy/numpy/issues/2160,b'setitem in subclass of ndarray not working for 1D arrays with tuples (Trac #1563)',"b""_Original ticket http://projects.scipy.org/numpy/ticket/1563 on 2010-07-28 by trac user ds, assigned to unknown._\n\nFor a subclass of ndarray the setitem method is not working with tuples, but only if the array is 1D.\n\n\n    from numpy import ndarray\n    class C(ndarray):\n        def __new__(cls,i):\n            return N.ones((i,)).view(cls)\n    \n    a = C(5)\n    a[(0,)] = 2.\n    # raises: RuntimeError: Getitem not returning array.\n    # this would work if 'a' is a normal ndarray\n    \n    # note: 'a[0] = 2.' is working\n    # 'b = a[(0,)]' is working\n    # and if the subclass is an ndarray of higher dimension then \n    # also e.g. (for 2D array subclass) 'a[(0,1)] = 2.' is working\n\n\n"""
2158,7730985,numpy-gitbot,numpy-gitbot,2012-10-19 22:15:05,2012-10-19 22:15:06,2012-10-19 22:15:06,closed,,NumPy 2.0,1,11 - Bug;component: Other;priority: normal,https://api.github.com/repos/numpy/numpy/issues/2158,b'Wrong type for PyArray_SimpleNew and alike (Trac #1561)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/1561 on 2010-07-27 by trac user PhiSch, assigned to unknown._\n\nAll the function that create new PyArray objects in the C-API which have an dims argument use npy_intp * as type. However the accepted structure is a structure in the form npy_int * or npy_intp, e.g. a pointer to npy_int values which describe the dimensions instead of a pointer to pointers to npy_int which describe the dimensions.\n\nBest regards\nPhilipp'"
2157,7730984,numpy-gitbot,numpy-gitbot,2012-10-19 22:15:03,2012-10-19 22:15:04,2012-10-19 22:15:04,closed,,1.5.0,2,11 - Bug;component: Other;priority: high,https://api.github.com/repos/numpy/numpy/issues/2157,b'atleast_3d() strips subclass info (Trac #1560)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/1560 on 2010-07-27 by @WeatherGod, assigned to unknown._\n\nThe .atleast_3d() function can not be used with arrays that are subclassed from ndarray().  Because the function uses .asarray() instead of .asanyarray(), subclass info such as masks for masked arrays are stripped from the results.  See the following example:\n\n\n    >>> a = numpy.ma.masked_array([0.0, 1.2, 3.5], mask=[False, True, False])\n    >>> b = numpy.atleast_3d(a)\n    >>> b\n    array([[[ 0. ],\n            [ 1.2],\n            [ 3.5]]])\n    >>> a\n    masked_array(data = [0.0 -- 3.5],\n                 mask = [False  True False],\n           fill_value = 1e+20)\n    \n    >>>\n\n\n\nNote that the .atleast_1d() and .atleast_2d() functions are safe for subclassed arrays.  I believe that simply replacing .asarray() with .asanyarray() should fix the issue.'"
2156,7730983,numpy-gitbot,numpy-gitbot,2012-10-19 22:14:59,2012-10-23 02:44:05,2012-10-19 22:15:01,closed,,1.6.0,8,11 - Bug;component: numpy.ma;priority: high,https://api.github.com/repos/numpy/numpy/issues/2156,b'atleast_?d() breaks masked arrays (Trac #1559)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/1559 on 2010-07-27 by @WeatherGod, assigned to @pierregm._\n\ncalling a function like .atleast_2d() to change the number of dimensions an array has can break the original masked array object.  See the following example using a 1d masked array:\n\n\n    >>> import numpy\n    >>> a = numpy.ma.masked_array([0.0, 1.2, 3.5], mask=[False, True, False])\n    >>> b = numpy.atleast_2d(a)\n    >>> b\n    masked_array(data =\n     [[0.0 -- 3.5]],\n                 mask =\n     [[False  True False]],\n           fill_value = 1e+20)\n    \n    >>> a\n    Traceback (most recent call last):\n      File ""<stdin>"", line 1, in <module>\n      File ""/home/bvr/Programs/numpy/numpy/ma/core.py"", line 3570, in __repr__\n        data=str(self), mask=str(self._mask),\n      File ""/home/bvr/Programs/numpy/numpy/ma/core.py"", line 3554, in __str__\n        res[m] = f\n    ValueError: boolean index array should have 1 dimension\n    >>>\n\n\nThe problem does not occur if there is no change to the number of dimensions.'"
2155,7730982,numpy-gitbot,numpy-gitbot,2012-10-19 22:14:57,2012-10-19 22:14:58,2012-10-19 22:14:58,closed,,,5,11 - Bug;component: Other;priority: normal,https://api.github.com/repos/numpy/numpy/issues/2155,b'random.uniform() default value for low (Trac #1558)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/1558 on 2010-07-27 by trac user heitzig-j, assigned to unknown._\n\nIn Numpy 1.3.0, the default value for the parameter low in random.uniform is documented as 0 but seems to be 1 actually.'"
2154,7730981,numpy-gitbot,numpy-gitbot,2012-10-19 22:14:55,2012-10-19 22:14:55,2012-10-19 22:14:55,closed,,NumPy 2.0,1,11 - Bug;component: Other;priority: normal,https://api.github.com/repos/numpy/numpy/issues/2154,b'Bug with dtype.type for structured arrays (Trac #1557)',"b""_Original ticket http://projects.scipy.org/numpy/ticket/1557 on 2010-07-27 by @astrofrog, assigned to unknown._\n\nIf I create a structured array with vector columns:\n\n\n\n    >>> array = np.array(zip([[1,2],[1,2],[1,3]]),dtype=[('a',float,2)])\n\n\n\nthen examine the type of the column, I get:\n\n\n\n    >>> array.dtype[0]\n    dtype(('float64',(2,)))\n\n\n\nThen, if I try and view the numerical type, I see:\n\n\n\n    >>> array.dtype[0].type\n    <type 'numpy.void'>\n\n\n\nI have to basically do\n\n\n\n    >>> array.dtype[0].subdtype[0]\n    dtype('float64')\n\n\n\nto get what I need. I seem to remember that this used not to be the case, and \nthat even for vector columns, one could access array.dtype[0].type to get the \nnumerical type."""
2151,7730978,numpy-gitbot,numpy-gitbot,2012-10-19 22:14:50,2012-10-19 22:14:50,2012-10-19 22:14:50,closed,,1.5.0,1,11 - Bug;component: Other;priority: high,https://api.github.com/repos/numpy/numpy/issues/2151,b'polynomial.polyutils.mapdomain chokes on multi-d first argument (Trac #1554)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/1554 on 2010-07-25 by trac user dgoldsmith, assigned to @charris._\n\npolynomial.polyutils.mapdomain(x, old, new) raises \n\nValueError: Coefficient array is not 1-d\n\nif x.ndim > 1.'"
2150,7730977,numpy-gitbot,njsmith,2012-10-19 22:14:49,2013-08-30 15:02:40,2013-08-30 15:02:40,closed,,,1,11 - Bug;component: numpy.core;priority: normal,https://api.github.com/repos/numpy/numpy/issues/2150,b'clip(out=...) is incorrect for non-contiguous input (Trac #1553)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/1553 on 2010-07-24 by trac user yury, assigned to unknown._\n\nclip always copies data to out as if the input were contiguous\n\n\n\n    import numpy as np\n    x = np.random.random((2,3))\n    y = np.zeros((3,2))\n    assert (x.T.clip(-np.infty, np.infty, y) == x.T).all()\n\n\n\nThis bug may be related:\nhttp://projects.scipy.org/numpy/ticket/1352'"
2149,7730976,numpy-gitbot,charris,2012-10-19 22:14:47,2014-02-19 16:05:17,2014-02-19 16:05:17,closed,,,2,11 - Bug;component: numpy.core;priority: normal,https://api.github.com/repos/numpy/numpy/issues/2149,"b'""fixed-length"" strings automatically truncate right-side \\x00 bytes (Trac #1552)'","b'_Original ticket http://projects.scipy.org/numpy/ticket/1552 on 2010-07-23 by trac user chrismurf, assigned to unknown._\n\nTrivial Example:\n\n\n    #!rst\n    .. code-block:: python\n    \n     map(ord, N.array([""\\x00""])[0]) returns []\n     map(ord, N.array([""\\x01""])[0]) returns [1]\n\n\nThis seems highly inconsistent.\n\nAll other strings in python store size seperately, rather than truncating following null bytes.  I can see where for text strings this may be desirably behavior, but for binary strings (my use case) it is far from it.  As is, I need to wrap every returned value with a call to \'ljust(x, ""\\x00"")\' or equivalent.\n\nIt would be nice to have an _actual_ fixed-length string dtype, or have a way to disable this behavior.'"
2147,7730972,numpy-gitbot,numpy-gitbot,2012-10-19 22:14:43,2012-10-19 22:14:45,2012-10-19 22:14:45,closed,,1.5.0,4,11 - Bug;component: Other;priority: normal,https://api.github.com/repos/numpy/numpy/issues/2147,b'Memmap test failure (Trac #1550)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/1550 on 2010-07-20 by @cgohlke, assigned to unknown._\n\nI get the following test failure on all msvc9 builds of numpy 1.5.0.dev for Windows. A patch is attached.\n\n\n\n    ======================================================================\n    ERROR: test_filename (test_memmap.TestMemmap)\n    ----------------------------------------------------------------------\n    Traceback (most recent call last):\n      File ""X:\\Python26-x64\\lib\\site-packages\\numpy\\core\\tests\\test_memmap.py"", line 60, in test_filename\n        os.unlink(tmpname)\n    WindowsError: [Error 32] The process cannot access the file \n        because it is being used by another process:\n\n\n'"
2146,7730971,numpy-gitbot,numpy-gitbot,2012-10-19 22:14:40,2012-10-19 22:14:42,2012-10-19 22:14:42,closed,,1.6.0,7,11 - Bug;component: numpy.core;priority: normal,https://api.github.com/repos/numpy/numpy/issues/2146,"b""base_repr(243, 3) returns '30000' (Trac #1549)""","b""_Original ticket http://projects.scipy.org/numpy/ticket/1549 on 2010-07-17 by trac user kmaglione, assigned to unknown._\n\nCalling `base_repr(343, 3)` returns '30000' rather than the expected '100000'.\n\nNumPy 1.4.1\n%python -V\nPython 2.6.5\n%uname -a\nLinux jg 2.6.34-ARCH #1 SMP PREEMPT Sat Jun 19 00:07:49 CEST 2010 x86_64 AMD Athlon(tm) 64 X2 Dual-Core Processor TK-55 AuthenticAMD GNU/Linux\n"""
2145,7730970,numpy-gitbot,numpy-gitbot,2012-10-19 22:14:37,2012-10-23 02:44:01,2012-10-19 22:14:38,closed,,1.5.0,6,11 - Bug;component: numpy.core;priority: normal,https://api.github.com/repos/numpy/numpy/issues/2145,b'matrix unbounded memory leak using += (Trac #1548)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/1548 on 2010-07-16 by trac user cardinal, assigned to unknown._\n\nThe following code (and many variants) leaks memory unboundedly:\n\n\n    from numpy import *\n    niter = 2000000\n    X = matrix(zeros(4), float).reshape(2,2)\n    \n    for iter in range(niter):\n      X += X\n\n\n\nReplacing ""X += X"" with ""X = X + X"" solves the problem.\nThings like ""X += a"" where a is a scalar cause the same problem and have the same fix.\n\nThis occurs in Python 2.5.1 (r251:54863, Jan 26 2008, 16:54:44) with numpy 1.0.4 on a Linux box and Python 2.6.1 (r261:67515, Dec 17 2009, 00:59:15) on Mac OS X laptop with numpy 1.2.1.\n'"
2144,7730968,numpy-gitbot,numpy-gitbot,2012-10-19 22:14:35,2012-10-23 02:43:57,2012-10-19 22:14:36,closed,,NumPy 2.0,1,11 - Bug;component: Other;priority: normal,https://api.github.com/repos/numpy/numpy/issues/2144,b'np.isinf broken on solaris (Trac #1547)',"b""_Original ticket http://projects.scipy.org/numpy/ticket/1547 on 2010-07-15 by trac user jdh2358, assigned to unknown._\n\nI am seeing a problem on Solaris since I upgraded to svn HEAD.  np.isinf does not handle np.inf.  See ipython session below.  I am not seeing this problem w/ HEAD on an ubuntu linux box I tested on\n\nIn [1]: import numpy as np\n\nIn [2]: np.__version__\nOut[2]: '2.0.0.dev8480'\n\nIn [3]: x = np.inf\nnp.inf    np.info   np.infty\n\nIn [3]: x = np.inf\n\nIn [4]: np.isinf(x)\nWarning: invalid value encountered in isinf\nOut[4]: True\n\nIn [5]: np.seter\nnp.seterr      np.seterrcall  np.seterrobj\n\nIn [5]: np.seterr(all='raise')\nOut[5]: {'over': 'print', 'divide': 'print', 'invalid': 'print', 'under': 'ignore'}\n\nIn [6]: np.isinf(x)\n---------------------------------------------------------------------------\nFloatingPointError                        Traceback (most recent call last)\n\n/home/titan/johnh/<ipython console>\n\nFloatingPointError: invalid value encountered in isinf\n\nIn [7]: !uname -a\nSunOS udesktop191 5.10 Generic_139556-08 i86pc i386 i86pc\n\nIn [43]: !gcc --version\ngcc (GCC) 3.4.3 (csl-sol210-3_4-branch+sol_rpath)\n\n\n"""
2143,7730966,numpy-gitbot,numpy-gitbot,2012-10-19 22:14:32,2012-10-19 22:14:34,2012-10-19 22:14:34,closed,,NumPy 2.0,3,11 - Bug;component: Other;priority: normal,https://api.github.com/repos/numpy/numpy/issues/2143,b'function prod fails over arrays without warm (Trac #1546)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/1546 on 2010-07-15 by trac user mmarquez, assigned to unknown._\n\nI\'m a begginer using python. As a very simply exercise I was defining the fact function, but I had a very bad surprise. The output of\n\n\n\n    \n    import numpy\n    def fact(n):\n        return numpy.prod(range(2,n+1))\n    for i in range(2,50,5):\n        print ""Fact of i %d is %d""%(i,fact(i))\n    \n\n\n\nis\n\n\n\n    Fact of i 2 is 2\n    Fact of i 7 is 5040\n    Fact of i 12 is 479001600\n    Fact of i 17 is -288522240\n    Fact of i 22 is -522715136\n    Fact of i 27 is 1484783616\n    Fact of i 32 is -2147483648\n    Fact of i 37 is 0\n    Fact of i 42 is 0\n    Fact of i 47 is 0\n\n\n\n\nwhich is obviously__ wrong__. But even more, this happen __without any warning or error messages__. \n\nThis is wrong even if the computations are made using modular arithmetic as claimed by the help.'"
2141,7730964,numpy-gitbot,charris,2012-10-19 22:14:30,2014-02-19 15:57:12,2014-02-19 15:57:12,closed,,NumPy 2.0,1,11 - Bug;component: numpy.core;priority: high,https://api.github.com/repos/numpy/numpy/issues/2141,b'cannot set dtype on record array with 04 datetime records (Trac #1544)',"b""_Original ticket http://projects.scipy.org/numpy/ticket/1544 on 2010-07-14 by trac user jdh2358, assigned to unknown._\n\nI use record arrays extensively with python datetimes, which works if you pass in a list of lists of data with the names.  numpy can accurately infer the dtypes and create a usable record array.  Eg,\n\n    import datetime\n    import numpy as np\n    rows = [ [datetime.date(2001,1,1), 12, 23.],\n             [datetime.date(2002,1,1), 10, 13.],\n             [datetime.date(2003,1,1), -2, 1.],\n             ]\n\n    r1 = np.rec.fromrecords(rows, names='a,b,c')\n\n    print r1.dtype\n\nprints out: [('a', '|O4'), ('b', '<i4'), ('c', '<f8')]\n\nbut if I want to speed things up by providing the dtype, numpy raises ValueError:\n\n    dtype = [('a', '|O4'), ('b', '<i4'), ('c', '<f8')]\n\n    r2 = np.rec.fromrecords(rows, dtype=dtype)\n\n/home/titan/johnh/test.py\n     12 dtype = [('a', '|O4'), ('b', '<i4'), ('c', '<f8')]\n     13\n---> 14 r2 = np.rec.fromrecords(rows, dtype=dtype)\n     15\n     16\n\n/home/titan/johnh/dev/lib/python2.4/site-packages/numpy/core/records.pyc in fromrecords(recList, dtype, shape, formats, names, titles, aligned, byteorder)\n    610\n    611     try:\n--> 612         retval = sb.array(recList, dtype=descr)\n    613     except TypeError:  # list of lists instead of list of tuples\n    614         if (shape is None or shape == 0):\n\nValueError: Setting void-array with object members using buffer.\nWARNING: Failure executing file: <test.py>\n\n\nRunning from svn HEAD:\n\nIn [2]: numpy.__version__\nOut[2]: '2.0.0.dev8480'\n\n\nHere is a complete script::\nimport datetime\nimport numpy as np\nrows = [ [datetime.date(2001,1,1), 12, 23.],\n         [datetime.date(2002,1,1), 10, 13.],\n         [datetime.date(2003,1,1), -2, 1.],\n         ]\n\nr1 = np.rec.fromrecords(rows, names='a,b,c')\n\nprint r1.dtype\n\ndtype = [('a', '|O4'), ('b', '<i4'), ('c', '<f8')]\n\nr2 = np.rec.fromrecords(rows, dtype=dtype)\n\n\n\n\n\n"""
2140,7730963,numpy-gitbot,numpy-gitbot,2012-10-19 22:14:27,2012-10-19 22:14:28,2012-10-19 22:14:28,closed,,1.6.0,6,11 - Bug;component: numpy.testing;priority: normal,https://api.github.com/repos/numpy/numpy/issues/2140,b'assert_almost_equal has bad behavior (decimals=) (Trac #1543)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/1543 on 2010-07-14 by @pv, assigned to unknown._\n\nThe `decimals=` absolute-tolerance-only approach used in `assert_almost_equal` seems wrong in comparing floating point numbers. (Not to mention that specifying tolerance by the number of decimals is a bit clunky.)\n\nPeople may look at the name of the function, and be surprised by things like this:\n\n\n    >>> x = 1e99\n    >>> y = np.nextafter(x, 1)  # x and y are neighbouring fp numbers!\n    >>> np.testing.assert_almost_equal(x, y)\n    Traceback (most recent call last):\n    ...\n    Items are not equal:\n    ...\n    >>> x = 1e-19\n    >>> y = 1e-99\n    >>> np.testing.assert_almost_equal(x, y) # passes\n\n\n\nThe best choice, IMHO, would be to\n\n  - deprecate the `assert_almost_equal` function\n  - we already have an ULP comparison function\n  - copy the `assert_tol_equal` from `scipy.special` to numpy\n'"
2139,7730960,numpy-gitbot,numpy-gitbot,2012-10-19 22:14:23,2012-10-19 22:14:25,2012-10-19 22:14:25,closed,,1.6.0,7,11 - Bug;component: numpy.core;priority: normal,https://api.github.com/repos/numpy/numpy/issues/2139,b'Memory leak casting view of object-type ndarray to bool (Trac #1542)',"b""_Original ticket http://projects.scipy.org/numpy/ticket/1542 on 2010-07-12 by @wesm, assigned to unknown._\n\nSeen in NumPy 1.3.0 and NumPy 1.4.1 on Windows XP. \n\n\n\n    from datetime import datetime\n    import numpy as np\n    import sys\n    \n    def foo(verbose=True):\n       arr = np.array([datetime.today() for _ in xrange(1000)])\n       arr = arr.reshape((500, 2))\n       sl = arr[:, 0]\n    \n       if verbose: print 'Rec ct of index 0: %d' % sys.getrefcount(sl[0])\n    \n       for _ in xrange(10):\n           foo = sl.astype(bool)\n    \n       if verbose: print 'Rec ct of index 0: %d' % sys.getrefcount(sl[0])\n    \n    if __name__ == '__main__':\n       foo()\n       \n       # leaks memory\n       for i in xrange(10000):\n           if not i % 1000: print i\n           foo(verbose=False)\n\n"""
2138,7730959,numpy-gitbot,jaimefrio,2012-10-19 22:14:21,2015-05-04 05:27:48,2015-05-04 05:27:48,closed,,,4,11 - Bug;component: numpy.random;Easy Fix;priority: normal,https://api.github.com/repos/numpy/numpy/issues/2138,"b""random.uniform gives inf when using finfo('float').min, finfo('float').max as intervall (Trac #1541)""","b'_Original ticket http://projects.scipy.org/numpy/ticket/1541 on 2010-07-10 by trac user bowie_22, assigned to unknown._\n\nUsing the following statement gives also inf as output.\n\n\n\n\n    print(np.random.uniform(np.finfo(\'float\').min, np.finfo(\'float\').max, size=(2,2)))\n    [[ Inf  Inf]\n     [ Inf  Inf]]\n\n\n\nsome ""experiments"" have shown the follwing behavior:\n\n\n\n\n     print(np.random.uniform(-1.7976931348623157e+292, np.finfo(\'float\').max, size=(2,2)))\n    [[ Inf  Inf]\n     [ Inf  Inf]]\n    \n\n\n\n\n\n\n    print(np.random.uniform(-1.7976931348623157e+291, np.finfo(\'float\').max, size=(2,2)))\n    [[  3.02733730e+307   5.55521694e+307]\n     [  1.64373640e+308   1.54380200e+308]]\n    \n\n\n\nWhere \n\n\n\n     print(np.finfo(\'float\').max)\n    1.79769313486e+308\n\n\n\nand \n\n\n\n     print(np.finfo(\'float\').min)\n    -1.79769313486e+308\n\n\n'"
2137,7730958,numpy-gitbot,numpy-gitbot,2012-10-19 22:14:19,2012-10-19 22:14:20,2012-10-19 22:14:20,closed,,NumPy 2.0,2,11 - Bug;component: numpy.lib;priority: high,https://api.github.com/repos/numpy/numpy/issues/2137,b'numpy.savez has race condition (Trac #1540)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/1540 on 2010-07-09 by trac user Koen, assigned to unknown._\n\nWhen saving a variable named ""test"", numpy.savez will always use a temporary file called /tmp/test.npy. When running multiple programs saving the same ""test"" variable at the same time, this leads to race conditions.\nI have modified the code (below) to use a proper temporary filename, and reuse that same temporary file for all variables within the same program.\n\n\n\n    def savez(file, *args, **kwds):\n        """"""\n        Save several arrays into a single, compressed file with extension "".npz""\n    \n        If keyword arguments are given, the names for variables assigned to the\n        keywords are the keyword names (not the variable names in the caller).\n        If arguments are passed in with no keywords, the corresponding variable\n        names are arr_0, arr_1, etc.\n    \n        Parameters\n        ----------\n        file : Either the filename (string) or an open file (file-like object)\n            If file is a string, it names the output file.  "".npz"" will be appended\n            if it is not already there.\n        args : Arguments\n            Any function arguments other than the file name are variables to save.\n            Since it is not possible for Python to know their names outside the\n            savez function, they will be saved with names ""arr_0"", ""arr_1"", and so\n            on.  These arguments can be any expression.\n        kwds : Keyword arguments\n            All keyword=value pairs cause the value to be saved with the name of\n            the keyword.\n    \n        See Also\n        --------\n        save : Save a single array to a binary file in NumPy format\n        savetxt : Save an array to a file as plain text\n    \n        Notes\n        -----\n        The .npz file format is a zipped archive of files named after the variables\n        they contain.  Each file contains one variable in .npy format.\n    \n        """"""\n    \n        # Import is postponed to here since zipfile depends on gzip, an optional\n        # component of the so-called standard library.\n        import zipfile\n    \n        if isinstance(file, basestring):\n            if not file.endswith(\'.npz\'):\n                file = file + \'.npz\'\n    \n        namedict = kwds\n        for i, val in enumerate(args):\n            key = \'arr_%d\' % i\n            if key in namedict.keys():\n                raise ValueError, ""Cannot use un-named variables and keyword %s"" % key\n            namedict[key] = val\n    \n        zip = zipfile.ZipFile(file, mode=""w"")\n    \n        # Place to write temporary .npy files\n        #  before storing them in the zip\n        import tempfile\n        (fid, tmpname) = tempfile.mkstemp(\'.npy\', \'numpy\')\n        os.close(fid)\n    \n        for key, val in namedict.iteritems():\n            fname = key + \'.npy\'\n            fid = open(tmpname,\'wb\')\n            format.write_array(fid, np.asanyarray(val))\n            fid.close()\n            zip.write(tmpname, arcname=fname)\n    \n        zip.close()\n        os.remove(tmpname)\n\n\n'"
2136,7730957,numpy-gitbot,numpy-gitbot,2012-10-19 22:14:16,2012-10-19 22:14:18,2012-10-19 22:14:18,closed,,1.6.0,6,11 - Bug;component: Other;priority: normal,https://api.github.com/repos/numpy/numpy/issues/2136,"b'MSVC specific TypeError when using double, longdouble in numpy.dot (Trac #1539)'","b'_Original ticket http://projects.scipy.org/numpy/ticket/1539 on 2010-07-08 by @cgohlke, assigned to unknown._\n\nThis issue has been discussed at [http://mail.scipy.org/pipermail/numpy-discussion/2010-July/051352.html] and is the cause of the scipy.sparse TypeError test failures reported at [http://mail.scipy.org/pipermail/scipy-user/2010-July/025961.html].\n\nUsing Python 2.6.5 32 bit on Windows and numpy 1.4.1 built with Visual Studio 2008 (msvc9), I get the following:\n\n\n\n    >>> a = numpy.array([[1.0]])\n    >>> numpy.dot(a.astype(\'double\'), a.astype(\'longdouble\'))\n    array([[ 1.]]) \n    \n    >>> a = numpy.array([[1]])\n    >>> numpy.dot(a.astype(\'double\'), a.astype(\'longdouble\'))\n    Traceback (most recent call last):\n      File ""<stdin>"", line 1, in <module>\n    TypeError: array cannot be safely cast to required type\n    \n    >>> a = numpy.array([[1]])\n    >>> numpy.dot(a.astype(\'single\'), a.astype(\'longdouble\'))\n    array([[1.0]], dtype=float64)\n    \n    >>> a = numpy.array([[1]])\n    >>> numpy.dot(a.astype(\'longdouble\'), a.astype(\'double\'))\n    array([[1.0]], dtype=float64) \n    \n    >>> numpy.array([1]).astype(\'longdouble\').dtype.num\n    13\n    >>> numpy.array([1.0]).astype(\'longdouble\').dtype.num\n    12 \n\n\n\n\nThe TypeError is unexpected. The same results are obtained when using a msvc7 build of numpy 1.4.1 on Python 2.5, or a msvc9 64 bit build of numpy 2.0.dev on Python 3.1.\n\nUsing numpy 1.4.1 built with mingw does not raise a TypeError:\n\n\n\n    >>> a = numpy.array([[1]])\n    >>> numpy.dot(a.astype(\'double\'), a.astype(\'longdouble\'))\n    array([[1.0]], dtype=float96)\n\n\n\nNote that for MSVC compilers sizeof(longdouble) = sizeof(double) = 8\n'"
2135,7730956,numpy-gitbot,numpy-gitbot,2012-10-19 22:14:14,2012-10-19 22:14:15,2012-10-19 22:14:15,closed,,1.6.0,2,11 - Bug;component: numpy.core;priority: normal,https://api.github.com/repos/numpy/numpy/issues/2135,"b'finfo.eps returns scalar, finfo.epsneg returns array (Trac #1538)'","b'_Original ticket http://projects.scipy.org/numpy/ticket/1538 on 2010-07-07 by trac user dgoldsmith, assigned to unknown._\n\n\n\n    Python 2.6.5 (r265:79096, Mar 19 2010, 18:02:59) [MSC v.1500 64 bit (AMD64)] on\n    win32\n    Type ""help"", ""copyright"", ""credits"" or ""license"" for more information.\n    >>> import numpy as np\n    >>> np.version.version\n    \'1.4.1\'\n    >>> np.finfo(\'float\').eps\n    2.2204460492503131e-16\n    >>> np.finfo(\'float\').epsneg\n    array(1.1102230246251565e-16)\n\n'"
2134,7730953,numpy-gitbot,numpy-gitbot,2012-10-19 22:14:11,2012-10-19 22:14:12,2012-10-19 22:14:12,closed,,1.5.0,4,11 - Bug;component: Official binaries;priority: normal,https://api.github.com/repos/numpy/numpy/issues/2134,"b'""import numpy"" fails using python 2.6 on Windows (Trac #1537)'","b'_Original ticket http://projects.scipy.org/numpy/ticket/1537 on 2010-07-07 by trac user hamstervision, assigned to @rgommers._\n\nI installed NumPy 1.4.1 using the following installer:\nnumpy-1.4.1-win32-superpack-python2.6.exe\n\nI added the following line to a functional script:\n""import numpy""\n\nand I get the following Traceback:\n\n    import numpy\n  File ""C:\\Python26\\lib\\site-packages\\numpy\\__init__.py"", line 132, in <module>\n    import add_newdocs\n  File ""C:\\Python26\\lib\\site-packages\\numpy\\add_newdocs.py"", line 9, in <module>\n    from lib import add_newdoc\n  File ""C:\\Python26\\lib\\site-packages\\numpy\\lib\\__init__.py"", line 4, in <module>\n    from type_check import *\n  File ""C:\\Python26\\lib\\site-packages\\numpy\\lib\\type_check.py"", line 8, in <module>\n    import numpy.core.numeric as _nx\n  File ""C:\\Python26\\lib\\site-packages\\numpy\\core\\__init__.py"", line 5, in <module>\n    import multiarray\nImportError: DLL load failed: %1 is not a valid Win32 application.\n\nI\'m running Windows 7 Professional 64-bit.'"
2133,7730952,numpy-gitbot,numpy-gitbot,2012-10-19 22:14:09,2012-10-19 22:14:10,2012-10-19 22:14:10,closed,,1.6.0,3,11 - Bug;component: Other;priority: normal,https://api.github.com/repos/numpy/numpy/issues/2133,b'empty function problem (Trac #1536)',"b""_Original ticket http://projects.scipy.org/numpy/ticket/1536 on 2010-07-06 by trac user sdnxpt, assigned to unknown._\n\nHi,\n\nI use Python 2.6.5 installed on Ubuntu 10.04, and the following part of code \n\n\n    v = np.ones(self.n)\n\n\ngenerates this error:\n\n*** glibc detected *** /usr/bin/python2.6: free(): invalid next size (fast): 0x000000000355e1b0 ***\n======= Backtrace: =========\n/lib/libc.so.6(+0x775b6)[0x7fec5335a5b6]\n/lib/libc.so.6(cfree+0x73)[0x7fec53360e53]\n/usr/local/lib/python2.6/dist-packages/numpy-1.4.1-py2.6-linux-x86_64.egg/numpy/core/multiarray.so(+0x4183c)[0x7fec5005a83c]\n/usr/bin/python2.6[0x46a50d]\n/usr/local/lib/python2.6/dist-packages/numpy-1.4.1-py2.6-linux-x86_64.egg/numpy/core/multiarray.so(+0x4fbd8)[0x7fec50068bd8]\n/usr/local/lib/python2.6/dist-packages/numpy-1.4.1-py2.6-linux-x86_64.egg/numpy/core/multiarray.so(+0x5aded)[0x7fec50073ded]\n/usr/bin/python2.6(PyEval_EvalFrameEx+0x516e)[0x4a7c5e]\n/usr/bin/python2.6(PyEval_EvalFrameEx+0x5a60)[0x4a8550]\n/usr/bin/python2.6(PyEval_EvalCodeEx+0x911)[0x4a9671]\n/usr/bin/python2.6[0x537620]\n/usr/bin/python2.6(PyObject_Call+0x47)[0x41f0c7]\n/usr/bin/python2.6[0x427dff]\n/usr/bin/python2.6(PyObject_Call+0x47)[0x41f0c7]\n/usr/bin/python2.6[0x477bff]\n/usr/bin/python2.6[0x46f47f]\n/usr/bin/python2.6(PyObject_Call+0x47)[0x41f0c7]\n/usr/bin/python2.6(PyEval_EvalFrameEx+0x4888)[0x4a7378]\n/usr/bin/python2.6(PyEval_EvalCodeEx+0x911)[0x4a9671]\n/usr/bin/python2.6(PyEval_EvalFrameEx+0x4d19)[0x4a7809]\n/usr/bin/python2.6(PyEval_EvalCodeEx+0x911)[0x4a9671]\n/usr/bin/python2.6(PyEval_EvalFrameEx+0x4d19)[0x4a7809]\n/usr/bin/python2.6(PyEval_EvalCodeEx+0x911)[0x4a9671]\n/usr/bin/python2.6[0x537620]\n/usr/bin/python2.6(PyObject_Call+0x47)[0x41f0c7]\n/usr/bin/python2.6(PyEval_CallObjectWithKeywords+0x43)[0x4a1b03]\n/usr/local/lib/python2.6/dist-packages/numpy-1.4.1-py2.6-linux-x86_64.egg/numpy/core/multiarray.so(+0x2ee94)[0x7fec50047e94]\n/usr/bin/python2.6(_PyObject_Str+0x61)[0x454a81]\n/usr/bin/python2.6(PyString_Format+0x85c)[0x4670ac]\n/usr/bin/python2.6[0x41f75f]\n/usr/bin/python2.6(PyNumber_Remainder+0x1e)[0x42251e]\n/usr/bin/python2.6(PyEval_EvalFrameEx+0x2624)[0x4a5114]\n/usr/bin/python2.6(PyEval_EvalFrameEx+0x5a60)[0x4a8550]\n\nOn Windows i don't have this problem. """
2132,7730950,numpy-gitbot,numpy-gitbot,2012-10-19 22:14:06,2012-10-19 22:14:07,2012-10-19 22:14:07,closed,,1.6.0,5,11 - Bug;component: numpy.random;priority: normal,https://api.github.com/repos/numpy/numpy/issues/2132,b'numpy.random.permutations fails for non-integer arguments (Trac #1535)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/1535 on 2010-07-05 by @robince, assigned to unknown._\n\nWhen calling numpy.random.permutation with non-integer arguments it fails with a cryptic error message:\n\n\n\n    In [49]: np.random.permutation(12)\n    Out[49]: array([10,  9,  4,  7,  3,  8,  0,  6,  5,  1, 11,  2])\n    \n    In [50]: np.random.permutation(12.0)\n    ---------------------------------------------------------------------------\n    TypeError                                 Traceback (most recent call last)\n    \n    D:\\robin\\pyentropy-0.4.0\\<ipython console> in <module>()\n    \n    C:\\Python26\\lib\\site-packages\\numpy\\random\\mtrand.pyd in mtrand.RandomState.permutation (build\\scons\\numpy\\random\\mtrand\n    \\mtrand.c:18669)()\n    \n    C:\\Python26\\lib\\site-packages\\numpy\\random\\mtrand.pyd in mtrand.RandomState.shuffle (build\\scons\\numpy\\random\\mtrand\\mtr\n    and.c:18261)()\n    \n    TypeError: len() of unsized object\n    > d:\\robin\\pyentropy-0.4.0\\mtrand.pyx(4174)mtrand.RandomState.shuffle (build\\scons\\numpy\\random\\mtrand\\mtrand.c:18261)()\n\n\n\nThis also happens with long arguments, and so np.random.permutation(X.shape[0]) where X is an array fails on 64 bit windows (where shape is a tuple of longs).\n\nIt would be great if it could cast to integer or at least raise a proper error for non-integer types.\n\n'"
2131,7730947,numpy-gitbot,numpy-gitbot,2012-10-19 22:14:03,2012-10-19 22:14:04,2012-10-19 22:14:04,closed,,1.6.0,3,11 - Bug;component: Other;priority: normal,https://api.github.com/repos/numpy/numpy/issues/2131,"b""FAIL: test_print.test_complex_types(<type 'numpy.complex64'>,) (Trac #1534)""","b'_Original ticket http://projects.scipy.org/numpy/ticket/1534 on 2010-07-03 by @vincentdavis, assigned to unknown._\n\nResults as run on Mac os x 10.6.4, python 2.7, numpy 2.0.0Dev, built 64bit\n\n\n======================================================================\nFAIL: test_print.test_complex_types(<type \'numpy.complex64\'>,)\nCheck formatting of complex types.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n File ""/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/nose/case.py"",\nline 186, in runTest\n   self.test(*self.arg)\n File ""/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/numpy/core/tests/test_print.py"",\nline 61, in check_complex_type\n   err_msg=\'Failed str formatting for type %s\' % tp)\n File ""/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/numpy/testing/utils.py"",\nline 313, in assert_equal\n   raise AssertionError(msg)\nAssertionError:\nItems are not equal: Failed str formatting for type <type \'numpy.complex64\'>\n ACTUAL: \'-1j\'\n DESIRED: \'(-0-1j)\'\n>>  raise AssertionError(""\\nItems are not equal: Failed str formatting for type <type \'numpy.complex64\'>\\n ACTUAL: \'-1j\'\\n DESIRED: \'(-0-1j)\'"")\n\n\n======================================================================\nFAIL: test_print.test_complex_types(<type \'numpy.complex128\'>,)\nCheck formatting of complex types.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n File ""/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/nose/case.py"",\nline 186, in runTest\n   self.test(*self.arg)\n File ""/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/numpy/core/tests/test_print.py"",\nline 61, in check_complex_type\n   err_msg=\'Failed str formatting for type %s\' % tp)\n File ""/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/numpy/testing/utils.py"",\nline 313, in assert_equal\n   raise AssertionError(msg)\nAssertionError:\nItems are not equal: Failed str formatting for type <type \'numpy.complex128\'>\n ACTUAL: \'-1j\'\n DESIRED: \'(-0-1j)\'\n>>  raise AssertionError(""\\nItems are not equal: Failed str formatting for type <type \'numpy.complex128\'>\\n ACTUAL: \'-1j\'\\n DESIRED: \'(-0-1j)\'"")\n\n\n======================================================================\nFAIL: test_print.test_complex_types(<type \'numpy.complex256\'>,)\nCheck formatting of complex types.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n File ""/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/nose/case.py"",\nline 186, in runTest\n   self.test(*self.arg)\n File ""/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/numpy/core/tests/test_print.py"",\nline 61, in check_complex_type\n   err_msg=\'Failed str formatting for type %s\' % tp)\n File ""/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/numpy/testing/utils.py"",\nline 313, in assert_equal\n   raise AssertionError(msg)\nAssertionError:\nItems are not equal: Failed str formatting for type <type \'numpy.complex256\'>\n ACTUAL: \'-1j\'\n DESIRED: \'(-0-1j)\'\n>>  raise AssertionError(""\\nItems are not equal: Failed str formatting for type <type \'numpy.complex256\'>\\n ACTUAL: \'-1j\'\\n DESIRED: \'(-0-1j)\'"")\n\n\n----------------------------------------------------------------------\nRan 2466 tests in 11.029s\n\nFAILED (KNOWNFAIL=4, SKIP=1, failures=3)\n<nose.result.TextTestResult run=2466 errors=0 failures=3>'"
2128,7730939,numpy-gitbot,numpy-gitbot,2012-10-19 22:13:50,2012-10-19 22:13:52,2012-10-19 22:13:52,closed,,1.6.0,4,11 - Bug;component: numpy.fft;priority: normal,https://api.github.com/repos/numpy/numpy/issues/2128,b'Documentation fix for routines.fft (Trac #1531)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/1531 on 2010-06-30 by trac user valhallasw, assigned to unknown._\n\nhttp://docs.scipy.org/doc/numpy/reference/routines.fft.html reads:\n\n\n\n\n    If A = fft(a, n), then A[0] contains the zero-frequency term (the mean of the signal), which is always purely real for real inputs.\n\n\n\nThis is, however, incorrect. A[0] contains the zero-frequency term _multiplied by the number of data points_.\n\nThe same error is in more docs, for example http://docs.scipy.org/doc/numpy/reference/generated/numpy.fft.rfft.html#numpy.fft.rfft.'"
2127,7730938,numpy-gitbot,numpy-gitbot,2012-10-19 22:13:48,2012-10-19 22:13:49,2012-10-19 22:13:49,closed,,1.6.0,2,11 - Bug;component: Other;priority: normal,https://api.github.com/repos/numpy/numpy/issues/2127,b'please convert warnings to DeprecationWarning (Trac #1530)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/1530 on 2010-06-29 by @sandrotosi, assigned to unknown._\n\nHello,\nI\'m here forwarding the bug filed in the Debian bts at http://bugs.debian.org/519483 .\n\nThe ticket refers to 1.2.1 but the same still applies in 1.4.1 too, for example:\n\n\n\n    python-numpy-1.4.1$ grep -A4 warnings.warn numpy/lib/function_base.py\n            warnings.warn(""""""\n            The histogram semantics being used is now deprecated and\n            will disappear in NumPy 2.0.  Please update your code to\n            use the default semantics.\n            """""", DeprecationWarning)\n    --\n                warnings.warn(""""""\n                The new semantics of histogram is now the default and the `new`\n                keyword will be removed in NumPy 2.0.\n                """""", Warning)\n            a = asarray(a)\n\n\n\nand there are several other places where warnings.warn is used:\n\n\n\n    python-numpy-1.4.1$ grep warnings.warn numpy/* -rc | grep -v \':0$\'\n    numpy/core/memmap.py:2\n    numpy/core/numeric.py:1\n    numpy/core/setup_common.py:1\n    numpy/ctypeslib.py:1\n    numpy/distutils/command/config.py:2\n    numpy/distutils/core.py:5\n    numpy/distutils/cpuinfo.py:2\n    numpy/distutils/exec_command.py:1\n    numpy/distutils/fcompiler/gnu.py:1\n    numpy/distutils/misc_util.py:1\n    numpy/distutils/system_info.py:12\n    numpy/lib/arraysetops.py:1\n    numpy/lib/function_base.py:2\n    numpy/lib/io.py:3\n    numpy/lib/polynomial.py:1\n    numpy/lib/utils.py:2\n    numpy/ma/core.py:6\n    numpy/ma/extras.py:1\n    numpy/ma/mrecords.py:1\n    numpy/numarray/alter_code2.py:1\n    numpy/numarray/functions.py:4\n    numpy/oldnumeric/alter_code2.py:1\n    numpy/oldnumeric/ma.py:1\n    numpy/polynomial/chebyshev.py:1\n    numpy/polynomial/polynomial.py:1\n    numpy/testing/tests/test_utils.py:2\n\n\n\nIf the warnings.warn is used to signal a deprecation coming in the near future, then using DeprecationWarning is more precise (it specifies exactly that) and also would allow users to silence them.\n\nThanks for your support,\nSandro'"
2126,7730937,numpy-gitbot,numpy-gitbot,2012-10-19 22:13:46,2012-10-23 02:43:43,2012-10-19 22:13:47,closed,,,3,11 - Bug;component: Other;priority: normal,https://api.github.com/repos/numpy/numpy/issues/2126,"b""numpy.savez() doesn't compress that much (Trac #1529)""","b""_Original ticket http://projects.scipy.org/numpy/ticket/1529 on 2010-06-29 by @sandrotosi, assigned to unknown._\n\nHello,\nI'm here forwarding the bug filed in the Debian BTS at http://bugs.debian.org/564774 .\n\nThe bug refers to 1.3.0 but I'm able to replicate it with 1.4.1 too. The key part is (for the rest, please read the link above):\n\n\n\n    >>> import numpy as np\n    >>> np.savez('test.npz', N.ones((10000, 1000)))\n    >>> ll -h *.npz\n    -rw-r--r-- 1 michael michael 77M 2010-01-11 15:52 test.npz\n    >>> !gzip test.npz\n    >>> ll -h test*.gz\n    -rw-r--r-- 1 michael michael 114K 2010-01-11 15:52 test.npz.gz\n                                 ^^^^\n\n\n\nThanks for your support,\nSandro\n\n"""
2125,7730935,numpy-gitbot,numpy-gitbot,2012-10-19 22:13:44,2012-10-23 02:43:41,2012-10-19 22:13:45,closed,,,2,11 - Bug;component: Other;priority: normal,https://api.github.com/repos/numpy/numpy/issues/2125,"b""numpy.savez() doesn't compress that much (Trac #1528)""","b""_Original ticket http://projects.scipy.org/numpy/ticket/1528 on 2010-06-29 by @sandrotosi, assigned to unknown._\n\nHello,\nI'm here forwarding the bug filed in the Debian BTS at http://bugs.debian.org/564774 .\n\nThe bug refers to 1.3.0 but I'm able to replicate it with 1.4.1 too. The key part is (for the rest, please read the link above):\n\n\n\n    >>> import numpy as np\n    >>> np.savez('test.npz', N.ones((10000, 1000)))\n    >>> ll -h *.npz\n    -rw-r--r-- 1 michael michael 77M 2010-01-11 15:52 test.npz\n    >>> !gzip test.npz\n    >>> ll -h test*.gz\n    -rw-r--r-- 1 michael michael 114K 2010-01-11 15:52 test.npz.gz\n                                 ^^^^\n\n\n\nThanks for your support,\nSandro\n\n"""
2124,7730934,numpy-gitbot,numpy-gitbot,2012-10-19 22:13:41,2012-10-23 02:43:39,2012-10-19 22:13:42,closed,,,3,11 - Bug;component: Other;priority: normal,https://api.github.com/repos/numpy/numpy/issues/2124,"b""numpy.savez() doesn't compress that much (Trac #1527)""","b""_Original ticket http://projects.scipy.org/numpy/ticket/1527 on 2010-06-29 by @sandrotosi, assigned to unknown._\n\nHello,\nI'm here forwarding the bug filed in the Debian BTS at http://bugs.debian.org/564774 .\n\nThe bug refers to 1.3.0 but I'm able to replicate it with 1.4.1 too. The key part is (for the rest, please read the link above):\n\n\n\n    >>> import numpy as np\n    >>> np.savez('test.npz', N.ones((10000, 1000)))\n    >>> ll -h *.npz\n    -rw-r--r-- 1 michael michael 77M 2010-01-11 15:52 test.npz\n    >>> !gzip test.npz\n    >>> ll -h test*.gz\n    -rw-r--r-- 1 michael michael 114K 2010-01-11 15:52 test.npz.gz\n                                 ^^^^\n\n\n\nThanks for your support,\nSandro\n\n"""
2123,7729518,thouis,numpy-gitbot,2012-10-19 21:07:01,2012-10-22 14:31:51,2012-10-20 07:28:43,closed,,,5,11 - Bug;component: Other;priority: normal,https://api.github.com/repos/numpy/numpy/issues/2123,"b""python-numpy-1.4.1/_configtest.c:6: undefined reference to `exp' (Trac #1526)""","b""_Original ticket http://projects.scipy.org/numpy/ticket/1526 on 2010-06-29 by @sandrotosi, assigned to unknown._\n\nHello,\nthis bug has been filed in the Debian BTS as http://bugs.debian.org/527707 and I'm now forwarding it here.\n\nThe report above is about 1.2.1 but it still applies in 1.4.1:\n\n\n\n    compile options: '-Inumpy/core/src/private -Inumpy/core/src -Inumpy/core -Inumpy/core/src/npymath -Inumpy/core/sr\n    c/multiarray -Inumpy/core/src/umath -Inumpy/core/include -I/usr/include/python2.6 -c'\n    gcc: _configtest.c\n    _configtest.c:1: warning: conflicting types for built-in function \xa1\xaeexp\xa1\xaf\n    gcc -pthread _configtest.o -o _configtest\n    _configtest.o: In function `main':\n    /home/morph/deb/build-area/python-numpy-1.4.1/_configtest.c:6: undefined reference to `exp'\n    collect2: ld returned 1 exit status\n    _configtest.o: In function `main':\n    /home/morph/deb/build-area/python-numpy-1.4.1/_configtest.c:6: undefined reference to `exp'\n    collect2: ld returned 1 exit status\n    failure.\n    removing: _configtest.c _configtest.o\n    C compiler: gcc -pthread -fno-strict-aliasing -DNDEBUG -g -fwrapv -O2 -Wall -Wstrict-prototypes -g -O2 -g -Wall -O2 -fPIC\n\n\n\na complete log can be found here: http://people.debian.org/~morph/tmp/python-numpy_1.4.1-1_amd64.build.bz2\n\nThanks in advance for your help,\nSandro"""
2122,7729514,thouis,thouis,2012-10-19 21:06:58,2012-10-19 21:06:59,2012-10-19 21:06:59,closed,,1.6.0,3,11 - Bug;component: numpy.distutils;priority: normal,https://api.github.com/repos/numpy/numpy/issues/2122,"b'Numpy is ignoring CFLAGS, which makes a 64-bit build difficult (Trac #1525)'","b""_Original ticket http://projects.scipy.org/numpy/ticket/1525 on 2010-06-28 by trac user drkirkby, assigned to @cournape._\n\nI am trying to get Numpy to build as a 64-bit executable, as part of a 64-bit port of Sage to !OpenSolaris. But despite adding the compiler option -m64 (which generates 64-bit objects) to CFLAGS, Numpy ignores this so GCC generates an error. \n\nThe same issue has been known in Sage for a long time affecting OS X systems where building 32-bit objects is the default, so one needed the -m64 compiler flag to generate the 64-bit code.  \n\n\n\n     wrong ELF class: ELFCLASS64\n\n\n\nwhich is typical of when a program is expecting to find a 32-bit object, but finds a 64-bit one.\n\n\n\n    numpy-1.3.0.p2/src/setup.py\n    numpy-1.3.0.p2/src/MANIFEST.in\n    numpy-1.3.0.p2/.hgtags\n    Finished extraction\n    ****************************************************\n    Host system\n    uname -a:\n    SunOS hawk 5.11 snv_111b i86pc i386 i86pc\n    ****************************************************\n    ****************************************************\n    CC Version\n    gcc -v\n    Using built-in specs.\n    Target: i386-pc-solaris2.11\n    Configured with: ../gcc-4.3.4/configure --prefix=/usr/local/gcc-4.3.4-GNU-assembler-Sun-linker --with-as=/usr/local/binutils-2.20/bin/as --with-ld=/usr/ccs/bin/ld --with-gmp=/usr/local --with-mpfr=/usr/local\n    Thread model: posix\n    gcc version 4.3.4 (GCC) \n    ****************************************************\n    Running from numpy source directory.\n    F2PY Version 2\n    blas_opt_info:\n    blas_mkl_info:\n      libraries mkl,vml,guide not found in /export/home/drkirkby/sage-4.3.1/local/lib\n      NOT AVAILABLE\n    \n    atlas_blas_threads_info:\n    Setting PTATLAS=ATLAS\n      libraries ptf77blas,ptcblas,atlas not found in /export/home/drkirkby/sage-4.3.1/local/lib\n      NOT AVAILABLE\n    \n    atlas_blas_info:\n      FOUND:\n        libraries = ['f77blas', 'cblas', 'atlas']\n        library_dirs = ['/export/home/drkirkby/sage-4.3.1/local/lib']\n        language = c\n        include_dirs = ['/export/home/drkirkby/sage-4.3.1/local/include']\n    \n    /export/home/drkirkby/sage-4.3.1/spkg/build/numpy-1.3.0.p2/src/numpy/distutils/command/config.py:361: DeprecationWarning: \n    +++++++++++++++++++++++++++++++++++++++++++++++++\n    Usage of get_output is deprecated: please do not \n    use it anymore, and avoid configuration checks \n    involving running executable on the target machine.\n    +++++++++++++++++++++++++++++++++++++++++++++++++\n    \n      DeprecationWarning)\n    customize Sage_FCompiler_1\n    customize Sage_FCompiler_1\n    customize Sage_FCompiler_1 using config\n    compiling '_configtest.c':\n    \n    /* This file is generated from numpy/distutils/system_info.py */\n    void ATL_buildinfo(void);\n    int main(void) {\n      ATL_buildinfo();\n      return 0;\n    }\n    C compiler: gcc -fno-strict-aliasing -DNDEBUG -g -O3 -Wall -Wstrict-prototypes -fPIC\n    \n    compile options: '-c'\n    gcc: _configtest.c\n    gcc _configtest.o -L/export/home/drkirkby/sage-4.3.1/local/lib -lf77blas -lcblas -latlas -o _configtest\n    ld: fatal: file /export/home/drkirkby/sage-4.3.1/local/lib/libf77blas.so: wrong ELF class: ELFCLASS64\n    ld: fatal: file /export/home/drkirkby/sage-4.3.1/local/lib/libcblas.so: wrong ELF class: ELFCLASS64\n    ld: fatal: file /export/home/drkirkby/sage-4.3.1/local/lib/libatlas.so: wrong ELF class: ELFCLASS64\n    ld: fatal: file processing errors. No output written to _configtest\n    collect2: ld returned 1 exit status\n    ld: fatal: file /export/home/drkirkby/sage-4.3.1/local/lib/libf77blas.so: wrong ELF class: ELFCLASS64\n    ld: fatal: file /export/home/drkirkby/sage-4.3.1/local/lib/libcblas.so: wrong ELF class: ELFCLASS64\n    ld: fatal: file /export/home/drkirkby/sage-4.3.1/local/lib/libatlas.so: wrong ELF class: ELFCLASS64\n    ld: fatal: file processing errors. No output written to _configtest\n    collect2: ld returned 1 exit status\n    failure.\n    removing: _configtest.c _configtest.o\n    Status: 255\n    Output: \n      FOUND:\n        libraries = ['f77blas', 'cblas', 'atlas']\n        library_dirs = ['/export/home/drkirkby/sage-4.3.1/local/lib']\n        language = c\n        define_macros = [('NO_ATLAS_INFO', 2)]\n        include_dirs = ['/export/home/drkirkby/sage-4.3.1/local/include']\n    \n    lapack_opt_info:\n    lapack_mkl_info:\n\n"""
2121,7729512,thouis,thouis,2012-10-19 21:06:55,2012-10-19 21:06:56,2012-10-19 21:06:56,closed,,NumPy 2.0,4,11 - Bug;component: Other;priority: normal,https://api.github.com/repos/numpy/numpy/issues/2121,b'Citation example in HOWTO_DOCUMENT.txt slightly inconsistent w/ IEEE Standard (Trac #1524)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/1524 on 2010-06-27 by trac user dgoldsmith, assigned to unknown._\n\nHere\'s the example in HOWTO_DOCUMENT.txt:\n\nO. McNoleg, ""The integration of GIS, remote sensing, expert systems and adaptive co-kriging for environmental habitat modelling of the Highland Haggis using object-oriented, fuzzy-logic and neural-network techniques,"" Computers & Geosciences, vol. 22, pp. 585-588, 1996.\n\nHere\'s the spec in http://standards.ieee.org/guides/style/2009_Style_Manual.pdf:\n\n19.3 Articles in periodicals\nArticles listed shall include the following information in the order shown:\na) Last name of author or authors and first name or initials, or name of organization [Our example is in the wrong order]\nb) Title of article in quotation marks\nc) Title of periodical in full and set in italics [ours isn\'t italicized]\nd) Volume, number, and, if available, part\ne) First and last pages of article\nf) Date of issue\n\n[Their] Example:\n[B1] Boggs, S. A., and Fujimoto, N., \xa1\xb0Techniques and instrumentation for measurement of transients in\ngas-insulated switchgear,\xa1\xb1 IEEE Transactions on Electrical Installation, vol. ET-19, no. 2, pp. 87\xa8C92, Apr.\n1984.'"
2120,7729509,thouis,thouis,2012-10-19 21:06:46,2012-10-19 21:06:53,2012-10-19 21:06:53,closed,,1.6.0,3,11 - Bug;component: numpy.lib;priority: normal,https://api.github.com/repos/numpy/numpy/issues/2120,"b""numpy.lib.function_base.sinc doesn't properly handle non-array sequence input (Trac #1523)""","b'_Original ticket http://projects.scipy.org/numpy/ticket/1523 on 2010-06-27 by trac user dgoldsmith, assigned to unknown._\n\n>>> np.sinc(np.array((0,0.5)))\narray([ 1.        ,  0.63661977])\n>>> np.sinc((0,0.5))\narray([        NaN,  0.63661977])\n>>> np.sinc([0,0.5])\narray([        NaN,  0.63661977])\n\nSimply needs an ""x = np.asanyarray(x) before the rest of the code."" \n(Thanks RK)'"
2119,7729502,thouis,charris,2012-10-19 21:06:34,2013-09-04 03:55:46,2013-09-04 03:55:46,closed,,NumPy 2.0,11,11 - Bug;component: numpy.core;priority: high,https://api.github.com/repos/numpy/numpy/issues/2119,b'segfault in any() on large object array (Trac #1522)',"b""_Original ticket http://projects.scipy.org/numpy/ticket/1522 on 2010-06-27 by trac user glub, assigned to unknown._\n\nI am consistently getting segfaults when I call any() on a particular array of 42364 elements.  I will try to attach the array as a text file.  There doesn't appear to be anything interesting about the array except that it does not have any zeros and appears to have a lot of smallish, duplicate values.  I got the same segfault in 1.3.0, 1.4.1, and r8464 from svn:\n\nProgram received signal SIGSEGV, Segmentation fault.\n0x00007ffff03eac2f in PyUFunc_Reduce (self=<value optimized out>, args=<value optimized out>, kwds=<value optimized out>, operation=<value optimized out>)\n    at numpy/core/src/umath/ufunc_object.c:2785\n2785\t                    Py_XINCREF(*((PyObject **)loop->castbuf));\n(gdb) bt\n#0  0x00007ffff03eac2f in PyUFunc_Reduce (self=<value optimized out>, args=<value optimized out>, kwds=<value optimized out>, operation=<value optimized out>)\n    at numpy/core/src/umath/ufunc_object.c:2785\n#1  PyUFunc_GenericReduction (self=<value optimized out>, args=<value optimized out>, kwds=<value optimized out>, operation=<value optimized out>)\n    at numpy/core/src/umath/ufunc_object.c:3352\n#2  0x00000035d1043db3 in PyObject_Call () from /usr/lib64/libpython2.6.so.1.0\n#3  0x00007ffff065ecbe in PyArray_GenericReduceFunction (m1=<value optimized out>, op=<value optimized out>, axis=<value optimized out>, rtype=<value optimized out>, out=0x0)\n    at numpy/core/src/multiarray/number.c:173\n#4  0x00007ffff0682aab in PyArray_Any (self=<value optimized out>, axis=0, out=0x0) at numpy/core/src/multiarray/calculation.c:697\n#5  0x00007ffff0682b5e in array_any (self=0xd6ae90, args=<value optimized out>, kwds=<value optimized out>) at numpy/core/src/multiarray/methods.c:1825\n#6  0x00000035d10ddae6 in PyEval_EvalFrameEx () from /usr/lib64/libpython2.6.so.1.0\n#7  0x00000035d10de312 in PyEval_EvalFrameEx () from /usr/lib64/libpython2.6.so.1.0\n#8  0x00000035d10df4e9 in PyEval_EvalCodeEx () from /usr/lib64/libpython2.6.so.1.0\n#9  0x00000035d10dd897 in PyEval_EvalFrameEx () from /usr/lib64/libpython2.6.so.1.0\n#10 0x00000035d10de312 in PyEval_EvalFrameEx () from /usr/lib64/libpython2.6.so.1.0\n#11 0x00000035d10de312 in PyEval_EvalFrameEx () from /usr/lib64/libpython2.6.so.1.0\n#12 0x00000035d10df4e9 in PyEval_EvalCodeEx () from /usr/lib64/libpython2.6.so.1.0\n#13 0x00000035d10df5b2 in PyEval_EvalCode () from /usr/lib64/libpython2.6.so.1.0\n#14 0x00000035d10fa52c in ?? () from /usr/lib64/libpython2.6.so.1.0\n#15 0x00000035d10fa600 in PyRun_FileExFlags () from /usr/lib64/libpython2.6.so.1.0\n#16 0x00000035d10fb9dc in PyRun_SimpleFileExFlags () from /usr/lib64/libpython2.6.so.1.0\n#17 0x00000035d110807d in Py_Main () from /usr/lib64/libpython2.6.so.1.0\n#18 0x00000034b341ec5d in __libc_start_main () from /lib64/libc.so.6\n#19 0x0000000000400649 in _start ()"""
2115,7729492,thouis,jaimefrio,2012-10-19 21:06:18,2016-07-08 18:32:57,2016-03-27 18:46:09,closed,,NumPy 2.0,9,11 - Bug;component: Other;priority: normal,https://api.github.com/repos/numpy/numpy/issues/2115,b'numpy.concat does not appear to work across broadcast axes (Trac #1518)',"b""_Original ticket http://projects.scipy.org/numpy/ticket/1518 on 2010-06-22 by trac user eob, assigned to unknown._\n\nWhen I'm trying to concatenate two tensors together, the concatenate operation does not allow me to use broadcast dimensions (using newaxis) in one of them. """
2114,7729488,thouis,charris,2012-10-19 21:06:15,2013-02-13 03:52:48,2013-02-13 03:52:48,closed,,,8,11 - Bug;component: numpy.lib;priority: normal,https://api.github.com/repos/numpy/numpy/issues/2114,b'numpy.load does not release file handle for npz files (Trac #1517)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/1517 on 2010-06-22 by trac user etecman, assigned to unknown._\n\nWhen opening a npz file with numpy.load, the handle to the file is not released such that the file cannot be deleted during the runtime of the script - even if all returned values are deleted.\n\nError message:\n\nWindowsError: [Error 32] The process cannot access the file because it is being used by another process: \'deleteme.npz\'\n\nExample:\n\n\n\n    import os\n    import numpy\n    a =  numpy.array([[1, 2, 3], [4, 5, 6]])\n    filenameNPZ = ""deleteme.npz""\n    numpy.savez(filenameNPZ, a = a)\n    npz = numpy.load(filenameNPZ)\n    del npz\n    os.remove(filenameNPZ)\n\n\n\n\n'"
2113,7729486,thouis,seberg,2012-10-19 21:06:13,2015-01-01 18:35:18,2013-12-04 23:53:32,closed,,NumPy 2.0,5,11 - Bug;component: Other;priority: normal,https://api.github.com/repos/numpy/numpy/issues/2113,b'Numpy float cast to int when multiplying a python list (Trac #1516)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/1516 on 2010-06-20 by @tonysyu, assigned to unknown._\n\nWhen multiplying a numpy float and a python list, the float is cast as an int and then does the usual python thing (creates duplicates of the original sequence).\n\nFor example,\n\n\n    >>> np.float64(2.3) * [1, 2]\n    [1, 2, 1, 2]\n\n\n\nInstead, the multiplication should either work like an array scalar:\n\n\n    >>> np.array(2.3) * [1, 2]\n    array([ 2.3,  4.6])\n\n\n\nor throw an exception like a python float:\n\n\n    >>> 2.3 * [1, 2]\n    Traceback (most recent call last):\n      File ""<stdin>"", line 1, in <module>\n    TypeError: can\'t multiply sequence by non-int of type \'float\'\n\n\n'"
2112,7729480,thouis,thouis,2012-10-19 21:06:07,2012-10-19 21:06:12,2012-10-19 21:06:12,closed,,1.6.0,3,11 - Bug;component: numpy.f2py;priority: normal,https://api.github.com/repos/numpy/numpy/issues/2112,b'Python string exceptions no more allowed in Python >= 2.6 (Trac #1515)',"b""_Original ticket http://projects.scipy.org/numpy/ticket/1515 on 2010-06-19 by @sandrotosi, assigned to @pearu._\n\nHello,\nI'm forwarding here the Debian bugs http://bugs.debian.org/585309 .\n\nWe recently run an archive check for string exceptions, and numpy resulted to contain one:\n\nnumpy/f2py/capi_maps.py:            except: raise 'sign2map: expected complex number `(r,i)\\' but got `%s\\' as initial value of %s.'%(init,`a`)\n\nThis code won't work with python version >= 2.6, so it would be really nice to have this fixed soon (even because the solution is very simple, wrap the string in Exception()).\n\nThanks in advance,\nSandro"""
2110,7729478,thouis,charris,2012-10-19 21:06:04,2014-02-19 05:49:04,2014-02-19 05:49:04,closed,,NumPy 2.0,2,11 - Bug;component: numpy.core;Patch;priority: normal,https://api.github.com/repos/numpy/numpy/issues/2110,b'flushing memmap incomplete (Trac #1513)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/1513 on 2010-06-17 by @rgommers, assigned to unknown._\n\nReported by Geoffrey Irving on the mailing list:\n\nIf I create an mmap\'ed array, and then generate another array\nreferencing only its base, destruction of the original mmap\'ed array\ncloses the mmap.  The second array is then prone to segfaults.\n\nI think the best fix is to put the responsibility for flushing the\nmmap onto the actual mmap object (and therefore the base object)\ndirectly, so that the numpy memmap object has no cleanup\nresponsibilities.  A patch to core/memmap.py follows.  It would be\nnicer to put the mmap_flush class declaration somewhere outside the\nfunction, but that conflicts with the local ""import mmap.""'"
2106,7729468,thouis,thouis,2012-10-19 21:05:49,2012-10-19 21:05:52,2012-10-19 21:05:52,closed,,1.6.0,4,11 - Bug;component: Documentation;priority: normal,https://api.github.com/repos/numpy/numpy/issues/2106,b'Link in docstring standard to IEEE citation format is broken (Trac #1509)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/1509 on 2010-06-11 by trac user dgoldsmith, assigned to unknown._\n\nhttp://www.ieee.org/pubs/transactions/auinfo03.pdf, the current link in the docstring Standard for the text ""citation format of the IEEE,"" is obsolete.  The same information is now at:\n\nhttp://standards.ieee.org/guides/style/2009_Style_Manual.pdf\n\nThe link in the Standard needs to be updated accordingly.'"
2105,7729466,thouis,charris,2012-10-19 21:05:47,2014-02-19 15:35:46,2014-02-19 15:35:46,closed,,NumPy 2.0,2,11 - Bug;component: Other;priority: normal,https://api.github.com/repos/numpy/numpy/issues/2105,"b""isscalar doesn't handle ndarray's scalars (Trac #1508)""","b'_Original ticket http://projects.scipy.org/numpy/ticket/1508 on 2010-06-08 by trac user pch, assigned to unknown._\n\nThe following behaviour looks incoherent:\n\n\n    >>> a = array(1)\n    >>> print numpy.isscalar(a), numpy.rank(a)\n    False 0\n\n\n\nExpected behaviour: isscalar(a) should return True'"
2104,7729463,thouis,thouis,2012-10-19 21:05:41,2012-10-23 02:43:33,2012-10-19 21:05:46,closed,,NumPy 2.0,7,11 - Bug;component: Other;priority: normal,https://api.github.com/repos/numpy/numpy/issues/2104,b'Error when build documentation (Trac #1507)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/1507 on 2010-06-08 by trac user howarn, assigned to unknown._\n\n$ cd doc\n$ make html\nmkdir -p build\ntouch build/generate-stamp\nmkdir -p build/html build/doctrees\nLANG=C sphinx-build -b html -d build/doctrees   source build/html\nRunning Sphinx v1.0b2+\n2.0.dev 2.0.0.dev\n\nException occurred:\n  File ""/usr/src/RPM/BUILD/python-module-numpy-2.0.0/doc/sphinxext/numpydoc.py"", line 137, in get_directive\n    raise RuntimeError(""No directive named \'%s\' found"" % name)\nRuntimeError: No directive named \'function\' found\nThe full traceback has been saved in /usr/src/tmp/sphinx-err-m2iNvQ.log, if you want to report the issue to the developers.\nPlease also report this if it was a user error, so that a better error message can be provided next time.\nEither send bugs to the mailing list at <http://groups.google.com/group/sphinx-dev/>,\nor report them in the tracker at <http://bitbucket.org/birkenfeld/sphinx/issues/>. Thanks!\nmake: *** [html] Error 1'"
2103,7729461,thouis,thouis,2012-10-19 21:05:38,2012-10-19 21:05:40,2012-10-19 21:05:40,closed,,1.6.0,3,11 - Bug;component: Documentation;priority: normal,https://api.github.com/repos/numpy/numpy/issues/2103,b'issctype returns True for string (Trac #1506)',"b""_Original ticket http://projects.scipy.org/numpy/ticket/1506 on 2010-06-07 by trac user pch, assigned to @pv._\n\nSummary says is all:\n>>> issctype(dtype('str'))\nTrue\nIf it's a feature instead of a bug, the behaviour should be documented."""
2102,7729459,thouis,thouis,2012-10-19 21:05:34,2012-10-19 21:05:37,2012-10-19 21:05:37,closed,,1.6.0,5,11 - Bug;component: numpy.core;priority: high,https://api.github.com/repos/numpy/numpy/issues/2102,b'load() yields corrupted/incorrect data (Trac #1505)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/1505 on 2010-06-04 by trac user RRosario, assigned to unknown._\n\nUsing a huge sparse (395000 x 395000) CSC matrix. Tried to save data, indptr, indices and shape separately.\n\nWhen I try to read back the indices pickle, I get incorrect data:\n\n>> np.save(""indices.pickle"", mymatrix.indices)\n>>> indices = np.load(""indices.pickle.npy"")\n>>> indices\narray([394852, 394649, 394533, ...,      0,      0,      0], dtype=int32)\n>>> mymatrix.indices\narray([394852, 394649, 394533, ...,   1557,   1223,    285], dtype=int32)\n\nThe two arrays are not equal to each other.'"
2101,7729458,thouis,charris,2012-10-19 21:05:31,2013-05-05 16:54:16,2013-05-05 16:54:16,closed,,NumPy 2.0,6,11 - Bug;component: Other;priority: normal,https://api.github.com/repos/numpy/numpy/issues/2101,"b""Numpy Can't Link Against 64 bit threaded MKL libraries (Trac #1504)""","b""_Original ticket http://projects.scipy.org/numpy/ticket/1504 on 2010-06-04 by trac user SevenThunders, assigned to unknown._\n\nThe latest MKL libraries (> 10.2) have somewhat complicated link requirements.  They require grouping flags and now apparently generate runtime errors if one tries to use numpy (e.g. dot()) after linking against the dynamic libraries in linux.\nI'm getting the errors described here:\nhttp://software.intel.com/en-us/forums/showthread.php?t=74037\n\nThe claim is that the dynamic loading of the mkl libraries is not in the correct order and cause undefined symbols errors.  The proposed solution is to link using static libraries,  but the current build scheme does not offer that kind of control.\n\nI thought perhaps the scons fork might get me there,  but I currently can't install that  because it seems to require a development version of NumScons  (0.11 ?)  for which there are no downloadable binaries/packages.\n\nSeeing as how mkl is the currently the best way to get good numpy performance on Intel machines,  I would think this would be a fairly high priority item.  I know I'm not the only one with this problem."""
2100,7729455,thouis,thouis,2012-10-19 21:05:28,2012-10-19 21:05:29,2012-10-19 21:05:29,closed,,1.6.0,2,11 - Bug;component: numpy.random;priority: low,https://api.github.com/repos/numpy/numpy/issues/2100,b'random.vonmises docstring shows incorrect function signature (Trac #1503)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/1503 on 2010-06-04 by @WarrenWeckesser, assigned to unknown._\n\nThe first line in the docstring of random.vonmises is\n\n\n        vonmises(mu=0.0, kappa=1.0, size=None)\n\n\nbut the actual function definition is\n\n\n    def vonmises(self, mu, kappa, size=None):\n\n\nThe first two arguments are positional, not keywords.'"
2099,7729454,thouis,thouis,2012-10-19 21:05:23,2014-08-29 12:25:39,2012-10-19 21:05:26,closed,,1.6.0,3,11 - Bug;component: Other;priority: normal,https://api.github.com/repos/numpy/numpy/issues/2099,b'isnan and isinf not defined when using msvc9 (Trac #1502)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/1502 on 2010-06-04 by @cgohlke, assigned to unknown._\n\nChangeset r8455, ""BUG: fix missing macros definition for IEEE macros"", breaks the build process on Windows when using Visual Studio 2008.\n\nThe changes in r8455 look correct. The problem is that for some reason NPY_HAVE_DECL_ISNAN and NPY_HAVE_DECL_ISINF are defined in Python\'s pyconfig.h header, but the macros isnan and isinf are not. Visual Studio does not have these C99 macros/functions either, so the numpy build fails with ""unresolved external symbol isnan"" and ""...isinf"".\n\nA workaround might be to use the msvc functions _isnan() and _finite() in npy_math.h:\n\n\n\n    #ifndef NPY_HAVE_DECL_ISNAN\n        #define npy_isnan(x) ((x) != (x))\n    #else\n        #ifdef _MSC_VER\n            #define npy_isnan(x) _isnan((x))\n        #else\n            #define npy_isnan(x) isnan((x))\n        #endif\n    #endif\n    \n    #ifndef NPY_HAVE_DECL_ISFINITE\n        #ifdef _MSC_VER\n            #define npy_isfinite(x) _finite((x))\n        #else\n            #define npy_isfinite(x) !npy_isnan((x) + (-x))\n        #endif\n    #else\n        #define npy_isfinite(x) isfinite((x))\n    #endif\n    \n    #ifndef NPY_HAVE_DECL_ISINF\n        #define npy_isinf(x) (!npy_isfinite(x) && !npy_isnan(x))\n    #else\n        #ifdef _MSC_VER\n            #define npy_isinf(x) (!_finite(x) && !_isnan(x))\n        #else\n            #define npy_isinf(x) isinf((x))\n        #endif\n    #endif\n\n\n'"
2097,7729446,thouis,charris,2012-10-19 21:05:13,2014-02-19 15:33:58,2014-02-19 15:33:58,closed,,NumPy 2.0,2,11 - Bug;component: Other;priority: low,https://api.github.com/repos/numpy/numpy/issues/2097,"b'isfinite, isinf macros raise invalid value fp error flag (Trac #1500)'","b'_Original ticket http://projects.scipy.org/numpy/ticket/1500 on 2010-06-03 by @efiring, assigned to unknown._\n\nIn npy_math.h, if NPY_HAVE_DECL_ISFINITE is not defined, the macro that is defined in place of a system-supplied macro works by generating a nan when given an inf, and then using isnan to detect that case.  This raises the invalid value fp error flag, so every time numpy.isfinite encounters an inf, a warning is printed by default.  The situation is the same with isinf.  Here is the relevant code from npy_math.h:\n\n\n\n    #ifndef NPY_HAVE_DECL_ISFINITE\n        #define npy_isfinite(x) !npy_isnan((x) + (-x))\n    #else\n        #define npy_isfinite(x) isfinite((x))\n    #endif\n    \n    #ifndef NPY_HAVE_DECL_ISINF\n        #define npy_isinf(x) (!npy_isfinite(x) && !npy_isnan(x))\n    #else\n        #define npy_isinf(x) isinf((x))\n    #endif \n\n\n\nThe problem became evident because of a bug in setup.py: the NPY_HAVE_DECL_ macros were not being generated.  This was fixed in svn 8455, so now the problem will appear only on those (very rare?) platforms that do not have their own isinf and isfinite.'"
2096,7729442,thouis,charris,2012-10-19 21:05:09,2014-02-19 16:09:17,2014-02-19 16:09:17,closed,,NumPy 2.0,8,11 - Bug;component: Other;priority: normal,https://api.github.com/repos/numpy/numpy/issues/2096,b'test fails: test_ldexp (test_umath.TestLdexp) (Trac #1499)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/1499 on 2010-06-02 by @stsci-sienkiew, assigned to unknown._\n\nNumPy version 2.0.0.dev8449 \n\n\n    ======================================================================\n    ERROR: test_ldexp (test_umath.TestLdexp)\n    ----------------------------------------------------------------------\n    Traceback (most recent call last):\n      File ""/usr/stsci/pyssgdev/2.5.4/numpy/core/tests/test_umath.py"", line 363, in test_ldexp\n        assert_almost_equal(ncu.ldexp(np.array(2., np.longdouble), np.array(3, np.int16)), 16.)\n    TypeError: function not supported for these types, and can\'t coerce safely to supported types\n\n\n\nFails on Python 2.5.4, Solaris 8, sparc 32 bits.\n\nPasses on:\n\n - Red Hat Enterprise Linux 4, 32 bits, python 2.5.4\n\n - RHE 4, 64 bits, python 2.5.4\n\n - RHE 5, 64 bits, python 2.5.4\n'"
2093,7729437,thouis,thouis,2012-10-19 21:05:00,2012-10-23 02:43:27,2012-10-19 21:05:02,closed,,1.6.0,2,11 - Bug;component: numpy.core;priority: normal,https://api.github.com/repos/numpy/numpy/issues/2093,b'Numpy build on AIX 5.3 ERROR Undefined symbol .npy_carg (Trac #1496)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/1496 on 2010-05-28 by trac user gdrapala, assigned to unknown._\n\nEncountered subject error while compiling Numpy from trunk @ r8445.  Using trunk to work around issue #1999 (compiling with gcc on AIX 5.3).\n\nAfter ""dump -g build/temp.aix-5.3-2.6/libnpymath.a"" showed all npy_carg* symbols were missing, made the following change in numpy/core/src/npymath/npy_math_complex.c.src.\n\nChanged:\n\n/**begin repeat1\n * #kind = cabs,carg#\n * #KIND = CABS,carg#\n */\n\nto \n\n/**begin repeat1\n * #kind = cabs,carg#\n * #KIND = CABS,CARG#\n */\n\nand it compiled successfully.'"
2092,7729434,thouis,charris,2012-10-19 21:04:59,2014-03-16 03:04:46,2014-03-16 03:04:46,closed,,NumPy 2.0,2,11 - Bug;component: numpy.lib;Easy Fix;priority: low,https://api.github.com/repos/numpy/numpy/issues/2092,"b'better error message for np.poly(np.zeros((0,0))) (Trac #1495)'","b'_Original ticket http://projects.scipy.org/numpy/ticket/1495 on 2010-05-28 by @josef-pkt, assigned to unknown._\n\nnp.poly(np.zeros((0,0))) crashed with numpy 1.4.0 but has been fixed in trunk (2.0.0)\n\nthe error message could be more explicit\n\n\n\n    In [1]: np.poly(np.zeros((0,0)))\n    ---------------------------------------------------------------------------\n    ValueError                                Traceback (most recent call last)\n    \n    /home/charris/<ipython console> in <module>()\n    \n    /usr/local/lib/python2.6/dist-packages/numpy/lib/polynomial.pyc in poly(seq_of_zeros)\n        126         pass\n        127     else:\n    --> 128         raise ValueError, ""input must be 1d or square 2d array.""\n        129\n        130     if len(seq_of_zeros) == 0:\n    \n    ValueError: input must be 1d or square 2d array.\n\n'"
2091,7729432,thouis,njsmith,2012-10-19 21:04:55,2015-06-22 10:01:51,2015-06-22 10:01:51,closed,,NumPy 2.0,11,11 - Bug;component: Other;Easy Fix;Patch;priority: normal,https://api.github.com/repos/numpy/numpy/issues/2091,b'functions return NotImplemented instead of raising error (Trac #1494)',"b""_Original ticket http://projects.scipy.org/numpy/ticket/1494 on 2010-05-27 by @josef-pkt, assigned to unknown._\n\nexamples:\n\n\n\n    >>> np.sqrt('5')\n    NotImplemented\n    >>> a = np.sqrt('5')\n    >>> type(a)\n    <type 'NotImplementedType'>\n    \n    \n    \n    >>> np.log(np.array(['5']))\n    NotImplemented\n    >>> np.power(np.array(['5']),5)\n    NotImplemented\n    >>> np.multiply(np.array(['5']),5)\n    NotImplemented\n\n"""
2090,7729429,thouis,thouis,2012-10-19 21:04:53,2012-10-19 21:04:54,2012-10-19 21:04:54,closed,,1.6.0,2,11 - Bug;component: numpy.ma;priority: normal,https://api.github.com/repos/numpy/numpy/issues/2090,b'Masked array equality with None is buggy (Trac #1493)',"b""_Original ticket http://projects.scipy.org/numpy/ticket/1493 on 2010-05-27 by @huard, assigned to @pierregm._\n\nEquality and inequality of masked arrays with None raise an error. \n\n\n\n    >>> a = np.ma.array([3,4,5], mask=[1,1,1])\n    >>> a == None\n    ---------------------------------------------------------------------------\n    AttributeError                            Traceback (most recent call last)\n    \n    /home/davhua1/<ipython console> in <module>()\n    \n    /usr/local/lib/python2.6/dist-packages/numpy/ma/core.pyc in __ne__(self, other)\n       3610         omask = getattr(other, '_mask', nomask)\n       3611         if omask is nomask:\n    -> 3612             check = ndarray.__ne__(self.filled(0), other).view(type(self))\n       3613             check._mask = self._mask\n       3614         else:\n    \n    AttributeError: 'bool' object has no attribute 'view'\n    \n\n"""
2088,7729425,thouis,thouis,2012-10-19 21:04:48,2012-10-19 21:04:50,2012-10-19 21:04:50,closed,,1.5.1,6,11 - Bug;component: numpy.core;priority: normal,https://api.github.com/repos/numpy/numpy/issues/2088,b'Bug when comparing str to object (Trac #1491)',"b""_Original ticket http://projects.scipy.org/numpy/ticket/1491 on 2010-05-26 by @kwgoodman, assigned to unknown._\n\nComparisons of dtpye=str on the left-hand side with dtype=object on the right-hand side fail:\n\n\n\n    >> a1 = np.array(['a', 'b'], dtype=object)\n    >> a2 = np.array(['a', 'b'])\n    >>\n    >> a1 == a2\n     array([ True, True], dtype=bool) # Looks good\n    >> a2 == a1\n     False # Bug\n\n\nExpected behavior:\n\n\n    >> a1 = np.array([1, 2], dtype=object)\n    >> a2 = np.array([1, 2])\n    >>\n    >> a1 == a2\n     array([ True, True], dtype=bool)\n    >> a2 == a1\n     array([ True, True], dtype=bool)\n\n\nAnd similarly for the other comparison operators."""
2087,7729423,thouis,thouis,2012-10-19 21:04:43,2012-10-19 21:04:47,2012-10-19 21:04:47,closed,,1.6.0,7,11 - Bug;component: Other;priority: normal,https://api.github.com/repos/numpy/numpy/issues/2087,b'searchsorted does not work properly for non-native endianness (Trac #1490)',"b""_Original ticket http://projects.scipy.org/numpy/ticket/1490 on 2010-05-26 by trac user briangerke, assigned to @charris._\n\nI am currently using numpy version '1.4.1rc2'.  I have encountered this in several other versions, however.\n\nThe searchsorted function sometimes gives incorrect results when it is passed two arrays that are both in non-native endianness.  The following is copied from an email I sent to another numpy user, to make sure I wasn't going crazy.  He confirmed the bug.\n\n\n> Consider this (running interactively in ipython on my little-endian Intel MacBook):\n\n>\n> In [5]: searchsorted(arange(900, dtype='i4'), array([894,895], dtype='i4'))\n\n>\n> Out[5]: array([894, 895])\n\n>\n> That's working as it should: searchsorted just says to insert 894 and 895\n\n> before elements 894 and 895 in a range array that runs from 0 to 899.\n\n>\n\n> But now if I turn both input arrays into big-endian, things get weird:\n>\n\n> In [6]: searchsorted(arange(900, dtype='>i4'), array([894,895],\n> dtype='>i4'))\n>\n\n> Out[6]: array([894, 900])\n>\n\n> Now searchsorted says to insert 894 before the 894th element (correct) but\n> that 895 is bigger than 899 and should thus be inserted at the end (what?).\n>\n\n> Similar nonsense occurs if I use big-endian floats:\n>\n\n> In [13]: searchsorted(arange(900, dtype='>f4'), array([894,895],\n> dtype='>f4'))\n>\n\n> Out[13]: array([679, 899])\n>\n\n> Now it says that 894<679 and 895=899.  Huh?\n>\n\n> As far as I can tell, this only occurs when BOTH arrays are explicitly\n> big-endian:\n>\n\n> In [7]: searchsorted(arange(900, dtype='>i4'), array([894,895], dtype='i4'))\n>\n\n> Out[7]: array([894, 895])\n>\n\n> In [8]: searchsorted(arange(900, dtype='i4'), array([894,895], dtype='>i4'))\n>\n\n> Out[8]: array([894, 895])\n>\n\n> Apparently if EITHER input array has native endian-ness, there is no\n> problem.\n\nI would be surprised to discover that this is expected behavior.  Surely the endianness ought not to matter."""
2086,7729420,thouis,thouis,2012-10-19 21:04:39,2012-10-19 21:04:41,2012-10-19 21:04:41,closed,,1.5.1,6,11 - Bug;component: Documentation;priority: normal,https://api.github.com/repos/numpy/numpy/issues/2086,b'numpydoc (sphinxext) broken by latest sphinx source. (Trac #1489)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/1489 on 2010-05-22 by @mforbes, assigned to @pv._\n\nThe numpydoc (sphinxext) sphinx extension as of svn version 8426 is broken when used with the latest sphinx tip (2f0924a705b2).\n\nThe first hg version of sphinx where this starts failing is 98f9c2d6f51f where domains are introduced.  It is not clear to me right now how to fix this.\n\nUsing sphinx-quickstart and adding the \'numpydoc\' extension (no other modifications to the defaults and including autodoc) gives the following:\n\n\n    $ make html\n    sphinx-build -b html -d _build/doctrees   . _build/html\n    Making output directory...\n    Running Sphinx v1.0pre\n    \n    Exception occurred:\n      File ""/Library/Frameworks/Python.framework/Versions/6.0.4/lib/python2.6/site-packages/numpydoc-0.3.dev-py2.6.egg/numpydoc/numpydoc.py"", line 137, in get_directive\n        raise RuntimeError(""No directive named \'%s\' found"" % name)\n    RuntimeError: No directive named \'function\' found\n    ... \n    make: *** [html] Error 1\n\n\n\nHere is the traceback:\n\n\n    # Sphinx version: 1.0pre\n    # Docutils version: 0.6 release\n    # Jinja2 version: 2.2.1\n    Traceback (most recent call last):\n      File ""/Library/Frameworks/Python.framework/Versions/6.0.4/lib/python2.6/site-packages/Sphinx-1.0pre_2f0924a705b2dev_20100521-py2.6.egg/sphinx/cmdline.py"", line 172, in main\n        warningiserror, tags)\n      File ""/Library/Frameworks/Python.framework/Versions/6.0.4/lib/python2.6/site-packages/Sphinx-1.0pre_2f0924a705b2dev_20100521-py2.6.egg/sphinx/application.py"", line 114, in __init__\n        self.setup_extension(extension)\n      File ""/Library/Frameworks/Python.framework/Versions/6.0.4/lib/python2.6/site-packages/Sphinx-1.0pre_2f0924a705b2dev_20100521-py2.6.egg/sphinx/application.py"", line 251, in setup_extension\n        mod.setup(self)\n      File ""/Library/Frameworks/Python.framework/Versions/6.0.4/lib/python2.6/site-packages/numpydoc-0.3.dev-py2.6.egg/numpydoc/numpydoc.py"", line 120, in setup\n        app.add_directive(\'np-\' + name, wrap_mangling_directive(name, objtype))\n      File ""/Library/Frameworks/Python.framework/Versions/6.0.4/lib/python2.6/site-packages/numpydoc-0.3.dev-py2.6.egg/numpydoc/numpydoc.py"", line 140, in wrap_mangling_directive\n        base_directive = get_directive(base_directive_name)\n      File ""/Library/Frameworks/Python.framework/Versions/6.0.4/lib/python2.6/site-packages/numpydoc-0.3.dev-py2.6.egg/numpydoc/numpydoc.py"", line 137, in get_directive\n        raise RuntimeError(""No directive named \'%s\' found"" % name)\n    RuntimeError: No directive named \'function\' found\n\n'"
2084,7729417,thouis,charris,2012-10-19 21:04:36,2013-02-13 03:38:31,2013-02-13 03:38:31,closed,,NumPy 2.0,3,11 - Bug;component: numpy.core;priority: normal,https://api.github.com/repos/numpy/numpy/issues/2084,b'vectorize(): result depends on execution order; is this normal? (Trac #1487)',"b""_Original ticket http://projects.scipy.org/numpy/ticket/1487 on 2010-05-21 by @lebigot, assigned to unknown._\n\nThe dtype of the array returned by a vectorize()'d function depends on the execution order:\n\nSession 1:\n\n\n    In [1]: f_vec = vectorize(lambda x: x)\n    In [3]: f_vec(arange(3))\n    Out[3]: array([0, 1, 2])\n    In [4]: f_vec(arange(0.1, 3))  # floats\n    Out[4]: array([0, 1, 2])  # integers\n\n\nSession 2:\n\n\n    In [1]: f_vec = vectorize(lambda x: x)\n    In [2]: f_vec(arange(0.1, 3))  # floats, same as above\n    Out[2]: array([ 0.1,  1.1,  2.1])  # floats, and not integers as above\n\n\n\nThus, vectorize() has a serious side effect: the dtype of an array returned by a vectorized function depends on which vectorized function was called first!\n\nThis creates bugs that are hard to detect, because such a behavior is highly unusual.\n\nI had understood from the documentation of vectorize(f) that the type of the first value returned by __f__ instead determined the dtype of the returned array\xa1\xad"""
2082,7729414,thouis,thouis,2012-10-19 21:04:30,2012-10-19 21:04:31,2012-10-19 21:04:31,closed,,,5,11 - Bug;component: Other;priority: normal,https://api.github.com/repos/numpy/numpy/issues/2082,b'free(): invalid next size (fast): error on Ubuntu 9.10 and 10.04 (Trac #1485)',"b""_Original ticket http://projects.scipy.org/numpy/ticket/1485 on 2010-05-18 by trac user FarMcKon, assigned to unknown._\n\nI am getting free(): invalid next size (fast) when i run the code below.\n\nI am using Ubuntu 9.10 (64 bit) on a MacBook Pro 5,1. \nI am using pyton 2.5 and numpy version 1.4.1\n\nThe code I run to generate the error is:\n\nfrom numpy import *\nc = linspace(-pi,pi,5)\nc\n\nWhen I hit 'enter' to display the value of C, I get the error:\n*** glibc detected *** python: free(): invalid next size (fast): 0x000000000264c6a0 ***\n\nsometimes it crashes at this point, sometimes I have to suspend python and kill-9 it."""
2080,7729410,thouis,thouis,2012-10-19 21:04:25,2012-10-19 21:04:26,2012-10-19 21:04:26,closed,,1.6.0,2,11 - Bug;component: numpy.core;priority: highest,https://api.github.com/repos/numpy/numpy/issues/2080,b'Delayed segfault in numpy + Python 2.4 (Trac #1483)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/1483 on 2010-05-11 by @pv, assigned to unknown._\n\nAny ideas about this, ie. can someone with Python 2.4 reproduce it? \nWorksforme on Python 2.4.6. It\'s currently blocking the Scipy doc wiki from updating, so it would be nice to have it fixed.\n\nLooks like a refcount bug somewhere in Numpy. Bisection search via git points that the first bad revision is r8262\n\n\n\n    Python 2.4.3 (#1, Jan 21 2009, 01:11:33) \n    [GCC 4.1.2 20071124 (Red Hat 4.1.2-42)] on linux2\n    Type ""help"", ""copyright"", ""credits"" or ""license"" for more information.\n    >>> import numpy, scipy, gc\n    >>> numpy.__version__\n    \'2.0.0.dev8404\'\n    >>> scipy.__version__\n    \'0.8.0.dev5623\'\n    >>> import scipy.integrate\n    >>> gc.collect()\n    python: Modules/gcmodule.c:275: visit_decref: Assertion `gc->gc.gc_refs !\n    = 0\' failed.\n    \n    Program received signal SIGABRT, Aborted.\n    0x0000003238430215 in raise () from /lib64/libc.so.6\n    (gdb) bt\n    #0  0x0000003238430215 in raise () from /lib64/libc.so.6\n    #1  0x0000003238431cc0 in abort () from /lib64/libc.so.6\n    #2  0x0000003238429696 in __assert_fail () from /lib64/libc.so.6\n    #3  0x0000003c2e0b9c5c in ?? () from /usr/lib64/libpython2.4.so.1.0\n    #4  0x0000003c2e05a89d in ?? () from /usr/lib64/libpython2.4.so.1.0\n    #5  0x0000003c2e0ba157 in ?? () from /usr/lib64/libpython2.4.so.1.0\n    #6  0x0000003c2e0babf4 in ?? () from /usr/lib64/libpython2.4.so.1.0\n    #7  0x0000003c2e094747 in PyEval_EvalFrame ()\n       from /usr/lib64/libpython2.4.so.1.0\n    #8  0x0000003c2e0958a5 in PyEval_EvalCodeEx ()\n       from /usr/lib64/libpython2.4.so.1.0\n    #9  0x0000003c2e0958f2 in PyEval_EvalCode ()\n       from /usr/lib64/libpython2.4.so.1.0\n    #10 0x0000003c2e0b1f29 in ?? () from /usr/lib64/libpython2.4.so.1.0\n    #11 0x0000003c2e0b37e7 in PyRun_InteractiveOneFlags ()\n       from /usr/lib64/libpython2.4.so.1.0\n    #12 0x0000003c2e0b38de in PyRun_InteractiveLoopFlags ()\n       from /usr/lib64/libpython2.4.so.1.0\n    #13 0x0000003c2e0b39ec in PyRun_AnyFileExFlags ()\n       from /usr/lib64/libpython2.4.so.1.0\n    #14 0x0000003c2e0b980d in Py_Main () from /usr/lib64/libpython2.4.so.1.0\n    #15 0x000000323841d974 in __libc_start_main () from /lib64/libc.so.6\n    #16 0x0000000000400629 in _start ()\n    (gdb) q\n    \n    (Yeah, debugging symbols missing ATM, but I guess the backtrace would be \n    of little help anyway since the crash is nonlocal.)\n    '"
2079,7729408,thouis,thouis,2012-10-19 21:04:22,2012-10-19 21:04:23,2012-10-19 21:04:23,closed,,1.6.0,5,11 - Bug;component: numpy.linalg;priority: high,https://api.github.com/repos/numpy/numpy/issues/2079,b'lapack interface handles non-native byte order in an invalid way (Trac #1482)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/1482 on 2010-05-11 by @yarikoptic, assigned to unknown._\n\nOriginal report is at\nhttp://bugs.debian.org/cgi-bin/bugreport.cgi?bug=581043\n\nbut now I\'ve tested with current master: trunk@8404 and issue present as well, e.g:\n\n\n\n    $> python -c ""import numpy as N; print N.__version__;print N.linalg.cholesky(N.array([[ 5.7998084,  -2.1825367 ], [-2.1825367,   9.85910595]], dtype=\'>f8\'))""\n    2.0.0.dev\n    Traceback (most recent call last):\n      File ""<string>"", line 1, in <module>\n      File ""/home/yoh/proj/numpy/build/lib.linux-x86_64-2.5/numpy/linalg/linalg.py"", line 517, in cholesky\n        Cholesky decomposition cannot be computed\'\n    numpy.linalg.linalg.LinAlgError: Matrix is not positive definite -         Cholesky decomposition cannot be computed\n    \n    $> python -c ""import numpy as N; print N.__version__;print N.linalg.cholesky(N.array([[ 5.7998084,  -2.1825367 ], [-2.1825367,   9.85910595]], dtype=\'<f8\'))""\n    2.0.0.dev\n    [[ 2.40827914 -0.        ]\n     [-0.90626401  3.00629199]]\n\n\n\nmyself I consider it of higher than normal priority since the issue is quite nastily veiled (some functions, e.g. svd would just produce bogus results) and I am surprised noone seems hit it by now.'"
2076,7729402,thouis,thouis,2012-10-19 21:04:14,2012-10-19 21:04:15,2012-10-19 21:04:15,closed,,1.6.0,2,11 - Bug;component: numpy.lib;priority: normal,https://api.github.com/repos/numpy/numpy/issues/2076,b'test_universal_newline has string bug in python 3.1 (Trac #1479)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/1479 on 2010-05-07 by @charris, assigned to unknown._\n\n\n\n    ERROR: test_universal_newline (test_io.TestLoadTxt)\n    ----------------------------------------------------------------------\n    Traceback (most recent call last):\n      File ""/usr/local/lib/python3.1/site-packages/numpy/lib/tests/test_io.py"", line 412, in test_universal_newline\n        data = np.loadtxt(name)\n      File ""/usr/local/lib/python3.1/site-packages/numpy/lib/npyio.py"", line 632, in loadtxt\n        first_vals = split_line(first_line)\n      File ""/usr/local/lib/python3.1/site-packages/numpy/lib/npyio.py"", line 610, in split_line\n        line = line.split(comments)[0].strip()\n    TypeError: Can\'t convert \'bytes\' object to str implicitly\n    \n\n\n'"
2075,7729398,thouis,thouis,2012-10-19 21:04:12,2012-10-19 21:04:13,2012-10-19 21:04:13,closed,,,1,11 - Bug;component: Documentation;priority: normal,https://api.github.com/repos/numpy/numpy/issues/2075,b'NumPy Homepage does not make license obvious (Trac #1478)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/1478 on 2010-05-06 by trac user Figs, assigned to @pv._\n\nAt the NumPy homepage, http://numpy.scipy.org/ there is no indication of where to find copyright or license information. As a potential new user for the library, this is unhelpful. Searching on Google suggests that the project is released under the new BSD license (is this correct?). If so, this should be prominently displayed as it would be a major selling point for professional use of the library.'"
2074,7729395,thouis,charris,2012-10-19 21:04:11,2014-02-19 05:12:55,2014-02-19 05:12:55,closed,,NumPy 2.0,17,11 - Bug;component: numpy.linalg;priority: normal,https://api.github.com/repos/numpy/numpy/issues/2074,b'NumPy inverts a singular matrix (Trac #1477)',"b""_Original ticket http://projects.scipy.org/numpy/ticket/1477 on 2010-05-05 by trac user egonschiele, assigned to @pv._\n\nThis might be just a question of precision. In the following code, A2 is a singular matrix. NumPy calculates it's inverse and prints out a non-zero determinant even though the matrix A2 is clearly singular:\n\nA = array([[.1,.01,.3],[.2,.99,.3],[.7,0,.4]])\nI = identity(3)\n\n\nA2 = A - I    # this should be singular\nprint inv(A2) # prints out a singular matrix(!!)\nprint det(A2) # prints -2.33146835171e-18 instead of 0"""
2073,7729394,thouis,thouis,2012-10-19 21:04:08,2012-10-19 21:04:09,2012-10-19 21:04:09,closed,,1.6.0,3,11 - Bug;component: Other;priority: normal,https://api.github.com/repos/numpy/numpy/issues/2073,b'selector.choose  - more keyword list entries than argument specifiers (Trac #1476)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/1476 on 2010-05-05 by @stsci-sienkiew, assigned to unknown._\n\nnumpy.test() fails in many places with this error:\n\n\n\n    ======================================================================\n    ERROR: test_all (test_multiarray.TestArgmax)\n    ----------------------------------------------------------------------\n    Traceback (most recent call last):\n      File ""/usr/stsci/pyssgdev/2.5.4/numpy/core/tests/test_multiarray.py"", line 681, in test_all\n        assert all(amax == aargmax.choose(*a.transpose(i,*axes)))\n    RuntimeError: more keyword list entries than argument specifiers\n    \n    ======================================================================\n    ERROR: test_basic (test_multiarray.TestChoose)\n    ----------------------------------------------------------------------\n    Traceback (most recent call last):\n      File ""/usr/stsci/pyssgdev/2.5.4/numpy/core/tests/test_multiarray.py"", line 1190, in test_basic\n        A = np.choose(self.ind, (self.x, self.y))\n      File ""/usr/stsci/pyssgdev/2.5.4/numpy/core/fromnumeric.py"", line 295, in choose\n        return _wrapit(a, \'choose\', choices, out=out, mode=mode)\n      File ""/usr/stsci/pyssgdev/2.5.4/numpy/core/fromnumeric.py"", line 37, in _wrapit\n        result = getattr(asarray(obj),method)(*args, **kwds)\n    RuntimeError: more keyword list entries than argument specifiers\n    \n    ======================================================================\n    ERROR: test_broadcast1 (test_multiarray.TestChoose)\n    ----------------------------------------------------------------------\n    Traceback (most recent call last):\n      File ""/usr/stsci/pyssgdev/2.5.4/numpy/core/tests/test_multiarray.py"", line 1194, in test_broadcast1\n        A = np.choose(self.ind, (self.x2, self.y2))\n      File ""/usr/stsci/pyssgdev/2.5.4/numpy/core/fromnumeric.py"", line 295, in choose\n        return _wrapit(a, \'choose\', choices, out=out, mode=mode)\n      File ""/usr/stsci/pyssgdev/2.5.4/numpy/core/fromnumeric.py"", line 37, in _wrapit\n        result = getattr(asarray(obj),method)(*args, **kwds)\n    RuntimeError: more keyword list entries than argument specifiers\n    \n    ======================================================================\n    ERROR: test_broadcast2 (test_multiarray.TestChoose)\n    ----------------------------------------------------------------------\n    Traceback (most recent call last):\n      File ""/usr/stsci/pyssgdev/2.5.4/numpy/core/tests/test_multiarray.py"", line 1198, in test_broadcast2\n        A = np.choose(self.ind, (self.x, self.y2))\n      File ""/usr/stsci/pyssgdev/2.5.4/numpy/core/fromnumeric.py"", line 295, in choose\n        return _wrapit(a, \'choose\', choices, out=out, mode=mode)\n      File ""/usr/stsci/pyssgdev/2.5.4/numpy/core/fromnumeric.py"", line 37, in _wrapit\n        result = getattr(asarray(obj),method)(*args, **kwds)\n    RuntimeError: more keyword list entries than argument specifiers\n    \n    ======================================================================\n    ERROR: Test native double input with array min/max.\n    ----------------------------------------------------------------------\n    Traceback (most recent call last):\n      File ""/usr/stsci/pyssgdev/2.5.4/numpy/core/tests/test_numeric.py"", line 436, in test_array_double\n        act = self.clip(a, m, M)\n      File ""/usr/stsci/pyssgdev/2.5.4/numpy/core/tests/test_numeric.py"", line 378, in clip\n        return selector.choose((a, m, M), out=out)\n    RuntimeError: more keyword list entries than argument specifiers\n    \n    ======================================================================\n    ERROR: Ensure that the clip() function takes an out= argument.\n    ----------------------------------------------------------------------\n    Traceback (most recent call last):\n      File ""/usr/stsci/pyssgdev/2.5.4/numpy/core/tests/test_numeric.py"", line 779, in test_clip_func_takes_out\n        self.clip(a, m, M, ac)\n      File ""/usr/stsci/pyssgdev/2.5.4/numpy/core/tests/test_numeric.py"", line 378, in clip\n        return selector.choose((a, m, M), out=out)\n    RuntimeError: more keyword list entries than argument specifiers\n    \n    ======================================================================\n    ERROR: Test native double input with array min/max\n    ----------------------------------------------------------------------\n    Traceback (most recent call last):\n      File ""/usr/stsci/pyssgdev/2.5.4/numpy/core/tests/test_numeric.py"", line 758, in test_clip_inplace_array\n        self.clip(a, m, M, ac)\n      File ""/usr/stsci/pyssgdev/2.5.4/numpy/core/tests/test_numeric.py"", line 378, in clip\n        return selector.choose((a, m, M), out=out)\n    RuntimeError: more keyword list entries than argument specifiers\n    \n    ======================================================================\n    ERROR: Test native double input with scalar min/max\n    ----------------------------------------------------------------------\n    Traceback (most recent call last):\n      File ""/usr/stsci/pyssgdev/2.5.4/numpy/core/tests/test_numeric.py"", line 768, in test_clip_inplace_simple\n        self.clip(a, m, M, ac)\n      File ""/usr/stsci/pyssgdev/2.5.4/numpy/core/tests/test_numeric.py"", line 378, in clip\n        return selector.choose((a, m, M), out=out)\n    RuntimeError: more keyword list entries than argument specifiers\n    \n    ======================================================================\n    ERROR: Test clip for non contiguous native input and native scalar min/max.\n    ----------------------------------------------------------------------\n    Traceback (most recent call last):\n      File ""/usr/stsci/pyssgdev/2.5.4/numpy/core/tests/test_numeric.py"", line 484, in test_clip_non_contig\n        act = self.clip(a, -1.6, 1.7)\n      File ""/usr/stsci/pyssgdev/2.5.4/numpy/core/tests/test_numeric.py"", line 378, in clip\n        return selector.choose((a, m, M), out=out)\n    RuntimeError: more keyword list entries than argument specifiers\n\n\n\nThere are more, but this is a representative sample of the problem.\n\nHappens on \n\n - Mac OSX Leopard, 32 bit python 2.5.4\n\n - Solaris 8, 32 bit python 2.5.4\n\n - Red Hat Enterprise 4 Linux, 32 bit python 2.5.4\n\n - Red Hat Enterprise 4 Linux, 64 bit python 2.5.4\n\nNot on\n\n - Red Hat Enterprise 5 Linux, 64 bit python 2.5.4\n\n\nFirst observed May 3 in version 2.0.0.dev8379\n\n'"
2072,7729391,thouis,charris,2012-10-19 21:04:06,2014-02-19 05:05:42,2014-02-19 05:05:42,closed,,NumPy 2.0,6,11 - Bug;component: Other;priority: normal,https://api.github.com/repos/numpy/numpy/issues/2072,b'Cannot access date-time internals without ctypes installed (Trac #1475)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/1475 on 2010-05-05 by @stsci-sienkiew, assigned to unknown._\n\n\n\n    ======================================================================\n    ERROR: test_type_check.TestDateTimeData.test_basic\n    ----------------------------------------------------------------------\n    Traceback (most recent call last):\n      File ""/usr/stsci/pyssgdev/2.5.4/nose/case.py"", line 183, in runTest\n        self.test(*self.arg)\n      File ""/usr/stsci/pyssgdev/2.5.4/numpy/lib/tests/test_type_check.py"", line 382, in test_basic\n        assert_equal(datetime_data(a.dtype), (\'us\', 1, 1, 1))\n      File ""/usr/stsci/pyssgdev/2.5.4/numpy/lib/type_check.py"", line 610, in datetime_data\n        raise RuntimeError, ""Cannot access date-time internals without ctypes installed""\n    RuntimeError: Cannot access date-time internals without ctypes installed\n\n\n\nHappens on\n\n - Mac OSX Leopard, 32 bit python 2.5.4\n\n - Solaris 8, 32 bit Python 2.5.4\n\nNot on\n\n - Red Hat Enterprise 4 Linux, 32 or 64 bit python 2.5\n\n - Red Hat Enterprise 5 linux, 32 bit python 2.5\n\nWhen you compile python, it automatically decides whether to include ctypes.  In my experience, it likes Linux but not Mac or Solaris.\n\nIt is not clear to me if this means that the test should be changed (e.g. to skip if ctypes is not available) or if ctypes should become a hard and fast requirement to run numpy.\n'"
2071,7729390,thouis,thouis,2012-10-19 21:04:03,2012-10-19 21:04:04,2012-10-19 21:04:04,closed,,1.6.0,5,11 - Bug;component: numpy.core;priority: lowest,https://api.github.com/repos/numpy/numpy/issues/2071,b'numpy.take has a bug (ubuntu 10.4) (Trac #1474)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/1474 on 2010-05-05 by trac user hillier_dani, assigned to unknown._\n\nimport numpy\n\na = numpy.ones((256,256,3))\n\nb = numpy.take(a,[1,0,2],axis=2)\n\nTraceback (most recent call last):\n  File ""<stdin>"", line 1, in <module>\n  File ""/usr/local/lib/python2.6/dist-packages/numpy-1.4.1-py2.6-linux-x86_64.egg/numpy/core/fromnumeric.py"", line 103, in take\n    return take(indices, axis, out, mode)\nIndexError: index out of range for array\n\nExample fails with above error: numpy 1.4.1 python 2.6.5 ubuntu 10.4:\n\nExample works: Mac OSX 10.6, same python/numpy version.'"
2070,7729385,thouis,thouis,2012-10-19 21:03:57,2012-10-19 21:04:01,2012-10-19 21:04:01,closed,,1.6.0,5,11 - Bug;component: numpy.lib;priority: normal,https://api.github.com/repos/numpy/numpy/issues/2070,b'genfromtxt issue with EOL and/or unicode (Trac #1473)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/1473 on 2010-05-04 by @vincentdavis, assigned to unknown._\n\nBasic problem, I file saved on a Mac using excel as a csv cannot me opened with genfromtxt.\nThis will work, but if not expected to be necessary.\nf = file(\'x.csv\', \'U\')\ngenfromtxt(f, ...)\n\nSt\xa8\xa6fan van der Walt has fixed the same issue in loadfromtxt\nhttp://projects.scipy.org/numpy/changeset/8375\n\nLong Story:\nI ran into this issue and it was discussed on the pystatsmodels mailing list.\nHere is the setup\nRunning on a Mac 10.6\nUsing Office 2008\nSaving an spreadsheet using excel ""save as"" a csv file.\n\nTry to import using genfromtxt fails, report a EOL error\nI thought this was because the EOL was wrong, It seems the file has \'\\r\' as the line ending (this may be wrong) anyway I changed it to \'\\n\' and it works fine. I am told (on the pystatsmodels mailing list) that this is actually because the file is in unicode and that genfromtxt does not read the EOL correctly.\n\nTo me it is a bug because one might expect a user to what to save a file from excel and read it using genfromtxt. And for useres with little experience the problem is not obvious. \n\nI guess this is not a problem with py3? \n\nORIGINAL ATTEMPT\n\ndatatype = [(\'date\',\'|S9\'),(\'gpd\',\'i8\'),(\'temp\',\'i8\' (\'precip\',\'f16\')]\ndata = np.genfromtxt(\'waterdata.csv\', delimiter=\',\', skip_header=1,  dtype=datatype)\n\nTraceback (most recent call last):\n  File ""/Applications/WingIDE.app/Contents/MacOS/src/debug/tserver/_sandbox.py"", line 1, in <module>\n    # Used internally for debug sandbox under external interpreter\n  File ""/Library/Frameworks/EPD64.framework/Versions/6.1/lib/python2.6/site-packages/numpy/lib/io.py"", line 1048, in genfromtxt\n\n    raise IOError(\'End-of-file reached before encountering data.\')\nIOError: End-of-file reached before encountering data.\n\n\nTHIS DOES NOT WORK\n\n>>> s = file(\'data_with_CR.csv\',\'r\') \n>>> data = np.genfromtxt(s, delimiter="","", skip_header=1, dtype=None)\nTraceback (most recent call last):\n  File ""<stdin>"", line 1, in <module>\n  File ""/Library/Frameworks/EPD64.framework/Versions/6.1/lib/python2.6/site-packages/numpy/lib/io.py"", line 1048, in genfromtxt\n    raise IOError(\'End-of-file reached before encountering data.\')\nIOError: End-of-file reached before encountering data.\n>>> data = np.genfromtxt(s, delimiter="","", , dtype=None)\n  File ""<stdin>"", line 1\n    data = np.genfromtxt(s, delimiter="","", , dtype=None)\n\n\nTHIS DOES WORK\n\n >>> s = file(\'data_with_CR.csv\',\'U\')\n>>> data = np.genfromtxt(s, delimiter="","", skip_header=1, dtype=None)\n>>> data\narray([(\'1/1/00\', 8021472, 52, 0.02),\n       (\'1/2/00\', 9496016, 46, 0.059999999999999998),\n       (\'1/3/00\', 8478792, 29, 0.0), ..., (\'12/29/02\', 10790000, 61, 0.0),\n       (\'12/30/02\', 9501000, 44, 0.0), (\'12/31/02\', 9288000, 53, 0.0)], \n      dtype=[(\'f0\', \'|S8\'), (\'f1\', \'<i8\'), (\'f2\', \'<i8\'), (\'f3\', \'<f8\')])\n\n'"
2069,7729384,thouis,thouis,2012-10-19 21:03:56,2012-10-19 21:03:56,2012-10-19 21:03:56,closed,,,1,11 - Bug;component: numpy.core;priority: normal,https://api.github.com/repos/numpy/numpy/issues/2069,"b'Assigning Transpose of  ""slice"" of a ""3d"" Array Always Gives a Symmetric Array (Trac #1472)'","b'_Original ticket http://projects.scipy.org/numpy/ticket/1472 on 2010-05-03 by trac user TomW, assigned to unknown._\n\nA = numpy.random.rand(1,3,3)\nA[0] = A[0].T\n\nThe array, A[0] is symmetric.  The lower triangular part of the original A[0] is copied to the upper triangular part.  \n\n'"
2068,7729380,thouis,charris,2012-10-19 21:03:50,2014-02-19 05:04:08,2014-02-19 05:04:08,closed,,NumPy 2.0,15,11 - Bug;component: numpy.core;priority: normal,https://api.github.com/repos/numpy/numpy/issues/2068,b'Access to private attributes of Py_* objects without using the official C-API (Trac #1471)',"b""_Original ticket http://projects.scipy.org/numpy/ticket/1471 on 2010-05-03 by @stefanv, assigned to unknown._\n\nPyPy generates proxy objects to many of the standard Python objects (Py_Slice, etc.).  These proxy objects only expose the official C-API, which NumPy doesn't always respect.\n\nHere is a general log which highlights some of the problems (not all of the errors below need to be fixed, but many of them do):\n\n\n\n    numpy/core/src/multiarray/common.c:616: error: expected \xa1\xae(\xa1\xaf before \xa1\xaePyPyString_Check\xa1\xaf\n    numpy/core/src/multiarray/scalartypes.c.src:513: error: request for member \xa1\xaetp_repr\xa1\xaf in something not a structure or union\n    numpy/core/src/multiarray/scalartypes.c.src:513: error: request for member \xa1\xaetp_str\xa1\xaf in something not a structure or union\n    numpy/core/src/multiarray/scalartypes.c.src:513: error: request for member \xa1\xaetp_repr\xa1\xaf in something not a structure or union\n    numpy/core/src/multiarray/scalartypes.c.src:513: error: request for member \xa1\xaetp_str\xa1\xaf in something not a structure or union\n    numpy/core/src/multiarray/scalartypes.c.src:591: error: \xa1\xaePy_PRINT_RAW\xa1\xaf undeclared (first use in this function)\n    numpy/core/src/multiarray/scalartypes.c.src:591: error: (Each undeclared identifier is reported only once\n    numpy/core/src/multiarray/scalartypes.c.src:591: error: for each function it appears in.)\n    numpy/core/src/multiarray/scalartypes.c.src:606: error: \xa1\xaePy_PRINT_RAW\xa1\xaf undeclared (first use in this function)\n    numpy/core/src/multiarray/scalartypes.c.src:591: error: \xa1\xaePy_PRINT_RAW\xa1\xaf undeclared (first use in this function)\n    numpy/core/src/multiarray/scalartypes.c.src:606: error: \xa1\xaePy_PRINT_RAW\xa1\xaf undeclared (first use in this function)\n    numpy/core/src/multiarray/scalartypes.c.src:591: error: \xa1\xaePy_PRINT_RAW\xa1\xaf undeclared (first use in this function)\n    numpy/core/src/multiarray/scalartypes.c.src:606: error: \xa1\xaePy_PRINT_RAW\xa1\xaf undeclared (first use in this function)\n    numpy/core/src/multiarray/scalartypes.c.src:2216: error: \xa1\xaePyUnicodeObject\xa1\xaf has no member named \xa1\xaelength\xa1\xaf\n    numpy/core/src/multiarray/scalartypes.c.src:2216: error: \xa1\xaePyUnicodeObject\xa1\xaf has no member named \xa1\xaelength\xa1\xaf\n    numpy/core/src/multiarray/scalarapi.c:375: error: \xa1\xaePyComplexObject\xa1\xaf undeclared (first use in this function)\n    numpy/core/src/multiarray/scalarapi.c:375: error: expected expression before \xa1\xae)\xa1\xaf token\n    numpy/core/src/multiarray/scalarapi.c:377: error: expected expression before \xa1\xae)\xa1\xaf token\n    numpy/core/src/multiarray/scalarapi.c:694: error: \xa1\xaePyStringObject\xa1\xaf has no member named \xa1\xaeob_shash\xa1\xaf\n    numpy/core/src/multiarray/scalarapi.c:696: error: \xa1\xaePyStringObject\xa1\xaf has no member named \xa1\xaeob_sstate\xa1\xaf\n    numpy/core/src/multiarray/scalarapi.c:696: error: \xa1\xaeSSTATE_NOT_INTERNED\xa1\xaf undeclared (first use in this function)\n    numpy/core/src/multiarray/scalarapi.c:710: error: \xa1\xaePyUnicodeObject\xa1\xaf has no member named \xa1\xaestr\xa1\xaf\n    numpy/core/src/multiarray/scalarapi.c:716: error: \xa1\xaePyUnicodeObject\xa1\xaf has no member named \xa1\xaestr\xa1\xaf\n    numpy/core/src/multiarray/scalarapi.c:717: error: \xa1\xaePyUnicodeObject\xa1\xaf has no member named \xa1\xaestr\xa1\xaf\n    numpy/core/src/multiarray/scalarapi.c:718: error: \xa1\xaePyUnicodeObject\xa1\xaf has no member named \xa1\xaestr\xa1\xaf\n    numpy/core/src/multiarray/scalarapi.c:719: error: \xa1\xaePyUnicodeObject\xa1\xaf has no member named \xa1\xaelength\xa1\xaf\n    numpy/core/src/multiarray/scalarapi.c:720: error: \xa1\xaePyUnicodeObject\xa1\xaf has no member named \xa1\xaehash\xa1\xaf\n    numpy/core/src/multiarray/scalarapi.c:721: error: \xa1\xaePyUnicodeObject\xa1\xaf has no member named \xa1\xaedefenc\xa1\xaf\n    numpy/core/src/multiarray/scalarapi.c:748: error: \xa1\xaePyUnicodeObject\xa1\xaf has no member named \xa1\xaestr\xa1\xaf\n    numpy/core/src/multiarray/datetime.c:3:22: error: datetime.h: No such file or directory\n    numpy/core/src/multiarray/arraytypes.c.src:190: error: \xa1\xaePy_complex\xa1\xaf undeclared (first use in this function)\n    numpy/core/src/multiarray/arraytypes.c.src:190: error: expected \xa1\xae;\xa1\xaf before \xa1\xaeoop\xa1\xaf\n    numpy/core/src/multiarray/arraytypes.c.src:204: error: \xa1\xaeoop\xa1\xaf undeclared (first use in this function)\n    numpy/core/src/multiarray/arraytypes.c.src:190: error: \xa1\xaePy_complex\xa1\xaf undeclared (first use in this function)\n    numpy/core/src/multiarray/arraytypes.c.src:190: error: expected \xa1\xae;\xa1\xaf before \xa1\xaeoop\xa1\xaf\n    numpy/core/src/multiarray/arraytypes.c.src:204: error: \xa1\xaeoop\xa1\xaf undeclared (first use in this function)\n    numpy/core/src/multiarray/arraytypes.c.src:190: error: \xa1\xaePy_complex\xa1\xaf undeclared (first use in this function)\n    numpy/core/src/multiarray/arraytypes.c.src:190: error: expected \xa1\xae;\xa1\xaf before \xa1\xaeoop\xa1\xaf\n    numpy/core/src/multiarray/arraytypes.c.src:204: error: \xa1\xaeoop\xa1\xaf undeclared (first use in this function)\n    numpy/core/src/multiarray/arraytypes.c.src:307: error: \xa1\xaePyUnicodeObject\xa1\xaf has no member named \xa1\xaestr\xa1\xaf\n    numpy/core/src/multiarray/arraytypes.c.src:792: error: \xa1\xaePyDateTime_IMPORT\xa1\xaf undeclared (first use in this function)\n    numpy/core/src/multiarray/arraytypes.c.src:813: error: \xa1\xaePyDateTime_IMPORT\xa1\xaf undeclared (first use in this function)\n    numpy/core/src/multiarray/arraytypes.c.src:910: error: \xa1\xaePyDateTime_IMPORT\xa1\xaf undeclared (first use in this function)\n    numpy/core/src/multiarray/arraytypes.c.src:947: error: \xa1\xaePyDateTime_IMPORT\xa1\xaf undeclared (first use in this function)\n    numpy/core/src/multiarray/arraytypes.c.src:955: error: \xa1\xaePyDateTime_Delta\xa1\xaf undeclared (first use in this function)\n    numpy/core/src/multiarray/arraytypes.c.src:955: error: expected expression before \xa1\xae)\xa1\xaf token\n    numpy/core/src/multiarray/arraytypes.c.src:956: error: expected expression before \xa1\xae)\xa1\xaf token\n    numpy/core/src/multiarray/arraytypes.c.src:957: error: expected expression before \xa1\xae)\xa1\xaf token\n    numpy/core/src/multiarray/arraytypes.c.src:1494: error: request for member \xa1\xaetp_new\xa1\xaf in something not a structure or union\n    numpy/core/src/multiarray/arraytypes.c.src:1494: error: request for member \xa1\xaetp_new\xa1\xaf in something not a structure or union\n    numpy/core/src/multiarray/arraytypes.c.src:1494: error: request for member \xa1\xaetp_new\xa1\xaf in something not a structure or union\n    numpy/core/src/multiarray/arraytypes.c.src:1494: error: request for member \xa1\xaetp_new\xa1\xaf in something not a structure or union\n    numpy/core/src/multiarray/arraytypes.c.src:1494: error: request for member \xa1\xaetp_new\xa1\xaf in something not a structure or union\n    numpy/core/src/multiarray/arraytypes.c.src:1494: error: request for member \xa1\xaetp_new\xa1\xaf in something not a structure or union\n    numpy/core/src/multiarray/arraytypes.c.src:1494: error: request for member \xa1\xaetp_new\xa1\xaf in something not a structure or union\n    numpy/core/src/multiarray/arraytypes.c.src:1494: error: request for member \xa1\xaetp_new\xa1\xaf in something not a structure or union\n    numpy/core/src/multiarray/arraytypes.c.src:1494: error: request for member \xa1\xaetp_new\xa1\xaf in something not a structure or union\n    numpy/core/src/multiarray/arraytypes.c.src:1494: error: request for member \xa1\xaetp_new\xa1\xaf in something not a structure or union\n    numpy/core/src/multiarray/arraytypes.c.src:1494: error: request for member \xa1\xaetp_new\xa1\xaf in something not a structure or union\n    numpy/core/src/multiarray/arraytypes.c.src:1494: error: request for member \xa1\xaetp_new\xa1\xaf in something not a structure or union\n    numpy/core/src/multiarray/arraytypes.c.src:1494: error: request for member \xa1\xaetp_new\xa1\xaf in something not a structure or union\n    numpy/core/src/multiarray/arraytypes.c.src:1494: error: request for member \xa1\xaetp_new\xa1\xaf in something not a structure or union\n    numpy/core/src/multiarray/arraytypes.c.src:1494: error: \xa1\xaePyComplex_Type\xa1\xaf undeclared (first use in this function)\n    numpy/core/src/multiarray/arraytypes.c.src:1494: error: \xa1\xaePyComplex_Type\xa1\xaf undeclared (first use in this function)\n    numpy/core/src/multiarray/arraytypes.c.src:1494: error: \xa1\xaePyComplex_Type\xa1\xaf undeclared (first use in this function)\n    numpy/core/src/multiarray/arraytypes.c.src:1494: error: request for member \xa1\xaetp_new\xa1\xaf in something not a structure or union\n    numpy/core/src/multiarray/arraytypes.c.src:1494: error: request for member \xa1\xaetp_new\xa1\xaf in something not a structure or union\n    numpy/core/src/multiarray/arraytypes.c.src:1494: error: request for member \xa1\xaetp_new\xa1\xaf in something not a structure or union\n    numpy/core/src/multiarray/arraytypes.c.src:1494: error: request for member \xa1\xaetp_new\xa1\xaf in something not a structure or union\n    numpy/core/src/multiarray/arraytypes.c.src:1494: error: request for member \xa1\xaetp_new\xa1\xaf in something not a structure or union\n    numpy/core/src/multiarray/arraytypes.c.src:1494: error: request for member \xa1\xaetp_new\xa1\xaf in something not a structure or union\n    numpy/core/src/multiarray/arraytypes.c.src:1494: error: request for member \xa1\xaetp_new\xa1\xaf in something not a structure or union\n    numpy/core/src/multiarray/arraytypes.c.src:1494: error: request for member \xa1\xaetp_new\xa1\xaf in something not a structure or union\n    numpy/core/src/multiarray/arraytypes.c.src:1494: error: request for member \xa1\xaetp_new\xa1\xaf in something not a structure or union\n    numpy/core/src/multiarray/arraytypes.c.src:1494: error: request for member \xa1\xaetp_new\xa1\xaf in something not a structure or union\n    numpy/core/src/multiarray/arraytypes.c.src:1494: error: request for member \xa1\xaetp_new\xa1\xaf in something not a structure or union\n    numpy/core/src/multiarray/arraytypes.c.src:1494: error: request for member \xa1\xaetp_new\xa1\xaf in something not a structure or union\n    numpy/core/src/multiarray/arraytypes.c.src:1494: error: request for member \xa1\xaetp_new\xa1\xaf in something not a structure or union\n    numpy/core/src/multiarray/arraytypes.c.src:1494: error: request for member \xa1\xaetp_new\xa1\xaf in something not a structure or union\n    numpy/core/src/multiarray/arraytypes.c.src:1494: error: request for member \xa1\xaetp_new\xa1\xaf in something not a structure or union\n    numpy/core/src/multiarray/arraytypes.c.src:1494: error: request for member \xa1\xaetp_new\xa1\xaf in something not a structure or union\n    numpy/core/src/multiarray/arraytypes.c.src:1494: error: request for member \xa1\xaetp_new\xa1\xaf in something not a structure or union\n    numpy/core/src/multiarray/arraytypes.c.src:1494: error: request for member \xa1\xaetp_new\xa1\xaf in something not a structure or union\n    numpy/core/src/multiarray/arraytypes.c.src:1494: error: request for member \xa1\xaetp_new\xa1\xaf in something not a structure or union\n    numpy/core/src/multiarray/arraytypes.c.src:1494: error: \xa1\xaePyComplex_Type\xa1\xaf undeclared (first use in this function)\n    numpy/core/src/multiarray/arraytypes.c.src:1494: error: \xa1\xaePyComplex_Type\xa1\xaf undeclared (first use in this function)\n    numpy/core/src/multiarray/arraytypes.c.src:1494: error: \xa1\xaePyComplex_Type\xa1\xaf undeclared (first use in this function)\n    numpy/core/src/multiarray/arraytypes.c.src:1494: error: request for member \xa1\xaetp_new\xa1\xaf in something not a structure or union\n    numpy/core/src/multiarray/arraytypes.c.src:1494: error: request for member \xa1\xaetp_new\xa1\xaf in something not a structure or union\n    numpy/core/src/multiarray/arraytypes.c.src:1494: error: request for member \xa1\xaetp_new\xa1\xaf in something not a structure or union\n    numpy/core/src/multiarray/arraytypes.c.src:1494: error: request for member \xa1\xaetp_new\xa1\xaf in something not a structure or union\n    numpy/core/src/multiarray/arraytypes.c.src:1494: error: request for member \xa1\xaetp_new\xa1\xaf in something not a structure or union\n    numpy/core/src/multiarray/arraytypes.c.src:1494: error: request for member \xa1\xaetp_new\xa1\xaf in something not a structure or union\n    numpy/core/src/multiarray/arraytypes.c.src:1494: error: request for member \xa1\xaetp_new\xa1\xaf in something not a structure or union\n    numpy/core/src/multiarray/arraytypes.c.src:1494: error: request for member \xa1\xaetp_new\xa1\xaf in something not a structure or union\n    numpy/core/src/multiarray/arraytypes.c.src:1494: error: request for member \xa1\xaetp_new\xa1\xaf in something not a structure or union\n    numpy/core/src/multiarray/arraytypes.c.src:1494: error: request for member \xa1\xaetp_new\xa1\xaf in something not a structure or union\n    numpy/core/src/multiarray/arraytypes.c.src:1494: error: request for member \xa1\xaetp_new\xa1\xaf in something not a structure or union\n    numpy/core/src/multiarray/arraytypes.c.src:1494: error: request for member \xa1\xaetp_new\xa1\xaf in something not a structure or union\n    numpy/core/src/multiarray/arraytypes.c.src:1494: error: request for member \xa1\xaetp_new\xa1\xaf in something not a structure or union\n    numpy/core/src/multiarray/arraytypes.c.src:1494: error: request for member \xa1\xaetp_new\xa1\xaf in something not a structure or union\n    numpy/core/src/multiarray/arraytypes.c.src:1494: error: request for member \xa1\xaetp_new\xa1\xaf in something not a structure or union\n    numpy/core/src/multiarray/arraytypes.c.src:1494: error: request for member \xa1\xaetp_new\xa1\xaf in something not a structure or union\n    numpy/core/src/multiarray/arraytypes.c.src:1494: error: request for member \xa1\xaetp_new\xa1\xaf in something not a structure or union\n    numpy/core/src/multiarray/arraytypes.c.src:1494: error: request for member \xa1\xaetp_new\xa1\xaf in something not a structure or union\n    numpy/core/src/multiarray/arraytypes.c.src:1494: error: request for member \xa1\xaetp_new\xa1\xaf in something not a structure or union\n    numpy/core/src/multiarray/arraytypes.c.src:1494: error: \xa1\xaePyComplex_Type\xa1\xaf undeclared (first use in this function)\n    numpy/core/src/multiarray/arraytypes.c.src:1494: error: \xa1\xaePyComplex_Type\xa1\xaf undeclared (first use in this function)\n    numpy/core/src/multiarray/arraytypes.c.src:1494: error: \xa1\xaePyComplex_Type\xa1\xaf undeclared (first use in this function)\n    numpy/core/src/multiarray/arraytypes.c.src:1494: error: request for member \xa1\xaetp_new\xa1\xaf in something not a structure or union\n    numpy/core/src/multiarray/arraytypes.c.src:1494: error: request for member \xa1\xaetp_new\xa1\xaf in something not a structure or union\n    numpy/core/src/multiarray/arraytypes.c.src:1494: error: request for member \xa1\xaetp_new\xa1\xaf in something not a structure or union\n    numpy/core/src/multiarray/arraytypes.c.src:1494: error: request for member \xa1\xaetp_new\xa1\xaf in something not a structure or union\n    numpy/core/src/multiarray/arraytypes.c.src:1494: error: request for member \xa1\xaetp_new\xa1\xaf in something not a structure or union\n    numpy/core/src/multiarray/descriptor.c:212: error: expected \xa1\xae(\xa1\xaf before \xa1\xaePyPyDict_Check\xa1\xaf\n    numpy/core/src/multiarray/descriptor.c:1233: error: \xa1\xaePyComplex_Type\xa1\xaf undeclared (first use in this function)\n    numpy/core/src/multiarray/ctors.c:1586: error: expected \xa1\xae(\xa1\xaf before \xa1\xaePyCObject_Check\xa1\xaf\n    numpy/core/src/multiarray/iterators.c:202: error: \xa1\xaePySliceObject\xa1\xaf has no member named \xa1\xaestep\xa1\xaf\n    numpy/core/src/multiarray/iterators.c:206: error: \xa1\xaePySliceObject\xa1\xaf has no member named \xa1\xaestep\xa1\xaf\n    numpy/core/src/multiarray/iterators.c:217: error: \xa1\xaePySliceObject\xa1\xaf has no member named \xa1\xaestart\xa1\xaf\n    numpy/core/src/multiarray/iterators.c:221: error: \xa1\xaePySliceObject\xa1\xaf has no member named \xa1\xaestart\xa1\xaf\n    numpy/core/src/multiarray/iterators.c:235: error: \xa1\xaePySliceObject\xa1\xaf has no member named \xa1\xaestop\xa1\xaf\n    numpy/core/src/multiarray/iterators.c:239: error: \xa1\xaePySliceObject\xa1\xaf has no member named \xa1\xaestop\xa1\xaf\n    numpy/core/src/multiarray/ucsnarrow.c:94: error: \xa1\xaePyUnicodeObject\xa1\xaf has no member named \xa1\xaestr\xa1\xaf\n    numpy/core/src/multiarray/ucsnarrow.c:95: error: \xa1\xaePyUnicodeObject\xa1\xaf has no member named \xa1\xaestr\xa1\xaf\n    numpy/core/src/multiarray/ucsnarrow.c:100: error: \xa1\xaePyUnicodeObject\xa1\xaf has no member named \xa1\xaestr\xa1\xaf\n    numpy/core/src/multiarray/ucsnarrow.c:101: error: \xa1\xaePyUnicodeObject\xa1\xaf has no member named \xa1\xaestr\xa1\xaf\n    numpy/core/src/multiarray/ucsnarrow.c:102: error: \xa1\xaePyUnicodeObject\xa1\xaf has no member named \xa1\xaelength\xa1\xaf\n    numpy/core/src/multiarray/ucsnarrow.c:103: error: \xa1\xaePyUnicodeObject\xa1\xaf has no member named \xa1\xaehash\xa1\xaf\n    numpy/core/src/multiarray/ucsnarrow.c:104: error: \xa1\xaePyUnicodeObject\xa1\xaf has no member named \xa1\xaedefenc\xa1\xaf\n    numpy/core/src/multiarray/ucsnarrow.c:116: error: \xa1\xaePyUnicodeObject\xa1\xaf has no member named \xa1\xaestr\xa1\xaf\n    numpy/core/src/multiarray/ucsnarrow.c:117: error: \xa1\xaePyUnicodeObject\xa1\xaf has no member named \xa1\xaestr\xa1\xaf\n    numpy/core/src/multiarray/ucsnarrow.c:117: error: \xa1\xaePyUnicodeObject\xa1\xaf has no member named \xa1\xaestr\xa1\xaf\n    numpy/core/src/multiarray/ucsnarrow.c:118: error: \xa1\xaePyUnicodeObject\xa1\xaf has no member named \xa1\xaestr\xa1\xaf\n    numpy/core/src/multiarray/ucsnarrow.c:119: error: \xa1\xaePyUnicodeObject\xa1\xaf has no member named \xa1\xaestr\xa1\xaf\n    numpy/core/src/multiarray/ucsnarrow.c:123: error: \xa1\xaePyUnicodeObject\xa1\xaf has no member named \xa1\xaestr\xa1\xaf\n    numpy/core/src/multiarray/ucsnarrow.c:124: error: \xa1\xaePyUnicodeObject\xa1\xaf has no member named \xa1\xaelength\xa1\xaf\n    numpy/core/src/multiarray/multiarraymodule.c:2255: error: \xa1\xaePyOS_sighandler_t\xa1\xaf undeclared (first use in this function)\n    numpy/core/src/multiarray/multiarraymodule.c:2255: error: expected \xa1\xae;\xa1\xaf before \xa1\xae_npy_sig_save\xa1\xaf\n    numpy/core/src/multiarray/multiarraymodule.c:2256: error: \xa1\xae_npy_sig_save\xa1\xaf undeclared (first use in this function)\n    numpy/core/src/multiarray/multiarraymodule.c:2674: error: \xa1\xaePyOS_sighandler_t\xa1\xaf undeclared (first use in this function)\n    numpy/core/src/multiarray/multiarraymodule.c:2674: error: expected \xa1\xae;\xa1\xaf before \xa1\xae_npy_sig_save\xa1\xaf\n    numpy/core/src/multiarray/multiarraymodule.c:2674: error: \xa1\xae_npy_sig_save\xa1\xaf undeclared (first use in this function)\n    numpy/core/src/multiarray/multiarraymodule.c:2812: error: \xa1\xaePyComplex_Type\xa1\xaf undeclared (first use in this function)\n    numpy/core/src/multiarray/multiarraymodule.c:2888: error: request for member \xa1\xaetp_hash\xa1\xaf in something not a structure or union\n    numpy/core/src/multiarray/multiarraymodule.c:2893: error: request for member \xa1\xaetp_hash\xa1\xaf in something not a structure or union\n    numpy/core/src/multiarray/multiarraymodule.c:2920: error: request for member \xa1\xaetp_hash\xa1\xaf in something not a structure or union\n    numpy/core/src/multiarray/multiarraymodule.c:2927: error: request for member \xa1\xaetp_richcompare\xa1\xaf in something not a structure or union\n    numpy/core/src/multiarray/multiarraymodule.c:2927: error: request for member \xa1\xaetp_compare\xa1\xaf in something not a structure or union\n    numpy/core/src/multiarray/multiarraymodule.c:2927: error: request for member \xa1\xaetp_hash\xa1\xaf in something not a structure or union\n    numpy/core/src/multiarray/multiarraymodule.c:2928: error: request for member \xa1\xaetp_richcompare\xa1\xaf in something not a structure or union\n    numpy/core/src/multiarray/multiarraymodule.c:2928: error: request for member \xa1\xaetp_compare\xa1\xaf in something not a structure or union\n    numpy/core/src/multiarray/multiarraymodule.c:2928: error: request for member \xa1\xaetp_hash\xa1\xaf in something not a structure or union\n    numpy/core/src/multiarray/multiarraymodule.c:3050: error: \xa1\xaePyType_GenericNew\xa1\xaf undeclared (first use in this function)\n\n"""
2066,7729377,thouis,thouis,2012-10-19 21:03:46,2012-10-19 21:03:46,2012-10-19 21:03:46,closed,,,1,11 - Bug;component: Other;priority: normal,https://api.github.com/repos/numpy/numpy/issues/2066,b'Matrix multiplication (dot) fails silently for large integers v1.3.0rc2 (Trac #1469)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/1469 on 2010-04-30 by trac user gtpitt, assigned to unknown._\n\nWhen multiplying 2 matrices with large integer values the following error was observed. Please note that no warning or error message was received. This is running in Eclipse Version: 3.4.1 Build id: M20080911-1700. Pydev v 1.4.6.2788. \nversion 1.3.0rc2\ngm1 :\n[[      0       1]\n [      1 -157249]]\n\ngm2 :\n[[  8762 -28349]\n [-54857 177487]]\n\ngm = dot(gm2,gm1) (note the order, gm2 is first)\n\n[[     -28349   162893367]\n [     177487 -2139904344]]\n\n\ncorrect answer :\n[[     -28349   4457860663]\n [     177487 -27909708120]]\n\n4457860663 (34 bits) :\n100001001101101011000111000110111'"
2065,7729374,thouis,thouis,2012-10-19 21:03:43,2012-10-19 21:03:44,2012-10-19 21:03:44,closed,,1.6.0,6,11 - Bug;component: numpy.core;priority: normal,https://api.github.com/repos/numpy/numpy/issues/2065,b'Datetime test_creation_overflow fails (Trac #1468)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/1468 on 2010-04-29 by @pv, assigned to @stefanv._\n\nOn a 32-bit system, r8372:\n\n\n    ======================================================================\n    FAIL: test_creation_overflow (test_datetime.TestDateTime)\n    ----------------------------------------------------------------------\n    Traceback (most recent call last):\n      File ""/home/pauli/wrk/scipy/numpy/dist/linux/lib/python2.6/site-packages/numpy/core/tests/test_datetime.py"", line 68, in test_creation_overflow\n        err_msg=\'Datetime conversion error for unit %s\' % unit)\n      File ""/home/pauli/wrk/scipy/numpy/dist/linux/lib/python2.6/site-packages/numpy/testing/utils.py"", line 313, in assert_equal\n        raise AssertionError(msg)\n    AssertionError: \n    Items are not equal: Datetime conversion error for unit ms\n     ACTUAL: 567052800\n     DESIRED: 322689600000\n    >>  raise AssertionError(\'\\nItems are not equal: Datetime conversion error for unit ms\\n ACTUAL: 567052800\\n DESIRED: 322689600000\')\n\n\n\nAny ideas what\'s wrong?\n'"
2064,7729372,thouis,thouis,2012-10-19 21:03:41,2012-10-19 21:03:41,2012-10-19 21:03:41,closed,,,2,11 - Bug;component: numpy.distutils;priority: normal,https://api.github.com/repos/numpy/numpy/issues/2064,b'MACOSX_DEPLOYMENT_TARGET should not have default (Trac #1467)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/1467 on 2010-04-27 by trac user mallorn, assigned to @cournape._\n\nPROBLEM:\nnumpy/distutils/fcompiler/gnu.py sets MACOSX_DEPLOYMENT_TARGET to a default of 10.3 which breaks distutils generating ""cross-compiling"" errors under Snow Leopard or any non-10.3 OS version. \n\nSOLUTION:\nDo not set a default value of MACOSX_DEPLOYMENT_TARGET: only set it if defined in the makefile or the environment. Alternatively use the existing distutils.util.get_platform() function to get the build platform and extract the OS version from that if needed.'"
2063,7729371,thouis,charris,2012-10-19 21:03:37,2014-02-19 06:37:34,2014-02-19 06:37:34,closed,,,6,11 - Bug;component: Official binaries;priority: normal,https://api.github.com/repos/numpy/numpy/issues/2063,b'Uninstall in Windows does not remove some directories (Trac #1466)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/1466 on 2010-04-27 by trac user threexk, assigned to @cournape._\n\nAfter uninstalling 1.4.0 (numpy-1.4.0-win32-superpack-python2.6.exe), the following directory remains:\n/dev/Python26/Lib/site-packages/numpy\n\nThe first time I tried uninstalling it, a dialog popped up with counts of files and directories removed, but said that one file/directory was not removed.  It gave no indication which.  \n\nI moved away the aforementioned directory, reinstalled 1.4.0, and uninstalled again. This time, it did not report that any files/directories could not be removed, but /dev/Python26/Lib/site-packages/numpy.\n\nI believe it is a bug that this directory is not removed at uninstall.  This is seen on Windows 7.'"
2061,7729368,thouis,thouis,2012-10-19 21:03:33,2012-10-19 21:03:34,2012-10-19 21:03:34,closed,,,3,11 - Bug;component: numpy.core;priority: normal,https://api.github.com/repos/numpy/numpy/issues/2061,b'numpy.set_numeric_ops causes double free (Trac #1464)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/1464 on 2010-04-25 by trac user mras, assigned to unknown._\n\nThe following snippet (bug.py) causes a double free on exit (tested with Numpy v. 1.3.0 and the latest source code from SVN on Python 2.6.4):\n\n\n    def binfunc(x,y): \n    \treturn None\n    \n    import numpy\n    print numpy.__version__\n    oldopts = numpy.set_numeric_ops(add=binfunc)\n    a = numpy.arange(16)\n    print a+a\n\n\n\nOutput from gdb:\n\n\n    Starting program: /usr/bin/python bug.py\n    [Thread debugging using libthread_db enabled]\n    2.0.0.dev8355\n    None\n    *** glibc detected *** /usr/bin/python: corrupted double-linked list: 0x082d8540 ***\n    ^C\n    Program received signal SIGINT, Interrupt.\n    0x0012d422 in __kernel_vsyscall ()\n    (gdb) bt\n    #0  0x0012d422 in __kernel_vsyscall ()\n    #1  0x00264bd3 in __lll_lock_wait_private () at ../nptl/sysdeps/unix/sysv/linux/i386/i686/../i486/lowlevellock.S:95\n    #2  0x001fbf57 in _L_lock_9510 () from /lib/tls/i686/cmov/libc.so.6\n    #3  0x001fa7c6 in *__GI___libc_free (mem=0x8302050) at malloc.c:3714\n    #4  0x0012160f in _dl_scope_free (old=0x8302050) at dl-open.c:175\n    #5  0x0011c327 in _dl_map_object_deps (map=<value optimized out>, preloads=<value optimized out>, npreloads=<value optimized out>, trace_mode=0, open_mode=-2147483648) at dl-deps.c:668\n    #6  0x0012184e in dl_open_worker (a=0xbfffed38) at dl-open.c:326\n    #7  0x0011d4e6 in _dl_catch_error (objname=<value optimized out>, errstring=<value optimized out>, mallocedp=<value optimized out>, operate=0x1216b0 <dl_open_worker>, args=0xbfffed38)\n        at dl-error.c:178\n    #8  0x00121200 in _dl_open (file=0x2aa85d ""libgcc_s.so.1"", mode=<value optimized out>, caller_dlopen=0x0, nsid=-2, argc=2, argv=0xbffff8c4, env=0xbffff8d0) at dl-open.c:615\n    #9  0x0028df92 in do_dlopen (ptr=0xbfffeec8) at dl-libc.c:86\n    #10 0x0011d4e6 in _dl_catch_error (objname=<value optimized out>, errstring=<value optimized out>, mallocedp=<value optimized out>, operate=0x28df30 <do_dlopen>, args=0xbfffeec8) at dl-error.c:178\n    #11 0x0028e091 in dlerror_run (operate=<value optimized out>, args=0xbfffeec8) at dl-libc.c:47\n    #12 0x0028e1ab in *__GI___libc_dlopen_mode (name=0x2aa85d ""libgcc_s.so.1"", mode=-2147483647) at dl-libc.c:160\n    #13 0x0026bfb8 in init () at ../sysdeps/i386/backtrace.c:44\n    #14 0x00139160 in pthread_once () at ../nptl/sysdeps/unix/sysv/linux/i386/pthread_once.S:122\n    #15 0x0026c1ad in *__GI___backtrace (array=0xbffff49c, size=64) at ../sysdeps/i386/backtrace.c:121\n    #16 0x001ebefb in __libc_message (do_abort=2, fmt=0x2af578 ""*** glibc detected *** %s: %s: 0x%s ***\\n"") at ../sysdeps/unix/sysv/linux/libc_fatal.c:168\n    #17 0x001f5ff1 in malloc_printerr (action=<value optimized out>, str=0x8302048 ""\\300\\207\\371\\267!"", ptr=0x82d8540) at malloc.c:6217\n    #18 0x001f7a89 in _int_free (av=<value optimized out>, p=0x82d8398) at malloc.c:4912\n    #19 0x001fa7cd in *__GI___libc_free (mem=0x82d83a0) at malloc.c:3716\n    #20 0x081581b3 in code_dealloc (co=0xb7fd6020) at ../Objects/codeobject.c:270\n    #21 0x081603d4 in func_dealloc (op=0xb7f82d84) at ../Objects/funcobject.c:454\n    #22 0x0807fe6e in list_dealloc (op=0xb7f75dac) at ../Objects/listobject.c:306\n    #23 0x080f8223 in PyInterpreterState_Clear (interp=0x8273008) at ../Python/pystate.c:107\n    #24 0x080fa312 in Py_Finalize () at ../Python/pythonrun.c:476\n    #25 0x0805c34b in Py_Main (argc=2, argv=0xbffff8c4) at ../Modules/main.c:625\n    #26 0x0805baeb in main (argc=2, argv=0xbffff8c4) at ../Modules/python.c:23\n\n\n\nEarlier on I got another trace (that I unfortunately neglected to save) where the double free was in Py_Finalize -> ... -> dict_dealloc -> dict_dealloc -> ufunc_dealloc. I believe that was caused by me calling numpy.set_numeric_ops(**oldopts) at the end and thus causing something else to be doublefree\'d.\n\nI\'ve investigated to the best of my knowledge and I think the cause of the problem is in the SET-macro in numpy/core/src/multiarray/number.c. If I am reading the docs for [http://docs.python.org/c-api/dict.html#PyDict_GetItemString] correctly it returns a borrowed reference ( [http://docs.python.org/release/2.5.2/ext/refcountsInPython.html] )\nand the it\'s reference count should thus be incremented before being stored in the numerical operations array. \n\nI\'ve tried to check other call sites of PyArray_SetNumericOps to see if I had misunderstood the semantics, but I think it\'s simply a bug.\n\nThe below code seems to fix the problem, but as I am inexperienced at writing python extensions in C and with NumPy in particular I would appreciate some feedback.\n\n\n\n    Index: numpy/core/src/multiarray/number.c\n    ===================================================================\n    --- numpy/core/src/multiarray/number.c\t(revision 8355)\n    +++ numpy/core/src/multiarray/number.c\t(working copy)\n    @@ -30,6 +30,7 @@\n             if (!(PyCallable_Check(temp))) {                  \\\n                 return -1;                                    \\\n             }                                                 \\\n    +        Py_INCREF(temp);                                  \\\n             Py_XDECREF(n_ops.op);                             \\\n             n_ops.op = temp;                                  \\\n         }\n\n'"
2058,7729360,thouis,thouis,2012-10-19 21:03:24,2012-10-23 02:43:22,2012-10-19 21:03:24,closed,,,1,11 - Bug;component: numpy.core;priority: normal,https://api.github.com/repos/numpy/numpy/issues/2058,b'test_umath_complex failures with Windows XP & Migw32 (Trac #1461)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/1461 on 2010-04-23 by @drnlm, assigned to unknown._\n\nFrom the windows buildbot\n\nWindows XP, python 2.5, mingw32\n\n\n\n    ======================================================================\n    FAIL: test_umath_complex.TestCexp.test_special_values(<ufunc \'exp\'>, 1.#INF, 0, 1.#INF, 0)\n    ----------------------------------------------------------------------\n    Traceback (most recent call last):\n      File ""c:\\Python25\\Lib\\site-packages\\nose\\case.py"", line 186, in runTest\n        self.test(*self.arg)\n      File ""C:\\buildbot\\numpy\\b11\\numpy-install25\\Lib\\site-packages\\numpy\\core\\tests\\test_umath_complex.py"", line 539, in check_complex_value\n        assert_equal(f(z1), z2)\n      File ""..\\numpy-install25\\Lib\\site-packages\\numpy\\testing\\utils.py"", line 256, in assert_equal\n      File ""..\\numpy-install25\\Lib\\site-packages\\numpy\\testing\\utils.py"", line 686, in assert_array_equal\n      File ""..\\numpy-install25\\Lib\\site-packages\\numpy\\testing\\utils.py"", line 596, in assert_array_compare\n    AssertionError: \n    Arrays are not equal\n    \n    (x and y nan location mismatch [ True], False mismatch)\n     x: array([ Inf NaNj])\n     y: array((1.#INF+0j))\n    \n    \n    ======================================================================\n    FAIL: test_umath_complex.TestCexp.test_special_values(None,)\n    ----------------------------------------------------------------------\n    Traceback (most recent call last):\n      File ""c:\\Python25\\Lib\\site-packages\\nose\\case.py"", line 186, in runTest\n        self.test(*self.arg)\n      File ""C:\\buildbot\\numpy\\b11\\numpy-install25\\Lib\\site-packages\\numpy\\core\\tests\\test_umath_complex.py"", line 60, in _check_ninf_inf\n        raise AssertionError(msgform %(z.real, z.imag))\n    AssertionError: cexp(-inf, inf) is (-1.#IND00, -1.#IND00), expected (+-0, +-0)\n    >>  raise AssertionError(\'cexp(-inf, inf) is (%f, %f), expected (+-0, +-0)\' %((nan+nanj).real, (nan+nanj).imag))\n        \n    \n    ======================================================================\n    FAIL: test_umath_complex.TestCexp.test_special_values(None,)\n    ----------------------------------------------------------------------\n    Traceback (most recent call last):\n      File ""c:\\Python25\\Lib\\site-packages\\nose\\case.py"", line 186, in runTest\n        self.test(*self.arg)\n      File ""C:\\buildbot\\numpy\\b11\\numpy-install25\\Lib\\site-packages\\numpy\\core\\tests\\test_umath_complex.py"", line 73, in _check_inf_inf\n        raise AssertionError(msgform % (z.real, z.imag))\n    AssertionError: cexp(inf, inf) is (-1.#IND00, -1.#IND00), expected (+-inf, nan)\n    >>  raise AssertionError(\'cexp(inf, inf) is (%f, %f), expected (+-inf, nan)\' % ((nan+nanj).real, (nan+nanj).imag))\n        \n    \n    ======================================================================\n    FAIL: test_umath_complex.TestCexp.test_special_values(None,)\n    ----------------------------------------------------------------------\n    Traceback (most recent call last):\n      File ""c:\\Python25\\Lib\\site-packages\\nose\\case.py"", line 186, in runTest\n        self.test(*self.arg)\n      File ""C:\\buildbot\\numpy\\b11\\numpy-install25\\Lib\\site-packages\\numpy\\core\\tests\\test_umath_complex.py"", line 86, in _check_ninf_nan\n        raise AssertionError(msgform % (z.real, z.imag))\n    AssertionError: cexp(-inf, nan) is (1.#QNAN0, 1.#QNAN0), expected (+-0, +-0)\n    >>  raise AssertionError(\'cexp(-inf, nan) is (%f, %f), expected (+-0, +-0)\' % ((nan+nanj).real, (nan+nanj).imag))\n        \n    \n    ======================================================================\n    FAIL: test_umath_complex.TestCexp.test_special_values(None,)\n    ----------------------------------------------------------------------\n    Traceback (most recent call last):\n      File ""c:\\Python25\\Lib\\site-packages\\nose\\case.py"", line 186, in runTest\n        self.test(*self.arg)\n      File ""C:\\buildbot\\numpy\\b11\\numpy-install25\\Lib\\site-packages\\numpy\\core\\tests\\test_umath_complex.py"", line 99, in _check_inf_nan\n        raise AssertionError(msgform % (z.real, z.imag))\n    AssertionError: cexp(-inf, nan) is (1.#QNAN0, 1.#QNAN0), expected (+-inf, nan)\n    >>  raise AssertionError(\'cexp(-inf, nan) is (%f, %f), expected (+-inf, nan)\' % ((nan+nanj).real, (nan+nanj).imag))\n        \n    \n    ======================================================================\n    FAIL: test_special_values (test_umath_complex.TestClog)\n    ----------------------------------------------------------------------\n    Traceback (most recent call last):\n      File ""C:\\buildbot\\numpy\\b11\\numpy-install25\\Lib\\site-packages\\numpy\\core\\tests\\test_umath_complex.py"", line 144, in test_special_values\n        self.assertRaises(FloatingPointError, np.log, x)\n    AssertionError: FloatingPointError not raised\n        if hasattr(excClass,\'__name__\'): \'FloatingPointError\' = excClass.\'unittest\'\n        else: \'FloatingPointError\' = str(excClass)\n    >>  raise self.failureException, ""%s not raised"" % \'FloatingPointError\'\n        \n    \n    ======================================================================\n    FAIL: test_umath_complex.TestCsqrt.test_special_values(<ufunc \'sqrt\'>, 1, 1.#INF, 1.#INF, 1.#INF)\n    ----------------------------------------------------------------------\n    Traceback (most recent call last):\n      File ""c:\\Python25\\Lib\\site-packages\\nose\\case.py"", line 186, in runTest\n        self.test(*self.arg)\n      File ""C:\\buildbot\\numpy\\b11\\numpy-install25\\Lib\\site-packages\\numpy\\core\\tests\\test_umath_complex.py"", line 539, in check_complex_value\n        assert_equal(f(z1), z2)\n      File ""..\\numpy-install25\\Lib\\site-packages\\numpy\\testing\\utils.py"", line 256, in assert_equal\n      File ""..\\numpy-install25\\Lib\\site-packages\\numpy\\testing\\utils.py"", line 686, in assert_array_equal\n      File ""..\\numpy-install25\\Lib\\site-packages\\numpy\\testing\\utils.py"", line 596, in assert_array_compare\n    AssertionError: \n    Arrays are not equal\n    \n    (x and y nan location mismatch [ True], False mismatch)\n     x: array([ Inf NaNj])\n     y: array((1.#INF+1.#INFj))\n    \n    \n    ======================================================================\n    FAIL: test_umath_complex.TestCsqrt.test_special_values(<ufunc \'sqrt\'>, -1, 1.#INF, 1.#INF, 1.#INF)\n    ----------------------------------------------------------------------\n    Traceback (most recent call last):\n      File ""c:\\Python25\\Lib\\site-packages\\nose\\case.py"", line 186, in runTest\n        self.test(*self.arg)\n      File ""C:\\buildbot\\numpy\\b11\\numpy-install25\\Lib\\site-packages\\numpy\\core\\tests\\test_umath_complex.py"", line 539, in check_complex_value\n        assert_equal(f(z1), z2)\n      File ""..\\numpy-install25\\Lib\\site-packages\\numpy\\testing\\utils.py"", line 256, in assert_equal\n      File ""..\\numpy-install25\\Lib\\site-packages\\numpy\\testing\\utils.py"", line 686, in assert_array_equal\n      File ""..\\numpy-install25\\Lib\\site-packages\\numpy\\testing\\utils.py"", line 596, in assert_array_compare\n    AssertionError: \n    Arrays are not equal\n    \n    (x and y nan location mismatch [ True], False mismatch)\n     x: array([ NaN Infj])\n     y: array((1.#INF+1.#INFj))\n    \n    \n    ======================================================================\n    FAIL: test_umath_complex.TestCsqrt.test_special_values(<ufunc \'sqrt\'>, 1.#INF, 1.#INF, 1.#INF, 1.#INF)\n    ----------------------------------------------------------------------\n    Traceback (most recent call last):\n      File ""c:\\Python25\\Lib\\site-packages\\nose\\case.py"", line 186, in runTest\n        self.test(*self.arg)\n      File ""C:\\buildbot\\numpy\\b11\\numpy-install25\\Lib\\site-packages\\numpy\\core\\tests\\test_umath_complex.py"", line 539, in check_complex_value\n        assert_equal(f(z1), z2)\n      File ""..\\numpy-install25\\Lib\\site-packages\\numpy\\testing\\utils.py"", line 256, in assert_equal\n      File ""..\\numpy-install25\\Lib\\site-packages\\numpy\\testing\\utils.py"", line 686, in assert_array_equal\n      File ""..\\numpy-install25\\Lib\\site-packages\\numpy\\testing\\utils.py"", line 596, in assert_array_compare\n    AssertionError: \n    Arrays are not equal\n    \n    (x and y nan location mismatch [ True], False mismatch)\n     x: array([ Inf NaNj])\n     y: array((1.#INF+1.#INFj))\n    \n    \n    ======================================================================\n    FAIL: test_umath_complex.TestCsqrt.test_special_values(<ufunc \'sqrt\'>, -1.#INF, 1.#INF, 1.#INF, 1.#INF)\n    ----------------------------------------------------------------------\n    Traceback (most recent call last):\n      File ""c:\\Python25\\Lib\\site-packages\\nose\\case.py"", line 186, in runTest\n        self.test(*self.arg)\n      File ""C:\\buildbot\\numpy\\b11\\numpy-install25\\Lib\\site-packages\\numpy\\core\\tests\\test_umath_complex.py"", line 539, in check_complex_value\n        assert_equal(f(z1), z2)\n      File ""..\\numpy-install25\\Lib\\site-packages\\numpy\\testing\\utils.py"", line 256, in assert_equal\n      File ""..\\numpy-install25\\Lib\\site-packages\\numpy\\testing\\utils.py"", line 686, in assert_array_equal\n      File ""..\\numpy-install25\\Lib\\site-packages\\numpy\\testing\\utils.py"", line 596, in assert_array_compare\n    AssertionError: \n    Arrays are not equal\n    \n    (x and y nan location mismatch [ True], False mismatch)\n     x: array([ NaN Infj])\n     y: array((1.#INF+1.#INFj))\n    \n    \n    ======================================================================\n    FAIL: test_umath_complex.TestCsqrt.test_special_values(<ufunc \'sqrt\'>, -1.#IND, 1.#INF, 1.#INF, 1.#INF)\n    ----------------------------------------------------------------------\n    Traceback (most recent call last):\n      File ""c:\\Python25\\Lib\\site-packages\\nose\\case.py"", line 186, in runTest\n        self.test(*self.arg)\n      File ""C:\\buildbot\\numpy\\b11\\numpy-install25\\Lib\\site-packages\\numpy\\core\\tests\\test_umath_complex.py"", line 539, in check_complex_value\n        assert_equal(f(z1), z2)\n      File ""..\\numpy-install25\\Lib\\site-packages\\numpy\\testing\\utils.py"", line 256, in assert_equal\n      File ""..\\numpy-install25\\Lib\\site-packages\\numpy\\testing\\utils.py"", line 686, in assert_array_equal\n      File ""..\\numpy-install25\\Lib\\site-packages\\numpy\\testing\\utils.py"", line 596, in assert_array_compare\n    AssertionError: \n    Arrays are not equal\n    \n    (x and y nan location mismatch [ True], False mismatch)\n     x: array([ NaN NaNj])\n     y: array((1.#INF+1.#INFj))\n    \n    \n    ======================================================================\n    FAIL: test_umath_complex.TestCsqrt.test_special_values(None,)\n    ----------------------------------------------------------------------\n    Traceback (most recent call last):\n      File ""c:\\Python25\\Lib\\site-packages\\nose\\case.py"", line 186, in runTest\n        sRunning unit tests for numpy\n    NumPy version 2.0.0.dev8351\n    NumPy is installed in C:\\buildbot\\numpy\\b11\\numpy-install25\\Lib\\site-packages\\numpy\n    Python version 2.5.4 (r254:67916, Dec 23 2008, 15:10:54) [MSC v.1310 32 bit (Intel)]\n    nose version 0.11.2\n    elf.test(*self.arg)\n      File ""C:\\buildbot\\numpy\\b11\\numpy-install25\\Lib\\site-packages\\numpy\\core\\tests\\test_umath_complex.py"", line 340, in _check_ninf_nan\n        raise AssertionError(msgform % (z.real, z.imag))\n    AssertionError: csqrt(-inf, nan) is (1.#QNAN0, 1.#QNAN0), expected (nan, +-inf)\n    >>  raise AssertionError(\'csqrt(-inf, nan) is (%f, %f), expected (nan, +-inf)\' % ((nan+nanj).real, (nan+nanj).imag))\n\n\n\nThe weird output formatting appears to be a long standing issue, (see #1463 for example), but the results are clearly not what was expected.\n\nSimilar failures seen when using python 2.6\n'"
2057,7729357,thouis,thouis,2012-10-19 21:03:21,2012-10-19 21:03:22,2012-10-19 21:03:22,closed,,,1,11 - Bug;component: numpy.lib;priority: normal,https://api.github.com/repos/numpy/numpy/issues/2057,b'test_polynomial.TestDocs overly sensitive to output formatting (Trac #1460)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/1460 on 2010-04-23 by @drnlm, assigned to unknown._\n\nSeen on the windows buildbot.\n\nUsing python 2.5, Windows XP, Mingw32 build.\n\n\n\n    \n    FAIL: test_doctests (test_polynomial.TestDocs)\n    ----------------------------------------------------------------------\n    Traceback (most recent call last):\n      File ""C:\\buildbot\\numpy\\b11\\numpy-install25\\Lib\\site-packages\\numpy\\lib\\tests\\test_polynomial.py"", line 90, in test_doctests\n        return rundocs()\n      File ""..\\numpy-install25\\Lib\\site-packages\\numpy\\testing\\utils.py"", line 962, in rundocs\n    AssertionError: Some doctests failed:\n    **********************************************************************\n    File ""C:\\buildbot\\numpy\\b11\\numpy-install25\\Lib\\site-packages\\numpy\\lib\\tests\\test_polynomial.py"", line 20, in test_polynomial\n    Failed example:\n        print(poly1d([100e-90, 1.234567e-9j+3, -1234.999e8]))\n    Expected:\n               2\n        1e-88 x + (3 + 1.235e-09j) x - 1.235e+11\n    Got:\n                2\n        1e-088 x + (3 + 1.235e-009j) x - 1.235e+011\n    \n    \n\n\n\nNot seen using python 2.6'"
2056,7729354,thouis,jaimefrio,2012-10-19 21:03:21,2015-05-12 10:53:09,2015-05-12 10:53:09,closed,,,5,11 - Bug;component: numpy.random;priority: normal,https://api.github.com/repos/numpy/numpy/issues/2056,b'mtrand.beta does not handle small parameters well (Trac #1459)',"b""_Original ticket http://projects.scipy.org/numpy/ticket/1459 on 2010-04-20 by trac user JohnReid, assigned to unknown._\n\nI've been using scipy.stats.beta and I've noticed it returns NaN when the parameters are small. I've tried using the same parameters in R code and it handles them just fine. R also handles parameters up to 17 orders of magnitude smaller. Is there any documentation on which parameter ranges are acceptable? Can I expect similar results with other distributions?\n\nPlease see my recent post on scipy-user@scipy.org with Josef's follow-up.\n\nHere's the code I used:\n\n\n\n    import scipy.stats as S, numpy as N\n    from rpy2.robjects import r\n    \n    alpha, beta = 0.0710, 0.4222\n    for i in xrange(20):\n         x_from_scipy = S.beta.rvs(alpha, beta)\n         x_from_R = r.rbeta(1, alpha, beta)\n         print 'Alpha=%.2e; Beta=%.2e; scipy.stats.beta.rvs=%.2e; \n    R.rbeta=%.2e' % (alpha, beta, x_from_scipy, x_from_R[0])\n         alpha /= 10.\n         beta /= 10.\n    \n\n\n\nand the output from it:\n\n\n    Alpha=7.10e-02; Beta=4.22e-01; scipy.stats.beta.rvs=2.75e-11; \n    R.rbeta=6.60e-02\n    Alpha=7.10e-03; Beta=4.22e-02; scipy.stats.beta.rvs=3.73e-84; \n    R.rbeta=4.50e-124\n    Alpha=7.10e-04; Beta=4.22e-03; scipy.stats.beta.rvs=1.00e+00; \n    R.rbeta=1.00e+00\n    Alpha=7.10e-05; Beta=4.22e-04; scipy.stats.beta.rvs=nan; R.rbeta=3.95e-313\n    Alpha=7.10e-06; Beta=4.22e-05; scipy.stats.beta.rvs=nan; R.rbeta=1.00e+00\n    Alpha=7.10e-07; Beta=4.22e-06; scipy.stats.beta.rvs=nan; R.rbeta=3.95e-315\n    Alpha=7.10e-08; Beta=4.22e-07; scipy.stats.beta.rvs=nan; R.rbeta=3.95e-316\n    Alpha=7.10e-09; Beta=4.22e-08; scipy.stats.beta.rvs=nan; R.rbeta=3.95e-317\n    Alpha=7.10e-10; Beta=4.22e-09; scipy.stats.beta.rvs=nan; R.rbeta=3.95e-318\n    Alpha=7.10e-11; Beta=4.22e-10; scipy.stats.beta.rvs=nan; R.rbeta=3.95e-319\n    Alpha=7.10e-12; Beta=4.22e-11; scipy.stats.beta.rvs=nan; R.rbeta=3.95e-320\n    Alpha=7.10e-13; Beta=4.22e-12; scipy.stats.beta.rvs=nan; R.rbeta=3.95e-321\n    Alpha=7.10e-14; Beta=4.22e-13; scipy.stats.beta.rvs=nan; R.rbeta=3.95e-322\n    Alpha=7.10e-15; Beta=4.22e-14; scipy.stats.beta.rvs=nan; R.rbeta=1.00e+00\n    Alpha=7.10e-16; Beta=4.22e-15; scipy.stats.beta.rvs=nan; R.rbeta=1.00e+00\n    Alpha=7.10e-17; Beta=4.22e-16; scipy.stats.beta.rvs=nan; R.rbeta=0.00e+00\n    Alpha=7.10e-18; Beta=4.22e-17; scipy.stats.beta.rvs=nan; R.rbeta=1.00e+00\n    Alpha=7.10e-19; Beta=4.22e-18; scipy.stats.beta.rvs=nan; R.rbeta=0.00e+00\n    Alpha=7.10e-20; Beta=4.22e-19; scipy.stats.beta.rvs=nan; R.rbeta=0.00e+00\n    Alpha=7.10e-21; Beta=4.22e-20; scipy.stats.beta.rvs=nan; R.rbeta=0.00e+00\n\n"""
2055,7729352,thouis,thouis,2012-10-19 21:03:15,2012-10-19 21:03:19,2012-10-19 21:03:19,closed,,1.6.0,10,11 - Bug;component: numpy.lib;priority: high,https://api.github.com/repos/numpy/numpy/issues/2055,"b""loadtxt doesn't unpack structred arrays with unpack=True (Trac #1458)""","b'_Original ticket http://projects.scipy.org/numpy/ticket/1458 on 2010-04-18 by trac user gdub, assigned to unknown._\n\nThe following should work:\n\n\n\n    #!python\n    import numpy; from StringIO import StringIO\n    d = StringIO(""M 21 72\\nF 35 58"")\n    a,b,c = numpy.loadtxt(d, dtype={\'names\': (\'gender\', \'age\', \'weight\'), \'formats\': (\'S1\', \'i4\', \'f4\')}, unpack=True)\n\n'"
2054,7729350,thouis,thouis,2012-10-19 21:03:13,2012-10-19 21:03:14,2012-10-19 21:03:14,closed,,,1,11 - Bug;component: numpy.core;priority: normal,https://api.github.com/repos/numpy/numpy/issues/2054,b'TestClog failure on Windows (Trac #1457)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/1457 on 2010-04-18 by @rgommers, assigned to unknown._\n\nReported against 1.4.1rc2, and according to Josef has been failing for a long time on Windows:\n\n\n\n    FAIL: test_special_values (test_umath_complex.TestClog)\n    ----------------------------------------------------------------------\n    Traceback (most recent call last):\n      File ""C:\\Python26\\lib\\site-packages\\numpy\\core\\tests\\test_umath_complex.py"", l\n    ine 179, in test_special_values\n        assert_almost_equal(np.log(x), y)\n      File ""C:\\Python26\\lib\\site-packages\\numpy\\testing\\utils.py"", line 437, in asse\n    rt_almost_equal\n        ""DESIRED: %s\\n"" % (str(actual), str(desired)))\n    AssertionError: Items are not equal:\n    ACTUAL: [ NaN+2.35619449j]\n    DESIRED: (inf+2.35619449019j)\n\n\n\nMarking as knownfail for the 1.4.1 release.'"
2052,7729347,thouis,thouis,2012-10-19 21:03:09,2013-10-20 07:22:31,2012-10-19 21:03:10,closed,,,1,11 - Bug;component: Other;priority: normal,https://api.github.com/repos/numpy/numpy/issues/2052,b'numpy.cov should accept ddof keyword argument (Trac #1455)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/1455 on 2010-04-16 by trac user aisaac, assigned to @charris._\n\nThe ``bias`` keyword has been replaced with ``ddof`` on related functions (e.g., np.var and np.std) but not yet for np.cov.'"
2051,7729345,thouis,thouis,2012-10-19 21:03:06,2012-10-19 21:03:08,2012-10-19 21:03:08,closed,,,5,11 - Bug;component: Other;priority: normal,https://api.github.com/repos/numpy/numpy/issues/2051,b'numpy.linalg.eig computes wrong eigenvalues (Trac #1454)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/1454 on 2010-04-16 by trac user skavhaug, assigned to unknown._\n\nWhen using numpy.linalg.eig to compute the eigenvector/eigenvalue pairs of a non-symmetric (and non-Hessian) matrix, the errors defined as:\nnp.linalg.norm(np.dot(a, v[:,i]) - w[i]*v[:,i])\nis off by several orders of magnitude (up to 14 orders) compared to when performing the same calculation in octave.'"
2050,7729342,thouis,thouis,2012-10-19 21:03:04,2012-10-19 21:03:05,2012-10-19 21:03:05,closed,,NumPy 2.0,2,11 - Bug;component: numpy.testing;priority: high,https://api.github.com/repos/numpy/numpy/issues/2050,b'deprecated decorator does not work as advertized (Trac #1453)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/1453 on 2010-04-14 by @cournape, assigned to @cournape._\n\nThe deprecated decorator effectively disables the test'"
2046,7729328,thouis,juliantaylor,2012-10-19 21:02:51,2014-02-14 16:13:10,2014-02-14 16:13:10,closed,,,2,11 - Bug;component: numpy.core;priority: normal,https://api.github.com/repos/numpy/numpy/issues/2046,b'uint64 hash function bug (Trac #1449)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/1449 on 2010-04-09 by trac user erian, assigned to unknown._\n\n\n\n    >>> nbr = 1<< 50L\n    >>> numpy.uint64(nbr) == nbr\n    True\n    >>> hash(numpy.uint64(nbr)) == hash(nbr)\n    False\n\n\n\nAffects 2.0.0.dev8324 as well\n'"
2045,7729325,thouis,thouis,2012-10-19 21:02:48,2012-10-23 02:43:21,2012-10-19 21:02:50,closed,,1.6.0,6,11 - Bug;component: numpy.distutils;priority: normal,https://api.github.com/repos/numpy/numpy/issues/2045,b'Intel Fortran compiler detection fails on Mac OS X 10.6 (Trac #1448)',"b""_Original ticket http://projects.scipy.org/numpy/ticket/1448 on 2010-04-08 by trac user themiwi, assigned to unknown._\n\nRunning the version_cmd (as in numpy/distutils/ccompiler.py) results in\n\n\n    $ /usr/bin/ifort -FI -V -c test.f -o test.o \n    Intel(R) Fortran Intel(R) 64 Compiler Professional for applications running on Intel(R) 64, Version 11.1    Build 20090827 Package ID: m_cprof_p_11.1.067\n    Copyright (C) 1985-2009 Intel Corporation.  All rights reserved.\n    \n     Intel(R) Fortran 11.1-2582\n\n\n\nUsing the following patch fixes things for me, but probably will break other platforms, so somebody with a better knowledge of the whole compiler-detection code should take care of this.\n\n\n\n    Index: numpy/distutils/fcompiler/intel.py\n    ===================================================================\n    --- numpy/distutils/fcompiler/intel.py\t(revision 8324)\n    +++ numpy/distutils/fcompiler/intel.py\t(working copy)\n    @@ -24,8 +24,8 @@\n     \n         compiler_type = 'intel'\n         compiler_aliases = ('ifort',)\n    -    description = 'Intel Fortran Compiler for 32-bit apps'\n    -    version_match = intel_version_match('32-bit|IA-32')\n    +    description = 'Intel Fortran Compiler for 32/64-bit apps'\n    +    version_match = intel_version_match('(32-bit|64)|IA-(32|64)')\n     \n         possible_executables = ['ifort', 'ifc']\n     \n\n"""
2044,7729322,thouis,thouis,2012-10-19 21:02:46,2012-10-19 21:02:47,2012-10-19 21:02:47,closed,,,1,11 - Bug;component: Other;priority: normal,https://api.github.com/repos/numpy/numpy/issues/2044,b'Inconsistent behavior when indexing a masked array with a bool array (Trac #1447)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/1447 on 2010-04-04 by trac user nathanielpeterson, assigned to unknown._\n\nThis part works as I would expected:\n\n\n\n\n    import numpy as np\n    a=np.ma.fix_invalid(np.array([np.nan,-1,0,1]))\n    b=np.ma.fix_invalid(np.array([np.nan,-1,0,1]))\n    idx=(a==b)\n    print(a[idx][3])\n    # 1.0\n\n\n\n\nNote that a[idx] has shape (4,).\nBut if I change the first element of b from np.nan to 2.0 then\na[idx2] has shape (3,) despite np.alltrue(idx==idx2) being True:\n\n\n\n    \n    c=np.ma.fix_invalid(np.array([2.0,-1,0,1]))\n    idx2=(a==c)\n    assert(np.alltrue(idx==idx2))\n    a[idx2][3]\n\n\n\n\n\n\n    \n    # Traceback (most recent call last):\n    #   File ""/home/np/test.py"", line 12, in <module>\n    #     a[idx2][3]\n    #   File ""/usr/lib/python2.6/dist-packages/numpy/ma/core.py"", line 2578, in __getitem__\n    #     dout = ndarray.__getitem__(ndarray.view(self, ndarray), indx)\n    # IndexError: index out of bounds\n\n\n\n\nI looked at repr(idx) and repr(idx2) and they appear to have equal values in all respects. Therefore, it seems inconsistent (and puzzling) why a[idx2] does not behave the same as a[idx].\n\n'"
2043,7729321,thouis,thouis,2012-10-19 21:02:43,2012-10-19 21:02:45,2012-10-19 21:02:45,closed,,NumPy 1.7,3,11 - Bug;component: numpy.core;priority: low,https://api.github.com/repos/numpy/numpy/issues/2043,"b'vstack not equivalent to concatenate(x, axis=0) (Trac #1446)'","b""_Original ticket http://projects.scipy.org/numpy/ticket/1446 on 2010-04-04 by @mforbes, assigned to unknown._\n\nThe documentation states that `vstack(tup) is equivalent to concatenate(tup, axis=0)`.  This fails for 1D arrays because of the promotion 1D->2D.\n\n\n\n    >>> tup = [np.zeros(1), np.zeros(5)]\n    >>> np.concatenate(tup, axis=0)\n    array([ 0.,  0.,  0.,  0.,  0.,  0.])\n    >>> vstack(tup)\n    Traceback (most recent call last):\n       ...\n    ValueError: array dimensions must agree except for d_0\n\n\n\nIf the current behaviour of automatic promotion is desired, then this is a documentation bug and a bug with the exception message (all the dimensions do agree except for d_0 in this case -- they don't exist!)  I will add a note about this on the documentation page too.\n"""
2041,7729318,thouis,charris,2012-10-19 21:02:39,2014-02-20 01:20:25,2014-02-20 01:20:25,closed,,,3,11 - Bug;component: numpy.core;priority: normal,https://api.github.com/repos/numpy/numpy/issues/2041,"b'numpy.array fails to change a list of tuples with float and string, whith to large string of number (Trac #1444)'","b""_Original ticket http://projects.scipy.org/numpy/ticket/1444 on 2010-04-01 by trac user mario, assigned to unknown._\n\n\n\n    In [39]: c\n    Out[39]: \n    [(-0.017527029320000002, 'TD_C3_0.440sec'),\n     (9.0204180442999995e-06, 'TD_C3_0.920sec')]\n    \n    In [40]: numpy.array(c)\n    Out[40]: \n    array([['-0.01752702932', 'TD_C3_0.440sec'],\n           ['9.0204180443e-', 'TD_C3_0.920sec']], \n          dtype='|S14')\n\n\nSo it seems that the length of the number is restricted by the lenght of the string. Proof:\n\n\n    In [71]: e=[]\n    \n    In [72]: e.append((a,'TD_C3_0.920second'))\n    \n    In [73]: e.append((b,'TD_C3_0.920sec'))\n    \n    In [74]: numpy.array(e)\n    Out[74]: \n    array([['9.0204180443e-06', 'TD_C3_0.920second'],\n           ['-0.01752702932', 'TD_C3_0.920sec']], \n          dtype='|S17')\n\n\nA way out was to set the dtype to '|S17' but thats no real solution."""
2040,7729313,thouis,thouis,2012-10-19 21:02:36,2012-10-19 21:02:37,2012-10-19 21:02:37,closed,,1.6.0,5,11 - Bug;component: Other;priority: normal,https://api.github.com/repos/numpy/numpy/issues/2040,b'#warning directives are not portable (Trac #1443)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/1443 on 2010-03-31 by @cgohlke, assigned to unknown._\n\nnumpy trunk r8313 contains 14 #warning statements and therefore can not be built with Microsoft Visual C compilers. Please consider using #pragma directives instead.\n\n\n\n    numpy\\core\\src\\multiarray\\scalartypes.c.src(1965): #warning XXX: the format is not implemented! -- this needs more work\n    numpy\\core\\src\\scalarmathmodule.c.src(1310): #warning XXX -- is it important to do something with the integers here?\n    numpy\\core\\src\\scalarmathmodule.c.src(1354): #warning XXX -- is it important to do something with the integers here?\n    numpy\\core\\src\\scalarmathmodule.c.src(1397): #warning XXX -- is it important to do something with the integers here?\n    numpy\\core\\src\\scalarmathmodule.c.src(1440): #warning XXX -- is it important to do something with the integers here?\n    numpy\\core\\src\\scalarmathmodule.c.src(1524): #warning XXX -- is it important to do something with the integers here?\n    numpy\\core\\src\\multiarray\\buffer.c(251): #warning XXX -- should it use UTF-8 here?\n    numpy\\core\\src\\multiarray\\common.c(311): #warning XXX -- what is the correct thing to do here?\n    numpy\\core\\src\\multiarray\\ctors.c(1099): #warning XXX -- what is the correct thing to do here?\n    numpy\\f2py\\cfuncs.py(269): #warning HAVE_LONG_LONG is not available. Redefining pyobj_from_long_long.\n    numpy\\lib\\src\\_compiled_base.c(577): #warning XXX -- is this correct at all!?\n    numpy\\numarray\\_capi.c(93): #warning XXX - needs implementation\n    numpy\\numarray\\_capi.c(130): #warning XXX - needs implementation\n    numpy\\numarray\\_capi.c(153): #warning XXX - needs implementation\n\n\n\nSee also [http://stackoverflow.com/questions/171435/portability-of-warning-preprocessor-directive]'"
2039,7729312,thouis,seberg,2012-10-19 21:02:33,2016-01-10 09:14:04,2016-01-10 09:14:04,closed,,,8,11 - Bug;component: Documentation;component: numpy.lib;priority: normal,https://api.github.com/repos/numpy/numpy/issues/2039,b'rollaxis() has confusing error messages and should maybe interpret negative start argument differently (Trac #1441)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/1441 on 2010-03-31 by trac user kbasye, assigned to unknown._\n\nThe rollaxis() function in numeric.py allows negative arguments for both the axis and the start.  For the axis, the usual Python interpretation of a negative value applies; the axis is chosen by counting from the back.  For the start, however, -1 is not the last possible position, but the second to last.  I understand that fixing this is a change in the function\'s behavior, but at least the existing behavior is undocumented :-).  \n\nIn both cases, the error messages can be confusing if too-negative values are given because the error raised uses modified values of the arguments and suggests a legal range that\'s smaller than what the function can actually handle.\n\nSince it\'s short and I\'ve changed many lines, I\'m just going to paste a suggested replacement here rather than a diff - hope that\'s OK.\n\n\n    def rollaxis(a, axis, start=0):\n        """"""                                                                                                                                        \n        Roll the specified axis until it lies in a given position.                                                                                 \n                                                                                                                                                   \n        Parameters                                                                                                                                 \n        ----------                                                                                                                                 \n        a : ndarray                                                                                                                                \n            Input array.                                                                                                                           \n        axis : int                                                                                                                                 \n            The axis to roll.  The positions of the other axes do not                                                                              \n            change relative to one another.                                                                                                        \n        start : int, optional                                                                                                                      \n            The axis is rolled until it lies before this position.                                                                                 \n                                                                                                                                                   \n        Returns                                                                                                                                    \n        -------                                                                                                                                    \n        res : ndarray                                                                                                                              \n            Output array.                                                                                                                          \n                                                                                                                                                   \n        See Also                                                                                                                                   \n        --------                                                                                                                                   \n        roll : Roll the elements of an array by a number of positions along a                                                                      \n               given axis.                                                                                                                         \n                                                                                                                                                   \n        Examples                                                                                                                                   \n        --------                                                                                                                                   \n        >>> a = np.ones((3,4,5,6))                                                                                                                 \n        >>> rollaxis(a, 3, 1).shape                                                                                                                \n        (3, 6, 4, 5)                                                                                                                               \n        >>> rollaxis(a, 2).shape                                                                                                                   \n        (5, 3, 4, 6)                                                                                                                               \n        >>> rollaxis(a, 1, 4).shape                                                                                                                \n        (3, 5, 6, 4)                                                                                                                               \n                                                                                                                                                   \n        First axis becomes the last:                                                                                                               \n                                                                                                                                                   \n        >>> rollaxis(a, 0, -1).shape                                                                                                               \n        (4, 5, 6, 3)                                                                                                                               \n                                                                                                                                                   \n        Last axis becomes the first:                                                                                                               \n                                                                                                                                                   \n        >>> rollaxis(a, -1).shape                                                                                                                  \n        (6, 3, 4, 5)                                                                                                                               \n                                                                                                                                                   \n        """"""\n        n = a.ndim\n        orig_axis, orig_start = axis, start\n        if axis < 0:\n            axis += n\n        if start < 0:\n            start += n+1\n        msg = \'rollaxis: %s (%d) must be >= %d and < %d\'\n        if not (0 <= axis < n):\n            raise ValueError, msg % (\'axis\', orig_axis, -n, n)\n        if not (0 <= start < n+1):\n            raise ValueError, msg % (\'start\', orig_start, -n-1, n+1)\n        if (axis < start): # removing axis below will shift the start position                                                                     \n            start -= 1\n        if axis == start:\n            return a\n        axes = range(0,n)\n        axes.remove(axis)\n        axes.insert(start, axis)\n        return a.transpose(axes)\n    \n\n\n'"
2038,7729310,thouis,thouis,2012-10-19 21:02:30,2012-10-19 21:02:32,2012-10-19 21:02:32,closed,,,3,11 - Bug;component: Other;priority: normal,https://api.github.com/repos/numpy/numpy/issues/2038,"b""Numpy 'where' cannot handle masked arrays with boolean arrays for masks (Trac #1440)""","b'_Original ticket http://projects.scipy.org/numpy/ticket/1440 on 2010-03-27 by trac user brendanarnold, assigned to unknown._\n\nTo reproduce ...\n\n\n\n    \n    In [1]: a = np.ma.arange(5)\n    In [2]: a\n    Out[2]:\n    masked_array(data = [0 1 2 3 4],\n                 mask = False,\n           fill_value = 999999)\n    In [3]: np.where(a == 1)\n    Out[3]:\n    (masked_array(data = [1],\n                 mask = False,\n           fill_value = 999999)\n    ,)\n    In [4]: a.mask = a == 1\n    In [5]: a\n    Out[5]:\n    masked_array(data = [0 -- 2 3 4],\n                 mask = [False  True False False False],\n           fill_value = 999999)\n    In [6]: np.where(a == 1)\n    ---------------------------------------------------------------------------\n    ValueError                                Traceback (most recent call last)\n    \n    C:\\Documents and Settings\\ba1224\\My Documents\\Python\\<ipython console> in <module>()\n    \n    C:\\Python26\\lib\\site-packages\\numpy\\ma\\core.pyc in __array_finalize__(self, obj)\n       2445         # Finalize the mask ...........\n    \n       2446         if self._mask is not nomask:\n    -> 2447             self._mask.shape = self.shape\n       2448         return\n       2449     #..................................\n    \n    \n    ValueError: total size of new array must be unchanged\n\n'"
2037,7729307,thouis,thouis,2012-10-19 21:02:29,2012-10-23 02:43:16,2012-10-19 21:02:29,closed,,,1,11 - Bug;component: Other;priority: normal,https://api.github.com/repos/numpy/numpy/issues/2037,"b""numpy.array(arr.flat) reorders arr's memory if arr.flags.fortran and arr.flags.owndata (Trac #1439)""","b""_Original ticket http://projects.scipy.org/numpy/ticket/1439 on 2010-03-27 by @zachrahan, assigned to unknown._\n\n\n\n    import numpy\n    a = numpy.array([[1,2],[3,4]], order='F')\n    print a\n    l = list(a.flat)\n    print a\n    f = numpy.fromiter(a.flat, a.dtype)\n    print a\n    a2 = numpy.array(a.flat)\n    print a\n\n\n\nyields:\n\n\n    array([[1, 2],\n           [3, 4]])\n    \n    array([[1, 2],\n           [3, 4]])\n    \n    array([[1, 2],\n           [3, 4]])\n    \n    array([[1, 3],\n           [2, 4]])\n\n\n\nIf 'a' is C-contiguous, this doesn't happen; likewise no problem (I think) if 'a' is a F-contiguous view on another array.\n"""
2036,7729305,thouis,thouis,2012-10-19 21:02:25,2012-10-19 21:02:27,2012-10-19 21:02:27,closed,,1.6.0,4,11 - Bug;component: Other;priority: normal,https://api.github.com/repos/numpy/numpy/issues/2036,"b""numpy.trapz() doesn't respect subclass (Trac #1438)""","b""_Original ticket http://projects.scipy.org/numpy/ticket/1438 on 2010-03-22 by @dopplershift, assigned to unknown._\n\nnumpy.trapz uses asarray() inside the code, which converts arrays that were ndarray subclasses. Otherwise, the code can work fine with subclasses.\n\nI've attached a patch that fixes this. No test case, because for some reason I can't get masked arrays to fail without my fix.  However, this does fix the problem for the python-quantities package.\n\n"""
2035,7729304,thouis,thouis,2012-10-19 21:02:23,2012-10-19 21:02:24,2012-10-19 21:02:24,closed,,,1,11 - Bug;component: Other;priority: normal,https://api.github.com/repos/numpy/numpy/issues/2035,b'Copy a complex array into a slice of a real array takes the real part. (Trac #1437)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/1437 on 2010-03-21 by trac user SevenThunders, assigned to unknown._\n\nNumpy gives surprising results when copying complex data into a portion of a predefined real data array.  It takes the real part of the complex data, and does not retype the real array to be complex.\n\nHere is some example code:\n\n\n\n    import numpy as np\n    z = np.zeros((3,4))\n    u = np.random.randn(3,2) + 1j * np.random.randn(3,2)\n    z[:,1:3] = u\n    print(z)\n\n\n\nOne can contrast this behavior,  with say Matlab,  or with numpy itself under different contexts,  e.g.  adding to the above code\n\n\n\n    u4 = np.random.randn(3,4) + 1j * np.random.randn(3,4)\n    z = u4\n    print(z)\n\n\n\nThus when the right hand side has the same size as the left,  numpy will promote the left hand side, z,  to be complex.  \n\nI can only presume that the reason for this behavior is performance,  probably due to maintaining a complex array as interleaved real and imaginary.  If so,  then for consistency and to catch the obvious sorts of bugs this creates,  it would be far preferable to throw an exception for the complex to real copy for a sliced array.\n\nAfter all it is pretty easy to get the default behavior by taking the real part of the right hand side.'"
2034,7729302,thouis,thouis,2012-10-19 21:02:20,2012-10-19 21:02:22,2012-10-19 21:02:22,closed,,1.6.0,3,11 - Bug;component: numpy.core;priority: high,https://api.github.com/repos/numpy/numpy/issues/2034,b'Regression creating array from character (Trac #1436)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/1436 on 2010-03-20 by @dopplershift, assigned to unknown._\n\nThe following code, which works with numpy 1.4.0, results in an error:\n\nIn [1]: import numpy as np\nIn [2]: v = \'m\'\nIn [3]: dt = np.dtype(\'>c\')\nIn [4]: a = np.asarray(v, dt)\n\nOn 1.4.0:\n\nIn [5]: a\nOut[5]: \narray(\'m\', \n      dtype=\'|S1\')\nIn [6]: np.__version__\nOut[6]: \'1.4.0\'\n\nOn SVN trunk:\n\n/home/rmay/.local/lib/python2.6/site-packages/numpy/core/numeric.pyc in asarray(a, dtype, order)\n    282 \n    283     """"""\n--> 284     return array(a, dtype, copy=False, order=order)\n    285 \n    286 def asanyarray(a, dtype=None, order=None):\n\nValueError: assignment to 0-d array\n\nIn [5]: np.__version__\nOut[5]: \'2.0.0.dev8297\'\n'"
2033,7729299,thouis,thouis,2012-10-19 21:02:18,2012-10-19 21:02:19,2012-10-19 21:02:19,closed,,1.6.0,3,11 - Bug;component: numpy.lib;priority: normal,https://api.github.com/repos/numpy/numpy/issues/2033,b'numpy.gradient() does not support array subclasses (Trac #1435)',"b""_Original ticket http://projects.scipy.org/numpy/ticket/1435 on 2010-03-18 by @dopplershift, assigned to unknown._\n\nFor no good reason, numpy.gradient does not support ndarray subclasses, like masked arrays.  This is due to the use of numpy.zeros on line 822, instead of using something like numpy.zeros_like().\n\nChanging zeros to zeros_like allows the function to return arrays of the proper subclass.\n\nAlso, while the function makes an effort to determine a floating point type for the output array (805-807), it was not actually using this type. I've corrected this as well."""
2032,7729296,thouis,thouis,2012-10-19 21:02:15,2012-10-19 21:02:15,2012-10-19 21:02:15,closed,,1.5.0,2,11 - Bug;component: numpy.core;priority: high,https://api.github.com/repos/numpy/numpy/issues/2032,b'out argument ignored by var and std (Trac #1434)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/1434 on 2010-03-18 by trac user a.naldi, assigned to unknown._\n\nwhen providing an axis, the mean, var and std functions return an array of results. The out argument enables to provide an already allocated array to store the result, which works fine for mean but not for var and std\n\n\nexemple ipython session:\n\n\n\n\n    In [1]: import numpy as np\n    In [2]: data = np.array(((1,2,3),(4,5,6),(7,8,9)))\n    In [3]: result = np.zeros((3,))\n    \n    In [4]: data.mean(axis=1, out=result) == result\n    Out[4]: array([ True,  True,  True], dtype=bool)\n    \n    In [5]: data.var(axis=1, out=result) == result\n    Out[5]: array([False, False, False], dtype=bool)\n    \n    In [6]: data.var(axis=1, out=result)\n    Out[6]: array([ 0.66666667,  0.66666667,  0.66666667])\n    \n    In [7]: result\n    Out[7]: array([ 2.,  5.,  8.])\n    \n\n\n\n'"
2030,7729294,thouis,charris,2012-10-19 21:02:11,2014-02-17 01:54:08,2014-02-17 01:54:08,closed,,,3,11 - Bug;component: Documentation;priority: low,https://api.github.com/repos/numpy/numpy/issues/2030,"b""some submodules are missing from sphinx's objects.inv (Trac #1432)""","b'_Original ticket http://projects.scipy.org/numpy/ticket/1432 on 2010-03-16 by @yarikoptic, assigned to @pv._\n\nhopefully this time I would not screw up and file a valid bug report ;)  I found that intersphinx failed to link to :mod:`numpy.random` ... so, I got objects.inv and saw which "" mod "" references seems to be missing:\n\n\n\n\n    $> for d in */; do grep -q ""numpy\\.${d%/} mod"" objects.inv  || echo ""$d missing""; done           \n    compat/ missing\n    core/ missing\n    doc/ missing\n    f2py/ missing\n    lib/ missing\n    linalg/ missing\n    ma/ missing\n    matrixlib/ missing\n    polynomial/ missing\n    random/ missing\n    testing/ missing\n    tests/ missing\n\n\n'"
2029,7729291,thouis,thouis,2012-10-19 21:02:07,2012-10-19 21:02:10,2012-10-19 21:02:10,closed,,,10,11 - Bug;component: numpy.core;priority: normal,https://api.github.com/repos/numpy/numpy/issues/2029,b'accessing multiple fields in a recarray gives fields in wrong order (Trac #1431)',"b""_Original ticket http://projects.scipy.org/numpy/ticket/1431 on 2010-03-16 by @samtygier, assigned to unknown._\n\nwhen using the list in list notation to access multiple columns of a record array the columns are returned in the order that they are stored in the array, not in the order asked for.\n\n\n    >>> x = np.array([(1.5,2.5,(1.0,2.0)),(3.,4.,(4.,5.)),(1.,3.,(2.,6.))],\n            dtype=[('x','f4'),('y',np.float32),('value','f4',(2,2))])\n    >>> x[['x','y']]\n    array([(1.5, 2.5), (3.0, 4.0), (1.0, 3.0)],\n         dtype=[('x', '<f4'), ('y', '<f4')])\n    >>> x[['y','x']]\n    array([(1.5, 2.5), (3.0, 4.0), (1.0, 3.0)],\n         dtype=[('x', '<f4'), ('y', '<f4')])\n\n\n\nthis different to what happens with a 2d array, where they are returned in the order asked for:\n\n\n\n    >>> a = array([0,0.1,0.2,0.3,0.4])\n    then\n    >>> a[[0,1,4]]\n    array([ 0. ,  0.1,  0.4])\n    >>> a[[4,1,0]]\n    array([ 0.4,  0.1,  0. ])\n\n\n\nI suggest that the it would be more consistent and predictable for the order to be the one asked for in both cases.\n\nThe current behaviour for the recarray was undocumented until today, so there can't be many people using it. therefore it might be worth break backwards compatibility to make the interface better.\n\nPlease see discussion at http://thread.gmane.org/gmane.comp.python.numeric.general/36933\n\na simple patch is attached."""
2028,7729289,thouis,thouis,2012-10-19 21:02:04,2012-10-19 21:02:05,2012-10-19 21:02:05,closed,,,2,11 - Bug;component: Other;priority: low,https://api.github.com/repos/numpy/numpy/issues/2028,"b""numpy's documentation missing in Ubuntu (Trac #1430)""","b""_Original ticket http://projects.scipy.org/numpy/ticket/1430 on 2010-03-16 by trac user malev, assigned to unknown._\n\nHi there!\nI looked after the numpy's doc in Ubuntu (/usr/share/doc/python-numpy) and there are only a list of *.py files, but no documentation.\nThere is a but about it in launchpad.\nhttps://bugs.launchpad.net/ubuntu/+source/python-numpy/+bug/531917"""
2027,7729287,thouis,thouis,2012-10-19 21:02:01,2012-10-23 02:43:15,2012-10-19 21:02:01,closed,,,1,11 - Bug;component: Other;priority: normal,https://api.github.com/repos/numpy/numpy/issues/2027,b'inconsistent behavior of argmin/argmax with nan (Trac #1429)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/1429 on 2010-03-15 by trac user jgregoire, assigned to unknown._\n\nThis is related to Ticket #1633 but I believe is an unreported issue.\nWhen the array contains nan, argmin and argmax ignore the nan. The problem is that if the zeroth element of the array is nan then argmin and argmax return 0. Having the behavior of a function depend on the value of the zeroth element is very undesirable.\n\n\nIn [1]: import numpy as np\n\nIn [2]: a=np.array([1., 2., 0., np.nan])\n\nIn [3]: print np.argmin(a), np.argmax(a)\n------> print(np.argmin(a), np.argmax(a))\n(2, 1)\n\nIn [4]: print np.argmin(a[::-1]), np.argmax(a[::-1])\n------> print(np.argmin(a[::-1]), np.argmax(a[::-1]))\n(0, 0)'"
2026,7729284,thouis,thouis,2012-10-19 21:01:58,2012-10-23 02:43:14,2012-10-19 21:01:59,closed,,,3,11 - Bug;component: Other;priority: normal,https://api.github.com/repos/numpy/numpy/issues/2026,b'genfromtxt problem with long integers (Trac #1428)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/1428 on 2010-03-15 by @josef-pkt, assigned to unknown._\n\nIt seems genfromtxt has problems identifying long integers (at\nleast on Windows 32)\n\nI have a csv file with large integers:\n\n\n\n    >>> np.array(4160680000,int)\n    Traceback (most recent call last):\n     File ""<pyshell#4>"", line 1, in <module>\n       np.array(4160680000,int)\n    OverflowError: long int too large to convert to int\n\n\n\ngenfromtxt fails with non-informative exception\n\n\n\n    >>> s = \'\'\'Date,Open,High,Low,Close,Volume,Adj Close\n    ... 2010-02-12,1075.95,1077.81,1062.97,1075.51,4160680000,1075.51\n    ... 2010-02-11,1067.10,1080.04,1060.59,1078.47,4400870000,1078.47\'\'\'\n    \n    \n    >>> sh = StringIO(s)\n    >>> data = np.genfromtxt(sh, delimiter="","", dtype=None, names=True)\n    Traceback (most recent call last):\n     File ""C:\\Programs\\Python25\\Lib\\site-packages\\numpy\\lib\\io.py"", line\n    1367, in genfromtxt\n       output = np.array(data, dtype=ddtype)\n    TypeError: expected a readable buffer object\n\n\n\nsame with explicit dtypes using int for the long integer\n\n\n\n    >>> dt= [(_,\'S10\'),(_,float),(_,float),(_,float),(_,float),(_,int),(\'\',float)]\n    >>> sh = StringIO(s)\n    >>> data = np.genfromtxt(sh, delimiter="","", dtype=dt, names=True)\n    Traceback (most recent call last):\n     File ""C:\\Programs\\Python25\\Lib\\site-packages\\numpy\\lib\\io.py"", line\n    1388, in genfromtxt\n       rows = np.array(data, dtype=[(\'\', _) for _ in dtype_flat])\n    TypeError: expected a readable buffer object\n\n\n\n\nusing float works:\n\n\n\n    >>> dt= [(_,\'S10\'),(_,float),(_,float),(_,float),(_,float),(_,float),(\'\',float)]\n    >>> sh = StringIO(s)\n    >>> data = np.genfromtxt(sh, delimiter="","", dtype=dt, names=True)\n    >>> data\n    array([ (\'2010-02-12\', 1075.95, 1077.8099999999999, 1062.97, 1075.51,\n    4160680000.0, 1075.51),\n          (\'2010-02-11\', 1067.0999999999999, 1080.04, 1060.5899999999999,\n    1078.47, 4400870000.0, 1078.47)],\n         dtype=[(\'Date\', \'|S10\'), (\'Open\', \'<f8\'), (\'High\', \'<f8\'),\n    (\'Low\', \'<f8\'), (\'Close\', \'<f8\'), (\'Volume\', \'<f8\'), (\'Adj_Close\',\n    \'<f8\')])\n    >>>\n\n'"
2025,7729280,thouis,thouis,2012-10-19 21:01:56,2012-10-23 02:43:13,2012-10-19 21:01:57,closed,,1.6.0,5,11 - Bug;component: Other;priority: normal,https://api.github.com/repos/numpy/numpy/issues/2025,"b""Memory leak caused by calling astype('float') on structured array of dtype 'object' (Trac #1427)""","b""_Original ticket http://projects.scipy.org/numpy/ticket/1427 on 2010-03-15 by trac user nathanielpeterson, assigned to unknown._\n\nThe attached code demonstrates the problem. My manner of monitoring memory usage is specific to Linux. Sorry, I don't know how to make it more general."""
2024,7729279,thouis,seberg,2012-10-19 21:01:54,2013-12-04 23:40:35,2013-12-04 23:40:35,closed,,NumPy 2.0,1,11 - Bug;component: numpy.core;priority: high,https://api.github.com/repos/numpy/numpy/issues/2024,b'subclasses of ndarray have problems with reflected operations in python 3 (Trac #1426)',"b""_Original ticket http://projects.scipy.org/numpy/ticket/1426 on 2010-03-11 by @ddale, assigned to unknown._\n\nQuoting a discussion on the mailing list, where Pauli V. explained the reasons for the reported behavior:\n\n>> Now that the trunk has some support for python3, I am working on making Quantities work with python3 as well. I'm running into some problems related to subclassing ndarray that can be illustrated with a simple script, reproduced below. It looks like there is a problem with the reflected operations, I see problems with __rmul__ and __radd__, but not with __mul__ and __add__:\n>\n>Thanks for testing. I wish the test suite was more complete (hint! hint! :)\n>\n>Yes, Python 3 introduced some semantic changes in how subclasses of builtin classes (= written in C) inherit the __r*__ operations.\n>\n>Below I'll try to explain what is going on. We probably need to change some things to make things work better on Py3, within the bounds we are able to.\n>\n>Suggestions are welcome. The most obvious one could be to explicitly implement __rmul__ etc. on Python 3.\n\n\n\n    import numpy as np\n    \n    class A(np.ndarray):\n        def __new__(cls, *args, **kwargs):\n            return np.ndarray.__new__(cls, *args, **kwargs)\n    \n    class B(A):\n        def __mul__(self, other):\n            return self.view(A).__mul__(other)\n        def __rmul__(self, other):\n            return self.view(A).__rmul__(other)\n        def __add__(self, other):\n            return self.view(A).__add__(other)\n        def __radd__(self, other):\n            return self.view(A).__radd__(other)\n    \n    a = A((10,))\n    b = B((10,))\n    \n    print('A __rmul__:')\n    print(a.__rmul__(2))\n    # yields NotImplemented\n    print(a.view(np.ndarray).__rmul__(2))\n    # yields NotImplemented\n\n\n\n>Correct. ndarray does not implement __rmul__, but relies on an automatic wrapper generated by Python.\n>\n>The automatic wrapper (wrap_binaryfunc_r) does the following:\n>\n>1. Is `type(other)` a subclass of `type(self)`? If yes, call __mul__ with swapped arguments.\n>2. If not, bail out with NotImplemented.\n>\n>So it bails out.\n>\n>Previously, the ndarray type had a flag that made Python to skip the subclass check. That does not exist any more on Python 3, and is the root of this issue.\n\n\n\n    print(2*a)\n    # ok !!??\n\n\n\n>Here, Python checks\n>\n>1. Does nb_multiply from the left op succeed? Nope, since floats don't know how to multiply ndarrays.\n>\n>2. Does nb_multiply from the right op succeed? Here the execution passes *directly* to array_multiply, completely skipping the __rmul__ wrapper.\n>\n>Note also that in the C-level number protocol there is only a single multiplication function for both left and right multiplication.\n>\n\n\n\n    print('B __rmul__:')\n    print(b.__rmul__(2))\n    # yields NotImplemented\n    print(b.view(A).__rmul__(2))\n    # yields NotImplemented\n    print(b.view(np.ndarray).__rmul__(2))\n    # yields NotImplemented\n    print(2*b)\n    # yields: TypeError: unsupported operand type(s) for *: 'int' and 'B'\n\n\n\n>But here, the subclass calls the wrapper ndarray.__rmul__, which wants to be careful with types, and hence fails.\n>\n>Yes, probably explicitly defining __rmul__ for ndarray could be the\n>right solution. Please file a bug report on this.\n\n"""
2023,7729276,thouis,thouis,2012-10-19 21:01:50,2012-10-23 02:43:10,2012-10-19 21:01:53,closed,,1.6.0,10,11 - Bug;component: numpy.core;priority: normal,https://api.github.com/repos/numpy/numpy/issues/2023,b'importing umath_tests and then CTRL-D crashes with core dump (Trac #1425)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/1425 on 2010-03-10 by @johannct, assigned to unknown._\n\n[cohen@jarrett core]$ python\n> Python 2.6.2 (r262:71600, Jan 25 2010, 18:46:45) [GCC 4.4.2 20091222\n> (Red Hat 4.4.2-20)] on linux2 Type ""help"", ""copyright"", ""credits"" or\n> ""license"" for more information.\n>  >>> import umath_tests\n>  >>>\n> python: Modules/gcmodule.c:277: visit_decref: Assertion `gc->gc.gc_refs\n> != 0\' failed.\n> Aborted (core dumped)\n> \n\nThis occurs on my Fedora 12 box with python 2.6.2 and numpy 2.0.0.dev8291'"
2022,7729275,thouis,thouis,2012-10-19 21:01:47,2012-10-19 21:01:49,2012-10-19 21:01:49,closed,,,2,11 - Bug;component: numpy.numarray;priority: highest,https://api.github.com/repos/numpy/numpy/issues/2022,b'Results of array.tofile and fromfile are different (Trac #1424)',"b""_Original ticket http://projects.scipy.org/numpy/ticket/1424 on 2010-03-07 by trac user HyunchulKim, assigned to unknown._\n\nHow to reproduce this bug.[[BR]]\n\n# Environment #[[BR]]\nPython 2.6.4 at Ubuntu 9.10[[BR]]\n\nI tested both of Ubuntu providing version and source compiled version.\nBoth of them give same error.[[BR]]\n\n#########\n\n\n\n    from numpy import *\n    \n    __ Regardless of specific array, it always give a false result. __\n    x = array([0,1,2,3])\n    x.tofile('test.output')\n    y = fromfile('test.output')\n    print x == y # The result is False\n    print y # The result is array([  4.24399158e-314,   8.48798317e-314])\n    \n    __ Interestingly, results of repeated tofile and fromfile give same results __\n    y.tofile('test.output2')\n    z = fromfile('test.output2')\n    print y == z # The result is True !!!\n    print z # The result is array([  4.24399158e-314,   8.48798317e-314])\n\n\n\n\n######################[[BR]]\n\n\n\n*** I believe that this is a must and urgent bug that give false results. ***\n\n\n"""
2021,7729273,thouis,thouis,2012-10-19 21:01:43,2012-10-19 21:01:45,2012-10-19 21:01:45,closed,,,2,11 - Bug;component: Other;priority: normal,https://api.github.com/repos/numpy/numpy/issues/2021,b'Error running: easy_install numpy (Trac #1423)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/1423 on 2010-03-05 by trac user rjain, assigned to unknown._\n\n(demoenv)jain@jain-desktop:/sandbox/demoenv$ easy_install numpy\nSearching for numpy\nReading http://pypi.python.org/simple/numpy/\nReading http://numpy.scipy.org\nReading http://sourceforge.net/project/showfiles.php?group_id=1369&package_id=175103\nReading http://numeric.scipy.org\nBest match: numpy 1.3.0\nDownloading http://sourceforge.net/projects/numpy/files/NumPy/1.3.0/numpy-1.3.0.zip/download\nProcessing download\nRunning numpy-1.3.0/setup.py -q bdist_egg --dist-dir /tmp/easy_install-zpQwWp/numpy-1.3.0/egg-dist-tmp-mmTb5S\nRunning from numpy source directory.\nnon-existing path in \'numpy/distutils\': \'site.cfg\'\n/tmp/easy_install-zpQwWp/numpy-1.3.0/numpy/distutils/command/config.py:361: DeprecationWarning: \n+++++++++++++++++++++++++++++++++++++++++++++++++\nUsage of get_output is deprecated: please do not \nuse it anymore, and avoid configuration checks \ninvolving running executable on the target machine.\n+++++++++++++++++++++++++++++++++++++++++++++++++\n\n  DeprecationWarning)\nFound executable /usr/bin/g77\ngnu: no Fortran 90 compiler found\ngnu: no Fortran 90 compiler found\ngnu: no Fortran 90 compiler found\ngnu: no Fortran 90 compiler found\ncompiling \'_configtest.c\':\n\n/* This file is generated from numpy/distutils/system_info.py */\nvoid ATL_buildinfo(void);\nint main(void) {\n  ATL_buildinfo();\n  return 0;\n}\n/usr/lib/gcc/x86_64-linux-gnu/4.2.4/../../../../lib/libf77blas.so: undefined reference to `_gfortran_st_write_done\'\n/usr/lib/gcc/x86_64-linux-gnu/4.2.4/../../../../lib/libf77blas.so: undefined reference to `_gfortran_transfer_integer\'\n/usr/lib/gcc/x86_64-linux-gnu/4.2.4/../../../../lib/libf77blas.so: undefined reference to `_gfortran_stop_numeric\'\n/usr/lib/gcc/x86_64-linux-gnu/4.2.4/../../../../lib/libf77blas.so: undefined reference to `_gfortran_st_write\'\n/usr/lib/gcc/x86_64-linux-gnu/4.2.4/../../../../lib/libf77blas.so: undefined reference to `_gfortran_transfer_character\'\ncollect2: ld returned 1 exit status\n/usr/lib/gcc/x86_64-linux-gnu/4.2.4/../../../../lib/libf77blas.so: undefined reference to `_gfortran_st_write_done\'\n/usr/lib/gcc/x86_64-linux-gnu/4.2.4/../../../../lib/libf77blas.so: undefined reference to `_gfortran_transfer_integer\'\n/usr/lib/gcc/x86_64-linux-gnu/4.2.4/../../../../lib/libf77blas.so: undefined reference to `_gfortran_stop_numeric\'\n/usr/lib/gcc/x86_64-linux-gnu/4.2.4/../../../../lib/libf77blas.so: undefined reference to `_gfortran_st_write\'\n/usr/lib/gcc/x86_64-linux-gnu/4.2.4/../../../../lib/libf77blas.so: undefined reference to `_gfortran_transfer_character\'\ncollect2: ld returned 1 exit status\ngnu: no Fortran 90 compiler found\ngnu: no Fortran 90 compiler found\ngnu: no Fortran 90 compiler found\ngnu: no Fortran 90 compiler found\ncompiling \'_configtest.c\':\n\n/* This file is generated from numpy/distutils/system_info.py */\nvoid ATL_buildinfo(void);\nint main(void) {\n  ATL_buildinfo();\n  return 0;\n}\nATLAS version 3.6.0 built by root on Thu Jun  3 21:13:07 UTC 2004:\n   UNAME    : Linux ravel 2.6.5 #3 SMP Tue Apr 13 13:41:54 UTC 2004 x86_64 GNU/Linux\n   INSTFLG  : \n   MMDEF    : /home/camm/atlas3-3.6.0/CONFIG/ARCHS/HAMMER64SSE2/gcc/gemm\n   ARCHDEF  : /home/camm/atlas3-3.6.0/CONFIG/ARCHS/HAMMER64SSE2/gcc/misc\n   F2CDEFS  : -DAdd__ -DStringSunStyle\n   CACHEEDGE: 720896\n   F77      : /home/camm/usr/bin/g77, version GNU Fortran (GCC) 3.3.3 (Debian 20040422)\n   F77FLAGS : -fomit-frame-pointer -O -m64\n   CC       : /usr/bin/gcc, version gcc (GCC) 3.3.3 (Debian 20040422)\n   CC FLAGS : -fomit-frame-pointer -O -mfpmath=387 -m64\n   MCC      : /usr/bin/gcc, version gcc (GCC) 3.3.3 (Debian 20040422)\n   MCCFLAGS : -fomit-frame-pointer -O -mfpmath=387 -m64\ngnu: no Fortran 90 compiler found\ngnu: no Fortran 90 compiler found\ngnu: no Fortran 90 compiler found\ngnu: no Fortran 90 compiler found\n_configtest.c:4: warning: function declaration isn\xa1\xaft a prototype\n_configtest.c:4: warning: function declaration isn\xa1\xaft a prototype\n_configtest.c:4: warning: function declaration isn\xa1\xaft a prototype\n_configtest.c:4: warning: function declaration isn\xa1\xaft a prototype\n_configtest.c:4: warning: function declaration isn\xa1\xaft a prototype\n_configtest.c:4: warning: function declaration isn\xa1\xaft a prototype\n_configtest.c:4: warning: function declaration isn\xa1\xaft a prototype\n_configtest.c:4: warning: function declaration isn\xa1\xaft a prototype\n_configtest.c:4: warning: function declaration isn\xa1\xaft a prototype\n_configtest.c:4: warning: function declaration isn\xa1\xaft a prototype\n_configtest.c:4: warning: function declaration isn\xa1\xaft a prototype\n_configtest.c:4: warning: function declaration isn\xa1\xaft a prototype\n_configtest.c: In function \xa1\xaemain\xa1\xaf:\n_configtest.c:5: error: size of array \xa1\xaetest_array\xa1\xaf is negative\n_configtest.c:4: warning: function declaration isn\xa1\xaft a prototype\n_configtest.c: In function \xa1\xaemain\xa1\xaf:\n_configtest.c:5: error: size of array \xa1\xaetest_array\xa1\xaf is negative\n_configtest.c:4: warning: function declaration isn\xa1\xaft a prototype\n_configtest.c: In function \xa1\xaemain\xa1\xaf:\n_configtest.c:5: error: size of array \xa1\xaetest_array\xa1\xaf is negative\n_configtest.c:4: warning: function declaration isn\xa1\xaft a prototype\n_configtest.c: In function \xa1\xaemain\xa1\xaf:\n_configtest.c:5: error: size of array \xa1\xaetest_array\xa1\xaf is negative\n_configtest.c:4: warning: function declaration isn\xa1\xaft a prototype\n_configtest.c:6: warning: function declaration isn\xa1\xaft a prototype\n_configtest.c:6: warning: function declaration isn\xa1\xaft a prototype\n_configtest.c: In function \xa1\xaemain\xa1\xaf:\n_configtest.c:7: error: size of array \xa1\xaetest_array\xa1\xaf is negative\n_configtest.c:6: warning: function declaration isn\xa1\xaft a prototype\n_configtest.c: In function \xa1\xaemain\xa1\xaf:\n_configtest.c:7: error: size of array \xa1\xaetest_array\xa1\xaf is negative\n_configtest.c:6: warning: function declaration isn\xa1\xaft a prototype\n_configtest.c:5: warning: function declaration isn\xa1\xaft a prototype\n_configtest.c:6: warning: function declaration isn\xa1\xaft a prototype\n_configtest.c:6: warning: function declaration isn\xa1\xaft a prototype\n_configtest.c:4: warning: function declaration isn\xa1\xaft a prototype\n_configtest.c:4: warning: function declaration isn\xa1\xaft a prototype\n_configtest.c:5: warning: function declaration isn\xa1\xaft a prototype\n/tmp/easy_install-zpQwWp/numpy-1.3.0/numpy/distutils/command/config.py:39: DeprecationWarning: \n+++++++++++++++++++++++++++++++++++++++++++++++++\nUsage of try_run is deprecated: please do not \nuse it anymore, and avoid configuration checks \ninvolving running executable on the target machine.\n+++++++++++++++++++++++++++++++++++++++++++++++++\n\n  DeprecationWarning)\n_configtest.o: In function `main\':\n/tmp/easy_install-zpQwWp/numpy-1.3.0/_configtest.c:5: undefined reference to `exp\'\ncollect2: ld returned 1 exit status\n_configtest.o: In function `main\':\n/tmp/easy_install-zpQwWp/numpy-1.3.0/_configtest.c:5: undefined reference to `exp\'\ncollect2: ld returned 1 exit status\n_configtest.c:1: warning: conflicting types for built-in function \xa1\xaeasin\xa1\xaf\n_configtest.c:2: warning: conflicting types for built-in function \xa1\xaecos\xa1\xaf\n_configtest.c:3: warning: conflicting types for built-in function \xa1\xaelog\xa1\xaf\n_configtest.c:4: warning: conflicting types for built-in function \xa1\xaefabs\xa1\xaf\n_configtest.c:5: warning: conflicting types for built-in function \xa1\xaetanh\xa1\xaf\n_configtest.c:6: warning: conflicting types for built-in function \xa1\xaeatan\xa1\xaf\n_configtest.c:7: warning: conflicting types for built-in function \xa1\xaeacos\xa1\xaf\n_configtest.c:8: warning: conflicting types for built-in function \xa1\xaefloor\xa1\xaf\n_configtest.c:9: warning: conflicting types for built-in function \xa1\xaefmod\xa1\xaf\n_configtest.c:10: warning: conflicting types for built-in function \xa1\xaesqrt\xa1\xaf\n_configtest.c:11: warning: conflicting types for built-in function \xa1\xaecosh\xa1\xaf\n_configtest.c:12: warning: conflicting types for built-in function \xa1\xaemodf\xa1\xaf\n_configtest.c:13: warning: conflicting types for built-in function \xa1\xaesinh\xa1\xaf\n_configtest.c:14: warning: conflicting types for built-in function \xa1\xaefrexp\xa1\xaf\n_configtest.c:15: warning: conflicting types for built-in function \xa1\xaeexp\xa1\xaf\n_configtest.c:16: warning: conflicting types for built-in function \xa1\xaetan\xa1\xaf\n_configtest.c:17: warning: conflicting types for built-in function \xa1\xaeceil\xa1\xaf\n_configtest.c:18: warning: conflicting types for built-in function \xa1\xaelog10\xa1\xaf\n_configtest.c:19: warning: conflicting types for built-in function \xa1\xaesin\xa1\xaf\n_configtest.c:20: warning: conflicting types for built-in function \xa1\xaeldexp\xa1\xaf\n_configtest.c:1: warning: conflicting types for built-in function \xa1\xaeexpm1\xa1\xaf\n_configtest.c:2: warning: conflicting types for built-in function \xa1\xaelog2\xa1\xaf\n_configtest.c:3: warning: conflicting types for built-in function \xa1\xaerint\xa1\xaf\n_configtest.c:4: warning: conflicting types for built-in function \xa1\xaeatanh\xa1\xaf\n_configtest.c:5: warning: conflicting types for built-in function \xa1\xaeasinh\xa1\xaf\n_configtest.c:6: warning: conflicting types for built-in function \xa1\xaeacosh\xa1\xaf\n_configtest.c:7: warning: conflicting types for built-in function \xa1\xaeexp2\xa1\xaf\n_configtest.c:8: warning: conflicting types for built-in function \xa1\xaelog1p\xa1\xaf\n_configtest.c:9: warning: conflicting types for built-in function \xa1\xaetrunc\xa1\xaf\n_configtest.c:1: warning: conflicting types for built-in function \xa1\xaecosf\xa1\xaf\n_configtest.c:2: warning: conflicting types for built-in function \xa1\xaecoshf\xa1\xaf\n_configtest.c:3: warning: conflicting types for built-in function \xa1\xaerintf\xa1\xaf\n_configtest.c:4: warning: conflicting types for built-in function \xa1\xaefabsf\xa1\xaf\n_configtest.c:5: warning: conflicting types for built-in function \xa1\xaefloorf\xa1\xaf\n_configtest.c:6: warning: conflicting types for built-in function \xa1\xaetanhf\xa1\xaf\n_configtest.c:7: warning: conflicting types for built-in function \xa1\xaelog10f\xa1\xaf\n_configtest.c:8: warning: conflicting types for built-in function \xa1\xaelogf\xa1\xaf\n_configtest.c:9: warning: conflicting types for built-in function \xa1\xaesinhf\xa1\xaf\n_configtest.c:10: warning: conflicting types for built-in function \xa1\xaeacosf\xa1\xaf\n_configtest.c:11: warning: conflicting types for built-in function \xa1\xaesqrtf\xa1\xaf\n_configtest.c:12: warning: conflicting types for built-in function \xa1\xaeldexpf\xa1\xaf\n_configtest.c:13: warning: conflicting types for built-in function \xa1\xaehypotf\xa1\xaf\n_configtest.c:14: warning: conflicting types for built-in function \xa1\xaelog2f\xa1\xaf\n_configtest.c:15: warning: conflicting types for built-in function \xa1\xaeexp2f\xa1\xaf\n_configtest.c:16: warning: conflicting types for built-in function \xa1\xaeatanf\xa1\xaf\n_configtest.c:17: warning: conflicting types for built-in function \xa1\xaefmodf\xa1\xaf\n_configtest.c:18: warning: conflicting types for built-in function \xa1\xaeatan2f\xa1\xaf\n_configtest.c:19: warning: conflicting types for built-in function \xa1\xaemodff\xa1\xaf\n_configtest.c:20: warning: conflicting types for built-in function \xa1\xaeceilf\xa1\xaf\n_configtest.c:21: warning: conflicting types for built-in function \xa1\xaelog1pf\xa1\xaf\n_configtest.c:22: warning: conflicting types for built-in function \xa1\xaeasinf\xa1\xaf\n_configtest.c:23: warning: conflicting types for built-in function \xa1\xaeacoshf\xa1\xaf\n_configtest.c:24: warning: conflicting types for built-in function \xa1\xaesinf\xa1\xaf\n_configtest.c:25: warning: conflicting types for built-in function \xa1\xaetanf\xa1\xaf\n_configtest.c:26: warning: conflicting types for built-in function \xa1\xaeatanhf\xa1\xaf\n_configtest.c:27: warning: conflicting types for built-in function \xa1\xaetruncf\xa1\xaf\n_configtest.c:28: warning: conflicting types for built-in function \xa1\xaeasinhf\xa1\xaf\n_configtest.c:29: warning: conflicting types for built-in function \xa1\xaefrexpf\xa1\xaf\n_configtest.c:30: warning: conflicting types for built-in function \xa1\xaepowf\xa1\xaf\n_configtest.c:31: warning: conflicting types for built-in function \xa1\xaeexpf\xa1\xaf\n_configtest.c:32: warning: conflicting types for built-in function \xa1\xaeexpm1f\xa1\xaf\n_configtest.c:1: warning: conflicting types for built-in function \xa1\xaetanhl\xa1\xaf\n_configtest.c:2: warning: conflicting types for built-in function \xa1\xaelog10l\xa1\xaf\n_configtest.c:3: warning: conflicting types for built-in function \xa1\xaecoshl\xa1\xaf\n_configtest.c:4: warning: conflicting types for built-in function \xa1\xaecosl\xa1\xaf\n_configtest.c:5: warning: conflicting types for built-in function \xa1\xaefloorl\xa1\xaf\n_configtest.c:6: warning: conflicting types for built-in function \xa1\xaerintl\xa1\xaf\n_configtest.c:7: warning: conflicting types for built-in function \xa1\xaefabsl\xa1\xaf\n_configtest.c:8: warning: conflicting types for built-in function \xa1\xaeacosl\xa1\xaf\n_configtest.c:9: warning: conflicting types for built-in function \xa1\xaeldexpl\xa1\xaf\n_configtest.c:10: warning: conflicting types for built-in function \xa1\xaesqrtl\xa1\xaf\n_configtest.c:11: warning: conflicting types for built-in function \xa1\xaelogl\xa1\xaf\n_configtest.c:12: warning: conflicting types for built-in function \xa1\xaeexpm1l\xa1\xaf\n_configtest.c:13: warning: conflicting types for built-in function \xa1\xaehypotl\xa1\xaf\n_configtest.c:14: warning: conflicting types for built-in function \xa1\xaelog2l\xa1\xaf\n_configtest.c:15: warning: conflicting types for built-in function \xa1\xaeexp2l\xa1\xaf\n_configtest.c:16: warning: conflicting types for built-in function \xa1\xaeatanl\xa1\xaf\n_configtest.c:17: warning: conflicting types for built-in function \xa1\xaefrexpl\xa1\xaf\n_configtest.c:18: warning: conflicting types for built-in function \xa1\xaeatan2l\xa1\xaf\n_configtest.c:19: warning: conflicting types for built-in function \xa1\xaesinhl\xa1\xaf\n_configtest.c:20: warning: conflicting types for built-in function \xa1\xaefmodl\xa1\xaf\n_configtest.c:21: warning: conflicting types for built-in function \xa1\xaelog1pl\xa1\xaf\n_configtest.c:22: warning: conflicting types for built-in function \xa1\xaeasinl\xa1\xaf\n_configtest.c:23: warning: conflicting types for built-in function \xa1\xaeceill\xa1\xaf\n_configtest.c:24: warning: conflicting types for built-in function \xa1\xaesinl\xa1\xaf\n_configtest.c:25: warning: conflicting types for built-in function \xa1\xaeacoshl\xa1\xaf\n_configtest.c:26: warning: conflicting types for built-in function \xa1\xaeatanhl\xa1\xaf\n_configtest.c:27: warning: conflicting types for built-in function \xa1\xaetanl\xa1\xaf\n_configtest.c:28: warning: conflicting types for built-in function \xa1\xaetruncl\xa1\xaf\n_configtest.c:29: warning: conflicting types for built-in function \xa1\xaepowl\xa1\xaf\n_configtest.c:30: warning: conflicting types for built-in function \xa1\xaeexpl\xa1\xaf\n_configtest.c:31: warning: conflicting types for built-in function \xa1\xaemodfl\xa1\xaf\n_configtest.c:32: warning: conflicting types for built-in function \xa1\xaeasinhl\xa1\xaf\n_configtest.c:6: warning: function declaration isn\xa1\xaft a prototype\n_configtest.c:6: warning: function declaration isn\xa1\xaft a prototype\n_configtest.c:6: warning: function declaration isn\xa1\xaft a prototype\n_configtest.c:6: warning: function declaration isn\xa1\xaft a prototype\nFile: build/src.linux-x86_64-2.5/numpy/core/include/numpy/config.h\n#define SIZEOF_SHORT 2\n#define SIZEOF_INT 4\n#define SIZEOF_LONG 8\n#define SIZEOF_FLOAT 4\n#define SIZEOF_DOUBLE 8\n#define SIZEOF_PY_INTPTR_T 8\n#define SIZEOF_PY_LONG_LONG 8\n#define MATHLIB m\n#define HAVE_SIN\n#define HAVE_COS\n#define HAVE_TAN\n#define HAVE_SINH\n#define HAVE_COSH\n#define HAVE_TANH\n#define HAVE_FABS\n#define HAVE_FLOOR\n#define HAVE_CEIL\n#define HAVE_SQRT\n#define HAVE_LOG10\n#define HAVE_LOG\n#define HAVE_EXP\n#define HAVE_ASIN\n#define HAVE_ACOS\n#define HAVE_ATAN\n#define HAVE_FMOD\n#define HAVE_MODF\n#define HAVE_FREXP\n#define HAVE_LDEXP\n#define HAVE_EXPM1\n#define HAVE_LOG1P\n#define HAVE_ACOSH\n#define HAVE_ASINH\n#define HAVE_ATANH\n#define HAVE_RINT\n#define HAVE_TRUNC\n#define HAVE_EXP2\n#define HAVE_LOG2\n#define HAVE_SINF\n#define HAVE_COSF\n#define HAVE_TANF\n#define HAVE_SINHF\n#define HAVE_COSHF\n#define HAVE_TANHF\n#define HAVE_FABSF\n#define HAVE_FLOORF\n#define HAVE_CEILF\n#define HAVE_RINTF\n#define HAVE_TRUNCF\n#define HAVE_SQRTF\n#define HAVE_LOG10F\n#define HAVE_LOGF\n#define HAVE_LOG1PF\n#define HAVE_EXPF\n#define HAVE_EXPM1F\n#define HAVE_ASINF\n#define HAVE_ACOSF\n#define HAVE_ATANF\n#define HAVE_ASINHF\n#define HAVE_ACOSHF\n#define HAVE_ATANHF\n#define HAVE_HYPOTF\n#define HAVE_ATAN2F\n#define HAVE_POWF\n#define HAVE_FMODF\n#define HAVE_MODFF\n#define HAVE_FREXPF\n#define HAVE_LDEXPF\n#define HAVE_EXP2F\n#define HAVE_LOG2F\n#define HAVE_SINL\n#define HAVE_COSL\n#define HAVE_TANL\n#define HAVE_SINHL\n#define HAVE_COSHL\n#define HAVE_TANHL\n#define HAVE_FABSL\n#define HAVE_FLOORL\n#define HAVE_CEILL\n#define HAVE_RINTL\n#define HAVE_TRUNCL\n#define HAVE_SQRTL\n#define HAVE_LOG10L\n#define HAVE_LOGL\n#define HAVE_LOG1PL\n#define HAVE_EXPL\n#define HAVE_EXPM1L\n#define HAVE_ASINL\n#define HAVE_ACOSL\n#define HAVE_ATANL\n#define HAVE_ASINHL\n#define HAVE_ACOSHL\n#define HAVE_ATANHL\n#define HAVE_HYPOTL\n#define HAVE_ATAN2L\n#define HAVE_POWL\n#define HAVE_FMODL\n#define HAVE_MODFL\n#define HAVE_FREXPL\n#define HAVE_LDEXPL\n#define HAVE_EXP2L\n#define HAVE_LOG2L\n#define HAVE_DECL_ISNAN\n#define HAVE_DECL_ISINF\n#define HAVE_DECL_SIGNBIT\n#define HAVE_DECL_ISFINITE\n#ifndef __cplusplus\n/* #undef inline */\n#endif\n\nEOF\n_configtest.c:5: warning: function declaration isn\xa1\xaft a prototype\nFile: build/src.linux-x86_64-2.5/numpy/core/include/numpy/numpyconfig.h\n#define NPY_SIZEOF_SHORT 2\n#define NPY_SIZEOF_INT 4\n#define NPY_SIZEOF_LONG 8\n#define NPY_SIZEOF_FLOAT 4\n#define NPY_SIZEOF_DOUBLE 8\n#define NPY_SIZEOF_LONGDOUBLE 16\n#define NPY_SIZEOF_PY_INTPTR_T 8\n#define NPY_SIZEOF_PY_LONG_LONG 8\n#define NPY_SIZEOF_LONGLONG 8\n#define NPY_NO_SMP 0\n#define NPY_HAVE_DECL_ISNAN\n#define NPY_HAVE_DECL_ISINF\n#define NPY_HAVE_DECL_SIGNBIT\n#define NPY_HAVE_DECL_ISFINITE\n#define NPY_USE_C99_FORMATS 1\n#define NPY_INLINE inline\n\n#ifndef __STDC_FORMAT_MACROS\n#define __STDC_FORMAT_MACROS 1\n#endif\n\nEOF\ngnu: no Fortran 90 compiler found\ngnu: no Fortran 90 compiler found\ngnu: no Fortran 90 compiler found\ngnu: no Fortran 90 compiler found\nzip_safe flag not set; analyzing archive contents...\nnumpy._import_tools: module references __file__\nnumpy._import_tools: module references __path__\nnumpy.version: module references __file__\nnumpy.core.scons_support: module references __file__\nnumpy.core.setup: module references __file__\nnumpy.core.generate_numpy_api: module references __file__\nnumpy.doc.__init__: module references __file__\nnumpy.ma.core: module MAY be using inspect.trace\nnumpy.numarray.util: module references __file__\nnumpy.distutils.system_info: module references __file__\nnumpy.distutils.exec_command: module references __file__\nnumpy.distutils.misc_util: module references __file__\nnumpy.distutils.fcompiler.compaq: module references __file__\nnumpy.distutils.fcompiler.__init__: module references __file__\nnumpy.distutils.command.build_src: module references __file__\nnumpy.distutils.command.scons: module references __file__\nnumpy.lib.utils: module references __file__\nnumpy.lib.utils: module references __path__\nnumpy.lib.utils: module MAY be using inspect.getsource\nnumpy.lib.utils: module MAY be using inspect.getsourcefile\nnumpy.testing.numpytest: module references __file__\nnumpy.testing.utils: module references __file__\nnumpy.testing.noseclasses: module references __file__\nnumpy.testing.nosetester: module references __file__\nnumpy.f2py.setup: module references __file__\nnumpy.f2py.f2py2e: module references __file__\nnumpy.f2py.setupscons: module references __file__\nnumpy.f2py.diagnose: module references __file__\nAdding numpy 1.3.0 to easy-install.pth file\nInstalling f2py script to /sandbox/demoenv/bin\n\nInstalled /sandbox/demoenv/lib/python2.5/site-packages/numpy-1.3.0-py2.5-linux-x86_64.egg\nProcessing dependencies for numpy\nFinished processing dependencies for numpy\nError in atexit._run_exitfuncs:\nTraceback (most recent call last):\n  File ""/usr/lib/python2.5/atexit.py"", line 24, in _run_exitfuncs\n    func(*targs, **kargs)\n  File ""/tmp/easy_install-zpQwWp/numpy-1.3.0/numpy/distutils/misc_util.py"", line 219, in clean_up_temporary_directory\nSystemError: Parent module \'numpy.distutils\' not loaded\nError in sys.exitfunc:\nTraceback (most recent call last):\n  File ""/usr/lib/python2.5/atexit.py"", line 24, in _run_exitfuncs\n    func(*targs, **kargs)\n  File ""/tmp/easy_install-zpQwWp/numpy-1.3.0/numpy/distutils/misc_util.py"", line 219, in clean_up_temporary_directory\nSystemError: Parent module \'numpy.distutils\' not loaded\n'"
2020,7729269,thouis,thouis,2012-10-19 21:01:39,2012-10-19 21:01:41,2012-10-19 21:01:41,closed,,,3,11 - Bug;component: numpy.ma;priority: high,https://api.github.com/repos/numpy/numpy/issues/2020,"b""ma._extrema_operation subclasses' reduce method raise ValueError... (Trac #1422)""","b'_Original ticket http://projects.scipy.org/numpy/ticket/1422 on 2010-03-05 by trac user dgoldsmith, assigned to @pierregm._\n\n...if passed zero-size array.\n\n\n    >>> mn = numpy.ma.core._minimum_operation()\n    >>> mn.reduce(N.array(()))\n    Traceback (most recent call last):\n      File ""<input>"", line 1, in <module>\n      File ""C:\\Python254\\Lib\\site-packages\\numpy\\ma\\core.py"", line 5570, in reduce\n        t = self.ufunc.reduce(target, **kargs)\n    ValueError: zero-size array to ufunc.reduce without identity\n\n\n\nNotes:\n\n0) Problem discovered via a call from matplotlib.imshow; here\'s that traceback:\n\n\n    Traceback (most recent call last):\n     File ""<my_code.py>"", line 108, in <module>\n    ax.imshow(part2plot, cmap_name, extent = extent)\n     File ""C:\\Python254\\lib\\site-packages\\matplotlib\\axes.py"", line 6261, in imshow\n    im.autoscale_None()\n     File ""C:\\Python254\\lib\\site-packages\\matplotlib\\cm.py"", line 236, in autoscale_None\n    self.norm.autoscale_None(self._A)\n     File ""C:\\Python254\\lib\\site-packages\\matplotlib\\colors.py"", line 792, in autoscale_None\n    if self.vmin is None: self.vmin = ma.minimum(A)\n     File ""C:\\Python254\\Lib\\site-packages\\numpy\\ma\\core.py"", line 5555, in __call__\n    return self.reduce(a)\n     File ""C:\\Python254\\Lib\\site-packages\\numpy\\ma\\core.py"", line 5570, in reduce\n    t = self.ufunc.reduce(target, **kargs)\n    ValueError: zero-size array to ufunc.reduce without identity\n    Script terminated.\n\n\n1) Platform details: numpy 1.4.0, MPL 0.99.0, python 2.5.4, 32 bit Vista Home Premium SP2'"
2019,7729268,thouis,charris,2012-10-19 21:01:37,2013-06-16 01:00:26,2013-06-16 01:00:26,closed,,,3,11 - Bug;component: numpy.ma;priority: low,https://api.github.com/repos/numpy/numpy/issues/2019,"b'Why does np.nan{min, max} clobber my array mask? (Trac #1421)'","b""_Original ticket http://projects.scipy.org/numpy/ticket/1421 on 2010-03-05 by @bsouthey, assigned to @pierregm._\n\nDavid Carmean provided the following to the numpy list: \nWhy does np.nan{min, max} clobber my array mask?\n\n[http://mail.scipy.org/pipermail/numpy-discussion/2010-February/048628.html]\n\nThe following code reproduces it under Linux Python2.6 with numpy version '2.0.0.dev8272'.\n\n\n    import numpy as np\n    from numpy.ma.testutils import *\n    uut = np.array([[2, 1, 3, np.nan], [5, 2, 3, np.nan]])\n    msk = np.ma.masked_invalid(uut)\n    oldmsk=msk.copy()\n    mvalue=np.nanmin(msk, axis=1)\n    assert_array_equal(msk.mask, oldmsk.mask)\n\n\n\n\n"""
2018,7729267,thouis,seberg,2012-10-19 21:01:36,2013-12-04 23:21:46,2013-12-04 23:21:46,closed,,,1,11 - Bug;component: numpy.fft;priority: normal,https://api.github.com/repos/numpy/numpy/issues/2018,b'irfft2 handles axes argument improperly (Trac #1420)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/1420 on 2010-03-04 by trac user sivaldimarsson, assigned to unknown._\n\nThe following output of an interactive session shows how numpy.fft.irfft handles axes argument badly. The workaround is to use irfftn with a shape argument as shown.\n\nsiv@siv-desktop:~/Documents$ ipython\n\nPython 2.6.4 (r264:75706, Dec  7 2009, 18:43:55)         \nType ""copyright"", ""credits"" or ""license"" for more information.\n\nIPython 0.10 -- An enhanced Interactive Python.\n?         -> Introduction and overview of IPython\'s features.\n%quickref -> Quick reference.                                \nhelp      -> Python\'s own help system.                       \nobject?   -> Details about \'object\'. ?object also works, ?? prints more.\n\nIn [1]: import numpy as np\n\nIn [3]: import numpy.fft as npfft\n\nIn [4]: a = np.zeros((256,256))\n\nIn [5]: a.shape\n\nOut[5]: (256, 256)\n\nIn [9]: a[0:10,0:100] = 1\n\nIn [11]: ahat = npfft.rfft2(a,axes=(1,0))\n\nIn [12]: ahat.shape\n\nOut[12]: (129, 256)\n\nIn [14]: ahatinvhat = npfft.irfft2(ahat,axes=(1,0))\n\nIn [15]: ahatinvhat.shape\n\nOut[15]: (129, 510)      \n\nIn [16]: ahatinvhat - a\n\nValueError                   Traceback (most recent call last)\n\n/home/siv/Documents/<ipython console> in <module>()\n\nValueError: shape mismatch: objects cannot be broadcast to a single shape\n\nIn [22]: chat = npfft.rfftn(a,s=a.shape,axes=(1,0))\n\nIn [23]: chat.shape\n\nOut[23]: (129, 256)\n\nIn [24]: np.max(np.abs(ahat-chat))\n\nOut[24]: 0.0\n\nIn [25]: chatinvhat = npfft.irfftn(chat,s=a.shape,axes=(1,0))\n\nIn [26]: chatinvhat.shape\n\nOut[26]: (256, 256)\n\nIn [27]: np.max(np.abs(a-chatinvhat))\n\nOut[27]: 6.6613381477509392e-16'"
2017,7729263,thouis,charris,2012-10-19 21:01:34,2014-02-19 00:41:26,2014-02-19 00:41:26,closed,,,4,11 - Bug;component: numpy.distutils;priority: normal,https://api.github.com/repos/numpy/numpy/issues/2017,b'Building Numpy / Scipy on AIX system (Trac #1419)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/1419 on 2010-03-02 by trac user A_LARAS, assigned to unknown._\n\nHi,[[BR]]\nI wounder if somebody have success to build Numpy/Scipy on AIX system with any of the IBM compilers (XLC, XLF) or Gnu gcc, g++[[BR]]\nI have lot of issues make it installed on AIX 5.3, 64 bits machine[[BR]]\n\n\nvac 8.0[[BR]]\nxlf 10.1[[BR]]\ngcc-4.2.4-2[[BR]]\nAIX 5.3[[BR]]\n\n\n'"
2015,7729257,thouis,charris,2012-10-19 21:01:31,2014-12-12 20:24:45,2014-12-12 20:24:45,closed,,,6,11 - Bug;component: numpy.matrixlib;Easy Fix;priority: normal,https://api.github.com/repos/numpy/numpy/issues/2015,b'diag returns ndarray (Trac #1417)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/1417 on 2010-02-28 by trac user uhrm, assigned to @pierregm._\n\nWhen called with a `matrix` object, `diag` return an `ndarray`.\n\nExample:\n\n\n\n    >>> B = numpy.matrix(""1.7 2.2 0.3; 1.2 0.2 0.0; 1.0 1.0 0.7; 0.3 0.3 0.2"")\n    >>> B\n    matrix([[ 1.7,  2.2,  0.3],\n            [ 1.2,  0.2,  0. ],\n            [ 1. ,  1. ,  0.7],\n            [ 0.3,  0.3,  0.2]])\n    >>> d = numpy.diag(B)\n    >>> d\n    array([ 1.7,  0.2,  0.7])\n\n\n\nIf I understand correctly, the return type should also be a `matrix`. Since `matrix` is always 2 dimensional, question is whether it\'s a column or row vector (I\'d prefer a column vector).'"
2014,7729256,thouis,charris,2012-10-19 21:01:29,2015-05-03 15:20:52,2015-05-03 15:20:52,closed,,,5,11 - Bug;component: numpy.core;priority: normal,https://api.github.com/repos/numpy/numpy/issues/2014,b'functions returned by frompyfunc() cause segmentation faults (Trac #1416)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/1416 on 2010-02-28 by trac user ernest_ac, assigned to unknown._\n\nWhen called with a last argument equal to zero, frompyfunc produces a function that segfaults on execution. Example:\n\n\n\n    In [3]: f = np.frompyfunc(lambda x: x, 1, 0)\n    In [4]: f([1,2,3])\n    <segmentation fault>\n\n\n\nObserved in Numpy 1.3.0 and in more recent versions.\n'"
2013,7729255,thouis,thouis,2012-10-19 21:01:27,2012-10-23 02:43:00,2012-10-19 21:01:28,closed,,,1,11 - Bug;component: numpy.core;priority: high,https://api.github.com/repos/numpy/numpy/issues/2013,b'data corruption unpickling a numpy.void (Trac #1415)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/1415 on 2010-02-27 by trac user mspacek, assigned to unknown._\n\nSee thread at http://article.gmane.org/gmane.comp.python.numeric.general/36611\n\nPickling and then unpickling an entry of <type \'numpy.void\'> or <type \'numpy.record\'> from a structured array or recarray results in data corruption on the round trip:\n\n\n\n    >>> import numpy as np\n    >>> x = np.zeros((2,), dtype=(\'i4,f4,a10\'))\n    >>> x[:] = [(1,2.,\'Hello\'), (2,3.,""World"")]\n    >>> x\n    array([(1, 2.0, \'Hello\'), (2, 3.0, \'World\')],\n           dtype=[(\'f0\', \'<i4\'), (\'f1\', \'<f4\'), (\'f2\', \'|S10\')])\n    >>> x[0]\n    (1, 2.0, \'Hello\')\n    >>> type(x[0])\n    <type \'numpy.void\'>\n    >>> import pickle\n    >>> s = pickle.dumps(x[0])\n    >>> newx0 = pickle.loads(s)\n    >>> newx0\n    (30917960, 1.6904535998413144e-38, \'\\xd0\\xef\\x1c\\x1eZ\\x03\\x00d\')\n    >>> s\n    ""cnumpy.core.multiarray\\nscalar\\np0\\n(cnumpy\\ndtype\\np1\\n(S\'V18\'\n    \\np2\\nI0\\nI1\\ntp3\\nRp4\\n(I4\\nS\'|\'\\np5\\nN(S\'f0\'\\np6\\nS\'f1\'\\np7\\nS\'f2\'\n    \\np8\\ntp9\\n(dp10\\ng6\\n(g1\\n(S\'i4\'\\np11\\nI0\\nI1\\ntp12\\nRp13\n    \\n(I4\\nS\'<\'\\np14\\nNNNI-1\\nI-1\\nI0\\nNtp15\\nbI0\\ntp16\\nsg7\\n(g1\n    \\n(S\'f4\'\\np17\\nI0\\nI1\\ntp18\\nRp19\\n(I4\\nS\'<\'\\np20\\nNNNI-1\\nI-1\n    \\nI0\\nNtp21\\nbI4\\ntp22\\nsg8\\n(g1\\n(S\'S10\'\\np23\\nI0\\nI1\\ntp24\\nRp25\n    \\n(I4\\nS\'|\'\\np26\\nNNNI10\\nI1\\nI0\\nNtp27\\nbI8\\ntp28\\nsI18\\nI1\\nI0\n    \\nNtp29\\nbS\'\\\\x01\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00@Hello\\\\x00\\\\x00\n    \\\\x00\\\\x00\\\\x00\'\\np30\\ntp31\\nRp32\\n.""\n    >>> type(newx0)\n    <type \'numpy.void\'>\n    >>> newx0.dtype\n    dtype([(\'f0\', \'<i4\'), (\'f1\', \'<f4\'), (\'f2\', \'|S10\')])\n    >>> x[0].dtype\n    dtype([(\'f0\', \'<i4\'), (\'f1\', \'<f4\'), (\'f2\', \'|S10\')])\n    >>> np.version.version\n    \'1.4.0\'\n\n\n\nIt seems that the pickling works fine, but there\'s corruption on unpickling.\n\nRobert Kern says: ""The implementation of numpy.core.multiarray.scalar is doing something wrong.""\n\nPauli Virtanen says: ""The relevant code path to look at is multiarraymodule:array_scalar -> scalarapi.c:PyArray_Scalar. Needs some cgdb\'ing to find out what\'s going on there.""\n\nA nice temporary workaround is to convert the original structured array ""x"" into a list of scalar arrays, each of whose entries then pickle/unpickle correctly, and still allow dict-style named field access:\n\n\n\n    >>> x2 = map(np.asarray, x)\n\n'"
2012,7729253,thouis,charris,2012-10-19 21:01:26,2014-05-09 23:48:20,2014-05-09 23:48:20,closed,,,15,11 - Bug;component: numpy.random;Easy Fix;priority: normal,https://api.github.com/repos/numpy/numpy/issues/2012,b'Possible mistake in distribution.c::rk_binomial_btpe (Trac #1414)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/1414 on 2010-02-26 by trac user batz900, assigned to unknown._\n\nI believe there is a small type in rk_binomial_btpe in distribution.c.  On line 337 there is an else, but in the ""Binomial Random Variate Generation"" by Kachitvichyanukul And Schmeiser their Step 5.1 ends the if/else if block before the testing of the\nif(v > F) goto Step10;\ngoto Step60;\n(basically, I believe the else enclosure should be deleted at the end of the Step50 section).\nAlso I have a cleaner version written (without goto) if you\'re interested.'"
2010,7729249,thouis,thouis,2012-10-19 21:01:21,2012-10-23 02:42:59,2012-10-19 21:01:22,closed,,1.5.1,1,11 - Bug;component: numpy.distutils;priority: normal,https://api.github.com/repos/numpy/numpy/issues/2010,b'Build scipy on IBM AIX with --fcompiler=gnu95 (Trac #1412)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/1412 on 2010-02-25 by trac user A_LARAS, assigned to @cournape._\n\nHi There[[BR]]\n\nI\'m trying to build scipy from the trunk (latest release):[[BR]]\npython setup.py config_fc --fcompiler=gnu95 install --prefix=/usr/local/python[[BR]]\nbut stuck with the following error :[[BR]]\nC compiler: c++_r -qlanglvl=extc89 -DNDEBUG -O[[BR]]\n\ncompile options: \'-Iscipy/interpolate/src -I/usr/local/python/lib/python2.4/site-packages/numpy/core/include -I/usr/local/python/include/python2.4 -c\'[[BR]]\nc++_r: scipy/interpolate/src/_interpolate.cpp[[BR]]\nsh: c++_r:  not found.[[BR]]\nsh: c++_r:  not found.[[BR]]\nerror: Command ""c++_r -qlanglvl=extc89 -DNDEBUG -O -Iscipy/interpolate/src -I/usr/local/python/lib/python2.4/site-packages/numpy/core/include -I/usr/local/python/include/python2.4 -c scipy/interpolate/src/_interpolate.cpp -o build/temp.aix-5.3-2.4/scipy/interpolate/src/_interpolate.o"" failed with exit status 127[[BR]]\n\nwhith export CXX=""c++"", I hit another error (syntax error)[[BR]]\nc++ c++ -qlanglvl=extc89 -bI:/usr/local/Python.2.4/lib/python2.4/config/python.exp build/temp.aix-5.3-2.4/scipy/interpolate/src/_interpolate.o -Lbuild/temp.aix-5.3-2.4 -o build/lib.aix-5.3-2.4/scipy/interpolate/_interpolate.so[[BR]]\nc++: c++: No such file or directory[[BR]]\nc++: unrecognized option \'-qlanglvl=extc89\'[[BR]]\nc++: unrecognized option \'-bI:/usr/local/Python.2.4/lib/python2.4/config/python.exp\'[[BR]]\nerror: Command ""c++ c++ -qlanglvl=extc89 -bI:/usr/local/Python.2.4/lib/python2.4/config/python.exp build/temp.aix-5.3-2.4/scipy/interpolate/src/_interpolate.o -Lbuild/temp.aix-5.3-2.4 -o build/lib.aix-5.3-2.4/scipy/interpolate/_interpolate.so"" failed with exit status 1[[BR]]\n\n\nthe second ""c++"" is passed as an options to CXX compiler, and I don\'t know how to get rid of this.[[BR]]\n\n\n\nOS: AIX 5.3  64 bits[[BR]]\nCC: gcc (GCC) 4.2.4[[BR]]\nCXX: c++ (GCC) 4.2.4[[BR]]\nPython: Python 2.4 (#2, Dec 20 2004, 10:36:59) [C] on aix4[[BR]]\nNumpy: 1.4[[BR]]\n\n\n\n\n\n\n'"
2009,7729247,thouis,thouis,2012-10-19 21:01:19,2012-10-19 21:01:20,2012-10-19 21:01:20,closed,,,3,11 - Bug;component: numpy.core;priority: lowest,https://api.github.com/repos/numpy/numpy/issues/2009,b'Array reshape bug [obsolete] (Trac #1411)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/1411 on 2010-02-25 by trac user Han, assigned to unknown._\n\n(See also: http://bugs.python.org/issue6562 -- might be related?)\n\nWhen reshaping a flat ndarray with a (mistaken) 64-bits long, an OverflowError will be generated in the C layer, but not propagated \nto the Python layer. This error can then be caught later on, in a totally unrelated piece of code.\n\n\n\n    >>> from __future__ import with_statement\n    >>> import sys; sys.version\n    \'2.5.1 (r251:54863, Apr 18 2007, 08:51:08) [MSC v.1310 32 bit  Intel)]\'\n    >>> import threading\n    >>> import numpy as np\n    >>> # needing this to reproduce the error, but it can\n    ... # also be reproduced in other ways\n    ... lock = threading.RLock()\n    >>> # creating a flat array\n    ... arr = np.arange(10)\n    >>> # reshaping the array, but mistakenly using a 64-bit integer\n    ... arr_shaped = arr.reshape(1<<63)\n    >>> # all seems to go well up to this point..\n    ... with lock:\n    ...     print ""done!""\n    ...\n    C:\\Python25\\lib\\threading.py:697: RuntimeWarning: tp_compare didn\'t return -1 or\n     -2 for exception\n    Traceback (most recent call last):\n      File ""<stdin>"", line 2, in <module>\n      File ""c:\\python25\\lib\\threading.py"", line 94, in acquire\n        me = currentThread()\n      File ""c:\\python25\\lib\\threading.py"", line 697, in currentThread\n        return _active[_get_ident()]\n    OverflowError: long int too large to convert to int \n\n\n\nOther ways to reproduce the OverflowError after creating arr_shaped:\n\n\n\n    >>> print arr_shaped\n    >>> import <anything>\n    >>> arr_shaped + 10 # or other operations\n\n\n\nI also tested it on Python 2.6, with similar results.'"
2008,7729244,thouis,thouis,2012-10-19 21:01:17,2012-10-19 21:01:18,2012-10-19 21:01:18,closed,,,2,11 - Bug;component: numpy.distutils;priority: normal,https://api.github.com/repos/numpy/numpy/issues/2008,b'Python2.7 requires DistutilsExecError (Trac #1410)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/1410 on 2010-02-24 by @bsouthey, assigned to @cournape._\n\nDistutilsExecError is not defined by Python 2.7 alpha 3 in \nnumpy/distutils/ccompiler.py\n\n\nTraceback (most recent call last):                                                                                                                                    \n  File ""setup.py"", line 210, in <module>                                                                                                                              \n    setup_package()                                                                                                                                                   \n  File ""setup.py"", line 203, in setup_package                                                                                                                         \n    configuration=configuration )                                                                                                                                     \n  File ""/home/bsouthey/python/numpy_svn/numpy/numpy/distutils/core.py"", line 186, in setup                                                                            \n    return old_setup(**new_attr)\n  File ""/usr/local/lib/python2.7/distutils/core.py"", line 152, in setup\n    dist.run_commands()\n  File ""/usr/local/lib/python2.7/distutils/dist.py"", line 953, in run_commands\n    self.run_command(cmd)\n  File ""/usr/local/lib/python2.7/distutils/dist.py"", line 972, in run_command\n    cmd_obj.run()\n  File ""/home/bsouthey/python/numpy_svn/numpy/numpy/distutils/command/build.py"", line 37, in run\n    old_build.run(self)\n  File ""/usr/local/lib/python2.7/distutils/command/build.py"", line 127, in run\n    self.run_command(cmd_name)\n  File ""/usr/local/lib/python2.7/distutils/cmd.py"", line 326, in run_command\n    self.distribution.run_command(command)\n  File ""/usr/local/lib/python2.7/distutils/dist.py"", line 972, in run_command\n    cmd_obj.run()\n  File ""/home/bsouthey/python/numpy_svn/numpy/numpy/distutils/command/build_src.py"", line 152, in run\n    self.build_sources()\n  File ""/home/bsouthey/python/numpy_svn/numpy/numpy/distutils/command/build_src.py"", line 163, in build_sources\n    self.build_library_sources(*libname_info)\n  File ""/home/bsouthey/python/numpy_svn/numpy/numpy/distutils/command/build_src.py"", line 298, in build_library_sources\n    sources = self.generate_sources(sources, (lib_name, build_info))\n  File ""/home/bsouthey/python/numpy_svn/numpy/numpy/distutils/command/build_src.py"", line 385, in generate_sources\n    source = func(extension, build_dir)\n  File ""numpy/core/setup.py"", line 671, in get_mathlib_info\n    mlibs = check_mathlib(config_cmd)\n  File ""numpy/core/setup.py"", line 337, in check_mathlib\n    if config_cmd.check_func(""exp"", libraries=libs, decl=True, call=True):\n  File ""/home/bsouthey/python/numpy_svn/numpy/numpy/distutils/command/config.py"", line 313, in check_func\n    libraries, library_dirs)\n  File ""/usr/local/lib/python2.7/distutils/command/config.py"", line 251, in try_link\n    libraries, library_dirs, lang)\n  File ""/home/bsouthey/python/numpy_svn/numpy/numpy/distutils/command/config.py"", line 149, in _link\n    libraries, library_dirs, lang))\n  File ""/home/bsouthey/python/numpy_svn/numpy/numpy/distutils/command/config.py"", line 89, in _wrap_method\n    ret = mth(*((self,)+args))\n  File ""/usr/local/lib/python2.7/distutils/command/config.py"", line 148, in _link\n    target_lang=lang)\n  File ""/usr/local/lib/python2.7/distutils/ccompiler.py"", line 750, in link_executable\n    debug, extra_preargs, extra_postargs, None, target_lang)\n  File ""/usr/local/lib/python2.7/distutils/unixccompiler.py"", line 256, in link\n    self.spawn(linker + ld_args)\n  File ""/home/bsouthey/python/numpy_svn/numpy/numpy/distutils/ccompiler.py"", line 69, in CCompiler_spawn\n    raise DistutilsExecError(\'Command ""%s"" failed with exit status %d%s\' % (cmd, s, msg))\nNameError: global name \'DistutilsExecError\' is not defined\n'"
2007,7729240,thouis,thouis,2012-10-19 21:01:15,2012-10-19 21:01:16,2012-10-19 21:01:16,closed,,1.6.0,3,11 - Bug;component: numpy.distutils;priority: high,https://api.github.com/repos/numpy/numpy/issues/2007,b'Removal of unused _init_posix distutils function (Trac #1409)',"b""_Original ticket http://projects.scipy.org/numpy/ticket/1409 on 2010-02-24 by @bsouthey, assigned to @cournape._\n\nNumpy calls the function distutils.sysconfig._init_posix in numpy/distutils/ccompiler.py.\n\nThis function has been removed in the Python 2.7 alpha 3. Also, this call is no longer used within the numpy code as per Robert Kern's response in the thread 'distutils problem with NumPy-1.4 & Py-2.7a3 (Snow Leopard)' \nhttp://mail.scipy.org/pipermail/numpy-discussion/2010-February/048882.html\n"""
2006,7729239,thouis,charris,2012-10-19 21:01:13,2014-02-19 00:21:16,2014-02-19 00:21:16,closed,,,1,11 - Bug;component: numpy.oldnumeric;priority: normal,https://api.github.com/repos/numpy/numpy/issues/2006,b'alter_code1.changeimports does not recognize certain import strings (Trac #1408)',"b""_Original ticket http://projects.scipy.org/numpy/ticket/1408 on 2010-02-24 by trac user Andrew MacKeith, assigned to unknown._\n\nnumpy.oldnumeric.alter_code1.changeimports will not recognize certain import strings that contain several names to import.[[BR]]\n\nFor example, it does not recognize:\n\n\n    import math, time, sys, os, Numeric\n\n\n\nI looked at the re pattern, and I think it needs this change to fix it.\n\n\n\n    From: r'(import\\s+[^,\\n\\r]+,\\s*)(%s)' % name\n    To:   r'(import\\s+[^;\\n\\r]+,\\s*)(%s)' % name\n\n\n\n\nAFAICT the reason for the complemented set is to ensure the name is part of the import statement, which normally ends with a ; or new line. \nThe pattern was previously changed in ticket 3201 by Travis.\n\n\n"""
2005,7729237,thouis,charris,2012-10-19 21:01:11,2014-02-19 00:18:31,2014-02-19 00:18:31,closed,,,3,11 - Bug;component: numpy.lib;priority: normal,https://api.github.com/repos/numpy/numpy/issues/2005,b'rec_append_fields does not work for recarray of length 1 (Trac #1407)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/1407 on 2010-02-24 by trac user koert, assigned to unknown._\n\nHello,\nI have a program that works with recarrays where i append a column to them using rec_append_fields from numpy.lib.recfunctions. I noticed this works fine for recarrays of any length (including zero) except for length 1. I assume this is a bug?\nBest,\nKoert\n\nPython 2.5.4 on Windows XP\n'"
2004,7729232,thouis,thouis,2012-10-19 21:01:08,2012-10-19 21:01:10,2012-10-19 21:01:10,closed,,,3,11 - Bug;component: Other;priority: normal,https://api.github.com/repos/numpy/numpy/issues/2004,b'Should complex number have an ordering at all? (Trac #1406)',"b""_Original ticket http://projects.scipy.org/numpy/ticket/1406 on 2010-02-23 by trac user malev, assigned to unknown._\n\nHi there!\nIf you have and array with complex values, and try to execute: numpy.amax(array), amax, brings a result the max number of the array, but it only search in the real part.\nI think that there shouldn't be result, like it happens when you call the max methods on a simple list.\n\nIn [1]: import numpy as np\nIn [2]: a_list = [1+2j, 1+3j, 2+2j,1+100j, 5+1j]\nIn [3]: a_np = np.array([1+2j, 1+3j, 2+2j,1+100j, 5+1j])\nIn [4]: np.amax(a_np)\nOut[4]: (5+1j)\nIn [5]: max(a_list)\n---------------------------------------------------------------------------\nTypeError Traceback (most recent call last)\n/home/malev/<ipython console> in <module>()\nTypeError: no ordering relation is defined for complex numbers\n\nThe code here: http://pastebin.com/b8JgMNhm\nfinally, I'm using:\nPython 2.6.4 (r264:75706, Dec 7 2009, 18:45:15)\nand numpy: '1.3.0'\n\nRegards\nmalev"""
2003,7729231,thouis,thouis,2012-10-19 21:01:06,2012-10-19 21:01:07,2012-10-19 21:01:07,closed,,,1,11 - Bug;component: numpy.numarray;priority: high,https://api.github.com/repos/numpy/numpy/issues/2003,"b""NameError: global name 'numpy' is not defined (Trac #1405)""","b'_Original ticket http://projects.scipy.org/numpy/ticket/1405 on 2010-02-22 by @stsci-sienkiew, assigned to @chanley._\n\n\n\n      File ""/usr/stsci/pyssgdev/2.5.4/numpy/lib/utils.py"", line 79, in get_numarray_include\n        include_dirs = get_numarray_include_dirs()\n      File ""/usr/stsci/pyssgdev/2.5.4/numpy/numarray/util.py"", line 45, in get_numarray_include_dirs\n        base = os.path.dirname(numpy.__file__)\n    NameError: global name \'numpy\' is not defined\n\n\n\nReproduce by:\n\n\n\n    numpy.get_numarray_include()\n\n\n\nThe problem is:\n\n\n\n    import numpy as np\n    \n    ...\n    \n        base = os.path.dirname(numpy.__file__)\n\n\n\nNumPy version 2.0.0.dev8251\n\n'"
2002,7729229,thouis,thouis,2012-10-19 21:01:04,2012-10-19 21:01:05,2012-10-19 21:01:05,closed,,NumPy 2.0,1,11 - Bug;component: numpy.core;priority: normal,https://api.github.com/repos/numpy/numpy/issues/2002,"b""complex log doesn't raise warning for invalid value (Trac #1404)""","b'_Original ticket http://projects.scipy.org/numpy/ticket/1404 on 2010-02-21 by @charris, assigned to unknown._\n\nCompare:\n\n\n\n    In [14]: np.exp(array(np.nan + 1j))\n    Warning: invalid value encountered in exp\n    Out[14]: (nan+nan*j)\n    \n    In [15]: np.log(array(np.nan + 1j))\n    Out[15]: (nan+nan*j)\n    \n\n\n\nNote that none of the non-complex versions raise warnings, I assume that is a gcc library thing. Maybe there is a flag...\n'"
1999,7729220,thouis,thouis,2012-10-19 21:00:52,2012-10-19 21:00:54,2012-10-19 21:00:54,closed,,1.4.1,8,11 - Bug;component: numpy.core;priority: highest,https://api.github.com/repos/numpy/numpy/issues/1999,"b'Scipy Build on AIX 5.3 #error Unknown CPU, please report this to numpy maintainers (Trac #1401)'","b'_Original ticket http://projects.scipy.org/numpy/ticket/1401 on 2010-02-18 by trac user A_LARAS, assigned to unknown._\n\nHello,\nI\'m trying to setup Scipy on AIX system with error :\n#error Unknown CPU, please report this to numpy maintainers with information about your platform (OS, CPU and compiler)\n/usr/local/python/lib/python2.4/site-packages/numpy/core/include/numpy/npy_endian.h:41:10: #error Unknown CPU: can not set endianness\nerror: Command ""c++ -DNDEBUG -O -Iscipy/interpolate/src -I/usr/local/python/lib/python2.4/site-packages/numpy/core/include -I/usr/local/python/include/python2.4 -c scipy/interpolate/src/_interpolate.cpp -o build/temp.aix-5.3-2.4/scipy/interpolate/src/_interpolate.o"" failed with exit status 1\n\n#python setup.py config_fc --fcompiler=gnu95 install --prefix=/usr/local/python\n\n\npython 2.4\nnumpy 1.4.0\n\nOS: AIX 5300-7\nProcessor Type: PowerPC_POWER3\nNumber Of Processors: 1\nCPU Type: 64-bit\nKernel Type: 64-bit\nF compiler : gfortran\ngcc-c++-4.2.4-2\ngcc-cpp-4.2.4-2\ngcc-gfortran-4.2.4-2\ngcc-4.2.4-2\nlibgcc-4.2.4-2\n\nThanks for your assistance.\nAtmane.\n\n\n'"
1997,7729213,thouis,thouis,2012-10-19 21:00:41,2012-10-19 21:00:49,2012-10-19 21:00:49,closed,,1.5.1,23,11 - Bug;component: numpy.distutils;priority: highest,https://api.github.com/repos/numpy/numpy/issues/1997,b'distutils fails to build ppc64 support on Mac OS X when requested (Trac #1399)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/1399 on 2010-02-18 by @dwf, assigned to @rgommers._\n\nStuff including Fortran code ends up missing the ppc64 architecture even when Python supports it, due to a small oversight in the detection code. Patch attached.'"
1996,7729211,thouis,charris,2012-10-19 21:00:40,2014-02-19 07:47:53,2014-02-19 00:06:45,closed,,,3,11 - Bug;component: numpy.core;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1996,b'augmented assignment statements do not handle exceptions in object.__float__() correctly (Trac #1398)',"b""_Original ticket http://projects.scipy.org/numpy/ticket/1398 on 2010-02-13 by @b45ch1, assigned to unknown._\n\nBest explained at an example:\n\n\n\n    import numpy\n    \n    print 'numpy.__version__ = ',numpy.__version__\n    \n    class adouble:\n        \n        def __init__(self,x):\n            self.x = x\n            \n        def __mul__(self,other):\n            if not isinstance(other, self.__class__):\n                return self.__class__(self.x * other)\n            return self.__class__(self.x * other.x)\n    \n        def __rmul__(self,other):\n            return self * other\n    \n        def __float__(self):\n            raise Exception('this is not possible')\n    \n        def __str__(self):\n            return str(self.x)\n    \n    x = numpy.array([adouble(1.), adouble(2.), adouble(3.)])\n    y = numpy.array([4.,5.,6.])\n    \n    # this should call the __float__ method of adouble which would raise an Exception\n    # but it does not!\n    y *= x   \n\n\n\nOutput:\n\n\n    b45ch1@shlp:~/workspace/numpy_bugs$ python bug_casting_from_object_to_dtype_issue.py\n    numpy.__version__ =  1.5.0.dev\n\n"""
1995,7729210,thouis,thouis,2012-10-19 21:00:38,2012-10-19 21:00:39,2012-10-19 21:00:39,closed,,,1,11 - Bug;component: Other;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1995,b'scientific notation with a D instead of E on mac OSX (Trac #1397)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/1397 on 2010-02-12 by trac user ricitron, assigned to unknown._\n\nIn numpy.float64() please convert [dD] to [eE]\n\nWhen running python(2.5) and numpy(1.4) on mac I get:\n>>> numpy.float64(\'1.23D+04\')\nTraceback (most recent call last):\n  File ""<stdin>"", line 1, in <module>\nValueError: setting an array element with a sequence.'"
1992,7729202,thouis,thouis,2012-10-19 21:00:32,2012-10-19 21:00:32,2012-10-19 21:00:32,closed,,,2,11 - Bug;component: numpy.ma;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1992,b'np.isnan not working correctly with vector columns in masked structure arrays (Trac #1394)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/1394 on 2010-02-09 by @astrofrog, assigned to @pierregm._\n\nThe following example fails:\n\n\n\n    import numpy as np\n    import numpy.ma as ma\n    \n    arr = ma.zeros((5),dtype=[(\'a\',np.float32,3)])\n    np.isnan(arr[\'a\'])\n\n\n\ngiving:\n\n\n\n    ---------------------------------------------------------------------------\n    ValueError                                Traceback (most recent call last)\n    \n    /Users/tom/tmp/test_masked.py in <module>()\n          3 \n          4 arr = ma.zeros((5),dtype=[(\'a\',np.float32,3)])\n    ----> 5 np.isnan(arr[\'a\'])\n          6 \n          7 \n    \n    /Users/tom/Library/Python/2.6/site-packages/numpy/ma/core.pyc in __array_wrap__(self, obj, context)\n       2806         Wraps the numpy array and sets the mask according to context.\n       2807         """"""\n    -> 2808         result = obj.view(type(self))\n       2809         result._update_from(self)\n       2810         #..........\n    \n    \n    /Users/tom/Library/Python/2.6/site-packages/numpy/ma/core.pyc in view(self, dtype, type)\n       2879                 pass\n       2880         # Make sure to reset the _fill_value if needed\n    \n    -> 2881         if getattr(output, \'_fill_value\', None):\n       2882             output._fill_value = None\n       2883         return output\n    \n    ValueError: The truth value of an array with more than one element is ambiguous. Use a.any() or a.all()\n\n\n\nThis is in NumPy r8095'"
1990,7729200,thouis,thouis,2012-10-19 21:00:28,2012-10-19 21:00:29,2012-10-19 21:00:29,closed,,,1,11 - Bug;component: Other;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1990,"b'numpy has a directory under python site-packages named ""core"" - linux removes core (Trac #1392)'","b""_Original ticket http://projects.scipy.org/numpy/ticket/1392 on 2010-02-09 by trac user schaefer0, assigned to unknown._\n\nI install numpy (1.4.0) in the day, every day. - I log out in the evening, every evening, and by next morning numpy's core directory has been deleted. So I get clever and chmod on core to write protect it. No go. Still deleted. Arggghhh!\nRed-hat linux: uname -a returns\nLinux kronos 2.6.18-164.11.1.el5xen #1 SMP Wed Jan 6 14:01:18 EST 2010 i686 i686 i386 GNU/Linux"""
1989,7729197,thouis,thouis,2012-10-19 21:00:26,2012-10-19 21:00:27,2012-10-19 21:00:27,closed,,,3,11 - Bug;component: numpy.ma;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1989,b'Fill value and empty arrays (Trac #1391)',"b""_Original ticket http://projects.scipy.org/numpy/ticket/1391 on 2010-02-08 by @astrofrog, assigned to @pierregm._\n\nI'm not sure if this is a bug report or feature request since I'm not sure what the intended behavior is.\n\nWhen a masked structured array field is copied from one array to another, the masks are copied, but I would expect the fill value to be copied too (which it isn't). Furthermore, ma.empty and ma.zeros don't accept a fill_value= argument. Therefore, one is forced to call set_fill_value after copying the field. For example:\n\n\n\n    import numpy.ma as ma\n    import numpy as np\n    \n    a = ma.array([(1.,),(2.,),(3.,),(4.,)],\n                 mask = [(False,),(False,),(False,),(False,)],\n           fill_value = (np.nan,),\n                dtype = [('ra', '<f8')])\n    \n    newdtype = np.dtype([('ra', '<f8'), ('dec', '<f8')])\n    \n    b = ma.zeros(a.shape, dtype=newdtype)\n    \n    b['ra'] = a['ra']\n    \n    print repr(b)\n\n\n\nproduces:\n\n\n\n    masked_array(data = [(1.0, 0.0) (2.0, 0.0) (3.0, 0.0) (4.0, 0.0)],\n                 mask = [(False, False) (False, False) (False, False) (False, False)],\n           fill_value = (1e+20, 1e+20),\n                dtype = [('ra', '<f8'), ('dec', '<f8')])\n\n\n\nwhen, as a user, I would expect:\n\n\n\n    masked_array(data = [(1.0, 0.0) (2.0, 0.0) (3.0, 0.0) (4.0, 0.0)],\n                 mask = [(False, False) (False, False) (False, False) (False, False)],\n           fill_value = (nan, 1e+20),\n                dtype = [('ra', '<f8'), ('dec', '<f8')])\n\n\n\nAnd the only way to get the fill value correct is to explicitly add\n\n\n\n    b['ra'].set_fill_value(a['ra'))\n\n\n\nWhen copying whole fields, should the fill value for that field not be copied too?"""
1988,7729194,thouis,thouis,2012-10-19 21:00:23,2012-10-19 21:00:24,2012-10-19 21:00:24,closed,,,4,11 - Bug;component: numpy.core;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1988,b'dtype.itemsize not working correctly (Trac #1390)',"b""_Original ticket http://projects.scipy.org/numpy/ticket/1390 on 2010-02-08 by @astrofrog, assigned to unknown._\n\nShould the following\n\n\n\n    np.float32.itemsize\n\n\n\nnot return an integer which is the number of bytes in the type? At the moment, it is just returning\n\n\n\n    In [3]: np.float32.itemsize\n    Out[3]: <attribute 'itemsize' of 'numpy.generic' objects>\n\n\n\nbut in older version of NumPy, an integer was returned.\n\n(using r8088)"""
1987,7729191,thouis,thouis,2012-10-19 21:00:21,2012-10-23 02:42:57,2012-10-19 21:00:22,closed,,,1,11 - Bug;component: Documentation;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1987,b'Bad documentation for np.seterr (Trac #1389)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/1389 on 2010-02-04 by @astrofrog, assigned to @pv._\n\nThere seems to be some debate in the np.seterr documentation page, which isn\'t great for end-users to see. Check out the bottom of\n\nhttp://docs.scipy.org/doc/numpy/reference/generated/numpy.seterr.html\n\naround ""lies!!!""\n\nAlso, is the problem mentioned in there a bug? The person who wrote that should have filed a bug report and corrected the documentation...'"
1986,7729190,thouis,thouis,2012-10-19 21:00:18,2012-10-19 21:00:20,2012-10-19 21:00:20,closed,,NumPy 1.7,8,11 - Bug;component: numpy.core;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1986,"b'numpy.frombuffer calls PyErr_Format without actually throwing the error, causing bizarre errors later (Trac #1388)'","b'_Original ticket http://projects.scipy.org/numpy/ticket/1388 on 2010-02-03 by trac user baffe, assigned to unknown._\n\nAfter calling numpy.frombuffer with a zero-length str or array.array, numpy starts behaving very strange.\n\nExample:\n\n\n    Python 2.5.2 (r252:60911, Feb 21 2008, 13:11:45) [MSC v.1310 32 bit (Intel)] on win32\n    Type ""help"", ""copyright"", ""credits"" or ""license"" for more information.\n    >>> import numpy\n    >>> buf = numpy.frombuffer(\'\', \'B\')\n    >>> print numpy.array([42], \'B\')\n    Traceback (most recent call last):\n      File ""<stdin>"", line 1, in <module>\n    TypeError: data type not understood\n    >>> print numpy.array([42], \'B\') # Exact same line again!\n    [1]\n\n\n\nLeftover error that should have been raised by the previous operation?'"
1985,7729187,thouis,thouis,2012-10-19 21:00:14,2012-10-19 21:00:15,2012-10-19 21:00:15,closed,,NumPy 1.7,3,11 - Bug;component: numpy.lib;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1985,b'Undefined behavior for bincount for empty array (Trac #1387)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/1387 on 2010-02-02 by @cournape, assigned to unknown._\n\nE.g.:\n\n\n\n    import numpy as np\n    x = np.bincount(np.array([], dtype=int))\n\n'"
1984,7729182,thouis,charris,2012-10-19 21:00:12,2015-10-18 20:14:54,2015-10-18 20:14:54,closed,,NumPy 2.0,6,11 - Bug;component: numpy.core;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1984,b'100 times poorer performance indexing scalar record array (Trac #1386)',"b""_Original ticket http://projects.scipy.org/numpy/ticket/1386 on 2010-01-31 by trac user oscar.bristol, assigned to unknown._\n\nAssigning to a field in a scalar record array like this\nB['a'] = A['a']\ntakes around 50 times as long as assigning like this:\nB['a'][:] = A['a']\nand 100 times as long as assigning to a size 1 record array.\nI've attached a script (test.py) that compares scalars and size 1 arrays and the two different methods of indexing above. On my machine, the results are:\n\n$ python test.py 100000\narray,  B['a'][:] = A['a']      0.25 seconds\narray,  B['a']    = A['a']      0.213 seconds\nscalar, B['a'][:] = A['a']      0.395 seconds\nscalar, B['a']    = A['a']      22.0 seconds\n"""
1981,7729174,thouis,thouis,2012-10-19 21:00:03,2012-10-19 21:00:05,2012-10-19 21:00:05,closed,,NumPy 1.7,5,11 - Bug;component: numpy.distutils;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1981,b'Handling of HP C++ compiler not correct (Trac #1383)',"b""_Original ticket http://projects.scipy.org/numpy/ticket/1383 on 2010-01-28 by trac user neinhues, assigned to @cournape._\n\nPatch is attached.\n\nI don't know whether it is possible to distinguish between\nC and C++ in distutils as it is not safe to assume that\nall compiler flags valid for C are also valid for C++"""
1980,7729172,thouis,thouis,2012-10-19 21:00:01,2012-10-19 21:00:02,2012-10-19 21:00:02,closed,,NumPy 2.0,2,11 - Bug;component: numpy.distutils;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1980,b'Sun compiler flags not correct for 64 bits compile (Trac #1382)',"b""_Original ticket http://projects.scipy.org/numpy/ticket/1382 on 2010-01-28 by trac user neinhues, assigned to @cournape._\n\nThe supplied compiler flags do not work (at least they don't with\nthe Studio 9 compilers)\n\nSuggestion: Please implement a switch to configure for 32 bit or\n64 bit builds.\n\nA patch is attached."""
1979,7729171,thouis,rgommers,2012-10-19 20:59:59,2013-05-05 17:13:09,2013-05-05 17:13:09,closed,,NumPy 2.0,4,11 - Bug;component: numpy.distutils;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1979,b'Linker flags for MKL library are not set correctly (Trac #1381)',"b""_Original ticket http://projects.scipy.org/numpy/ticket/1381 on 2010-01-28 by trac user neinhues, assigned to @cournape._\n\nIn\nnumpy-1.4.0/numpy/distutils/system_info.py\n\nsomebody tried to link both against 32 and 64bit libraries which\ndoes not work. A patch is attached.\n\nPlease note: Using the MKL libraries with numpy *only* works if\nPython is also linked against the MKL libraries.\nThe reason is that the MKL libraries don't work for dl-opened libraries like Python extensions\n"""
1978,7729170,thouis,charris,2012-10-19 20:59:56,2014-02-20 00:48:37,2014-02-20 00:48:37,closed,,NumPy 2.0,10,11 - Bug;component: numpy.core;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1978,b'endianess is not set correctly for HP-UX Itanium (Trac #1380)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/1380 on 2010-01-28 by trac user neinhues, assigned to unknown._\n\nPlease note that the Itanium can be configured to work\nin big or little endian mode, a check is required in order\nto set this correctly.\n\nnumpy-1.4.0/numpy/core/include/numpy/npy_endian.h\n\nPatch is attached.'"
1977,7729167,thouis,thouis,2012-10-19 20:59:53,2012-10-19 20:59:54,2012-10-19 20:59:54,closed,,1.6.0,3,11 - Bug;component: numpy.core;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1977,b'CPU ID not set correctly on PARISC (Trac #1379)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/1379 on 2010-01-28 by trac user neinhues, assigned to unknown._\n\nIn\nnumpy-1.4.0/numpy/core/include/numpy/npy_cpu.h\nthe code for setting the CPU ID does not work as intended,\npatch is attached'"
1976,7729164,thouis,thouis,2012-10-19 20:59:51,2012-10-19 20:59:52,2012-10-19 20:59:52,closed,,1.6.0,6,11 - Bug;component: numpy.distutils;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1976,b'Change of Intel Fortran compiler flags (Trac #1378)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/1378 on 2010-01-28 by trac user neinhues, assigned to @cournape._\n\nThe flags for the Intel compiler v 11 require a change,\nnumpy got broken on our machines with -O3. A patch\nis supplied.'"
1975,7729162,thouis,thouis,2012-10-19 20:59:48,2012-10-19 20:59:49,2012-10-19 20:59:49,closed,,1.6.0,3,11 - Bug;component: numpy.distutils;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1975,b'HP Fortran compiler flags incomplete (Trac #1377)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/1377 on 2010-01-28 by trac user neinhues, assigned to @cournape._\n\nThe flags for the HP Fortran compiler should be changed as\ndescribed below:\nnumpy-1.4.0/numpy/distutils/fcompiler/hpux.py\n\n@@ -9,17 +9,17 @@\n     version_pattern =  r\'HP F90 (?P<version>[^\\s*,]*)\'\n\n     executables = {\n-        \'version_cmd\'  : [""<F90>"", ""+version""],\n+        \'version_cmd\'  : [""f90"", ""+version""],\n         \'compiler_f77\' : [""f90""],\n         \'compiler_fix\' : [""f90""],\n         \'compiler_f90\' : [""f90""],\n-        \'linker_so\'    : None,\n+        \'linker_so\'    : [""ld"", ""-b""],\n         \'archiver\'     : [""ar"", ""-cr""],\n         \'ranlib\'       : [""ranlib""]\n         }\n     module_dir_switch = None #XXX: fix me\n     module_include_switch = None #XXX: fix me\n-    pic_flags = [\'+pic=long\']\n+    pic_flags = [\'+Z\']\n     def get_flags(self):\n         return self.pic_flags + [\'+ppu\', \'+DD64\']\n     def get_flags_opt(self):\n'"
1974,7729159,thouis,thouis,2012-10-19 20:59:46,2012-10-19 20:59:46,2012-10-19 20:59:46,closed,,1.4.1,1,11 - Bug;component: numpy.distutils;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1974,b'Suspecting indentation error! (Trac #1376)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/1376 on 2010-01-27 by trac user lenard.palko, assigned to @cournape._\n\nIn the file numpy/distutils/fcompiler/gnu.py lines 303 to 308:\n\n\n\n    303\t            if is_win64():\n    304\t                c_compiler = self.c_compiler\n    305\t                if c_compiler and c_compiler.compiler_type == ""msvc"":\n    306\t                    return []\n    307\t            else:\n    308\t                raise NotImplementedError(""Only MS compiler supported with gfortran on win64"")\n\n\n\nThe else seems to have wrong indentation and from this reason if the platform is a win32 platform it detects it as a win64 platform and raises the nasty exception. I found this error in the numpy-1.4.0-win32-superpack-python2.5.exe distribution found for download on: http://sourceforge.net/projects/numpy/files/\n'"
1973,7729155,thouis,thouis,2012-10-19 20:59:44,2012-10-19 20:59:45,2012-10-19 20:59:45,closed,,,1,11 - Bug;component: numpy.core;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1973,b'min() and max() accept and return dictionaries (Trac #1375)',"b""_Original ticket http://projects.scipy.org/numpy/ticket/1375 on 2010-01-26 by trac user gabriel, assigned to unknown._\n\nThis is probably not desired, or is it?\n\nIn [1]: numpy.min({'a':45})[[BR]]\n\nOut[1]: {'a': 45}\n\nThe same goes for max()\n\nHowever I see that Python's built-in min() also happily accepts dictionaries; it escapes me why.\n\nNumpy's behavior is not restricted to dictionaries, but min() and max() will also happily accept esoteric user-defined class instances and return them."""
1972,7729153,thouis,thouis,2012-10-19 20:59:42,2012-10-19 20:59:43,2012-10-19 20:59:43,closed,,,4,11 - Bug;component: Other;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1972,b'Ticket 628 not fixed for Solaris (polyfit uses 100% CPU and does not stop) (Trac #1374)',"b""_Original ticket http://projects.scipy.org/numpy/ticket/1374 on 2010-01-26 by trac user michelkeijzers, assigned to unknown._\n\nThe exact contents of ticket 628 are not fixed for the Solaris version:\n\nPython 2.5.1 (r251:54863, Aug 25 2008, 09:23:26) \n[GCC 3.4.3] on sunos5\n\n>>> import numpy\n>>> numpy.version.version\n'1.2.1'\n\n>>> numpy.polyfit([0.0], [-numpy.Inf], 2)\n\nThis command results in 100% cpu load and the process cannot be stopped.\n\n\n\n"""
1971,7729151,thouis,thouis,2012-10-19 20:59:38,2012-10-19 20:59:40,2012-10-19 20:59:40,closed,,,4,11 - Bug;component: numpy.ma;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1971,b'mvoid.__str__ fails with python2.4 (Trac #1373)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/1373 on 2010-01-25 by @drnlm, assigned to unknown._\n\nThe following code fragment\n\n\n    import numpy as np\n    from numpy.ma.core import array, mvoid\n    ndtype = [(\'a\', int), (\'b\', float)]\n    a = mvoid(np.array((1.0, 2.0, 3.0, 4.0)), mask=(0, 1), dtype=ndtype)\n    str(a)\n\n\n\nworks fine with python2.5, but fails with python2.4\n\n\n\n    Traceback (most recent call last):\n      File ""./demo2.py"", line 6, in ?\n        str(a)\n      File ""/home/neil/Trees/Numpy_svn/install2.4/lib/python2.4/site-packages/numpy/ma/core.py"", line 5470, in __str__\n        r = [(str(_), p)[_m] for (_, _m) in zip(self._data.tolist(), tuple(m))]\n    TypeError: tuple indices must be integers\n\n\n\nIn 2.4, numpy.bool_ isn\'t converted to an appropriate type for use as an index. The attached patch adds an explicit cast to int to solve this.'"
1970,7729150,thouis,thouis,2012-10-19 20:59:35,2012-10-19 20:59:36,2012-10-19 20:59:36,closed,,,2,11 - Bug;component: numpy.distutils;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1970,b'Intel Visual Fortran 11.1 not recognized by numpy.distutils on Windows (Trac #1372)',"b""_Original ticket http://projects.scipy.org/numpy/ticket/1372 on 2010-01-24 by @cgohlke, assigned to @cournape._\n\nOn Windows with Intel Visual Fortran Compiler Pro 11.1 installed, the distutils module of numpy 1.4.0 fails to compile Fortran Python extensions:\n\n\n\n    error: extension '...' has Fortran sources but no Fortran compiler found\n    \n    warning: build_ext: f77_compiler=... is not available.\n\n\n\nThe attached patch contains fixes for using the 32- and 64-bit Intel Visual Fortran 11.1 compilers. It allows building many scikits and the PyMC packages on Windows."""
1969,7729147,thouis,thouis,2012-10-19 20:59:32,2012-10-19 20:59:33,2012-10-19 20:59:33,closed,,1.6.0,4,11 - Bug;component: numpy.core;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1969,b'compilation fails on non-Intel CPUs (Trac #1371)',"b""_Original ticket http://projects.scipy.org/numpy/ticket/1371 on 2010-01-22 by trac user tanner, assigned to unknown._\n\nNumpy 1.4 fails to compile on non-Intel architectures (here ARM on Maemo/Nokia N900):\n\ncompile options: '-Inumpy/core/include -I/home/tanner/tmp/numpy-1.4.0/./build/src.linux-armv5tel-2.5/numpy/core/include/numpy -Inumpy/core/src/private -Inumpy/core/src -Inumpy/core -Inumpy/core/src/npymath -Inumpy/core/src/multiarray -Inumpy/core/src/umath -Inumpy/core/include -I/usr/include/python2.5 -I/home/tanner/tmp/numpy-1.4.0/build/src.linux-armv5tel-2.5/numpy/core/src/multiarray -I/home/tanner/tmp/numpy-1.4.0/build/src.linux-armv5tel-2.5/numpy/core/src/umath -c'\ngcc: numpy/core/src/multiarray/multiarraymodule_onefile.c\nIn file included from numpy/core/src/multiarray/multiarraymodule_onefile.c:11:\nnumpy/core/src/multiarray/scalartypes.c.src: In function 'voidtype_setfield':\nnumpy/core/src/multiarray/scalartypes.c.src:1208: warning: implicit declaration of function 'NPY_COPY_PYOBJECT_PTR'\n\nNPY_COPY_PYOBJECT_PTR is not defined because NPY_SIZEOF_PY_INTPTR_T was\nnot defined before including numpy/core/include/numpy/npy_cpu.h\n\nmy patch fixes the includes and triggers an error if NPY_SIZEOF_PY_INTPTR_T\nis not defined. with this I get\n\ncompile options: '-Inumpy/core/include -I/home/tanner/tmp/numpy-1.4.0/./build/src.linux-armv5tel-2.5/numpy/core/include/numpy -Inumpy/core/src/private -Inumpy/core/src -Inumpy/core -Inumpy/core/src/npymath -Inumpy/core/src/multiarray -Inumpy/core/src/umath -Inumpy/core/include -I/usr/include/python2.5 -I/home/tanner/tmp/numpy-1.4.0/build/src.linux-armv5tel-2.5/numpy/core/src/multiarray -I/home/tanner/tmp/numpy-1.4.0/build/src.linux-armv5tel-2.5/numpy/core/src/umath -c'\ngcc: /home/tanner/tmp/numpy-1.4.0/build/src.linux-armv5tel-2.5/numpy/core/src/npymath/npy_math_complex.c\ngcc: /home/tanner/tmp/numpy-1.4.0/build/src.linux-armv5tel-2.5/numpy/core/src/npymath/npy_math.c\nIn file included from numpy/core/src/private/npy_fpmath.h:7,\n                 from numpy/core/src/npymath/npy_math_private.h:25,\n                 from numpy/core/src/npymath/npy_math.c.src:56:\nnumpy/core/include/numpy/npy_cpu.h:99:3: error: #error Unknown CPU\n\nwhich my patch to numpy/core/src/private/npy_fpmath.h fixes."""
1968,7729145,thouis,thouis,2012-10-19 20:59:29,2012-10-19 20:59:31,2012-10-19 20:59:31,closed,,NumPy 2.0,6,11 - Bug;component: numpy.core;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1968,b'numpy.load() crashes on invalid data (Trac #1370)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/1370 on 2010-01-21 by trac user dhelfman, assigned to unknown._\n\n\n\n    >>> import cStringIO as io\n    >>> import numpy as np\n    >>> np.load( io.StringIO( \'0\' ) )\n\n\n\nWhen I run this, the Python interpreter crashes and exits unceremoniously. Note that if I change the \'0\' to a \'1\', I get a proper IOError exception and no crash.\n\nThis is in MSYS on Windows XP with Python 2.6.4 from python.org, running numpy 1.4.0 built with MSVC 9.0:\n\n\n\n    $ gdb python\n    GNU gdb 5.2.1\n    Copyright 2002 Free Software Foundation, Inc.\n    GDB is free software, covered by the GNU General Public License, and you are\n    welcome to change it and/or distribute copies of it under certain conditions.\n    Type ""show copying"" to see the conditions.\n    There is absolutely no warranty for GDB.  Type ""show warranty"" for details.\n    This GDB was configured as ""i686-pc-mingw32""...(no debugging symbols found)...\n    (gdb) r -c ""import cStringIO as IO ; import numpy as np ; np.load( IO.StringIO(\'0\') )""\n    Starting program: c:\\python26/python.exe -c ""import cStringIO as io ; import numpy as np ; np.load( io.StringIO(\'0\') )""\n    \n    Program received signal SIGSEGV, Segmentation fault.\n    0x1e09ada3 in ?? ()\n    (gdb) bt\n    #0  0x1e09ada3 in ?? ()\n    #1  0x1e0e1fd5 in ?? ()\n    #2  0x00a4e530 in ?? ()\n    #3  0x1e1d1d30 in ?? ()\n    Cannot access memory at address 0x5\n\n\n\nAnd this is on Mac OS X 10.4 with Python 2.6.4 from python.org, running numpy 1.4.0 built with gcc 4.0.1 from Apple:\n\n\n\n    $ gdb python\n    GNU gdb 5.2.1\n    Copyright 2002 Free Software Foundation, Inc.\n    GDB is free software, covered by the GNU General Public License, and you are\n    welcome to change it and/or distribute copies of it under certain conditions.\n    Type ""show copying"" to see the conditions.\n    There is absolutely no warranty for GDB.  Type ""show warranty"" for details.\n    This GDB was configured as ""i686-pc-mingw32""...(no debugging symbols found)...\n    (gdb) r -c ""import cStringIO as IO ; import numpy as np ; np.load( IO.StringIO(\'0\') )""\n    Starting program: c:\\python26/python.exe -c ""import cStringIO as IO ; import numpy as np ; np.load( IO.StringIO(\'0\') )""\n    \n    Program received signal SIGSEGV, Segmentation fault.\n    0x1e09ada3 in ?? ()\n    (gdb) bt\n    #0  0x1e09ada3 in ?? ()\n    #1  0x1e0e1fd5 in ?? ()\n    #2  0x00a4e530 in ?? ()\n    #3  0x1e1d1d30 in ?? ()\n    Cannot access memory at address 0x5\n\n\n'"
1966,7729142,thouis,thouis,2012-10-19 20:59:26,2012-10-19 20:59:27,2012-10-19 20:59:27,closed,,,1,11 - Bug;component: numpy.ma;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1966,b'numpy.ma sort method sorts in-place but dosctring says it returns a sorted copy (Trac #1368)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/1368 on 2010-01-21 by trac user bsulman, assigned to @pierregm._\n\nThe dosctring to the sort method in numpy.ma says ""Return a sorted copy of an array,"" the same behavior as the numpy sort method.  However, the numpy.ma sort method sorts arrays in-place, unlike the numpy sort method and in contradiction to the documentation.  The code should be changed to match the numpy code, or the docstring should be changed to accurately reflect the behavior.'"
1965,7729141,thouis,thouis,2012-10-19 20:59:23,2012-10-19 20:59:25,2012-10-19 20:59:25,closed,,,3,11 - Bug;component: numpy.ma;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1965,b'test_core.TestMaskedView fails with python2.4 (Trac #1367)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/1367 on 2010-01-21 by @drnlm, assigned to unknown._\n\nSeen on both Linux i386 with python 2.4.6 and Linux sparc with python 2.4.4. Not seen with python 2.5\n\n\n\n    ======================================================================\n    ERROR: test_view_to_flexible_dtype (test_core.TestMaskedView)\n    ----------------------------------------------------------------------\n    Traceback (most recent call last):\n      File ""/home/neil/Trees/Numpy_svn/install2.4/lib/python2.4/site-packages/numpy/ma/tests/test_core.py"", line 3313, in test_view_to_flexible_dtype\n        test = a[0].view([(\'A\', float), (\'B\', float)])\n      File ""../install2.4/lib/python2.4/site-packages/numpy/ma/core.py"", line 2862, in view\n      File ""../install2.4/lib/python2.4/site-packages/numpy/ma/core.py"", line 2786, in __array_finalize__\n    TypeError: attribute \'shape\' of \'numpy.generic\' objects is not writable\n    \n    ======================================================================\n    ERROR: test_view_to_subdtype (test_core.TestMaskedView)\n    ----------------------------------------------------------------------\n    Traceback (most recent call last):\n      File ""/home/neil/Trees/Numpy_svn/install2.4/lib/python2.4/site-packages/numpy/ma/tests/test_core.py"", line 3334, in test_view_to_subdtype\n        test = a[0].view((float, 2))\n      File ""../install2.4/lib/python2.4/site-packages/numpy/ma/core.py"", line 2862, in view\n      File ""../install2.4/lib/python2.4/site-packages/numpy/ma/core.py"", line 2786, in __array_finalize__\n    TypeError: attribute \'shape\' of \'numpy.generic\' objects is not writable\n    \n    ----------------------------------------------------------------------\n\n'"
1964,7729139,thouis,thouis,2012-10-19 20:59:21,2012-10-19 20:59:22,2012-10-19 20:59:22,closed,,,1,11 - Bug;component: numpy.core;priority: high,https://api.github.com/repos/numpy/numpy/issues/1964,b'Sort fails for (big endian) structured arrays (Trac #1366)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/1366 on 2010-01-19 by @astrofrog, assigned to unknown._\n\nThe problem was originally demonstrated on numpy-discussion with the following example:\n\n\n\n    Python 2.6.1 (r261:67515, Jul  7 2009, 23:51:51) \n    [GCC 4.2.1 (Apple Inc. build 5646)] on darwin\n    Type ""help"", ""copyright"", ""credits"" or ""license"" for more information.\n    >>> import numpy as np\n    >>> data = np.array([(\'a \', 2.), (\'b\', 4.), (\'d\', 3.), (\'c\', 1.)],\n    ...                 dtype=[(\'col1\', \'|S5\'), (\'col2\', \'>f8\')])\n    >>> \n    >>> data\n    array([(\'a \', 2.0), (\'b\', 4.0), (\'d\', 3.0), (\'c\', 1.0)], \n          dtype=[(\'col1\', \'|S5\'), (\'col2\', \'>f8\')])\n    >>> data.sort(order=[\'col1\'])\n    >>> data\n    array([(\'a \', 2.0), (\'b\', 4.0), (\'c\', 1.0), (\'d\', 3.0)], \n          dtype=[(\'col1\', \'|S5\'), (\'col2\', \'>f8\')])\n    >>> data.sort(order=[\'col2\'])\n    >>> data\n    array([(\'a \', 2.0), (\'d\', 3.0), (\'b\', 4.0), (\'c\', 1.0)], \n          dtype=[(\'col1\', \'|S5\'), (\'col2\', \'>f8\')])\n\n\n\nIn the case of sorting by \'col2\', the order is incorrect.\n\nAnother example was demonstrated by Warren Weckesser, which shows that this also fails for big-endian integer columns, but that the sort is correct if the column is changed to little-endian:\n\n\n\n    In [137]: z = np.array([(0,),(258,),(256,),(1,),(255,)], \n    dtype=[(\'num\',\'<i2\')])\n    \n    In [138]: z.sort(order=\'num\')\n    \n    In [139]: z\n    Out[139]:\n    array([(0,), (1,), (255,), (256,), (258,)],\n          dtype=[(\'num\', \'<i2\')])\n    \n    In [140]: z = np.array([(0,),(258,),(256,),(1,),(255,)], \n    dtype=[(\'num\',\'>i2\')])\n    \n    In [141]: z.sort(order=\'num\')\n    \n    In [142]: z\n    Out[142]:\n    array([(255,), (0,), (256,), (1,), (258,)],\n          dtype=[(\'num\', \'>i2\')])\n    \n    In [143]: np.__version__\n    Out[143]: \'1.3.0\'\n\n\n\nThe error was confirmed on two separate numpy installations, one on MacOS 10.5 with Python 2.5.4, and one on MacOS 10.6 with Python 2.6.1.'"
1962,7729134,thouis,thouis,2012-10-19 20:59:14,2012-10-19 20:59:16,2012-10-19 20:59:16,closed,,1.4.1,3,11 - Bug;component: Other;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1962,b'segfault in numpy.dot for large arrays (Trac #1364)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/1364 on 2010-01-17 by trac user QuestionMark, assigned to unknown._\n\nHello,\n\nI\'ve encountered a segfault in numpy when trying to compute a dot product for two arrays - see code below. The problem only seems to occur when the arrays reach a certain size. I\'m using Numpy version 1.3.0, installed via macports, on a 2.33 GHz Intel Core2 Duo Macbook Pro.\n\nExample code: \n\nimport numpy as N\nprint \'Demonstration of Numpy Bug:\'\nprint \'loading X (random numbers)\'\nSzList = [10,20,30,40,50,60,70,80,90,100]\nfor Sz in SzList:\n\tprint \'X size = %d,%d\'%(300,Sz)\n\tX = N.random.rand(300,Sz)\n\tY = N.random.rand(300,3)\n\tprint \'Attempting dot product of X and Y\'\n\tN.dot(X.T,Y)\n\tprint \'Finished without bug.\'\n\nResult (run through gdb): \n(There were a number of warnings like this - so many that they  went off the top of the screen and I couldn\'t copy them all. This  was typical of the warnings.)\n\nReading symbols for shared libraries warning: Could not find object file ""/opt/local/var/macports/build_opt_local_var_macports_sources_rsync.macports.org_release_ports_lang_python26/work/Python-2.6.4/build/temp.macosx-10.5-i386-2.6/opt/local/var/macports/build_opt_local_var_macports_sources_rsync.macports.org_release\n_ports_lang_python26/work/Python-2.6.4/Modules/_collectionsmodule.o"" - no debug information available for ""/opt/local/var/macports/build/_opt_local_var_macports_sources_rsync.macports.org_release_ports_lang_python26/work/Python-2.6.4/Modules/_collectionsmodule.c"".\n\n. done\nDemonstration of Numpy Bug:\nloading X (random numbers)\nX size = 300,10\nAttempting dot product of X and Y\nFinished without bug.\nX size = 300,20\nAttempting dot product of X and Y\nFinished without bug.\nX size = 300,30\nAttempting dot product of X and Y\nFinished without bug.\nX size = 300,40\nAttempting dot product of X and Y\nFinished without bug.\nX size = 300,50\nAttempting dot product of X and Y\nFinished without bug.\nX size = 300,60\nAttempting dot product of X and Y\n\nProgram received signal EXC_BAD_ACCESS, Could not access memory.\nReason: 13 at address: 0x00000000\n[Switching to process 55933 thread 0x117]\n0x01038884 in ATL_dupMBmm0_2_0_b0 ()\n\nHelp please (and thanks!),\n\nMark\n'"
1961,7729133,thouis,thouis,2012-10-19 20:59:11,2012-10-19 20:59:12,2012-10-19 20:59:12,closed,,,2,11 - Bug;component: Other;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1961,b'Test failures due to strange pylab/numpy interactions (Trac #1363)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/1363 on 2010-01-14 by @cournape, assigned to unknown._\n\nnumpy.test() pass every test on 1.4.0, but if pylab is imported, numpy is modified and some unicode-related tests are failing:\n\n\n\n    import numpy\n    # works\n    numpy.test()\n    import pylab\n    # 3 unicode failures\n    numpy.test()\n\n'"
1960,7729130,thouis,thouis,2012-10-19 20:59:08,2012-10-19 20:59:10,2012-10-19 20:59:10,closed,,,6,11 - Bug;component: Other;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1960,b'comparison operators (e.g. ==) on array with dtype object do not work (Trac #1362)',"b""_Original ticket http://projects.scipy.org/numpy/ticket/1362 on 2010-01-13 by @yarikoptic, assigned to unknown._\n\n\n\n    python -c 'import numpy as N; print N.__version__; a=N.array([1, (0,1)],dtype=object); print a==1; print a == (0,1),  a[1] == (0,1)'\n\n\nresults in\n\n\n    1.5.0.dev\n    [ True False]\n    [False False] True\n\n\nI expected last line to be\n\n\n    [False True] True\n\n\nSo, it works for int but doesn't work for tuple... I guess it doesn't try to compare element by element but does smth else."""
1959,7729129,thouis,seberg,2012-10-19 20:59:06,2013-02-09 10:29:54,2013-02-09 10:29:54,closed,,,5,11 - Bug;component: Other;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1959,b'repr for string item within array of dtype object is missing quotes (Trac #1361)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/1361 on 2010-01-13 by @yarikoptic, assigned to unknown._\n\nIn numpy version shipped with Debian\n\n\n    $> python -c ""from numpy import *; print __version__; r=repr(array([\'s\', None])); print r; eval(r)""\n    1.3.0\n    array([s, None], dtype=object)\n    Traceback (most recent call last):\n      File ""<string>"", line 1, in <module>\n      File ""<string>"", line 1, in <module>\n    NameError: name \'s\' is not defined\n\n\nas well as current trunk\n\n\n    $> python -c ""from numpy import *; print __version__; r=repr(array([\'s\', None])); print r; eval(r)""\n    1.5.0.dev\n    array([s, None], dtype=object)\n    Traceback (most recent call last):\n      File ""<string>"", line 1, in <module>\n      File ""<string>"", line 1, in <module>\n    NameError: name \'s\' is not defined\n\n\n'"
1957,7729125,thouis,thouis,2012-10-19 20:59:01,2012-10-19 20:59:03,2012-10-19 20:59:03,closed,,,1,11 - Bug;component: numpy.core;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1957,b'Python crashes in matplotlib with numpy r7465 (Trac #1359)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/1359 on 2010-01-12 by trac user jaraco, assigned to unknown._\n\nI\'ve run into an issue with numpy and matplotlib which crashes Python. I tracked the problem down to r7465 in subversion.\n\nIf I build and install r7464, then run python -c ""import matplotlib._path"", everything is fine.\n\nIf I update to r7465 or later, including the 1.4.0 release, and run the same Python command, Python crashes. I have not compiled /trunk (r8040)\n\nBecause it has something to do with the C api, it\'s not clear to me where it is failing or what I can do to track down the problem.\n\nI\'m using the 0.99.1 release of matplotlib, Python 2.6.4 64-bit on Windows, and numpy. I have Visual Studio 2008 Professional installed (and that\'s what Python is using to build numpy).\n\nI have confirmed the problem does not exhibit itself in 32-bit Python with numpy 1.4.0 and matplotlib 0.99.1, so the problem appears to be specific to the 64-bit build.\n\nCan someone with experience in numpy development (specifically around the changes relevant to r7465) review the code. I hope the cause is apparent and is an easy fix.\n\nIf not, please let me know how I can help track down the cause. Can you suggest a better test case to reproduce the problem that does not involve invoking matplotlib, perhaps using ctypes or a native numpy call?'"
1956,7729122,thouis,thouis,2012-10-19 20:59:00,2012-10-19 20:59:00,2012-10-19 20:59:00,closed,,,1,11 - Bug;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1956,b'broken link (Trac #1358)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/1358 on 2010-01-12 by trac user kilian, assigned to unknown._\n\nthe bug-report link http://numpy.scipy.org/bug-report.html \non the numpy home page http://numpy.scipy.org/ is broken.'"
1955,7729121,thouis,thouis,2012-10-19 20:58:58,2012-10-19 20:58:58,2012-10-19 20:58:58,closed,,,2,11 - Bug;component: numpy.core;priority: low,https://api.github.com/repos/numpy/numpy/issues/1955,b'initialization of large array produces strange result (Trac #1357)',"b""_Original ticket http://projects.scipy.org/numpy/ticket/1357 on 2010-01-12 by trac user kilian, assigned to unknown._\n\nInitialization of a ndarray with shape (2**16,2**16) produces a strange result (it doesn't seem to contain any data):\n\n> In [1]: np.zeros((2**16,2**16))\n> Out[1]: array([], shape=(65536, 65536), dtype=float64)\n\nInitialization of a much smaller array throws an exception:\n\n> In [2]: np.zeros((2**14,2**14))\n> ValueError: dimensions too large.\n\narray seems to be fixed in version 1.4.0"""
1954,7729119,thouis,thouis,2012-10-19 20:58:55,2012-10-19 20:58:56,2012-10-19 20:58:56,closed,,1.6.0,5,11 - Bug;component: numpy.lib;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1954,b'loadtxt() leaks memory (uncollectible gzip object) (Trac #1356)',"b""_Original ticket http://projects.scipy.org/numpy/ticket/1356 on 2010-01-10 by trac user maxy, assigned to unknown._\n\nloadtxt() leaves objects behind that the python garbage collector can't clean up. Probably not a big issue, but very annoying when hunting other memory leaks.\n\nIn [1]: from numpy import *\nIn [2]: import gc\nIn [3]: gc.collect(); gc.garbage\nOut[3]: 12\nOut[3]: []\nIn [4]: data = loadtxt('painting30sec.dat.gz')\nIn [5]: gc.collect(); gc.garbage\nOut[5]: 10\nOut[5]: [<gzip on 0x7f81c8578d88>]\nIn [6]: data = loadtxt('painting30sec.dat.gz')\nIn [7]: gc.collect(); gc.garbage\nOut[7]: 10\nOut[7]: [<gzip on 0x7f81c8578d88>, <gzip on 0x7f81c8583320>]"""
1953,7729117,thouis,thouis,2012-10-19 20:58:53,2012-10-19 20:58:54,2012-10-19 20:58:54,closed,,,1,11 - Bug;component: numpy.distutils;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1953,b'Patch for pyton-2.7 distutils (Trac #1355)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/1355 on 2010-01-10 by trac user bicatali, assigned to @cournape._\n\nHere is a small patch from our python team at Gentoo to install numpy with python 2.7:\n\nhttp://sources.gentoo.org/viewcvs.py/*checkout*/gentoo-x86/dev-python/numpy/files/numpy-1.4.0-python-2.7.patch\n'"
1951,7729113,thouis,charris,2012-10-19 20:58:49,2014-02-21 15:57:08,2014-02-21 15:57:08,closed,,,9,11 - Bug;component: Documentation;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1951,b'doc server error for numpy.var (Trac #1353)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/1353 on 2010-01-08 by @timmie, assigned to @pv._\r\n\r\nThe following URL shows an 500 internal server error:\r\nhttp://docs.scipy.org/doc/numpy/reference/generated/numpy.var.html'"
1950,7729112,thouis,njsmith,2012-10-19 20:58:47,2013-08-30 15:24:05,2013-08-30 15:24:05,closed,,,2,11 - Bug;component: numpy.core;priority: low,https://api.github.com/repos/numpy/numpy/issues/1950,"b""clip(out=...) doesn't respect write=False (Trac #1352)""","b'_Original ticket http://projects.scipy.org/numpy/ticket/1352 on 2010-01-06 by trac user quarl, assigned to unknown._\n\n\n\n    x = arange(5)\n    y = arange(5)\n    y.setflags(write=False)\n    x.clip(2, 3, out=y)\n\n\n\nBad result: wrote to y which should have been read-only\n\nWanted result: `ValueError: cannot copy back to a read-only array`\n\n(This does work as expected when x and y have different dtypes.)\n\n'"
1949,7729111,thouis,charris,2012-10-19 20:58:45,2014-02-18 23:46:04,2014-02-18 23:46:04,closed,,,5,11 - Bug;component: numpy.core;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1949,b'Pickling error with numpy.void object (Trac #1351)',"b""_Original ticket http://projects.scipy.org/numpy/ticket/1351 on 2010-01-06 by @wesm, assigned to unknown._\n\nI encountered this error after pickling a record from a structured array with NumPy 1.3. I was able to reproduce it with NumPy 1.4:\n\nPlease see the attached npy file with the data\n\n::\n  x = np.load('record.npy')\n  arr = np.array([x.item()], dtype='i8,f4,i4')\n  cPickle.loads(cPickle.dumps(arr[0]))\n\n"""
1948,7729110,thouis,thouis,2012-10-19 20:58:43,2012-10-19 20:58:44,2012-10-19 20:58:44,closed,,,0,11 - Bug;component: Other;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1948,b'Pickling error with numpy.void object (Trac #1350)',"b""_Original ticket http://projects.scipy.org/numpy/ticket/1350 on 2010-01-06 by @wesm, assigned to unknown._\n\nI encountered this error after pickling a record from a structured array with NumPy 1.3. I was able to reproduce it with NumPy 1.4:\n\nPlease see the attached npy file with the data\n\n::\n  x = np.load('record.npy')\n  arr = np.array([x.item()], dtype='i8,f4,i4')\n  cPickle.loads(cPickle.dumps(arr[0]))\n\n"""
1947,7729108,thouis,thouis,2012-10-19 20:58:40,2012-10-19 20:58:42,2012-10-19 20:58:42,closed,,1.5.1,5,11 - Bug;component: numpy.ma;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1947,b'Error when calling argsort on masked array (Trac #1349)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/1349 on 2010-01-06 by trac user pschella, assigned to @pierregm._\n\nWhen calling argsort on a masked array the following error is produced:\n\nTraceback (most recent call last):\n  File ""argsort_error.py"", line 13, in <module>\n    print np.argsort(x) # error\n  File ""/Library/Frameworks/Python.framework/Versions/2.6/lib/python2.6/site-packages/numpy/core/fromnumeric.py"", line 573, in argsort\n    return argsort(axis, kind, order)\n  File ""/Library/Frameworks/Python.framework/Versions/2.6/lib/python2.6/site-packages/numpy/ma/core.py"", line 4034, in argsort\n    return d.argsort(axis=axis, kind=kind, order=order)\nTypeError: expected string or Unicode object, NoneType found'"
1946,7729105,thouis,thouis,2012-10-19 20:58:38,2012-10-19 20:58:39,2012-10-19 20:58:39,closed,,,3,11 - Bug;component: Documentation;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1946,b'CHM of Numpy Reference Guide (development version) is outdated (Trac #1348)',"b""_Original ticket http://projects.scipy.org/numpy/ticket/1348 on 2010-01-05 by trac user petar, assigned to @pv._\n\n[http://docs.scipy.org/doc/numpy/numpy-chm.zip CHM of Numpy Reference Guide (development version] was last updated on March 7th, 2009.\n\nThere's probably a problem with the automatic doc builds."""
1944,7729103,thouis,charris,2012-10-19 20:58:35,2014-02-18 23:42:32,2014-02-18 23:42:32,closed,,,3,11 - Bug;component: Other;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1944,b'ERROR: Test filled w/ mvoid (Trac #1346)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/1346 on 2009-12-31 by @stsci-sienkiew, assigned to unknown._\n\n\n\n    ERROR: Test filled w/ mvoid\n    ----------------------------------------------------------------------\n    Traceback (most recent call last):\n      File ""/usr/stsci/pyssgdev/2.5.4/numpy/ma/tests/test_core.py"", line 506, in test_filled_w_mvoid\n        a = mvoid(np.array((1, 2)), mask=[(0, 1)], dtype=ndtype)\n      File ""/usr/stsci/pyssgdev/2.5.4/numpy/ma/core.py"", line 5454, in __new__\n        _data = ndarray.__new__(self, (), dtype=dtype, buffer=data.data)\n    TypeError: buffer is too small for requested array\n    \n    ----------------------------------------------------------------------\n\n\n\nNumPy version 1.5.0.dev8039\n\nPython 2.5.4\n\nhappens on:  Red Hat Enterprise 4 32 bit, Solaris 32 bit, Mac OSX Leopard 32 bit\n\ndoes not happen on: RHE 4 64 bit, RHE 5 64 bit\n'"
1943,7729099,thouis,thouis,2012-10-19 20:58:30,2012-10-19 20:58:33,2012-10-19 20:58:33,closed,,1.6.0,14,11 - Bug;component: numpy.core;priority: high,https://api.github.com/repos/numpy/numpy/issues/1943,b'test_multiarray.TestIO.test_ascii segmentation fault with Python 2.7 (Trac #1345)',"b""_Original ticket http://projects.scipy.org/numpy/ticket/1345 on 2009-12-23 by @bsouthey, assigned to unknown._\n\nInitially this was found with the SVN 1.5 series but also occurs in the 1.4 rc branch. The discussion about the SVN issues is:\n[http://mail.scipy.org/pipermail/numpy-discussion/2009-December/047481.html]\n\nFrom the test, the following should reproduce the crash:\nimport numpy as np\n\nfrom numpy.compat import asbytes, getexception\nnp.fromstring(asbytes('1 , 2 , 3 , 4'),sep=',')\n\n"""
1941,7729096,thouis,thouis,2012-10-19 20:58:25,2012-10-19 20:58:27,2012-10-19 20:58:27,closed,,,5,11 - Bug;component: Other;priority: low,https://api.github.com/repos/numpy/numpy/issues/1941,b'ImportError from umath.so on OSX 10.6 (Trac #1343)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/1343 on 2009-12-21 by @fonnesbeck, assigned to unknown._\n\nFor the past several weeks, I have been unable to build a working version of Numpy from svn checkout on 64-bit Python on OSX 10.6. The build itself is successful, but the resulting package gives an import error:\n\nIn [1]: import numpy\n------------------------------------------------------------\nTraceback (most recent call last):\n  File ""<ipython console>"", line 1, in <module>\n  File ""/Library/Python/2.6/site-packages/numpy-1.5.0.dev-py2.6-macosx-10.6-universal.egg/numpy/__init__.py"", line 132, in <module>\n    import add_newdocs\n  File ""/Library/Python/2.6/site-packages/numpy-1.5.0.dev-py2.6-macosx-10.6-universal.egg/numpy/add_newdocs.py"", line 9, in <module>\n    from numpy.lib import add_newdoc\n  File ""/Library/Python/2.6/site-packages/numpy-1.5.0.dev-py2.6-macosx-10.6-universal.egg/numpy/lib/__init__.py"", line 4, in <module>\n    from type_check import *\n  File ""/Library/Python/2.6/site-packages/numpy-1.5.0.dev-py2.6-macosx-10.6-universal.egg/numpy/lib/type_check.py"", line 8, in <module>\n    import numpy.core.numeric as _nx\n  File ""/Library/Python/2.6/site-packages/numpy-1.5.0.dev-py2.6-macosx-10.6-universal.egg/numpy/core/__init__.py"", line 6, in <module>\n    import umath\nImportError: dlopen(/Library/Python/2.6/site-packages/numpy-1.5.0.dev-py2.6-macosx-10.6-universal.egg/numpy/core/umath.so, 2): Symbol not found: _npy_cexp\n  Referenced from: /Library/Python/2.6/site-packages/numpy-1.5.0.dev-py2.6-macosx-10.6-universal.egg/numpy/core/umath.so\n  Expected in: flat namespace\n in /Library/Python/2.6/site-packages/numpy-1.5.0.dev-py2.6-macosx-10.6-universal.egg/numpy/core/umath.so\n\nThis has been occurring since at least rev 7726. Here is my build script:\n\n\n    #!/bin/sh\n    export MACOSX_DEPLOYMENT_TARGET=10.6\n    export CFLAGS=""-arch i386 -arch x86_64""\n    export FFLAGS=""-m32 -m64""\n    export LDFLAGS=""-Wall -undefined dynamic_lookup -bundle -arch i386 -arch x86_64""\n    export PYTHONPATH=""/Library/Python/2.6/site-packages/""\n    python setupegg.py config_fc --fcompiler gfortran config -L/Users/fonnesbeck/Code/libs build bdist_egg\n\n\nFollowing a suggestion, I have also tried without setting LDFLAGS, but the same result occurs. Here is the config.h that is generated, if that helps:\n\nhttp://files.me.com/fonnesbeck/d9eyxi\n'"
1939,7729093,thouis,rgommers,2012-10-19 20:58:23,2013-10-04 20:27:40,2013-10-04 20:27:40,closed,,,1,11 - Bug;component: Documentation;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1939,"b'remove doc strings for matrix attributes .T, .A, ... (Trac #1341)'","b'_Original ticket http://projects.scipy.org/numpy/ticket/1341 on 2009-12-19 by @josef-pkt, assigned to @pv._\n\nThe properties T, A, ... of matrices, do not pick up the docstrings form the corresponding getxxx functions. (as reported on mailing list)\n\nthis is a documentation improvement that needs source edit\n\n   in defmatrix.py:\n\n\n\n           T = property(getT, None, doc=""transpose"")\n           A = property(getA, None, doc=""base array"")\n           A1 = property(getA1, None, doc=""1-d base array"")\n           H = property(getH, None, doc=""hermitian (conjugate) transpose"")\n           I = property(getI, None, doc=""inverse"")\n\n\n\ncould take the docstrings from the getxxx function instead ?\n\nRalf:\n\nThat seems like a good idea. All that is needed is to delete the doc arguments for those five properties. '"
1938,7729092,thouis,charris,2012-10-19 20:58:21,2014-02-15 05:03:23,2014-02-15 05:03:23,closed,,NumPy 2.0,3,11 - Bug;component: numpy.core;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1938,"b""Searchsorted doesn't work with scalars. (Trac #1340)""","b'_Original ticket http://projects.scipy.org/numpy/ticket/1340 on 2009-12-19 by @charris, assigned to unknown._\n\n\n\n    In [1]: int64(0).searchsorted(0)\n    ---------------------------------------------------------------------------\n    ValueError                                Traceback (most recent call last)\n    \n    /home/charris/<ipython console> in <module>()\n    \n    ValueError: object of too small depth for desired array\n\n\n\n'"
1937,7729090,thouis,thouis,2012-10-19 20:58:19,2012-10-19 20:58:20,2012-10-19 20:58:20,closed,,,1,11 - Bug;component: Other;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1937,"b'segfault in argsort, sort (Trac #1339)'","b'_Original ticket http://projects.scipy.org/numpy/ticket/1339 on 2009-12-18 by @kwgoodman, assigned to unknown._\n\n\n\n    np.array(121).argsort(0).argsort(0)\n    Segmentation fault\n\n'"
1936,7729085,thouis,thouis,2012-10-19 20:58:17,2012-10-19 20:58:18,2012-10-19 20:58:18,closed,,,3,11 - Bug;component: Other;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1936,b'importing scipy.stats distributions throws an error: (Trac #1338)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/1338 on 2009-12-18 by trac user island_quant, assigned to unknown._\n\nPython 2.6.4\nNumpy: 1.4.0rc1\nScipy: 0.7.1\n\nSee the first command:  from scipy.stats import distributions.\n\nIt fails.  But I can immediately run it again and it works. So I am wrapping the call in a try: except: clause then importing again in the except: segment.\n\nHere is the simplest session in pylab.\n\n\n\nPython 2.6.4 (r264:75708, Oct 26 2009, 08:23:19) [MSC v.1500 32 bit (Intel)]\nType ""copyright"", ""credits"" or ""license"" for more information.\n\nIPython 0.10 -- An enhanced Interactive Python.\n?         -> Introduction and overview of IPython\'s features.\n%quickref -> Quick reference.\nhelp      -> Python\'s own help system.\nobject?   -> Details about \'object\'. ?object also works, ?? prints more.\n\n  Welcome to pylab, a matplotlib-based Python environment.\n  For more information, type \'help(pylab)\'.\n\nIn [1]: from scipy.stats import distributions\n---------------------------------------------------------------------------\nValueError                                Traceback (most recent call last)\n\nM:\\<ipython console> in <module>()\n\nC:\\Python26\\lib\\site-packages\\scipy\\stats\\__init__.py in <module>()\n      5 from info import __doc__\n      6\n----> 7 from stats import *\n      8 from distributions import *\n      9 from rv import *\n\nC:\\Python26\\lib\\site-packages\\scipy\\stats\\stats.py in <module>()\n    201\n    202 #import scipy.stats  #is this a circular import ?\n\n--> 203 from morestats import find_repeats #is only reference to scipy.stats\n    204 import distributions\n    205\n\nC:\\Python26\\lib\\site-packages\\scipy\\stats\\morestats.py in <module>()\n      5 import statlib\n      6 import stats\n----> 7 import distributions\n      8 from numpy import isscalar, r_, log, sum, around, unique, asarray\n      9 from numpy import zeros, arange, sort, amin, amax, any, where, \\\n\nC:\\Python26\\lib\\site-packages\\scipy\\stats\\distributions.py in <module>()\n     25 from scipy.special import gammaln as gamln\n     26 from copy import copy\n---> 27 import vonmises_cython\n     28 import textwrap\n     29\n\nM:\\numpy.pxd in scipy.stats.vonmises_cython (scipy\\stats\\vonmises_cython.c:2939)()\n\nValueError: numpy.dtype does not appear to be the correct type object\n\nIn [2]:'"
1935,7729084,thouis,charris,2012-10-19 20:58:14,2014-02-18 23:40:04,2014-02-18 23:40:04,closed,,,5,11 - Bug;component: numpy.core;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1935,b'error npy_cdouble definition is not compatible with C99 complex definition (Trac #1337)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/1337 on 2009-12-18 by trac user mayzel, assigned to unknown._\n\nI\'ve got the following errors after manual installation of numpy-1.4.0rc1\n\n/home/nmr5/local/lib/python2.6/site-packages/numpy/core/include/numpy/npy_common.h:120:2: #error npy_cdouble definition is not compatible with C99 complex definition ! Please contact Numpy maintainers and give detailed information about your compiler and platform\n/home/nmr5/local/lib/python2.6/site-packages/numpy/core/include/numpy/npy_common.h:127:2: #error npy_cfloat definition is not compatible with C99 complex definition ! Please contact Numpy maintainers and give detailed information about your compiler and platform\n/home/nmr5/local/lib/python2.6/site-packages/numpy/core/include/numpy/npy_common.h:134:2: #error npy_clongdouble definition is not compatible with C99 complex definition ! Please contact Numpy maintainers and give detailed information about your compiler and platform\nIn file included from /home/nmr5/local/lib/python2.6/site-packages/numpy/core/include/numpy/ndarrayobject.h:1258,\n                 from /home/nmr5/local/lib/python2.6/site-packages/numpy/core/include/numpy/arrayobject.h:14,\n                 from cov.c:144:\n/home/nmr5/local/lib/python2.6/site-packages/numpy/core/include/numpy/__multiarray_api.h: In function `_import_array\':\n/home/nmr5/local/lib/python2.6/site-packages/numpy/core/include/numpy/__multiarray_api.h:1202: error: `NPY_ABI_VERSION\' undeclared (first use in this function)\n/home/nmr5/local/lib/python2.6/site-packages/numpy/core/include/numpy/__multiarray_api.h:1202: error: (Each undeclared identifier is reported only once\n/home/nmr5/local/lib/python2.6/site-packages/numpy/core/include/numpy/__multiarray_api.h:1202: error: for each function it appears in.)\n/home/nmr5/local/lib/python2.6/site-packages/numpy/core/include/numpy/__multiarray_api.h:1208: error: `NPY_API_VERSION\' undeclared (first use in this function\n\nPython version and numpy configuration are:\nPython 2.6.4 (r264:75706, Dec 14 2009, 16:29:30) \n[GCC 3.4.6 20060404 (Red Hat 3.4.6-8)] on linux2\nType ""help"", ""copyright"", ""credits"" or ""license"" for more information.\n>>> import numpy\n>>> numpy.show_config()\natlas_threads_info:\n    libraries = [\'lapack\', \'clapack\', \'f77blas\', \'cblas\', \'atlas\']\n    library_dirs = [\'/home/nmr5/local/lib/\']\n    language = f77\n    include_dirs = [\'/home/nmr5/local/include\']\n\nblas_opt_info:\n    libraries = [\'clapack\', \'f77blas\', \'cblas\', \'atlas\']\n    library_dirs = [\'/home/nmr5/local/lib/\']\n    define_macros = [(\'ATLAS_INFO\', \'""\\\\""3.9.19\\\\""""\')]\n    language = c\n    include_dirs = [\'/home/nmr5/local/include\']\n\natlas_blas_threads_info:\n    libraries = [\'clapack\', \'f77blas\', \'cblas\', \'atlas\']\n    library_dirs = [\'/home/nmr5/local/lib/\']\n    language = c\n    include_dirs = [\'/home/nmr5/local/include\']\n\nlapack_opt_info:\n    libraries = [\'lapack\', \'clapack\', \'f77blas\', \'cblas\', \'atlas\']\n    library_dirs = [\'/home/nmr5/local/lib/\']\n    define_macros = [(\'ATLAS_INFO\', \'""\\\\""3.9.19\\\\""""\')]\n    language = f77\n    include_dirs = [\'/home/nmr5/local/include\']\n\nlapack_mkl_info:\n  NOT AVAILABLE\n\nblas_mkl_info:\n  NOT AVAILABLE\n\nmkl_info:\n  NOT AVAILABLE\n\ngcc is \nnmr5@gly.nmr.gu.se:/home/nmr5/sampler> gcc -v\nReading specs from /usr/lib/gcc/x86_64-redhat-linux/3.4.6/specs\nConfigured with: ../configure --prefix=/usr --mandir=/usr/share/man --infodir=/usr/share/info --enable-shared --enable-threads=posix --disable-checking --with-system-zlib --enable-__cxa_atexit --disable-libunwind-exceptions --enable-java-awt=gtk --host=x86_64-redhat-linux\nThread model: posix\ngcc version 3.4.6 20060404 (Red Hat 3.4.6-8)\n\nI\'m using CentOS release 4.5 (Final) on cluster with \nLinux version 2.6.9-55.ELsmp (mockbuild@builder6.centos.org) (gcc version 3.4.6 20060404 (Red Hat 3.4.6-8)) #1 SMP Wed May 2 14:04:42 EDT 2007\n'"
1934,7729077,thouis,thouis,2012-10-19 20:58:07,2012-10-19 20:58:13,2012-10-19 20:58:13,closed,,1.6.0,18,11 - Bug;component: numpy.core;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1934,b'Fix for 1299 exposes Bus error on Sparc (Trac #1336)',"b""_Original ticket http://projects.scipy.org/numpy/ticket/1336 on 2009-12-18 by @drnlm, assigned to unknown._\n\nThe test case for the fix for 1299 results in a bus error on sparc in nonzero.\n\nI haven't looked closely at why yet, but it looks like a existing bug that's being exposed by the test, rather than anything introduced by the fix.\n\n"""
1933,7729075,thouis,thouis,2012-10-19 20:58:05,2012-10-19 20:58:05,2012-10-19 20:58:05,closed,,,2,11 - Bug;component: Other;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1933,b'segfault in vdot (Trac #1335)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/1335 on 2009-12-17 by @nbecker, assigned to unknown._\n\nIt appears vdot does not check the length of the input vectors.'"
1932,7729072,thouis,thouis,2012-10-19 20:58:02,2012-10-23 02:42:54,2012-10-19 20:58:03,closed,,1.4.1,2,11 - Bug;component: Official binaries;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1932,b'multiarray.so returns mysterious error on import in OSX 10.5.8 (Trac #1334)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/1334 on 2009-12-17 by trac user Tazlor, assigned to @cournape._\n\nI have installed the NumPy 1.4.0rc1 package from sourceforge for python 2.6 on OSX 10.5.8. 2.6 is the version of my Macpython installation, the system python remains 2.5.\n\n""import numpy"" in 2.6 returns an ImportError on the file multiarray.so. Here are the last few lines of the error traceback:\n\n ImportError: dlopen(/Library/Frameworks/Python.framework/Versions/2.6/lib/python2.6/site-packages/numpy/core/multiarray.so, 2): no suitable image found.  Did find:\n\t/Library/Frameworks/Python.framework/Versions/2.6/lib/python2.6/site-packages/numpy/core/multiarray.so: unknown required load command 0x80000022\n\nThe file multiarray.so does exist in that directory.\nStrangely, the system python (2.5) can import NumPy without incident. I have tried to receive help on this problem in a google groups conversation (http://groups.google.com/group/comp.lang.python/browse_thread/thread/03620cbf3f202353) and another person has confirmed experiencing the same symptoms.\n\nBelow I have copied the full output of ""import numpy"" with gdb. The traceback appears at the end. By the way, I don\'t have any user called ""ronald"".\n\nLast login: Thu Dec 17 02:18:15 on ttys000\nPolaris:~ kevin$ gdb python\nGNU gdb 6.3.50-20050815 (Apple version gdb-962) (Sat Jul 26 08:14:40 UTC 2008)\nCopyright 2004 Free Software Foundation, Inc.\nGDB is free software, covered by the GNU General Public License, and you are\nwelcome to change it and/or distribute copies of it under certain conditions.\nType ""show copying"" to see the conditions.\nThere is absolutely no warranty for GDB.  Type ""show warranty"" for details.\nThis GDB was configured as ""i386-apple-darwin""...Reading symbols for shared libraries .. done\n\n(gdb) run -c ""import numpy""\nStarting program: /Library/Frameworks/Python.framework/Versions/2.6/bin/python -c ""import numpy""\nReading symbols for shared libraries +. done\n\nProgram received signal SIGTRAP, Trace/breakpoint trap.\n0x8fe01010 in __dyld__dyld_start ()\n(gdb) c\nContinuing.\nReading symbols for shared libraries warning: Could not find object file ""/private/tmp/_py/_bld/python/libpython2.6.a(getbuildinfo.o)"" - no debug information available for ""/Users/ronald/Projects/python/r263/Modules/getbuildinfo.c"".\n\nwarning: Could not find object file ""/private/tmp/_py/_bld/python/libpython2.6.a(acceler.o)"" - no debug information available for ""/Users/ronald/Projects/python/r263/Parser/acceler.c"".\n\nwarning: Could not find object file ""/private/tmp/_py/_bld/python/libpython2.6.a(grammar1.o)"" - no debug information available for ""/Users/ronald/Projects/python/r263/Parser/grammar1.c"".\n\nwarning: Could not find object file ""/private/tmp/_py/_bld/python/libpython2.6.a(listnode.o)"" - no debug information available for ""/Users/ronald/Projects/python/r263/Parser/listnode.c"".\n\nwarning: Could not find object file ""/private/tmp/_py/_bld/python/libpython2.6.a(node.o)"" - no debug information available for ""/Users/ronald/Projects/python/r263/Parser/node.c"".\n\nwarning: Could not find object file ""/private/tmp/_py/_bld/python/libpython2.6.a(parser.o)"" - no debug information available for ""/Users/ronald/Projects/python/r263/Parser/parser.c"".\n\nwarning: Could not find object file ""/private/tmp/_py/_bld/python/libpython2.6.a(parsetok.o)"" - no debug information available for ""/Users/ronald/Projects/python/r263/Parser/parsetok.c"".\n\nwarning: Could not find object file ""/private/tmp/_py/_bld/python/libpython2.6.a(bitset.o)"" - no debug information available for ""/Users/ronald/Projects/python/r263/Parser/bitset.c"".\n\nwarning: Could not find object file ""/private/tmp/_py/_bld/python/libpython2.6.a(metagrammar.o)"" - no debug information available for ""/Users/ronald/Projects/python/r263/Parser/metagrammar.c"".\n\nwarning: Could not find object file ""/private/tmp/_py/_bld/python/libpython2.6.a(firstsets.o)"" - no debug information available for ""/Users/ronald/Projects/python/r263/Parser/firstsets.c"".\n\nwarning: Could not find object file ""/private/tmp/_py/_bld/python/libpython2.6.a(grammar.o)"" - no debug information available for ""/Users/ronald/Projects/python/r263/Parser/grammar.c"".\n\nwarning: Could not find object file ""/private/tmp/_py/_bld/python/libpython2.6.a(pgen.o)"" - no debug information available for ""/Users/ronald/Projects/python/r263/Parser/pgen.c"".\n\nwarning: Could not find object file ""/private/tmp/_py/_bld/python/libpython2.6.a(myreadline.o)"" - no debug information available for ""/Users/ronald/Projects/python/r263/Parser/myreadline.c"".\n\nwarning: Could not find object file ""/private/tmp/_py/_bld/python/libpython2.6.a(tokenizer.o)"" - no debug information available for ""/Users/ronald/Projects/python/r263/Parser/tokenizer.c"".\n\nwarning: Could not find object file ""/private/tmp/_py/_bld/python/libpython2.6.a(abstract.o)"" - no debug information available for ""/Users/ronald/Projects/python/r263/Objects/abstract.c"".\n\nwarning: Could not find object file ""/private/tmp/_py/_bld/python/libpython2.6.a(boolobject.o)"" - no debug information available for ""/Users/ronald/Projects/python/r263/Objects/boolobject.c"".\n\nwarning: Could not find object file ""/private/tmp/_py/_bld/python/libpython2.6.a(bufferobject.o)"" - no debug information available for ""/Users/ronald/Projects/python/r263/Objects/bufferobject.c"".\n\nwarning: Could not find object file ""/private/tmp/_py/_bld/python/libpython2.6.a(bytes_methods.o)"" - no debug information available for ""/Users/ronald/Projects/python/r263/Objects/bytes_methods.c"".\n\nwarning: Could not find object file ""/private/tmp/_py/_bld/python/libpython2.6.a(bytearrayobject.o)"" - no debug information available for ""/Users/ronald/Projects/python/r263/Objects/bytearrayobject.c"".\n\nwarning: Could not find object file ""/private/tmp/_py/_bld/python/libpython2.6.a(cellobject.o)"" - no debug information available for ""/Users/ronald/Projects/python/r263/Objects/cellobject.c"".\n\nwarning: Could not find object file ""/private/tmp/_py/_bld/python/libpython2.6.a(classobject.o)"" - no debug information available for ""/Users/ronald/Projects/python/r263/Objects/classobject.c"".\n\nwarning: Could not find object file ""/private/tmp/_py/_bld/python/libpython2.6.a(cobject.o)"" - no debug information available for ""/Users/ronald/Projects/python/r263/Objects/cobject.c"".\n\nwarning: Could not find object file ""/private/tmp/_py/_bld/python/libpython2.6.a(codeobject.o)"" - no debug information available for ""/Users/ronald/Projects/python/r263/Objects/codeobject.c"".\n\nwarning: Could not find object file ""/private/tmp/_py/_bld/python/libpython2.6.a(complexobject.o)"" - no debug information available for ""/Users/ronald/Projects/python/r263/Objects/complexobject.c"".\n\nwarning: Could not find object file ""/private/tmp/_py/_bld/python/libpython2.6.a(descrobject.o)"" - no debug information available for ""/Users/ronald/Projects/python/r263/Objects/descrobject.c"".\n\nwarning: Could not find object file ""/private/tmp/_py/_bld/python/libpython2.6.a(enumobject.o)"" - no debug information available for ""/Users/ronald/Projects/python/r263/Objects/enumobject.c"".\n\nwarning: Could not find object file ""/private/tmp/_py/_bld/python/libpython2.6.a(exceptions.o)"" - no debug information available for ""/Users/ronald/Projects/python/r263/Objects/exceptions.c"".\n\nwarning: Could not find object file ""/private/tmp/_py/_bld/python/libpython2.6.a(genobject.o)"" - no debug information available for ""/Users/ronald/Projects/python/r263/Objects/genobject.c"".\n\nwarning: Could not find object file ""/private/tmp/_py/_bld/python/libpython2.6.a(fileobject.o)"" - no debug information available for ""/Users/ronald/Projects/python/r263/Objects/fileobject.c"".\n\nwarning: Could not find object file ""/private/tmp/_py/_bld/python/libpython2.6.a(floatobject.o)"" - no debug information available for ""/Users/ronald/Projects/python/r263/Objects/floatobject.c"".\n\nwarning: Could not find object file ""/private/tmp/_py/_bld/python/libpython2.6.a(frameobject.o)"" - no debug information available for ""/Users/ronald/Projects/python/r263/Objects/frameobject.c"".\n\nwarning: Could not find object file ""/private/tmp/_py/_bld/python/libpython2.6.a(funcobject.o)"" - no debug information available for ""/Users/ronald/Projects/python/r263/Objects/funcobject.c"".\n\nwarning: Could not find object file ""/private/tmp/_py/_bld/python/libpython2.6.a(intobject.o)"" - no debug information available for ""/Users/ronald/Projects/python/r263/Objects/intobject.c"".\n\nwarning: Could not find object file ""/private/tmp/_py/_bld/python/libpython2.6.a(iterobject.o)"" - no debug information available for ""/Users/ronald/Projects/python/r263/Objects/iterobject.c"".\n\nwarning: Could not find object file ""/private/tmp/_py/_bld/python/libpython2.6.a(listobject.o)"" - no debug information available for ""/Users/ronald/Projects/python/r263/Objects/listobject.c"".\n\nwarning: Could not find object file ""/private/tmp/_py/_bld/python/libpython2.6.a(longobject.o)"" - no debug information available for ""/Users/ronald/Projects/python/r263/Objects/longobject.c"".\n\nwarning: Could not find object file ""/private/tmp/_py/_bld/python/libpython2.6.a(dictobject.o)"" - no debug information available for ""/Users/ronald/Projects/python/r263/Objects/dictobject.c"".\n\nwarning: Could not find object file ""/private/tmp/_py/_bld/python/libpython2.6.a(methodobject.o)"" - no debug information available for ""/Users/ronald/Projects/python/r263/Objects/methodobject.c"".\n\nwarning: Could not find object file ""/private/tmp/_py/_bld/python/libpython2.6.a(moduleobject.o)"" - no debug information available for ""/Users/ronald/Projects/python/r263/Objects/moduleobject.c"".\n\nwarning: Could not find object file ""/private/tmp/_py/_bld/python/libpython2.6.a(object.o)"" - no debug information available for ""/Users/ronald/Projects/python/r263/Objects/object.c"".\n\nwarning: Could not find object file ""/private/tmp/_py/_bld/python/libpython2.6.a(obmalloc.o)"" - no debug information available for ""/Users/ronald/Projects/python/r263/Objects/obmalloc.c"".\n\nwarning: Could not find object file ""/private/tmp/_py/_bld/python/libpython2.6.a(rangeobject.o)"" - no debug information available for ""/Users/ronald/Projects/python/r263/Objects/rangeobject.c"".\n\nwarning: Could not find object file ""/private/tmp/_py/_bld/python/libpython2.6.a(setobject.o)"" - no debug information available for ""/Users/ronald/Projects/python/r263/Objects/setobject.c"".\n\nwarning: Could not find object file ""/private/tmp/_py/_bld/python/libpython2.6.a(sliceobject.o)"" - no debug information available for ""/Users/ronald/Projects/python/r263/Objects/sliceobject.c"".\n\nwarning: Could not find object file ""/private/tmp/_py/_bld/python/libpython2.6.a(stringobject.o)"" - no debug information available for ""/Users/ronald/Projects/python/r263/Objects/stringobject.c"".\n\nwarning: Could not find object file ""/private/tmp/_py/_bld/python/libpython2.6.a(structseq.o)"" - no debug information available for ""/Users/ronald/Projects/python/r263/Objects/structseq.c"".\n\nwarning: Could not find object file ""/private/tmp/_py/_bld/python/libpython2.6.a(tupleobject.o)"" - no debug information available for ""/Users/ronald/Projects/python/r263/Objects/tupleobject.c"".\n\nwarning: Could not find object file ""/private/tmp/_py/_bld/python/libpython2.6.a(typeobject.o)"" - no debug information available for ""/Users/ronald/Projects/python/r263/Objects/typeobject.c"".\n\nwarning: Could not find object file ""/private/tmp/_py/_bld/python/libpython2.6.a(weakrefobject.o)"" - no debug information available for ""/Users/ronald/Projects/python/r263/Objects/weakrefobject.c"".\n\nwarning: Could not find object file ""/private/tmp/_py/_bld/python/libpython2.6.a(unicodeobject.o)"" - no debug information available for ""/Users/ronald/Projects/python/r263/Objects/unicodeobject.c"".\n\nwarning: Could not find object file ""/private/tmp/_py/_bld/python/libpython2.6.a(unicodectype.o)"" - no debug information available for ""/Users/ronald/Projects/python/r263/Objects/unicodectype.c"".\n\nwarning: Could not find object file ""/private/tmp/_py/_bld/python/libpython2.6.a(_warnings.o)"" - no debug information available for ""/Users/ronald/Projects/python/r263/Python/_warnings.c"".\n\nwarning: Could not find object file ""/private/tmp/_py/_bld/python/libpython2.6.a(Python-ast.o)"" - no debug information available for ""/Users/ronald/Projects/python/r263/Python/Python-ast.c"".\n\nwarning: Could not find object file ""/private/tmp/_py/_bld/python/libpython2.6.a(asdl.o)"" - no debug information available for ""/Users/ronald/Projects/python/r263/Python/asdl.c"".\n\nwarning: Could not find object file ""/private/tmp/_py/_bld/python/libpython2.6.a(ast.o)"" - no debug information available for ""/Users/ronald/Projects/python/r263/Python/ast.c"".\n\nwarning: Could not find object file ""/private/tmp/_py/_bld/python/libpython2.6.a(bltinmodule.o)"" - no debug information available for ""/Users/ronald/Projects/python/r263/Python/bltinmodule.c"".\n\nwarning: Could not find object file ""/private/tmp/_py/_bld/python/libpython2.6.a(ceval.o)"" - no debug information available for ""/Users/ronald/Projects/python/r263/Python/ceval.c"".\n\nwarning: Could not find object file ""/private/tmp/_py/_bld/python/libpython2.6.a(compile.o)"" - no debug information available for ""/Users/ronald/Projects/python/r263/Python/compile.c"".\n\nwarning: Could not find object file ""/private/tmp/_py/_bld/python/libpython2.6.a(codecs.o)"" - no debug information available for ""/Users/ronald/Projects/python/r263/Python/codecs.c"".\n\nwarning: Could not find object file ""/private/tmp/_py/_bld/python/libpython2.6.a(errors.o)"" - no debug information available for ""/Users/ronald/Projects/python/r263/Python/errors.c"".\n\nwarning: Could not find object file ""/private/tmp/_py/_bld/python/libpython2.6.a(frozen.o)"" - no debug information available for ""/Users/ronald/Projects/python/r263/Python/frozen.c"".\n\nwarning: Could not find object file ""/private/tmp/_py/_bld/python/libpython2.6.a(frozenmain.o)"" - no debug information available for ""/Users/ronald/Projects/python/r263/Python/frozenmain.c"".\n\nwarning: Could not find object file ""/private/tmp/_py/_bld/python/libpython2.6.a(future.o)"" - no debug information available for ""/Users/ronald/Projects/python/r263/Python/future.c"".\n\nwarning: Could not find object file ""/private/tmp/_py/_bld/python/libpython2.6.a(getargs.o)"" - no debug information available for ""/Users/ronald/Projects/python/r263/Python/getargs.c"".\n\nwarning: Could not find object file ""/private/tmp/_py/_bld/python/libpython2.6.a(getcompiler.o)"" - no debug information available for ""/Users/ronald/Projects/python/r263/Python/getcompiler.c"".\n\nwarning: Could not find object file ""/private/tmp/_py/_bld/python/libpython2.6.a(getcopyright.o)"" - no debug information available for ""/Users/ronald/Projects/python/r263/Python/getcopyright.c"".\n\nwarning: Could not find object file ""/private/tmp/_py/_bld/python/libpython2.6.a(getmtime.o)"" - no debug information available for ""/Users/ronald/Projects/python/r263/Python/getmtime.c"".\n\nwarning: Could not find object file ""/private/tmp/_py/_bld/python/libpython2.6.a(getplatform.o)"" - no debug information available for ""/Users/ronald/Projects/python/r263/Python/getplatform.c"".\n\nwarning: Could not find object file ""/private/tmp/_py/_bld/python/libpython2.6.a(getversion.o)"" - no debug information available for ""/Users/ronald/Projects/python/r263/Python/getversion.c"".\n\nwarning: Could not find object file ""/private/tmp/_py/_bld/python/libpython2.6.a(graminit.o)"" - no debug information available for ""/Users/ronald/Projects/python/r263/Python/graminit.c"".\n\nwarning: Could not find object file ""/private/tmp/_py/_bld/python/libpython2.6.a(import.o)"" - no debug information available for ""/Users/ronald/Projects/python/r263/Python/import.c"".\n\nwarning: Could not find object file ""/private/tmp/_py/_bld/python/libpython2.6.a(importdl.o)"" - no debug information available for ""/Users/ronald/Projects/python/r263/Python/importdl.c"".\n\nwarning: Could not find object file ""/private/tmp/_py/_bld/python/libpython2.6.a(marshal.o)"" - no debug information available for ""/Users/ronald/Projects/python/r263/Python/marshal.c"".\n\nwarning: Could not find object file ""/private/tmp/_py/_bld/python/libpython2.6.a(modsupport.o)"" - no debug information available for ""/Users/ronald/Projects/python/r263/Python/modsupport.c"".\n\nwarning: Could not find object file ""/private/tmp/_py/_bld/python/libpython2.6.a(mystrtoul.o)"" - no debug information available for ""/Users/ronald/Projects/python/r263/Python/mystrtoul.c"".\n\nwarning: Could not find object file ""/private/tmp/_py/_bld/python/libpython2.6.a(mysnprintf.o)"" - no debug information available for ""/Users/ronald/Projects/python/r263/Python/mysnprintf.c"".\n\nwarning: Could not find object file ""/private/tmp/_py/_bld/python/libpython2.6.a(peephole.o)"" - no debug information available for ""/Users/ronald/Projects/python/r263/Python/peephole.c"".\n\nwarning: Could not find object file ""/private/tmp/_py/_bld/python/libpython2.6.a(pyarena.o)"" - no debug information available for ""/Users/ronald/Projects/python/r263/Python/pyarena.c"".\n\nwarning: Could not find object file ""/private/tmp/_py/_bld/python/libpython2.6.a(pyfpe.o)"" - no debug information available for ""/Users/ronald/Projects/python/r263/Python/pyfpe.c"".\n\nwarning: Could not find object file ""/private/tmp/_py/_bld/python/libpython2.6.a(pystate.o)"" - no debug information available for ""/Users/ronald/Projects/python/r263/Python/pystate.c"".\n\nwarning: Could not find object file ""/private/tmp/_py/_bld/python/libpython2.6.a(pythonrun.o)"" - no debug information available for ""/Users/ronald/Projects/python/r263/Python/pythonrun.c"".\n\nwarning: Could not find object file ""/private/tmp/_py/_bld/python/libpython2.6.a(structmember.o)"" - no debug information available for ""/Users/ronald/Projects/python/r263/Python/structmember.c"".\n\nwarning: Could not find object file ""/private/tmp/_py/_bld/python/libpython2.6.a(symtable.o)"" - no debug information available for ""/Users/ronald/Projects/python/r263/Python/symtable.c"".\n\nwarning: Could not find object file ""/private/tmp/_py/_bld/python/libpython2.6.a(sysmodule.o)"" - no debug information available for ""/Users/ronald/Projects/python/r263/Python/sysmodule.c"".\n\nwarning: Could not find object file ""/private/tmp/_py/_bld/python/libpython2.6.a(traceback.o)"" - no debug information available for ""/Users/ronald/Projects/python/r263/Python/traceback.c"".\n\nwarning: Could not find object file ""/private/tmp/_py/_bld/python/libpython2.6.a(getopt.o)"" - no debug information available for ""/Users/ronald/Projects/python/r263/Python/getopt.c"".\n\nwarning: Could not find object file ""/private/tmp/_py/_bld/python/libpython2.6.a(pystrcmp.o)"" - no debug information available for ""/Users/ronald/Projects/python/r263/Python/pystrcmp.c"".\n\nwarning: Could not find object file ""/private/tmp/_py/_bld/python/libpython2.6.a(pystrtod.o)"" - no debug information available for ""/Users/ronald/Projects/python/r263/Python/pystrtod.c"".\n\nwarning: Could not find object file ""/private/tmp/_py/_bld/python/libpython2.6.a(formatter_unicode.o)"" - no debug information available for ""/Users/ronald/Projects/python/r263/Python/formatter_unicode.c"".\n\nwarning: Could not find object file ""/private/tmp/_py/_bld/python/libpython2.6.a(formatter_string.o)"" - no debug information available for ""/Users/ronald/Projects/python/r263/Python/formatter_string.c"".\n\nwarning: Could not find object file ""/private/tmp/_py/_bld/python/libpython2.6.a(dynload_shlib.o)"" - no debug information available for ""/Users/ronald/Projects/python/r263/Python/dynload_shlib.c"".\n\nwarning: Could not find object file ""/private/tmp/_py/_bld/python/libpython2.6.a(mactoolboxglue.o)"" - no debug information available for ""/Users/ronald/Projects/python/r263/Python/mactoolboxglue.c"".\n\nwarning: Could not find object file ""/private/tmp/_py/_bld/python/libpython2.6.a(thread.o)"" - no debug information available for ""/Users/ronald/Projects/python/r263/Python/thread.c"".\n\nwarning: Could not find object file ""/private/tmp/_py/_bld/python/libpython2.6.a(config.o)"" - no debug information available for ""Modules/config.c"".\n\nwarning: Could not find object file ""/private/tmp/_py/_bld/python/libpython2.6.a(getpath.o)"" - no debug information available for ""/Users/ronald/Projects/python/r263/Modules/getpath.c"".\n\nwarning: Could not find object file ""/private/tmp/_py/_bld/python/libpython2.6.a(main.o)"" - no debug information available for ""/Users/ronald/Projects/python/r263/Modules/main.c"".\n\nwarning: Could not find object file ""/private/tmp/_py/_bld/python/libpython2.6.a(gcmodule.o)"" - no debug information available for ""/Users/ronald/Projects/python/r263/Modules/gcmodule.c"".\n\nwarning: Could not find object file ""/private/tmp/_py/_bld/python/libpython2.6.a(threadmodule.o)"" - no debug information available for ""/Users/ronald/Projects/python/r263/Modules/threadmodule.c"".\n\nwarning: Could not find object file ""/private/tmp/_py/_bld/python/libpython2.6.a(signalmodule.o)"" - no debug information available for ""/Users/ronald/Projects/python/r263/Modules/signalmodule.c"".\n\nwarning: Could not find object file ""/private/tmp/_py/_bld/python/libpython2.6.a(posixmodule.o)"" - no debug information available for ""/Users/ronald/Projects/python/r263/Modules/posixmodule.c"".\n\nwarning: Could not find object file ""/private/tmp/_py/_bld/python/libpython2.6.a(errnomodule.o)"" - no debug information available for ""/Users/ronald/Projects/python/r263/Modules/errnomodule.c"".\n\nwarning: Could not find object file ""/private/tmp/_py/_bld/python/libpython2.6.a(pwdmodule.o)"" - no debug information available for ""/Users/ronald/Projects/python/r263/Modules/pwdmodule.c"".\n\nwarning: Could not find object file ""/private/tmp/_py/_bld/python/libpython2.6.a(_sre.o)"" - no debug information available for ""/Users/ronald/Projects/python/r263/Modules/_sre.c"".\n\nwarning: Could not find object file ""/private/tmp/_py/_bld/python/libpython2.6.a(_codecsmodule.o)"" - no debug information available for ""/Users/ronald/Projects/python/r263/Modules/_codecsmodule.c"".\n\nwarning: Could not find object file ""/private/tmp/_py/_bld/python/libpython2.6.a(zipimport.o)"" - no debug information available for ""/Users/ronald/Projects/python/r263/Modules/zipimport.c"".\n\nwarning: Could not find object file ""/private/tmp/_py/_bld/python/libpython2.6.a(symtablemodule.o)"" - no debug information available for ""/Users/ronald/Projects/python/r263/Modules/symtablemodule.c"".\n\nwarning: Could not find object file ""/private/tmp/_py/_bld/python/libpython2.6.a(xxsubtype.o)"" - no debug information available for ""/Users/ronald/Projects/python/r263/Modules/xxsubtype.c"".\n\nwarning: .o file ""/Developer/SDKs/MacOSX10.4u.sdk/usr/lib/gcc/i686-apple-darwin9/4.0.1/libgcc.a(_muldi3.o)"" more recent than executable timestamp\nwarning: .o file ""/Developer/SDKs/MacOSX10.4u.sdk/usr/lib/gcc/i686-apple-darwin9/4.0.1/libgcc.a(_negdi2.o)"" more recent than executable timestamp\nwarning: .o file ""/Developer/SDKs/MacOSX10.4u.sdk/usr/lib/gcc/i686-apple-darwin9/4.0.1/libgcc.a(_lshrdi3.o)"" more recent than executable timestamp\nwarning: .o file ""/Developer/SDKs/MacOSX10.4u.sdk/usr/lib/gcc/i686-apple-darwin9/4.0.1/libgcc.a(_ashldi3.o)"" more recent than executable timestamp\nwarning: .o file ""/Developer/SDKs/MacOSX10.4u.sdk/usr/lib/gcc/i686-apple-darwin9/4.0.1/libgcc.a(_ashrdi3.o)"" more recent than executable timestamp\nwarning: .o file ""/Developer/SDKs/MacOSX10.4u.sdk/usr/lib/gcc/i686-apple-darwin9/4.0.1/libgcc.a(_cmpdi2.o)"" more recent than executable timestamp\nwarning: .o file ""/Developer/SDKs/MacOSX10.4u.sdk/usr/lib/gcc/i686-apple-darwin9/4.0.1/libgcc.a(_ucmpdi2.o)"" more recent than executable timestamp\nwarning: .o file ""/Developer/SDKs/MacOSX10.4u.sdk/usr/lib/gcc/i686-apple-darwin9/4.0.1/libgcc.a(_floatdidf.o)"" more recent than executable timestamp\nwarning: .o file ""/Developer/SDKs/MacOSX10.4u.sdk/usr/lib/gcc/i686-apple-darwin9/4.0.1/libgcc.a(_floatdisf.o)"" more recent than executable timestamp\nwarning: .o file ""/Developer/SDKs/MacOSX10.4u.sdk/usr/lib/gcc/i686-apple-darwin9/4.0.1/libgcc.a(_fixunsdfsi.o)"" more recent than executable timestamp\nwarning: .o file ""/Developer/SDKs/MacOSX10.4u.sdk/usr/lib/gcc/i686-apple-darwin9/4.0.1/libgcc.a(_fixunssfsi.o)"" more recent than executable timestamp\nwarning: .o file ""/Developer/SDKs/MacOSX10.4u.sdk/usr/lib/gcc/i686-apple-darwin9/4.0.1/libgcc.a(_fixunsdfdi.o)"" more recent than executable timestamp\nwarning: .o file ""/Developer/SDKs/MacOSX10.4u.sdk/usr/lib/gcc/i686-apple-darwin9/4.0.1/libgcc.a(_fixdfdi.o)"" more recent than executable timestamp\nwarning: .o file ""/Developer/SDKs/MacOSX10.4u.sdk/usr/lib/gcc/i686-apple-darwin9/4.0.1/libgcc.a(_fixunssfdi.o)"" more recent than executable timestamp\nwarning: .o file ""/Developer/SDKs/MacOSX10.4u.sdk/usr/lib/gcc/i686-apple-darwin9/4.0.1/libgcc.a(_fixsfdi.o)"" more recent than executable timestamp\nwarning: .o file ""/Developer/SDKs/MacOSX10.4u.sdk/usr/lib/gcc/i686-apple-darwin9/4.0.1/libgcc.a(_fixxfdi.o)"" more recent than executable timestamp\nwarning: .o file ""/Developer/SDKs/MacOSX10.4u.sdk/usr/lib/gcc/i686-apple-darwin9/4.0.1/libgcc.a(_fixunsxfdi.o)"" more recent than executable timestamp\nwarning: .o file ""/Developer/SDKs/MacOSX10.4u.sdk/usr/lib/gcc/i686-apple-darwin9/4.0.1/libgcc.a(_floatdixf.o)"" more recent than executable timestamp\nwarning: .o file ""/Developer/SDKs/MacOSX10.4u.sdk/usr/lib/gcc/i686-apple-darwin9/4.0.1/libgcc.a(_fixunsxfsi.o)"" more recent than executable timestamp\nwarning: .o file ""/Developer/SDKs/MacOSX10.4u.sdk/usr/lib/gcc/i686-apple-darwin9/4.0.1/libgcc.a(_clear_cache.o)"" more recent than executable timestamp\nwarning: .o file ""/Developer/SDKs/MacOSX10.4u.sdk/usr/lib/gcc/i686-apple-darwin9/4.0.1/libgcc.a(_enable_execute_stack.o)"" more recent than executable timestamp\nwarning: .o file ""/Developer/SDKs/MacOSX10.4u.sdk/usr/lib/gcc/i686-apple-darwin9/4.0.1/libgcc.a(__main.o)"" more recent than executable timestamp\nwarning: .o file ""/Developer/SDKs/MacOSX10.4u.sdk/usr/lib/gcc/i686-apple-darwin9/4.0.1/libgcc.a(_absvsi2.o)"" more recent than executable timestamp\nwarning: .o file ""/Developer/SDKs/MacOSX10.4u.sdk/usr/lib/gcc/i686-apple-darwin9/4.0.1/libgcc.a(_absvdi2.o)"" more recent than executable timestamp\nwarning: .o file ""/Developer/SDKs/MacOSX10.4u.sdk/usr/lib/gcc/i686-apple-darwin9/4.0.1/libgcc.a(_addvsi3.o)"" more recent than executable timestamp\nwarning: .o file ""/Developer/SDKs/MacOSX10.4u.sdk/usr/lib/gcc/i686-apple-darwin9/4.0.1/libgcc.a(_addvdi3.o)"" more recent than executable timestamp\nwarning: .o file ""/Developer/SDKs/MacOSX10.4u.sdk/usr/lib/gcc/i686-apple-darwin9/4.0.1/libgcc.a(_subvsi3.o)"" more recent than executable timestamp\nwarning: .o file ""/Developer/SDKs/MacOSX10.4u.sdk/usr/lib/gcc/i686-apple-darwin9/4.0.1/libgcc.a(_subvdi3.o)"" more recent than executable timestamp\nwarning: .o file ""/Developer/SDKs/MacOSX10.4u.sdk/usr/lib/gcc/i686-apple-darwin9/4.0.1/libgcc.a(_mulvsi3.o)"" more recent than executable timestamp\nwarning: .o file ""/Developer/SDKs/MacOSX10.4u.sdk/usr/lib/gcc/i686-apple-darwin9/4.0.1/libgcc.a(_mulvdi3.o)"" more recent than executable timestamp\nwarning: .o file ""/Developer/SDKs/MacOSX10.4u.sdk/usr/lib/gcc/i686-apple-darwin9/4.0.1/libgcc.a(_negvsi2.o)"" more recent than executable timestamp\nwarning: .o file ""/Developer/SDKs/MacOSX10.4u.sdk/usr/lib/gcc/i686-apple-darwin9/4.0.1/libgcc.a(_negvdi2.o)"" more recent than executable timestamp\nwarning: .o file ""/Developer/SDKs/MacOSX10.4u.sdk/usr/lib/gcc/i686-apple-darwin9/4.0.1/libgcc.a(_ffssi2.o)"" more recent than executable timestamp\nwarning: .o file ""/Developer/SDKs/MacOSX10.4u.sdk/usr/lib/gcc/i686-apple-darwin9/4.0.1/libgcc.a(_ffsdi2.o)"" more recent than executable timestamp\nwarning: .o file ""/Developer/SDKs/MacOSX10.4u.sdk/usr/lib/gcc/i686-apple-darwin9/4.0.1/libgcc.a(_clz.o)"" more recent than executable timestamp\nwarning: .o file ""/Developer/SDKs/MacOSX10.4u.sdk/usr/lib/gcc/i686-apple-darwin9/4.0.1/libgcc.a(_clzsi2.o)"" more recent than executable timestamp\nwarning: .o file ""/Developer/SDKs/MacOSX10.4u.sdk/usr/lib/gcc/i686-apple-darwin9/4.0.1/libgcc.a(_clzdi2.o)"" more recent than executable timestamp\nwarning: .o file ""/Developer/SDKs/MacOSX10.4u.sdk/usr/lib/gcc/i686-apple-darwin9/4.0.1/libgcc.a(_ctzsi2.o)"" more recent than executable timestamp\nwarning: .o file ""/Developer/SDKs/MacOSX10.4u.sdk/usr/lib/gcc/i686-apple-darwin9/4.0.1/libgcc.a(_ctzdi2.o)"" more recent than executable timestamp\nwarning: .o file ""/Developer/SDKs/MacOSX10.4u.sdk/usr/lib/gcc/i686-apple-darwin9/4.0.1/libgcc.a(_popcount_tab.o)"" more recent than executable timestamp\nwarning: .o file ""/Developer/SDKs/MacOSX10.4u.sdk/usr/lib/gcc/i686-apple-darwin9/4.0.1/libgcc.a(_popcountsi2.o)"" more recent than executable timestamp\nwarning: .o file ""/Developer/SDKs/MacOSX10.4u.sdk/usr/lib/gcc/i686-apple-darwin9/4.0.1/libgcc.a(_popcountdi2.o)"" more recent than executable timestamp\nwarning: .o file ""/Developer/SDKs/MacOSX10.4u.sdk/usr/lib/gcc/i686-apple-darwin9/4.0.1/libgcc.a(_paritysi2.o)"" more recent than executable timestamp\nwarning: .o file ""/Developer/SDKs/MacOSX10.4u.sdk/usr/lib/gcc/i686-apple-darwin9/4.0.1/libgcc.a(_paritydi2.o)"" more recent than executable timestamp\nwarning: .o file ""/Developer/SDKs/MacOSX10.4u.sdk/usr/lib/gcc/i686-apple-darwin9/4.0.1/libgcc.a(_powisf2.o)"" more recent than executable timestamp\nwarning: .o file ""/Developer/SDKs/MacOSX10.4u.sdk/usr/lib/gcc/i686-apple-darwin9/4.0.1/libgcc.a(_powidf2.o)"" more recent than executable timestamp\nwarning: .o file ""/Developer/SDKs/MacOSX10.4u.sdk/usr/lib/gcc/i686-apple-darwin9/4.0.1/libgcc.a(_powixf2.o)"" more recent than executable timestamp\nwarning: .o file ""/Developer/SDKs/MacOSX10.4u.sdk/usr/lib/gcc/i686-apple-darwin9/4.0.1/libgcc.a(_mulsc3.o)"" more recent than executable timestamp\nwarning: .o file ""/Developer/SDKs/MacOSX10.4u.sdk/usr/lib/gcc/i686-apple-darwin9/4.0.1/libgcc.a(_muldc3.o)"" more recent than executable timestamp\nwarning: .o file ""/Developer/SDKs/MacOSX10.4u.sdk/usr/lib/gcc/i686-apple-darwin9/4.0.1/libgcc.a(_mulxc3.o)"" more recent than executable timestamp\nwarning: .o file ""/Developer/SDKs/MacOSX10.4u.sdk/usr/lib/gcc/i686-apple-darwin9/4.0.1/libgcc.a(_divsc3.o)"" more recent than executable timestamp\nwarning: .o file ""/Developer/SDKs/MacOSX10.4u.sdk/usr/lib/gcc/i686-apple-darwin9/4.0.1/libgcc.a(_divdc3.o)"" more recent than executable timestamp\nwarning: .o file ""/Developer/SDKs/MacOSX10.4u.sdk/usr/lib/gcc/i686-apple-darwin9/4.0.1/libgcc.a(_divxc3.o)"" more recent than executable timestamp\nwarning: .o file ""/Developer/SDKs/MacOSX10.4u.sdk/usr/lib/gcc/i686-apple-darwin9/4.0.1/libgcc.a(_eprintf.o)"" more recent than executable timestamp\nwarning: .o file ""/Developer/SDKs/MacOSX10.4u.sdk/usr/lib/gcc/i686-apple-darwin9/4.0.1/libgcc.a(__gcc_bcmp.o)"" more recent than executable timestamp\nwarning: .o file ""/Developer/SDKs/MacOSX10.4u.sdk/usr/lib/gcc/i686-apple-darwin9/4.0.1/libgcc.a(_divdi3.o)"" more recent than executable timestamp\nwarning: .o file ""/Developer/SDKs/MacOSX10.4u.sdk/usr/lib/gcc/i686-apple-darwin9/4.0.1/libgcc.a(_moddi3.o)"" more recent than executable timestamp\nwarning: .o file ""/Developer/SDKs/MacOSX10.4u.sdk/usr/lib/gcc/i686-apple-darwin9/4.0.1/libgcc.a(_udivdi3.o)"" more recent than executable timestamp\nwarning: .o file ""/Developer/SDKs/MacOSX10.4u.sdk/usr/lib/gcc/i686-apple-darwin9/4.0.1/libgcc.a(_umoddi3.o)"" more recent than executable timestamp\nwarning: .o file ""/Developer/SDKs/MacOSX10.4u.sdk/usr/lib/gcc/i686-apple-darwin9/4.0.1/libgcc.a(_udiv_w_sdiv.o)"" more recent than executable timestamp\nwarning: .o file ""/Developer/SDKs/MacOSX10.4u.sdk/usr/lib/gcc/i686-apple-darwin9/4.0.1/libgcc.a(_udivmoddi4.o)"" more recent than executable timestamp\n. done\nTraceback (most recent call last):\n  File ""<string>"", line 1, in <module>\n  File ""/Library/Frameworks/Python.framework/Versions/2.6/lib/python2.6/site-packages/numpy/__init__.py"", line 132, in <module>\n    import add_newdocs\n  File ""/Library/Frameworks/Python.framework/Versions/2.6/lib/python2.6/site-packages/numpy/add_newdocs.py"", line 9, in <module>\n    from lib import add_newdoc\n  File ""/Library/Frameworks/Python.framework/Versions/2.6/lib/python2.6/site-packages/numpy/lib/__init__.py"", line 4, in <module>\n    from type_check import *\n  File ""/Library/Frameworks/Python.framework/Versions/2.6/lib/python2.6/site-packages/numpy/lib/type_check.py"", line 8, in <module>\n    import numpy.core.numeric as _nx\n  File ""/Library/Frameworks/Python.framework/Versions/2.6/lib/python2.6/site-packages/numpy/core/__init__.py"", line 5, in <module>\n    import multiarray\nImportError: dlopen(/Library/Frameworks/Python.framework/Versions/2.6/lib/python2.6/site-packages/numpy/core/multiarray.so, 2): no suitable image found.  Did find:\n\t/Library/Frameworks/Python.framework/Versions/2.6/lib/python2.6/site-packages/numpy/core/multiarray.so: unknown required load command 0x80000022\n\nProgram exited with code 01.\n(gdb) bt\nNo stack.\n(gdb) c\nThe program is not being run.\n(gdb) \n'"
1931,7729070,thouis,charris,2012-10-19 20:57:59,2014-02-17 02:29:05,2014-02-17 02:29:05,closed,,,3,11 - Bug;component: numpy.core;priority: high,https://api.github.com/repos/numpy/numpy/issues/1931,"b'exclude ndarray operations __mul__, __pow__ etc (Trac #1333)'","b""_Original ticket http://projects.scipy.org/numpy/ticket/1333 on 2009-12-15 by trac user dmitrey, assigned to unknown._\n\nnumpy ndarray operations !__mul!__, !__div!__, !__pow!__, !__lt!__, !__gt!__, !__eq!__ etc (all non-unary ones) should be replaced by the lines like\nreturn asarray(multiply(self, i)) if not getattr(i,'!__exclude_ndarray_operations!__', False) else i.!__rmul!__(self)\n\nThis bug prevents correct stacking numpy ndarrays with matrices, polynomials, SAGE arrays, FuncDesigner types, etc.\n\nSee here for details\nhttp://comments.gmane.org/gmane.comp.python.scientific.devel/12436\n"""
1930,7729065,thouis,thouis,2012-10-19 20:57:53,2012-10-19 20:57:58,2012-10-19 20:57:58,closed,,,14,11 - Bug;component: numpy.ma;priority: high,https://api.github.com/repos/numpy/numpy/issues/1930,b'set_fill_value does not work properly for masked structured array (Trac #1332)',"b""_Original ticket http://projects.scipy.org/numpy/ticket/1332 on 2009-12-15 by @astrofrog, assigned to @pierregm._\n\nThe following code doesn't seem to work:\n\n\n\n    import numpy.ma as ma\n    \n    t = ma.array(zip([1,2,3],[4,5,6]),dtype=[('a',int),('b',int)])\n    print repr(t['a'])\n    t['a'].set_fill_value(10)\n    print repr(t['a'])\n\n\n\nas the output is\n\n\n\n    masked_array(data = [1 2 3],\n                  mask = [False False False],\n            fill_value = 999999)\n    \n    masked_array(data = [1 2 3],\n                  mask = [False False False],\n            fill_value = 999999)\n\n\n\nand no exception is raised."""
1929,7729063,thouis,thouis,2012-10-19 20:57:51,2012-10-19 20:57:52,2012-10-19 20:57:52,closed,,,3,11 - Bug;component: numpy.ma;priority: high,https://api.github.com/repos/numpy/numpy/issues/1929,"b""Can't iterate over row of masked structured array (Trac #1331)""","b'_Original ticket http://projects.scipy.org/numpy/ticket/1331 on 2009-12-14 by @astrofrog, assigned to @pierregm._\n\nThe following code demonstrates the problem:\n\n\n\n    import numpy.ma as ma\n    \n    a = ma.zeros((3,),dtype=[(\'a\',int),(\'b\',int)])\n    \n    a[\'a\'][:] = 1\n    a[\'b\'][:] = 2\n    \n    print a[0]\n    for elem in a[0]:\n        print elem\n    \n    a[\'a\'].mask = (True, False, False)\n        \n    print a[0]\n    for elem in a[0]:\n        print elem\n\n\n\nproduces:\n\n\n\n    (1, 2)\n    1\n    2\n    (--, 2)\n    Traceback (most recent call last):\n      File ""bug.py"", line 14, in <module>\n        for elem in a[0]:\n    TypeError: iteration over a 0-d array\n\n\n\ni.e. once one element is masked, one can no longer iterate over a row.\n\nThis is using revision 8007.'"
1928,7729060,thouis,thouis,2012-10-19 20:57:48,2012-10-19 20:57:49,2012-10-19 20:57:49,closed,,,4,11 - Bug;component: numpy.ma;priority: high,https://api.github.com/repos/numpy/numpy/issues/1928,b'tolist() does not work for structured array row (Trac #1330)',"b""_Original ticket http://projects.scipy.org/numpy/ticket/1330 on 2009-12-14 by @astrofrog, assigned to @pierregm._\n\nThe following code:\n\n\n\n    import numpy.ma as ma\n    \n    a = ma.zeros((3,),dtype=[('a',int),('b',int)])\n    a['a'][:] = 1\n    a['b'][:] = 2\n    a.mask[0][0] = True\n    print a\n    print a[0]\n    print a[0].tolist()\n\n\n\nproduces the following output:\n\n\n\n    [(--, 2) (1, 2) (1, 2)]\n    (--, 2)\n    (None, None)\n\n\n\nWhereas I would expect:\n\n\n\n    [(--, 2) (1, 2) (1, 2)]\n    (--, 2)\n    (None, 2)\n\n\n\nThis is using revision 8007\n"""
1927,7729059,thouis,thouis,2012-10-19 20:57:46,2012-10-19 20:57:47,2012-10-19 20:57:47,closed,,1.4.1,2,11 - Bug;component: Other;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1927,b'spacing broken for large values (Trac #1329)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/1329 on 2009-12-13 by @cournape, assigned to unknown._\n\nFor example\n\n\n\n    np.spacing(1e30) # returns 0\n\n'"
1926,7729058,thouis,thouis,2012-10-19 20:57:43,2012-10-19 20:57:45,2012-10-19 20:57:45,closed,,1.4.1,2,11 - Bug;component: Other;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1926,b'Incorrect sorting on field (Trac #1328)',"b""_Original ticket http://projects.scipy.org/numpy/ticket/1328 on 2009-12-12 by @stefanv, assigned to unknown._\n\n\n\n    In [53]: cc\n    Out[53]: \n    array([[(0, 1)],\n           [(0, 0)],\n           [(1, 1)],\n           [(1, 0)]], \n          dtype=[('x', '<i8'), ('y', '<i8')])\n    \n    In [54]: np.sort(cc, order='y')['y']\n    Out[54]: \n    array([[1],\n           [0],\n           [1],\n           [0]])\n\n"""
1924,7729053,thouis,thouis,2012-10-19 20:57:38,2014-02-20 23:45:23,2012-10-19 20:57:39,closed,,,4,11 - Bug;component: Other;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1924,b'FAIL: test_buffer_hashlib (test_regression.TestRegression) (Trac #1326)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/1326 on 2009-12-11 by @stsci-sienkiew, assigned to unknown._\n\n\n\n    ======================================================================\n    FAIL: test_buffer_hashlib (test_regression.TestRegression)\n    ----------------------------------------------------------------------\n    Traceback (most recent call last):\n      File ""/usr/stsci/pyssgdev/2.5.4/numpy/core/tests/test_regression.py"", line 1255, in test_buffer_hashlib\n        assert_equal(md5(x).hexdigest(), \'2a1dd1e1e59d0a384c26951e316cd7e6\')\n      File ""/usr/stsci/pyssgdev/2.5.4/numpy/testing/utils.py"", line 305, in assert_equal\n        raise AssertionError(msg)\n    AssertionError: \n    Items are not equal:\n     ACTUAL: \'1264d4a9f74dc462700fd163e3ff09a6\'\n     DESIRED: \'2a1dd1e1e59d0a384c26951e316cd7e6\'\n    \n    ----------------------------------------------------------------------\n\n\n\nPython 2.5.4, 32 bit executable\n\nSolaris 8\n\nNot on Red Hat Enterprise Linux, 4 / 32 bit.  Not on RHE 4 / 64 bit.  Not on RHE 5 / 64 bit.  Not on Mac OSX Leopard, 32 bit python.\n\n(That is, failing on the big-endian SPARC, passing on a bunch of x86 systems.)\n\nNumPy version 1.5.0.dev7996\n\n'"
1923,7729052,thouis,charris,2012-10-19 20:57:36,2013-05-05 17:31:21,2013-05-05 17:31:21,closed,,,4,11 - Bug;component: numpy.core;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1923,b'FAIL: test_umath.TestComplexFunctions.test_precisions_consistent (Trac #1325)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/1325 on 2009-12-11 by @stsci-sienkiew, assigned to unknown._\n\n\n\n    ======================================================================\n    FAIL: test_umath.TestComplexFunctions.test_precisions_consistent\n    ----------------------------------------------------------------------\n    Traceback (most recent call last):\n      File ""/usr/stsci/pyssgdev/2.5.4/nose/case.py"", line 183, in runTest\n        self.test(*self.arg)\n      File ""/usr/stsci/pyssgdev/2.5.4/numpy/core/tests/test_umath.py"", line 602, in test_precisions_consistent\n        assert_almost_equal(fcf, fcd, decimal=6, err_msg=\'fch-fcd %s\'%f)\n      File ""/usr/stsci/pyssgdev/2.5.4/numpy/testing/utils.py"", line 434, in assert_almost_equal\n        raise AssertionError(msg)\n    AssertionError: \n    Arrays are not almost equal fch-fcd <ufunc \'arcsin\'>\n     ACTUAL: 2.3561945j\n     DESIRED: (0.66623943249251527+1.0612750619050355j)\n    \n\n\n\n\nPython 2.5.4\n\nRed Hat Enterprise Linux 4, 64 bit\n\nNot on RHE 4, 32 bit.  Not on Mac OSX Leopard, 32 bit python.  Not on RHE 5, 64 bit.  Not on Solaris 8, 32 bit python.\n\nNumPy version 1.5.0.dev7996\n\n'"
1922,7729049,thouis,charris,2012-10-19 20:57:34,2014-02-18 23:34:51,2014-02-18 23:34:51,closed,,,1,11 - Bug;component: numpy.core;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1922,"b""FAIL: test_umath.TestComplexFunctions.test_loss_of_precision(<type 'numpy.complex64'>,) (Trac #1324)""","b'_Original ticket http://projects.scipy.org/numpy/ticket/1324 on 2009-12-11 by @stsci-sienkiew, assigned to unknown._\n\n\n\n    ======================================================================\n    FAIL: test_umath.TestComplexFunctions.test_loss_of_precision(<type \'numpy.complex64\'>,)\n    ----------------------------------------------------------------------\n    Traceback (most recent call last):\n      File ""/usr/stsci/pyssgdev/2.5.4/nose/case.py"", line 183, in runTest\n        self.test(*self.arg)\n      File ""/usr/stsci/pyssgdev/2.5.4/numpy/core/tests/test_umath.py"", line 721, in check_loss_of_precision\n        check(x_basic, 2*eps/1e-3)\n      File ""/usr/stsci/pyssgdev/2.5.4/numpy/core/tests/test_umath.py"", line 691, in check\n        \'arcsinh\')\n    AssertionError: (0, 0.0010023052, 0.9987238, \'arcsinh\')\n\n\n\nPython 2.5.4\n\nRed Hat Enterprise Linux 4, 64 bit \n\nNot on RHE 4, 32 bit.  Not on Mac OSX Leopard, 32 bit python.  Not on RHE 5, 64 bit. (!)\n\nNumPy version 1.5.0.dev7996\n\nThis appears to be similar to #1711, but I\'m first seeing it this week and that ticket is 7 months old.\n'"
1921,7729047,thouis,seberg,2012-10-19 20:57:32,2013-12-04 23:45:41,2013-12-04 23:45:41,closed,,,6,11 - Bug;component: numpy.core;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1921,b'FAIL: Test generic loops. (Trac #1323)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/1323 on 2009-12-11 by @stsci-sienkiew, assigned to unknown._\n\n\n\n    ======================================================================\n    FAIL: Test generic loops.\n    ----------------------------------------------------------------------\n    Traceback (most recent call last):\n      File ""/usr/stsci/pyssgdev/2.5.4/numpy/core/tests/test_ufunc.py"", line 86, in test_generic_loops\n        assert_almost_equal(fone(x), fone_val, err_msg=msg)\n      File ""/usr/stsci/pyssgdev/2.5.4/numpy/testing/utils.py"", line 434, in assert_almost_equal\n        raise AssertionError(msg)\n    AssertionError: \n    Arrays are not almost equal PyUFunc_F_F\n     ACTUAL: array([ 0.+0.j,  0.+0.j,  0.+0.j,  0.+0.j,  0.+0.j], dtype=complex64)\n     DESIRED: 1\n\n\n\nPython 2.5.4\n\nRed Hat Enterprise Linux 4, 64 bit\n\nNot on RHE 4, 32 bit.  Not on Mac OSX Leopard, 32 bit python.  Not on RHE 5, 64 bit.  Not on Solaris 8, 32 bit python.\n\nNumPy version 1.5.0.dev7996\n'"
1920,7729043,thouis,thouis,2012-10-19 20:57:22,2012-10-19 20:57:31,2012-10-19 20:57:31,closed,,1.5.1,29,11 - Bug;component: Official binaries;priority: high,https://api.github.com/repos/numpy/numpy/issues/1920,"b'Scipy build fails on Mac OS X 10.5.8, Numpy import fails on Mac OS X 10.5.8 (Trac #1322)'","b'_Original ticket http://projects.scipy.org/numpy/ticket/1322 on 2009-12-10 by trac user ndufour, assigned to @cournape._\n\nMac OS X 10.5.8\n32-bit machine\nThe problem appears to lie with the file ""multiarray.so""\nAttempting to import Numpy returns:\n\nTraceback (most recent call last):\n  File ""<stdin>"", line 1, in <module>\n  File ""/Library/Frameworks/Python.framework/Versions/2.6/lib/python2.6/site-packages/numpy/__init__.py"", line 132, in <module>\n    import add_newdocs\n  File ""/Library/Frameworks/Python.framework/Versions/2.6/lib/python2.6/site-packages/numpy/add_newdocs.py"", line 9, in <module>\n    from lib import add_newdoc\n  File ""/Library/Frameworks/Python.framework/Versions/2.6/lib/python2.6/site-packages/numpy/lib/__init__.py"", line 4, in <module>\n    from type_check import *\n  File ""/Library/Frameworks/Python.framework/Versions/2.6/lib/python2.6/site-packages/numpy/lib/type_check.py"", line 8, in <module>\n    import numpy.core.numeric as _nx\n  File ""/Library/Frameworks/Python.framework/Versions/2.6/lib/python2.6/site-packages/numpy/core/__init__.py"", line 5, in <module>\n    import multiarray\nImportError: dlopen(/Library/Frameworks/Python.framework/Versions/2.6/lib/python2.6/site-packages/numpy/core/multiarray.so, 2): no suitable image found.  Did find:\n\t/Library/Frameworks/Python.framework/Versions/2.6/lib/python2.6/site-packages/numpy/core/multiarray.so: unknown required load command 0x80000022\n\nAttempting to build Scipy returns:\n\nTraceback (most recent call last):\n  File ""setup.py"", line 160, in <module>\n    setup_package()\n  File ""setup.py"", line 127, in setup_package\n    from numpy.distutils.core import setup\n  File ""/Library/Frameworks/Python.framework/Versions/2.6/lib/python2.6/site-packages/numpy/__init__.py"", line 132, in <module>\n    import add_newdocs\n  File ""/Library/Frameworks/Python.framework/Versions/2.6/lib/python2.6/site-packages/numpy/add_newdocs.py"", line 9, in <module>\n    from lib import add_newdoc\n  File ""/Library/Frameworks/Python.framework/Versions/2.6/lib/python2.6/site-packages/numpy/lib/__init__.py"", line 4, in <module>\n    from type_check import *\n  File ""/Library/Frameworks/Python.framework/Versions/2.6/lib/python2.6/site-packages/numpy/lib/type_check.py"", line 8, in <module>\n    import numpy.core.numeric as _nx\n  File ""/Library/Frameworks/Python.framework/Versions/2.6/lib/python2.6/site-packages/numpy/core/__init__.py"", line 5, in <module>\n    import multiarray\nImportError: dlopen(/Library/Frameworks/Python.framework/Versions/2.6/lib/python2.6/site-packages/numpy/core/multiarray.so, 2): no suitable image found.  Did find:\n\t/Library/Frameworks/Python.framework/Versions/2.6/lib/python2.6/site-packages/numpy/core/multiarray.so: unknown required load command 0x80000022\n\n'"
1919,7729041,thouis,thouis,2012-10-19 20:57:21,2012-10-23 02:42:51,2012-10-19 20:57:21,closed,,,2,11 - Bug;component: Other;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1919,b'A dtype should be immutable (Trac #1321)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/1321 on 2009-12-09 by @FrancescAlted, assigned to unknown._\n\nAfter some discussion in the list, we felt that the dtype should be immutable.  Currently this is not the case, as the `names` attribute can be changed:\n\n\n\n    In [19]: t = np.dtype(""i4,f4"")\n    \n    In [20]: t\n    Out[20]: dtype([(\'f0\', \'<i4\'), (\'f1\', \'<f4\')])\n    \n    In [21]: hash(t)\n    Out[21]: -9041335829180134223\n    \n    In [22]: t.names = (\'one\', \'other\')\n    \n    In [23]: t\n    Out[23]: dtype([(\'one\', \'<i4\'), (\'other\', \'<f4\')])\n    \n    In [24]: hash(t)\n    Out[24]: 8637734220020415106\n\n\n\n[although the change of the hash seems to depend on the Python version]\n\nAs a bonus, an immutable `dtype` would render this ticket #1725\nwithout effect.'"
1918,7729040,thouis,thouis,2012-10-19 20:57:19,2012-10-19 20:57:19,2012-10-19 20:57:19,closed,,1.4.1,1,11 - Bug;component: Other;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1918,b'Error in 1.4.0rc1 on Python 2.6.4 and Windows: numpy.dtype does not appear to be the correct type object (Trac #1320)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/1320 on 2009-12-08 by @jonovik, assigned to unknown._\n\nUsing Numpy 1.4.0rc1 under Windows (XP or 7):\n\n>>> from scipy.stats import chi2\nTraceback (most recent call last):\nValueError: numpy.dtype does not appear to be the correct type object\n\nI has this problem on 32-bit Windows XP SP3, whereas this poster had it on 64-bit Windows 7:\nhttp://thread.gmane.org/gmane.comp.python.scientific.user/23108\n\nAnother poster suggested to downgrade to Numpy 1.3.0, which fixed the problem in both cases.\n\nI forgot to save the traceback before I downgraded, but the abovementioned Windows 7 user had this:\n  File ""<stdin>"", line 1, in <module>\n  File ""D:\\Python26\\lib\\site-packages\\scipy\\stats\\__init__.py"", line\n7, in <module>\n    from stats import *\n  File ""D:\\Python26\\lib\\site-packages\\scipy\\stats\\stats.py"", line 203,\nin <module>\n    from morestats import find_repeats #is only reference to scipy.stats\n  File ""D:\\Python26\\lib\\site-packages\\scipy\\stats\\morestats.py"", line\n7, in <module>\n    import distributions\n  File ""D:\\Python26\\lib\\site-packages\\scipy\\stats\\distributions.py"",\nline 27, in <module>\n    import vonmises_cython\n  File ""numpy.pxd"", line 30, in scipy.stats.vonmises_cython\n(scipy\\stats\\vonmises_cython.c:2939)\n'"
1916,7729037,thouis,thouis,2012-10-19 20:57:13,2012-10-19 20:57:14,2012-10-19 20:57:14,closed,,,3,11 - Bug;component: Other;priority: highest,https://api.github.com/repos/numpy/numpy/issues/1916,b'All FPU exception are ignored by default (Trac #1318)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/1318 on 2009-12-07 by @cournape, assigned to unknown._\n\nWe have:\n\n\n\n    import numpy as np\n    x = np.array([1, 2, 3, 4])\n    x /= 0\n    # x is now zero, no warning printed\n\n\n\nThis is a regression, which appeared in numpy 1.1.0.'"
1915,7729034,thouis,thouis,2012-10-19 20:57:11,2012-10-19 20:57:12,2012-10-19 20:57:12,closed,,1.6.0,3,11 - Bug;component: Other;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1915,b'Uncaught SIGFPE exception for overflowed integer division (Trac #1317)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/1317 on 2009-12-07 by @cournape, assigned to unknown._\n\nThe following raises a SIGFPE (division by 0):\n\n\n\n    import numpy as np\n    x = np.array([-2**63])\n    x /= -1\n\n\n\nIt is because 2 ** 63 is not representable as a 64 bits integers, and on at least x86, this raises a div by zero FPU exception.'"
1913,7729031,thouis,seberg,2012-10-19 20:57:08,2013-12-05 13:14:26,2013-12-05 13:14:26,closed,,NumPy 2.0,1,11 - Bug;component: Other;priority: low,https://api.github.com/repos/numpy/numpy/issues/1913,"b"".argmax() works, but .argmin() fails for arrays of type 'S' and 'U' (Trac #1315)""","b""_Original ticket http://projects.scipy.org/numpy/ticket/1315 on 2009-12-07 by @mdboom, assigned to unknown._\n\n\n\n    \n    In [6]: x = np.array(['xyz', 'abc', 'def'], 'S')\n    \n    In [7]: x.argmax()\n    Out[7]: 0\n    \n    In [8]: x.argmin()\n    ---------------------------------------------------------------------------\n    TypeError                                 Traceback (most recent call last)\n    \n    /wonkabar/data1/builds/betadrizzle/<ipython console> in <module>()\n    \n    TypeError: argmax is unsupported for this type\n    \n\n"""
1911,7729025,thouis,thouis,2012-10-19 20:57:01,2012-10-19 20:57:05,2012-10-19 20:57:05,closed,,1.4.1,12,11 - Bug;component: Other;priority: high,https://api.github.com/repos/numpy/numpy/issues/1911,b'Complex POW not implemented correctly in 1.4.0rc1 (and trunk) (Trac #1313)',"b""_Original ticket http://projects.scipy.org/numpy/ticket/1313 on 2009-12-07 by @FrancescAlted, assigned to unknown._\n\nAfter the restructuration of the complex functions in numpy, the `pow` function seems broken.  With numpy 1.3.0:\n\n\n\n    In [5]: 2**(-0.5+1.5j)\n    Out[5]: (0.35812203996480685+0.60971190286187238j)\n    \n    In [6]: 2**np.array((-0.5+1.5j))\n    Out[6]: (0.35812203996480685+0.60971190286187238j)  # same as python\n\n\n\nWith 1.4.0rc1:\n\n\n\n    In [49]: 2**(-0.5+1.5j)\n    Out[49]: (0.35812203996480685+0.60971190286187238j)\n    \n    In [50]: 2**np.array((-0.5+1.5j))\n    Out[50]: (0.35182011479251107+1.3279606132136452j)  # different!\n\n\n\nI've tried the next fix:\n\n\n\n    Index: numpy/core/src/npymath/npy_math_complex.c.src\n    ===================================================================\n    --- numpy/core/src/npymath/npy_math_complex.c.src       (revision 7975)\n    +++ numpy/core/src/npymath/npy_math_complex.c.src       (working copy)\n    @@ -199,7 +199,7 @@\n         @type@ bx, by, px, py;\n    \n         b = npy_clog@c@(x);\n    -    p = npy_clog@c@(y);\n    +    p = y;\n         bx = npy_creal@c@(b);\n         by = npy_cimag@c@(b);\n         px = npy_creal@c@(p);\n\n\n\nwhich I think is the correct one, but the error is still there.\n\nThat affects also to trunk."""
1910,7729021,thouis,thouis,2012-10-19 20:56:58,2012-10-19 20:57:00,2012-10-19 20:57:00,closed,,1.5.0,8,11 - Bug;component: numpy.core;priority: highest,https://api.github.com/repos/numpy/numpy/issues/1910,b'Changes in behaviour due to buffer protocol in numpy 1.5 (Trac #1312)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/1312 on 2009-12-06 by @GaelVaroquaux, assigned to @pv._\n\nThe following used to work in 1.4:\n\n\n    hashlib.md5(x).hexdigest()\n\n\nNow, you have to do:\n\n\n    hashlib.md5(np.getbuffer(x)).hexdigest()\n\n\n\nAlso, with extension code I get the following failure (if not rebuild against a new version of numpy):\n\n\n    from routines import _joint_histogram, _similarity, similarity_measures\n      File ""numpy.pxi"", line 74, in nipy.neurospin.register.routines (nipy/neurospin/register/routines.c:6042)\n    ValueError: numpy.dtype does not appear to be the correct type object\n\n\nWhere routines.c is a cython-generated file, compiled with numpy 1.4. I am unsure which line in routines.pyx is responsible for the problem.'"
1909,7729019,thouis,thouis,2012-10-19 20:56:56,2012-10-19 20:56:56,2012-10-19 20:56:56,closed,,,1,11 - Bug;component: Other;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1909,b'128 bit float not correctley converted to string (Trac #1311)',"b""_Original ticket http://projects.scipy.org/numpy/ticket/1311 on 2009-12-04 by trac user rgraham_nz, assigned to unknown._\n\nnumpy seems to not use the full precision of a 128 bit float when converting to a string. Interestingly ipython displays the whole number.\n\nSee this ipython session:\n\nIn [1]: import numpy as np\n\nIn [2]: a = np.float128('1.0821318064579998897')\n\nIn [3]: a\nOut[3]: 1.0821318064579998897\n\nIn [4]: str(a)\nOut[4]: '1.08213180646'\n\nPlatform: 64 bit ubuntu linux. numpy version 1.3.0-3, python 2.6.4\n\n"""
1907,7729016,thouis,thouis,2012-10-19 20:56:52,2012-10-19 20:56:53,2012-10-19 20:56:53,closed,,,3,11 - Bug;component: Other;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1907,b'dot() returns negative number when fed with large integer inputs (Trac #1309)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/1309 on 2009-11-29 by trac user dosh1965, assigned to unknown._\n\n>>> a\n10000000000000000L\n>>> dot(a,a)\n-8814407033341083648'"
1904,7729013,thouis,thouis,2012-10-19 20:56:45,2012-10-19 20:56:46,2012-10-19 20:56:46,closed,,,1,11 - Bug;component: numpy.f2py;priority: high,https://api.github.com/repos/numpy/numpy/issues/1904,"b""F2PY doesn't work without python-dev package (Trac #1306)""","b""_Original ticket http://projects.scipy.org/numpy/ticket/1306 on 2009-11-27 by trac user alexm920, assigned to @pearu._\n\nAs installed, python-numpy, which contains F2PY, does not have python-dev as a dependency. However, without that package installed, no fortran files can be successfully F2PY'd. Took a while to figure out what was missing in my new install."""
1902,7729007,thouis,thouis,2012-10-19 20:56:41,2012-10-23 02:42:49,2012-10-19 20:56:42,closed,,,1,11 - Bug;component: Other;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1902,"b""Bug in handling '|S0' format string (Trac #1304)""","b""_Original ticket http://projects.scipy.org/numpy/ticket/1304 on 2009-11-25 by trac user dyamins, assigned to unknown._\n\nnp.dtype won't accept '|S0' as a type argument.\n\n>>> np.dtype('|S0')\nTypeError: data type not understood\n\nI have to do something like this:\n\n>>> d = np.dtype('|S')\n\n>>> d\ndtype('|S0')\n\nto get what I want.   Is this intended?  Regardless, this inconsistency also means that things like:\n\n>>> np.dtype(d.descr)\n\ncan fail even when d is a properly constructed dtype object with a '|S0' type, which seems a little perverse. """
1901,7729006,thouis,ahaldane,2012-10-19 20:56:39,2016-06-02 16:51:19,2016-06-02 16:51:19,closed,,,3,11 - Bug;component: Other;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1901,"b'Bug in rec.fromarrays in handling length-0 strings (Trac #1303), now with segfault.'","b""_Original ticket http://projects.scipy.org/numpy/ticket/1303 on 2009-11-25 by trac user dyamins, assigned to unknown._\r\n\r\nI'm using 1.4.0.dev7746, on Mac OSX 10.5.8.   The problems below occur both for python 2.5 compiled 32-bit as well as python2.6 compiled 64-bit.\r\n\r\nA problem arises when you try to create a record array passing a type of '|S0'.\r\n```\r\n>>> Cols = [ [ 'test' ]*10 , [ '' ]*10]\r\n```\r\nWhen not passing any dtype, this is created into a recarray with no problem:\r\n```\r\n>>> np.rec.fromarrays(Cols)\r\nrec.array([('test', _), ('test', _), ('test', _), ('test', _),\r\n       ('test', _), ('test', _), ('test', _), ('test', _),\r\n       ('test', _), ('test', _)],\r\n      dtype=[('f0', '|S4'), ('f1', '|S1')])\r\n```\r\nHowever, trouble arises when I try to pass a length-0 dtype explicitly.\r\n```\r\n>>> d = np.dtype([('A', '|S4'), ('B', '|S')])\r\n>>> np.rec.fromarrays(Cols,dtype=d)\r\nrec.array([('test', _), ('\\x00est', _), ('\\x00est', _), ('\\x00est', _),\r\n       ('\\x00est', _), ('\\x00est', _), ('\\x00est', _), ('\\x00est', _),\r\n       ('\\x00est', _), ('\\x00est', _)],\r\n      dtype=[('A', '|S4'), ('B', '|S0')])\r\n```\r\nThe same thing occurs if I cast to np arrays before passing to np.rec.fromarrays:\r\n```\r\n>>> _arrays = [np.array(Cols[0],'|S4'),np.array(Cols[1],'|S')]\r\n[array(['test', 'test', 'test', 'test', 'test', 'test', 'test', 'test',\r\n       'test', 'test'],\r\n      dtype='|S4'),\r\n array([_, _, _, _, _, _, _, _, _, _],\r\n      dtype='|S1')]\r\n\r\n>>> np.rec.fromarrays(_arrays,dtype=d)\r\nrec.array([('test', _), ('\\x00est', _), ('\\x00est', _), ('\\x00est', _),\r\n       ('\\x00est', _), ('\\x00est', _), ('\\x00est', _), ('\\x00est', _),\r\n       ('\\x00est', _), ('\\x00est', _)],\r\n      dtype=[('A', '|S4'), ('B', '|S0')])\r\n```"""
1899,7729002,thouis,thouis,2012-10-19 20:56:36,2012-10-19 20:56:36,2012-10-19 20:56:36,closed,,,1,11 - Bug;component: Other;priority: low,https://api.github.com/repos/numpy/numpy/issues/1899,"b'array(1,ndmin=33) -> segmentation fault (Trac #1301)'","b""_Original ticket http://projects.scipy.org/numpy/ticket/1301 on 2009-11-21 by @endolith, assigned to unknown._\n\nObviously 33 dimensions is unrealistic, but shouldn't it create an exception rather than crashing?\n\nJob 1, \xa1\xb0ipython -pylab\xa1\xb1 terminated by signal SIGSEGV (Address boundary error)"""
1898,7729000,thouis,thouis,2012-10-19 20:56:33,2012-10-19 20:56:34,2012-10-19 20:56:34,closed,,1.6.0,6,11 - Bug;component: numpy.lib;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1898,b'OverflowError when nan[arg]min or nan[arg]max called on unsigned integers (Trac #1300)',"b""_Original ticket http://projects.scipy.org/numpy/ticket/1300 on 2009-11-20 by @tonysyu, assigned to unknown._\n\nFunctions that call _nanop (i.e. nan[arg]min, nan[arg]max) fail with unsigned integers. For example:\n\n\n\n    >>> np.nanmin(np.array([0, 1], dtype=np.uint8))\n    \n    OverflowError: cannot convert float infinity to integer\n\n\n\n\nIt seems that unsigned integers don't get identified as integers in the _nanop function. Checking against `np.integer` instead of the built-in `int` will catch signed and unsigned integers, as shown below.\n\n\n\n    Index: numpy/lib/function_base.py\n    ===================================================================\n    --- numpy/lib/function_base.py\t(revision 7749)\n    +++ numpy/lib/function_base.py\t(working copy)\n    @@ -1349,7 +1351,7 @@\n         mask = isnan(a)\n     \n         # We only need to take care of NaN's in floating point arrays\n    -    if not np.issubdtype(y.dtype, int):\n    +    if not np.issubdtype(y.dtype, np.integer):\n            y[mask] = fill\n     \n         res = op(y, axis=axis)\n    \n\n\n"""
1897,7728996,thouis,thouis,2012-10-19 20:56:31,2012-10-19 20:56:32,2012-10-19 20:56:32,closed,,1.4.1,2,11 - Bug;component: Other;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1897,b'__setitem__ bug on structured arrays with objects (Trac #1299)',"b""_Original ticket http://projects.scipy.org/numpy/ticket/1299 on 2009-11-19 by trac user crobin, assigned to unknown._\n\nI think there is a bug with `__setitem__` when using advanced selection on a structured array with objects when dimension is at least 2.\n\n\n\n    x = numpy.rec.fromarrays([[0,1],['a','b']], formats='i8,O')[None]\n    print x\n    x[x.nonzero()] = x.ravel()[:1]\n    print x\n\n\n\nThis gives:\n\n\n\n    [[(0, 'a') (1, 'b')]]\n    [[(0, 'a') (0, 'b')]]  ## WRONG\n\n\n\nThe very last `'b'` should be an `'a'`.\n\nAs a bonus, the reference count of the string `\xa1\xaeb\xa1\xaf` decreases, even though it still remains in the array `x`.  So the interpreter will crash if you repeat the above:\n\n\n\n    while True:\n        x[x.nonzero()] = x.ravel()[:1]\n\n\n\n...leads to:\n\n\n\n    Fatal Python error: deletion of interned string failed\n    zsh: IOT instruction (core dumped)  python2.6\n\n\n\nNote that this bug does not seem to occur when `x` is dimension 1, or when basic selection is used.  The offset of the object in the dtype does not seem to matter.\n"""
1895,7728992,thouis,thouis,2012-10-19 20:56:27,2012-10-23 02:42:48,2012-10-19 20:56:28,closed,,1.4.1,4,11 - Bug;component: numpy.core;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1895,b'Unit test failures: some nextafter tests fail on Python2.4/2.5 (Trac #1297)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/1297 on 2009-11-12 by @pv, assigned to @cournape._\n\nThe following unit tests fail on Python2.4 and 2.5 (but not on 2.6):\n\n\n    ======================================================================\n    ERROR: test_simple2 (test_utils.TestArrayAlmostEqualNulp)\n    ----------------------------------------------------------------------\n    Traceback (most recent call last):\n      File ""/var/lib/buildslave/numpy-real/b15/numpy-install-2.5/lib/python2.5/site-packages/numpy/testing/tests/test_utils.py"", line 317, in test_simple2\n        self.failUnlessRaises(AssertionError, failure)\n      File ""/usr/lib/python2.5/unittest.py"", line 320, in failUnlessRaises\n        callableObj(*args, **kwargs)\n      File ""/var/lib/buildslave/numpy-real/b15/numpy-install-2.5/lib/python2.5/site-packages/numpy/testing/tests/test_utils.py"", line 316, in failure\n        nulp=1000)\n      File ""../numpy-install-2.5/lib/python2.5/site-packages/numpy/testing/utils.py"", line 1112, in assert_array_almost_equal_nulp\n    TypeError: int argument required\n    \n    ======================================================================\n    ERROR: test_nan (test_utils.TestULP)\n    ----------------------------------------------------------------------\n    Traceback (most recent call last):\n      File ""/var/lib/buildslave/numpy-real/b15/numpy-install-2.5/lib/python2.5/site-packages/numpy/testing/tests/test_utils.py"", line 370, in test_nan\n        lambda: assert_array_max_ulp(nan, inf,\n      File ""/usr/lib/python2.5/unittest.py"", line 320, in failUnlessRaises\n        callableObj(*args, **kwargs)\n      File ""/var/lib/buildslave/numpy-real/b15/numpy-install-2.5/lib/python2.5/site-packages/numpy/testing/tests/test_utils.py"", line 371, in <lambda>\n        maxulp=maxulp))\n      File ""../numpy-install-2.5/lib/python2.5/site-packages/numpy/testing/utils.py"", line 1121, in assert_array_max_ulp\n    TypeError: int argument required\n\n\n'"
1894,7728990,thouis,thouis,2012-10-19 20:56:24,2012-10-19 20:56:25,2012-10-19 20:56:25,closed,,1.4.1,4,11 - Bug;component: numpy.lib;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1894,b'numpy.histogram() not working as expected for discrete values (Trac #1296)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/1296 on 2009-11-12 by @plaes, assigned to unknown._\n\nI have a dataset of discrete (integer) values from 0 to n and want to create a histogram (ie count the occurrences of each number) of the dataset with bin size 1, but numpy.histogram() doesn\'t seem to work right due to the way it handles last bin: [max(data) - 1, max(data)]  (ie 8 and 9, when max(data) = 9). \nHere\'s the script that should demonstrate it:\n\n\n    import numpy, scipy\n    from matplotlib import pylab\n    # Generate random discrete data\n    data = numpy.random.poisson(3, 300)\n    max_num = max(data)\n    hist, bins = numpy.histogram(data, bins=max_num)\n    # matplotlibs histogram also has the same issue :S\n    #hist, bins, _ = pylab.hist(data, bins=max(data))\n    print (""Histogram: "" + str(hist))\n    print (""No of max: "" + str(len(data) - len(filter (lambda x: x != max(data), data))))\n    print (""No of max-1: "" + str(len(data) - len(filter (lambda x: x != max(data) - 1, data))))\n\n'"
1893,7728989,thouis,thouis,2012-10-19 20:56:22,2012-10-19 20:56:23,2012-10-19 20:56:23,closed,,1.4.1,1,11 - Bug;component: Documentation;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1893,b'Histogram plotting example in Tentative Numpy Tutorial is broken for 1.4-devel (Trac #1295)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/1295 on 2009-11-12 by @plaes, assigned to @pv._\n\nHistogram plotting example in Tentative Numpy Tutorial should be updated to use new return parameters.'"
1892,7728988,thouis,thouis,2012-10-19 20:56:20,2012-10-19 20:56:21,2012-10-19 20:56:21,closed,,,1,11 - Bug;component: numpy.f2py;priority: high,https://api.github.com/repos/numpy/numpy/issues/1892,b'scipy build failure wrt changes in r7712 of numpy (Trac #1294)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/1294 on 2009-11-09 by @nilswagner01, assigned to unknown._\n\nThe problem file is generated by f2py.\n\n\n    In file included from scipy/integrate/_odepackmodule.c:6:\n    scipy/integrate/__odepack.h: In function \xa1\xaeodepack_odeint\xa1\xaf:\n    scipy/integrate/__odepack.h:328: warning: call to function\n    \xa1\xaelsoda_\xa1\xaf without a real prototype\n    scipy/integrate/__odepack.h:31: note: \xa1\xaelsoda_\xa1\xaf was\n    declared here\n    scipy/integrate/_odepackmodule.c: At top level:\n    scipy/integrate/multipack.h:114: warning:\n    \xa1\xaemy_make_numpy_array\xa1\xaf defined but not used\n    scipy/integrate/__odepack.h: In function \xa1\xaeodepack_odeint\xa1\xaf:\n    scipy/integrate/__odepack.h:226: warning: \xa1\xaetcrit\xa1\xaf may be\n    used uninitialized in this function\n    scipy/integrate/__odepack.h:227: warning: \xa1\xaewa\xa1\xaf may be used\n    uninitialized in this function\n    /usr/bin/gfortran -Wall -Wall -shared\n    build/temp.linux-x86_64-2.6/scipy/integrate/_odepackmodule.o\n    -L/home/nwagner/src/ATLAS3.8.2/mybuild/lib -L/usr/lib64\n    -Lbuild/temp.linux-x86_64-2.6 -lodepack -llinpack_lite\n    -lmach -lptf77blas -lptcblas -latlas -lpython2.6\n    -lgfortran -o\n    build/lib.linux-x86_64-2.6/scipy/integrate/_odepack.so\n    building \'scipy.integrate.vode\' extension\n    compiling C sources\n    C compiler: /usr/bin/gcc -fno-strict-aliasing -DNDEBUG\n    -fmessage-length=0 -O2 -Wall -D_FORTIFY_SOURCE=2\n    -fstack-protector -funwind-tables\n    -fasynchronous-unwind-tables -g -fwrapv -fPIC\n    \n    creating\n    build/temp.linux-x86_64-2.6/build/src.linux-x86_64-2.6/scipy/integrate\n    compile options: \'-DATLAS_INFO=""\\""3.8.2\\""""\n    -I/home/nwagner/src/ATLAS3.8.2/include\n    -Ibuild/src.linux-x86_64-2.6\n    -I/home/nwagner/local/lib64/python2.6/site-packages/numpy/core/include\n    -I/usr/include/python2.6 -c\'\n    gcc:\n    build/src.linux-x86_64-2.6/scipy/integrate/vodemodule.c\n    build/src.linux-x86_64-2.6/scipy/integrate/vodemodule.c:\n    In function \xa1\xaecb_f_in_dvode__user__routines\xa1\xaf:\n    build/src.linux-x86_64-2.6/scipy/integrate/vodemodule.c:376:\n    error: \xa1\xaey_Dims\xa1\xaf undeclared (first use in this function)\n    build/src.linux-x86_64-2.6/scipy/integrate/vodemodule.c:376:\n    error: (Each undeclared identifier is reported only once\n    build/src.linux-x86_64-2.6/scipy/integrate/vodemodule.c:376:\n    error: for each function it appears in.)\n    build/src.linux-x86_64-2.6/scipy/integrate/vodemodule.c:376:\n    error: \xa1\xaen\xa1\xaf undeclared (first use in this function)\n    build/src.linux-x86_64-2.6/scipy/integrate/vodemodule.c:377:\n    error: \xa1\xaeydot_Dims\xa1\xaf undeclared (first use in this function)\n    build/src.linux-x86_64-2.6/scipy/integrate/vodemodule.c:335:\n    warning: unused variable \xa1\xaeipar_5\xa1\xaf\n    build/src.linux-x86_64-2.6/scipy/integrate/vodemodule.c:334:\n    warning: unused variable \xa1\xaerpar_4\xa1\xaf\n    build/src.linux-x86_64-2.6/scipy/integrate/vodemodule.c:332:\n    warning: unused variable \xa1\xaen_0\xa1\xaf\n    build/src.linux-x86_64-2.6/scipy/integrate/vodemodule.c:\n    In function \xa1\xaecb_jac_in_dvode__user__routines\xa1\xaf:\n    build/src.linux-x86_64-2.6/scipy/integrate/vodemodule.c:508:\n    error: \xa1\xaey_Dims\xa1\xaf undeclared (first use in this function)\n    build/src.linux-x86_64-2.6/scipy/integrate/vodemodule.c:508:\n    error: \xa1\xaen\xa1\xaf undeclared (first use in this function)\n    build/src.linux-x86_64-2.6/scipy/integrate/vodemodule.c:509:\n    error: \xa1\xaejac_Dims\xa1\xaf undeclared (first use in this function)\n    build/src.linux-x86_64-2.6/scipy/integrate/vodemodule.c:509:\n    error: \xa1\xaenrowpd\xa1\xaf undeclared (first use in this function)\n    build/src.linux-x86_64-2.6/scipy/integrate/vodemodule.c:509:\n    warning: left-hand operand of comma expression has no\n    effect\n    build/src.linux-x86_64-2.6/scipy/integrate/vodemodule.c:467:\n    warning: unused variable \xa1\xaeipar_8\xa1\xaf\n    build/src.linux-x86_64-2.6/scipy/integrate/vodemodule.c:466:\n    warning: unused variable \xa1\xaerpar_7\xa1\xaf\n    build/src.linux-x86_64-2.6/scipy/integrate/vodemodule.c:465:\n    warning: unused variable \xa1\xaenrowpd_6\xa1\xaf\n    build/src.linux-x86_64-2.6/scipy/integrate/vodemodule.c:464:\n    warning: unused variable \xa1\xaemu_4\xa1\xaf\n    build/src.linux-x86_64-2.6/scipy/integrate/vodemodule.c:463:\n    warning: unused variable \xa1\xaeml_3\xa1\xaf\n    build/src.linux-x86_64-2.6/scipy/integrate/vodemodule.c:461:\n    warning: unused variable \xa1\xaen_0\xa1\xaf\n    build/src.linux-x86_64-2.6/scipy/integrate/vodemodule.c:\n    In function \xa1\xaecb_f_in_zvode__user__routines\xa1\xaf:\n    build/src.linux-x86_64-2.6/scipy/integrate/vodemodule.c:636:\n    error: \xa1\xaey_Dims\xa1\xaf undeclared (first use in this function)\n    build/src.linux-x86_64-2.6/scipy/integrate/vodemodule.c:636:\n    error: \xa1\xaen\xa1\xaf undeclared (first use in this function)\n    build/src.linux-x86_64-2.6/scipy/integrate/vodemodule.c:637:\n    error: \xa1\xaeydot_Dims\xa1\xaf undeclared (first use in this function)\n    build/src.linux-x86_64-2.6/scipy/integrate/vodemodule.c:595:\n    warning: unused variable \xa1\xaeipar_5\xa1\xaf\n    build/src.linux-x86_64-2.6/scipy/integrate/vodemodule.c:594:\n    warning: unused variable \xa1\xaerpar_4\xa1\xaf\n    build/src.linux-x86_64-2.6/scipy/integrate/vodemodule.c:592:\n    warning: unused variable \xa1\xaen_0\xa1\xaf\n    build/src.linux-x86_64-2.6/scipy/integrate/vodemodule.c:\n    In function \xa1\xaecb_jac_in_zvode__user__routines\xa1\xaf:\n    build/src.linux-x86_64-2.6/scipy/integrate/vodemodule.c:768:\n    error: \xa1\xaey_Dims\xa1\xaf undeclared (first use in this function)\n    build/src.linux-x86_64-2.6/scipy/integrate/vodemodule.c:768:\n    error: \xa1\xaen\xa1\xaf undeclared (first use in this function)\n    build/src.linux-x86_64-2.6/scipy/integrate/vodemodule.c:769:\n    error: \xa1\xaejac_Dims\xa1\xaf undeclared (first use in this function)\n    build/src.linux-x86_64-2.6/scipy/integrate/vodemodule.c:769:\n    error: \xa1\xaenrowpd\xa1\xaf undeclared (first use in this function)\n    build/src.linux-x86_64-2.6/scipy/integrate/vodemodule.c:769:\n    warning: left-hand operand of comma expression has no\n    effect\n    build/src.linux-x86_64-2.6/scipy/integrate/vodemodule.c:727:\n    warning: unused variable \xa1\xaeipar_8\xa1\xaf\n    build/src.linux-x86_64-2.6/scipy/integrate/vodemodule.c:726:\n    warning: unused variable \xa1\xaerpar_7\xa1\xaf\n    build/src.linux-x86_64-2.6/scipy/integrate/vodemodule.c:725:\n    warning: unused variable \xa1\xaenrowpd_6\xa1\xaf\n    build/src.linux-x86_64-2.6/scipy/integrate/vodemodule.c:724:\n    warning: unused variable \xa1\xaemu_4\xa1\xaf\n    build/src.linux-x86_64-2.6/scipy/integrate/vodemodule.c:723:\n    warning: unused variable \xa1\xaeml_3\xa1\xaf\n    build/src.linux-x86_64-2.6/scipy/integrate/vodemodule.c:721:\n    warning: unused variable \xa1\xaen_0\xa1\xaf\n    build/src.linux-x86_64-2.6/scipy/integrate/vodemodule.c:\n    In function \xa1\xaecb_f_in_dvode__user__routines\xa1\xaf:\n    build/src.linux-x86_64-2.6/scipy/integrate/vodemodule.c:376:\n    error: \xa1\xaey_Dims\xa1\xaf undeclared (first use in this function)\n    build/src.linux-x86_64-2.6/scipy/integrate/vodemodule.c:376:\n    error: (Each undeclared identifier is reported only once\n    build/src.linux-x86_64-2.6/scipy/integrate/vodemodule.c:376:\n    error: for each function it appears in.)\n    build/src.linux-x86_64-2.6/scipy/integrate/vodemodule.c:376:\n    error: \xa1\xaen\xa1\xaf undeclared (first use in this function)\n    build/src.linux-x86_64-2.6/scipy/integrate/vodemodule.c:377:\n    error: \xa1\xaeydot_Dims\xa1\xaf undeclared (first use in this function)\n    build/src.linux-x86_64-2.6/scipy/integrate/vodemodule.c:335:\n    warning: unused variable \xa1\xaeipar_5\xa1\xaf\n    build/src.linux-x86_64-2.6/scipy/integrate/vodemodule.c:334:\n    warning: unused variable \xa1\xaerpar_4\xa1\xaf\n    build/src.linux-x86_64-2.6/scipy/integrate/vodemodule.c:332:\n    warning: unused variable \xa1\xaen_0\xa1\xaf\n    build/src.linux-x86_64-2.6/scipy/integrate/vodemodule.c:\n    In function \xa1\xaecb_jac_in_dvode__user__routines\xa1\xaf:\n    build/src.linux-x86_64-2.6/scipy/integrate/vodemodule.c:508:\n    error: \xa1\xaey_Dims\xa1\xaf undeclared (first use in this function)\n    build/src.linux-x86_64-2.6/scipy/integrate/vodemodule.c:508:\n    error: \xa1\xaen\xa1\xaf undeclared (first use in this function)\n    build/src.linux-x86_64-2.6/scipy/integrate/vodemodule.c:509:\n    error: \xa1\xaejac_Dims\xa1\xaf undeclared (first use in this function)\n    build/src.linux-x86_64-2.6/scipy/integrate/vodemodule.c:509:\n    error: \xa1\xaenrowpd\xa1\xaf undeclared (first use in this function)\n    build/src.linux-x86_64-2.6/scipy/integrate/vodemodule.c:509:\n    warning: left-hand operand of comma expression has no\n    effect\n    build/src.linux-x86_64-2.6/scipy/integrate/vodemodule.c:467:\n    warning: unused variable \xa1\xaeipar_8\xa1\xaf\n    build/src.linux-x86_64-2.6/scipy/integrate/vodemodule.c:466:\n    warning: unused variable \xa1\xaerpar_7\xa1\xaf\n    build/src.linux-x86_64-2.6/scipy/integrate/vodemodule.c:465:\n    warning: unused variable \xa1\xaenrowpd_6\xa1\xaf\n    build/src.linux-x86_64-2.6/scipy/integrate/vodemodule.c:464:\n    warning: unused variable \xa1\xaemu_4\xa1\xaf\n    build/src.linux-x86_64-2.6/scipy/integrate/vodemodule.c:463:\n    warning: unused variable \xa1\xaeml_3\xa1\xaf\n    build/src.linux-x86_64-2.6/scipy/integrate/vodemodule.c:461:\n    warning: unused variable \xa1\xaen_0\xa1\xaf\n    build/src.linux-x86_64-2.6/scipy/integrate/vodemodule.c:\n    In function \xa1\xaecb_f_in_zvode__user__routines\xa1\xaf:\n    build/src.linux-x86_64-2.6/scipy/integrate/vodemodule.c:636:\n    error: \xa1\xaey_Dims\xa1\xaf undeclared (first use in this function)\n    build/src.linux-x86_64-2.6/scipy/integrate/vodemodule.c:636:\n    error: \xa1\xaen\xa1\xaf undeclared (first use in this function)\n    build/src.linux-x86_64-2.6/scipy/integrate/vodemodule.c:637:\n    error: \xa1\xaeydot_Dims\xa1\xaf undeclared (first use in this function)\n    build/src.linux-x86_64-2.6/scipy/integrate/vodemodule.c:595:\n    warning: unused variable \xa1\xaeipar_5\xa1\xaf\n    build/src.linux-x86_64-2.6/scipy/integrate/vodemodule.c:594:\n    warning: unused variable \xa1\xaerpar_4\xa1\xaf\n    build/src.linux-x86_64-2.6/scipy/integrate/vodemodule.c:592:\n    warning: unused variable \xa1\xaen_0\xa1\xaf\n    build/src.linux-x86_64-2.6/scipy/integrate/vodemodule.c:\n    In function \xa1\xaecb_jac_in_zvode__user__routines\xa1\xaf:\n    build/src.linux-x86_64-2.6/scipy/integrate/vodemodule.c:768:\n    error: \xa1\xaey_Dims\xa1\xaf undeclared (first use in this function)\n    build/src.linux-x86_64-2.6/scipy/integrate/vodemodule.c:768:\n    error: \xa1\xaen\xa1\xaf undeclared (first use in this function)\n    build/src.linux-x86_64-2.6/scipy/integrate/vodemodule.c:769:\n    error: \xa1\xaejac_Dims\xa1\xaf undeclared (first use in this function)\n    build/src.linux-x86_64-2.6/scipy/integrate/vodemodule.c:769:\n    error: \xa1\xaenrowpd\xa1\xaf undeclared (first use in this function)\n    build/src.linux-x86_64-2.6/scipy/integrate/vodemodule.c:769:\n    warning: left-hand operand of comma expression has no\n    effect\n    build/src.linux-x86_64-2.6/scipy/integrate/vodemodule.c:727:\n    warning: unused variable \xa1\xaeipar_8\xa1\xaf\n    build/src.linux-x86_64-2.6/scipy/integrate/vodemodule.c:726:\n    warning: unused variable \xa1\xaerpar_7\xa1\xaf\n    build/src.linux-x86_64-2.6/scipy/integrate/vodemodule.c:725:\n    warning: unused variable \xa1\xaenrowpd_6\xa1\xaf\n    build/src.linux-x86_64-2.6/scipy/integrate/vodemodule.c:724:\n    warning: unused variable \xa1\xaemu_4\xa1\xaf\n    build/src.linux-x86_64-2.6/scipy/integrate/vodemodule.c:723:\n    warning: unused variable \xa1\xaeml_3\xa1\xaf\n    build/src.linux-x86_64-2.6/scipy/integrate/vodemodule.c:721:\n    warning: unused variable \xa1\xaen_0\xa1\xaf\n    error: Command ""/usr/bin/gcc -fno-strict-aliasing -DNDEBUG\n    -fmessage-length=0 -O2 -Wall -D_FORTIFY_SOURCE=2\n    -fstack-protector -funwind-tables\n    -fasynchronous-unwind-tables -g -fwrapv -fPIC\n    -DATLAS_INFO=""\\""3.8.2\\""""\n    -I/home/nwagner/src/ATLAS3.8.2/include\n    -Ibuild/src.linux-x86_64-2.6\n    -I/home/nwagner/local/lib64/python2.6/site-packages/numpy/core/include\n    -I/usr/include/python2.6 -c\n    build/src.linux-x86_64-2.6/scipy/integrate/vodemodule.c -o\n    build/temp.linux-x86_64-2.6/build/src.linux-x86_64-2.6/scipy/integrate/vodemodule.o""\n    failed with exit status 1\n\n\n'"
1891,7728987,thouis,thouis,2012-10-19 20:56:17,2012-10-19 20:56:19,2012-10-19 20:56:19,closed,,,1,11 - Bug;component: numpy.f2py;priority: high,https://api.github.com/repos/numpy/numpy/issues/1891,b'Changeset 7712 seems to break f2py (Trac #1293)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/1293 on 2009-11-09 by @plaes, assigned to @pearu._\n\nI\'m getting following compile error when building scipy after revision 7712.\nPlease note that vodemodule.c is generated by f2py.\n\n\n\n    creating build-2.6/temp.linux-x86_64-2.6/build-2.6/src.linux-x86_64-2.6/scipy/integrate\n    compile options: \'-DNO_ATLAS_INFO=2 -Ibuild-2.6/src.linux-x86_64-2.6 -I/usr/lib64/python2.6/site-packages/numpy/core/include -I/usr/include/python2.6 -c\'\n    x86_64-pc-linux-gnu-gcc: build-2.6/src.linux-x86_64-2.6/scipy/integrate/vodemodule.c\n    build-2.6/src.linux-x86_64-2.6/scipy/integrate/vodemodule.c: In function \'cb_f_in_dvode__user__routines\':\n    build-2.6/src.linux-x86_64-2.6/scipy/integrate/vodemodule.c:376: error: \'y_Dims\' undeclared (first use in this function)\n    build-2.6/src.linux-x86_64-2.6/scipy/integrate/vodemodule.c:376: error: (Each undeclared identifier is reported only once\n    build-2.6/src.linux-x86_64-2.6/scipy/integrate/vodemodule.c:376: error: for each function it appears in.)\n    build-2.6/src.linux-x86_64-2.6/scipy/integrate/vodemodule.c:376: error: \'n\' undeclared (first use in this function)\n    build-2.6/src.linux-x86_64-2.6/scipy/integrate/vodemodule.c:377: error: \'ydot_Dims\' undeclared (first use in this function)\n    build-2.6/src.linux-x86_64-2.6/scipy/integrate/vodemodule.c: In function \'cb_jac_in_dvode__user__routines\':\n    build-2.6/src.linux-x86_64-2.6/scipy/integrate/vodemodule.c:508: error: \'y_Dims\' undeclared (first use in this function)\n    build-2.6/src.linux-x86_64-2.6/scipy/integrate/vodemodule.c:508: error: \'n\' undeclared (first use in this function)\n    build-2.6/src.linux-x86_64-2.6/scipy/integrate/vodemodule.c:509: error: \'jac_Dims\' undeclared (first use in this function)\n    build-2.6/src.linux-x86_64-2.6/scipy/integrate/vodemodule.c:509: error: \'nrowpd\' undeclared (first use in this function)\n    build-2.6/src.linux-x86_64-2.6/scipy/integrate/vodemodule.c: In function \'cb_f_in_zvode__user__routines\':\n    build-2.6/src.linux-x86_64-2.6/scipy/integrate/vodemodule.c:636: error: \'y_Dims\' undeclared (first use in this function)\n    build-2.6/src.linux-x86_64-2.6/scipy/integrate/vodemodule.c:636: error: \'n\' undeclared (first use in this function)\n    build-2.6/src.linux-x86_64-2.6/scipy/integrate/vodemodule.c:637: error: \'ydot_Dims\' undeclared (first use in this function)\n    build-2.6/src.linux-x86_64-2.6/scipy/integrate/vodemodule.c: In function \'cb_jac_in_zvode__user__routines\':\n    build-2.6/src.linux-x86_64-2.6/scipy/integrate/vodemodule.c:768: error: \'y_Dims\' undeclared (first use in this function)\n    build-2.6/src.linux-x86_64-2.6/scipy/integrate/vodemodule.c:768: error: \'n\' undeclared (first use in this function)\n    build-2.6/src.linux-x86_64-2.6/scipy/integrate/vodemodule.c:769: error: \'jac_Dims\' undeclared (first use in this function)\n    build-2.6/src.linux-x86_64-2.6/scipy/integrate/vodemodule.c:769: error: \'nrowpd\' undeclared (first use in this function)\n    build-2.6/src.linux-x86_64-2.6/scipy/integrate/vodemodule.c: In function \'cb_f_in_dvode__user__routines\':\n    build-2.6/src.linux-x86_64-2.6/scipy/integrate/vodemodule.c:376: error: \'y_Dims\' undeclared (first use in this function)\n    build-2.6/src.linux-x86_64-2.6/scipy/integrate/vodemodule.c:376: error: (Each undeclared identifier is reported only once\n    build-2.6/src.linux-x86_64-2.6/scipy/integrate/vodemodule.c:376: error: for each function it appears in.)\n    build-2.6/src.linux-x86_64-2.6/scipy/integrate/vodemodule.c:376: error: \'n\' undeclared (first use in this function)\n    build-2.6/src.linux-x86_64-2.6/scipy/integrate/vodemodule.c:377: error: \'ydot_Dims\' undeclared (first use in this function)\n    build-2.6/src.linux-x86_64-2.6/scipy/integrate/vodemodule.c: In function \'cb_jac_in_dvode__user__routines\':\n    build-2.6/src.linux-x86_64-2.6/scipy/integrate/vodemodule.c:508: error: \'y_Dims\' undeclared (first use in this function)\n    build-2.6/src.linux-x86_64-2.6/scipy/integrate/vodemodule.c:508: error: \'n\' undeclared (first use in this function)\n    build-2.6/src.linux-x86_64-2.6/scipy/integrate/vodemodule.c:509: error: \'jac_Dims\' undeclared (first use in this function)\n    build-2.6/src.linux-x86_64-2.6/scipy/integrate/vodemodule.c:509: error: \'nrowpd\' undeclared (first use in this function)\n    build-2.6/src.linux-x86_64-2.6/scipy/integrate/vodemodule.c: In function \'cb_f_in_zvode__user__routines\':\n    build-2.6/src.linux-x86_64-2.6/scipy/integrate/vodemodule.c:636: error: \'y_Dims\' undeclared (first use in this function)\n    build-2.6/src.linux-x86_64-2.6/scipy/integrate/vodemodule.c:636: error: \'n\' undeclared (first use in this function)\n    build-2.6/src.linux-x86_64-2.6/scipy/integrate/vodemodule.c:637: error: \'ydot_Dims\' undeclared (first use in this function)\n    build-2.6/src.linux-x86_64-2.6/scipy/integrate/vodemodule.c: In function \'cb_jac_in_zvode__user__routines\':\n    build-2.6/src.linux-x86_64-2.6/scipy/integrate/vodemodule.c:768: error: \'y_Dims\' undeclared (first use in this function)\n    build-2.6/src.linux-x86_64-2.6/scipy/integrate/vodemodule.c:768: error: \'n\' undeclared (first use in this function)\n    build-2.6/src.linux-x86_64-2.6/scipy/integrate/vodemodule.c:769: error: \'jac_Dims\' undeclared (first use in this function)\n    build-2.6/src.linux-x86_64-2.6/scipy/integrate/vodemodule.c:769: error: \'nrowpd\' undeclared (first use in this function)\n    error: Command ""x86_64-pc-linux-gnu-gcc -pthread -DNDEBUG -march=native -ggdb -O2 -pipe -fPIC -DNO_ATLAS_INFO=2 -Ibuild-2.6/src.linux-x86_64-2.6 -I/usr/lib64/python2.6/site-packages/numpy/core/include -I/usr/include/python2.6 -c build-2.6/src.linux-x86_64-2.6/scipy/integrate/vodemodule.c -o build-2.6/temp.linux-x86_64-2.6/build-2.6/src.linux-x86_64-2.6/scipy/integrate/vodemodule.o"" failed with exit status 1\n\n'"
1890,7728981,thouis,thouis,2012-10-19 20:56:13,2012-10-19 20:56:16,2012-10-19 20:56:16,closed,,1.4.1,9,11 - Bug;component: numpy.numarray;priority: high,https://api.github.com/repos/numpy/numpy/issues/1890,b'64-bit numpy problem (Trac #1292)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/1292 on 2009-11-09 by trac user mnikhil, assigned to unknown._\n\nAnother 64-bit-specific numpy bug:\n\n32-bit python-2.5.1: \n>>> import numpy\n>>> numpy.version.version\n\'1.0.3.1\'\n>>> a = numpy.arange(10, dtype=""int32"")\n>>> i = numpy.array([3, 5, 6], dtype=""int32"")\n>>> numpy.add.reduceat(a, i)\narray([ 7,  5, 30])\n\n64-bit python-2.6.1\n>>> import numpy\n>>> numpy.version.version\n\'1.3.0\'\n>>> a = numpy.arange(10, dtype=""int32"")\n>>> i = numpy.array([3, 5, 6], dtype=""int32"")\n>>> numpy.add.reduceat(a, i)\narray([ 8589934594, 12884901888, 64424509443]\n\nIs this expected? Why? What would have changed this?'"
1889,7728979,thouis,thouis,2012-10-19 20:56:10,2012-10-23 02:42:46,2012-10-19 20:56:11,closed,,,1,11 - Bug;component: Other;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1889,b'ERROR: test_nan (test_utils.TestULP) (Trac #1291)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/1291 on 2009-11-09 by @stsci-sienkiew, assigned to unknown._\n\n\n\n    ======================================================================\n    ERROR: test_nan (test_utils.TestULP)\n    ----------------------------------------------------------------------\n    Traceback (most recent call last):\n      File ""/usr/stsci/pyssgdev/2.5.4/numpy/testing/tests/test_utils.py"", line 409, in test_nan\n        lambda: assert_array_max_ulp(nan, inf,\n      File ""/usr/stsci/pyssgdev/Python-2.5.4/lib/python2.5/unittest.py"", line 320, in failUnlessRaises\n        callableObj(*args, **kwargs)\n      File ""/usr/stsci/pyssgdev/2.5.4/numpy/testing/tests/test_utils.py"", line 410, in <lambda>\n        maxulp=maxulp))\n      File ""/usr/stsci/pyssgdev/2.5.4/numpy/testing/utils.py"", line 1121, in assert_array_max_ulp\n        maxulp)\n    TypeError: int argument required\n    \n    ----------------------------------------------------------------------\n\n\n\n\nnumpy trunk rev 7699\n\nPython 2.5.4\n\nseen on:\n\n * Red Hat Enterprise 4, 32 bit\n * Mac OSX Leopard, 32 bit\n\nnot seen on:\n\n * Red Hat Enterprise 4, 64 bit\n\n'"
1888,7728975,thouis,thouis,2012-10-19 20:56:08,2012-10-23 02:42:45,2012-10-19 20:56:09,closed,,,1,11 - Bug;component: Other;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1888,b'ERROR: test_simple2 (test_utils.TestArrayAlmostEqualNulp)  (bad format string) (Trac #1290)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/1290 on 2009-11-09 by @stsci-sienkiew, assigned to unknown._\n\n\n\n    ======================================================================\n    ERROR: test_simple2 (test_utils.TestArrayAlmostEqualNulp)\n    ----------------------------------------------------------------------\n    Traceback (most recent call last):\n      File ""/usr/stsci/pyssgdev/2.5.4/numpy/testing/tests/test_utils.py"", line 317, in test_simple2\n        self.failUnlessRaises(AssertionError, failure)\n      File ""/usr/stsci/pyssgdev/Python-2.5.4/lib/python2.5/unittest.py"", line 320, in failUnlessRaises\n        callableObj(*args, **kwargs)\n      File ""/usr/stsci/pyssgdev/2.5.4/numpy/testing/tests/test_utils.py"", line 316, in failure\n        nulp=1000)\n      File ""/usr/stsci/pyssgdev/2.5.4/numpy/testing/utils.py"", line 1112, in assert_array_almost_equal_nulp\n        ""(max is %d)"" % (nulp, max_nulp))\n    TypeError: int argument required\n\n\n\nFormat string does not match args to be printed.\n\nnumpy trunk rev 7699\n\nPython 2.5.4\n\nseen on:\n\n * Red Hat Enterprise 4, 32 bit\n * Mac OSX Leopard, 32 bit\n\nnot seen on:\n\n * Red Hat Enterprise 4, 64 bit\n\n\n'"
1887,7728974,thouis,thouis,2012-10-19 20:56:06,2012-10-19 20:56:07,2012-10-19 20:56:07,closed,,1.4.1,2,11 - Bug;component: Other;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1887,"b'Solaris: ""numpy/core/src/npymath/ieee754.c"", line 172: #error: Needs nextafterl implementation for this platform (Trac #1289)'","b'_Original ticket http://projects.scipy.org/numpy/ticket/1289 on 2009-11-09 by @stsci-sienkiew, assigned to unknown._\n\n\n\n    compile options: \'-Inumpy/core/include -Ibuild/src.solaris-2.8-sun4u-2.5/numpy/core/include/numpy -Inumpy/core/src -Inumpy/core -Inumpy/core/src/npymath -Inumpy/core/src/multiarray -Inumpy/core/src/umath -Inumpy/core/include -I/usr/stsci/pyssgdev/Python-2.5.4/include/python2.5 -Ibuild/src.solaris-2.8-sun4u-2.5/numpy/core/src/multiarray -Ibuild/src.solaris-2.8-sun4u-2.5/numpy/core/src/umath -c\'\n    cc: numpy/core/src/npymath/ieee754.c\n    ""numpy/core/src/npymath/ieee754.c"", line 172: #error: Needs nextafterl implementation for this platform\n    cc: acomp failed for numpy/core/src/npymath/ieee754.c\n    ""numpy/core/src/npymath/ieee754.c"", line 172: #error: Needs nextafterl implementation for this platform\n    cc: acomp failed for numpy/core/src/npymath/ieee754.c\n    error: Command ""cc -DNDEBUG -I/usr/stsci/pyssgdev/Python-2.5.4/include -xcode=pic32 -Inumpy/core/include -Ibuild/src.solaris-2.8-sun4u-2.5/numpy/core/include/numpy -Inumpy/core/src -Inumpy/core -Inumpy/core/src/npymath -Inumpy/core/src/multiarray -Inumpy/core/src/umath -Inumpy/core/include -I/usr/stsci/pyssgdev/Python-2.5.4/include/python2.5 -Ibuild/src.solaris-2.8-sun4u-2.5/numpy/core/src/multiarray -Ibuild/src.solaris-2.8-sun4u-2.5/numpy/core/src/umath -c numpy/core/src/npymath/ieee754.c -o build/temp.solaris-2.8-sun4u-2.5/numpy/core/src/npymath/ieee754.o"" failed with exit status 2\n\n\n\nPython 2.5.4\n\ncc: Sun WorkShop 6 update 2 C 5.3 Patch 111679-14 2004/02/20\n\nnumpy trunk rev 7699\n'"
1885,7728972,thouis,thouis,2012-10-19 20:56:03,2012-10-19 20:56:03,2012-10-19 20:56:03,closed,,1.5.1,1,11 - Bug;component: numpy.core;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1885,b'uint64 formatting does not work for large numbers (Trac #1287)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/1287 on 2009-11-06 by @astrofrog, assigned to unknown._\n\nFormatting of large uint64 numbers does not work - it\'s necessary to wrap the numpy number inside long() before formatting\n\nIn [3]: ""%40i"" % np.uint64(2**64-1)\n\nOut[3]: \'                                      -1\'\n\nIn [4]: ""%40i"" % long(np.uint64(2**64-1))\n\nOut[4]: \'                    18446744073709551615\'\n\nSo it looks like somewhere, numpy is converting the uint64 number to a python int() instead of long() - which only works for numbers < 2**63-1.'"
1884,7728968,thouis,thouis,2012-10-19 20:56:00,2012-10-19 20:56:02,2012-10-19 20:56:02,closed,,,4,11 - Bug;component: numpy.core;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1884,b'numpy.min() and max() are confusing vs. Python behavior (Trac #1286)',"b""_Original ticket http://projects.scipy.org/numpy/ticket/1286 on 2009-11-06 by trac user wkornewald, assigned to unknown._\n\nI had to search a very long time to find this bug. When importing\n\nfrom numpy import max, min\n\nand calling max(2, 3) (which would work in Python) the numpy version returns 2 (always the first argument) without complaining that I didn't pass an array. This causes a lot of bugs (also for my colleague who thought, too, that min and max would work like Python's min and max functions).\n\nPlease fix this, so it either throws an error or falls back to Python behavior. The latter would be better, of course."""
1883,7728967,thouis,thouis,2012-10-19 20:55:58,2012-10-19 20:55:59,2012-10-19 20:55:59,closed,,1.4.1,2,11 - Bug;component: Other;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1883,b'Missing semicolon in cfuncs.py causes compile errors in f2py with quad precision. (Trac #1285)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/1285 on 2009-11-05 by trac user cgranade, assigned to unknown._\n\nWhen compiling Fortran code that uses quadruple precision with the f2py tool, I get the following errors:\n\n\n    /tmp/tmpZsJCOP/src.linux-i686-2.6/tiswe_integratemodule.c: In function \xa1\xaelong_double_from_pyobj\xa1\xaf:\n    /tmp/tmpZsJCOP/src.linux-i686-2.6/tiswe_integratemodule.c:149: error: expected \xa1\xae;\xa1\xaf before \xa1\xaereturn\xa1\xaf\n\n\nTracking down the problem, there is a single semi-colon missing in cfuncs.py that causes the error:\n\n\n    \\t\\t\\t(*v) = *((longdouble *)PyArray_DATA(obj))\n\n'"
1882,7728964,thouis,thouis,2012-10-19 20:55:56,2012-10-19 20:55:57,2012-10-19 20:55:57,closed,,,3,11 - Bug;component: numpy.core;priority: high,https://api.github.com/repos/numpy/numpy/issues/1882,b'ImportError: No module named multiarray when moving cPickle files between (Trac #1284)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/1284 on 2009-11-04 by trac user reckoner, assigned to unknown._\n\nOn winxp 32-bit:\n\nPython 2.5.2 (r252:60911, Feb 21 2008, 13:11:45) [MSC v.1310 32 bit (Intel)] on\nwin32\nType ""help"", ""copyright"", ""credits"" or ""license"" for more information.\n\n\n\n    \n    >>> import numpy\n    >>> import cPickle\n    >>> a = numpy.eye(10)\n    >>> cPickle.dump(a,open(\'from32bitxp.pkl\',\'w\'))\n    >>> import numpy.core.multiarray\n    >>> numpy.__version__\n    \'1.0.4\'\n    >>>\n\n\nOn linux 64 bit:\n\n\n    Python 2.5.4 (r254:67916, Feb  5 2009, 19:52:35)\n    [GCC 4.1.2 20071124 (Red Hat 4.1.2-42)] on linux2\n    Type ""help"", ""copyright"", ""credits"" or ""license"" for more information.\n    >>> import numpy\n    >>> import cPickle\n    >>> cPickle.load(open(\'from32bitxp.pkl\'))\n    Traceback (most recent call last):\n     File ""<stdin>"", line 1, in <module>\n    ImportError: No module named multiarray\n    >>> numpy.__version__\n    \'1.2.1\'\n    >>> import numpy.core.multiarray\n    >>>\n\n\nNote that I transfer the from32bitxp file from the winxp32 machine to\nthe linux host. Also, I\'ve tried this with version 1.3 on winxp and\nget the same problem on the linux host.\n\nHere\'s more interesting info:\n\nOn linux:\n\n\n    >>> a = numpy.eye(10)\n    >>> cPickle.dump(a,open(\'from64bitLinux.pkl\',\'w\'))\n\n\nupon transferring the file to winxp 32 and on winxp32:\n\n\n    >>> cPickle.load(open(\'from64bitLinux.pkl\'))\n\n\nSee? No problem going from linux to winxp32; but problems going the other way.\n\nPlease let me know if you need more info on this.\n\nAny help appreciated.'"
1881,7728963,thouis,thouis,2012-10-19 20:55:53,2012-10-19 20:55:55,2012-10-19 20:55:55,closed,,1.4.1,3,11 - Bug;component: numpy.core;priority: high,https://api.github.com/repos/numpy/numpy/issues/1881,b'TypeError when using rec.fromrecords with an object field (Trac #1283)',"b""_Original ticket http://projects.scipy.org/numpy/ticket/1283 on 2009-11-04 by @astrofrog, assigned to unknown._\n\nThe following code:\n\nnp.rec.fromrecords([(1,'hello'),(2,'world')],dtype=[('a',np.int8), ('b',np.object_)])\n\nraises a TypeError (see transcript attached)"""
1880,7728961,thouis,thouis,2012-10-19 20:55:51,2012-10-19 20:55:52,2012-10-19 20:55:52,closed,,1.5.1,2,11 - Bug;component: numpy.core;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1880,b'non consequent dtype object identity (Trac #1282)',"b""_Original ticket http://projects.scipy.org/numpy/ticket/1282 on 2009-11-04 by trac user mcieslik, assigned to unknown._\n\ndtype object identity is different for different strings used to define the dtype.\n\n\n\n    In [46]: import numpy as np\n    In [47]: s1_1 = np.dtype('S1')\n    In [48]: s1_2 = np.dtype('S1')\n    In [49]: i_1 = np.dtype('int32')\n    In [50]: i_2 = np.dtype('int32')\n    In [51]: s1_1 is s1_2\n    Out[51]: False\n    In [52]: i_1 is i_2\n    Out[52]: True\n\n\n"""
1877,7728957,thouis,thouis,2012-10-19 20:55:43,2012-10-23 02:42:38,2012-10-19 20:55:44,closed,,1.4.1,2,11 - Bug;component: numpy.core;priority: high,https://api.github.com/repos/numpy/numpy/issues/1877,b'Memory leak in array(list of matrices) (Trac #1279)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/1279 on 2009-10-31 by @pv, assigned to unknown._\n\nThe following code leaks memory (Numpy 1.4.0.dev7592):\n\n\n    import numpy as np\n    print np.__version__\n    \n    foo = []\n    for i in xrange(200):\n        foo.append(np.matrix([1, 1]))\n    \n    while True:\n        # Leaks memory\n        np.array(foo)\n\n\n'"
1876,7728955,thouis,thouis,2012-10-19 20:55:40,2012-10-19 20:55:42,2012-10-19 20:55:42,closed,,,4,11 - Bug;component: Other;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1876,b'Assigning complex data to real array loses imaginary part (Trac #1278)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/1278 on 2009-10-28 by @inducer, assigned to unknown._\n\n>>> x = numpy.array([1], dtype=numpy.float64)\n>>> x[0] = numpy.complex128(1j)\n>>> x[0]\n0.0\n'"
1875,7728954,thouis,thouis,2012-10-19 20:55:38,2012-10-23 02:42:36,2012-10-19 20:55:39,closed,,,4,11 - Bug;component: Other;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1875,b'Constructing real arrays with complex numbers leads to funny errors (Trac #1277)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/1277 on 2009-10-28 by @inducer, assigned to unknown._\n\n>>> numpy.array([1j], dtype=numpy.float64)\nTraceback (most recent call last):\n  File ""<stdin>"", line 1, in <module>\nValueError: setting an array element with a sequence.\n'"
1874,7728951,thouis,thouis,2012-10-19 20:55:36,2012-10-19 20:55:37,2012-10-19 20:55:37,closed,,,2,11 - Bug;component: Other;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1874,b'comparing string and unicode arrays broken (Trac #1276)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/1276 on 2009-10-27 by @mdboom, assigned to unknown._\n\n\n\n    \n    In [1]: import numpy as np\n    \n    In [2]: x = np.array([\'abc\', \'def\'], np.string_)\n    \n    In [3]: y = np.array([\'abc\', \'def\'], np.unicode_)\n    \n    In [4]: x == y\n    Out[4]: array([ True,  True], dtype=bool)\n    \n    In [5]: y == x\n    Out[5]: array([ True,  True], dtype=bool)\n    \n    In [6]: x = np.array([\'abcd\', \'def\'], np.string_)\n    \n    In [7]: x == y\n    ---------------------------------------------------------------------------\n    TypeError                                 Traceback (most recent call last)\n    \n    /wonkabar/data1/builds/numpy/tools/c_coverage/<ipython console> in <module>()\n    \n    TypeError: array cannot be safely cast to required type\n    \n    In [8]: y == x\n    ---------------------------------------------------------------------------\n    TypeError                                 Traceback (most recent call last)\n    \n    /wonkabar/data1/builds/numpy/tools/c_coverage/<ipython console> in <module>()\n    \n    TypeError: array cannot be safely cast to required type\n    \n\n\n\nIf _string_richcompare is given a mixed pair of string and unicode arrays, it first casts the string array to a unicode array before performing the comparison.  Unfortunately, this cast doesn\'t always work.\n\nLet\'s say we are comparing string array \'s\' and unicode array \'u\'.  \'s\' will be converted to unicode, but with the same elsize as \'u\'.  If the elsize of \'u\' is not big enough to hold \'s\', an ""array cannot be safely cast to required type"" exception is raised.\n\nThe solution is to, rather than using the type of \'u\' verbatim, to copy it, and then set elsize to 4 * s->descr->elsize, so it will always be big enough to hold a unicode version of \'s\'.  (Patch forthcoming).'"
1873,7728950,thouis,jaimefrio,2012-10-19 20:55:34,2016-03-27 18:19:10,2016-03-27 18:19:10,closed,,NumPy 2.0,6,11 - Bug;component: numpy.core;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1873,b'memory corruption by ndarray_instance.data assignment (data should be made readonly) (Trac #1275)',"b""_Original ticket http://projects.scipy.org/numpy/ticket/1275 on 2009-10-25 by trac user mcieslik, assigned to unknown._\n\nIt's probably not a bug, but I'd like to ask for clarification. I try to make two arrays share memory. I create big array from small arrays (this involves a copy e.g. by vstack). Create slice/views of the big array corresponding to the small arrays and do a array.data assignment i.e.:\n\n\n\n\n    small_array.data = big_array[some_slice].data\n\n\n\n\nThis works, both arrays can now modify the same memory, but is not safe as it can lead to memory corruption (see below). My first question: is this considered very very bad practice and if so how to point an ndarray instance to a new memory safely. \n\n\n\n    \n    In [1]: import numpy as np\n    In [2]: zeros = np.zeros((2,2))\n    In [3]: double_zeros = np.vstack((zeros, zeros))\n    In [4]: double_zeros\n    Out[4]:             \n    array([[ 0.,  0.],  \n           [ 0.,  0.],  \n           [ 0.,  0.],  \n           [ 0.,  0.]]) \n    In [5]: zeros.data = double_zeros[0:3].data\n    In [6]: double_double_zeros = np.vstack((double_zeros,double_zeros))\n    In [7]: double_double_zeros\n    Out[7]:                    \n    array([[ 0.,  0.],         \n           [ 0.,  0.],         \n           [ 0.,  0.],         \n           [ 0.,  0.],         \n           [ 0.,  0.],         \n           [ 0.,  0.],\n           [ 0.,  0.],\n           [ 0.,  0.]])\n    In [8]: double_zeros.data = double_double_zeros[0:5].data\n    In [9]: zeros\n    Out[9]:\n    array([[  1.25794259e-312,   9.42758674e-317],\n           [  1.58101007e-322,   2.37151510e-322]])\n    \n    In [10]: zeros[0][0] = 1.1\n    In [11]: zeros\n    Out[11]:\n    array([[  9.88131292e-324,   3.95252517e-323],\n           [  4.94065646e-324,   2.42092166e-322]])\n    In [12]: zeros[0][0] = 2\n    In [13]: *** glibc detected *** /usr/bin/python: corrupted double-linked list: 0x000000000117dab0 ***\n    (this kills the interpreter)\n\n\n\n\n\n\n\n\n\n\n """
1872,7728949,thouis,thouis,2012-10-19 20:55:32,2012-10-19 20:55:32,2012-10-19 20:55:32,closed,,1.4.1,2,11 - Bug;component: Documentation;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1872,b'remove objects from constants.py (Trac #1274)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/1274 on 2009-10-24 by @rgommers, assigned to @pv._\n\nThese objects (line, lines, etc) leak through and show up in the doc wiki. They should not. Fix is a one-liner, patch attached.'"
1871,7728946,thouis,thouis,2012-10-19 20:55:28,2012-10-23 02:42:34,2012-10-19 20:55:30,closed,,1.4.1,6,11 - Bug;component: numpy.distutils;priority: highest,https://api.github.com/repos/numpy/numpy/issues/1871,"b'invalid npymath configuration, when installed as an egg (Trac #1273)'","b""_Original ticket http://projects.scipy.org/numpy/ticket/1273 on 2009-10-24 by @pv, assigned to @dmcooke._\n\nNpymath library location is reported wrong when the package is installed as an egg:\n\n\n    site-packages$ ls -d numpy*\n    numpy-1.4.0.dev7536_0a6cc5-py2.6-linux-i686.egg/\n\n\nlike so:\n\n\n    >>> from numpy.distutils.misc_util import get_numpy_include_dirs, get_info\n    >>> get_info('npymath')\n    {'define_macros': [], 'libraries': ['npymath', 'm'], 'library_dirs': ['/home/pauli/koodi/proj/scipy/numpy/dist/linux/lib/python2.6/site-packages/numpy/core/lib'], 'include_dirs': ['/home/pauli/koodi/proj/scipy/numpy/dist/linux/lib/python2.6/site-packages/numpy/core/include']}\n    >>> import numpy\n    >>> numpy.__version__\n    '1.4.0.dev7536+0a6cc5'\n\n\nAlso, the libnpymath.a static library doesn't seem to be included in the egg."""
1870,7728945,thouis,thouis,2012-10-19 20:55:26,2012-10-23 02:42:30,2012-10-19 20:55:27,closed,,,1,11 - Bug;component: Other;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1870,b'Building Numpy as a 4-way Mac binary from source (Trac #1272)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/1272 on 2009-10-23 by trac user brian, assigned to unknown._\n\nHi,\n\nI\'m unable to build numpy-1.3.0 as a 4-way binary on a 10.5 Mac i386 using gcc-4.0.1.  I receive the following error message when ""-arch ppc64"" is included as a compiler flag.\n\nnumpy/core/include/numpy/npy_endian.h:33:10: error: #error Unknown CPU: can not set endianness\n\nI\'m able to build successfully after editing\n\nnpy_endian.h\n\nIncluding ""defined(NPY_CPU_PPC64)"" to line 28 seems to do the trick.'"
1869,7728944,thouis,thouis,2012-10-19 20:55:23,2012-10-19 20:55:24,2012-10-19 20:55:24,closed,,1.5.0,2,11 - Bug;component: numpy.core;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1869,b'Bug in __pow__ for negative exponents of complex zero (Trac #1271)',"b""_Original ticket http://projects.scipy.org/numpy/ticket/1271 on 2009-10-23 by trac user jstenar, assigned to unknown._\n\n__pow__ gives the wrong result for taking 0j to negative powers. Except when the exponent is -1.\n\nI have seen this both on python 2.6 with numpy 1.3 and python 2.4 and numpy 1.2.1\n\nExample:\nIn [1]: from numpy import *\n\nIn [2]: array(0j)**-1\nOut[2]: (nan+nan*j)\n\nIn [3]: array(0j)**-0.5\nOut[3]: 0j\n\nIn [4]: array(0) **-0.5\nOut[4]: inf\n\nIn [5]: array(0j)**-2\nOut[5]: 0j\n\nIn [6]: array(0j)**-2.4\nOut[6]: 0j\n\nIn [7]: array(0j)**(-0.5+0j)\nOut[7]: 0j\n\nIn [8]: numpy.__version__\nOut[8]: '1.3.0'\n\nIn [9]: import sys;sys.version\nOut[9]: '2.6.2 (r262:71605, Apr 14 2009, 22:40:02) [MSC v.1500 32 bit (Intel)]'\n\n"""
1867,7728938,thouis,thouis,2012-10-19 20:55:20,2012-10-19 20:55:20,2012-10-19 20:55:20,closed,,,1,11 - Bug;component: numpy.core;priority: high,https://api.github.com/repos/numpy/numpy/issues/1867,b'refcount decremented with record scalar (Trac #1269)',"b""_Original ticket http://projects.scipy.org/numpy/ticket/1269 on 2009-10-21 by trac user batripler, assigned to unknown._\n\nThe following function reduces the refcount of None (by one) every time it is run. If the dtype is expanded to include more objects, the refcount will be decremented by one for each additional object field added to the record.\n\n\n\n    import sys,numpy\n    def numpybug():\n      print sys.getrefcount(None)\n      dt=numpy.dtype([('a',object),('b',object)])\n      sc=numpy.empty(1, dt)[0]; a=numpy.empty(1, dt)\n      a[:]=sc\n      del sc, a\n      print sys.getrefcount(None)\n\n\n"""
1865,7728931,thouis,thouis,2012-10-19 20:55:16,2012-10-19 20:55:17,2012-10-19 20:55:17,closed,,1.4.1,5,11 - Bug;component: numpy.core;priority: high,https://api.github.com/repos/numpy/numpy/issues/1865,b'Unaligned object pointers are not handled correctly on platforms where alignment matters (Trac #1267)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/1267 on 2009-10-19 by @mdboom, assigned to unknown._\n\nCreating arrays containing unaligned PyObject *\'s crashes with bus errors on Solaris.\n\nFor example, this is enough:\n\n\n\n       np.zeros((10,), dtype=""O,c"")\n\n\n\nFor more discussion of this issue, see this mailing list thread:\n\nhttp://www.nabble.com/object-array-alignment-issues-tt25912008.html#a25912008\n\nMuch of that discussion is about performance, but the purpose of this bug is just basic correctness on alignment-requiring platforms.\n\nI will be attaching a (largish) patch to address this for review.'"
1863,7728927,thouis,thouis,2012-10-19 20:55:10,2012-10-19 20:55:12,2012-10-19 20:55:12,closed,,,3,11 - Bug;component: Other;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1863,b'64bit System: take raises TypeError when using int64 indices (Trac #1265)',"b""_Original ticket http://projects.scipy.org/numpy/ticket/1265 on 2009-10-18 by trac user crassus, assigned to unknown._\n\nI'm running the scipy package within a VM for sage  http://sagemath.org/\nnumpy.version.version: 1.3.0\nCPU: Intel i7\n\nCode to produce the bug:\n\nimport numpy as N\ndat= N.arange(10)\nidxs= N.array([3,1,4,1,5,9], dtype=N.int64)\nprint dat[idxs]    # works fine\nprint dat.take(N.array(idxs, dtype=N.int32))    # work fine, too\nprint dat.take(idxs)    # raises: ...\n\nTypeError: array cannot be safely cast to required type\n\n\nSo take checks whether the indices can be converted to some int32. This is obviously not always possible. But indexing using square-braces does not check it. Furthermore on a 64bit system one should be able to use int64 as indices. So arr.take(idxs) should have the same behaviour as arr[idxs]"""
1861,7728925,thouis,thouis,2012-10-19 20:55:04,2012-10-19 20:55:06,2012-10-19 20:55:06,closed,,1.3.0,6,11 - Bug;component: numpy.core;priority: high,https://api.github.com/repos/numpy/numpy/issues/1861,b'Strange numpy.float96 behaviour (Trac #1263)',"b""_Original ticket http://projects.scipy.org/numpy/ticket/1263 on 2009-10-15 by trac user bgbg, assigned to unknown._\n\nThis is what I see on my windows computer\n\n\n\n    >>> import sys\n    >>> import numpy as np\n    >>> print sys.version\n    2.5.4 (r254:67916, Dec 23 2008, 15:10:54) [MSC v.1310 32 bit (Intel)]\n    >>> print np.__version__\n    1.2.1\n    >>> print np.float(4.3)\n    4.3\n    >>> print np.float32(4.3)\n    4.3\n    >>> print np.float96(4.3)\n    -2.03246817962e-262\n    >>> #make sure the problem isn't in string representation\n    ... res  = np.float96(4.3) + 1\n    >>> print res\n    -2.72509429761e-108\n    >>>\n\n\n\nExpected behaviour: \n\n\n    >>> print np.float96(4.3)\n    3.4\n\n\n\n\n\nOn the same machine, cygwin version of python and numpy (note the same version of numpy):\n\n\n    >>> import sys\n    >>> import numpy as np\n    >>> print sys.version\n    2.5.2 (r252:60911, Dec  2 2008, 09:26:14)\n    [GCC 3.4.4 (cygming special, gdc 0.12, using dmd 0.125)]\n    >>> print np.__version__\n    1.2.1\n    >>> print np.float(4.3)\n    4.3\n    >>> print np.float32(4.3)\n    4.3\n    >>> print np.float96(4.3)\n    4.3\n    >>> #make sure the problem isn't in string representation\n    ... res  = np.float96(4.3) + 1\n    >>> print res\n    5.3\n\n\n\n\n\n\n"""
1857,7728910,thouis,thouis,2012-10-19 20:54:49,2012-10-23 02:42:12,2012-10-19 20:54:52,closed,,1.4.1,7,11 - Bug;component: Other;priority: highest,https://api.github.com/repos/numpy/numpy/issues/1857,b'byteswapping a complex scalar fails (Trac #1259)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/1259 on 2009-10-09 by @mdboom, assigned to unknown._\n\n\n\n    \n     >>> x = np.array([-1j], \'<c8\')\n     >>> x.tostring().encode(\'hex\')\n    \'00000000000080bf\'\n    # This is a little-endian representation, in the order (real, imag)\n    \n    # When I swap the whole array, it swaps each of the (real, imag) parts \n    separately\n     >>> y = x.byteswap()\n     >>> y.tostring().encode(\'hex\')\n    \'00000000bf800000\'\n    # and this round-trips fine\n     >>> z = np.fromstring(y.tostring(), dtype=\'>c8\')\n     >>> assert z[0] == -1j\n     >>>\n    \n    # When I swap the scalar, it seems to swap the entire 8 bytes\n     >>> y = x[0].byteswap()\n     >>> y.tostring().encode(\'hex\')\n    \'bf80000000000000\'\n    # ...and this doesn\'t round-trip\n     >>> z = np.fromstring(y.tostring(), dtype=\'>c8\')\n     >>> assert z[0] == -1j\n    Traceback (most recent call last):\n      File ""<stdin>"", line 1, in <module>\n    AssertionError\n     >>>\n    \n\n\n\nTravis O. suggested a fix on the mailing list here:\n\nhttp://www.nabble.com/byteswapping-a-complex-scalar-td25788857.html'"
1856,7728909,thouis,thouis,2012-10-19 20:54:47,2012-10-19 20:54:48,2012-10-19 20:54:48,closed,,,1,11 - Bug;component: numpy.core;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1856,b'numpy.array does not upconvert from float to store complex types (Trac #1258)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/1258 on 2009-10-08 by trac user pkwill, assigned to unknown._\n\nThe documentation to numpy.array() states of the dtype keyword that, ""If not given, then the type will be determined as the minimum type required to hold the objects in the sequence. This argument can only be used to \xa1\xaeupcast\xa1\xaf the array."" However, if I try to create an array with a complex value while specifying a ""lower"" dtype:\n\nfoo = numpy.array ([1+1j], dtype=numpy.float)\n\nI get an exception:\n\nValueError: setting an array element with a sequence.\n\nI think the expected and desired behavior in this case would be to return an ndarray of some complex dtype. Note that if I don\'t specify the dtype:\n\nfoo = numpy.array ([1+1j], dtype=None)\n\nthere\'s no problem.\n\nI ran into this because I\'m trying to use numpy.asfarray () to coerce arbitrary objects into arrays of ""at least"" floating point type, but complex type if that\'s what the user provides.\n'"
1855,7728904,thouis,thouis,2012-10-19 20:54:45,2012-10-23 02:42:06,2012-10-19 20:54:46,closed,,1.4.1,4,11 - Bug;component: numpy.lib;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1855,b'Failure in genfromtxt tests (python 2.4 & 2.5 only) (Trac #1257)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/1257 on 2009-10-08 by @pv, assigned to @pierregm._\n\nBuildbots are showing this:\n\n\n    ======================================================================\n    FAIL: test_inconsistent_dtype (test_io.TestFromTxt)\n    ----------------------------------------------------------------------\n    Traceback (most recent call last):\n      File ""/var/lib/buildslave/numpy-real/b15/numpy-install-2.4/lib/python2.4/site-packages/numpy/lib/tests/test_io.py"", line 888, in test_inconsistent_dtype\n        assert_raises(TypeError, np.genfromtxt, mdata, **kwargs)\n      File ""../numpy-install-2.4/lib/python2.4/site-packages/numpy/testing/utils.py"", line 971, in assert_raises\n    AssertionError: TypeError not raised\n\n\n\nDoes not occur on python2.6, only on 2.4 and 2.5.\n'"
1854,7728903,thouis,thouis,2012-10-19 20:54:42,2012-10-19 20:54:44,2012-10-19 20:54:44,closed,,,6,11 - Bug;component: Other;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1854,b'repr of masked array crashes with Unicode elements (Trac #1256)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/1256 on 2009-10-08 by @mdboom, assigned to unknown._\n\n\n\n    \n    In [7]: np.ma.array(u\'Unicode\')\n    Out[7]: ERROR: An unexpected error occurred while tokenizing input\n    The following traceback may be corrupted or invalid\n    The error message is: (\'EOF in multi-line statement\', (382, 0))\n    \n    ---------------------------------------------------------------------------\n    KeyError                                  Traceback (most recent call last)\n    \n    /wonkabar/data1/builds/<ipython console> in <module>()\n    \n    /home/mdroe/usr/lib/python2.5/site-packages/IPython/Prompts.pyc in __call__(self, arg)\n        550\n        551             # and now call a possibly user-defined print mechanism\n    --> 552             manipulated_val = self.display(arg)\n        553\n        554             # user display hooks can change the variable to be stored in\n    /home/mdroe/usr/lib/python2.5/site-packages/IPython/Prompts.pyc in _display(self, arg)\n        576             return IPython.generics.result_display(arg)\n        577         except TryNext:\n    --> 578             return self.shell.hooks.result_display(arg)\n        579\n        580     # Assign the default display method:\n    \n    /home/mdroe/usr/lib/python2.5/site-packages/IPython/hooks.pyc in __call__(self, *args, **kw)\n        139             #print ""prio"",prio,""cmd"",cmd #dbg\n        140             try:\n    --> 141                 ret = cmd(*args, **kw)\n        142                 return ret\n        143             except ipapi.TryNext, exc:\n    \n    /home/mdroe/usr/lib/python2.5/site-packages/IPython/hooks.pyc in result_display(self, arg)\n        169\n        170     if self.rc.pprint:\n    --> 171         out = pformat(arg)\n        172         if \'\\n\' in out:\n        173             # So that multi-line strings line up with the left column of\n    /home/mdroe/usr/lib/python2.5/pprint.pyc in pformat(self, object)\n        109     def pformat(self, object):\n        110         sio = _StringIO()\n    --> 111         self._format(object, sio, 0, 0, {}, 0)\n        112         return sio.getvalue()\n        113\n    \n    /home/mdroe/usr/lib/python2.5/pprint.pyc in _format(self, object, stream, indent, allowance, context, level)\n        127             self._readable = False\n        128             return\n    --> 129         rep = self._repr(object, context, level - 1)\n        130         typ = _type(object)\n        131         sepLines = _len(rep) > (self._width - 1 - indent - allowance)\n    \n    /home/mdroe/usr/lib/python2.5/pprint.pyc in _repr(self, object, context, level)\n        193     def _repr(self, object, context, level):\n        194         repr, readable, recursive = self.format(object, context.copy(),\n    --> 195                                                 self._depth, level)\n        196         if not readable:\n        197             self._readable = False\n    \n    /home/mdroe/usr/lib/python2.5/pprint.pyc in format(self, object, context, maxlevels, level)\n        205         and whether the object represents a recursive construct.\n        206         """"""\n    --> 207         return _safe_repr(object, context, maxlevels, level)\n        208\n        209\n    \n    /home/mdroe/usr/lib/python2.5/pprint.pyc in _safe_repr(object, context, maxlevels, level)\n        290         return format % _commajoin(components), readable, recursive\n        291\n    --> 292     rep = repr(object)\n        293     return rep, (rep and not rep.startswith(\'<\')), False\n        294\n    \n    /home/mdroe/usr/lib/python2.5/site-packages/numpy/ma/core.pyc in __repr__(self)\n       3167         parameters =  dict(name=name, nlen="" ""*len(name),\n       3168                            data=str(self), mask=str(self._mask),\n    -> 3169                            fill=str(self.fill_value), dtype=str(self.dtype))\n       3170         if self.dtype.names:\n       3171             if n <= 1:\n    \n    /home/mdroe/usr/lib/python2.5/site-packages/numpy/ma/core.pyc in get_fill_value(self)\n       2956         """"""\n       2957         if self._fill_value is None:\n    -> 2958             self._fill_value = _check_fill_value(None, self.dtype)\n       2959         return self._fill_value\n       2960\n    \n    /home/mdroe/usr/lib/python2.5/site-packages/numpy/ma/core.pyc in _check_fill_value(fill_value, ndtype)\n        316                                   dtype=ndtype,)\n        317         else:\n    --> 318             fill_value = default_fill_value(ndtype)\n        319     elif fields:\n        320         fdtype = [(_[0], _[1]) for _ in ndtype.descr]\n    \n    /home/mdroe/usr/lib/python2.5/site-packages/numpy/ma/core.pyc in default_fill_value(obj)\n        165             defval = default_filler[obj.subdtype[0].kind]\n        166         else:\n    --> 167             defval = default_filler[obj.kind]\n        168     elif isinstance(obj, float):\n        169         defval = default_filler[\'f\']\n    \n    KeyError: \'U\'\n    \n\n'"
1853,7728901,thouis,thouis,2012-10-19 20:54:39,2012-10-19 20:54:41,2012-10-19 20:54:41,closed,,,3,11 - Bug;component: numpy.core;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1853,b'spurious exceptions with new datatypes (Trac #1255)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/1255 on 2009-10-08 by trac user tecki, assigned to unknown._\n\nI wrote a new datatype and registered it with\n`PyArray_RegisterDataType`, and got spurious\nexceptions somewhere from inside numpy.\n\nI tracked it down to the function\n`PyArray_DescrConverter`, which calls \n`PyArray_DescrFromType` (just after the `finish:` label).\nThis function sets a python exception with \n`PyErr_SetString` and returns `NULL`. But the calling \nfunction ignores this, and returns successfully.\nThe exception then is still dangling, and at a\nlater time will be risen in completely unrelated code.\n\nI guess a `PyErr_Clear` should be added at the beginning\nof the `if`-clause to solve the problem.\n'"
1852,7728900,thouis,thouis,2012-10-19 20:54:37,2012-10-19 20:54:38,2012-10-19 20:54:38,closed,,,3,11 - Bug;component: Other;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1852,b'newbyteorder fails on structured arrays with both names and titles (Trac #1254)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/1254 on 2009-10-07 by @mdboom, assigned to @teoliphant._\n\nCreating a newbyteorder of a dtype which contains both a name and title returns the ""<err>"" dtype.  Using this dtype to create a new array segfaults.\n\n\n\n    \n       >>> import numpy as np\n       >>> x = np.array([(1, 1)], dtype=[((\'a\', \'a\'), \'i\'), (\'b\', \'i\')])\n       >>> x.dtype.newbyteorder(\'>\')\n       dtype(<err>)\n       >>> y = np.array(x, dtype=x.dtype.newbyteorder(\'>\'))\n       Segmentation fault\n    \n\n\n\nAnd here\'s the backtrace from the segfault\n\n\n\n    \n    [Switching to Thread -1208456544 (LWP 6456)]\n    0x080d5957 in vgetargs1 (args=0x0, format=0xb7db54 """",  p_va=0xbfe05bd4, flags=Variable ""flags"" is not available.\n    )\n        at Python/getargs.c:286\n    286             if (!PyTuple_Check(args)) {\n    (gdb) bt\n    #0  0x080d5957 in vgetargs1 (args=0x0, format=0xb7db54 """", p_va=0xbfe05bd4,\n        flags=Variable ""flags"" is not available.\n    ) at Python/getargs.c:286\n    #1  0x080d5ec5 in _PyArg_ParseTuple_SizeT (args=0xb7db55, format=0xb7db54 """")\n        at Python/getargs.c:96\n    #2  0x00b73092 in VOID_setitem (op=0xb7a9090c, ip=0x8fc8980 """", ap=0x8fa80e8)\n        at numpy/core/src/multiarray/arraytypes.c.src:620\n    #3  0x00b748ce in VOID_to_VOID (ip=0x8fd4838 ""\\001"", op=0x8fc8980 """", n=1,\n        aip=0x8ebacd8, aop=0x8fa80e8)\n        at numpy/core/src/multiarray/arraytypes.c.src:1392\n    #4  0x00b53958 in PyArray_CastTo (out=0x8fa80e8, mp=0x8ebacd8)\n        at numpy/core/src/multiarray/convert_datatype.c:316\n    #5  0x00b4ae74 in _array_copy_into (dest=0x8fa80e8, src=0x8ebacd8, usecopy=1)\n        at numpy/core/src/multiarray/ctors.c:855\n    #6  0x00b4be98 in PyArray_FromArray (arr=0x8ebacd8, newtype=0xb7a982f0,\n        flags=112) at numpy/core/src/multiarray/ctors.c:2421\n    #7  0x00b4c3ef in PyArray_FromAny (op=0x8ebacd8, newtype=0xb7a982f0,\n        min_depth=0, max_depth=0, flags=112, context=0x0)\n        at numpy/core/src/multiarray/ctors.c:1598\n    #8  0x00b6a60a in PyArray_CheckFromAny (op=0x8ebacd8, descr=0xb7a982f0,\n        min_depth=0, max_depth=0, requires=112, context=0x0)\n        at numpy/core/src/multiarray/ctors.c:1769\n    #9  0x00b75fde in _array_fromobject (__NPY_UNUSED_TAGGEDignored=0x0,\n        args=0xb7f0a2cc, kws=0xb7a91dfc)\n        at numpy/core/src/multiarray/multiarraymodule.c:1478\n    #10 0x0805d984 in PyObject_Call (func=0xb7db50, arg=0xb7f0a2cc, kw=0xb7a91dfc)\n        at Objects/abstract.c:1861\n    #11 0x080bf804 in PyEval_EvalFrameEx (f=0x8e85dc4, throwflag=0)\n        at Python/ceval.c:3784\n    #12 0x080c43bb in PyEval_EvalCodeEx (co=0xb7eabec0, globals=0xb7f5eacc,\n        locals=0xb7f5eacc, args=0x0, argcount=0, kws=0x0, kwcount=0, defs=0x0,\n        defcount=0, closure=0x0) at Python/ceval.c:2836\n    #13 0x080c450a in PyEval_EvalCode (co=0xb7eabec0, globals=0xb7f5eacc,\n        locals=0xb7f5eacc) at Python/ceval.c:494\n    #14 0x080e3e52 in PyRun_InteractiveOneFlags (fp=0xd16720,\n        filename=0x811a058 ""<stdin>"", flags=0xbfe065dc) at Python/pythonrun.c:1273\n    #15 0x080e4005 in PyRun_InteractiveLoopFlags (fp=0xd16720,\n        filename=0x811a058 ""<stdin>"", flags=0xbfe065dc) at Python/pythonrun.c:723\n    #16 0x080e4525 in PyRun_AnyFileExFlags (fp=0xd16720,\n        filename=0x811a058 ""<stdin>"", closeit=0, flags=0xbfe065dc)\n        at Python/pythonrun.c:692\n    #17 0x08056d85 in Py_Main (argc=0, argv=0xbfe06714) at Modules/main.c:523\n    #18 0x08056323 in main (argc=1, argv=0xbfe06714) at ./Modules/python.c:23\n    \n\n'"
1849,7728894,thouis,thouis,2012-10-19 20:54:30,2012-10-19 20:54:30,2012-10-19 20:54:30,closed,,,2,11 - Bug;component: Other;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1849,b'64 Bit Numpy - DLL Load failure (Trac #1251)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/1251 on 2009-10-07 by trac user altiod, assigned to unknown._\n\nHi, I\'m running windows xp with python 64 2.6 bit and 64 bit numpy version 1.3.0 for python 2.6\n\nProgram I am using runs correctly in 32 bit python/numpy, but when I use the 64 bit versions I get the following error:\n\ne:\\Environ\\Python26_64bit\\lib\\site-packages\\numpy\\core\\__init__.py:5: Warning: Windows 64 bits suppo\nrt is experimental, and only available for\ntesting. You are advised not to use it for production.\n\nCRASHES ARE TO BE EXPECTED - PLEASE REPORT THEM TO NUMPY DEVELOPERS\n  import multiarray\nTraceback (most recent call last):\n  File ""TestGridWorldChiArm.py"", line 1, in <module>\n    import numpy\n  File ""e:\\Environ\\Python26_64bit\\lib\\site-packages\\numpy\\__init__.py"", line 130, in <module>\n    import add_newdocs\n  File ""e:\\Environ\\Python26_64bit\\lib\\site-packages\\numpy\\add_newdocs.py"", line 9, in <module>\n    from lib import add_newdoc\n  File ""e:\\Environ\\Python26_64bit\\lib\\site-packages\\numpy\\lib\\__init__.py"", line 13, in <module>\n    from polynomial import *\n  File ""e:\\Environ\\Python26_64bit\\lib\\site-packages\\numpy\\lib\\polynomial.py"", line 18, in <module>\n    from numpy.linalg import eigvals, lstsq\n  File ""e:\\Environ\\Python26_64bit\\lib\\site-packages\\numpy\\linalg\\__init__.py"", line 47, in <module>\n    from linalg import *\n  File ""e:\\Environ\\Python26_64bit\\lib\\site-packages\\numpy\\linalg\\linalg.py"", line 22, in <module>\n    from numpy.linalg import lapack_lite\nImportError: DLL load failed: The specified module could not be found.\n'"
1848,7728893,thouis,charris,2012-10-19 20:54:26,2014-02-17 01:46:13,2014-02-17 01:46:13,closed,,,8,11 - Bug;component: Documentation;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1848,b'Behavior of np.sign for complex number (Trac #1250)',"b""_Original ticket http://projects.scipy.org/numpy/ticket/1250 on 2009-10-06 by @huard, assigned to @pv._\n\nFor complex arguments, np.sign returns the following:\n\n\n    > [10]: np.sign(1j)\n     <[10]: (1+0j)\n    \n    > [11]: np.sign(-1j)\n     <[11]: (-1+0j)\n    \n    > [12]: np.sign(1-1j)\n     <[12]: (1+0j)\n\n\n\nSo the sign of the real part takes precedence on the sign of the complex part when there is a real part. I'm not sure if this qualifies as a bug, but it's not intuitive, nor documented. \n"""
1847,7728892,thouis,thouis,2012-10-19 20:54:24,2012-10-19 20:54:25,2012-10-19 20:54:25,closed,,1.4.1,2,11 - Bug;component: numpy.lib;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1847,b'polyder does not preserve poly1d object (Trac #1249)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/1249 on 2009-10-06 by @pbrod, assigned to @charris._\n\nWhen passing a poly1d object to polyder it returns a ndarray- and poly1d- object for m=0 and m=1, respectively, as exemplified here:\n\n\n    >>> pd = poly1d([1,1,1])\n    >>> polyder(pd, m=0)\n    array([1, 1, 1])\n    \n    >>> pd.deriv(m=0)\n    poly1d([1, 1, 1])\n    \n    >>> polyder(pd, m=1)\n    poly1d([2, 1])\n    \n\n\n\nIn both cases it should return a poly1d object.\n\nA fix that solves this problem is given here:\n\n\n    def polyder(p, m=1)\n        \'\'\'\n        \'\'\'\n        m = int(m)\n        if m < 0:\n            raise ValueError, ""Order of derivative must be positive (see polyint)""\n        truepoly = isinstance(p, poly1d)\n        p = asarray(p)\n        if m == 0:\n            if truepoly:\n               return poly1d(p)\n            return p\n        else:\n            \n            n = len(p) - 1\n            ix = arange(n, 0, -1)\n            if p.ndim > 1:\n                ix = ix[..., newaxis]\n            y = ix * p[:-1]\n            val = polyder(y, m - 1)\n            if truepoly:\n                val = poly1d(val)\n            return val\n    \n\n\n\n\n'"
1846,7728890,thouis,thouis,2012-10-19 20:54:21,2012-10-19 20:54:22,2012-10-19 20:54:22,closed,,,3,11 - Bug;component: numpy.distutils;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1846,b'Sun Studio Fortran libraries (Trac #1248)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/1248 on 2009-10-04 by trac user beffa, assigned to @dmcooke._\n\nBuilding SciPy on a x64 machine with OpenSolaris 2009.06 with Sun Studio 12u1 I get the following error:\n\npkgbuild: /opt/SunStudioExpress/bin/f90 -Bdynamic -G -lCrun -lCstd build/temp.solaris-2.11-i86pc-2.6/build/src.solaris-2.11-i86pc-2.6/scipy/fftpack/_fftpackmodule.o build/temp.solaris-2.11-i86pc-2.6/scipy/fftpack/src/zfft.o build/temp.solaris-2.11-i86pc-2.6/scipy/fftpack/src/drfft.o build/temp.solaris-2.11-i86pc-2.6/scipy/fftpack/src/zrfft.o build/temp.solaris-2.11-i86pc-2.6/scipy/fftpack/src/zfftnd.o build/temp.solaris-2.11-i86pc-2.6/build/src.solaris-2.11-i86pc-2.6/fortranobject.o -Lbuild/temp.solaris-2.11-i86pc-2.6 -ldfftpack -lpython2.6 -lfsu -lsunmath -lmvec -lf77compat -o build/lib.solaris-2.11-i86pc-2.6/scipy/fftpack/_fftpack.so[[BR]]\n\npkgbuild: ld: fatal: library -lf77compat: not found[[BR]]\n\npkgbuild: ld: fatal: file processing errors. No output written to build/lib.solaris-2.11-i86pc-2.6/scipy/fftpack/_fftpack.so[[BR]]\n\npkgbuild: ld: fatal: library -lf77compat: not found[[BR]]\n\npkgbuild: ld: fatal: file processing errors. No output written to build/lib.solaris-2.11-i86pc-2.6/scipy/fftpack/_fftpack.so[[BR]]\n\npkgbuild: error: Command ""/opt/SunStudioExpress/bin/f90 -Bdynamic -G -lCrun -lCstd build/temp.solaris-2.11-i86pc-2.6/build/src.solaris-2.11-i86pc-2.6/scipy/fftpack/_fftpackmodule.o build/temp.solaris-2.11-i86pc-2.6/scipy/fftpack/src/zfft.o build/temp.solaris-2.11-i86pc-2.6/scipy/fftpack/src/drfft.o build/temp.solaris-2.11-i86pc-2.6/scipy/fftpack/src/zrfft.o build/temp.solaris-2.11-i86pc-2.6/scipy/fftpack/src/zfftnd.o build/temp.solaris-2.11-i86pc-2.6/build/src.solaris-2.11-i86pc-2.6/fortranobject.o -Lbuild/temp.solaris-2.11-i86pc-2.6 -ldfftpack -lpython2.6 -lfsu -lsunmath -lmvec -lf77compat -o build/lib.solaris-2.11-i86pc-2.6/scipy/fftpack/_fftpack.so"" failed with exit status 1[[BR]]\n\npkgbuild: Bad exit status from /var/tmp/pkgbuild-bld/pkgbuild-tmp-2.18117 (%build)\n--- command output ends --- finished at Mon Sep 28 21:01:48 BST 2009\n\nThe error can be corrected by modifying the sun.py file included in NumPy with the attached patch. Essentially removing the f77compat library. As far as I know this is a SPARC only library. The sun.py file should provide an architecture dependent library list.\n'"
1845,7728886,thouis,thouis,2012-10-19 20:54:20,2012-10-19 20:54:20,2012-10-19 20:54:20,closed,,1.4.1,2,11 - Bug;component: Other;priority: high,https://api.github.com/repos/numpy/numpy/issues/1845,b'vectorize fails with f2py and keyword functions (Trac #1247)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/1247 on 2009-10-02 by @sturlamolden, assigned to unknown._\n\nvectorize infer the number of arguments by calling the function with zero arguments and parsing the error message. The regex used by _get_nargs in numpy/lib/function_base.py is\n\nterr = re.compile(r\'.*? takes exactly (?P<exargs>\\d+) argument(s|) \\((?P<gargs>\\d+) given\\)\')\n\nIt does not fit the error message when using keyword arguments:\n\n>>> def test(a, b=1): pass\n\n>>> test()\n\nTraceback (most recent call last):\n  File ""<pyshell#6>"", line 1, in <module>\n    test()\nTypeError: test() takes at least 1 argument (0 given)\n\n\nThe problem also affects f2py wrapped Fortran, as the f2py-generated wrapper calls PyArg_ParseTupleAndKeywords. \n\n\nThe regex should be:\n\nre.compile(r\'.*? takes (exactly|at least) (?P<exargs>\\d+) argument(s|) \\((?P<gargs>\\d+) given\\)\') \n\n\n'"
1844,7728883,thouis,thouis,2012-10-19 20:54:17,2012-10-19 20:54:17,2012-10-19 20:54:17,closed,,,3,11 - Bug;component: Other;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1844,b'two different numpy.int32 types? (Trac #1246)',"b""_Original ticket http://projects.scipy.org/numpy/ticket/1246 on 2009-10-02 by trac user zmic, assigned to unknown._\n\n>>> import numpy as np\n>>> a = np.int8(1)\n>>> b = np.int32(2)\n>>> type(a+b)==type(b+a)\nFalse\n>>> print type(a+b)\n<type 'numpy.int32'>\n>>> print type(b+a)\n<type 'numpy.int32'>"""
1843,7728880,thouis,seberg,2012-10-19 20:54:15,2013-12-04 22:18:43,2013-12-04 22:18:43,closed,,,4,11 - Bug;component: numpy.numarray;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1843,b'saving large matrices through filters fails (Trac #1245)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/1245 on 2009-10-02 by trac user jap, assigned to unknown._\n\nWhile trying to save a large matrix through gzip, I got the following error:\n\n\n\n    >>> import numpy\n    >>> Large_Matrix = numpy.zeros((30000, 30000), dtype=numpy.float32)\n    >>> import gzip\n    >>> numpy.save(gzip.open(""/tmp/matrix.npy.gz"", ""w""), Large_Matrix)\n    Traceback (most recent call last):\n      File ""<stdin>"", line 1, in <module>\n      File ""/usr/lib/python2.6/dist-packages/numpy/lib/io.py"", line 178, in save\n        format.write_array(fid, arr)\n      File ""/usr/lib/python2.6/dist-packages/numpy/lib/format.py"", line 326, in write_array\n        fp.write(array.tostring(\'C\'))\n    SystemError: Negative size passed to PyString_FromStringAndSize\n\n\n\nEven though this is a python-bug, I\'d like to see a workaround in numpy by writing chunks smaller than 2GB. This might also be good for performance of filtered writes.. As I\'m going to need this, I\'ll code this up (shouldn\'t change the on-disk format), is there any demand for this to be integrated into numpy?'"
1842,7728878,thouis,thouis,2012-10-19 20:54:13,2012-10-23 02:42:04,2012-10-19 20:54:13,closed,,,4,11 - Bug;component: numpy.linalg;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1842,b'numpy.linalg.qr crashes with empty arrays (Trac #1244)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/1244 on 2009-09-29 by trac user chtito, assigned to unknown._\n\nSimple test:\n\n\n\n    #!python\n    import numpy as np\n    a = np.zeros([0,2])\n    from numpy.linalg import qr\n    qr(a) # python crashes\n\n'"
1841,7728877,thouis,thouis,2012-10-19 20:54:10,2012-10-19 20:54:11,2012-10-19 20:54:11,closed,,,2,11 - Bug;component: Other;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1841,b'numpy.lib.utils.who() breaks with 0-d arrays (Trac #1243)',"b""_Original ticket http://projects.scipy.org/numpy/ticket/1243 on 2009-09-27 by trac user gnutrino, assigned to unknown._\n\nThe function who() in numpy/lib/utils.py gives a stak trace if the dictionary it works over contains a ndarray with shape () (i.e. a zero dimensional aray). For example:\n\n\n\n    import numpy as np\n    d = {'foo' : np.array(1)}\n    np.who(d)\n\n\ngives:\n\n\n\n    ValueError                                Traceback (most recent call last)\n    \n    /usr/lib/python2.6/site-packages/numpy/lib/utils.py in who(vardict)\n        274             maxbyte = len(val[2])\n        275         if val[4]:\n    --> 276             totalbytes += int(val[2])\n        277 \n        278     if len(sta) > 0:\n    \n    ValueError: invalid literal for int() with base 10: '4.0'\n    \n\n\n\nthis is caused by the line:\n\n\n\n    bytestr = str(var.itemsize*product(var.shape))\n\n\nand the fact that product returns 1.0 (i.e a float rather than an int) when called with an empty tuple.\n\nA more sane way to do this would be to use the .nbytes attribute of the ndarray rather than computing this value by hand.\n\nAttached is a patch which trivially implements this fix."""
1840,7728874,thouis,thouis,2012-10-19 20:54:08,2012-10-19 20:54:09,2012-10-19 20:54:09,closed,,1.5.0,3,11 - Bug;component: Other;priority: high,https://api.github.com/repos/numpy/numpy/issues/1840,b'numpy.matlib has no tests (Trac #1242)',"b""_Original ticket http://projects.scipy.org/numpy/ticket/1242 on 2009-09-26 by @pv, assigned to unknown._\n\nNumpy.matlib has no tests. We should at least check that it's possible to import the module."""
1839,7728871,thouis,thouis,2012-10-19 20:54:06,2012-10-19 20:54:07,2012-10-19 20:54:07,closed,,,3,11 - Bug;component: Other;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1839,b'Array constructed with mixture of str and unicode objects fails length detection (Trac #1241)',"b""_Original ticket http://projects.scipy.org/numpy/ticket/1241 on 2009-09-25 by @mdboom, assigned to unknown._\n\nThere is a special case bit of code in _array_small_type to handle the case when a str obj is followed by a unicode obj and compare their lengths correctly.  However, the objects can also appear in the reverse order and this case needs to be handled as well (see attached patch).\n\nIn [2]: np.array(['1234', u'123'])\n\nOut[2]:\narray([u'123', u'123'],\n      dtype='<U3')\n\nIn [3]: np.array([u'123', '1234'])\n\nOut[3]:\narray([u'123', u'1234'],\n      dtype='<U4')\n"""
1838,7728868,thouis,thouis,2012-10-19 20:54:04,2012-10-19 20:54:05,2012-10-19 20:54:05,closed,,,2,11 - Bug;component: Other;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1838,b'Casting from Unicode to String array ignores exception (Trac #1240)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/1240 on 2009-09-25 by @mdboom, assigned to unknown._\n\nElement [0, 1] in the \'a\' array below should raise a UnicodeEncodeError exception when casting to a string.  However, the exception is ""lost"" and the resulting array ends up with garbage data.\n\nThe attached patch fixes this.  There are many other places I found where @to@_setitem error codes were being ignored -- it\'s possible these should be fixed, but only this one is exercised by this example.\n\nIn [4]: a = np.array([[u\'abc\', u\'\\u03a3\'], [u\'asdf\', u\'erw\']], dtype=\'U\')\n\nIn [5]: np.array(a, dtype=\'S4\')\n\nOut[5]:\narray([[\'abc\', \'hv\\xb1\\x08\'],\n       [\'asdf\', \'erw\']],\n      dtype=\'|S4\')\n\n'"
1837,7728865,thouis,charris,2012-10-19 20:54:02,2014-02-20 00:29:45,2014-02-20 00:29:45,closed,,,5,11 - Bug;component: numpy.core;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1837,"b""'S0' and 'U0' typecodes fail with np.dtype() (Trac #1239)""","b""_Original ticket http://projects.scipy.org/numpy/ticket/1239 on 2009-09-24 by @dwf, assigned to @charris._\n\nI noticed this inconsistency:\n\n\n\n    In [30]: dtype(str)\n    Out[30]: dtype('|S0')\n    \n    In [31]: dtype('|S0')\n    ---------------------------------------------------------------------------\n    TypeError                                 Traceback (most recent call last)\n    \n    /Users/dwf/<ipython console> in <module>()\n    \n    TypeError: data type not understood\n    \n    In [32]: dtype(unicode)\n    Out[32]: dtype('>U0')\n    \n    In [33]: dtype('>U0')\n    ---------------------------------------------------------------------------\n    TypeError                                 Traceback (most recent call last)\n    \n    /Users/dwf/<ipython console> in <module>()\n    \n    TypeError: data type not understood\n    \n\n\nThis would present problems if you, say, np.save()'d an array with an S0 field and tried to np.load() it back; dtype() would choke in the deserialization process.\n\nThe attached patch resolves it in the simplest way I could think of: for U and S typecodes, 0-length is okay (note that '>U0' and '<U0' are still different types, technically, despite byte order being meaningless here."""
1833,7728852,thouis,thouis,2012-10-19 20:53:47,2012-10-19 20:53:49,2012-10-19 20:53:49,closed,,,6,11 - Bug;component: numpy.core;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1833,b'Coercing object arrays to string arrays has surprising behaviour (Trac #1235)',"b""_Original ticket http://projects.scipy.org/numpy/ticket/1235 on 2009-09-24 by @mdboom, assigned to unknown._\n\nNOTE: I'm looking into this (not sure how to assign it to myself), but creating a bug to record progress.\n\nIn [14]: x = np.array(['abcdefgh', 'ijklmnop'], 'O')\n\n# Without specifying the length, it seems to default to sizeof(int)... ???\nIn [15]: np.array(x, 'S')\nOut[15]:\narray(['abcd', 'ijkl'],\n      dtype='|S4')\n\nIn [21]: np.array(x, np.string_)\nOut[21]:\narray(['abcd', 'ijkl'],\n      dtype='|S4')\n\n# Specifying a length gives strange results\nIn [16]: np.array(x, 'S8')\nOut[16]:\narray(['abcdijkl', 'mnop\\xe0\\x01\\x85\\x08'],\n      dtype='|S8')\n\n# This is what I expected to happen above, but the cast to a list seems like it should be unnecessary\nIn [17]: np.array(list(x))\nOut[17]:\narray(['abcdefgh', 'ijklmnop'],\n      dtype='|S8')\n\n# Assignment also seems broken\nIn [18]: y = np.empty(x.shape, dtype='S8')\n\nIn [19]: y[:] = x[:]\n\nIn [20]: y\nOut[20]:\narray(['abcdijkl', 'mnop\\xc05\\xf9\\xb7'],\n      dtype='|S8') """
1831,7728848,thouis,thouis,2012-10-19 20:53:39,2012-10-23 02:41:57,2012-10-19 20:53:42,closed,,1.6.0,5,11 - Bug;component: numpy.core;priority: highest,https://api.github.com/repos/numpy/numpy/issues/1831,b'Deserialized arrays with base mutate strings (Trac #1233)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/1233 on 2009-09-23 by trac user hniksic, assigned to @mwiebe._\n\nNumpy arrays with the ""base"" property are deserialized as arrays pointing to a storage contained within a Python string.  This is a problem since such arrays are mutable and can mutate existing strings.  Here is how to create one:\n\n\n\n    >>> import numpy, cPickle as p\n    >>> a = numpy.array([1, 2, 3])   # create an array\n    >>> b = a[::-1]                  # create a view\n    >>> b\n    array([3, 2, 1])\n    >>> b.base                       # view\'s base is the original array\n    array([1, 2, 3])\n    >>> c = p.loads(p.dumps(b, -1))  # roundtrip the view through pickle\n    >>> c\n    array([3, 2, 1])\n    >>> c.base                       # base is now a simple string:\n    \'\\x03\\x00\\x00\\x00\\x02\\x00\\x00\\x00\\x01\\x00\\x00\\x00\'\n    >>> s = c.base\n    >>> s\n    \'\\x03\\x00\\x00\\x00\\x02\\x00\\x00\\x00\\x01\\x00\\x00\\x00\'\n    >>> type(s)\n    <type \'str\'>\n    >>> c[0] = 4                     # when the array is mutated...\n    >>> s                            # ...the string changes value!\n    \'\\x04\\x00\\x00\\x00\\x02\\x00\\x00\\x00\\x01\\x00\\x00\\x00\'\n\n\n\nThis is somewhat disconcerting, as Python strings are supposed to be immutable.  In this case the string was created by numpy and is probably not shared by anyone, so it doesn\'t present a problem in practice.  But in corner cases it can lead to serious bugs.  Python has a cache of one-character strings, which cannot be turned off.  This means that one-byte array views can change existing Python strings used elsewhere in the code.  For example:\n\n\n\n    >>> a = numpy.array([65], \'int8\')\n    >>> b = a[::-1]\n    >>> c = p.loads(p.dumps(b, -1))\n    >>> c\n    array([65], dtype=int8)\n    >>> c.base\n    \'A\'\n    >>> c[0] = 66\n    >>> c.base\n    \'B\'\n    >>> \'A\'\n    \'B\'\n\n\n\nNote how changing a numpy array permanently changed the contents of all \'A\' strings in this python instance, rendering python unusable.\n\nThe fix should be straightforward: use a string subclass (which will\nskip the one-letter cache), or an entirely separate type for storage of ""base"" memory referenced by deserialized arrays.'"
1829,7728845,thouis,thouis,2012-10-19 20:53:34,2012-10-19 20:53:35,2012-10-19 20:53:35,closed,,,1,11 - Bug;component: Other;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1829,b'chararray methods ignore all arguments following the first argument that evaluates to False (Trac #1231)',"b""_Original ticket http://projects.scipy.org/numpy/ticket/1231 on 2009-09-22 by @mdboom, assigned to unknown._\n\nWhen chararray builds an argument list to delegate to an underlying string method, it does the following:\n\n            for chk in val[1:]:\n                if not chk or (chk.dtype is object_ and chk.item() is None):\n                    break\n                newval.append(chk)\n\nUnfortunately, this results in bugs like:\n\nIn [19]: a = np.char.array(['12345d'])\n\nIn [20]: a.find('d', 0, 2)\nOut[20]: array([5])\n\n(This should be -1, since find should only be looking in the first two characters).\n\nI suspect the intention of this code was:\n\n                if chk is None or (chk.dtype is object_ and chk.item() is None):\n\nbut it seems like a spurious optimization anyway, and could perhaps just be removed."""
1827,7728841,thouis,thouis,2012-10-19 20:53:26,2012-10-19 20:53:30,2012-10-19 20:53:30,closed,,1.4.1,17,11 - Bug;component: numpy.core;priority: high,https://api.github.com/repos/numpy/numpy/issues/1827,b'[Numpy-discussion] Numpy large array bug (Trac #1229)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/1229 on 2009-09-21 by trac user lucaciti, assigned to unknown._\n\nKashyap Ashwin raised this question in ""[Numpy-discussion] Numpy large array bug"".\nThe unexpected behaviour is the following:\n\n\n    >>> import numpy as np\n    >>> a=np.zeros((2*1024*1024*1024 + 10000), dtype=""uint8"")\n    >>> a[:]=1\n    >>> print(a)\n    array([0, 0, 0, ..., 0, 0, 0], dtype=uint8)\n\n\nalso, I noticed that\n\n\n    >>> a.put([2*1024*1024*1024 + 100,], 8)\n    IndexError: index out of range for array\n\n\nand (suggested by Kashyap)\n\n\n    >>> np.putmask(a, np.ones_like(a), 5)\n    Segmentation fault\n\n\n'"
1826,7728838,thouis,thouis,2012-10-19 20:53:21,2012-10-19 20:53:24,2012-10-19 20:53:24,closed,,1.6.0,9,11 - Bug;component: numpy.f2py;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1826,b'error in parsing fortran comments in crackfortran.py (Trac #1228)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/1228 on 2009-09-21 by trac user ohm314, assigned to @pearu._\n\nHi there,\n\nthe regular expression `commentline` (source:/trunk/numpy/f2py/crackfortran.py@7268 line 285) matches also ! inside literal strings.\n\nexample:\n\n\n             CALL my_error_function(some_var,  &\n         &         \'Something went wrong!\',310,info)\n\n\n\nThis matched the end of the second line as a comment and caused an error.\n\n\nI think the regex should be modified to:\n\n\n    #!python\n    commentline=re.compile(r\'(?P<line>([^""]*""[^""]*""[^""!]*|[^\\\']*\\\'[^\\\']*\\\'[^\\\'!]*|[^!]*))!{1}(?P<rest>.([^""]*""[^""]*""[^""]*|[^\\\']*\\\'[^\\\']*\\\'[^\\\']*))\')\n\n\n\nbest,\n\nomar'"
1825,7728835,thouis,thouis,2012-10-19 20:53:19,2012-10-19 20:53:20,2012-10-19 20:53:20,closed,,,1,11 - Bug;component: numpy.core;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1825,b'IsAligned() should respect the PyArrayDescr_Type.alignment field. (Trac #1227)',"b""_Original ticket http://projects.scipy.org/numpy/ticket/1227 on 2009-09-19 by trac user hansres, assigned to unknown._\n\nCurrently `IsAligned()` always returns `True` for the \xa1\xb0void\xa1\xb1 dtype, i.e., it assumes that the alignment field is 1.\n\nThis is fine for dtypes, e.g., created with `PyArray_DescrConverter()` (they always have alignment 1); however  those created via `PyArray_DescrAlignConverter()` typically don\xa1\xaft.\nFixing this is particularly useful when unpickling a python array, since it will ensures that the return value is aligned (it creates a copy if the data buffer is not aligned).\n\nI have consulted with Travis regarding this, and he agreed that that we should probably get rid of the (void) special case.   \n\nThe proposed patch always respects the `alignment` field:\n\n\n    * Simplify / improve _IsAligned():\n      - Allow PyArray_VOID to have arbitrary alignment instead\n        of assuming 1.\n      - Don't special case PyArray_STRING: its alignment is 1,\n        which is efficiently handled anyway.\n\n"""
1823,7728833,thouis,thouis,2012-10-19 20:53:15,2012-10-19 20:53:16,2012-10-19 20:53:16,closed,,1.6.0,4,11 - Bug;component: numpy.core;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1823,b'datetime64 and timedelta64 tests (Trac #1225)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/1225 on 2009-09-16 by trac user as8ca@..., assigned to unknown._\n\nInitial version of tests for datetime64 and timedelta64 types.  We need many more tests.'"
1822,7728832,thouis,thouis,2012-10-19 20:53:13,2012-10-19 20:53:13,2012-10-19 20:53:13,closed,,,2,11 - Bug;component: numpy.distutils;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1822,b'discrepencies in found tests between numscons and distutils builds (Trac #1224)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/1224 on 2009-09-16 by @cournape, assigned to @dmcooke._\n\n'"
1820,7728825,thouis,thouis,2012-10-19 20:53:07,2012-10-19 20:53:08,2012-10-19 20:53:08,closed,,1.4.1,3,11 - Bug;component: numpy.core;priority: high,https://api.github.com/repos/numpy/numpy/issues/1820,b'memory leak in frompyfunc (Trac #1222)',"b""_Original ticket http://projects.scipy.org/numpy/ticket/1222 on 2009-09-14 by trac user zegres, assigned to unknown._\n\nThe following code (which is an accumulator that resets whenever there is a zero) has a memory leak.\n\nfrom numpy import frompyfunc,zeros\n\ndef customAcc(x,y):\n\tif y:\n\t\treturn x+y\n\treturn 0\n\ncustomAccUfunc=frompyfunc(customAcc,2,1)\n\ndef cumSumReset(a):\n    return customAccUfunc.accumulate(a).astype('float32')\n\ndef killMemory():\n    print 'running'\n    a1=zeros(10000)\n    for i in range(20):\n        ACCF2=cumSumReset(a1)\n        \nfor x in range(200):\n    killMemory()"""
1819,7728823,thouis,thouis,2012-10-19 20:53:04,2012-10-19 20:53:06,2012-10-19 20:53:06,closed,,1.4.1,6,11 - Bug;component: numpy.core;priority: highest,https://api.github.com/repos/numpy/numpy/issues/1819,"b""Can't import universal numpy on MacOS Snow Leopard when running 32 bit python (Trac #1221)""","b'_Original ticket http://projects.scipy.org/numpy/ticket/1221 on 2009-09-13 by trac user rwest, assigned to unknown._\n\nAfter building 32/64-bit numpy from SVN on MacOS 10.6 Snow Leopard according to the instructions at \nhttp://blog.hyperjeff.net/?p=160\nI would expect to have a universal (i386 and x86_64) version of numpy.\n\nIf, however, I start a 32-bit python shell and import numpy then I get a ""ValueError: array is too big."" on line line 600 of numpy/core/numerictypes.py:\n\n----\n\nThese are my steps:\n\nInstalling numpy:\n\n\n\n    sudo mv /System/Library/Frameworks/Python.framework/Versions/2.6/Extras/lib/python/numpy \\\n    /System/Library/Frameworks/Python.framework/Versions/2.6/Extras/lib/python/numpy_APPLE_DEFAULT\n    export MACOSX_DEPLOYMENT_TARGET=10.6\n    export CFLAGS=""-arch i386 -arch x86_64""\n    export FFLAGS=""-arch i386 -arch x86_64""\n    export LDFLAGS=""-Wall -undefined dynamic_lookup -bundle -arch i386 -arch x86_64""\n    cd ~/tmp\n    svn co http://svn.scipy.org/svn/numpy/trunk numpy\n    cd numpy\n    python setup.py build --fcompiler=gnu95\n    sudo python setup.py install\n\n\n\nLoading 32-bit python:\n\n\n    export VERSIONER_PYTHON_PREFER_32_BIT=yes \n    python \n\n\n\nTrying to import numpy:\n\n\n    Python 2.6.1 (r261:67515, Jul  7 2009, 23:51:51) \n    [GCC 4.2.1 (Apple Inc. build 5646)] on darwin\n    Type ""help"", ""copyright"", ""credits"" or ""license"" for more information.\n    >>> import numpy\n    Traceback (most recent call last):\n      File ""<stdin>"", line 1, in <module>\n      File ""/Library/Python/2.6/site-packages/numpy/__init__.py"", line 130, in <module>\n        import add_newdocs\n      File ""/Library/Python/2.6/site-packages/numpy/add_newdocs.py"", line 9, in <module>\n        from lib import add_newdoc\n      File ""/Library/Python/2.6/site-packages/numpy/lib/__init__.py"", line 4, in <module>\n        from type_check import *\n      File ""/Library/Python/2.6/site-packages/numpy/lib/type_check.py"", line 8, in <module>\n        import numpy.core.numeric as _nx\n      File ""/Library/Python/2.6/site-packages/numpy/core/__init__.py"", line 8, in <module>\n        import numerictypes as nt\n      File ""/Library/Python/2.6/site-packages/numpy/core/numerictypes.py"", line 600, in <module>\n        _typestr[key] = empty((1,),key).dtype.str[1:]\n    ValueError: array is too big.\n\n\n\n\nThis is mentioned at http://mail.scipy.org/pipermail/scipy-user/2009-May/021090.html\nbut I have not found a solution.'"
1818,7728818,thouis,thouis,2012-10-19 20:53:02,2012-10-19 20:53:03,2012-10-19 20:53:03,closed,,,1,11 - Bug;component: Official binaries;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1818,b'_dotblas.pyd missing in NOSSE  numpy-1.3.0-win32-superpack-python2.6.exe (Trac #1220)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/1220 on 2009-09-11 by trac user sole, assigned to @cournape._\n\nHello,\n\n_dotblas.pyd is missing in the windows nosse architecture for python 2.6 It is present for python 2.5.\n\nOf course, that leads to performance issues under python 2.6.\n\nSee\n\n[Numpy-discussion] Dot product performance on python 2.6 (windows)\n\ndated Sep. 11, 2009.\n\nBest regards,\n\nArmando'"
1817,7728815,thouis,thouis,2012-10-19 20:53:00,2012-10-19 20:53:01,2012-10-19 20:53:01,closed,,,2,11 - Bug;component: Other;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1817,b'Inconsistency in axis indexing between eg. numpy.sum() and numpy.ma.sum() (Trac #1219)',"b""_Original ticket http://projects.scipy.org/numpy/ticket/1219 on 2009-09-08 by trac user ckov, assigned to unknown._\n\nHi, \nI've noticed a weird inconsistency between the masked_array versions of some functions and the standard versions.  For example, if you compare np.sum() and np.ma.sum(): in the standard version, if you choose to sum over an axis, the axes are 1-based, but in the masked array versions, they are 0-based.  The 0-based seems the most correct to me, but in any case it seems like they should at least be consistent.  Any way to resolve this?\nThanks,\nCharlie\n"""
1815,7728805,thouis,thouis,2012-10-19 20:52:53,2012-10-19 20:52:53,2012-10-19 20:52:53,closed,,1.4.1,1,11 - Bug;component: numpy.core;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1815,b'Segfault in lexsort. (Trac #1217)',"b""_Original ticket http://projects.scipy.org/numpy/ticket/1217 on 2009-09-03 by @charris, assigned to unknown._\n\nIt seems to happen when sorting a reversed order array followed by an array with larger bitwise data type. Reported by Jeremy Mayes. \n\n\n\n    In [1]: a = np.array(['-']*100)\n    \n    In [2]: b = np.array([1.0]*100)\n    \n    In [3]: i = lexsort((a,b))\n    \n    In [4]: i = lexsort((a[::-1]))\n    \n    In [5]: i = lexsort((b[::-1]))\n    \n    In [6]: i = lexsort((a,b[::-1]))\n    \n    In [7]: i = lexsort((a[::-1],b))\n     \n    *Crash*\n    \n    These also work:\n    \n    In [3]: i = lexsort((b[::-1],a))\n    \n    In [4]: i = lexsort((b[::-1],b[::-1]))\n    \n    In [5]: i = lexsort((a[::-1],a[::-1]))\n    \n    In [6]: i = lexsort((a,b[::-1]))\n\n\n"""
1814,7728804,thouis,thouis,2012-10-19 20:52:51,2012-10-19 20:52:52,2012-10-19 20:52:52,closed,,1.4.1,1,11 - Bug;component: Other;priority: highest,https://api.github.com/repos/numpy/numpy/issues/1814,b'PyArray_INCREF numpy/core/src/multiarray/refcount.c (Trac #1216)',"b""_Original ticket http://projects.scipy.org/numpy/ticket/1216 on 2009-09-02 by @nilswagner01, assigned to unknown._\n\n\n\n    >>> numpy.__version__\n    '1.4.0.dev7353'\n    >>> scipy.__version__\n    '0.8.0.dev5838'\n\n\n\n\n\n    Getting factors of real matrix ... ok\n    Prefactorize (with UMFPACK) matrix for solving with multiple rhs ...\n    Program received signal SIGSEGV, Segmentation fault.\n    [Switching to Thread 47346072863120 (LWP 4228)]\n    PyArray_INCREF (mp=0xc) at numpy/core/src/multiarray/refcount.c:103\n    103         if (!PyDataType_REFCHK(mp->descr)) {\n    (gdb) bt\n    #0  PyArray_INCREF (mp=0xc) at numpy/core/src/multiarray/refcount.c:103\n    #1  0x00002b0fab9a34df in helper_getCArrayObject (input=0x1b2c1f0, type=12,\n        minDim=1, maxDim=1)\n        at build/src.linux-x86_64-2.5/scikits/umfpack/_umfpack_wrap.c:2535\n    #2  0x00002b0fab9a4eab in _wrap_umfpack_di_defaults (\n        self=<value optimized out>, args=<value optimized out>)\n        at build/src.linux-x86_64-2.5/scikits/umfpack/_umfpack_wrap.c:3054\n\n\n"""
1809,7728787,thouis,thouis,2012-10-19 20:52:28,2012-10-19 20:52:36,2012-10-19 20:52:36,closed,,1.6.0,32,11 - Bug;component: numpy.linalg;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1809,b'numpy.linalg.eig crashes on Mandriva/OpenSuse for some matrices (Trac #1211)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/1211 on 2009-08-30 by @pv, assigned to unknown._\n\nSee this discussion: http://article.gmane.org/gmane.comp.python.scientific.user/21936\n\n-----\n\nThe attached script crashes with SIGSEGV on on Mandriva 2009.1, 64-bit and OpenSUSE.\n'"
1808,7728786,thouis,thouis,2012-10-19 20:52:26,2012-10-19 20:52:26,2012-10-19 20:52:26,closed,,,1,11 - Bug;component: Other;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1808,b'endianness detection incomplete (Trac #1210)',"b""_Original ticket http://projects.scipy.org/numpy/ticket/1210 on 2009-08-30 by trac user kumanna, assigned to unknown._\n\nOn systems where endian.h is present, the npy_endian.h should use the fact that endian.h is present. Unfortunately, I can't find any way to enforce this. One suggestion provided in http://bugs.debian.org/544291 is to patch npy_endian.h as follows:\n\n--- ./numpy/core/include/numpy/npy_endian.h~    2009-04-05 10:09:20.000000000 +0200\n+++ ./numpy/core/include/numpy/npy_endian.h     2009-08-30 17:42:02.000000000 +0200\n@@ -5,8 +5,9 @@\n  * NPY_BYTE_ORDER is set to the same value as BYTE_ORDER set by glibc in\n  * endian.h\n  */\n+#include <stddef.h>\n\n-#ifdef NPY_HAVE_ENDIAN_H\n+#if defined(NPY_HAVE_ENDIAN_H) || defined(__GLIBC__)\n     /* Use endian.h if available */\n     #include <endian.h>\n     #define NPY_BYTE_ORDER __BYTE_ORDER\n\nHTH.\n\nThanks."""
1807,7728784,thouis,charris,2012-10-19 20:52:24,2014-02-18 19:29:14,2014-02-18 19:29:14,closed,,,3,11 - Bug;component: numpy.numarray;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1807,b'Docstring for numpy.numarray.random_array.multinomial is out of date. (Trac #1209)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/1209 on 2009-08-27 by trac user throwaway, assigned to unknown._\n\nIt appears that the semantics of the multinomial function have changed,\nand the docstring has not kept pace with it.  Here is what the docstring\nsays:\n\n    There are len(prob)+1 events.\n    prob[i] is the probability of the i-th event, 0<=i<len(prob).\n    The probability of event len(prob) is 1.-Numeric.sum(prob).\n\nContrast that with this behavior:\n\n    >>> from numpy.numarray.random_array import multinomial\n\n    >>> multinomial(10000, [0.5, 0.5])\n\n    array([5010, 4990])\n\nIt used to be that you\'d have to leave off the last probability entry.\nIt\'s much more convenient that you don\'t have to do that anymore, but\nsince it continues to silently accept input in the old form, it\'s caused\nme a great deal of confusion.\n\nHere is the old behavior, for sake of contrast\n\n    >>> from RandomArray import multinomial\n\n    >>> multinomial(10000, [0.5,])\n\n    array([4982, 5018])\n\n    >>> multinomial(10000, [0.5,0.5])\n\n    Traceback (most recent call last):\n      File ""<stdin>"", line 1, in <module>\n      File ""/usr/lib/python2.5/site-packages/Numeric/RandomArray.py"", line 221, in multinomial\n        x = ranlib.multinomial(trials, probs.astype(Numeric.Float32), Numeric.multiply.reduce(shape))\n    RuntimeError: Sum of P(i) > 1 in GENMUL\n\nThe new form still accepts this input:\n\n    >>> from numpy.numarray.random_array import multinomial\n\n    >>> multinomial(10000, [0.5,])\n\n    array([10000])\n\nThese examples come from numpy version 1.0.4 (Ubuntu Hardy), but the\nsame problems seem to apply to version 1.2.1 (Ubuntu Jaunty).  I don\'t\nhave access to the latest numpy version to check there.  Apologies for\nthe redundant report, if this problem has already been corrected.\n\nIncidentally, the reason I moved to the numarray multinomial function is that the one in oldnumeric has a memory leak.  If this is worth attention, I will be happy to submit a bug report about that, too.'"
1805,7728781,thouis,thouis,2012-10-19 20:52:20,2012-10-19 20:52:20,2012-10-19 20:52:20,closed,,1.6.0,2,11 - Bug;component: numpy.ma;priority: low,https://api.github.com/repos/numpy/numpy/issues/1805,b'ma.where type handling incorrect (Trac #1207)',"b""_Original ticket http://projects.scipy.org/numpy/ticket/1207 on 2009-08-22 by @rgommers, assigned to @pierregm._\n\nWhen both `x` and `y` arguments are not masked arrays, the type is determined by ``np.max(type1, type2). This does not follow the NumPy casting rules, the solution is to replace ``np.max`` by ``np.find_common_type``.\n\nExample:\n\n\n\n    >>> x = np.arange(4, dtype=np.int32)\n    >>> y = np.arange(4, dtype=np.float32) * 2.2\n    >>> np.ma.where(x > 1.5, y, x).dtype\n    dtype('float32')\n    >>> np.find_common_type([np.int32, np.float32], [])\n    dtype('float64')\n\n"""
1804,7728779,thouis,thouis,2012-10-19 20:52:18,2012-10-19 20:52:19,2012-10-19 20:52:19,closed,,,2,11 - Bug;component: numpy.random;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1804,b'rk_state.gauss should always be initialized (Trac #1206)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/1206 on 2009-08-21 by trac user zouave, assigned to unknown._\n\nrk_state.gauss is left non-initialized when rk_state.has_gauss is set to 0.  Both has_gauss and gauss are returned by RandomState.get_state() and are part of pickled RandomStates.  Thus, two generators which have the exact same behavior may have different states and pickles (at least until a gaussian is generated).  Suggestion: always set gauss to 0. when has_gauss is set to 0.\n'"
1803,7728775,thouis,thouis,2012-10-19 20:52:15,2012-10-23 02:41:54,2012-10-19 20:52:16,closed,,,2,11 - Bug;component: numpy.ma;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1803,b'FAIL: test_testUfuncRegression (test_old_ma.TestUfuncs) [ SOLARIS ] (Trac #1205)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/1205 on 2009-08-20 by @stsci-sienkiew, assigned to @pierregm._\n\n\n\n    ======================================================================\n    FAIL: test_testUfuncRegression (test_old_ma.TestUfuncs)\n    ----------------------------------------------------------------------\n    Traceback (most recent call last):\n      File ""/usr/ra/pyssg/2.5.1/numpy/ma/tests/test_old_ma.py"", line 689, in test_testUfuncRegression\n        self.failUnless(eqmask(ur.mask, mr.mask))\n    AssertionError\n    \n\n\n\n1.4.0.dev7284 (august 6)\n\n1.4.0.dev7303 (august 19)\n\nPython 2.5.1, Solaris 8, cc: Sun WorkShop 6 update 2 C 5.3 Patch 111679-14 2004/02/20\n'"
1802,7728773,thouis,thouis,2012-10-19 20:52:12,2012-10-19 20:52:13,2012-10-19 20:52:13,closed,,,6,11 - Bug;component: numpy.ma;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1802,b'Test failure: new ufuncs on MaskedArrays. [ SOLARIS ] (Trac #1204)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/1204 on 2009-08-20 by @stsci-sienkiew, assigned to @pierregm._\n\n\n\n    ======================================================================\n    FAIL: Tests new ufuncs on MaskedArrays.\n    ----------------------------------------------------------------------\n    Traceback (most recent call last):\n      File ""/usr/ra/pyssg/2.5.1/numpy/ma/tests/test_core.py"", line 1419, in test_testUfuncRegression\n        assert_mask_equal(ur.mask, mr.mask)\n      File ""/usr/stsci/pyssgdev/2.5.1/numpy/ma/testutils.py"", line 237, in assert_mask_equal\n        assert_array_equal(m1, m2)\n      File ""/usr/stsci/pyssgdev/2.5.1/numpy/ma/testutils.py"", line 193, in assert_array_equal\n        header=\'Arrays are not equal\')\n      File ""/usr/stsci/pyssgdev/2.5.1/numpy/ma/testutils.py"", line 186, in assert_array_compare\n        verbose=verbose, header=header)\n      File ""/usr/stsci/pyssgdev/2.5.1/numpy/testing/utils.py"", line 571, in assert_array_compare\n        raise AssertionError(msg)\n    AssertionError: \n    Arrays are not equal\n    \n    (mismatch 25.0%)\n     x: array([False,  True, False,  True, False, False, False,  True], dtype=bool)\n     y: array([False,  True, False, False, False, False, False, False], dtype=bool)\n\n\n\n\n1.4.0.dev7284 (august 6)\n\n1.4.0.dev7303 (august 19)\n\nPython 2.5.1, Solaris 8, cc: Sun WorkShop 6 update 2 C 5.3 Patch 111679-14 2004/02/20\n'"
1801,7728772,thouis,thouis,2012-10-19 20:52:10,2012-10-23 02:41:53,2012-10-19 20:52:11,closed,,,1,11 - Bug;component: Other;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1801,"b'test_umath.test_arctan2_special_values(-0.0, 0.0) (Trac #1203)'","b'_Original ticket http://projects.scipy.org/numpy/ticket/1203 on 2009-08-20 by @stsci-sienkiew, assigned to unknown._\n\n\n\n    ======================================================================\n    FAIL: test_umath.test_arctan2_special_values(-0.0, 0.0)\n    ----------------------------------------------------------------------\n    Traceback (most recent call last):\n      File ""/usr/stsci/pyssgdev/2.5.1/nose/case.py"", line 183, in runTest\n        self.test(*self.arg)\n      File ""/usr/ra/pyssg/2.5.1/numpy/core/tests/test_umath.py"", line 235, in assert_arctan2_isnzero\n        assert ncu.arctan2(x, y) == 0 and np.signbit(ncu.arctan2(x, y))\n    AssertionError\n    \n\n\n\n1.4.0.dev7284 (august 6)\n\n1.4.0.dev7303 (august 19)\n\nPython 2.5.1, Solaris 8, cc: Sun WorkShop 6 update 2 C 5.3 Patch 111679-14 2004/02/20\n\nI put in three tickets for this one (the other two are #1799 and #1800) before I noticed that the problem is probably that arctan2 doesn\'t work.\n\n'"
1800,7728770,thouis,thouis,2012-10-19 20:52:08,2012-10-19 20:52:09,2012-10-19 20:52:09,closed,,,1,11 - Bug;component: Other;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1800,"b'FAIL: test_umath.test_arctan2_special_values(0.0, -3.1415926535897931) [ SOLARIS ] (Trac #1202)'","b'_Original ticket http://projects.scipy.org/numpy/ticket/1202 on 2009-08-20 by @stsci-sienkiew, assigned to unknown._\n\n\n\n    ======================================================================\n    FAIL: test_umath.test_arctan2_special_values(0.0, -3.1415926535897931)\n    ----------------------------------------------------------------------\n    Traceback (most recent call last):\n      File ""/usr/stsci/pyssgdev/2.5.1/nose/case.py"", line 183, in runTest\n        self.test(*self.arg)\n      File ""/usr/stsci/pyssgdev/2.5.1/numpy/testing/utils.py"", line 421, in assert_almost_equal\n        raise AssertionError(msg)\n    AssertionError: \n    Arrays are not almost equal\n     ACTUAL: 0.0\n     DESIRED: -3.1415926535897931\n\n\n\n1.4.0.dev7284 (august 6)\n\n1.4.0.dev7303 (august 19)\n\nPython 2.5.1, Solaris 8, cc: Sun WorkShop 6 update 2 C 5.3 Patch 111679-14 2004/02/20\n'"
1799,7728768,thouis,thouis,2012-10-19 20:52:06,2012-10-19 20:52:07,2012-10-19 20:52:07,closed,,,1,11 - Bug;component: Other;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1799,"b'FAIL: test_umath.test_arctan2_special_values(0.0, 3.1415926535897931) [ SOLARIS ] (Trac #1201)'","b'_Original ticket http://projects.scipy.org/numpy/ticket/1201 on 2009-08-20 by @stsci-sienkiew, assigned to unknown._\n\n\n\n    ======================================================================\n    FAIL: test_umath.test_arctan2_special_values(0.0, 3.1415926535897931)\n    ----------------------------------------------------------------------\n    Traceback (most recent call last):\n      File ""/usr/stsci/pyssgdev/2.5.1/nose/case.py"", line 183, in runTest\n        self.test(*self.arg)\n      File ""/usr/stsci/pyssgdev/2.5.1/numpy/testing/utils.py"", line 421, in assert_almost_equal\n        raise AssertionError(msg)\n    AssertionError: \n    Arrays are not almost equal\n     ACTUAL: 0.0\n     DESIRED: 3.1415926535897931\n    \n\n\n\n1.4.0.dev7284 (august 6)\n\n1.4.0.dev7303 (august 19)\n\nPython 2.5.1, Solaris 8, cc: Sun WorkShop 6 update 2 C 5.3 Patch 111679-14 2004/02/20\n'"
1798,7728766,thouis,thouis,2012-10-19 20:52:04,2012-10-19 20:52:05,2012-10-19 20:52:05,closed,,,2,11 - Bug;component: numpy.core;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1798,b'chararray.rstrip inconsistency (Trac #1200)',"b""_Original ticket http://projects.scipy.org/numpy/ticket/1200 on 2009-08-19 by trac user dgoldsmith, assigned to unknown._\n\n>>> c = np.array(['  aA  '], dtype='S6').view(np.chararray); c\nchararray(['  aA'],\n      dtype='|S6')\n>>> len(c[0]) # is 'A' the trailing character...\n4\n>>> c.rstrip('A') # ...or not?\nchararray(['  aA'],\n      dtype='|S6')\n\nNote:\n>>> len(c.base[0]); c.base[0]\n6\n'  aA  '\n\nConsequent hypothesis: rstrip is operating on c.base, not c.\n\n>>> len(c.base[0]); c.base[0]\n6\n'  aA  '"""
1797,7728763,thouis,thouis,2012-10-19 20:52:02,2012-10-19 20:52:03,2012-10-19 20:52:03,closed,,,2,11 - Bug;component: numpy.core;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1797,b'chararray.expandtabs broken (Trac #1199)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/1199 on 2009-08-18 by trac user dgoldsmith, assigned to unknown._\n\n>>> c = np.array([\'aAaAaA\', \'\\taA\\t\', \'abBABba\']).view(np.chararray); c\nchararray([\'aAaAaA\', \'\\taA\', \'abBABba\'],\n      dtype=\'|S7\')\n>>> c.expandtabs()\nTraceback (most recent call last):\n  File ""<stdin>"", line 1, in <module>\n  File ""C:\\Python25\\lib\\site-packages\\numpy\\core\\defchararray.py"", line 223, in expandtabs\n    return self._generalmethod(\'endswith\', broadcast(self, tabsize))\n  File ""C:\\Python25\\lib\\site-packages\\numpy\\core\\defchararray.py"", line 158, in _generalmethod\n    newitem = getattr(val[0],name)(*newval)\nTypeError: endswith() takes at least 1 argument (0 given)\n\nAnd yet:\n\n>>> help(c.expandtabs)\nHelp on method expandtabs in module numpy.core.defchararray:\n\nexpandtabs(self, tabsize=None) method of numpy.core.defchararray.chararray instance\n\nSo expandtabs isn\'t supposed to require an argument, and thus must itself generate the argument endswith is looking for, but isn\'t doing so.'"
1796,7728759,thouis,thouis,2012-10-19 20:51:58,2012-10-19 20:52:00,2012-10-19 20:52:00,closed,,,6,11 - Bug;component: numpy.core;priority: high,https://api.github.com/repos/numpy/numpy/issues/1796,b'Segmentation fault with |O dtype (Trac #1198)',"b""_Original ticket http://projects.scipy.org/numpy/ticket/1198 on 2009-08-18 by @astrofrog, assigned to unknown._\n\nThe following code causes a segmentation fault when using numpy 1.4.0.dev7282:\n\nimport numpy as np\n\narray = np.zeros((10,), dtype=[(('clon', 'col1'), '|O4'), (('err_ang', 'col2'), '<i4')])\narray['clon'] = np.zeros(10, dtype = np.string_)\narray['err_ang'] = np.zeros(10, dtype = np.int32)\n\nprint array\n\nThe problem occurs when using Python 2.6 64-bit on MacOS X, and the MacOS X traceback is as follows:\n\nThread 0 Crashed:\n0   multiarray.so                 \t0x000000010045eb4a OBJECT_copyswapn + 154 (arraytypes.c.src:1354)\n1   multiarray.so                 \t0x000000010049cce8 _broadcast_cast + 552 (convert_datatype.c:243)\n2   multiarray.so                 \t0x00000001004ab889 PyArray_CopyObject + 89 (ctors.c:804)\n3   multiarray.so                 \t0x00000001004ad5a4 PyArray_SetField + 228 (methods.c:356)\n4   multiarray.so                 \t0x00000001004bcef9 array_ass_sub + 841 (mapping.c:794)\n5   org.python.python             \t0x00000001000bc5d8 PyEval_EvalFrameEx + 10824\n6   org.python.python             \t0x00000001000c0e0b PyEval_EvalCodeEx + 1483\n7   org.python.python             \t0x00000001000c1206 PyEval_EvalCode + 54\n8   org.python.python             \t0x00000001000e599e PyRun_FileExFlags + 174\n9   org.python.python             \t0x00000001000e6781 PyRun_SimpleFileExFlags + 817\n10  org.python.python             \t0x00000001000f68be Py_Main + 2766\n11  Python-64                     \t0x0000000100000f54 0x100000000 + 3924\n"""
1795,7728756,thouis,thouis,2012-10-19 20:51:57,2012-10-19 20:51:57,2012-10-19 20:51:57,closed,,,1,11 - Bug;component: Other;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1795,b'Memory leak when creating ndarray from list of ndarray subclass instances (Trac #1197)',"b""_Original ticket http://projects.scipy.org/numpy/ticket/1197 on 2009-08-17 by trac user chicagofire, assigned to unknown._\n\nThe following code leaks horribly on python v2.6/numpy v1.3.0\n\nimport numpy\nimport gc\n\nclass Array(numpy.ndarray):\n\tpass\n\nif __name__=='__main__':\n\tprint 'running'\n\tarr = [Array(shape = (1,1)), Array(shape = (1,1))]\n\n\n\tfor i in xrange(10000000000):\n\t\tnumpy.array(arr)\n\t\tif i%1000 == 0:\n\t\t\tprint 'collecting'\n\t\t\tgc.collect()\n\n\nCommenting out PyArray_EnsureArray in setArrayFromSequence stops the leak."""
1794,7728754,thouis,thouis,2012-10-19 20:51:54,2012-10-19 20:51:55,2012-10-19 20:51:55,closed,,1.5.1,4,11 - Bug;component: numpy.lib;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1794,b'IndexExpression negative index bug. (Trac #1196)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/1196 on 2009-08-17 by @mforbes, assigned to unknown._\n\nNegative indices do not work properly because the `IndexExpression` class has a `__len__()` method that returns the maximum integer:\n\n\n\n    >>> np.s_[:-1]\n    slice(0, 9223372036854775806, None)\n    >>> a = arange(2)\n    >>> a[:-1]\n    array([0])\n    >>> a[s_[:-1]]\n    array([0, 1])\n\n\n\nThis can be fixed by having `__len__()` return 0, or perhaps better, by removing `__getslice__` and `__len__` altogether as suggested by Robert Kern.\n\nhttp://www.mail-archive.com/numpy-discussion@scipy.org/msg18251.html\n'"
1793,7728751,thouis,thouis,2012-10-19 20:51:52,2012-10-19 20:51:53,2012-10-19 20:51:53,closed,,1.4.1,3,11 - Bug;component: numpy.core;priority: high,https://api.github.com/repos/numpy/numpy/issues/1793,"b'charray.count() ""breaks"" if kwarg \'end\' assigned but \'start\' isn\'t (Trac #1195)'","b'_Original ticket http://projects.scipy.org/numpy/ticket/1195 on 2009-08-17 by trac user dgoldsmith, assigned to unknown._\n\nExample:\n\n>>> c = np.array([\'aAaAaA\', \'  aA  \', \'abBABba\']).view(np.chararray)\n>>> c\nchararray([\'aAaAaA\', \'  aA\', \'abBABba\'],\n    dtype=\'|S7\')\n>>> c.count(\'aA\', end=3)\narray([3, 1, 0]\n\nProblem (as reported by Pierre GM):\n\n""The input of the method (\'aA\',start,end) are checked for consistency. \nHowever, a problem is that as soon any value is 0 or None or False, \nthe following values are not checked and just discarded (that\'s line 171 in defchararray).\nWhen you call the `count` method, `start` defaults to None, meaning \nthat the `end` parameter is never taken into account.\n\n""That\'s clearly a bug, actually 2 bugs:\n* `start` should default to 0 in that case (you need it in the `count` \nmethod of strings)\n* when one of the parameter is not None, it should be taken into \naccount.\n\n"">>> if not chk or (chk.dtype is object_ and chk.item() is None):\nshould become\n>>> if (chk is None) of (chk.dtype is object_ and chk.item() is None):""'"
1792,7728750,thouis,thouis,2012-10-19 20:51:49,2012-10-23 02:41:52,2012-10-19 20:51:50,closed,,,3,11 - Bug;component: numpy.distutils;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1792,b'lnpymath cannot find error during scipy installation (Trac #1194)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/1194 on 2009-08-15 by trac user gsever, assigned to @cournape._\n\nAn SVN check-out and install of numpy with python setupegg.py develop\nfollowing the similarly for scipy with develop fails due to /usr/bin/ld: cannot find -lnpymath issue.\n\n\'\'/usr/bin/ld: cannot find -lnpymath\ncollect2: ld returned 1 exit status\nerror: Command ""/usr/bin/g77 -g -Wall -g -Wall -shared build/temp.linux-i686-2.6/scipy/special/_cephesmodule.o build/temp.linux-i686-2.6/scipy/special/amos_wrappers.o build/temp.linux-i686-2.6/scipy/special/specfun_wrappers.o build/temp.linux-i686-2.6/scipy/special/toms_wrappers.o build/temp.linux-i686-2.6/scipy/special/cdf_wrappers.o build/temp.linux-i686-2.6/scipy/special/ufunc_extras.o -L/usr/lib/python2.6/site-packages/numpy/core/lib -L/usr/lib -Lbuild/temp.linux-i686-2.6 -lsc_amos -lsc_toms -lsc_c_misc -lsc_cephes -lsc_mach -lsc_cdf -lsc_specfun -lnpymath -lm -lpython2.6 -lg2c -o scipy/special/_cephes.so"" failed with exit status 1\'\'\n\n\nThe temporary solution to this problem is to create a symbolic link for npy_math.o file (under numpy/build/temp.linux-i686-2.6/numpy/core/src/npymath/) into your /usr/lib directory as libnpymath.so.\n\nSciPy with python setupegg.py develop should compile fine. '"
1790,7728747,thouis,thouis,2012-10-19 20:51:44,2012-10-19 20:51:44,2012-10-19 20:51:44,closed,,,3,11 - Bug;component: Other;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1790,b'integer dot product (Trac #1192)',"b""_Original ticket http://projects.scipy.org/numpy/ticket/1192 on 2009-08-11 by trac user jloper, assigned to unknown._\n\nthe 'dot' function is designed to work ONLY WITH FLOATING POINT NUMBERS, but it doesn't raise an exception or even a warning when you feed it integer values.  This is going to confuse people.\n\n\n    In [239]: a=require(randint(0,2,5000),int8)\n    In [240]: b=require(randint(0,2,5000),int8)\n    In [241]: dot(a,b); sum(a*b)\n    Out[241]: -82\n    Out[241]: 1198\n\n\nLet's just say it is a very rare use-case that people want sum(a*b) mod 128.  """
1789,7728745,thouis,thouis,2012-10-19 20:51:42,2012-10-19 20:51:42,2012-10-19 20:51:42,closed,,1.4.1,0,11 - Bug;component: numpy.distutils;priority: high,https://api.github.com/repos/numpy/numpy/issues/1789,b'Fix sdist - npy-pkg-config files (Trac #1191)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/1191 on 2009-08-10 by @cournape, assigned to @dmcooke._\n\n'"
1787,7728737,thouis,thouis,2012-10-19 20:51:37,2012-10-19 20:51:39,2012-10-19 20:51:39,closed,,1.6.0,3,11 - Bug;component: numpy.core;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1787,b'ndarray.getfield raises ValueError w/ confusing explanation (Trac #1189)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/1189 on 2009-08-09 by trac user dgoldsmith, assigned to unknown._\n\nExample code:\n\nx = np.eye(3)\n\nx.getfield(np.complex)\n\nTraceback (most recent call last):\n  File ""<stdin>"", line 1, in <module>\nValueError: Need 0 <= offset <= -8 for requested type but received offset = 0\n\nSo the reason ValueError was raised is not because an incorrect value was received (as implied by the error message), but rather because no correct value is possible (for this particular pairing of array dtype and getfield dtype argument), i.e., the compound inequality which needs to be true has no solution?'"
1786,7728735,thouis,thouis,2012-10-19 20:51:36,2012-10-19 20:51:36,2012-10-19 20:51:36,closed,,,2,11 - Bug;component: numpy.ma;priority: high,https://api.github.com/repos/numpy/numpy/issues/1786,b'np.ma.average cast result to int when a mask is present (Trac #1188)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/1188 on 2009-08-05 by @huard, assigned to @pierregm._\n\nHere is an example:\n\n\n    >>> np.ma.average(np.ma.array([1,2]))\n    1.5\n    >>> np.ma.average(np.ma.array([1,2,3,4], mask=[False, False, True, True]))\n    1\n\n\n\n'"
1785,7728733,thouis,thouis,2012-10-19 20:51:33,2012-10-19 20:51:34,2012-10-19 20:51:34,closed,,,2,11 - Bug;component: numpy.ma;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1785,b'anom fails on non masked arrays (Trac #1187)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/1187 on 2009-08-05 by @huard, assigned to @pierregm._\n\nAnom is defined as a method of masked arrays, but has no equivalent in the numpy namespace. The class np.ma from_method which transforms ma methods into functions does not handle this case.'"
1784,7728732,thouis,thouis,2012-10-19 20:51:31,2012-10-19 20:51:32,2012-10-19 20:51:32,closed,,,3,11 - Bug;component: Other;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1784,b'numpy.ma.abs not working correctly? (Trac #1186)',"b""_Original ticket http://projects.scipy.org/numpy/ticket/1186 on 2009-08-03 by @dalloliogm, assigned to @pierregm._\n\nthe standard function abs() raises an error when applied to an array/list containing a 'None' value.\n\nTo circumvent this problem, I tought of using a masked array and the numpy.ma.abs function, but it doesn't work.\n\n\n\n\n    >>> import numpy\n    >>> ma1 = numpy.ma.masked_equal([1, 2, 3, None, 4, None, 5], None)\n    >>> ma1\n    masked_array(data = [1 2 3 -- 4 -- 5],\n                 mask = [False False False  True False  True False],\n           fill_value = ?)\n    \n    >>> numpy.ma.abs(ma1)\n    ---------------------------------------------------------------------------\n    TypeError                                 Traceback (most recent call last)\n    \n    /home/gioby/<ipython console> in <module>()\n    \n    /usr/lib/python2.5/site-packages/numpy-1.3.0-py2.5-linux-i686.egg/numpy/ma/core.pyc in __call__(self, a, *args, **kwargs)\n        643             result = self.f(d1, *args, **kwargs)\n        644         else:\n    --> 645             result = np.where(m, d1, self.f(d1, *args, **kwargs))\n        646         # If result is not a scalar\n        647         if result.ndim:\n    \n    TypeError: bad operand type for abs(): 'NoneType'\n    \n    \n    >>> numpy.abs(ma1)\n    ---------------------------------------------------------------------------\n    TypeError                                 Traceback (most recent call last)\n    \n    /home/gioby/<ipython console> in <module>()\n    \n    TypeError: bad operand type for abs(): 'NoneType'\n    \n    \n    >>> abs(ma1)\n    ---------------------------------------------------------------------------\n    TypeError                                 Traceback (most recent call last)\n    \n    /home/gioby/<ipython console> in <module>()\n    \n    TypeError: bad operand type for abs(): 'NoneType'\n    \n    \n    \n\n\nI expected numpy.ma.abs to ignore the masked values, as it works for other functions in the .ma module.\n\nThanks for reviewing this.\n"""
1783,7728730,thouis,thouis,2012-10-19 20:51:29,2012-10-19 20:51:29,2012-10-19 20:51:29,closed,,1.4.1,1,11 - Bug;component: Other;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1783,b'assert_approx_equal bogus for nan (Trac #1185)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/1185 on 2009-07-27 by @cournape, assigned to unknown._\n\n\n\n    #!python\n    import numpy as np\n    np.testing.assert_approx_equal(np.nan, 1)\n\n\n\nThis does not raise any AssertionError'"
1782,7728729,thouis,thouis,2012-10-19 20:51:27,2012-10-19 20:51:28,2012-10-19 20:51:28,closed,,1.4.1,1,11 - Bug;component: Other;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1782,b'assert_array_almost_equal os bogus for nan arrays (Trac #1184)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/1184 on 2009-07-27 by @cournape, assigned to unknown._\n\n\n\n    #!python\n    import numpy as np\n    np.testing.assert_array_almost_equal(np.array([np.nan]), np.array([1]))\n\n'"
1780,7728724,thouis,thouis,2012-10-19 20:51:23,2012-10-19 20:51:24,2012-10-19 20:51:24,closed,,1.4.1,2,11 - Bug;component: numpy.fft;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1780,b'fftshift and ifftshift axes argument should accept integer (Trac #1182)',"b""_Original ticket http://projects.scipy.org/numpy/ticket/1182 on 2009-07-26 by @rgommers, assigned to @charris._\n\nThe `axes` argument of both fftshift and ifftshift should accept either an int or a tuple of ints. However, it fails for an integer:\n\n\n    In [2]: freqs = [[ 0,  1,  2], [ 3,  4, -4], [-3, -2, -1]]\n    \n    In [3]: np.fft.fftshift(freqs, axes=0)\n    ---------------------------------------------------------------------------\n    TypeError                                 Traceback (most recent call last)\n    \n    /Users/jingzou/<ipython console> in <module>()\n    \n    /Library/Frameworks/Python.framework/Versions/4.2.30201/lib/python2.5/site-packages/numpy-1.2.1n1-py2.5-macosx-10.3-fat.egg/numpy/fft/helper.pyc in fftshift(x, axes)\n         34         axes = range(ndim)\n         35     y = tmp\n    ---> 36     for k in axes:\n         37         n = tmp.shape[k]\n         38         p2 = (n+1)/2\n    \n    TypeError: 'int' object is not iterable\n\n\n\nA typecheck for an integer will fix this. Patch with tests is attached."""
1777,7728718,thouis,thouis,2012-10-19 20:51:15,2012-10-19 20:51:17,2012-10-19 20:51:17,closed,,,5,11 - Bug;component: Other;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1777,b'bug using array with a PIL Image (misc.imread) (Trac #1179)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/1179 on 2009-07-22 by trac user nicopinto, assigned to unknown._\n\nFor some reason I have a problem converting a specific png image using array().\n\nHere is what I am getting (using numpy 1.3.0 and scipy 0.7.0).\n\n% wget http://files.getdropbox.com/u/167753/spiky_adj_023.png\n% python -c ""import numpy as np; import Image; print np.array(Image.open(\'spiky_adj_023.png\'))""                     \n<PngImagePlugin.PngImageFile instance at 0xd1a050>\n\n% wget http://files.getdropbox.com/u/167753/spiky_norm_001.png\n% python -c ""import numpy as np; import Image; print np.array(Image.open(\'spiky_norm_001.png\'))"" \n[[134  30 140 ..., 230  83  59]\n [ 99 202 233 ..., 160  63 133]\n [ 93 241  35 ...,   7 240 101]\n ...,\n [206 132 196 ..., 139 190 112]\n [218  21 217 ..., 121 152 109]\n [ 83 188 187 ...,   6 240 251]]\n\n\nI was initially using scipy\'s misc.imread when I found this bug. I am currently using the following workaround:\n% python -c ""import numpy as np; import Image; print np.array(Image.open(\'spiky_adj_023.png\').convert(\'RGB\'))""\n\nLet me know what you think.'"
1776,7728716,thouis,thouis,2012-10-19 20:51:13,2012-10-19 20:51:14,2012-10-19 20:51:14,closed,,,2,11 - Bug;component: Other;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1776,b'[PATCH] alpha/hppa support (Trac #1178)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/1178 on 2009-07-19 by trac user armin76, assigned to unknown._\n\nThe following patch enables alpha and hppa support. The alpha part is done by me and the hppa fix is by Jeroen Roovers <jer at gentoo dot org> wrt https://bugs.gentoo.org/show_bug.cgi?id=277438'"
1775,7728713,thouis,thouis,2012-10-19 20:51:09,2012-10-19 20:51:11,2012-10-19 20:51:11,closed,,1.4.1,4,11 - Bug;component: numpy.lib;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1775,b'Using interp with numpy scalar raises ValueError (Trac #1177)',"b""_Original ticket http://projects.scipy.org/numpy/ticket/1177 on 2009-07-17 by @tonysyu, assigned to @charris._\n\nA simple example that reproduces the error (where `x0` below is the scalar of interest):\n\n>>> import numpy as np\n>>> x0 = np.array(0.1)\n>>> x = np.linspace(0, 1)\n>>> y = np.linspace(0, 1)\n>>> np.interp(x0, x, y)\nValueError: object of too small depth for desired array\n\nNote that `interp` is able to handle python scalars, but not numpy scalars (i.e. zero-rank arrays).\n\nBelow is a simple patch that fixes this issue. (Unfortunately, I'm not using svn for numpy, so this is just a normal diff). Note that this fix returns a numpy scalar.\n\nlib/function_base.py\n====================\n1143a1144,1145\n>     elif isinstance(x, np.ndarray) and x.ndim == 0:\n>         return compiled_interp(x[np.newaxis], xp, fp, left, right)[0]"""
1774,7728710,thouis,charris,2012-10-19 20:51:06,2014-02-22 23:07:20,2014-02-22 23:07:20,closed,,,6,11 - Bug;component: numpy.core;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1774,b'Zero dimensional arrays are converted to scalars by deepcopy. (Trac #1176)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/1176 on 2009-07-17 by trac user mauro, assigned to unknown._\n\nWhen making a deepcopy of a numpy.ndarray with dtype S a numpy.string_ is created.\n\nI am not too familiar with the numpy types, but I think they are basically the same. However, they have different __repr__ and this can make this somewhat confusing (it confused me).'"
1773,7728702,thouis,thouis,2012-10-19 20:51:02,2012-10-19 20:51:05,2012-10-19 20:51:05,closed,,1.4.1,9,11 - Bug;component: numpy.core;priority: high,https://api.github.com/repos/numpy/numpy/issues/1773,b'np.isfinite on structured arrays returns a NotImplemented type object (Trac #1175)',"b""_Original ticket http://projects.scipy.org/numpy/ticket/1175 on 2009-07-15 by @pierregm, assigned to unknown._\n\nConsider the current code:\n\n\n\n    >>> a = np.array(zip(np.arange(3)),dtype=[('a',float)])\n    >>> np.isfinite(a)\n    NotImplemented\n\n\n\nInstead of a NotImplemented type object, shouldn't np.isfinite raise a NotImplementedError exception when called on a structured array ?"""
1772,7728701,thouis,thouis,2012-10-19 20:50:59,2012-10-23 02:41:50,2012-10-19 20:51:01,closed,,1.6.0,7,11 - Bug;component: numpy.ma;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1772,b'FAIL: test_testUfuncRegression (test_old_ma.TestUfuncs) (Trac #1174)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/1174 on 2009-07-15 by @stsci-sienkiew, assigned to unknown._\n\n\n\n    ======================================================================\n    FAIL: test_testUfuncRegression (test_old_ma.TestUfuncs)\n    ----------------------------------------------------------------------\n    Traceback (most recent call last):\n      File ""/usr/ra/pyssg/2.5.1/numpy/ma/tests/test_old_ma.py"", line 689, in test_testUfuncRegression\n        self.failUnless(eqmask(ur.mask, mr.mask))\n    AssertionError\n    \n    ----------------------------------------------------------------------\n\n\n\nnumpy 1.4.0.dev7132\n\nsolaris 8\n\npython 2.5.1\n'"
1771,7728698,thouis,thouis,2012-10-19 20:50:54,2012-10-23 02:41:46,2012-10-19 20:50:58,closed,,1.5.1,11,11 - Bug;component: numpy.ma;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1771,b'FAIL: Tests new ufuncs on MaskedArrays. (Solaris) (Trac #1173)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/1173 on 2009-07-15 by @stsci-sienkiew, assigned to @pierregm._\n\n\n\n    ======================================================================\n    FAIL: Tests new ufuncs on MaskedArrays.\n    ----------------------------------------------------------------------\n    Traceback (most recent call last):\n      File ""/usr/ra/pyssg/2.5.1/numpy/ma/tests/test_core.py"", line 1403, in test_testUfuncRegression\n        assert_mask_equal(ur.mask, mr.mask)\n      File ""/usr/stsci/pyssgdev/2.5.1/numpy/ma/testutils.py"", line 237, in assert_mask_equal\n        assert_array_equal(m1, m2)\n      File ""/usr/stsci/pyssgdev/2.5.1/numpy/ma/testutils.py"", line 193, in assert_array_equal\n        header=\'Arrays are not equal\')\n      File ""/usr/stsci/pyssgdev/2.5.1/numpy/ma/testutils.py"", line 186, in assert_array_compare\n        verbose=verbose, header=header)\n      File ""/usr/stsci/pyssgdev/2.5.1/numpy/testing/utils.py"", line 395, in assert_array_compare\n        raise AssertionError(msg)\n    AssertionError: \n    Arrays are not equal\n    \n    (mismatch 25.0%)\n     x: array([False,  True, False,  True, False, False, False,  True], dtype=bool)\n     y: array([False,  True, False, False, False, False, False, False], dtype=bool)\n    \n\n\n\nnumpy 1.4.0.dev7132\n\nsolaris 8\n\npython 2.5.1\n\n'"
1769,7728695,thouis,seberg,2012-10-19 20:50:51,2013-05-15 18:50:33,2013-05-15 18:50:33,closed,,,3,11 - Bug;component: numpy.numarray;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1769,"b'Inconsistent indexing of arrays with no elements, depending on shape (Trac #1171)'","b'_Original ticket http://projects.scipy.org/numpy/ticket/1171 on 2009-07-14 by trac user jguyer, assigned to unknown._\n\nAn empty, rank-0 array can be indexed with an empty list:\n\n\n    #!python\n    >>> import numpy as np\n    >>> np.__version__\n    \'1.3.0.dev6304\'\n    >>> a = np.zeros((0,))\n    >>> a[..., []]\n    array([], dtype=float64)\n\n\nbut an empty array of higher rank throws an index error\n\n\n    #!python\n    >>> b = np.zeros((1, 0))\n    >>> b[..., []]\n    Traceback (most recent call last):\n      File ""<stdin>"", line 1, in <module>\n    IndexError: invalid index\n\n\nWe have a not-completely-insane reason for wanting the second case to return `array([], shape=(1, 0), dtype=float64)`. At a minimum, it seems the two cases should be consistent.\n\nI wonder if this is related to ticket:1169?\n\nI see this on a 10.5.7 Mac, with Python 2.6.2 and NumPy 1.3.0dev and on a Debian etch machine running Python 2.4.4 and NumPy 1.2.1.'"
1768,7728691,thouis,thouis,2012-10-19 20:50:47,2012-10-19 20:50:49,2012-10-19 20:50:49,closed,,1.6.0,4,11 - Bug;component: numpy.distutils;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1768,b'Possible Bug in F2PY Fortran Compiler Detection (Trac #1170)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/1170 on 2009-07-14 by trac user selevercin, assigned to @dmcooke._\n\nI believe there is a bug in the way f2py detects fortran compilers, where the executable name never gets entered. (I\'ve tried posting this to the mailing list, but my post wont show up.)\n\nEverything discussed here was performed on: Linux cluster1 2.6.17-1.2142_FC4smp #1 SMP Tue Jul 11 22:59:20 EDT 2006 x86_64 x86_64 x86_64 GNU/Linux\n\nTrying to get f2py to recognize ifort, I started to output comments in some of the code to help trace down the mistake.\n\nI started in ""numpy/distutils/fcompiler/__init__.py"", which appears to check for the existence of a compiler based on whether or not it can find a version number in ""numpy/distutils/fcompiler/__init__.py"".\n\nI\'ve included my output, but I\'ll also add short summary:\n\n  1. f2py successfully locates all compatible compilers with the platform (__init__.py)\n\n  2. f2py begins trying to get versions for each possible compiler (__init__.py)\n\n  3. f2py _INCORRECTLY_ creates a version command, to test if the compiler exists (ccompiler.py)\n\nWhere the version command sticks with the wrong executables (\'/opt/pgi/linux86-64/6.2/bin/pgf77\' and \'/opt/pgi/linux86-64/6.2/bin/pgf90\').\n\nFor example, to detect if ifort is installed, the following command is (wrongly) run:\n\n\n    /opt/pgi/linux86-64/6.2/bin/pgf77 -FI -V -c /tmp/tmplG4_3d/ESXFqO.f -o /tmp/tmplG4_3d/ESXFqO.o\n\n\n\nThis command is garbage, because it is trying pgf77 rather than ifort. Running this command is silly but I\'ll go ahead and include it:\n\n\n    ---------------------------------------\n    pgf77-Warning-Unknown switch: -FI\n    \n    pgf77 6.2-5 64-bit target on x86-64 Linux\n    Copyright 1989-2000, The Portland Group, Inc.  All Rights Reserved.\n    Copyright 2000-2006, STMicroelectronics, Inc.  All Rights Reserved.\n    PGFTN/x86-64 Linux/x86-64 6.2-5\n    Copyright 1989-2000, The Portland Group, Inc.  All Rights Reserved.\n    Copyright 2000-2006, STMicroelectronics, Inc.  All Rights Reserved.\n    ----------------------------------------\n\n\nSince ifort is in the path:\n\n\n    $ which ifort\n    /home/user10/intel/fce/9.1.041/bin/ifort\n\n\nThe following works well:\n\n\n    $ /home/user10/intel/fce/9.1.041/bin/ifort -FI -V -c /tmp/tmplG4_3d/ESXFqO.f -o /tmp/tmplG4_3d/ESXFqO.o\n    \n    Intel(R) Fortran Compiler for Intel(R) EM64T-based applications, Version 9.1    Build 20070109 Package ID: l_fc_c_9.1.041\n    Copyright (C) 1985-2007 Intel Corporation.  All rights reserved.\n    FOR NON-COMMERCIAL USE ONLY\n    \n     Intel Fortran 9.1-6565\n\n\n\nI tried a quick hack to get the ifort executable in the version command, but this didn\'t cause ifort to be successfully detected.\n\nMy Test Output:\n\n\n\n    $ python setup.py install --prefix=${HOME}/numpy_dir | grep ""NDR""\n    \n    Running from numpy source directory.\n    /home/nreveles/numpy-1.3.0/numpy/distutils/command/config.py:361: DeprecationWarning:\n    +++++++++++++++++++++++++++++++++++++++++++++++++\n    Usage of get_output is deprecated: please do not\n    use it anymore, and avoid configuration checks\n    involving running executable on the target machine.\n    +++++++++++++++++++++++++++++++++++++++++++++++++\n    \n      DeprecationWarning)\n    \n    NDR: self= <numpy.distutils.fcompiler.gnu.GnuFCompiler instance at 0x2aaaaee5d950>\n    NDR: version_cmd = [\'/opt/pgi/linux86-64/6.2/bin/pgf77\', \'--version\']\n    NDR: compiler =  <numpy.distutils.fcompiler.gnu.GnuFCompiler instance at 0x2aaaaee5d950>\n    NDR: comp. version =  None\n    \n    NDR: self= <numpy.distutils.fcompiler.intel.IntelFCompiler instance at 0x2aaaaee62200>\n    NDR: version_cmd = [\'/opt/pgi/linux86-64/6.2/bin/pgf77\', \'-FI\', \'-V\', \'-c\', \'/tmp/tmplG4_3d/ESXFqO.f\', \'-o\', \'/tmp/tmplG4_3d/ESXFqO.o\']\n    NDR: compiler =  <numpy.distutils.fcompiler.intel.IntelFCompiler instance at 0x2aaaaee62200>\n    NDR: comp. version =  None\n    \n    NDR: compiler =  <numpy.distutils.fcompiler.lahey.LaheyFCompiler instance at 0x2aaaaee62680>\n    NDR: self= <numpy.distutils.fcompiler.lahey.LaheyFCompiler instance at 0x2aaaaee62680>\n    NDR: version_cmd = [\'/opt/pgi/linux86-64/6.2/bin/pgf90\', \'--version\']\n    NDR: comp. version =  None\n    \n    NDR: compiler =  <numpy.distutils.fcompiler.pg.PGroupFCompiler instance at 0x2aaaaee633b0>\n    NDR: self= <numpy.distutils.fcompiler.pg.PGroupFCompiler instance at 0x2aaaaee633b0>\n    NDR: version_cmd = [\'/opt/pgi/linux86-64/6.2/bin/pgf77\', \'-V 2>/dev/null\']\n    NDR: comp. version =  6.2-5\n\n'"
1767,7728689,thouis,thouis,2012-10-19 20:50:45,2012-10-19 20:50:46,2012-10-19 20:50:46,closed,,,1,11 - Bug;component: Other;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1767,"b""IndexError needed when accessing rows of 2D array that don't exist (Trac #1169)""","b""_Original ticket http://projects.scipy.org/numpy/ticket/1169 on 2009-07-14 by trac user markbakker, assigned to unknown._\n\nWhen I create a 2D array with 1 row and 10 columns:\n>>> a = ones((1,10))\n\nI can access the first (and only) row as a[0].\nWhen I try to access row 5 I get an indexerror (as well I should):\n>>> a[5]\nIndexError\n\nWhen I try to access row 5 through 8 I don't get an IndexError, but an emtpy matrix.\na[5:8]\nOut[105]: array([], shape=(0, 10), dtype=float64)\n\nI think this is a bug, and numpy should return and IndexError.\n\nThanks, Mark\n\n"""
1766,7728684,thouis,thouis,2012-10-19 20:50:42,2012-10-19 20:50:44,2012-10-19 20:50:44,closed,,1.4.1,7,11 - Bug;component: numpy.testing;priority: low,https://api.github.com/repos/numpy/numpy/issues/1766,"b""Make tester's package name detection work packages installed in a non standard location (Trac #1168)""","b""_Original ticket http://projects.scipy.org/numpy/ticket/1168 on 2009-07-11 by @GaelVaroquaux, assigned to unknown._\n\nRight now, numpy's tester package name detection (used to do coverage analysis) fails for a package that is installed in a non-standard location. This is due to the following logics:\n\n\n    def get_package_name(filepath):\n        # find the package name given a path name that's part of the package\n        fullpath = filepath[:]\n        pkg_name = []\n        while 'site-packages' in filepath:\n            filepath, p2 = os.path.split(filepath)\n            if p2 == 'site-packages':\n                break\n            pkg_name.append(p2)\n\n\nwhich fails if the package is installed outside a 'site-package' directory.\n\nI attach a patch that fixes this problem (works for me), and I believe is more robust."""
1764,7728681,thouis,thouis,2012-10-19 20:50:37,2012-10-19 20:50:38,2012-10-19 20:50:38,closed,,1.4.1,2,11 - Bug;component: numpy.ma;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1764,b'numpy reduce operation on masked array with no mask fails (Trac #1166)',"b""_Original ticket http://projects.scipy.org/numpy/ticket/1166 on 2009-07-11 by trac user reggie, assigned to @pierregm._\n\nIf you have a MaskedArray with no masked values, but whose mask is not nomask, a numpy operation on that array that results in an array whose shape is different from the original (eg. numpy.maximum.reduce), will result in an exception being raised.\n\nFor example:\n\n\n\n    In [1]: import numpy\n    \n    In [2]: numpy.__version__\n    Out[2]: '1.3.0'\n    \n    In [3]: x = numpy.ma.arange(5)\n    \n    In [4]: x.mask = numpy.ma.getmaskarray(x)\n    \n    In [5]: x\n    Out[5]: \n    masked_array(data = [0 1 2 3 4],\n                 mask = [False False False False False],\n           fill_value = 999999)\n    \n    \n    In [6]: numpy.maximum.reduce(x)\n    ---------------------------------------------------------------------------\n    ValueError                                Traceback (most recent call last)\n    \n    /home/reggie/src/python/<ipython console> in <module>()\n    \n    /usr/local/lib/python2.6/site-packages/numpy/ma/core.py in __array_finalize__(self, obj)\n       2444         # Finalize the mask ...........\n    \n       2445         if self._mask is not nomask:\n    -> 2446             self._mask.shape = self.shape\n       2447         return\n       2448     #..................................\n    \n    \n    ValueError: total size of new array must be unchanged\n    \n    In [7]: \n\n\nI have attached a patch that seems to fix the problem."""
1763,7728678,thouis,thouis,2012-10-19 20:50:34,2012-10-19 20:50:36,2012-10-19 20:50:36,closed,,1.6.0,5,11 - Bug;component: Documentation;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1763,b'Clarify the documentation standard on the issue of documenting class methods (Trac #1165)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/1165 on 2009-07-10 by trac user dgoldsmith, assigned to @pv._\n\nProposal regarding modification of the NumPy Docstring Standard\n\nUnder the heading ""Method docstrings"" in the section ""Documenting classes""\n\nReword as follows:\n\nDo not include ""self"" in the list of parameters.  Otherwise, follow\nthe docstring standard for an ordinary function, *except* when the\nmethod duplicates a function in the package namespace.  In such\ncases, simply provide the brief summary and the See Also section, whose content should simply be <packagename>.<name-of-equivalent-function>.\n\nOn those rare occasions when a method does some additional, significant processing (e.g., parameter manipulation) before (or after) handing off to a nominally equivalent function, then document only the added functionality in the method, using only the sections needed to do so, and for the rest refer to the function.  In general, the guiding principle is to document behavior where it is implemented in the source code, with ufuncs considered to ""live"" in their function implementation rather than any method implementation they may have.'"
1762,7728675,thouis,charris,2012-10-19 20:50:31,2014-02-18 19:04:15,2014-02-18 19:04:15,closed,,,7,11 - Bug;component: numpy.distutils;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1762,"b""pg.py specifies -module for all compilers, but this isn't valid for pgf77 (Trac #1164)""","b'_Original ticket http://projects.scipy.org/numpy/ticket/1164 on 2009-07-10 by trac user noam.bernstein, assigned to @dmcooke._\n\nnumpy/distutils/fcompiler/pg.py specifies ""-module"" for searching for module files.  Since fortran 77 doesn\'t have modules, pgf77 complains.  This can be fixed by adding -noswitcherror to the default set of flags for pgf77.  I\'m definitely seeing it in 1.2.1, but searching for module_dir_switch suggests that it\'s not been fixed in more recent versions.\n\nA (nearly trivial) diff is attached.'"
1761,7728671,thouis,thouis,2012-10-19 20:50:28,2012-10-23 02:41:37,2012-10-19 20:50:30,closed,,1.6.0,7,11 - Bug;component: numpy.lib;priority: high,https://api.github.com/repos/numpy/numpy/issues/1761,b'Incorrect conversion to Int64 by loadtxt (traced to _getconv in numpy.lib.io) (Trac #1163)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/1163 on 2009-07-09 by trac user onsi, assigned to unknown._\n\nI\'m running version 1.2.1 but this error should also occur in 1.3.0 based on the source currently in the trunk.\n\nI try importing the following ascii data stored in ""sample.csv"":\n\n9007200000000000,670927001710,0.010190886[[BR]]\n9007200000000001,660927001348,0.00976051[[BR]]\n9007200000000002,650883003926,0.009154096\n\nusing (maximal verbosity for clarity):\n\n\n\n    import numpy\n    arr=numpy.loadtxt(""sample.csv"",dtype=[(\'id0\',numpy.int64),(\'id1\',numpy.int64),(\'flt\',numpy.float32)],delimiter=\',\',comments=\'#\')\n\n\n\nI get:\n\n[(9007200000000000L, 670927001710L, 0.010190886445343494)[[BR]]\n(__9007200000000000L__, 660927001348L, 0.0097605101764202118)[[BR]]\n(9007200000000002L, 650883003926L, 0.009154096245765686)][[BR]]\n\nAfter some digging, i found the culprit to be the converter used by loadtxt to convert strings to dtypes.  lib.io._getconv (line 352 in trunk) returns:\n\n\n\n\n    lambda x: int(float(x))\n\n\n\n\nas the converter for any dtype that is a subclass of int, which int64 is.  Unfortunately, float does not faithfully reproduce long integers and so 9007200000000001 gets rounded to 9007200000000000.\n\nThis is fairly serious as int64s are often used as IDs in various numerical/simulation contexts.  Changing the converter to int() should resolve this problem -- though then some error checking needs to take place to ensure that int is fed an integer string.'"
1760,7728670,thouis,thouis,2012-10-19 20:50:25,2012-10-19 20:50:26,2012-10-19 20:50:26,closed,,,5,11 - Bug;component: numpy.linalg;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1760,b'linalg.matrix_power crashes with nested list input (Trac #1162)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/1162 on 2009-07-09 by trac user dgoldsmith, assigned to unknown._\n\nlinalg.matrix_power raises an AttributeError when a nested list is passed in as the array argument:\n\nMicrosoft Windows [Version 6.0.6002]\nCopyright (c) 2006 Microsoft Corporation.  All rights reserved.\n\nC:\\Users\\DG>python\nPython 2.5.4 (r254:67916, Dec 23 2008, 15:10:54) [MSC v.1310 32 bit (Intel)] on\nwin32\nType ""help"", ""copyright"", ""credits"" or ""license"" for more information.\n>>> import numpy as np\n>>> from numpy import linalg as LA\n>>> LA.matrix_power([[1, 2], [3, 4]], 3)\nTraceback (most recent call last):\n  File ""<stdin>"", line 1, in <module>\n  File ""C:\\Python25\\Lib\\site-packages\\numpy\\core\\defmatrix.py"", line 118, in matrix_power\n    if len(M.shape) != 2 or M.shape[0] != M.shape[1]:\nAttributeError: \'list\' object has no attribute \'shape\'\n\n\nYet the doc states:\n\nmatrix_power(M, n)\n    Raise a square matrix to the (integer) power n.\n        :\n    Parameters\n    ----------\n    M : array_like\n\nI\'ve corrected the doc, for now, but I assume this actually a code bug.'"
1759,7728669,thouis,seberg,2012-10-19 20:50:23,2013-05-11 15:52:13,2013-05-11 15:52:12,closed,,,2,11 - Bug;component: numpy.lib;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1759,b'Errors and/or wrong result with reverse slicing in numpy.delete (Trac #1161)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/1161 on 2009-07-08 by trac user kgdunn, assigned to unknown._\n\nIf the slice object argument for np.delete is in reverse order, then then np.delete may fail with this error:\n\n\n    ValueError: shape mismatch: objects cannot be broadcast to a single shape.\n\n\nIn other cases it gives unexpected (wrong) results.\n\n__Example A: throws error__\n----\n\n\n    >>> a = np.arange(18)\n    >>> a.shape = (3, 6)\n    >>> a\n    array([[ 0,  1,  2,  3,  4,  5],\n           [ 6,  7,  8,  9, 10, 11],\n           [12, 13, 14, 15, 16, 17]])\n    >>> slice_obj_fwd = slice(None, None, 2)\n    >>> slice_obj_rev = slice(None, None, -2)\n    >>> np.delete(a, obj=slice_obj_fwd, axis=1)  # case 1: succeeds\n    >>> np.delete(a, obj=slice_obj_rev, axis=1)  # case 2: fails\n\n\n\nThe only difference between case 1 and 2 is whether one steps forwards or backwards.  I know it is a bit weird to slice in reverse, but slice_obj_rev is created programmatically: it is intended to be similar to the behaviour expected with:\n\n\n    >>> a[:, slice_obj_rev]   # returns column 6, 4 and 2, in that order\n    array([[ 5,  3,  1],\n           [11,  9,  7],\n           [17, 15, 13]])\n\n\n\n__Example B: gives wrong result__\n----\nThis deletes column 0 and 1, instead of 3 and 4:\n\n\n    >>> np.delete(a, obj=slice(4, 2, -1), axis=1)\n    array([[ 2,  3,  4,  5],\n           [ 8,  9, 10, 11],\n           [14, 15, 16, 17]])\n\n\n\n\nI was not able to find consistent rules for when it will fail, or when it will give a wrong result.  It seems to be caused by the way the code in numpy/lib/function_base.py operates: it takes the start chunk, end chunk and then middle pieces.  \n\nThe slicing objects generated this way in function_base.py are not of the correct shape.  I\'m not sure of the reason why that code is structured to extract the start, end and then middle, so I\'m reluctant to change it and provide a patch.  Why not just use xrange(start, stop, step) to find the indices to delete, then take the setdiff1d, and copy over those over?  This is what is done already in the code region marked with the comment ""# default behavior"".\n\nHope this detail helps,\nKevin'"
1758,7728667,thouis,thouis,2012-10-19 20:50:21,2012-10-19 20:50:22,2012-10-19 20:50:22,closed,,1.4.1,3,11 - Bug;component: Other;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1758,b'numscons: Headers not installed with in-place build (Trac #1160)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/1160 on 2009-07-07 by @stefanv, assigned to @cournape._\n\nThe ""numpyconfig.h"" and ""__multiarray_api.h"" headers are not installed with in-place builds using numscons.'"
1757,7728666,thouis,thouis,2012-10-19 20:50:19,2012-10-19 20:50:19,2012-10-19 20:50:19,closed,,1.4.1,1,11 - Bug;component: numpy.core;priority: high,https://api.github.com/repos/numpy/numpy/issues/1757,b'Complex division overflows too early (Trac #1159)',"b""_Original ticket http://projects.scipy.org/numpy/ticket/1159 on 2009-07-06 by @pv, assigned to unknown._\n\nComplex division overflows early, and returns bogus results in some cases:\n\n\n    >>> asarray([1e210+0j])/1e100\n    array([ Inf+0.j])\n\n\n\nIt's easy to see why:\n\n\n    loops.c.src:C@TYPE@_divide\n    ...\n            @type@ d = in2r*in2r + in2i*in2i;\n            ((@type@ *)op1)[0] = (in1r*in2r + in1i*in2i)/d;\n            ((@type@ *)op1)[1] = (in1i*in2r - in1r*in2i)/d;\n\n\n"""
1755,7728662,thouis,thouis,2012-10-19 20:50:15,2012-10-19 20:50:16,2012-10-19 20:50:16,closed,,1.4.1,2,11 - Bug;component: Other;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1755,b'Unexpected results with inf and complex numbers (Trac #1157)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/1157 on 2009-07-01 by @cournape, assigned to unknown._\n\n\n\n    #!python\n    import numpy as np\n    a = np.complex(1, np.inf)\n    b = 1 + 1j * np.inf\n    print a\n    print b\n\n\n\nOutputs:\n\n\n\n    1+infj\n    nan+infj\n\n'"
1754,7728660,thouis,charris,2012-10-19 20:50:13,2013-02-13 03:36:49,2013-02-13 03:36:49,closed,,,5,11 - Bug;component: numpy.lib;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1754,b'vectorizing an Unbound Method (Trac #1156)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/1156 on 2009-06-30 by trac user barronh, assigned to unknown._\n\nThe current vectorize implementation cannot appropriately vectorize an UnboundMethodType function.  The root of the problem in is numpy.lib.function_base._get_nargs line 1778.  The number of arguments that a function takes is decremented if the function is a MethodType.  MethodType is inclusive of bound and unbound methods.  To make the unbound method useful, it must take an instance as the first argument, but the check against the number of arguments prevents this.\n\nreproduce with:\n\n\n    >>> from numpy import vectorize, arange\n    >>> class foo:\n    >>>     b=2\n    >>>     def bar(self, a):\n    >>>         return a**self.b\n    >>> \n    >>> vectorize(foo.bar)(foo(),arange(9))\n    ValueError: mismatch between python function inputs and received arguments\n\n\nChanging numpy.lib.function_base line 1778 solves the problem\n\n\n    < if instance(obj, types.MethodType):\n    > if instance(obj, types.MethodType) and not instance(obj, types.UnboundMethodType):\n\n'"
1752,7728655,thouis,thouis,2012-10-19 20:50:08,2012-10-19 20:50:09,2012-10-19 20:50:09,closed,,1.4.1,1,11 - Bug;component: Other;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1752,b'NPY_ macros for endianness are broken if endian.h was not available (Trac #1154)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/1154 on 2009-06-30 by @cournape, assigned to unknown._\n\nI managed to screw them up, NPY_BIG_ENDIAN and NPY_LITTLE_ENDIAN did not follow the __BIG_ENDIAN and __LITTLE_ENDIAN counterparts...'"
1750,7728647,thouis,thouis,2012-10-19 20:50:01,2012-10-19 20:50:01,2012-10-19 20:50:01,closed,,,2,11 - Bug;component: numpy.core;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1750,b'fromfile() returns MemoryError exception when attempting to read at EOF (Trac #1152)',"b""_Original ticket http://projects.scipy.org/numpy/ticket/1152 on 2009-06-26 by trac user jludlow, assigned to @charris._\n\nConsider the following brief example:\n\n\n\n    >>> fid = open('temp.bin', 'wb')\n    >>> x = array([1.0, 2.0, 3.0, 4.0])\n    >>> x.tofile(fid)\n    >>> fid.close()\n    >>> fid = open('temp.bin', 'rb')\n    >>> y = fromfile(fid, count=5)\n    >>> y\n    array([ 1.,  2.,  3.,  4.])\n    >>> z = fromfile(fid, count=5)\n    Traceback (most recent call last):\n    MemoryError\n    >>>\n\n\n\nfromfile() appears to behave as expected when more items are requested than are available in the file, nicely truncating the length of the returned array to only the available items.  However, a subsequent fromfile() on the same file object returns the MemoryError exception.  This seems to happen only when a fromfile() call is initiated right on the EOF.  \n\nWhether this is a defect or the intended behavior I'm not sure.  It would be more consistent with other file access methods like fid.read(bytes) to simply return an empty array when nothing more is available to read."""
1749,7728646,thouis,thouis,2012-10-19 20:49:59,2012-10-19 20:49:59,2012-10-19 20:49:59,closed,,,2,11 - Bug;component: Other;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1749,b'signal.medfilt2d crashes under Windows for scipy 0.7 and above (Trac #1151)',"b""_Original ticket http://projects.scipy.org/numpy/ticket/1151 on 2009-06-26 by trac user PCA, assigned to unknown._\n\nThe following Python script (below) causes a fatal error under\nMicrosoft Windows XP Professional Version 2002 Service Pack 3\nwith ActivePython 2.5.2.2\nand numpy-1.2.1-win32-superpack-python2.5\nwith scipy-0.7.0-win32-superpack-python2.5 or above\n\nbut works with scipy-0.6.0.win32-p3-py2.5\n\nThe combination of\nnumpy-1.1.0-win32-superpack-python2.5\nscipy-0.6.0.win32-p3-py2.5.exe\nworks without any deprecation warnings.\n\n------\n\nimport numpy as N\nimport scipy as SP\nfrom scipy import signal\nimport pylab as P\nimport matplotlib as MPL\n\n\ndef main():\n    lena = SP.lena()\n    print lena.shape\n    P.imshow(lena, interpolation='nearest', cmap=MPL.cm.gray)\n    s = signal.medfilt2d(lena.astype(float), [15,15])\n\nif __name__ == '__main__':\n    main()\n    P.show()\n"""
1748,7728645,thouis,thouis,2012-10-19 20:49:56,2013-01-09 23:31:15,2012-10-19 20:49:57,closed,,,6,11 - Bug;component: numpy.core;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1748,"b""Object arrays can't be multiplied by numpy scalars (Trac #1150)""","b'_Original ticket http://projects.scipy.org/numpy/ticket/1150 on 2009-06-25 by @inducer, assigned to unknown._\n\n\n\n    Python 2.5.4 (r254:67916, Feb 18 2009, 03:00:47) \n    [GCC 4.3.3] on linux2\n    Type ""help"", ""copyright"", ""credits"" or ""license"" for more information.\n    >>> import numpy\n    >>> numpy.__version__\n    \'1.3.0\'\n    >>> numpy.zeros(5, dtype=object)*5.\n    array([0.0, 0.0, 0.0, 0.0, 0.0], dtype=object)\n    >>> numpy.zeros(5, dtype=object)*numpy.float64(5)\n    Traceback (most recent call last):\n      File ""<stdin>"", line 1, in <module>\n    TypeError: unsupported operand type(s) for *: \'numpy.ndarray\' and \'numpy.float64\'\n\n'"
1747,7728644,thouis,thouis,2012-10-19 20:49:52,2012-10-19 20:49:54,2012-10-19 20:49:54,closed,,NumPy 1.7,6,11 - Bug;component: numpy.core;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1747,"b""argmin doesn't work with datetime objects (Trac #1149)""","b'_Original ticket http://projects.scipy.org/numpy/ticket/1149 on 2009-06-25 by trac user doylejg, assigned to unknown._\n\nWith a numpy array of _datetime_ or _datetime.timedelta_ objects, it appears that _min_ will work, but _argmin_ will not. \nI have attached the traceback.\n\n\n    Traceback (most recent call last):\n      File ""<stdin>"", line 1, in <module>\n      File ""/usr/lib/python2.5/site-packages/numpy/core/fromnumeric.py"", line 632, in argmin\n        return argmin(axis)\n    TypeError: unsupported operand type(s) for -: \'int\' and \'datetime.timedelta\'\n\n'"
1746,7728639,thouis,thouis,2012-10-19 20:49:49,2012-10-19 20:49:51,2012-10-19 20:49:51,closed,,1.4.1,4,11 - Bug;component: numpy.f2py;priority: low,https://api.github.com/repos/numpy/numpy/issues/1746,b'f2py modules crash if RTLD_GLOBAL in effect (Trac #1148)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/1148 on 2009-06-25 by trac user hugh, assigned to unknown._\n\nI was getting seg faults when the l_bfgs_b optimiser (fortran code) in SciPy ran and discovered this ONLY occurred when the library openbabel was loaded. The backtrace seems to suggest that the error is in numpy/core/multiarray.so.\n\nThe following code induces the crash:\n=====================================\n\n\n    import openbabel # comment out this line to stop seg fault\n    import numpy\n    \n    from scipy.optimize.lbfgsb import fmin_l_bfgs_b\n    \n    def f(x):\n        return x[0]**2 + x[1]**2\n    \n    def g(x):\n        return numpy.array([2*x[0], 2*x[1]])\n    \n    x0 = numpy.array([3,1])\n    \n    opt, energy, dict = fmin_l_bfgs_b(f, x0, fprime=g)\n    \n    print opt\n\n\nHere is the backtrace:\n======================\n\n\n    (gdb) bt\n    #0  0x00007f93e8635720 in PyArray_API () from /usr/local/lib64/python2.5/site-packages/numpy/core/multiarray.so\n    #1  0x00007f93e435afa3 in initminpack2 () at /usr/local/lib64/python2.5/site-packages/numpy/core/include/numpy/__multiarray_api.h:983\n    #2  0x00007f93ea23e2f6 in _PyImport_LoadDynamicModule () from /usr/lib64/libpython2.5.so.1.0\n    #3  0x00007f93ea23c6e9 in ?? () from /usr/lib64/libpython2.5.so.1.0\n    #4  0x00007f93ea23cc79 in ?? () from /usr/lib64/libpython2.5.so.1.0\n    #5  0x00007f93ea23d200 in ?? () from /usr/lib64/libpython2.5.so.1.0\n    #6  0x00007f93ea23d335 in PyImport_ImportModuleLevel () from /usr/lib64/libpython2.5.so.1.0\n    #7  0x00007f93ea221c5d in ?? () from /usr/lib64/libpython2.5.so.1.0\n    #8  0x00007f93ea1ab683 in PyObject_Call () from /usr/lib64/libpython2.5.so.1.0\n    #9  0x00007f93ea222251 in PyEval_CallObjectWithKeywords () from /usr/lib64/libpython2.5.so.1.0\n    #10 0x00007f93ea226278 in PyEval_EvalFrameEx () from /usr/lib64/libpython2.5.so.1.0\n    #11 0x00007f93ea229c4d in PyEval_EvalCodeEx () from /usr/lib64/libpython2.5.so.1.0\n    #12 0x00007f93ea229e42 in PyEval_EvalCode () from /usr/lib64/libpython2.5.so.1.0\n    #13 0x00007f93ea23ada0 in PyImport_ExecCodeModuleEx () from /usr/lib64/libpython2.5.so.1.0\n    #14 0x00007f93ea23b028 in ?? () from /usr/lib64/libpython2.5.so.1.0\n    #15 0x00007f93ea23c6e9 in ?? () from /usr/lib64/libpython2.5.so.1.0\n    #16 0x00007f93ea23c982 in ?? () from /usr/lib64/libpython2.5.so.1.0\n    #17 0x00007f93ea23cfcf in ?? () from /usr/lib64/libpython2.5.so.1.0\n    #18 0x00007f93ea23d335 in PyImport_ImportModuleLevel () from /usr/lib64/libpython2.5.so.1.0\n    #19 0x00007f93ea221c5d in ?? () from /usr/lib64/libpython2.5.so.1.0\n    #20 0x00007f93ea1ab683 in PyObject_Call () from /usr/lib64/libpython2.5.so.1.0\n    #21 0x00007f93ea222251 in PyEval_CallObjectWithKeywords () from /usr/lib64/libpython2.5.so.1.0\n    #22 0x00007f93ea226278 in PyEval_EvalFrameEx () from /usr/lib64/libpython2.5.so.1.0\n    #23 0x00007f93ea229c4d in PyEval_EvalCodeEx () from /usr/lib64/libpython2.5.so.1.0\n    #24 0x00007f93ea229e42 in PyEval_EvalCode () from /usr/lib64/libpython2.5.so.1.0\n    #25 0x00007f93ea23ada0 in PyImport_ExecCodeModuleEx () from /usr/lib64/libpython2.5.so.1.0\n    #26 0x00007f93ea23b028 in ?? () from /usr/lib64/libpython2.5.so.1.0\n    #27 0x00007f93ea23c6e9 in ?? () from /usr/lib64/libpython2.5.so.1.0\n    #28 0x00007f93ea23c982 in ?? () from /usr/lib64/libpython2.5.so.1.0\n    #29 0x00007f93ea23cfcf in ?? () from /usr/lib64/libpython2.5.so.1.0\n    #30 0x00007f93ea23d335 in PyImport_ImportModuleLevel () from /usr/lib64/libpython2.5.so.1.0\n    #31 0x00007f93ea221c5d in ?? () from /usr/lib64/libpython2.5.so.1.0\n    #32 0x00007f93ea1ab683 in PyObject_Call () from /usr/lib64/libpython2.5.so.1.0\n    #33 0x00007f93ea222251 in PyEval_CallObjectWithKeywords () from /usr/lib64/libpython2.5.so.1.0\n    #34 0x00007f93ea226278 in PyEval_EvalFrameEx () from /usr/lib64/libpython2.5.so.1.0\n    #35 0x00007f93ea229c4d in PyEval_EvalCodeEx () from /usr/lib64/libpython2.5.so.1.0\n    #36 0x00007f93ea229e42 in PyEval_EvalCode () from /usr/lib64/libpython2.5.so.1.0\n    #37 0x00007f93ea23ada0 in PyImport_ExecCodeModuleEx () from /usr/lib64/libpython2.5.so.1.0\n    #38 0x00007f93ea23b028 in ?? () from /usr/lib64/libpython2.5.so.1.0\n    #39 0x00007f93ea23bfa7 in ?? () from /usr/lib64/libpython2.5.so.1.0\n    #40 0x00007f93ea23c6e9 in ?? () from /usr/lib64/libpython2.5.so.1.0\n    #41 0x00007f93ea23c982 in ?? () from /usr/lib64/libpython2.5.so.1.0\n    #42 0x00007f93ea23d016 in ?? () from /usr/lib64/libpython2.5.so.1.0\n    #43 0x00007f93ea23d335 in PyImport_ImportModuleLevel () from /usr/lib64/libpython2.5.so.1.0\n    #44 0x00007f93ea221c5d in ?? () from /usr/lib64/libpython2.5.so.1.0\n    #45 0x00007f93ea1ab683 in PyObject_Call () from /usr/lib64/libpython2.5.so.1.0\n    #46 0x00007f93ea222251 in PyEval_CallObjectWithKeywords () from /usr/lib64/libpython2.5.so.1.0\n    #47 0x00007f93ea226278 in PyEval_EvalFrameEx () from /usr/lib64/libpython2.5.so.1.0\n    #48 0x00007f93ea229c4d in PyEval_EvalCodeEx () from /usr/lib64/libpython2.5.so.1.0\n    #49 0x00007f93ea229e42 in PyEval_EvalCode () from /usr/lib64/libpython2.5.so.1.0\n    #50 0x00007f93ea23ada0 in PyImport_ExecCodeModuleEx () from /usr/lib64/libpython2.5.so.1.0\n    #51 0x00007f93ea23b028 in ?? () from /usr/lib64/libpython2.5.so.1.0\n    #52 0x00007f93ea23c6e9 in ?? () from /usr/lib64/libpython2.5.so.1.0\n    #53 0x00007f93ea23c982 in ?? () from /usr/lib64/libpython2.5.so.1.0\n    #54 0x00007f93ea23cfcf in ?? () from /usr/lib64/libpython2.5.so.1.0\n    #55 0x00007f93ea23d335 in PyImport_ImportModuleLevel () from /usr/lib64/libpython2.5.so.1.0\n    #56 0x00007f93ea221c5d in ?? () from /usr/lib64/libpython2.5.so.1.0\n    #57 0x00007f93ea1ab683 in PyObject_Call () from /usr/lib64/libpython2.5.so.1.0\n    #58 0x00007f93ea222251 in PyEval_CallObjectWithKeywords () from /usr/lib64/libpython2.5.so.1.0\n    #59 0x00007f93ea226278 in PyEval_EvalFrameEx () from /usr/lib64/libpython2.5.so.1.0\n    #60 0x00007f93ea229c4d in PyEval_EvalCodeEx () from /usr/lib64/libpython2.5.so.1.0\n    ---Type <return> to continue, or q <return> to quit---\n    #61 0x00007f93ea229e42 in PyEval_EvalCode () from /usr/lib64/libpython2.5.so.1.0\n    #62 0x00007f93ea2447a1 in ?? () from /usr/lib64/libpython2.5.so.1.0\n    #63 0x00007f93ea24499c in PyRun_StringFlags () from /usr/lib64/libpython2.5.so.1.0\n    #64 0x00007f93ea245c10 in PyRun_SimpleStringFlags () from /usr/lib64/libpython2.5.so.1.0\n    #65 0x00007f93ea24f06a in Py_Main () from /usr/lib64/libpython2.5.so.1.0\n    #66 0x00007f93e95b8436 in __libc_start_main () from /lib64/libc.so.6\n    #67 0x00000000004006c9 in _start ()\n\n\n'"
1744,7728634,thouis,thouis,2012-10-19 20:49:44,2012-10-19 20:49:45,2012-10-19 20:49:45,closed,,,7,11 - Bug;component: Documentation;priority: high,https://api.github.com/repos/numpy/numpy/issues/1744,b'Clarify the documentation standard vis-a-vis classes and their attributes (Trac #1146)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/1146 on 2009-06-21 by trac user dgoldsmith, assigned to @pv._\n\nFor example, it is not clear that, but for the optional Attributes and Methods sections, documenting a class is materially equivalent to documenting its constructor.  For other perceived deficiencies, please see:\n\nhttp://mail.scipy.org/pipermail/scipy-dev/2009-June/012198.html\n\nand the thread of which it is a part.\n\n'"
1743,7728633,thouis,thouis,2012-10-19 20:49:41,2012-10-23 02:41:30,2012-10-19 20:49:42,closed,,1.5.1,1,11 - Bug;component: Other;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1743,b'Fail to compile fortran code with recent Intel Fortran compiler for ia64 (Trac #1145)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/1145 on 2009-06-20 by @cournape, assigned to unknown._\n\nRecent fortran compiler verstring:\n\n\n\n    Intel(R) Fortran IA-64 Compiler Professional for applications running on IA-64, Version 11.0    Build 20081105 Package ID: l_cprof_p_11.0.074\n    Copyright (C) 1985-2008 Intel Corporation.  All rights reserved.\n    \n    Intel Fortran 11.0-1558\n\n\n\n\n'"
1742,7728632,thouis,thouis,2012-10-19 20:49:39,2012-10-19 20:49:40,2012-10-19 20:49:40,closed,,,1,11 - Bug;component: numpy.testing;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1742,b'unit test suite test fails after installing scipy and numpy (Trac #1144)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/1144 on 2009-06-20 by trac user iftikhar.khan, assigned to unknown._\n\nHi, Just installed python 2.6 and the 2.6 versions of scipy & numpy onto my Windows machine. Get the following error when running scipy.test() and numpy.test():\n\n>>> numpy.test()\nRunning unit tests for numpy\nTraceback (most recent call last):\n  File ""<stdin>"", line 1, in <module>\n  File ""C:\\Python26\\lib\\site-packages\\numpy\\testing\\nosetester.py"", line 242, in\n test\n    self._show_system_info()\n  File ""C:\\Python26\\lib\\site-packages\\numpy\\testing\\nosetester.py"", line 149, in\n _show_system_info\n    nose = import_nose()\n  File ""C:\\Python26\\lib\\site-packages\\numpy\\testing\\nosetester.py"", line 49, in\nimport_nose\n    raise ImportError(msg)\nImportError: Need nose >= 0.10.0 for tests - see http://somethingaboutorange.com\n/mrl/projects/nose\n\n--------------------------------------------------------------\n>>> scipy.test()\nRunning unit tests for scipy\nTraceback (most recent call last):\n  File ""<stdin>"", line 1, in <module>\n  File ""C:\\Python26\\lib\\site-packages\\numpy\\testing\\nosetester.py"", line 242, in\n test\n    self._show_system_info()\n  File ""C:\\Python26\\lib\\site-packages\\numpy\\testing\\nosetester.py"", line 149, in\n _show_system_info\n    nose = import_nose()\n  File ""C:\\Python26\\lib\\site-packages\\numpy\\testing\\nosetester.py"", line 49, in\nimport_nose\n    raise ImportError(msg)\nImportError: Need nose >= 0.10.0 for tests - see http://somethingaboutorange.com\n/mrl/projects/nose\n>>>\n\nI went to the nosetest website but it is dedicated to just the UNIX OS.\n\nThanks\n\nIftikhar\n\n'"
1739,7728619,thouis,thouis,2012-10-19 20:49:31,2012-10-19 20:49:31,2012-10-19 20:49:31,closed,,1.4.1,2,11 - Bug;component: numpy.lib;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1739,b'lookfor is broken on Python2.6 (Trac #1141)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/1141 on 2009-06-19 by @pv, assigned to unknown._\n\nLookfor on Python2.6 is broken:\n\n\n    >>> import numpy as np\n    >>> np.lookfor(\'binary representation\')\n    Traceback (most recent call last):\n      File ""<stdin>"", line 1, in <module>\n      File ""/home/pauli/koodi/proj/scipy/numpy/dist/linux/lib/python2.6/site-packages/numpy-1.4.0.dev7066.420e060cb4a1975bf5ccb6e0b56bc3750159c4a6-py2.6-linux-i686.egg/numpy/lib/utils.py"", line 574, in lookfor\n        cache = _lookfor_generate_cache(module, import_modules, regenerate)\n      File ""/home/pauli/koodi/proj/scipy/numpy/dist/linux/lib/python2.6/site-packages/numpy-1.4.0.dev7066.420e060cb4a1975bf5ccb6e0b56bc3750159c4a6-py2.6-linux-i686.egg/numpy/lib/utils.py"", line 724, in _lookfor_generate_cache\n        for n, v in inspect.getmembers(item):\n      File ""/usr/lib/python2.6/inspect.py"", line 256, in getmembers\n        value = getattr(object, key)\n    AttributeError: __abstractmethods__\n\n'"
1738,7728617,thouis,thouis,2012-10-19 20:49:28,2012-10-19 20:49:29,2012-10-19 20:49:29,closed,,,3,11 - Bug;component: numpy.lib;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1738,b'ndenumerate crash under win32 with python 2.5 (Trac #1140)',"b""_Original ticket http://projects.scipy.org/numpy/ticket/1140 on 2009-06-19 by trac user senyai, assigned to unknown._\n\nHi.\n    I've got a bug. Dunno what to write here :) I've tested it at two PCs.\n\n\n\n    import numpy as np\n    list(np.ndenumerate(np.array([[]])))\n\n\n"""
1736,7728614,thouis,thouis,2012-10-19 20:49:24,2012-10-19 20:49:25,2012-10-19 20:49:25,closed,,1.4.1,4,11 - Bug;component: numpy.lib;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1736,b'mirr does not function correctly (Trac #1138)',"b""_Original ticket http://projects.scipy.org/numpy/ticket/1138 on 2009-06-11 by @jseabold, assigned to unknown._\n\nThe tests happen to be right for the first value given in the tests.  However, in the second test the compare to value is wrong.  Try the second function in either Excel or OpenOffice Calc.  Also compare np.mirr((-5000,1000,2000,3000), .05, .08) to OO calc answer or Excel.  There are two reasons for the discrepancy.  The first value in a MIRR problem is to be considered a sunk cost/or present value at time zero and is not to be discounted or compounded (hence the NET in net present value).  The second is that the current implementation drops the periods that are of the opposite sign in computing the NPV for the numerator and denominator.  However, the values should still be discounted over these periods.\n\nAttached is a patch which works as expected along with correct tests.  The first test is from the OpenFormula document <http://www.oasis-open.org/committees/documents.php?wg_abbrev=office-formula>.  The second test is the one from the existing code.\n\nThis is my first patch, so please let me know if this isn't how I should go about doing this."""
1735,7728613,thouis,thouis,2012-10-19 20:49:21,2012-10-19 20:49:22,2012-10-19 20:49:22,closed,,,4,11 - Bug;component: Other;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1735,b'repr() of numpy floats is locale-sensitive (Trac #1137)',"b""_Original ticket http://projects.scipy.org/numpy/ticket/1137 on 2009-06-10 by @inducer, assigned to unknown._\n\nThe attached script gives this result for me:\n\n3,2999999999999998\n\nNote that there's a comma in there, which probably shouldn't happen."""
1734,7728612,thouis,thouis,2012-10-19 20:49:18,2012-10-23 02:41:29,2012-10-19 20:49:20,closed,,,6,11 - Bug;component: numpy.core;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1734,b'Multiplying Python float to numpy.array of objects works but fails with a numpy.float64 (Trac #1136)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/1136 on 2009-06-10 by @b45ch1, assigned to unknown._\n\nThis is best explained by the following example:\n\n\n\n    class adouble:\n          def __init__(self,x):\n                  self.x = x\n          def __mul__(self,rhs):\n                  if isinstance(rhs,adouble):\n                          return adouble(self.x * rhs.x)\n                  else:\n                          return adouble(self.x * rhs)\n          def __str__(self):\n                  return str(self.x)\n    \n    x = adouble(3.)\n    y = adouble(2.)\n    u = array([adouble(3.), adouble(5.)])\n    v = array([adouble(2.), adouble(7.)])\n    z = array([2.,3.])\n    \n    print \'numpy.__version__=\',numpy.__version__\n    print x * y              # ok\n    print u * v              # ok\n    print u * z              # ok\n    print u * 3.             # ok\n    print u * z[0]           # _NOT_ OK!\n    print u * float64(3.)    # _NOT_ OK!\n\n\n\nOutput:\n\n\n    basti@shlp:~/tmp$ python numpy_float64_issue.py\n    numpy.__version__= 1.4.0.dev7039\n    6.0\n    [6.0 35.0]\n    [6.0 15.0]\n    [9.0 15.0]\n    Traceback (most recent call last):\n     File ""numpy_float64_issue.py"", line 26, in <module>\n       print u * z[0]           # _NOT_ OK!\n    TypeError: unsupported operand type(s) for *: \'numpy.ndarray\' and\n    \'numpy.float64\'\n\n'"
1732,7728610,thouis,thouis,2012-10-19 20:49:14,2012-10-19 20:49:15,2012-10-19 20:49:15,closed,,1.4.1,1,11 - Bug;component: numpy.distutils;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1732,b'distutils barfs when building a library from a .c.src file if add_library does not have depends argument (Trac #1134)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/1134 on 2009-06-09 by @cournape, assigned to @dmcooke._\n\nExample:\n\n\n\n    #!python\n    ...\n    config.add_library(\'yo\', sources=[\'yo.c.src\'])\n    ...\n\n\n\nWill return:\n\n\n\n    Traceback (most recent call last):\n      File ""setup.py"", line 185, in <module>\n        setup_package()\n      File ""setup.py"", line 178, in setup_package\n        configuration=configuration )\n      File ""/usr/media/src/dsp/numpy/numpy-git/numpy/distutils/core.py"", line 184, in setup\n        return old_setup(**new_attr)\n      File ""/usr/lib/python2.5/distutils/core.py"", line 151, in setup\n        dist.run_commands()\n      File ""/usr/lib/python2.5/distutils/dist.py"", line 974, in run_commands\n        self.run_command(cmd)\n      File ""/usr/lib/python2.5/distutils/dist.py"", line 994, in run_command\n        cmd_obj.run()\n      File ""/usr/media/src/dsp/numpy/numpy-git/numpy/distutils/command/install.py"", line 49, in run\n        r = old_install.run(self)\n      File ""/usr/lib/python2.5/distutils/command/install.py"", line 506, in run\n        self.run_command(\'build\')\n      File ""/usr/lib/python2.5/distutils/cmd.py"", line 333, in run_command\n        self.distribution.run_command(command)\n      File ""/usr/lib/python2.5/distutils/dist.py"", line 994, in run_command\n        cmd_obj.run()\n      File ""/usr/media/src/dsp/numpy/numpy-git/numpy/distutils/command/build.py"", line 37, in run\n        old_build.run(self)\n      File ""/usr/lib/python2.5/distutils/command/build.py"", line 113, in run\n        self.run_command(cmd_name)\n      File ""/usr/lib/python2.5/distutils/cmd.py"", line 333, in run_command\n        self.distribution.run_command(command)\n      File ""/usr/lib/python2.5/distutils/dist.py"", line 994, in run_command\n        cmd_obj.run()\n      File ""/usr/media/src/dsp/numpy/numpy-git/numpy/distutils/command/build_src.py"", line 130, in run\n        self.build_sources()\n      File ""/usr/media/src/dsp/numpy/numpy-git/numpy/distutils/command/build_src.py"", line 141, in build_sources\n        self.build_library_sources(*libname_info)\n      File ""/usr/media/src/dsp/numpy/numpy-git/numpy/distutils/command/build_src.py"", line 222, in build_library_sources\n        sources = self.template_sources(sources, (lib_name, build_info))\n      File ""/usr/media/src/dsp/numpy/numpy-git/numpy/distutils/command/build_src.py"", line 353, in template_sources\n        if (self.force or newer_group([source] + depends, target_file)):\n    TypeError: can only concatenate list (not ""NoneType"") to list\n\n'"
1729,7728603,thouis,thouis,2012-10-19 20:49:04,2012-10-19 20:49:05,2012-10-19 20:49:05,closed,,1.4.1,1,11 - Bug;component: numpy.distutils;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1729,b'build_clib command does not alway call build_src when needed (Trac #1131)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/1131 on 2009-06-07 by @cournape, assigned to @dmcooke._\n\nFor example:\n\n\n\n    python setup.py build_clib\n\n\n\nwill fail because the sources for core math lib are not generated.'"
1728,7728600,thouis,thouis,2012-10-19 20:49:02,2012-10-23 02:41:25,2012-10-19 20:49:03,closed,,1.4.1,3,11 - Bug;component: Other;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1728,b'set_string_function reset incomplete (Trac #1130)',"b""_Original ticket http://projects.scipy.org/numpy/ticket/1130 on 2009-06-06 by @rgommers, assigned to unknown._\n\n\n\n    #!rst\n    There seems to be a bug in set_string_function when resetting the formatting function to the default. After doing that the dtype of the array that is printed is the character string, not the numpy type. Example:\n    \n    .. code-block:: python\n    \n      In [1]: a=arange(10, dtype=uint16)\n      \n      In [2]: a\n      Out[2]: array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9], dtype=uint16)\n    \n      In [3]: set_string_function(lambda x: str(x*2))\n    \n      In [4]: a\n      Out[4]: [ 0  2  4  6  8 10 12 14 16 18]\n    \n      In [5]: set_string_function(None)   # reset to default\n    \n      In [6]: a\n      Out[6]: array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9], 'H')\n    \n\n\n\nThe ability to reset the function by using None as argument was introduced in #949."""
1727,7728598,thouis,thouis,2012-10-19 20:48:59,2012-10-19 20:49:01,2012-10-19 20:49:01,closed,,1.4.1,2,11 - Bug;component: numpy.ma;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1727,"b""F_CONTIGUOUS masked arrays don't pickle correctly (Trac #1129)""","b'_Original ticket http://projects.scipy.org/numpy/ticket/1129 on 2009-06-06 by trac user reggie, assigned to @pierregm._\n\nIf a multidimensional masked array which isn\'t C_CONTIGUOUS is pickled and then unpickled, the order of the data in the unpickled array is different from that in the original array.  For example:\n\n\n\n    Python 2.5.2 (r252:60911, Jul 31 2008, 17:28:52) \n    [GCC 4.2.3 (Ubuntu 4.2.3-2ubuntu7)] on linux2\n    Type ""help"", ""copyright"", ""credits"" or ""license"" for more information.\n    >>> import cPickle, numpy\n    >>> numpy.__version__\n    \'1.3.0\'\n    >>> a = numpy.ma.arange(10)\n    >>> a.shape = (-1, 2)\n    >>> b = a.T\n    >>> b.flags\n      C_CONTIGUOUS : False\n      F_CONTIGUOUS : True\n      OWNDATA : False\n      WRITEABLE : True\n      ALIGNED : True\n      UPDATEIFCOPY : False\n    >>> b\n    masked_array(data =\n     [[0 2 4 6 8]\n     [1 3 5 7 9]],\n                 mask =\n     False,\n           fill_value = 999999)\n    \n    >>> cPickle.loads(cPickle.dumps(b))\n    masked_array(data =\n     [[0 4 8 3 7]\n     [2 6 1 5 9]],\n                 mask =\n     [[False False False False False]\n     [False False False False False]],\n           fill_value = 999999)\n    \n    >>> \n\n\nI\'ve attached a patch that seems to fix this problem.'"
1726,7728595,thouis,charris,2012-10-19 20:48:56,2014-02-18 18:40:55,2014-02-18 18:40:55,closed,,,5,11 - Bug;component: Other;priority: low,https://api.github.com/repos/numpy/numpy/issues/1726,b'str function on string_ improperly truncates trailing zeroes (Trac #1128)',"b""_Original ticket http://projects.scipy.org/numpy/ticket/1128 on 2009-06-05 by trac user nrook, assigned to unknown._\n\nThe `__str__` method of a `string_` instance will truncate trailing zeroes (the `'\\x00'` character) in the conversion.  For instance, \n\n`str(string_('\\x00')) == ''`\n \nevaluates to true, while \n\n`str(string_('\\x00')) == '\\x00'`\n\nevalutes to false.\n\nHere is a longer example in the interpreter:\n\nhttp://pastebin.com/f70292a3c\n\n(Apologies for the external link, but I could not get Trac to easily write out the whole example without modifying it.)\n\nA similar effect seems to occur with arrays: this expression,\n\n`numpy.array(['ab\\x00\\x00'])[0] == 'ab'`\n\nevaluates to true."""
1724,7728592,thouis,seberg,2012-10-19 20:48:52,2013-04-12 19:50:23,2013-04-12 19:50:23,closed,,,3,11 - Bug;component: numpy.core;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1724,b'numpy.delete does not support boolean index arrays (Trac #1126)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/1126 on 2009-06-04 by @jpaalasm, assigned to unknown._\n\nTo be consistent with the behaviour of array indexing, numpy.delete should support boolean array indexing.\n\n\n\n    In [27]: a = numpy.arange(10)\n    \n    In [28]: less_than_5 = a < 5\n    \n    In [29]: a, less_than_5\n    Out[29]:\n    (array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]),\n     array([ True,  True,  True,  True,  True, False, False, False, False, False], dtype=bool))\n    \n    In [30]: a[less_than_5], a[numpy.where(less_than_5)[0]]\n    Out[30]: (array([0, 1, 2, 3, 4]), array([0, 1, 2, 3, 4]))\n    \n    In [31]: numpy.delete(a, less_than_5), numpy.delete(a, numpy.where(less_than_5)[0])\n    Out[31]: (array([2, 3, 4, 5, 6, 7, 8, 9]), array([5, 6, 7, 8, 9]))\n    \n\n\n\nThe two arrays in Out[31] should be identical as they are also in Out[30].'"
1721,7728586,thouis,charris,2012-10-19 20:48:38,2014-02-13 10:22:02,2013-08-30 15:38:06,closed,,NumPy 2.0,22,11 - Bug;component: numpy.lib;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1721,b'nansum for empty or all nan arrays is not zero (Trac #1123)',"b""_Original ticket http://projects.scipy.org/numpy/ticket/1123 on 2009-06-02 by @josef-pkt, assigned to @charris._\n\nMichale Hearne:\nnumpy.nansum([])\n\nIn my copy of numpy 1.1.1, I get 0.0.  This is what I would expect to see. However, this behavior seems to have changed in 1.3.0, in which I get nan.\n\nKeith Goodman:\n\n\n\n    >> np.nansum(9.0)\n    ---------------------------------------------------------------------------\n    IndexError: 0-d arrays can't be indexed.\n\n\n\nJosef:\n\n\n    >>> np.nansum([np.nan, np.nan])\n    1.#QNAN\n    \n    shouldn't this be zero\n\n\n\nnumpy\\lib\\function_base.py\n\nthis should fix it, \n\n\n\n    def _nanop(op, fill, a, axis=None):\n    \n        y = array(a,subok=True)\n    -    mask = isnan(a)\n    +    mask = asarray(isnan(a))\n    -    if mask.all():\n    -        return np.nan\n    \n        if not issubclass(y.dtype.type, np.integer):\n            y[mask] = fill\n    \n        return op(y, axis=axis)\n    \n\n"""
1720,7728585,thouis,thouis,2012-10-19 20:48:37,2012-10-19 20:48:37,2012-10-19 20:48:37,closed,,,1,11 - Bug;component: numpy.core;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1720,b'Syntax Error: numpy/core/src/multiarray/descriptor.c (Trac #1122)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/1122 on 2009-06-01 by @stsci-sienkiew, assigned to unknown._\n\nnumpy/core/src/multiarray/descriptor.c contains a syntax error.\n\nLine 2107 contains a variable declaration that is not at the beginning of a block.\n\n\n\n        if (PyString_Check(op) || PyUnicode_Check(op)) {\n            PyObject *obj = PyDict_GetItem(self->fields, op);\n    \n            if (obj == NULL) {\n                PyErr_Format(PyExc_KeyError,\n                        ""Field named \\\'%s\\\' not found."",\n                        PyString_AsString(op));\n                return NULL;\n            }\n            PyObject *descr = PyTuple_GET_ITEM(obj, 0);\n            Py_INCREF(descr);\n            retval = descr;\n        }\n\n\n\nsuggest:\n\n\n\n    \n        if (PyString_Check(op) || PyUnicode_Check(op)) {\n            PyObject *obj = PyDict_GetItem(self->fields, op);\n            PyObject *descr;\n    \n            if (obj == NULL) {\n                PyErr_Format(PyExc_KeyError,\n                        ""Field named \\\'%s\\\' not found."",\n                        PyString_AsString(op));\n                return NULL;\n            }\n            descr = PyTuple_GET_ITEM(obj, 0);\n            Py_INCREF(descr);\n            retval = descr;\n        }\n    \n\n\n\nobserved on Solaris 8 and 10 with SUNWspro 6 compiler.\n'"
1719,7728582,thouis,thouis,2012-10-19 20:48:33,2012-10-19 20:48:34,2012-10-19 20:48:34,closed,,1.4.1,2,11 - Bug;component: numpy.core;priority: highest,https://api.github.com/repos/numpy/numpy/issues/1719,b'PyInt_Check(np.int32(1)) is 0 on windows (python 2.6) (Trac #1121)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/1121 on 2009-06-01 by @cournape, assigned to unknown._\n\nFind out why...'"
1718,7728581,thouis,thouis,2012-10-19 20:48:31,2012-10-19 20:48:32,2012-10-19 20:48:32,closed,,1.4.1,2,11 - Bug;component: numpy.core;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1718,b'correlate should conjugate its second argument before multiplying its input (Trac #1120)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/1120 on 2009-06-01 by @cournape, assigned to unknown._\n\ncorrelate(x, y) computes sum(x * y[k:]) for every k, instead of the usual definition of sum(x * conj(y[:k])).'"
1717,7728577,thouis,thouis,2012-10-19 20:48:29,2012-10-23 02:41:24,2012-10-19 20:48:30,closed,,1.5.1,2,11 - Bug;component: numpy.lib;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1717,b'NPZ files are not compressed (Trac #1119)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/1119 on 2009-05-31 by trac user luis@..., assigned to unknown._\n\nNPZ files are not compressed.\n\nYou need to pass compression=ZIP_DEFLATED to the zipfile constructor to get compression.\n\nBy default, you get compression=ZIP_STORED, i.e., no compression.\n\nIf this is the intended behaviour, then the documentation should be fixed.'"
1716,7728576,thouis,thouis,2012-10-19 20:48:26,2012-10-23 02:41:23,2012-10-19 20:48:28,closed,,1.4.1,2,11 - Bug;component: Other;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1716,b'fromfile crashes on empty file (Trac #1118)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/1118 on 2009-05-28 by @cournape, assigned to unknown._\n\n\n\n    #! python\n    import numpy as np\n    \n    f = open(\'yo\', \'w\')\n    f.write(\'\')\n    f.close()\n    \n    a = np.fromfile(open(\'yo\'), sep="" "")\n\n'"
1715,7728575,thouis,thouis,2012-10-19 20:48:24,2012-10-23 02:41:21,2012-10-19 20:48:25,closed,,1.4.1,4,11 - Bug;component: Other;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1715,b'correlate not order dependent (Trac #1117)',"b""_Original ticket http://projects.scipy.org/numpy/ticket/1117 on 2009-05-25 by trac user robochat, assigned to unknown._\n\nCurrently, if v and a have different lengths, the current correlation function will internally swap the inputs so that the output always has the same orientation. \n\nThis is a bug, correlations should be order dependent eg. correlate(a,v) != correlate(v,a) in general (whereas convolutions are symmetric).\n\nSo\n\n>>> import numpy as N\n>>> x = N.array([1,0,0])\n>>> y = N.array([0,0,1])\n\n>>> N.correlate(x,y,'full')\narray([1, 0, 0, 0, 0])\n>>> N.correlate(y,x,'full')\narray([0, 0, 0, 0, 1])\n\nThis works fine. However, if the arrays have different lengths, we get a problem.\n\n>>> y2=N.array([0,0,0,1])\n>>> N.correlate(x,y2,'full')\narray([0, 0, 0, 0, 0, 1])\n>>> N.correlate(y2,x,'full')\narray([0, 0, 0, 0, 0, 1])\n\nscipy.correlate also shows the same problem but ndimage.filters.correlate does not. """
1713,7728571,thouis,thouis,2012-10-19 20:48:19,2012-10-19 20:48:21,2012-10-19 20:48:21,closed,,1.3.0,3,11 - Bug;component: numpy.core;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1713,b'Crash in fromfile reading empty file (Trac #1115)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/1115 on 2009-05-21 by @pv, assigned to unknown._\n\nConsider:\n\n\n    $ touch foo\n    $ python -c \'import numpy as np; np.fromfile(""foo"", sep="" "")\'\n    *** glibc detected *** python: double free or corruption (top): 0x098870b0 ***\n\n\n\nI think `array_fromfile` probably does a call like `realloc(ptr, 0)` which in C89 is equivalent to `{free(ptr); return NULL;}`. Or some similar mess-up.\n'"
1712,7728569,thouis,thouis,2012-10-19 20:48:16,2012-10-23 02:41:17,2012-10-19 20:48:18,closed,,1.6.0,4,11 - Bug;component: numpy.linalg;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1712,b'win-amd64 lapack_lite import fails (Trac #1114)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/1114 on 2009-05-21 by trac user fuzion, assigned to @rgommers._\n\nThe lapack_lite.pyd is there, but it looks about 1MB smaller than the one included in numpy-1.3.0-sse3. I\'m not sure what might be missing since I haven\'t tried to make a dist yet.\n\nHere\'s the error:\n\n    from numpy import array, float32\n  File ""C:\\Python26x64\\lib\\site-packages\\numpy\\__init__.py"", line 130, in <modul\ne>\n    import add_newdocs\n  File ""C:\\Python26x64\\lib\\site-packages\\numpy\\add_newdocs.py"", line 9, in <modu\nle>\n    from lib import add_newdoc\n  File ""C:\\Python26x64\\lib\\site-packages\\numpy\\lib\\__init__.py"", line 13, in <mo\ndule>\n    from polynomial import *\n  File ""C:\\Python26x64\\lib\\site-packages\\numpy\\lib\\polynomial.py"", line 18, in <\nmodule>\n    from numpy.linalg import eigvals, lstsq\n  File ""C:\\Python26x64\\lib\\site-packages\\numpy\\linalg\\__init__.py"", line 47, in\n<module>\n    from linalg import *\n  File ""C:\\Python26x64\\lib\\site-packages\\numpy\\linalg\\linalg.py"", line 22, in <m\nodule>\n    from numpy.linalg import lapack_lite\nImportError: DLL load failed: The specified module could not be found.\n\nAlso, forgive me for the terrible bug report...'"
1710,7728566,thouis,thouis,2012-10-19 20:48:12,2012-10-23 02:41:13,2012-10-19 20:48:14,closed,,,4,11 - Bug;component: Other;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1710,b'More crashes on Windows 64 (Trac #1112)',"b""_Original ticket http://projects.scipy.org/numpy/ticket/1112 on 2009-05-20 by trac user langstephen, assigned to unknown._\n\nSimilar but different from ticket #1682.  1.3.0 compiled on Xeon using Visual Studio 2005 (compiler version 14.00.50727.762). Can import numpy but get a hard crash if we do this:\n\n\n    from numpy import *\n    a=empty(shape=4)\n    print a    # this works\n    print a[0] # crashes\n\n\n\nOr this:\n\n\n    import numpy as np\n    y=np.longdouble(4)\n    print y   # also crashes on any operation on y, not just y**2 as in \n    ticket 1068\n\n\n\nOne note if it helps:\nNumpy 1.3.0 was compiled with one modification to msvccompiler.py in <PYTHON_DIR>/Lib/distutils.  The change made was to embed manifest inside of a DLL. If the manifest is NOT embedded inside of the generated DLL then doing an \xa1\xb0import numpy\xa1\xb1 from Python results in error stating that MSVCR80.dll is not found.  \n\nmsvccompiler (line 297):\n\n\n\n    self.compile_options = [ '/nologo', '/Ox', '/MD', '/W3', '/GS-'   \n    \xa1\xad was modified to include /MT flag to embed manifest:\n    self.compile_options = [ '/nologo', '/Ox', '/MT', '/W3', '/GS-'\n\n\n"""
1709,7728564,thouis,thouis,2012-10-19 20:48:10,2012-10-19 20:48:11,2012-10-19 20:48:11,closed,,1.4.1,4,11 - Bug;component: numpy.core;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1709,b'Fix endianness-detection on ppc64 builds (Trac #1111)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/1111 on 2009-05-20 by @dwf, assigned to unknown._\n\nTrying to build either a fat64 or a 4-way binary of NumPy on Mac OS X is failing in svn r7002 an endianness detection error. This came up on the mailing list ([http://mail.scipy.org/pipermail/scipy-user/2009-May/021066.html thread]) and I encountered it myself. Some #warnings show PPC64 builds are the problem:\n\n\n\n    $ gcc -arch ppc64 -arch x86_64 -DNDEBUG -g -fwrapv -O3 -Wall -Wstrict-prototypes -O3 -Wall -DNDEBUG -g -fwrapv -Wstrict-prototypes -arch x86_64 -arch ppc64 -Inumpy/core/include -Ibuild/src.macosx-10.5-fat64-2.6/numpy/core/include/numpy -Inumpy/core/src -Inumpy/core/src/multiarray -Inumpy/core/src/umath -Inumpy/core/include -I/Library/Frameworks/Python64.framework/Versions/2.6/include/python2.6 -Ibuild/src.macosx-10.5-fat64-2.6/numpy/core/src/multiarray -Ibuild/src.macosx-10.5-fat64-2.6/numpy/core/src/umath -c  build/src.macosx-10.5-fat64-2.6/numpy/core/src/_sortmodule.c\n    In file included from numpy/core/include/numpy/npy_endian.h:22,\n                     from numpy/core/include/numpy/ndarrayobject.h:33,\n                     from numpy/core/include/numpy/noprefix.h:7,\n                     from numpy/core/src/_sortmodule.c.src:29:\n    numpy/core/include/numpy/npy_cpu.h:39:6: warning: #warning ""PPC64! Hooray!""\n    In file included from numpy/core/include/numpy/ndarrayobject.h:33,\n                     from numpy/core/include/numpy/noprefix.h:7,\n                     from numpy/core/src/_sortmodule.c.src:29:\n    numpy/core/include/numpy/npy_endian.h:33:10: error: #error Unknown CPU: can not set endianness\n    In file included from numpy/core/include/numpy/npy_endian.h:22,\n                     from numpy/core/include/numpy/ndarrayobject.h:33,\n                     from numpy/core/include/numpy/noprefix.h:7,\n                     from numpy/core/src/_sortmodule.c.src:29:\n    numpy/core/include/numpy/npy_cpu.h:30:6: warning: #warning ""AMD64! Hooray!""\n    lipo: can\'t figure out the architecture type of: /var/folders/jz/jzMQLnV-GOWCP55tPgPBl++++Tc/-Tmp-//ccjBE91A.out\n\n\n\nI\'ve attached a tiny patch that fixes this, adds PPC64 as one of the architectures detected as big-endian.\n'"
1708,7728563,thouis,thouis,2012-10-19 20:48:06,2012-10-19 20:48:09,2012-10-19 20:48:09,closed,,,10,11 - Bug;component: numpy.core;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1708,b'Error packing Numpy scalars with struct.pack (Trac #1110)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/1110 on 2009-05-19 by trac user bryancatanzaro, assigned to unknown._\n\nHello -\nI\'m using NumPy with PyCUDA.  PyCUDA needs to convert NumPy scalars into C structs, and does so using the standard struct.pack. \nThis seemed to work with earlier versions of NumPy & Python, but with NumPy version 1.3.0 on Python 2.6.2, it causes an error when packing a NumPy scalar into an unsigned struct element.\n\nHere is a code snippet:\n\n\n\n    import numpy\n    import struct\n    struct.pack(\'I\', numpy.uint32(0))\n\n\n\n\nAnd here is the error:\n\n\n    sys:1: DeprecationWarning: struct integer overflow masking is deprecated\n    Traceback (most recent call last):\n      File ""<stdin>"", line 1, in <module>\n    SystemError: Objects/longobject.c:336: bad argument to internal function\n\n\n\nThe pack proceeds correctly if I don\'t pack to an unsigned struct element, e.g.:\n\n\n    struct.pack(\'i\', numpy.uint32(0))\n\n\n\nThanks,\nbryan'"
1707,7728561,thouis,thouis,2012-10-19 20:48:03,2012-10-19 20:48:04,2012-10-19 20:48:04,closed,,1.3.0,2,11 - Bug;component: numpy.core;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1707,b'MultiArrayError does not inherit from Exception (Trac #1109)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/1109 on 2009-05-14 by trac user jguyer, assigned to unknown._\n\nCalling `argmin()` on an empty array throws an error that doesn\'t inherit from `Exception`, such that it\'s not caught in a generic `try` block. [http://docs.python.org/library/exceptions.html#exceptions.Exception Python Library Reference] says ""All user-dened exceptions should also be derived from [`Exception`].""\n\n\n\n    #!python\n    >>> import numpy as np\n    >>> try:\n    ...     np.array([]).argmin()\n    ... except Exception, e:\n    ...     print ""caught:"", e\n    ... \n    Traceback (most recent call last):\n      File ""<stdin>"", line 2, in <module>\n    multiarray.error: attempt to get argmax/argmin of an empty sequence\n\n'"
1706,7728557,thouis,thouis,2012-10-19 20:47:59,2012-10-19 20:48:02,2012-10-19 20:48:02,closed,,1.4.1,13,11 - Bug;component: numpy.core;priority: high,https://api.github.com/repos/numpy/numpy/issues/1706,b'FAIL: Test bug in reduceat with structured arrays copied for speed. (Trac #1108)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/1108 on 2009-05-13 by @stsci-sienkiew, assigned to unknown._\n\n\n\n    ======================================================================\n    FAIL: Test bug in reduceat with structured arrays copied for speed.\n    ----------------------------------------------------------------------\n    Traceback (most recent call last):\n      File ""/usr/stsci/pyssgdev/Python-2.5.1/lib/python2.5/site-packages/nose/case.py"", line 182, in runTest\n        self.test(*self.arg)\n      File ""/usr/stsci/pyssgdev/2.5.1/numpy/core/tests/test_umath.py"", line 664, in test_reduceat\n        assert np.all(h1 == h2)\n    AssertionError\n    \n    ----------------------------------------------------------------------\n    \n\n\nAffects rev 6976 through 6983 (latest I tried), on 64 bit Red Hat Enterprise Linux 4 and 32 bit PowerPC Macintosh.  Does not affect 32 bit Solaris, 32 bit x86 Mac, 32 bit RHEL 3 or 4.\n\n\n'"
1704,7728552,thouis,thouis,2012-10-19 20:47:52,2012-10-19 20:47:53,2012-10-19 20:47:53,closed,,1.3.0,4,11 - Bug;component: numpy.core;priority: low,https://api.github.com/repos/numpy/numpy/issues/1704,b'Wrong exception type raised when getting a non-existent dtype field (Trac #1106)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/1106 on 2009-05-13 by @jpaalasm, assigned to unknown._\n\nA !ValueError is raised when getting a non-existent dtype field. It should be an !IndexError, of course.\n\n\n\n    In [14]: dt = numpy.dtype([(\'f1\', numpy.uint)])\n    \n    In [15]: dt[""f1""]\n    Out[15]: dtype(\'uint32\')\n    \n    In [16]: dt[""f2""]\n    ---------------------------------------------------------------------------\n    ValueError                                Traceback (most recent call last)\n    \n    /home/jpaalasm/<ipython console> in <module>()\n    \n    ValueError: only integers, strings or unicode values allowed for getting fields.\n\n\n'"
1703,7728548,thouis,thouis,2012-10-19 20:47:48,2012-10-19 20:47:51,2012-10-19 20:47:51,closed,,1.4.1,3,11 - Bug;component: numpy.lib;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1703,b'[Ubuntu Jaunty]python-numpy install SyntaxWarning (Trac #1105)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/1105 on 2009-05-12 by trac user jhaitas, assigned to unknown._\n\nThis is reported on Launchpad at: [https://bugs.launchpad.net/ubuntu/+source/python-numpy/+bug/335646 |https://bugs.launchpad.net/ubuntu/+source/python-numpy/+bug/335646]\n\n\nSetting up python-numpy (1:1.2.1-1ubuntu1) ...\n/usr/lib/python2.6/dist-packages/numpy/lib/tests/test_io.py:68: SyntaxWarning: assertion is always true, perhaps remove parentheses?\n  assert(c.readlines(),\n\nInstall seems to be OK.'"
1702,7728545,thouis,thouis,2012-10-19 20:47:47,2012-10-19 20:47:47,2012-10-19 20:47:47,closed,,1.4.1,1,11 - Bug;component: Other;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1702,b'Detect C API forward incompatibility (Trac #1104)',"b""_Original ticket http://projects.scipy.org/numpy/ticket/1104 on 2009-05-10 by @cournape, assigned to unknown._\n\nATM, we only check for ABI compatibility when importing numpy. But if an extension is built against version N, it will generally not run with numpy version M<N (forward compatibility). With 'normal' shared libraries, this problem is easily detected because trying to run against an older library without the features of the new library will cause a link error. With python extensions, no link error will occur.\n\nWe need to compare the C API version at runtime (RUNTIME_C_API), compare it against the actual C API the extension was built against  (BUILTIN_C_API), and barfs if BUILTIN_C_API > RUNTIME_C_API, even if ABI is (backward) compatible. This will cause false alarms, but we can't detect them easily (it would require scanning the extensions sources)."""
1701,7728543,thouis,thouis,2012-10-19 20:47:44,2012-10-19 20:47:46,2012-10-19 20:47:46,closed,,,5,11 - Bug;component: Other;priority: high,https://api.github.com/repos/numpy/numpy/issues/1701,b'f2py problem with .f90 files (Trac #1103)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/1103 on 2009-05-08 by @astrofrog, assigned to unknown._\n\nI am having problems compiling even a basic f90 test provided in the  \ndefault numpy 1.3.0 distribution:\n\nIf I go to numpy/distutils/tests/f2py_f90_ext in the numpy tar.gz  \nfile, and type\n\npython setup.py build\n\nwhat happens is that the *.mod file produced is moved to a directory  \nwhich is not part of the subsequent include path. I found this problem  \nwhen trying to write my own setup.py file, and found it also occurs  \nwith this standard example.\n\nA log of the error is attached.'"
1700,7728541,thouis,thouis,2012-10-19 20:47:42,2012-10-19 20:47:42,2012-10-19 20:47:42,closed,,1.3.0,1,11 - Bug;component: Other;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1700,b'double definition of configuration macros in config.h/numpyconfig.h (Trac #1102)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/1102 on 2009-05-06 by @cournape, assigned to unknown._\n\nWhen running several times python setup.py build without removing the build directory, the configuration macros are appended to the existing config header, resulting in strange warnings or even compilation errors.\n\n'"
1699,7728539,thouis,thouis,2012-10-19 20:47:38,2012-10-19 20:47:40,2012-10-19 20:47:40,closed,,1.5.1,7,11 - Bug;component: numpy.linalg;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1699,b'compilation with gfortran fails (Trac #1101)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/1101 on 2009-05-04 by trac user panov, assigned to unknown._\n\nCompilation of numpy 1.3.0 with gfortran (gcc-4.3.3) fails, it does not add ""-shared"" option on linking:\n\nerror: Command ""/usr/bin/gfortran -Wall build/temp.linux-i686-2.6/numpy/linalg/lapack_litemodule.o build/temp.linux-i686-2.6/numpy/linalg/python_xerbla.o -L/usr/local/lib -L/usr/lib -Lbuild/temp.linux-i686-2.6 -llapack -lf77blas -lcblas -latlas -lpython2.6 -lgfortran -o build/lib.linux-i686-2.6/numpy/linalg/lapack_lite.so"" failed with exit status 1'"
1698,7728536,thouis,thouis,2012-10-19 20:47:37,2012-10-19 20:47:37,2012-10-19 20:47:37,closed,,,1,11 - Bug;component: numpy.distutils;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1698,b'svn_version detection completely forgets about i18n (Trac #1100)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/1100 on 2009-05-02 by trac user beb0s, assigned to @dmcooke._\n\nOn my systen ""svn info"" outputs\n\nRevisione: 6945\n\nsince subversion is correctly internationalized.\nTherefore doing re.compile(\'Revision: ([0-9]+)\') doesn\'t work and the install script keeps failing. All this should be replaced by using some kind of python subversion interface.'"
1697,7728532,thouis,thouis,2012-10-19 20:47:33,2012-10-23 02:41:07,2012-10-19 20:47:35,closed,,1.4.1,6,11 - Bug;component: numpy.lib;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1697,b'vectorize incompatible with python 2.6 (Trac #1099)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/1099 on 2009-04-30 by trac user edgarG, assigned to @charris._\n\nThe message qualifying the TypeError exception raised when calling single argument python built-in functions without any argument has changed in python 2.6 (at least for some of them, e.g. math.cos, math.radians...), from ""xxx takes exactly 1 argument (0 given)"" to ""xxx takes exactly one argument (0 given)"".\n\nThis ruins vectorize\'s determination of the number of arguments required by its argument function, which is based on a regexp match of the previous TypeError message.\n\n(hence, in python 2.6:\nvcos = numpy.vectorize (math.cos)\nlogically raises ValueError, ""failed to determine the number of arguments for <built-in function cos>"")\n\nModifying the regexp to accomodate the ""one"" - and convert it back to 1 - is a quick and dirty workaround: it will remain dangerous to base the feature on the interpretation of the error message text... But I have no better idea to submit!'"
1696,7728531,thouis,charris,2012-10-19 20:47:31,2014-02-20 19:42:09,2014-02-20 19:42:09,closed,,,5,11 - Bug;component: numpy.core;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1696,"b'variance is inaccurate for arrays of identical, large values (Trac #1098)'","b'_Original ticket http://projects.scipy.org/numpy/ticket/1098 on 2009-04-29 by @thouis, assigned to @charris._\n\nVariance calculation is inaccurate for arrays of large, identical values:\n\n>>> from numpy import *\n>>> (ones(100000)*10.0**20).var()\n52756253943791624.0\n\nThere are more accurate algorithms for computing variance.  One example from Welford (1962) is in the attached file.'"
1695,7728530,thouis,thouis,2012-10-19 20:47:28,2012-10-19 20:47:29,2012-10-19 20:47:29,closed,,1.5.1,2,11 - Bug;component: numpy.lib;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1695,b'polydiv should be duck-typing safe (Trac #1097)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/1097 on 2009-04-28 by @pv, assigned to unknown._\n\npolydiv incorrectly casts objects to polynomials:\n\n\n    >>> import numpy as np\n    >>> from sympy.mpmath import mpf\n    >>> p = np.poly1d([mpf(\'1\')])\n    >>> p\n    poly1d([1.0], dtype=object)\n    >>> p / mpf(\'2.0\')\n    Traceback (most recent call last):\n      File ""<stdin>"", line 1, in <module>\n      File "".../numpy/lib/polynomial.py"", line 1007, in __div__\n        return polydiv(self, other)\n      File "".../numpy/lib/polynomial.py"", line 747, in polydiv\n        while NX.allclose(r[0], 0, rtol=1e-14) and (r.shape[-1] > 1):\n      File "".../numpy/core/numeric.py"", line 1588, in allclose\n        xinf = isinf(x)\n    TypeError: function not supported for these types, and can\'t coerce safely to supported types\n\n\nI think it should first cast both its arguments first to ndarrays and treat 0-d arrays as scalars.\n\nSimilar things should be checked also in the other polynomial arithmetic operations.\n'"
1694,7728526,thouis,thouis,2012-10-19 20:47:26,2012-10-19 20:47:27,2012-10-19 20:47:27,closed,,1.4.1,2,11 - Bug;component: numpy.core;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1694,"b'logaddexp(-inf, -inf) should return -inf, not nan (Trac #1096)'","b'_Original ticket http://projects.scipy.org/numpy/ticket/1096 on 2009-04-28 by trac user aswart, assigned to unknown._\n\nlogaddexp(-inf, -inf) should return -inf, not nan\n\nIn [1]: from numpy import logaddexp\n\nIn [2]: logaddexp(-inf, -inf)\nOut[2]: nan\n'"
1693,7728523,thouis,thouis,2012-10-19 20:47:24,2012-10-23 02:41:03,2012-10-19 20:47:25,closed,,1.4.1,4,11 - Bug;component: numpy.lib;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1693,b'polyint does not preserve object arrays (Trac #1095)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/1095 on 2009-04-24 by @pv, assigned to unknown._\n\n`polyint` discards imaginary parts of complex variables:\n\n\n    >>> p = poly1d([1j,2j])\n    >>> p = poly1d([1j,2j,3j,4j])\n    >>> print p.coeffs\n    [ 0.+1.j  0.+2.j  0.+3.j  0.+4.j]\n    >>> print p.integ().coeffs\n    [ 0.]\n\n\n\nIt should retain the input dtype, and also work with object arrays (for example, if one wants to use fractions.Fraction or mpmath.mpf objects to gain precision in the arithmetic).\n'"
1692,7728518,thouis,thouis,2012-10-19 20:47:21,2012-10-23 02:41:01,2012-10-19 20:47:22,closed,,1.6.0,4,11 - Bug;component: numpy.ma;priority: high,https://api.github.com/repos/numpy/numpy/issues/1692,b'masked array autotest fails with bus error (Trac #1094)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/1094 on 2009-04-24 by trac user Gerard, assigned to @charris._\n\nRunning the numpy (version 1.3.0, but also occurs on 1.2.1) autotester fails on masked array test case with a bus error. Used system is Solaris 5.8:\n  uname -a\n  SunOS wsasd529 5.8 Generic_117350-18 sun4u sparc SUNW,Sun-Blade-1500\n\noutput of ""numpy.test(verbose=10)"":\n\n...\nTests how masks are initialized at the creation of Maskedarrays. ... ok\nCheck the use of ndmin ... ok\nMake sure we\'re not losing the original mask w/ ndmin ... ok\nTests creaating a masked array from alist of masked arrays. ... ok\ntest_deepcopy (test_core.TestMaskedArray) ... ok\nTest printing a masked array w/ fancy dtype. ... ok\nTest filled w/ flexible dtype ... Bus error\n\n\nBus error is caused by a misaligned memory write (see output of purify below):\n\n    MAW: Misaligned memory write\n      This is occurring while in:\n            DOUBLE_fastputmask [arraytypes.inc.src:2282]\n                       s_val = *vals;\n                       for (i = 0; i < ni; i++) {\n                           if (mask[i]) {\n            =>                 in[i] = s_val;\n                           }\n                       }\n                   }\n            PyArray_PutMask [multiarraymodule.c:4687]\n                           }\n                       }\n                       else {\n            =>             func(dest, mask->data, ni, values->data, nv);\n                       }\n                   }\n               \n            array_putmask  [multiarraymodule.c:4600]\n                                                    &array, &mask, &values)) {\n                       return NULL;\n                   }\n            =>     return PyArray_PutMask((PyArrayObject *)array, values, mask);\n               }\n               \n               /*NUMPY_API\n            PyCFunction_Call [methodobject.c:77]\n            PyEval_EvalFrameEx [ceval.c:3564]\n            PyEval_EvalFrameEx [ceval.c:3650]\n            PyEval_EvalCodeEx [ceval.c:2831]\n            PyEval_EvalFrameEx [ceval.c:3659]\n            ...\n\nCommenting the execution of the fastputmask in multiarraymodule.c (and thus running the \'slower\' version already implemented there) solves the problem:\n\nmultiarraymodule.c, line 4676 (and further):\n\n        func = self->descr->f->fastputmask;\n        /*if (func == NULL) {*/\n            for (i = 0; i < ni; i++) {\n                tmp = ((Bool *)(mask->data))[i];\n                if (tmp) {\n                    src = values->data + chunk*(i % nv);\n                    memmove(dest + i*chunk, src, chunk);\n                }\n            }\n        /*}\n        else {\n            func(dest, mask->data, ni, values->data, nv);\n        }*/\n\nadded here are the comment blocks such that func is not executed anymore.\n\n\'Minimal\' piece of python code to reproduce:\n\n from numpy.ma.core import *\n\n f = array([(1,1)], dtype=[(\'i\',int),(\'f\',float)])\n\n f.mask = [1,1]\n\n f.filled()\n'"
1690,7728513,thouis,seberg,2012-10-19 20:47:12,2013-12-15 13:37:22,2013-12-15 13:37:22,closed,,,11,11 - Bug;component: Other;priority: lowest,https://api.github.com/repos/numpy/numpy/issues/1690,"b""Can't Import numpy in windows xp 64, python 2.6.2 64 bit (Trac #1092)""","b""_Original ticket http://projects.scipy.org/numpy/ticket/1092 on 2009-04-23 by trac user SevenThunders, assigned to @rgommers._\n\nThe amd64 binary install of numpy fails using the binary install of the amd64  version of python 2.6.2.   Installation occurs without error but an attempt to import numpy crashes python in the cmd.exe window and returns with no effect in IDLE.  By no effect  I mean numpy and it's methods are not visible.\n\nI also compiled numpy using the latest 64 bit SDK from Microsoft (v15),  and this reproduced the same errors.  I don't know if this is the same problem in ticket 1084,  but the behavior is a little different.\n\n\n"""
1688,7728510,thouis,thouis,2012-10-19 20:47:07,2012-10-19 20:47:08,2012-10-19 20:47:08,closed,,1.4.1,2,11 - Bug;component: Other;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1688,b'numscons build broken with new version.py scheme (Trac #1090)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/1090 on 2009-04-22 by @cournape, assigned to @cournape._\n\n'"
1687,7728508,thouis,thouis,2012-10-19 20:47:02,2012-10-19 20:47:06,2012-10-19 20:47:06,closed,,1.5.1,11,11 - Bug;component: numpy.testing;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1687,b'numpy.test does not find all tests (Trac #1089)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/1089 on 2009-04-22 by @cournape, assigned to unknown._\n\nI noticed that nosetests runner runs a couple of more tests compared to numpy.test. Incidentally, most of the undetected tests fail'"
1686,7728507,thouis,thouis,2012-10-19 20:47:01,2012-10-19 20:47:02,2012-10-19 20:47:02,closed,,1.5.1,2,11 - Bug;component: Official binaries;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1686,b'Missing Cython/Swig/... file in binary release delivery (Numpy/doc) (Trac #1088)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/1088 on 2009-04-21 by trac user nroux, assigned to @rgommers._\n\nHi,\n\nIn the latest Numpy deliveries, the binary release does not have any more all what used to be in the ""doc"" folder.\n\nThe issue is that within this doc directory, there are important files required to use numpy with Cython, Pyrex, Swig...\n\nCould you please put back these files when delivering the binary releases ?\n\nThanks,\n\nCheers,\nNicolas.'"
1685,7728503,thouis,thouis,2012-10-19 20:46:55,2012-10-19 20:46:59,2012-10-19 20:46:59,closed,,1.4.1,14,11 - Bug;component: numpy.distutils;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1685,b'Unsupported -arch flag on Darwin (Trac #1087)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/1087 on 2009-04-16 by trac user smaret, assigned to @dmcooke._\n\nNumpy 1.3.0 uses a ""-arch"" flag for the gfortran compiler on Darwin. This flag is only supported by universal-capable compilers, which is not the case for the standard gfortran from gcc 4.x. This breaks the compilation of modules that uses a fortran compiler, such as scipy.\n\nThere is a function (_can_target) in numpy/distutils/fcompiler/gnu.py that supposedly tests if the compiler support the -arch flag, but apparently its is not working:\n\n\n\n    % python -c \'from numpy.f2py.diagnose import run; run()\' | grep -A 10 ""Gnu95FCompiler""\n    Gnu95FCompiler instance properties:\n      archiver        = [\'/sw/bin/gfortran\', \'-cr\']\n      compile_switch  = \'-c\'\n      compiler_f77    = [\'/sw/bin/gfortran\', \'-Wall\', \'-ffixed-form\', \'-fno-\n                        second-underscore\', \'-arch\', \'i686\', \'-fPIC\', \'-O3\', \'-\n                        funroll-loops\']\n      compiler_f90    = [\'/sw/bin/gfortran\', \'-Wall\', \'-fno-second-underscore\',\n                        \'-arch\', \'i686\', \'-fPIC\', \'-O3\', \'-funroll-loops\']\n      compiler_fix    = [\'/sw/bin/gfortran\', \'-Wall\', \'-ffixed-form\', \'-fno-\n                        second-underscore\', \'-Wall\', \'-fno-second-underscore\', \'-\n                        arch\', \'i686\', \'-fPIC\', \'-O3\', \'-funroll-loops\']\n\n\n\n\nI am using gfortran 4.3.3 and Python 2.5.4 installed with Fink on MacOS 10.5.6.\n\n'"
1684,7728502,thouis,thouis,2012-10-19 20:46:53,2012-10-19 20:46:54,2012-10-19 20:46:54,closed,,1.3.0,2,11 - Bug;component: Other;priority: high,https://api.github.com/repos/numpy/numpy/issues/1684,b'Cannot compile numpy > 1.1.1 using Visual Studio.net 2003 (Trac #1086)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/1086 on 2009-04-15 by trac user salimfadhley, assigned to unknown._\n\nWhen compiling numpy 1.3.0 the following compile error was observed using Microsoft Visual Studio. Apparantly this is from the r5610. It\'s a bug that shows up in all Microsoft compilers because they can\'t handle long strings. As a quick workaround, we could break up the long strings in the mtrand.c file into string per line and use line continuations.\n\n\n\n    \n    C:\\Program Files\\Microsoft Visual Studio .NET 2003\\Vc7\\bin\\link.exe /DLL /nologo /INCREMENTAL:NO /LIBPATH\n    :D:\\Python24\\libs /LIBPATH:D:\\Python24\\PCBuild /LIBPATH:build\\temp.win32-2.4 /EXPORT:initlapack_lite buil\n    d\\temp.win32-2.4\\Release\\numpy\\linalg\\lapack_litemodule.obj build\\temp.win32-2.4\\Release\\numpy\\linalg\\pyt\n    hon_xerbla.obj build\\temp.win32-2.4\\Release\\numpy\\linalg\\zlapack_lite.obj build\\temp.win32-2.4\\Release\\nu\n    mpy\\linalg\\dlapack_lite.obj build\\temp.win32-2.4\\Release\\numpy\\linalg\\blas_lite.obj build\\temp.win32-2.4\\\n    Release\\numpy\\linalg\\dlamch.obj build\\temp.win32-2.4\\Release\\numpy\\linalg\\f2c_lite.obj /OUT:numpy\\linalg\\\n    lapack_lite.pyd /IMPLIB:build\\temp.win32-2.4\\Release\\numpy\\linalg\\lapack_lite.lib\n    building \'numpy.random.mtrand\' extension\n    compiling C sources\n    C:\\Program Files\\Microsoft Visual Studio .NET 2003\\Vc7\\bin\\cl.exe /c /nologo /Ox /MD /W3 /GX /DNDEBUG -In\n    umpy\\core\\include -Inumpy\\core\\include/numpy -Inumpy\\core\\src -Inumpy\\core\\include -ID:\\Python24\\include\n    -ID:\\Python24\\PC /Tcnumpy\\random\\mtrand\\mtrand.c /Fobuild\\temp.win32-2.4\\Release\\numpy\\random\\mtrand\\mtra\n    nd.obj\n    mtrand.c\n    numpy\\random\\mtrand\\mtrand.c(2783) : error C2026: string too big, trailing characters truncated\n    numpy\\random\\mtrand\\mtrand.c(3136) : error C2026: string too big, trailing characters truncated\n    numpy\\random\\mtrand\\mtrand.c(3773) : error C2026: string too big, trailing characters truncated\n    numpy\\random\\mtrand\\mtrand.c(3975) : error C2026: string too big, trailing characters truncated\n    numpy\\random\\mtrand\\mtrand.c(4933) : error C2026: string too big, trailing characters truncated\n    numpy\\random\\mtrand\\mtrand.c(5078) : error C2026: string too big, trailing characters truncated\n    numpy\\random\\mtrand\\mtrand.c(5206) : error C2026: string too big, trailing characters truncated\n    numpy\\random\\mtrand\\mtrand.c(5609) : error C2026: string too big, trailing characters truncated\n    numpy\\random\\mtrand\\mtrand.c(5609) : error C2026: string too big, trailing characters truncated\n    numpy\\random\\mtrand\\mtrand.c(5756) : error C2026: string too big, trailing characters truncated\n    numpy\\random\\mtrand\\mtrand.c(5903) : error C2026: string too big, trailing characters truncated\n    numpy\\random\\mtrand\\mtrand.c(5903) : error C2026: string too big, trailing characters truncated\n    numpy\\random\\mtrand\\mtrand.c(6659) : error C2026: string too big, trailing characters truncated\n    numpy\\random\\mtrand\\mtrand.c(7291) : error C2026: string too big, trailing characters truncated\n    numpy\\random\\mtrand\\mtrand.c(7617) : error C2026: string too big, trailing characters truncated\n    numpy\\random\\mtrand\\mtrand.c(7965) : error C2026: string too big, trailing characters truncated\n    numpy\\random\\mtrand\\mtrand.c(8158) : error C2026: string too big, trailing characters truncated\n    error: Command ""C:\\Program Files\\Microsoft Visual Studio .NET 2003\\Vc7\\bin\\cl.exe /c /nologo /Ox /MD /W3\n    /GX /DNDEBUG -Inumpy\\core\\include -Inumpy\\core\\include/numpy -Inumpy\\core\\src -Inumpy\\core\\include -ID:\\P\n    ython24\\include -ID:\\Python24\\PC /Tcnumpy\\random\\mtrand\\mtrand.c /Fobuild\\temp.win32-2.4\\Release\\numpy\\ra\n    ndom\\mtrand\\mtrand.obj"" failed with exit status 2\n    ------------------------------------------------------------------------\n\n\n'"
1682,7728494,thouis,thouis,2012-10-19 20:46:45,2012-10-23 02:40:50,2012-10-19 20:46:45,closed,,,1,11 - Bug;component: Other;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1682,"b""can't import numpy on Vista x64 system (Trac #1084)""","b'_Original ticket http://projects.scipy.org/numpy/ticket/1084 on 2009-04-14 by trac user ntv1534, assigned to unknown._\n\nI recently upgraded my Python to version 2.6, and installed numpy via the sourceforge installer on my Windows Vista x64 laptop. I got the following results:\n\nSyntaxError: invalid syntax\n>>> import numpy\nD:\\Python\\lib\\site-packages\\numpy\\core\\__init__.py:5: Warning: Windows 64 bits s\nupport is experimental, and only available for\ntesting. You are advised not to use it for production.\n\nCRASHES ARE TO BE EXPECTED - PLEASE REPORT THEM TO NUMPY DEVELOPERS\n  import multiarray\nTraceback (most recent call last):\n  File ""<stdin>"", line 1, in <module>\n  File ""D:\\Python\\lib\\site-packages\\numpy\\__init__.py"", line 130, in <module>\n    import add_newdocs\n  File ""D:\\Python\\lib\\site-packages\\numpy\\add_newdocs.py"", line 9, in <module>\n    from lib import add_newdoc\n  File ""D:\\Python\\lib\\site-packages\\numpy\\lib\\__init__.py"", line 13, in <module>\n\n    from polynomial import *\n  File ""D:\\Python\\lib\\site-packages\\numpy\\lib\\polynomial.py"", line 18, in <modul\ne>\n    from numpy.linalg import eigvals, lstsq\n  File ""D:\\Python\\lib\\site-packages\\numpy\\linalg\\__init__.py"", line 47, in <modu\nle>\n    from linalg import *\n  File ""D:\\Python\\lib\\site-packages\\numpy\\linalg\\linalg.py"", line 22, in <module\n>\n    from numpy.linalg import lapack_lite\nImportError: DLL load failed: The specified module could not be found.\n'"
1680,7728490,thouis,thouis,2012-10-19 20:46:39,2012-10-19 20:46:40,2012-10-19 20:46:40,closed,,,3,11 - Bug;component: Documentation;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1680,"b""numpybook doesn't build (Trac #1082)""","b'_Original ticket http://projects.scipy.org/numpy/ticket/1082 on 2009-04-10 by @charris, assigned to @pv._\n\nRunning\n\n$[charris@f9 numpybook]$ lyx --export pdf numpybook.lyx\n...\nLayoutFile.cpp(278): Existing textclass mybook is redefined by /home/charris/Workspace/numpy.git/doc/numpybook/mybook.layout\n\nThis is with LyX 1.6.2 (2009-03-14). Running within lyx produces latex errors when trying to export dvi. The eps extension is also unrecognized. There may be a missing dependency somewhere...\n\nI may be doing something wrong but the directory contains no documentation on making the document.\n\n\n'"
1679,7728487,thouis,thouis,2012-10-19 20:46:34,2012-10-23 02:40:49,2012-10-19 20:46:38,closed,,1.6.0,13,11 - Bug;component: Other;priority: low,https://api.github.com/repos/numpy/numpy/issues/1679,b'Strange behavior of array() in a corner case (Trac #1081)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/1081 on 2009-04-09 by @GaelVaroquaux, assigned to unknown._\n\nIn [1]: from numpy import array\n\nIn [2]: array([array([]), array(0, object)])\n[1]    30002 segmentation fault  ipython\n'"
1678,7728486,thouis,thouis,2012-10-19 20:46:31,2012-10-19 20:46:33,2012-10-19 20:46:33,closed,,1.4.1,4,11 - Bug;component: Other;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1678,b'Bug in creating large arrays (Trac #1080)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/1080 on 2009-04-08 by trac user anusr, assigned to unknown._\n\nIt seems that you can create really large arrays (say Numpy.zeros) if the dimensions are in the power of 2, but otherwise it would give a ValueError ""dimensions too large"" . For example, a = numpy.zeros([1048576, 1048576, 1048576, 1048576]) can be happily created without generating a single error - with a regular 4 GB RAM. 1048576 = 2**20. However, if you try to create an array of a considerably less size, say d = numpy.zeros([102480, 102840]), it will give you the above mentioned error. It\'s probably a problem with 32-bit system, but it\'s a problem. '"
1676,7728484,thouis,thouis,2012-10-19 20:46:25,2012-10-23 02:40:41,2012-10-19 20:46:25,closed,,1.4.1,4,11 - Bug;component: numpy.core;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1676,b'Bus error attempting to create ragged array (Trac #1078)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/1078 on 2009-04-06 by trac user anand, assigned to unknown._\n\nThis has been observed as recently as 1.4.0.dev6728:\n\n\n    In [1]: import numpy as np\n    \n    In [2]: a=np.ones(2)\n    \n    In [3]: b=np.array(3)\n    \n    In [4]: np.array((a,b))\n    Segmentation fault\n\n\n'"
1675,7728482,thouis,thouis,2012-10-19 20:46:22,2013-12-13 18:32:47,2012-10-19 20:46:23,closed,,1.4.1,4,11 - Bug;component: numpy.fft;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1675,b'fftshift incompatible with fft for even n (Trac #1077)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/1077 on 2009-04-03 by trac user alk, assigned to unknown._\n\nIf n is even (for example n = 8, then fft is described, to return the frequencies at: \n\n[0, 1, 2, 3, 4, -3, -2, -1]. \n\nBut fftshift(array([0,1,2,3,4,-3,-2,-1]))\n\nreturns:\n[ 4, -3, -2, -1,  0,  1,  2,  3]\n\nand not:\n\n[-3, -2, -1,  0,  1,  2,  3, 4]'"
1674,7728480,thouis,thouis,2012-10-19 20:46:19,2012-10-19 20:46:20,2012-10-19 20:46:20,closed,,1.4.1,5,11 - Bug;component: numpy.fft;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1674,b'fftfreq incompatible with fft for even n (Trac #1076)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/1076 on 2009-04-03 by trac user alk, assigned to unknown._\n\nIf n is even (for example n = 8, then fft is described, to return the frequencies at:\n\n[0, 1, 2, 3, 4, -3, -2, -1]. \n\nBut fftfreq(8)*8 returns:\n\n[ 0.,  1.,  2.,  3., -4., -3., -2., -1.]'"
1670,7728465,thouis,thouis,2012-10-19 20:46:08,2012-10-19 20:46:09,2012-10-19 20:46:09,closed,,,5,11 - Bug;component: Documentation;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1670,b'Example conventions should be clarified in reference guide (Trac #1072)',"b""_Original ticket http://projects.scipy.org/numpy/ticket/1072 on 2009-03-30 by trac user dlary, assigned to @pv._\n\nWhen you try and follow the example on the page \nhttp://docs.scipy.org/doc/numpy/reference/generated/numpy.fft.fft.html#numpy.fft.fft\nyou get the following error:\n\nNameError: name 'np' is not defined\n"""
1669,7728460,thouis,thouis,2012-10-19 20:46:00,2012-10-23 02:40:36,2012-10-19 20:46:06,closed,,1.6.0,17,11 - Bug;component: numpy.lib;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1669,b'loadtxt fails if the last column contains empty value (Trac #1071)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/1071 on 2009-03-30 by trac user Electrion, assigned to unknown._\n\nHello,\n\nI recently noticed that loadtxt() fails when I try to load a file that contains no value on the last column when it is TAB delimited.\n\nFor example :\n\n\n\n\n    s = StringIO(\'#X\\tY\\tC\\n1.\\t1.\\t1.\\n2.\\t2.\\t\\n\')\n    loadtxt(s)\n    \n\n\n\nwill fail with Exception:\n\n\n\n    ValueError: setting an array element with a sequence.\n\n\n\n\nThe use of dtypes or converters (like {2: lambda s: float(s or \'Nan\')} ) doesn\'t help.\n\nAfter investigation, I noticed that the loadtxt function strip all lines before splitting and then remove the \'\\t\\n\'.\n\nIf think the \'split_line\' subfunction in numpy.io.loadtxt\n\n\n\n        def split_line(line):\n            """"""Chop off comments, strip, and split at delimiter.""""""\n            line = line.split(comments)[0].strip()\n    [...]\n\n\n\n\nshould be replaced by\n\n\n        def split_line(line):\n            """"""Chop off comments, strip, and split at delimiter.""""""\n            line = line.split(comments)[0].strip(\'\\r\\n\')\n    [...]\n\n\n\nto remove any new line character but not the delimiter.\n'"
1668,7728459,thouis,thouis,2012-10-19 20:45:57,2012-10-19 20:45:58,2012-10-19 20:45:58,closed,,1.3.0,3,11 - Bug;component: Documentation;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1668,b'doc/sphinxext/only_directives incompatible w/ Sphinx-0.6.1 (Trac #1070)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/1070 on 2009-03-29 by @pierregm, assigned to @pv._\n\nThe syntax has changed in Sphinx 0.6.1, and ``latexwriter`` is no longer available directly. \n\nSolution # 1 (compatible w/ older versions of Sphinx):\nUse\n\n\n    try:\n        from sphinx.latexwriter import LaTeXTranslator\n    except ImportError:\n        from sphinx.writers.latex import LaTeXTranslator\n\n\n\nSolution # 2 (simplest):\nJust use:\n\n\n    from sphinx.writers.latex import LaTeXTranslator\n\n'"
1667,7728456,thouis,thouis,2012-10-19 20:45:55,2012-10-19 20:45:55,2012-10-19 20:45:55,closed,,1.3.0,1,11 - Bug;component: Other;priority: high,https://api.github.com/repos/numpy/numpy/issues/1667,b'cholesky decomposition not working in win32 1.3.0rc superpack (Trac #1069)',"b""_Original ticket http://projects.scipy.org/numpy/ticket/1069 on 2009-03-29 by trac user chris.flesher, assigned to unknown._\n\nSo I tried using the cholesky decomposition using the following example:\n\n\n\n    from numpy import *\n    A = mat('2,1;3,4')\n    linalg.cholesky(A)\n\n\n\nThis code gives the error that A is not positive semidefinate even though it is. I tried running the same code using numpy 1.0.1 on ubuntu and the code produces the correct answer. This is a pain for me since I am trying to reproduce some MATLAB code in Windows.\n"""
1666,7728453,thouis,thouis,2012-10-19 20:45:52,2012-10-19 20:45:53,2012-10-19 20:45:53,closed,,1.5.1,3,11 - Bug;component: Other;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1666,b'numpy crashes on long double computation on windows for amd64 (Trac #1068)',"b""_Original ticket http://projects.scipy.org/numpy/ticket/1068 on 2009-03-26 by @cournape, assigned to unknown._\n\nSee Bruce Southey report:\n\n\n\n    #!python\n    import numpy as np\n    info = np.finfo(np.longcomplex)\n\n\n\nInfo: the beta1 was built with the binaries from equation.com (gcc 4.4 20090313). I can't reproduce this with my own toolchain (mingw rev 692 + gcc snapshot 4.4 20090320)."""
1665,7728450,thouis,thouis,2012-10-19 20:45:50,2012-10-19 20:45:50,2012-10-19 20:45:50,closed,,1.3.0,2,11 - Bug;component: numpy.distutils;priority: high,https://api.github.com/repos/numpy/numpy/issues/1665,b'gfortran does not get necessary flags for universal builds (Trac #1067)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/1067 on 2009-03-25 by @cournape, assigned to @dmcooke._\n\nReported by Chris Barker.\n\nThe problem is in numpy.distutils: some gfortran versions are not correctly detected as universal'"
1664,7728446,thouis,thouis,2012-10-19 20:45:48,2012-10-19 20:45:49,2012-10-19 20:45:49,closed,,1.6.0,1,11 - Bug;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1664,b'Minor Trac workflow glitches (Trac #1066)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/1066 on 2009-03-24 by @pv, assigned to @stefanv._\n\nThere are currently some workflow glitches in this trac:\n\n- There are both `apply` and `review_positive` states for tickets\n\n- The Severity field is present, and defaults to `blocker`. I think the intention was to disable it altogether.\n\nI can try to look at this eventually, if someone else does not manage to do it first.\n'"
1663,7728445,thouis,thouis,2012-10-19 20:45:46,2012-10-19 20:45:47,2012-10-19 20:45:47,closed,,,2,11 - Bug;component: numpy.core;priority: lowest,https://api.github.com/repos/numpy/numpy/issues/1663,"b'Unusual behavior of numpy.tile -- Invalid issue, please close. (Trac #1065)'","b'_Original ticket http://projects.scipy.org/numpy/ticket/1065 on 2009-03-24 by trac user lawrennd, assigned to unknown._\n\nHi,\n\na = np.array([[1], [2], [3], [4]])\na.shape\n\n(4, 1)\n\nb = np.tile(a, (1, 1, 2))\nb.shape\n\n(1, 4, 2)\n\nI\'m surprised at this behavior, shouldn\'t the shape be (4, 1, 2)? \n\nThis applies in Python 2.4 with numpy 1.2.1\n\nApologies if this is a known ""feature""!\n\n\n\n\n'"
1662,7728443,thouis,thouis,2012-10-19 20:45:44,2012-10-19 20:45:45,2012-10-19 20:45:45,closed,,,4,11 - Bug;component: numpy.lib;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1662,b'numpy.interp bug (Trac #1064)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/1064 on 2009-03-23 by trac user changimeno, assigned to @charris._\n\n`interp(x, xp, fp, left=None, right=None)`\n\nthe ""right""--parameter option does not work properly.\n\nExample:\n\n\n    In [2]: x = arange(4)*2 + 2\n    \n    In [3]: y=x**2\n    In [4]: xx = arange(11)\n    \n    In [5]: x\n    Out[5]: array([2, 4, 6, 8])\n    \n    In [6]: y\n    Out[6]: array([ 4, 16, 36, 64])\n    \n    In [7]: xx\n    Out[7]: array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10])\n    \n    In [14]: numpy.interp(xx,x,y)\n    Out[14]: array([  4.,   4.,   4.,  10.,  16.,  26.,  36.,  50.,  64.,  64.,  64.]) #---->>>> RIGHT!!!!\n    \n    In [15]: numpy.interp(xx,x,y,left=0.)\n    Out[15]: array([  0.,   0.,   4.,  10.,  16.,  26.,  36.,  50.,  64.,  64.,  64.])  #---->>>> RIGHT!!!!\n    \n    In [16]: numpy.interp(xx,x,y,left=0.,right=0.)\n    Out[16]: array([  0.,   0.,   4.,  10.,  16.,  26.,  36.,  50.,  0.,  0.,  0.])  #---->>>> WRONG!!!!\n\n\n\nnumpy.interp set the vales of the interpolated array (yy) for  ""xx[i] >= x[len(x)-1]"" to the given RIGHT value. So, the last GOOD value (xx[i] == x[len(x)-1]) is wrongly set to the RIGHT value instead of the proper value yy[i] = y[len(x)-1].\n\nI edited the file numpy/lib/src/_compiled_base.c and fixed this bug (see attachment). Now\n\n\n    In [19]: numpy.interp(xx,x,y,0.,0.)\n    Out[19]: array([  0.,   0.,   4.,  10.,  16.,  26.,  36.,  50.,  64.,   0.,   0.])  #---->>>> RIGHT!!!!\n\n\nMy only worry is that I modified ""binary_search"" together with ""arr_interp"" and I do not know if this function is called by other routines and whether this modification can alter the results.\n\n\n    diff \n    >     /* sgg */\n    >     else if (dval > dlist [len-1])\n    >       result = len ;\n    >     /* sgg */\n    448c454,455\n    <         else if (indx >= lenxp - 1)\n    ---\n    >       /*sgg        else if (indx >= lenxp - 1) */\n    >         else if (indx > lenxp - 1)\n\n\n\nCheers,\nChan\n'"
1660,7728437,thouis,thouis,2012-10-19 20:45:40,2012-10-19 20:45:41,2012-10-19 20:45:41,closed,,1.4.1,1,11 - Bug;component: Other;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1660,b'np.arange does not fail when input size overflows (Trac #1062)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/1062 on 2009-03-23 by @cournape, assigned to unknown._\n\nReported by M. Brett:\n\n\n\n    import numpy as np\n    np.arange(2**32)\n\n\n\nReturns an empty array (on 32 bits machine).'"
1659,7728434,thouis,thouis,2012-10-19 20:45:38,2012-10-19 20:45:38,2012-10-19 20:45:38,closed,,1.4.1,1,11 - Bug;component: Other;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1659,b'Unhelpful error message for big arrays creation (Trac #1061)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/1061 on 2009-03-23 by @cournape, assigned to unknown._\n\nFrom Matthew Brett:\n\n\n\n    In [13]: np.zeros((n,))\n    ---------------------------------------------------------------------------\n    OverflowError                             Traceback (most recent call last)\n    \n    /home/mb312/tmp/max_speed.py in <module>()\n    ----> 1\n         2\n         3\n         4\n         5\n    \n    OverflowError: long int too large to convert to int\n\n'"
1657,7728430,thouis,charris,2012-10-19 20:45:32,2014-02-21 14:35:44,2014-02-21 14:35:44,closed,,,7,11 - Bug;component: numpy.lib;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1657,b'Invalid value of longdouble finfo tiny & eps on some platforms (Trac #1059)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/1059 on 2009-03-19 by @pv, assigned to unknown._\n\nOn some platforms, `finfo` apparently reports bogus limits for `longdouble`:\n\n  - dual G5 Mac running OS X 10.5.6 and Enthought\'s EPD Python 2.5.2 |EPD Py25 4.1.30101| (r252:60911, Dec 19 2008, 15:28:32): http://permalink.gmane.org/gmane.comp.python.numeric.general/28872\n  - possibly also the FreeBSD 64 buildbot: http://buildbot.scipy.org/builders/FreeBSD_64/builds/874/steps/shell_2/logs/stdio\n\nOn the G5 Mac, the user reported:\n\n\n    >>> import numpy as np\n    >>> info = np.finfo(np.longcomplex)\n    >>> print ""eps:"", info.eps, info.eps.dtype\n    >>> print ""tiny:"", info.tiny, info.tiny.dtype\n    >>> print ""log10:"", np.log10(info.tiny), np.log10(info.tiny/info.eps)\n    eps: 1.3817869701e-76 float128\n    tiny: -1.08420217274e-19 float128\n    log10: nan nan\n\n\nWhich means that both `eps` and `tiny` are bogus. The latter is also negative.\n'"
1656,7728429,thouis,thouis,2012-10-19 20:45:29,2012-10-19 20:45:31,2012-10-19 20:45:31,closed,,1.3.0,7,11 - Bug;component: numpy.core;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1656,"b""fromiter with dtype='b' or 'B' (Trac #1058)""","b""_Original ticket http://projects.scipy.org/numpy/ticket/1058 on 2009-03-19 by trac user russel, assigned to unknown._\n\nAs of SVN from this morning, fromiter cannot create an array whose dtype is a byte type\n\nIn [1]: np.fromiter(range(10), dtype='b')\n---------------------------------------------------------------------------\nMemoryError                               Traceback (most recent call last)\n\n/Users/baxter/<ipython console> in <module>()\n\nMemoryError: cannot allocate array memory\n\npatch and test attached."""
1655,7728427,thouis,thouis,2012-10-19 20:45:27,2012-10-19 20:45:28,2012-10-19 20:45:28,closed,,,2,11 - Bug;component: numpy.numarray;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1655,b'numpy.array inplace exchange duplicates/overwrites elements (Trac #1057)',"b""_Original ticket http://projects.scipy.org/numpy/ticket/1057 on 2009-03-18 by trac user praeteri, assigned to unknown._\n\nsimply check this:\n\n\n\n\n    In [1]: from numpy import array\n    \n    In [2]: a = array([ array([1,1]), array([2,2]), array([3,3]), array([4,4]), array([5,5]) ]) \n    \n    In [3]: a[0], a[1] = a[1], a[0]\n    \n    In [4]: a\n    Out[4]: \n    array([[2, 2],\n           [2, 2],\n           [3, 3],\n           [4, 4],\n           [5, 5]])\n    \n\n\n\n\nThis data format is used e.g. by pylab.load.\nThe inplace exchange e.g. by random.shuffle.\nHence, it is a very common situation...\n\nI don't know if this is the way it should be.\n"""
1654,7728423,thouis,charris,2012-10-19 20:45:21,2015-01-24 11:44:46,2015-01-22 18:56:32,closed,,,22,11 - Bug;component: numpy.core;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1654,b'typedef npy_intp to Py_ssize_t  (cf. PEP353) (Trac #1056)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/1056 on 2009-03-15 by @sturlamolden, assigned to unknown._\n\narrayobject.h contains these typedefs:\n\ntypedef Py_intptr_t npy_intp;\ntypedef Py_uintptr_t npy_uintp;\n\nFrom PEP 353: ""Conceptually, Py_intptr_t and Py_ssize_t are different things: Py_intptr_t needs to be the same size as void*, and Py_ssize_t the same size as size_t. These could differ, e.g. on machines where pointers have segment and offset. On current flat-address space machines, there is no difference, so for all practical purposes, Py_intptr_t would have worked as well.""\n\nThis would thus be preferred, although the difference will not be noticeable on most platforms:\n\ntypedef Py_ssize_t npy_intp;\ntypedef size_t npy_uintp; \n\n\n\n\n\n'"
1650,7728416,thouis,thouis,2012-10-19 20:45:11,2012-10-19 20:45:12,2012-10-19 20:45:12,closed,,,2,11 - Bug;component: numpy.ma;priority: lowest,https://api.github.com/repos/numpy/numpy/issues/1650,b'AttributeError: keys (Trac #1052)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/1052 on 2009-03-13 by trac user Jack, assigned to @pierregm._\n\nI have installed Gnuradio-3.1.3 on RedHat -4.The installation of gnuradio was successful.Even I have got USRP connected and have loaded the firmware.\n     But when I try to run the given examples of ""gr-utils"" for example usrp_fft.py i get the following error:-\n[root@localhost python]# ./usrp_fft.py\nTraceback (most recent call last):\n  File ""./usrp_fft.py"", line 23, in ?\n    from gnuradio import gr, gru\n  File ""/usr/lib/python2.3/site-packages/gnuradio/gru/__init__.py"", line 37, in ?\n    exec ""from gnuradio.gruimpl.%s import *"" % (f,)\n  File ""<string>"", line 1, in ?\n  File ""/usr/lib/python2.3/site-packages/gnuradio/gruimpl/gnuplot_freqz.py"", line 28, in ?\n    import numpy\n  File ""/usr/lib/python2.3/site-packages/numpy/__init__.py"", line 107, in ?\n    import ma\n  File ""/usr/lib/python2.3/site-packages/numpy/ma/__init__.py"", line 14, in ?\n    import core\n  File ""/usr/lib/python2.3/site-packages/numpy/ma/core.py"", line 114, in ?\n    max_filler.update([(k,-numpy.inf) for k in [numpy.float32, numpy.float64]])\nAttributeError: keys\n\nWhat is the reason for such type of error.Can someone guide me through this problem.\n\nThanks.\n'"
1648,7728408,thouis,thouis,2012-10-19 20:45:04,2012-10-19 20:45:04,2012-10-19 20:45:04,closed,,,1,11 - Bug;component: Other;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1648,b'Make array printing consistent with our recent formatting work (Trac #1050)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/1050 on 2009-03-12 by @cournape, assigned to unknown._\n\nExample \n\n\n\n    #!python\n    import numpy as np\n    a = np.array([np.nan])\n    print a\n    print a[0]\n\n\n\nReturns:\n\n\n\n    array([ NaN])\n    nan\n\n'"
1647,7728406,thouis,thouis,2012-10-19 20:45:02,2012-10-19 20:45:03,2012-10-19 20:45:03,closed,,1.3.0,2,11 - Bug;component: Other;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1647,b'Some tests fail with the new behavior of the sign ufunc. (Trac #1049)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/1049 on 2009-03-10 by @charris, assigned to unknown._\n\nSign now returns nan as the sign of nan. This breaks some tests and until we decide on the logical value of nan I will leave them broken.\n\n\nFailing tests are:\n\nFile ""/usr/lib64/python2.5/site-packages/numpy/lib/tests/test_ufunclike.py"", line 25, in test_ufunclike\nFailed example:\n    nx.sign(a)\nExpected:\n    array([ 1., -1.,  0.,  0.,  1., -1.])\nGot:\n    array([  1.,  -1.,  NaN,   0.,   1.,  -1.])\n**********************************************************************\nFile ""/usr/lib64/python2.5/site-packages/numpy/lib/tests/test_ufunclike.py"", line 40, in test_ufunclike\nFailed example:\n    nx.sign(a, y)\nExpected:\n    array([ True,  True, False, False,  True,  True], dtype=bool)\nGot:\n    array([ True,  True,  True, False,  True,  True], dtype=bool)\n**********************************************************************\nFile ""/usr/lib64/python2.5/site-packages/numpy/lib/tests/test_ufunclike.py"", line 43, in test_ufunclike\nFailed example:\n    y\nExpected:\n    array([ True,  True, False, False,  True,  True], dtype=bool)\nGot:\n    array([ True,  True,  True, False,  True,  True], dtype=bool)\n..............................................................................................................................................................................................................................................................................................................................................................................................................................\n'"
1646,7728405,thouis,thouis,2012-10-19 20:44:59,2012-10-19 20:45:00,2012-10-19 20:45:00,closed,,1.3.0,3,11 - Bug;component: numpy.core;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1646,b'numpy build fails on Solaris (Trac #1048)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/1048 on 2009-03-10 by @stsci-sienkiew, assigned to unknown._\n\nnumpy trunk, revision 6604\n\nPython 2.5.1\n\nSolaris 8\n\nSUNWSpro 6.2 C compiler\n\n\n\n    cc -G build/temp.solaris-2.8-sun4u-2.5/numpy/core/src/multiarraymodule.o -Lbuild/temp.solaris-2.8-sun4u-2.5 -lnpymath -lm -o build/lib.solaris-2.8-sun4u-2.5/numpy/core/multiarray.so\n    building \'numpy.core.umath\' extension\n    compiling C sources\n    C compiler: cc -DNDEBUG -O -xcode=pic32\n    \n    compile options: \'-Ibuild/src.solaris-2.8-sun4u-2.5/numpy/core/src -Inumpy/core/include -Ibuild/src.solaris-2.8-sun4u-2.5/numpy/core/include/numpy -Inumpy/core/src -Inumpy/core/include -I/usr/ra/pyssg/Python-2.5.1/include/python2.5 -c\'\n    cc: build/src.solaris-2.8-sun4u-2.5/numpy/core/src/umathmodule.c\n    ""numpy/core/include/numpy/ufuncobject.h"", line 397: warning: statement not reached\n    ""numpy/core/src/umath_loops.inc.src"", line 183: warning: non-constant initializer: op ""SCONV""\n    ""numpy/core/src/umath_loops.inc.src"", line 212: warning: non-constant initializer: op ""SCONV""\n    ""numpy/core/src/umath_loops.inc.src"", line 213: warning: non-constant initializer: op ""SCONV""\n    ""numpy/core/src/umath_ufunc_object.inc"", line 3178: syntax error before or at: double\n    ""numpy/core/src/umath_ufunc_object.inc"", line 3183: undefined symbol: maxpriority\n    ""numpy/core/src/umath_ufunc_object.inc"", line 3239: cannot recover from previous errors\n    cc: acomp failed for build/src.solaris-2.8-sun4u-2.5/numpy/core/src/umathmodule.c\n    ""numpy/core/include/numpy/ufuncobject.h"", line 397: warning: statement not reached\n    ""numpy/core/src/umath_loops.inc.src"", line 183: warning: non-constant initializer: op ""SCONV""\n    ""numpy/core/src/umath_loops.inc.src"", line 212: warning: non-constant initializer: op ""SCONV""\n    ""numpy/core/src/umath_loops.inc.src"", line 213: warning: non-constant initializer: op ""SCONV""\n    ""numpy/core/src/umath_ufunc_object.inc"", line 3178: syntax error before or at: double\n    ""numpy/core/src/umath_ufunc_object.inc"", line 3183: undefined symbol: maxpriority\n    ""numpy/core/src/umath_ufunc_object.inc"", line 3239: cannot recover from previous errors\n    cc: acomp failed for build/src.solaris-2.8-sun4u-2.5/numpy/core/src/umathmodule.c\n    error: Command ""cc -DNDEBUG -O -xcode=pic32 -Ibuild/src.solaris-2.8-sun4u-2.5/numpy/core/src -Inumpy/core/include -Ibuild/src.solaris-2.8-sun4u-2.5/numpy/core/include/numpy -Inumpy/core/src -Inumpy/core/include -I/usr/ra/pyssg/Python-2.5.1/include/python2.5 -c build/src.solaris-2.8-sun4u-2.5/numpy/core/src/umathmodule.c -o build/temp.solaris-2.8-sun4u-2.5/build/src.solaris-2.8-sun4u-2.5/numpy/core/src/umathmodule.o"" failed with exit status 2\n    \n\n\n\n\nAt line 183 of numpy/core/src/umath_loops.inc.src, this is a struct initializer, which can only contain constants.  From the context, it looks like maybe it should say:\n\n\n      cdouble tmp;\n      cdouble out;\n      tmp.real = (double)(in1[0]);\n      tmp.imag = (double)(in1[1]);\n\n\n\n\nAt line 3178 of umath_ufunc_object.inc, a declaration comes after an executable statement.\n'"
1645,7728404,thouis,thouis,2012-10-19 20:44:58,2012-10-19 20:44:58,2012-10-19 20:44:58,closed,,1.3.0,1,11 - Bug;component: Other;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1645,b'build failure @ r6609 (Trac #1047)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/1047 on 2009-03-10 by @cournape, assigned to unknown._\n\nSyntax error in scalartypes.inc'"
1644,7728403,thouis,thouis,2012-10-19 20:44:55,2012-10-19 20:44:56,2012-10-19 20:44:56,closed,,,3,11 - Bug;component: Documentation;priority: low,https://api.github.com/repos/numpy/numpy/issues/1644,b'+SKIP option to doctests is not supported by python 2.4 (Trac #1046)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/1046 on 2009-03-10 by @cournape, assigned to @pv._\n\nSome doctests failures happen on 2.4 because of this.'"
1643,7728400,thouis,thouis,2012-10-19 20:44:53,2012-10-19 20:44:54,2012-10-19 20:44:54,closed,,1.3.0,4,11 - Bug;component: numpy.core;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1643,b'Invalid formatting of inf/nan imaginary part (Trac #1045)',"b""_Original ticket http://projects.scipy.org/numpy/ticket/1045 on 2009-03-09 by @pv, assigned to unknown._\n\nComplex inf/nan are formatted wrong:\n\n\n    >>> import numpy as np\n    >>> np.__version__\n    '1.3.0.dev6603.05139b8de06aa0aa8f2574540876589cbc8820ee'\n    >>> print np.complex128(complex(1, np.inf))\n    (1infj)\n    >>> print repr(np.complex128(complex(1, np.inf)))\n    (1infj)\n    >>> print np.complex128(complex(1, np.nan))\n    (1nanj)\n    >>> print np.complex128(complex(1, -np.nan))\n    (1nanj)\n\n\nSo `inf` and `nan` don't get prefixed by the positive sign.\n\nOrdinary numbers do:\n\n\n    >>> print np.complex128(complex(np.inf, 1))\n    (inf+1j)\n\n"""
1638,7728392,thouis,thouis,2012-10-19 20:44:38,2012-10-19 20:44:40,2012-10-19 20:44:40,closed,,,4,11 - Bug;component: Official binaries;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1638,b'64-bit arrayobject bugs (Trac #1040)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/1040 on 2009-03-05 by trac user jmiller, assigned to @cournape._\n\nThis ticket and patch addresses a number of 64-bit bugs in arrayobject.c:\n\n# PyArray_ToString\n>>> a.tostring()\nTraceback (most recent call last):\n  File ""<stdin>"", line 1, in <module>\nSystemError: Negative size passed to PyString_FromStringAndSize\n\n# PyArray_CopyObject ?\n>>> a = numpy.ones(0x80000000, dtype=\'c\')\n>>> a[:] = ""1""*0x80000000\nTraceback (most recent call last):\n  File ""<stdin>"", line 1, in <module>\nSystemError: error return without exception set\n\n>>> a.astype(\'b1\')\nSegmentation fault (core dumped)\n\nThe patch also fixes a number of error string formatting bugs caused\nby use of %d for a Py_ssize_t sized value.\n'"
1637,7728391,thouis,thouis,2012-10-19 20:44:35,2012-10-19 20:44:37,2012-10-19 20:44:37,closed,,,4,11 - Bug;component: Other;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1637,b'test fails: Test find_duplicates (Trac #1039)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/1039 on 2009-03-05 by @stsci-sienkiew, assigned to unknown._\n\nnumpy 1.3.0.dev6545\npython 2.5.1\nnose 0.10.4\n\nThis test fails on\n\nSolaris 8, sparc, 32 bit\n\nNo failure reported on:\n\nMac OSX 10.4 (tiger), x86 or PPC\n\nRed Hat Enterprise Linux 3 or 4, x86 or x86_64\n\n\n======================================================================\nFAIL: Test find_duplicates\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File ""/usr/stsci/pyssgdev/2.5.1/numpy/testing/decorators.py"", line 169, in knownfailer\n    return f(*args, **kwargs)\n  File ""/usr/ra/pyssg/2.5.1/numpy/lib/tests/test_recfunctions.py"", line 152, in test_find_duplicates\n    assert_equal(test[-1], control)\n  File ""/usr/stsci/pyssgdev/2.5.1/numpy/ma/testutils.py"", line 121, in assert_equal\n    return assert_array_equal(actual, desired, err_msg)\n  File ""/usr/stsci/pyssgdev/2.5.1/numpy/ma/testutils.py"", line 193, in assert_array_equal\n    header=\'Arrays are not equal\')\n  File ""/usr/stsci/pyssgdev/2.5.1/numpy/ma/testutils.py"", line 186, in assert_array_compare\n    verbose=verbose, header=header)\n  File ""/usr/stsci/pyssgdev/2.5.1/numpy/testing/utils.py"", line 295, in assert_array_compare\n    raise AssertionError(msg)\nAssertionError: \nArrays are not equal\n\n(mismatch 100.0%)\n x: array([2, 0])\n y: array([0, 2])\n\n----------------------------------------------------------------------\n'"
1636,7728389,thouis,thouis,2012-10-19 20:44:32,2012-10-19 20:44:34,2012-10-19 20:44:34,closed,,,7,11 - Bug;component: Other;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1636,"b""test failing: test_umath.TestComplexFunctions.test_loss_of_precision(<type 'numpy.complex256'>,) (Trac #1038)""","b'_Original ticket http://projects.scipy.org/numpy/ticket/1038 on 2009-03-05 by @stsci-sienkiew, assigned to unknown._\n\nnumpy 1.3.0.dev6545\npython 2.5.1\nnose 0.10.4\n\nThis test fails on:\nMac OSX 10.4 (tiger), PPC, 32 bit\nSolaris 8, SPARC, 32 bit\n\nThis failure not reported on:\nMac OSX 10.4 (tiger), x86, 32 bit\nRed Hat Enterprise Linux, x86, 32 bit\nRed Hat Enterprise Linux, x86_64, 64 bit\n\n\n\n======================================================================\nFAIL: test_umath.TestComplexFunctions.test_loss_of_precision(<type \'numpy.complex256\'>,)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File ""/usr/stsci/pyssgdev/2.5.1/nose/case.py"", line 182, in runTest\n    self.test(*self.arg)\n  File ""/usr/stsci/pyssgdev/2.5.1/numpy/core/tests/test_umath.py"", line 455, in check_loss_of_precision\n    check(x_series, 2*eps)\n  File ""/usr/stsci/pyssgdev/2.5.1/numpy/core/tests/test_umath.py"", line 437, in check\n    assert np.all(d < rtol), (x[np.argmax(d)], d.max())\nAssertionError: (nan, nan)\n\n----------------------------------------------------------------------\n'"
1635,7728387,thouis,thouis,2012-10-19 20:44:30,2012-10-19 20:44:31,2012-10-19 20:44:31,closed,,,1,11 - Bug;component: numpy.core;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1635,b'Pickling/unpickling empty unicode types does not work (Trac #1037)',"b""_Original ticket http://projects.scipy.org/numpy/ticket/1037 on 2009-03-04 by @FrancescAlted, assigned to @cournape._\n\nThis shows the problem:\n\n\n\n    In [18]: cp = cPickle.dumps(numpy.array([u'']), 0)\n    \n    In [19]: cPickle.loads(cp)\n    ---------------------------------------------------------------------------\n    TypeError                                 Traceback (most recent call last)\n    \n    /home/faltet/PyTables/pytables/PyTablesPro/trunk/<ipython console> in <module>()\n    \n    TypeError: ('data type not understood', <type 'numpy.dtype'>, ('U0', 0, 1))\n\n\n\nHowever, plain strings does work:\n\n\n\n    In [20]: cp = cPickle.dumps(numpy.array(['']), 0)\n    \n    In [21]: cPickle.loads(cp)\n    Out[21]:                  \n    array([''],               \n          dtype='|S1')        \n\n"""
1633,7728381,thouis,thouis,2012-10-19 20:44:19,2012-10-23 02:40:27,2012-10-19 20:44:22,closed,,1.6.0,10,11 - Bug;component: numpy.core;priority: high,https://api.github.com/repos/numpy/numpy/issues/1633,b'Fix up Nan handling for max/amax/argmax/fmac + min/sort equivalent (Trac #1035)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/1035 on 2009-03-03 by @cournape, assigned to @cournape._\n\nThis is a meta issue:\n\nExtensive discussions on the ML:\n\nhttp://mail.scipy.org/pipermail/numpy-discussion/2008-September/037413.html\n\nAlso some other issues:\n\n#1518, #1484, #1307, #1392, '"
1632,7728378,thouis,thouis,2012-10-19 20:44:16,2012-10-19 20:44:18,2012-10-19 20:44:18,closed,,,4,11 - Bug;component: Official binaries;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1632,b'Test new trac setup (Trac #1034)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/1034 on 2009-03-03 by @stefanv, assigned to @cournape._\n\nJust checking the ticket notification system.'"
1631,7728377,thouis,thouis,2012-10-19 20:44:12,2012-10-19 20:44:15,2012-10-19 20:44:15,closed,,1.3.0,8,11 - Bug;component: Other;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1631,"b""build for r6530 on Solaris doesn't reference -lm properly (Trac #1033)""","b'_Original ticket http://projects.scipy.org/numpy/ticket/1033 on 2009-03-02 by trac user gbburkhardt, assigned to unknown._\n\nThe umath.so library references fmodf, et al, resulting in:\n\nImportError: ld.so.1: python: fatal: relocation error: file /opt/gnu/python-2.5.2/lib/python2.5/site-packages/numpy/core/umath.so: symbol fmodf: referenced symbol not found\n\nRecord of build and run of test is attached.'"
1630,7728374,thouis,thouis,2012-10-19 20:44:06,2012-10-19 20:44:11,2012-10-19 20:44:11,closed,,1.6.0,17,11 - Bug;component: Other;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1630,b'Crash on fastputmask on win32 (Trac #1032)',"b""_Original ticket http://projects.scipy.org/numpy/ticket/1032 on 2009-03-02 by @cournape, assigned to @cournape._\n\nThe test suite crashes in PyArray_FastPutMask, since revision r6528. I don't see how an additional check could causes a segfault, so I guess it just show a previously undetected bug."""
1628,7728369,thouis,thouis,2012-10-19 20:44:01,2012-10-19 20:44:01,2012-10-19 20:44:01,closed,,1.3.0,1,11 - Bug;component: Other;priority: highest,https://api.github.com/repos/numpy/numpy/issues/1628,"b""C function PyArray_New seems to ignore the 'strides' argument. (Trac #1030)""","b""_Original ticket http://projects.scipy.org/numpy/ticket/1030 on 2009-02-27 by trac user alexis.roche, assigned to unknown._\n\nI create the following two arrays as follows: \n\nX = np.asarray([[0,1,2],[3,4,5]]).astype('uint8')\nx = X[:, 0] ## x == array([0, 3])\n\nI then pass X to a C routine that attempts to create another view on X[:,0] using: \n\nnpy_intp dim[1] = {2}; \nnpy_intp strides[1] = {3};\nint itemsize = 1;\nPyArrayObject* y = (PyArrayObject*) PyArray_New(&PyArray_Type, 1, dim, type, strides, \n\t\t\t\t\t\t(void*)PyArray_DATA(X), itemsize, NPY_CARRAY, NULL); \n\nWhile I expect y to be equal to x, the result is array([ 0,  1]), which would have been the expected result if I had set the 'strides' argument to 1. I am running numpy version 1.3.0.dev6468.\n\nI have been using PyArray_New for 3 years in similar context with devel versions of numpy, and only caught that weird behavior recently."""
1624,7728359,thouis,thouis,2012-10-19 20:43:54,2012-10-19 20:43:55,2012-10-19 20:43:55,closed,,1.3.0,1,11 - Bug;component: numpy.core;priority: high,https://api.github.com/repos/numpy/numpy/issues/1624,b'ufuncs do not respect ndarray subclasses in some cases (Trac #1026)',"b""_Original ticket http://projects.scipy.org/numpy/ticket/1026 on 2009-02-25 by @ddale, assigned to unknown._\n\nThe following script demonstrates that ufuncs do not respect ndarray subclasses when an iterable like list or tuple is passed to the second argument. I have also seen this behavior with numpy's !MaskedArray. \n\n\n\n    import numpy as np\n    \n    class MyArray(np.ndarray):\n    \n        __array_priority__ = 20\n    \n        def __new__(cls):\n            return np.asarray(1).view(cls).copy()\n    \n        def __array_wrap__(self, obj, context=None):\n            print 'array wrap:', self, obj, context\n            return obj.view(type(self))\n    \n        def __str__(self):\n            return 'MyArray(%s)'%super(MyArray,self).__str__()\n    \n    mine = MyArray()\n    \n    \n    print np.multiply(3,mine) # yields MyArray\n    print np.multiply(mine,3) # yields MyArray\n    print np.multiply([1,2,3],mine) # yields MyArray\n    print np.multiply(mine,[1,2,3]) # yields ndarray\n    print np.multiply(mine,(1,2,3)) # yields ndarray\n    print np.multiply(mine,np.array([1,2,3])) # yields MyArray\n\n"""
1623,7728358,thouis,thouis,2012-10-19 20:43:53,2012-10-19 20:43:53,2012-10-19 20:43:53,closed,,,2,11 - Bug;component: Documentation;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1623,b'Incorrect documentation for put function (Trac #1025)',"b""_Original ticket http://projects.scipy.org/numpy/ticket/1025 on 2009-02-24 by trac user afoglia, assigned to unknown._\n\nThe documentation for the put method is incorrect.  In particular the psuedocode should read\n\nind = array(indices, copy=False)\nvals = array(values, copy=False).astype(a.dtype)\nfor i, v in zip(ind,vals): a.flat[i] = v\n\nIn particular, it's the last line.  The i-th element of the array a is not filled with the i-th element of the values array, but the value that is next in the values array.\n\nIf the documentation were correct as written, then a.put(indices, values)[indices] == values would not be guaranteed (up to nans).\n\nhttp://docs.scipy.org/doc/numpy/reference/generated/numpy.put.html#numpy.put"""
1622,7728357,thouis,thouis,2012-10-19 20:43:51,2012-10-19 20:43:51,2012-10-19 20:43:51,closed,,,1,11 - Bug;component: numpy.lib;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1622,b'Untested changes to numpy.lib.io in r6345 (Trac #1024)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/1024 on 2009-02-23 by @stefanv, assigned to unknown._\n\nhttp://projects.scipy.org/scipy/numpy/changeset/6345'"
1621,7728356,thouis,thouis,2012-10-19 20:43:49,2012-10-19 20:43:49,2012-10-19 20:43:49,closed,,1.3.0,1,11 - Bug;component: Other;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1621,b'Subclassed ndarray fails with ValueError when assigning to a sliced array (Trac #1023)',"b""_Original ticket http://projects.scipy.org/numpy/ticket/1023 on 2009-02-23 by trac user psederberg, assigned to unknown._\n\nHi Folks:\n\nI've been working on a subclass of ndarray that has named dimensions that you can use to slice within a custom __getitem__.  For example, you can do something like this:\n\n` x['time>0'] `\n\nto slice the array where the time dimension is greater than zero.\n\nThis is all working nicely, right up until I try to assign to a slice like this:\n\n` x['time>0'] += 1 `\n\nor this\n\n` x['time>0'] = x['time>0'] + 1 `\n\ngiving me the following error:\n\n` ValueError: field named time>0 not found. `\n\nI'm not sure what is raising this error, so I'm scared it's actually in the interpreter or somewhere deep in the numpy code, but I figured I'd try here first.\n\nAny ideas for what's going on here?  All assignments with standard slices work just fine.  Is there some code in numpy that is checking the contents of __getitem__ and causing it to fail here?  Perhaps something having to do with record arrays?\n\nThanks for any thoughts,\nPer\n\nPS-> I'm running this on NumPy 1.1.0 in Debian Lenny."""
1620,7728354,thouis,thouis,2012-10-19 20:43:47,2012-10-19 20:43:47,2012-10-19 20:43:47,closed,,1.3.0,2,11 - Bug;component: numpy.core;priority: high,https://api.github.com/repos/numpy/numpy/issues/1620,b'numpy segfaults when ufunc is called with ndarray subclass and out=None (Trac #1022)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/1022 on 2009-02-22 by @ddale, assigned to unknown._\n\nI am seeing some really strange behavior when I try to pass an ndarray subclass and out=None to numpy\'s ufuncs. This example will reproduce the problem with svn numpy, the first print statement yields 1 as expected, the second yields  ""<type \'builtin_function_or_method\'>"" and the third yields a segmentation fault. I\'m running this as a script, not with ipython:\n\n\n\n    import numpy as np\n    \n    class MyArray(np.ndarray):\n    \n        __array_priority__ = 20\n    \n        def __new__(cls):\n            return np.asarray(1).view(cls).copy()\n    \n        def __repr__(self):\n            return \'my_array\'\n    \n        __str__ = __repr__\n    \n        def __mul__(self, other):\n            return super(MyArray, self).__mul__(other)\n    \n        def __rmul__(self, other):\n            return super(MyArray, self).__rmul__(other)\n    \n    mine = MyArray()\n    print np.multiply(1, 1, None)\n    x = np.multiply(mine, mine, None)\n    print type(x)\n    print x\n\n'"
1613,7728340,thouis,thouis,2012-10-19 20:43:35,2012-10-23 02:40:20,2012-10-19 20:43:35,closed,,1.3.0,1,11 - Bug;component: Other;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1613,b'Ufunc generates AttributeError on object arrays (Trac #1015)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/1015 on 2009-02-20 by @wesm, assigned to unknown._\n\nThis error is very unintuitive for end-users, arrays formed from SQL query results can frequently end up as object arrays by accident.\n\nIn [15]: arr = np.random.randn(100).astype(object)\n\nIn [16]: np.log(arr)\n---------------------------------------------------------------------------\nAttributeError                            Traceback (most recent call last)\n\nH:\\workspace\\Python\\src\\<ipython console> in <module>()\n\nAttributeError: log\n\nSame AttributeError is raised for other ufuncs'"
1612,7728335,thouis,thouis,2012-10-19 20:43:33,2012-10-23 02:40:19,2012-10-19 20:43:33,closed,,1.3.0,1,11 - Bug;component: Other;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1612,b'Ufunc generates AttributeError on object arrays (Trac #1014)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/1014 on 2009-02-20 by @wesm, assigned to unknown._\n\nThis error is very unintuitive for end-users, arrays formed from SQL query results can frequently end up as object arrays by accident.\n\nIn [15]: arr = np.random.randn(100).astype(object)\n\nIn [16]: np.log(arr)\n---------------------------------------------------------------------------\nAttributeError                            Traceback (most recent call last)\n\nH:\\workspace\\Python\\src\\<ipython console> in <module>()\n\nAttributeError: log\n\nSame AttributeError is raised for other ufuncs'"
1610,7728332,thouis,thouis,2012-10-19 20:43:28,2012-10-19 20:43:30,2012-10-19 20:43:30,closed,,,3,11 - Bug;component: numpy.core;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1610,b'dtype attributes change after an arithmetic operation involving a scalar (Trac #1012)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/1012 on 2009-02-19 by trac user hana, assigned to unknown._\n\nIf you add an integer scalar to an integer array, the resulting array changes the attributes \'num\' and \'char\' of dtype:\n\n>>> from numpy import array\n>>> a = array([1,2])\n>>> b = 0+a\n>>> a.dtype.num\n7\n>>> b.dtype.num\n5\n>>> a.dtype.char\n\'l\'\n>>> b.dtype.char\n\'i\'\n\nThis has an effect on scipy.ndimage functions:\n\n>>> from scipy import ndimage\n>>> ndimage.sum(a)\n3.0\n>>> ndimage.sum(b)\nTraceback (most recent call last):\n  File ""<stdin>"", line 1, in <module>\n  File ""/Library/Frameworks/Python.framework/Versions/2.5/lib/python2.5/site-packages/scipy/ndimage/measurements.py"", line 126, in sum\n    return _nd_image.statistics(input, labels, index, 0)\nRuntimeError: data type not supported\n\nNote that if you do b=a+0 (instead of b=0+a), it works. \n\nWe are running python 2.5, numpy 1.2.1, scipy 0.7.0'"
1609,7728330,thouis,thouis,2012-10-19 20:43:26,2012-10-19 20:43:27,2012-10-19 20:43:27,closed,,1.3.0,1,11 - Bug;component: numpy.core;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1609,"b""Can't test for None in array (Trac #1011)""","b'_Original ticket http://projects.scipy.org/numpy/ticket/1011 on 2009-02-19 by trac user anjiro, assigned to unknown._\n\nTesting for `None` in an array always returns `False`:\n\n\n\n    >>> import numpy as np\n    >>> 5 in np.array([None, 5, 23])\n    True\n    >>> None in np.array([None, 5, 23])\n    False\n\n'"
1607,7728326,thouis,thouis,2012-10-19 20:43:22,2013-04-17 23:57:14,2012-10-19 20:43:23,closed,,1.3.0,1,11 - Bug;component: numpy.lib;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1607,b'strptime and python 2.4 (Trac #1009)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/1009 on 2009-02-19 by @cournape, assigned to unknown._\n\nRecent change in numpy.lib introduced a problem on python 2.4: datetime.datetime.strptime is not available before 2.5.'"
1606,7728323,thouis,thouis,2012-10-19 20:43:19,2012-10-19 20:43:21,2012-10-19 20:43:21,closed,,1.3.0,7,11 - Bug;component: numpy.core;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1606,b'Loss of precision in (complex) arcsinh & arctanh (Trac #1008)',"b""_Original ticket http://projects.scipy.org/numpy/ticket/1008 on 2009-02-15 by @pv, assigned to unknown._\n\nNumpy's complex `arcsinh` and `arctanh` suffer from loss of precision at small arguments:\n\n\n    >>> import numpy as np\n    >>> np.__version__\n    '1.3.0.dev6366'\n    >>> np.arcsinh(1e-50)\n    1e-50\n    >>> np.arcsinh(1e-50+0j)\n    0j\n    >>> np.arctanh(1e-50)\n    1e-50\n    >>> np.arctanh(1e-50+0j)\n    0j\n\n\nHowever, complex `arcsin` and `arctan` are OK:\n\n\n    >>> np.arcsin(1e-50 + 0j)\n    (1e-50-0j)\n    >>> np.arctan(1e-50 + 0j)\n    (1e-50+0j)\n\n\n"""
1605,7728319,thouis,charris,2012-10-19 20:43:17,2014-02-20 00:24:58,2014-02-20 00:24:58,closed,,,2,11 - Bug;component: Documentation;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1605,b'docs: document the generalized ufunc C-API (Trac #1007)',"b""_Original ticket http://projects.scipy.org/numpy/ticket/1007 on 2009-02-12 by @pv, assigned to @pv._\n\nThe generalized ufuncs (see #1485) brought some C-API changes. The numpy reference manual should be updated accordingly. (There's some text under doc/neps/, some parts could perhaps be merged from there)."""
1604,7728317,thouis,thouis,2012-10-19 20:43:15,2012-10-19 20:43:16,2012-10-19 20:43:16,closed,,1.6.0,3,11 - Bug;component: Documentation;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1604,b'docs: document the feature added in r6358 (Trac #1006)',"b""_Original ticket http://projects.scipy.org/numpy/ticket/1006 on 2009-02-12 by @pv, assigned to @pv._\n\nThe field access pattern arr[['field1','field2']] should be documented in the reference guide."""
1603,7728315,thouis,thouis,2012-10-19 20:43:13,2012-10-19 20:43:13,2012-10-19 20:43:13,closed,,1.3.0,3,11 - Bug;component: numpy.core;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1603,b'numpy not working with itertools.chain objects (Trac #1005)',"b""_Original ticket http://projects.scipy.org/numpy/ticket/1005 on 2009-02-11 by trac user rogerbrent, assigned to unknown._\n\nnumpy.array(), numpy.sum(), etc. don't seem to work with itertools.chain objects.\n\ne.g.:\n\nfrom itertools import chain\n\niter = chain(xrange(5))\n\narray(iter)\n\nreturns array(<itertools.chain object at 0x0172C828>, dtype=object).\nlist(iter) would work as expected, returning [0, 1, 2, 3, 4].\n\nHowever if I define my own chain() function then array(iter) works fine.\n\nPython v2.5.4 and numpy v1.2.1\n"""
1602,7728312,thouis,thouis,2012-10-19 20:43:11,2012-10-19 20:43:11,2012-10-19 20:43:11,closed,,1.3.0,1,11 - Bug;component: numpy.core;priority: highest,https://api.github.com/repos/numpy/numpy/issues/1602,b'round vs. numpy.round (Trac #1004)',"b""_Original ticket http://projects.scipy.org/numpy/ticket/1004 on 2009-02-09 by trac user lxkain, assigned to unknown._\n\nI can't believe what I'm seeing! Version 1.2.1\n\n>>> numpy.round(66873 * 0.5)\n33436.0\n>>> round(66873 * 0.5)\n33437.0\n>>> round(66875 * 0.5)\n33438.0\n>>> numpy.round(66875 * 0.5)\n33438.0"""
1600,7728309,thouis,thouis,2012-10-19 20:43:07,2012-10-23 02:40:17,2012-10-19 20:43:08,closed,,,1,11 - Bug;component: numpy.ma;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1600,b'MaskedArray.resize method raises TypeError (Trac #1002)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/1002 on 2009-02-06 by @scottza, assigned to @pierregm._\n\nA TypeError is raised by the MaskedArray.resize() method.\n\n\n\n    Python 2.5.2 (r252:60911, Oct  5 2008, 19:24:49) \n    [GCC 4.3.2] on linux2\n    Type ""help"", ""copyright"", ""credits"" or ""license"" for more information.\n    >>> import numpy as np\n    >>> np.__version__\n    \'1.3.0.dev6344\'\n    >>> x = np.ma.array([0,1,2])\n    >>> x.resize((2,))\n    Traceback (most recent call last):\n      File ""<stdin>"", line 1, in <module>\n      File ""/home/scott/.virtualenvs/scipy-dev/lib/python2.5/site-packages/numpy/ma/core.py"", line 2721, in resize\n        self._data.resize(newshape, refcheck, order)\n    TypeError: an integer is required\n    >>> np.ma.resize(x, (2,))\n    masked_array(data = [0 1],\n                 mask = False,\n           fill_value = 999999)\n    \n    >>> x = np.array([0,1,2])\n    >>> x.resize((2,))\n    >>> x\n    array([0, 1])\n\n\n\nChanging the default value for \'refcheck\' from True to 1 in numpy/ma/core.py doesn\'t resolve the problem. Any fix, should also consider #1438, since the \'order\' keyword to the ndarray.resize() method is broken.'"
1598,7728304,thouis,charris,2012-10-19 20:42:59,2014-02-18 20:58:18,2014-02-18 17:10:22,closed,,,19,11 - Bug;component: Other;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1598,"b'seg fault during ""ptp on MaskedArrays""; Solaris 9, NumPy 1.2.1 (Trac #1000)'","b'_Original ticket http://projects.scipy.org/numpy/ticket/1000 on 2009-02-05 by trac user gbburkhardt, assigned to @cournape._\n\nBuilt NumPy 1.2.1 on a Solaris 9 system, netlib/lapack-3.2, fftw-3.2, UMFPACK-5.2.0, AMD-2.2.0, UFconfig-3.2.0.  Ran unit tests, and program seg fault\'d in the ""ptp on MaskedArrays"" test.  Log from test, backtrace, some variable queries attached.  \'site.cfg\' file attached.'"
1597,7728303,thouis,thouis,2012-10-19 20:42:56,2012-10-23 02:40:07,2012-10-19 20:42:58,closed,,,3,11 - Bug;component: numpy.distutils;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1597,b'NumPy does not easy install as a dependency (Trac #999)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/999 on 2009-02-05 by trac user mjwakefield, assigned to @dmcooke._\n\nWhen NumPy is listed as a dependency for another package automatic installation of NumPy fails.\neasy_install numpy works successfully\n\nBest match: numpy 1.2.1\nDownloading http://downloads.sourceforge.net/numpy/numpy-1.2.1.tar.gz?modtime=1225265011&big_mirror=0\nProcessing numpy-1.2.1.tar.gz\nRunning numpy-1.2.1/setup.py -q bdist_egg --dist-dir /var/folders/Kg/KgodBp6HFYaMgVoWCkGln+++mNU/-Tmp-/easy_install-p3img4/numpy-1.2.1/egg-dist-tmp-H5FSHT\nRunning from numpy source directory.\nWarning: distutils distribution has been initialized, it may be too late to add a subpackage command\nWarning: distutils distribution has been initialized, it may be too late to add a subpackage fcompiler\nnon-existing path in \'/private/var/folders/Kg/KgodBp6HFYaMgVoWCkGln+++mNU/-Tmp-/easy_install-p3img4/numpy-1.2.1/numpy/distutils\': \'site.cfg\'\nWarning: distutils distribution has been initialized, it may be too late to add a subpackage distutils\nWarning: distutils distribution has been initialized, it may be too late to add a subpackage testing\n/var/folders/Kg/KgodBp6HFYaMgVoWCkGln+++mNU/-Tmp-/easy_install-p3img4/numpy-1.2.1/numpy/distutils/misc_util.py:1343: DeprecationWarning: os.popen4 is deprecated.  Use the subprocess module.\n  sin, sout = os.popen4(\'svnversion\')\nTraceback (most recent call last):\n  File ""/Library/Frameworks/Python.framework/Versions/Current/bin/easy_install"", line 8, in <module>\n    load_entry_point(\'setuptools==0.6c9\', \'console_scripts\', \'easy_install\')()\n  File ""/Library/Frameworks/Python.framework/Versions/2.6/lib/python2.6/site-packages/setuptools-0.6c9-py2.6.egg/setuptools/command/easy_install.py"", line 1671, in main\n  File ""/Library/Frameworks/Python.framework/Versions/2.6/lib/python2.6/site-packages/setuptools-0.6c9-py2.6.egg/setuptools/command/easy_install.py"", line 1659, in with_ei_usage\n  File ""/Library/Frameworks/Python.framework/Versions/2.6/lib/python2.6/site-packages/setuptools-0.6c9-py2.6.egg/setuptools/command/easy_install.py"", line 1675, in <lambda>\n  File ""/Library/Frameworks/Python.framework/Versions/2.6/lib/python2.6/distutils/core.py"", line 152, in setup\n    dist.run_commands()\n  File ""/Library/Frameworks/Python.framework/Versions/2.6/lib/python2.6/distutils/dist.py"", line 975, in run_commands\n    self.run_command(cmd)\n  File ""/Library/Frameworks/Python.framework/Versions/2.6/lib/python2.6/distutils/dist.py"", line 995, in run_command\n    cmd_obj.run()\n  File ""/Library/Frameworks/Python.framework/Versions/2.6/lib/python2.6/site-packages/setuptools-0.6c9-py2.6.egg/setuptools/command/easy_install.py"", line 211, in run\n  File ""/Library/Frameworks/Python.framework/Versions/2.6/lib/python2.6/site-packages/setuptools-0.6c9-py2.6.egg/setuptools/command/easy_install.py"", line 427, in easy_install\n  File ""/Library/Frameworks/Python.framework/Versions/2.6/lib/python2.6/site-packages/setuptools-0.6c9-py2.6.egg/setuptools/command/easy_install.py"", line 478, in install_item\n  File ""/Library/Frameworks/Python.framework/Versions/2.6/lib/python2.6/site-packages/setuptools-0.6c9-py2.6.egg/setuptools/command/easy_install.py"", line 519, in process_distribution\n  File ""/Library/Frameworks/Python.framework/Versions/2.6/lib/python2.6/site-packages/setuptools-0.6c9-py2.6.egg/pkg_resources.py"", line 522, in resolve\n  File ""/Library/Frameworks/Python.framework/Versions/2.6/lib/python2.6/site-packages/setuptools-0.6c9-py2.6.egg/pkg_resources.py"", line 758, in best_match\n  File ""/Library/Frameworks/Python.framework/Versions/2.6/lib/python2.6/site-packages/setuptools-0.6c9-py2.6.egg/pkg_resources.py"", line 770, in obtain\n  File ""/Library/Frameworks/Python.framework/Versions/2.6/lib/python2.6/site-packages/setuptools-0.6c9-py2.6.egg/setuptools/command/easy_install.py"", line 446, in easy_install\n  File ""/Library/Frameworks/Python.framework/Versions/2.6/lib/python2.6/site-packages/setuptools-0.6c9-py2.6.egg/setuptools/command/easy_install.py"", line 476, in install_item\n  File ""/Library/Frameworks/Python.framework/Versions/2.6/lib/python2.6/site-packages/setuptools-0.6c9-py2.6.egg/setuptools/command/easy_install.py"", line 655, in install_eggs\n  File ""/Library/Frameworks/Python.framework/Versions/2.6/lib/python2.6/site-packages/setuptools-0.6c9-py2.6.egg/setuptools/command/easy_install.py"", line 930, in build_and_install\n  File ""/Library/Frameworks/Python.framework/Versions/2.6/lib/python2.6/site-packages/setuptools-0.6c9-py2.6.egg/setuptools/command/easy_install.py"", line 919, in run_setup\n  File ""/Library/Frameworks/Python.framework/Versions/2.6/lib/python2.6/site-packages/setuptools-0.6c9-py2.6.egg/setuptools/sandbox.py"", line 27, in run_setup\n  File ""/Library/Frameworks/Python.framework/Versions/2.6/lib/python2.6/site-packages/setuptools-0.6c9-py2.6.egg/setuptools/sandbox.py"", line 63, in run\n  File ""/Library/Frameworks/Python.framework/Versions/2.6/lib/python2.6/site-packages/setuptools-0.6c9-py2.6.egg/setuptools/sandbox.py"", line 29, in <lambda>\n  File ""setup.py"", line 96, in <module>\n    \n  File ""setup.py"", line 89, in setup_package\n    \n  File ""/var/folders/Kg/KgodBp6HFYaMgVoWCkGln+++mNU/-Tmp-/easy_install-p3img4/numpy-1.2.1/numpy/distutils/core.py"", line 150, in setup\n  File ""setup.py"", line 56, in configuration\n    \n  File ""/var/folders/Kg/KgodBp6HFYaMgVoWCkGln+++mNU/-Tmp-/easy_install-p3img4/numpy-1.2.1/numpy/distutils/misc_util.py"", line 851, in add_subpackage\n  File ""/var/folders/Kg/KgodBp6HFYaMgVoWCkGln+++mNU/-Tmp-/easy_install-p3img4/numpy-1.2.1/numpy/distutils/misc_util.py"", line 834, in get_subpackage\n  File ""/var/folders/Kg/KgodBp6HFYaMgVoWCkGln+++mNU/-Tmp-/easy_install-p3img4/numpy-1.2.1/numpy/distutils/misc_util.py"", line 781, in _get_configuration_from_setup_py\n  File ""numpy/setup.py"", line 8, in configuration\n    import os\n  File ""/var/folders/Kg/KgodBp6HFYaMgVoWCkGln+++mNU/-Tmp-/easy_install-p3img4/numpy-1.2.1/numpy/distutils/misc_util.py"", line 851, in add_subpackage\n  File ""/var/folders/Kg/KgodBp6HFYaMgVoWCkGln+++mNU/-Tmp-/easy_install-p3img4/numpy-1.2.1/numpy/distutils/misc_util.py"", line 834, in get_subpackage\n  File ""/var/folders/Kg/KgodBp6HFYaMgVoWCkGln+++mNU/-Tmp-/easy_install-p3img4/numpy-1.2.1/numpy/distutils/misc_util.py"", line 781, in _get_configuration_from_setup_py\n  File ""/private/var/folders/Kg/KgodBp6HFYaMgVoWCkGln+++mNU/-Tmp-/easy_install-p3img4/numpy-1.2.1/numpy/f2py/setup.py"", line 81, in configuration\n    \n  File ""/var/folders/Kg/KgodBp6HFYaMgVoWCkGln+++mNU/-Tmp-/easy_install-p3img4/numpy-1.2.1/numpy/distutils/misc_util.py"", line 1239, in add_scripts\nAttributeError: \'NoneType\' object has no attribute \'extend\'\n\n'"
1596,7728301,thouis,thouis,2012-10-19 20:42:53,2012-10-19 20:42:54,2012-10-19 20:42:54,closed,,1.3.0,2,11 - Bug;component: Other;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1596,b'make latex failure in Numpy docs (Trac #998)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/998 on 2009-02-04 by @scottza, assigned to unknown._\n\nNumpy PDF documentation fails to build with \'make latex\', but \'make html\' succeeds.\n\nFrom mailing list discussion:\n\nhttp://projects.scipy.org/pipermail/numpy-discussion/2009-January/039917.html\n\n\n\n    > 2009/1/27 Nils Wagner <nwagner@iam.uni-stuttgart.de>:\n    > a make latex in numpy/doc failed with\n    >\n    > ...\n    >\n    > Intersphinx hit: PyObject\n    > http://docs.python.org/dev/c-api/structures.html\n    > writing... Sphinx error:\n    > too many nesting section levels for LaTeX, at heading:\n    > numpy.ma.MaskedArray.__lt__\n    > make: *** [latex] Fehler 1\n    >\n    >\n    > I am using sphinxv0.5.1\n    > BTW, make html works fine here.\n    \n    I see this problem too. It used to work, and I don\'t think I\'ve\n    changed anything on my system.\n    \n    Python 2.5.2 (r252:60911, Oct  5 2008, 19:24:49)\n    [GCC 4.3.2] on linux2\n    Type ""help"", ""copyright"", ""credits"" or ""license"" for more information.\n    >>> import numpy\n    >>> numpy.__version__\n    \'1.3.0.dev6335\'\n    >>> import sphinx\n    >>> sphinx.__version__\n    \'0.5.1\'\n\n'"
1592,7728291,thouis,thouis,2012-10-19 20:42:43,2012-10-19 20:42:44,2012-10-19 20:42:44,closed,,1.3.0,4,11 - Bug;component: numpy.distutils;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1592,b'[PATCH] Support for better Core2 handling in numpy.distutils (Trac #994)',"b""_Original ticket http://projects.scipy.org/numpy/ticket/994 on 2009-02-02 by @FrancescAlted, assigned to @cournape._\n\nI find that the next patch could be desirable in order to have a better handling of the Core2 architecture:\n\n\n\n    --- numpy/distutils/system_info.py      (revision 6337)\n    +++ numpy/distutils/system_info.py      (working copy)\n    @@ -838,7 +838,7 @@\n                 if cpu.is_Itanium():\n                     plt = '64'\n                     #l = 'mkl_ipf'\n    -            elif cpu.is_Xeon():\n    +            elif cpu.is_Xeon() or cpu.is_Core2():\n                     plt = 'em64t'\n                     #l = 'mkl_em64t'\n                 else:\n    \n\n\n\nThanks"""
1591,7728285,thouis,thouis,2012-10-19 20:42:37,2012-10-19 20:42:41,2012-10-19 20:42:41,closed,,NumPy 1.7,18,11 - Bug;component: numpy.distutils;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1591,b'[PATCH] Support for detecting libraries in several directories simultaneously (Trac #993)',"b""_Original ticket http://projects.scipy.org/numpy/ticket/993 on 2009-02-02 by @FrancescAlted, assigned to @rgommers._\n\nI've found a problem with `numpy.distutils` when I want to specify multiple libraries for a !NumPy component that are spread in two or more directories.  For example, for linking against MKL, a `site.cfg` with the next contents:\n\n\n\n    [mkl]\n    library_dirs = /opt/intel/Compiler/11.0/074/mkl/lib/em64t/:/opt/intel/Compiler/11.0/074/lib/intel64\n    include_dirs =  /opt/intel/Compiler/11.0/074/mkl/include/\n    mkl_libs = mkl_gf_lp64, mkl_gnu_thread, mkl_core, iomp5\n\n\n\ngives the next output:\n\n\n\n    mkl_info:\n      libraries mkl_gf_lp64,mkl_gnu_thread,mkl_core,iomp5 not found in /opt/intel/Compiler/11.0/074/mkl/lib/em64t/\n      libraries mkl_gf_lp64,mkl_gnu_thread,mkl_core,iomp5 not found in /opt/intel/Compiler/11.0/074/lib/intel64\n      NOT AVAILABLE\n\n\n\nI've tracked down the problem in that `numpy.distutils` tries to find the complete set of libraries in one single directory, instead in the complete list.\n\nI'm attaching a fix that is able to find the set of required libraries in all the directories specified in `library_dirs` and only in one of them.  With it, the output is:\n\n\n\n    mkl_info:\n      FOUND:\n        libraries = ['mkl_gf_lp64', 'mkl_gnu_thread', 'mkl_core', 'iomp5', 'pthread']\n        library_dirs = ['/opt/intel/Compiler/11.0/074/mkl/lib/em64t/', '/opt/intel/Compiler/11.0/074/lib/intel64']\n        define_macros = [('SCIPY_MKL_H', None)]\n        include_dirs = ['/opt/intel/Compiler/11.0/074/mkl/include/']\n\n\n\nSo, it seems to work well. Moreover, the fix simplifies quite a bit the logic in `system_info.py`.  However, caveat emptor: as I've only tested the MKL section, more testing should be carried out with other libraries than MKL before to apply the patch.\n\nFinally, attention should be payed to the next issue:\n\nIn `atlas_info.calc_info()` method, I've not completely simplified the loop:\n\n\n\n            for d in lib_dirs:\n                atlas = self.check_libs2(d,atlas_libs,[])\n                lapack_atlas = self.check_libs2(d,['lapack_atlas'],[])\n                if atlas is not None:\n                    lib_dirs2 = [d] + self.combine_paths(d,['atlas*','ATLAS*'])\n                    lapack = self.check_libs2(lib_dirs2,lapack_libs,[])\n                    if lapack is not None:\n                        break\n                if atlas:\n                    atlas_1 = atlas\n\n\n\nbecause I'm not sure about how can affect the use of `self.combine_paths()` in the previous loop, but I'd say that it could be rewritten as:\n\n\n\n            atlas = self.check_libs2(lib_dirs,atlas_libs,[])\n            lapack_atlas = self.check_libs2(lib_dirs,['lapack_atlas'],[])\n            if atlas is not None:\n                lib_dirs2 = [lib_dirs] + self.combine_paths(lib_dirs,['atlas*','ATLAS*'])\n                lapack = self.check_libs2(lib_dirs2,lapack_libs,[])\n                atlas_1 = atlas\n    \n\n\n\nSo, if anybody with more knowledge than me can double check the patch, it would be great.\n\nThanks\n"""
1590,7728282,thouis,thouis,2012-10-19 20:42:34,2012-10-23 02:40:05,2012-10-19 20:42:35,closed,,,3,11 - Bug;component: numpy.lib;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1590,b'Make savez able to write ZIP64 files (Trac #992)',"b""_Original ticket http://projects.scipy.org/numpy/ticket/992 on 2009-02-02 by trac user phillies, assigned to unknown._\n\nWhen you try to write a zip file larger than 4 GB with numpy's savez you get an exception saying that you should enable ZIP64 extensions.\nI did not find any way (without altering the numpy code manually and reinstalling numpy) to make this possible. From my point of view, this is a severe usability bug - as I can not use savez anymore. \n\nPlease add a function, e.g. savez64(...) which uses ZIP64 by default or a function enableZip64(bool) which can turn ZIP64 on or off.\n"""
1589,7728280,thouis,thouis,2012-10-19 20:42:31,2012-10-19 20:42:33,2012-10-19 20:42:33,closed,,1.6.0,6,11 - Bug;component: numpy.lib;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1589,b'Make savez able to write ZIP64 files (Trac #991)',"b""_Original ticket http://projects.scipy.org/numpy/ticket/991 on 2009-02-02 by trac user phillies, assigned to @stefanv._\n\nWhen you try to write a zip file larger than 4 GB with numpy's savez you get an exception saying that you should enable ZIP64 extensions.\nI did not find any way (without altering the numpy code manually and reinstalling numpy) to make this possible. From my point of view, this is a severe usability bug - as I can not use savez anymore. \n\nPlease add a function, e.g. savez64(...) which uses ZIP64 by default or a function enableZip64(bool) which can turn ZIP64 on or off.\n"""
1587,7728275,thouis,thouis,2012-10-19 20:42:25,2012-10-19 20:42:26,2012-10-19 20:42:26,closed,,,3,11 - Bug;component: numpy.ma;priority: low,https://api.github.com/repos/numpy/numpy/issues/1587,b'masked_array results differ between inplace and regular operators (Trac #989)',"b""_Original ticket http://projects.scipy.org/numpy/ticket/989 on 2009-01-26 by trac user danielmcdonald, assigned to @pierregm._\n\nThe result of a masked array addition differs between inplace math operators and the regular math operators. The unexpected behavior results in the regular operator, it appears that the 'mask' variable is not being set in the same fashion. Below is interpreter output. NumPy 1.0.3 produces the expected result, NumPy 1.1.1 and NumPy 1.2.1 do not.\n\nThe following output was produced using Python 2.5.2, NumPy 1.2.1 on an OSX 10.5.6 x86 machine:\n\n>>> from numpy import ma, array\n>>> a = ma.array([1,2,3],mask=array([False,False,False]))\n>>> a\nmasked_array(data = [1 2 3],\n     mask = [False False False],\n     fill_value=999999)\n\n>>> a *= array([2,3,4])\n>>> a\nmasked_array(data = [2 6 12],\n     mask = [False False False],\n     fill_value=999999)\n\n>>> a = ma.array([1,2,3],mask=array([False,False,False]))\n>>> a * array([2,3,4])\nmasked_array(data = [ 2  6 12],\n     mask = False,\n     fill_value=999999)"""
1584,7728269,thouis,thouis,2012-10-19 20:42:16,2012-10-19 20:42:18,2012-10-19 20:42:18,closed,,1.3.0,4,11 - Bug;component: numpy.random;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1584,b'Von Mises draws not between -pi and pi [patch] (Trac #986)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/986 on 2009-01-16 by trac user anand, assigned to unknown._\n\nAs the following test shows, Von Mises draws are not currently staying between -pi and pi (at least on my Mac):\n\nfrom numpy import *\nimport numpy as np\nimport pylab as pl\n\nfor mu in arange(-4,5)*pi/2:\n    q=pl.hist((np.random.mtrand.vonmises(mu,1,10000)),50)\n    print mu\n    raw_input()\n\nThe attached patch makes them do so.\n\n\n'"
1583,7728266,thouis,thouis,2012-10-19 20:42:14,2012-10-19 20:42:15,2012-10-19 20:42:15,closed,,1.3.0,3,11 - Bug;component: numpy.distutils;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1583,b'Remove need for site.cfg for installs in standard locations (Trac #985)',"b""_Original ticket http://projects.scipy.org/numpy/ticket/985 on 2009-01-14 by @jarrodmillman, assigned to @jarrodmillman._\n\nBuilding numpy and scipy on the major UNIX-like systems (e.g., Fedora, Ubuntu) with libraries installed via their official packages shouldn't require a site.cfg.  On Fedora, used to require adding the following site.cfg to scipy:\n\n\n\n    [DEFAULT]\n    library_dirs = /usr/lib64\n    include_dirs = /usr/include:/usr/include/suitesparse\n\n"""
1582,7728264,thouis,thouis,2012-10-19 20:42:11,2012-10-19 20:42:12,2012-10-19 20:42:12,closed,,1.6.0,2,11 - Bug;component: numpy.lib;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1582,"b""machar_single and machar_double don't exist anymore (Trac #984)""","b'_Original ticket http://projects.scipy.org/numpy/ticket/984 on 2009-01-14 by @lebedov, assigned to unknown._\n\nThere used to be two MachAr instances defined in numpy that stored \nsingle precision and double precision system parameters, respectively. Although they are still listed in numpy/lib/info.py in numpy 1.2.1, they no longer appear to be defined in numpy/lib/machar.py. They should either be redefined, or removed from numpy/lib/info.py.'"
1581,7728263,thouis,thouis,2012-10-19 20:42:09,2012-10-19 20:42:09,2012-10-19 20:42:09,closed,,1.3.0,1,11 - Bug;component: Other;priority: high,https://api.github.com/repos/numpy/numpy/issues/1581,b'Cannot build numpy from svn (Trac #983)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/983 on 2009-01-09 by @nilswagner01, assigned to @jarrodmillman._\n\n\n\n\n    python setup.py install --prefix=$HOME/local\n    Running from numpy source directory.                                        \n    Traceback (most recent call last):                                          \n      File ""setup.py"", line 96, in <module>                                     \n        setup_package()                                                         \n      File ""setup.py"", line 68, in setup_package                                \n        from numpy.distutils.core import setup                                  \n      File ""/home/nwagner/svn/numpy/numpy/distutils/core.py"", line 25, in <module>\n        from numpy.distutils.command import config, config_compiler, \\            \n      File ""/home/nwagner/svn/numpy/numpy/distutils/command/build_ext.py"", line 16, in <module>\n        from numpy.distutils.system_info import combine_paths                                  \n      File ""/home/nwagner/svn/numpy/numpy/distutils/system_info.py"", line 185, in <module>     \n        \'/opt/local/lib\',\'/sw/lib\'], platform_bits)                                            \n      File ""/home/nwagner/svn/numpy/numpy/distutils/system_info.py"", line 170, in libpaths     \n        out.extend([p+bits, p])                                                                \n    TypeError: cannot concatenate \'str\' and \'int\' objects\n\n\n'"
1580,7728261,thouis,thouis,2012-10-19 20:42:06,2012-10-19 20:42:07,2012-10-19 20:42:07,closed,,1.6.0,5,11 - Bug;component: numpy.core;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1580,b'Problem accessing data attribute of ndarray object created with certain sizes (Trac #982)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/982 on 2009-01-09 by trac user jtaylor2, assigned to unknown._\n\nWhen creating a ndarray object on a 64 bit machine where the number of bytes of data in the array is described by the following rule:\n\n(size & 0x80000000) != 0 AND (size & 0xFFFFFFFF) != 0xFFFFFFFF\n\nAccessing the data attribute (the data buffer) of the ndarray object results in a ValueError exception.\n\nNote the following examples:\n\n\n\n    \n    thor> python\n    Python 2.5.1 (r251:54863, Jan 16 2008, 16:16:13)\n    [GCC 3.4.6 20060404 (Red Hat 3.4.6-9)] on linux2\n    Type ""help"", ""copyright"", ""credits"" or ""license"" for more information.\n    >>> import numpy\n    >>> numpy.__version__\n    \'1.3.0.dev6306\'\n    >>> a=numpy.zeros(0x7FFFFFFF,dtype=\'b1\')\n    >>> a.data\n    <read-write buffer for 0xa054a0, size 2147483647, offset 0 at 0x2a99e13e70>\n    >>> a=numpy.zeros(0x80000000,dtype=\'b1\')\n    >>> a.data\n    Traceback (most recent call last):\n      File ""<stdin>"", line 1, in <module>\n    ValueError: size must be zero or positive\n    >>> a=numpy.zeros(0xFFFFFFFE,dtype=\'b1\')\n    >>> a.data\n    Traceback (most recent call last):\n      File ""<stdin>"", line 1, in <module>\n    ValueError: size must be zero or positive\n    >>> a=numpy.zeros(0xFFFFFFFF,dtype=\'b1\')\n    >>> a.data\n    <read-write buffer for 0xa2e410, size -1, offset 0 at 0x2a99e13e30>\n    >>> a=numpy.zeros(0x180000000,dtype=\'b1\')\n    >>> a.data\n    Traceback (most recent call last):\n      File ""<stdin>"", line 1, in <module>\n    ValueError: size must be zero or positive\n    >>> a=numpy.zeros(0x180000001,dtype=\'b1\')\n    >>> a.data\n    Traceback (most recent call last):\n      File ""<stdin>"", line 1, in <module>\n    ValueError: size must be zero or positive\n    >>> a=numpy.zeros(0x1FFFFFFFF,dtype=\'b1\')\n    >>> a.data\n    <read-write buffer for 0xa2e590, size -1, offset 0 at 0x2a99e13e70>\n    \n\n\n '"
1579,7728257,thouis,thouis,2012-10-19 20:42:02,2012-10-19 20:42:03,2012-10-19 20:42:03,closed,,1.3.0,1,11 - Bug;component: numpy.core;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1579,b'problem with locales (Trac #981)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/981 on 2009-01-08 by @chanley, assigned to unknown._\n\nSeen in latest version of numpy svn on multiple platforms.\n\n\n\n    >>> import numpy as np\n    >>> import locale\n    >>> locale.format_string(""%f"",np.double(1.2))\n    Traceback (most recent call last):\n     File ""<stdin>"", line 1, in <module>\n     File ""/usr/stsci/pyssgdev/Python-2.5.1/lib/python2.5/locale.py"", line 188, in format_string\n       val[key] = format(perc.group(), val[key], grouping)\n    TypeError: \'numpy.float64\' object does not support item assignment\n    >>>\n\n\n\n'"
1578,7728255,thouis,charris,2012-10-19 20:42:00,2014-04-06 00:34:43,2014-02-18 16:41:21,closed,,,4,11 - Bug;component: numpy.core;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1578,"b""NaN's are silenty converted to ints (Trac #980)""","b'_Original ticket http://projects.scipy.org/numpy/ticket/980 on 2009-01-07 by @stefanv, assigned to @cournape._\n\nFrom a mailing list post by Josef:\n\nWhy does converting nan to an integer not throw an exception (as with\ninf), instead numpy silently replaces nan by zero?\n\n\n\n    >>> inti = np.array([0,1,2])\n    >>> inti[1] = np.inf\n    Traceback (most recent call last):\n     File ""<pyshell#34>"", line 1, in ?\n       inti[1] = np.inf\n    OverflowError: cannot convert float infinity to long\n    >>> inti[1] = np.nan\n    >>> inti\n    array([0, 0, 2])\n\n\n'"
1577,7728253,thouis,thouis,2012-10-19 20:41:58,2012-10-23 02:39:56,2012-10-19 20:41:58,closed,,1.3.0,3,11 - Bug;component: numpy.ma;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1577,b'broken arithmetic with masked arrays (Trac #979)',"b""_Original ticket http://projects.scipy.org/numpy/ticket/979 on 2009-01-07 by trac user jguyer, assigned to @pierregm._\n\nI'm getting unexpected broadcasting and raveling of masked values in basic arithmetic. I don't know if this is related to #1424\n\n\n\n    #!python\n    \n    >>> import numpy\n    >>> numpy.__version__\n    '1.3.0.dev6298'\n    >>> A = numpy.ma.array([[1.],\n    ...                     [2.],\n    ...                     [3.]], mask=[[False],\n    ...                                  [True],\n    ...                                  [True]])\n    >>> B = numpy.array([[2., 3.],\n    ...                  [4., 5.],\n    ...                  [6., 7.]])\n    >>> A * B\n    masked_array(data =\n     [[2.0 --]\n     [-- 2.0]\n     [-- --]],\n                 mask =\n     [[False  True]\n     [ True False]\n     [ True  True]],\n           fill_value = 1e+20)\n    >>> A.data * B\n    array([[  2.,   3.],\n           [  8.,  10.],\n           [ 18.,  21.]])\n    >>> (A * B).data\n    array([[ 2.,  3.],\n           [ 2.,  2.],\n           [ 3.,  3.]])\n\n\n\nWith NumPy 1.2, the mask is still broken, but the value is correct\n\n\n    #!python\n    \n    >>> import numpy\n    >>> numpy.__version__\n    '1.2.0'\n    >>> A = numpy.ma.array([[1.],\n    ...                     [2.],\n    ...                     [3.]], mask=[[False],\n    ...                                  [True],\n    ...                                  [True]])\n    >>> B = numpy.array([[2., 3.],\n    ...                  [4., 5.],\n    ...                  [6., 7.]])\n    >>> A * B\n    masked_array(data =\n     [[2.0 --]\n     [-- 10.0]\n     [-- --]],\n          mask =\n     [[False  True]\n     [ True False]\n     [ True  True]],\n          fill_value=1e+20)\n    >>> A.data * B\n    array([[  2.,   3.],\n           [  8.,  10.],\n           [ 18.,  21.]])\n    >>> (A * B).data\n    array([[  2.,   3.],\n           [  8.,  10.],\n           [ 18.,  21.]])\n\n\n\nI thought I'd seen cases where NumPy 1.1 returned both the correct value and mask, but I'm not able to reproduce now. NumPy 1.1 and 1.2 behave the same."""
1576,7728250,thouis,thouis,2012-10-19 20:41:55,2012-10-19 20:41:56,2012-10-19 20:41:56,closed,,1.3.0,3,11 - Bug;component: numpy.core;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1576,b'unit test failures for numpy 1.3.0.dev6294 (Trac #978)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/978 on 2009-01-05 by @chanley, assigned to unknown._\n\nThe following unit test failures are received with numpy 1.3.0.dev6294 with Python 2.5.1.  The test system is an Intel Mac running OS X 10.5.6.  However, the errors can be reproduced on RHE 4 and 4 systems as well.\n\n\n\n    [redcedar:~/dev/devCode] chanley% python\n    Python 2.5.1 (r251:54863, Mar 13 2008, 13:22:51) \n    [GCC 4.0.1 (Apple Computer, Inc. build 5367)] on darwin\n    Type ""help"", ""copyright"", ""credits"" or ""license"" for more information.\n    >>> import numpy;numpy.test()\n    Running unit tests for lib.python.numpy\n    NumPy version 1.3.0.dev6294\n    NumPy is installed in /Users/chanley/dev/site-packages/lib/python/numpy\n    Python version 2.5.1 (r251:54863, Mar 13 2008, 13:22:51) [GCC 4.0.1 (Apple Computer, Inc. build 5367)]\n    nose version 0.10.3\n    .............................................................................................................................................................................................................................................................F..F..F..FFF..................................................................................................................................................................................................K.............................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................S.......................................................................................................................................................................................................................................................................................................................................................................ctypes is not available on this python: skipping the test (import error was: ctypes is not available.)\n    .No distutils available, skipping test.\n    .....\n    ======================================================================\n    FAIL: Check formatting.\n    ----------------------------------------------------------------------\n    Traceback (most recent call last):\n      File ""/Users/chanley/dev/site-packages/lib/python/nose/case.py"", line 182, in runTest\n        self.test(*self.arg)\n      File ""/Users/chanley/dev/site-packages/lib/python/numpy/core/tests/test_print.py"", line 74, in check_complex_type\n        err_msg=\'Failed str formatting for type %s\' % tp)\n      File ""/Users/chanley/dev/site-packages/lib/python/numpy/testing/utils.py"", line 183, in assert_equal\n        raise AssertionError(msg)\n    AssertionError: \n    Items are not equal: Failed str formatting for type <type \'numpy.complex64\'>\n     ACTUAL: \'(1e+10+0j)\'\n     DESIRED: \'1e+10\'\n    \n    ======================================================================\n    FAIL: Check formatting when using print\n    ----------------------------------------------------------------------\n    Traceback (most recent call last):\n      File ""/Users/chanley/dev/site-packages/lib/python/nose/case.py"", line 182, in runTest\n        self.test(*self.arg)\n      File ""/Users/chanley/dev/site-packages/lib/python/numpy/core/tests/test_print.py"", line 108, in check_float_type_print\n        _test_redirected_print(float(x), tp)\n      File ""/Users/chanley/dev/site-packages/lib/python/numpy/core/tests/test_print.py"", line 104, in _test_redirected_print\n        err_msg=\'print failed for type%s\' % tp)\n      File ""/Users/chanley/dev/site-packages/lib/python/numpy/testing/utils.py"", line 183, in assert_equal\n        raise AssertionError(msg)\n    AssertionError: \n    Items are not equal: print failed for type<type \'numpy.float32\'>\n     ACTUAL: \'10000000000.0\\n\'\n     DESIRED: \'1e+10\\n\'\n    \n    ======================================================================\n    FAIL: Check formatting when using print\n    ----------------------------------------------------------------------\n    Traceback (most recent call last):\n      File ""/Users/chanley/dev/site-packages/lib/python/nose/case.py"", line 182, in runTest\n        self.test(*self.arg)\n      File ""/Users/chanley/dev/site-packages/lib/python/numpy/core/tests/test_print.py"", line 115, in check_complex_type_print\n        _test_redirected_print(complex(x), tp)\n      File ""/Users/chanley/dev/site-packages/lib/python/numpy/core/tests/test_print.py"", line 104, in _test_redirected_print\n        err_msg=\'print failed for type%s\' % tp)\n      File ""/Users/chanley/dev/site-packages/lib/python/numpy/testing/utils.py"", line 183, in assert_equal\n        raise AssertionError(msg)\n    AssertionError: \n    Items are not equal: print failed for type<type \'numpy.complex64\'>\n     ACTUAL: \'(10000000000+0j)\\n\'\n     DESIRED: \'(1e+10+0j)\\n\'\n    \n    ======================================================================\n    FAIL: test_print.test_locale_single\n    ----------------------------------------------------------------------\n    Traceback (most recent call last):\n      File ""/Users/chanley/dev/site-packages/lib/python/nose/case.py"", line 182, in runTest\n        self.test(*self.arg)\n      File ""/Users/chanley/dev/site-packages/lib/python/numpy/testing/decorators.py"", line 82, in skipper\n        return f(*args, **kwargs)\n      File ""/Users/chanley/dev/site-packages/lib/python/numpy/core/tests/test_print.py"", line 164, in test_locale_single\n        return _test_locale_independance(np.float32)\n      File ""/Users/chanley/dev/site-packages/lib/python/numpy/core/tests/test_print.py"", line 157, in _test_locale_independance\n        err_msg=\'Failed locale test for type %s\' % tp)\n      File ""/Users/chanley/dev/site-packages/lib/python/numpy/testing/utils.py"", line 183, in assert_equal\n        raise AssertionError(msg)\n    AssertionError: \n    Items are not equal: Failed locale test for type <type \'numpy.float32\'>\n     ACTUAL: \'1,2\'\n     DESIRED: \'1.2\'\n    \n    ======================================================================\n    FAIL: test_print.test_locale_double\n    ----------------------------------------------------------------------\n    Traceback (most recent call last):\n      File ""/Users/chanley/dev/site-packages/lib/python/nose/case.py"", line 182, in runTest\n        self.test(*self.arg)\n      File ""/Users/chanley/dev/site-packages/lib/python/numpy/testing/decorators.py"", line 82, in skipper\n        return f(*args, **kwargs)\n      File ""/Users/chanley/dev/site-packages/lib/python/numpy/core/tests/test_print.py"", line 169, in test_locale_double\n        return _test_locale_independance(np.double)\n      File ""/Users/chanley/dev/site-packages/lib/python/numpy/core/tests/test_print.py"", line 157, in _test_locale_independance\n        err_msg=\'Failed locale test for type %s\' % tp)\n      File ""/Users/chanley/dev/site-packages/lib/python/numpy/testing/utils.py"", line 183, in assert_equal\n        raise AssertionError(msg)\n    AssertionError: \n    Items are not equal: Failed locale test for type <type \'numpy.float64\'>\n     ACTUAL: \'1,2\'\n     DESIRED: \'1.2\'\n    \n    ======================================================================\n    FAIL: test_print.test_locale_longdouble\n    ----------------------------------------------------------------------\n    Traceback (most recent call last):\n      File ""/Users/chanley/dev/site-packages/lib/python/nose/case.py"", line 182, in runTest\n        self.test(*self.arg)\n      File ""/Users/chanley/dev/site-packages/lib/python/numpy/testing/decorators.py"", line 82, in skipper\n        return f(*args, **kwargs)\n      File ""/Users/chanley/dev/site-packages/lib/python/numpy/core/tests/test_print.py"", line 174, in test_locale_longdouble\n        return _test_locale_independance(np.longdouble)\n      File ""/Users/chanley/dev/site-packages/lib/python/numpy/core/tests/test_print.py"", line 157, in _test_locale_independance\n        err_msg=\'Failed locale test for type %s\' % tp)\n      File ""/Users/chanley/dev/site-packages/lib/python/numpy/testing/utils.py"", line 183, in assert_equal\n        raise AssertionError(msg)\n    AssertionError: \n    Items are not equal: Failed locale test for type <type \'numpy.float128\'>\n     ACTUAL: \'1,2\'\n     DESIRED: \'1.2\'\n    \n    ----------------------------------------------------------------------\n    Ran 1799 tests in 8.869s\n    \n    FAILED (KNOWNFAIL=1, SKIP=1, failures=6)\n    <nose.result.TextTestResult run=1799 errors=0 failures=6>\n\n'"
1575,7728249,thouis,thouis,2012-10-19 20:41:53,2012-10-23 02:39:55,2012-10-19 20:41:53,closed,,1.3.0,2,11 - Bug;component: Other;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1575,b'Numpy test failure with Python 2.5.3 (win32) (Trac #977)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/977 on 2008-12-26 by trac user raybaut, assigned to unknown._\n\nRunning unit tests for numpy\nNumPy version 1.2.1\nNumPy is installed in C:\\Program Files\\pythonxy\\python\\lib\\site-packages\\numpy\nPython version 2.5.3 (r253:67855, Dec 19 2008, 16:58:30) [MSC v.1310 32 bit (Intel)]\nnose version 0.10.4\n======================================================================\nFAIL: test_umath.TestComplexFunctions.test_against_cmath\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File ""nose\\case.py"", line 182, in runTest\n    self.test(*self.arg)\n  File ""C:\\Program Files\\pythonxy\\python\\lib\\site-packages\\numpy\\core\\tests\\test_umath.py"", line 268\n, in test_against_cmath\n    assert abs(a - b) < atol, ""%s %s: %s; cmath: %s""%(fname,p,a,b)\nAssertionError: arcsinh -2j: (-1.31695789692-1.57079632679j); cmath: (1.31695789692-1.57079632679j)\n\n----------------------------------------------------------------------\nRan 1592 tests in 11.484s\n\nFAILED (KNOWNFAIL=3, failures=1)\nOut[1]: <nose.result.TextTestResult run=1592 errors=0 failures=1>'"
1574,7728247,thouis,thouis,2012-10-19 20:41:50,2012-10-23 02:39:54,2012-10-19 20:41:51,closed,,,4,11 - Bug;component: numpy.core;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1574,b'incorrect repr of float32 and float64 (Trac #976)',"b""_Original ticket http://projects.scipy.org/numpy/ticket/976 on 2008-12-23 by trac user wxgeo, assigned to unknown._\n\nHi,\nOn my Linux installation, numpy uses comma instead of dot in representation of float32, float64 and float96 types (at least) :\n\n\n\n\n    >>> import numpy\n    >>> numpy.version.version\n    '1.2.1'\n    >>> numpy.float64(4.3)\n    4,2999999999999998\n    >>> eval(repr(numpy.float64(4.3)))\n    (4, 2999999999999998L)\n\n\n\nI use Ubuntu 8.10 (Unbuntu Ibex) kernel 2.6.27-9-generic.\nDefault numpy version is 1.1.1, so I compiled 1.2.1, but the same bug occurs.\n\nNot this bug does *not* appear on Windows XP.\n\nNot also this bug might be french-language relative (although I can't actually figure how), since comma is used instead of dot for floating number representation in french-speaking countries.\n\n\n\n    ~$ echo $LANG\n    fr_FR.UTF-8\n\n\n\n"""
1573,7728245,thouis,thouis,2012-10-19 20:41:46,2012-10-19 20:41:49,2012-10-19 20:41:49,closed,,1.3.0,3,11 - Bug;component: Other;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1573,b'Formatting unit tests failure on windows + 2.6 (Trac #975)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/975 on 2008-12-23 by @cournape, assigned to unknown._\n\nHarmless, but still annoying:\n\n\n\n    ======================================================================\n    FAIL: Check formatting.\n    ----------------------------------------------------------------------\n    Traceback (most recent call last):\n      File ""C:\\Python26\\Lib\\site-packages\\numpy\\core\\tests\\test_print.py"", line 28, in test_complex_types\n        assert_equal(str(t(x)), str(complex(x)))\n      File ""C:\\Python26\\Lib\\site-packages\\numpy\\testing\\utils.py"", line 183, in assert_equal\n        raise AssertionError(msg)\n    AssertionError:\n    Items are not equal:\n     ACTUAL: \'(1e+020+0j)\'\n     DESIRED: \'(1e+20+0j)\'\n    \n    ======================================================================\n    FAIL: Check formatting.\n    ----------------------------------------------------------------------\n    Traceback (most recent call last):\n      File ""C:\\Python26\\Lib\\site-packages\\numpy\\core\\tests\\test_print.py"", line 16, in test_float_types\n        assert_equal(str(t(x)), str(float(x)))\n      File ""C:\\Python26\\Lib\\site-packages\\numpy\\testing\\utils.py"", line 183, in assert_equal\n        raise AssertionError(msg)\n    AssertionError:\n    Items are not equal:\n     ACTUAL: \'1e+020\'\n     DESIRED: \'1e+20\'\n\n'"
1572,7728244,thouis,thouis,2012-10-19 20:41:44,2012-10-19 20:41:44,2012-10-19 20:41:44,closed,,1.3.0,1,11 - Bug;component: numpy.core;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1572,b'FAIL: test_umath.TestComplexFunctions.test_against_cmath (Trac #974)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/974 on 2008-12-20 by @nilswagner01, assigned to unknown._\n\npython2,6 \n\n\n\n    >>> numpy.__version__\n    \'1.3.0.dev6173\'\n\n\n\n\n\n    ======================================================================                                                         \n    FAIL: test_umath.TestComplexFunctions.test_against_cmath                                                                       \n    ----------------------------------------------------------------------                                                         \n    Traceback (most recent call last):                                                                                             \n      File ""/home/nwagner/local/lib64/python2.6/site-packages/nose-0.10.4-py2.6.egg/nose/case.py"", line 182, in runTest            \n        self.test(*self.arg)                                                                                                       \n      File ""/home/nwagner/local/lib64/python2.6/site-packages/numpy/core/tests/test_umath.py"", line 423, in test_against_cmath     \n        assert abs(a - b) < atol, ""%s %s: %s; cmath: %s""%(fname,p,a,b)                                                             \n    AssertionError: arcsin 2: (1.57079632679-1.31695789692j); cmath: (1.57079632679+1.31695789692j)      \n\n\n\n\n\n    >>> numpy.show_config()\n    atlas_threads_info:\n        libraries = [\'lapack\', \'ptf77blas\', \'ptcblas\', \'atlas\']\n        library_dirs = [\'/home/nwagner/src/ATLAS3.8.2/mybuild/lib\']\n        language = f77\n        include_dirs = [\'/home/nwagner/src/ATLAS3.8.2/include\']\n    \n    blas_opt_info:\n        libraries = [\'ptf77blas\', \'ptcblas\', \'atlas\']\n        library_dirs = [\'/home/nwagner/src/ATLAS3.8.2/mybuild/lib\']\n        define_macros = [(\'ATLAS_INFO\', \'""\\\\""3.8.2\\\\""""\')]\n        language = c\n        include_dirs = [\'/home/nwagner/src/ATLAS3.8.2/include\']\n    \n    atlas_blas_threads_info:\n        libraries = [\'ptf77blas\', \'ptcblas\', \'atlas\']\n        library_dirs = [\'/home/nwagner/src/ATLAS3.8.2/mybuild/lib\']\n        language = c\n        include_dirs = [\'/home/nwagner/src/ATLAS3.8.2/include\']\n    \n    lapack_opt_info:\n        libraries = [\'lapack\', \'ptf77blas\', \'ptcblas\', \'atlas\']\n        library_dirs = [\'/home/nwagner/src/ATLAS3.8.2/mybuild/lib\']\n        define_macros = [(\'ATLAS_INFO\', \'""\\\\""3.8.2\\\\""""\')]\n        language = f77\n        include_dirs = [\'/home/nwagner/src/ATLAS3.8.2/include\']\n    \n    lapack_mkl_info:\n      NOT AVAILABLE\n    \n    blas_mkl_info:\n      NOT AVAILABLE\n    \n    mkl_info:\n      NOT AVAILABLE\n\n\n'"
1571,7728240,thouis,thouis,2012-10-19 20:41:38,2012-10-19 20:41:43,2012-10-19 20:41:43,closed,,1.3.0,7,11 - Bug;component: Other;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1571,b'Error compiling trunk using MSVS 9 (Trac #973)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/973 on 2008-12-19 by @FrancescAlted, assigned to unknown._\n\nFYI. After trying to compile the NumPy trunk with MSVS 9 (32-bits), I\'m getting the next error:\n\n\n\n    C:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\BIN\\link.exe /DLL /nologo\n    /INCREMENTAL:NO /LIBPATH:C:\\Python26\\libs /LIBPATH:C:\\Python26\\PCbuild /EXPORT:i\n    nitmtrand build\\temp.win32-2.6\\Release\\numpy\\random\\mtrand\\mtrand.obj build\\temp\n    .win32-2.6\\Release\\numpy\\random\\mtrand\\randomkit.obj build\\temp.win32-2.6\\Releas\n    e\\numpy\\random\\mtrand\\initarray.obj build\\temp.win32-2.6\\Release\\numpy\\random\\mt\n    rand\\distributions.obj /OUT:build\\lib.win32-2.6\\numpy\\random\\mtrand.pyd /IMPLIB:\n    build\\temp.win32-2.6\\Release\\numpy\\random\\mtrand\\mtrand.lib /MANIFESTFILE:build\\\n    temp.win32-2.6\\Release\\numpy\\random\\mtrand\\mtrand.pyd.manifest\n       Creating library build\\temp.win32-2.6\\Release\\numpy\\random\\mtrand\\mtrand.lib\n    and object build\\temp.win32-2.6\\Release\\numpy\\random\\mtrand\\mtrand.exp\n    randomkit.obj : error LNK2019: unresolved external symbol __imp__CryptReleaseCon\n    text@8 referenced in function _rk_devfill\n    randomkit.obj : error LNK2019: unresolved external symbol __imp__CryptGenRandom@\n    12 referenced in function _rk_devfill\n    randomkit.obj : error LNK2019: unresolved external symbol __imp__CryptAcquireCon\n    textA@20 referenced in function _rk_devfill\n    build\\lib.win32-2.6\\numpy\\random\\mtrand.pyd : fatal error LNK1120: 3 unresolved\n    externals\n    error: Command ""C:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\BIN\\link.e\n    xe /DLL /nologo /INCREMENTAL:NO /LIBPATH:C:\\Python26\\libs /LIBPATH:C:\\Python26\\P\n    Cbuild /EXPORT:initmtrand build\\temp.win32-2.6\\Release\\numpy\\random\\mtrand\\mtran\n    d.obj build\\temp.win32-2.6\\Release\\numpy\\random\\mtrand\\randomkit.obj build\\temp.\n    win32-2.6\\Release\\numpy\\random\\mtrand\\initarray.obj build\\temp.win32-2.6\\Release\n    \\numpy\\random\\mtrand\\distributions.obj /OUT:build\\lib.win32-2.6\\numpy\\random\\mtr\n    and.pyd /IMPLIB:build\\temp.win32-2.6\\Release\\numpy\\random\\mtrand\\mtrand.lib /MAN\n    IFESTFILE:build\\temp.win32-2.6\\Release\\numpy\\random\\mtrand\\mtrand.pyd.manifest""\n    failed with exit status 1120\n\n\n\nI regularly use MSVS 9 to compile trunk, but I\'ve never seen this error before.'"
1569,7728234,thouis,thouis,2012-10-19 20:41:29,2012-10-19 20:41:34,2012-10-19 20:41:34,closed,,NumPy 1.7,8,11 - Bug;component: Documentation;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1569,"b""numpy.memmap 'offset' parameter docs are almost entirely wrong. (Trac #971)""","b'_Original ticket http://projects.scipy.org/numpy/ticket/971 on 2008-12-19 by trac user 0ion9, assigned to @pv._\n\n""In the file, array data starts at this offset. offset should be a multiple of the byte-size of dtype. Requires shape=None. The default is 0""\n\nIn actual fact, shape != None is usable with offset, and crucial when the file only contains *some* records of the type you want to memmap, with other data included in the file.\n\nSupposing you have a file of 27 bytes, with a 7-byte header and 10-byte records.\nLet\'s create one:\n\necho -n ""HEADER!-onerecord-tworecord"" > /tmp/npmmap\n\nIf you want to read the records, you can do:\n\n>>> mydtype = ""S10""\n\n>>> mmappedarray = np.memmap (\'/tmp/npmmap\', mode = \'r\', offset = 7, dtype = mydtype)\n\n>>> mmappedarray\nmemmap([\'-onerecord\', \'-tworecord\'], \n      dtype=\'|S10\')\n\nNow supposing you had some other data at the end of the file:\n\n\necho -n ""HEADER!-onerecord-tworecordJUNK"" > /tmp/npmmap\n\n\nYou can handle that by explicitly stating the shape:\n\n>>> mmappedarray = np.memmap (\'/tmp/npmmap\', mode = \'r\', offset = 7, dtype = mydtype, shape = 2)\n\n>>> mmappedarray\nmemmap([\'-onerecord\', \'-tworecord\'], \n      dtype=\'|S10\')\n\n\nTherefore, here is a statement to replace ""offset should be a multiple of the byte-size of dtype. Requires shape=None."":\n\n""if number of bytes remaining after offset is evenly divisible into the byte-size of dtype, shape can be omitted. Otherwise, when you specify offset you must also specify shape.\nWhen creating or overwriting files, offset can be any positive \nnumber, subject to file size limitations (see Notes).\n""\n\nand for shape, ""When reading, the remaining bytes in the file must be <= the bytesize of an array of the specified dtype and shape, if shape is given.\nWhen writing a new file, shape must always be given. When overwriting (mode == \'w\') or appending (mode == \'r+\') to an existing file, specifying a shape that extends beyond the end of the current file contents causes the file to be immediately extended to fit.""\n\nfor \'w+\' mode docs, ""overwriting an existing file may cause file size to grow or shrink as needed.""\n(specified because, in combination with \'offset\' > 0, the total file size after memmapping may differ from the memmapped array size)\n\n\n\n(I set the version for this bug to \'devel\', but it is actually 1.2, which is not available in the bug-tracker)'"
1568,7728233,thouis,thouis,2012-10-19 20:41:26,2012-10-19 20:41:28,2012-10-19 20:41:28,closed,,1.3.0,4,11 - Bug;component: Other;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1568,b'Problems building NumPy with Python 2.6 / MinGW 3.4.5 on Windows XP SP3 (Trac #970)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/970 on 2008-12-18 by trac user fpetermaas, assigned to @cournape._\n\n\n\n    I cannot build  NumPy 1.2.1 with the aforementionend environment.\n    It works with Python 2.5 but with Python 2.6 I get:\n    \n    >>> python setup.py build -c mingw32\n    \n    [lots of lines omitted]\n    running build_src\n    building py_modules sources\n    building extension ""numpy.core.multiarray"" sources\n    Generating build\\src.win32-2.6\\numpy\\core\\include/numpy\\config.h\n    error: None\n\n\n'"
1567,7728231,thouis,thouis,2012-10-19 20:41:24,2012-10-19 20:41:25,2012-10-19 20:41:25,closed,,1.3.0,1,11 - Bug;component: numpy.distutils;priority: high,https://api.github.com/repos/numpy/numpy/issues/1567,b'gfortran does not work on windows when built with MS compiler (Trac #969)',"b""_Original ticket http://projects.scipy.org/numpy/ticket/969 on 2008-12-16 by @cournape, assigned to @cournape._\n\nLooks like some distutils voodoo is needed:\n\n\n\n    c:\\Program Files\\Microsoft Visual Studio .NET 2003\\Vc7\\bin\\link.exe /DLL /nologo /INCREMENTAL:NO /LIBPATH:c:\\mingw\\lib\\gcc\\mingw32\\4.3.0 /LIBPATH:C:\\Python25\\libs /LIBPATH:C:\\Python25\\PCBuild /LIBPATH:build\\temp.win32-2.5\\Release /LIBPATH:C:\\Python25\\libs /LIBPATH:C:\\Python25\\PCBuild gfortran.lib gcc.lib /EXPORT:initmultiarray build\\temp.win32-2.5\\Release\\numpy\\core\\src\\multiarraymodule.obj /OUT:build\\lib.win32-2.5\\numpy\\core\\multiarray.pyd /IMPLIB:build\\temp.win32-2.5\\Release\\numpy\\core\\src\\multiarray.lib\n    LINK : fatal error LNK1181: cannot open input file 'gfortran.lib'\n\n\n\nThis is a problem for win64, as g77 is not ported there, only gfortran is."""
1563,7728224,thouis,thouis,2012-10-19 20:41:10,2012-10-19 20:41:12,2012-10-19 20:41:12,closed,,1.6.0,4,11 - Bug;component: numpy.random;priority: high,https://api.github.com/repos/numpy/numpy/issues/1563,b'random_integers error regarding integer value range (Trac #965)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/965 on 2008-12-05 by @cournape, assigned to @cournape._\n\n\n\n    #!python\n    import numpy as np\n    np.random.random_integers(-2 ** 30, 2 ** 30, 10)\n\n\n\nRaises:\n\nValueError: low >= high\n\nIt may not be obvious what that means for the user.\n\n'"
1562,7728222,thouis,thouis,2012-10-19 20:41:05,2012-10-19 20:41:09,2012-10-19 20:41:09,closed,,1.3.0,10,11 - Bug;component: numpy.f2py;priority: high,https://api.github.com/repos/numpy/numpy/issues/1562,b'f2py error with python 2.6 (Trac #964)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/964 on 2008-12-02 by trac user edlenz, assigned to unknown._\n\nI am using the latest svn varsion of numpy and the following error \nocoured when using f2py?\n\n$ python\nPython 2.6 (r26:66714, Oct 27 2008, 10:50:31)\n[GCC 4.3.2] on linux2\nType ""help"", ""copyright"", ""credits"" or ""license"" for more information.\n>>> import hello\n>>> hello.foo(4)\nTraceback (most recent call last):\n  File ""<stdin>"", line 1, in <module>\nRuntimeError: more argument specifiers than keyword list entries (remaining format:\'|:hello.foo\')\n>>>\n\nI also tried with other functions and the error is still the same.\n\nThanks for your help'"
1561,7728219,thouis,seberg,2012-10-19 20:41:03,2014-05-19 20:39:29,2014-05-19 20:39:29,closed,,NumPy 2.0,7,11 - Bug;component: numpy.core;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1561,b'Object array comparisons eat exceptions (Trac #963)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/963 on 2008-11-29 by @inducer, assigned to @cournape._\n\nThe attached Python file reports ""False"" instead of propagating the RuntimeError that\'s thrown in A\'s __eq__.\n\nErrors should never pass silently.\nUnless explicitly silenced.'"
1560,7728217,thouis,thouis,2012-10-19 20:41:00,2012-10-19 20:41:02,2012-10-19 20:41:02,closed,,,6,11 - Bug;component: numpy.f2py;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1560,"b""f2py external callbacks don't work (Trac #962)""","b'_Original ticket http://projects.scipy.org/numpy/ticket/962 on 2008-11-28 by trac user wieferink, assigned to @pearu._\n\nI have attached an extension module using a callback which relies on the existence of an external name (the callback is not passed as an argument).\n\nThe f2py module in the tarball builds fine, but according to Pearu Peterson should not add cb_func to the interface of cb_func because intent(callback) means something different in this context.\n\nPearu Peterson wrote:\n\n\n\n    Adding intent(callback) cb_func to argument\n    list is a f2py bug. Actually, the message\n    ""analyzeline: missing __user__ module (could be nothing)""\n    is indicating this bug (I didn\'t implement\n    the ""could be nothing"" part;) and ""missing module"" note\n    is misleading.).\n    \n    Could someone report this bug to numpy tracker?\n    \n    The fix itself should be simple: locate the line\n    that outputs the message in f2py/crackfortran.py\n    file and intent the next line by one level:\n    \n    if \'__user__\' not in groupcache[groupcounter-2][\'name\']:\n      #outmess(\'analyzeline: missing __user__ module (could be nothing)\\n\')\n      groupcache[groupcounter][\'args\'].append(k)\n\n'"
1559,7728215,thouis,thouis,2012-10-19 20:40:58,2012-10-19 20:40:59,2012-10-19 20:40:59,closed,,1.3.0,2,11 - Bug;component: numpy.ma;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1559,b'Masked array getdata() and getmask() resolve to  get_data() and get_mask() in docs (Trac #961)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/961 on 2008-11-28 by @scottza, assigned to @pierregm._\n\nThe getdata() and getmask() functions in the numpy.ma module resolve to \nget_data() and get_mask().\n\n\n\n    >>> import numpy.ma as ma\n    >>> ma.getdata\n    <function get_data at 0xb7514e2c>\n    >>> ma.getmask\n    <function get_mask at 0xb665f3e4>\n\n\n\ngetmask() and getdata() are exposed in the top level namespace numpy.ma, while\nget_data() and get_mask() are only available under numpy.ma.core.\n\n\n\n    >>> ma.get_mask\n    Traceback (most recent call last):\n      File ""<stdin>"", line 1, in <module>\n    AttributeError: \'module\' object has no attribute \'get_mask\'\n    >>> ma.core.get_mask\n    <function get_mask at 0xb665f3e4>\n    >>> ma.get_data\n    Traceback (most recent call last):\n      File ""<stdin>"", line 1, in <module>\n    AttributeError: \'module\' object has no attribute \'get_data\'\n    >>> ma.core.get_data\n    <function get_data at 0xb7514e2c>\n\n\n\nThis is an issue in the documentation effort since the documentation for \ngetmask/getdata will link to the ma.core functions get_mask/get_data. There\nis no easy way to resolve this in the documentation. Therefore, since\nthis can be confusing to users and is easily fixed in a backward compatible\nway that doesn\'t break Numpy, I suggest that the attached patch against r6116\nbe applied.'"
1558,7728214,thouis,thouis,2012-10-19 20:40:55,2012-10-19 20:40:57,2012-10-19 20:40:57,closed,,1.6.0,6,11 - Bug;component: numpy.distutils;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1558,b'Intel64 --compiler=intelem fails to set correct compiler options (Trac #960)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/960 on 2008-11-26 by trac user em101, assigned to @dmcooke._\n\nOn an Intel64 Linux x86_64 platform, using --compiler=intelem is not fully supported (fails to set correct compiler options), however --fcompiler=intelem is supported. Setting CC and CXX and using --compiler=unix is a work-around.'"
1557,7728210,thouis,thouis,2012-10-19 20:40:50,2012-10-19 20:40:54,2012-10-19 20:40:54,closed,,1.3.0,7,11 - Bug;component: numpy.core;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1557,b'atanh(+1) gives nan instead of inf on Windows (Trac #959)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/959 on 2008-11-25 by @FrancescAlted, assigned to unknown._\n\nThere is an inconsistency in the positive limit value (+1.) of arctanh between 1.2.x and 1.3.x in trunk.  When using !NumPy 1.2.1 one has:\n\n\n\n    Python 2.4.4 (#71, Oct 18 2006, 08:34:43) [MSC v.1310 32 bit (Intel)] on win32\n    Type ""help"", ""copyright"", ""credits"" or ""license"" for more information.\n    >>> import numpy\n    >>> numpy.__version__\n    \'1.2.1\'\n    >>> numpy.arctanh(1.)\n    1.#INF\n    >>> numpy.isinf\n    <ufunc \'isinf\'>\n    >>> numpy.isinf(numpy.arctanh(1.))\n    True\n    >>> numpy.arctanh(-1.)\n    -1.#INF\n    >>> numpy.isinf(numpy.arctanh(-1.))\n    True\n\n\n\nwhile when using version 1.3.0.dev6085:\n\n\n\n    Python 2.6 (r26:66721, Oct  2 2008, 11:35:03) [MSC v.1500 32 bit \n    (Intel)] on win32\n    Type ""help"", ""copyright"", ""credits"" or ""license"" for more information.\n    >>> import numpy\n    >>> numpy.__version__\n    \'1.3.0.dev6085\'\n    >>> numpy.arctanh(1.)\n    nan\n    >>> numpy.isinf(numpy.arctanh(1.))\n    False\n    >>> numpy.arctanh(-1.)\n    -inf\n    >>> numpy.isinf(numpy.arctanh(-1.))\n    True\n\n\n\nAs you see, the trunk version returns ``nan`` for arctanh(1.), while \n1.2.1 returns ``inf`` (the correct value).  For arctanh(-1.) both \nversions correctly returns ``-inf``.  I used the official binaries for 1.2.1, while I\'ve used the MSVC 2008 (32-bit) for compiling trunk (the resuilting binaries works badly in both Windows XP 32-bit and Windows Vista 64-bit).\n\nMy experiments on Linux shows that they both return ``+inf`` and \n``-inf``, so it seems that this is a Windows specific issue.'"
1556,7728208,thouis,thouis,2012-10-19 20:40:48,2012-10-19 20:40:49,2012-10-19 20:40:49,closed,,1.3.0,3,11 - Bug;component: numpy.core;priority: high,https://api.github.com/repos/numpy/numpy/issues/1556,b'numpy failures on mac os X (python 2.6) (Trac #958)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/958 on 2008-11-24 by @cournape, assigned to @cournape._\n\n\n\n    ======================================================================\n    ERROR: Tests the min/max functions with explicit outputs\n    ----------------------------------------------------------------------\n    Traceback (most recent call last):\n      File ""/Users/david/pylocal/lib/python2.6/site-packages/numpy/ma/tests/test_core.py"", line 704, in test_minmax_funcs_with_output\n        result = npfunc(xm,axis=0,out=nout)\n      File ""/Users/david/pylocal/lib/python2.6/site-packages/numpy/core/fromnumeric.py"", line 1569, in amin\n        return amin(axis, out)\n      File ""/Users/david/pylocal/lib/python2.6/site-packages/numpy/ma/core.py"", line 3192, in min\n        np.putmask(out, newmask, np.nan)\n    ValueError: cannot convert float NaN to integer\n    \n    ======================================================================\n    FAIL: test_basic (test_multiarray.TestClip)\n    ----------------------------------------------------------------------\n    Traceback (most recent call last):\n      File ""/Users/david/pylocal/lib/python2.6/site-packages/numpy/core/tests/test_multiarray.py"", line 677, in test_basic\n        self._clip_type(\'float\',1024,-12.8,100.2, inplace=inplace)\n      File ""/Users/david/pylocal/lib/python2.6/site-packages/numpy/core/tests/test_multiarray.py"", line 671, in _clip_type\n        assert_equal(x.dtype.byteorder,byteorder)\n      File ""/Users/david/pylocal/lib/python2.6/site-packages/numpy/testing/utils.py"", line 183, in assert_equal\n        raise AssertionError(msg)\n    AssertionError: \n    Items are not equal:\n     ACTUAL: \'>\'\n     DESIRED: \'=\'\n    \n    ======================================================================\n    FAIL: test_binary (test_multiarray.TestFromstring)\n    ----------------------------------------------------------------------\n    Traceback (most recent call last):\n      File ""/Users/david/pylocal/lib/python2.6/site-packages/numpy/core/tests/test_multiarray.py"", line 120, in test_binary\n        assert_array_equal(a, array([1,2,3,4]))\n      File ""/Users/david/pylocal/lib/python2.6/site-packages/numpy/testing/utils.py"", line 303, in assert_array_equal\n        verbose=verbose, header=\'Arrays are not equal\')\n      File ""/Users/david/pylocal/lib/python2.6/site-packages/numpy/testing/utils.py"", line 295, in assert_array_compare\n        raise AssertionError(msg)\n    AssertionError: \n    Arrays are not equal\n    \n    (mismatch 100.0%)\n     x: array([  4.60060299e-41,   8.96831017e-44,   2.30485571e-41,\n             4.60074312e-41], dtype=float32)\n     y: array([1, 2, 3, 4])\n    \n    ======================================================================\n    FAIL: test_version0_float32 (test_multiarray.TestPickling)\n    ----------------------------------------------------------------------\n    Traceback (most recent call last):\n      File ""/Users/david/pylocal/lib/python2.6/site-packages/numpy/core/tests/test_multiarray.py"", line 543, in test_version0_float32\n        assert_equal(a, p)\n      File ""/Users/david/pylocal/lib/python2.6/site-packages/numpy/testing/utils.py"", line 180, in assert_equal\n        return assert_array_equal(actual, desired, err_msg, verbose)\n      File ""/Users/david/pylocal/lib/python2.6/site-packages/numpy/testing/utils.py"", line 303, in assert_array_equal\n        verbose=verbose, header=\'Arrays are not equal\')\n      File ""/Users/david/pylocal/lib/python2.6/site-packages/numpy/testing/utils.py"", line 295, in assert_array_compare\n        raise AssertionError(msg)\n    AssertionError: \n    Arrays are not equal\n    \n    (mismatch 100.0%)\n     x: array([ 1.,  2.,  3.,  4.], dtype=float32)\n     y: array([  4.60060299e-41,   8.96831017e-44,   2.30485571e-41,\n             4.60074312e-41], dtype=float32)\n    \n    ======================================================================\n    FAIL: test_version1_float32 (test_multiarray.TestPickling)\n    ----------------------------------------------------------------------\n    Traceback (most recent call last):\n      File ""/Users/david/pylocal/lib/python2.6/site-packages/numpy/core/tests/test_multiarray.py"", line 562, in test_version1_float32\n        assert_equal(a, p)\n      File ""/Users/david/pylocal/lib/python2.6/site-packages/numpy/testing/utils.py"", line 180, in assert_equal\n        return assert_array_equal(actual, desired, err_msg, verbose)\n      File ""/Users/david/pylocal/lib/python2.6/site-packages/numpy/testing/utils.py"", line 303, in assert_array_equal\n        verbose=verbose, header=\'Arrays are not equal\')\n      File ""/Users/david/pylocal/lib/python2.6/site-packages/numpy/testing/utils.py"", line 295, in assert_array_compare\n        raise AssertionError(msg)\n    AssertionError: \n    Arrays are not equal\n    \n    (mismatch 100.0%)\n     x: array([ 1.,  2.,  3.,  4.], dtype=float32)\n     y: array([  4.60060299e-41,   8.96831017e-44,   2.30485571e-41,\n             4.60074312e-41], dtype=float32)\n    \n    ======================================================================\n    FAIL: test_basic (test_multiarray.TestView)\n    ----------------------------------------------------------------------\n    Traceback (most recent call last):\n      File ""/Users/david/pylocal/lib/python2.6/site-packages/numpy/core/tests/test_multiarray.py"", line 894, in test_basic\n        assert_array_equal(y, [67305985, 134678021])\n      File ""/Users/david/pylocal/lib/python2.6/site-packages/numpy/testing/utils.py"", line 303, in assert_array_equal\n        verbose=verbose, header=\'Arrays are not equal\')\n      File ""/Users/david/pylocal/lib/python2.6/site-packages/numpy/testing/utils.py"", line 295, in assert_array_compare\n        raise AssertionError(msg)\n    AssertionError: \n    Arrays are not equal\n    \n    (mismatch 100.0%)\n     x: array([16909060, 84281096])\n     y: array([ 67305985, 134678021])\n    \n    ======================================================================\n    FAIL: test_keywords (test_multiarray.TestView)\n    ----------------------------------------------------------------------\n    Traceback (most recent call last):\n      File ""/Users/david/pylocal/lib/python2.6/site-packages/numpy/core/tests/test_multiarray.py"", line 904, in test_keywords\n        assert_array_equal(y,[[513]])\n      File ""/Users/david/pylocal/lib/python2.6/site-packages/numpy/testing/utils.py"", line 303, in assert_array_equal\n        verbose=verbose, header=\'Arrays are not equal\')\n      File ""/Users/david/pylocal/lib/python2.6/site-packages/numpy/testing/utils.py"", line 295, in assert_array_compare\n        raise AssertionError(msg)\n    AssertionError: \n    Arrays are not equal\n    \n    (mismatch 100.0%)\n     x: array([[258]], dtype=int16)\n     y: array([[513]])\n    \n    ======================================================================\n    FAIL: Test non native double input with scalar min/max.\n    ----------------------------------------------------------------------\n    Traceback (most recent call last):\n      File ""/Users/david/pylocal/lib/python2.6/site-packages/numpy/core/tests/test_numeric.py"", line 437, in test_simple_nonnative\n        a   = self._generate_non_native_data(self.nr, self.nc)\n      File ""/Users/david/pylocal/lib/python2.6/site-packages/numpy/core/tests/test_numeric.py"", line 396, in _generate_non_native_data\n        assert not data.dtype.isnative\n    AssertionError\n    \n    ======================================================================\n    FAIL: Test NON native with native array min/max.\n    ----------------------------------------------------------------------\n    Traceback (most recent call last):\n      File ""/Users/david/pylocal/lib/python2.6/site-packages/numpy/core/tests/test_numeric.py"", line 632, in test_type_cast_07\n        assert not a_s.dtype.isnative\n    AssertionError\n    \n    ======================================================================\n    FAIL: Test NON native with native scalar min/max.\n    ----------------------------------------------------------------------\n    Traceback (most recent call last):\n      File ""/Users/david/pylocal/lib/python2.6/site-packages/numpy/core/tests/test_numeric.py"", line 643, in test_type_cast_08\n        assert not a_s.dtype.isnative\n    AssertionError\n    \n    ======================================================================\n    FAIL: Test native with NON native array min/max.\n    ----------------------------------------------------------------------\n    Traceback (most recent call last):\n      File ""/Users/david/pylocal/lib/python2.6/site-packages/numpy/core/tests/test_numeric.py"", line 654, in test_type_cast_09\n        assert not m_s.dtype.isnative\n    AssertionError\n    \n    ======================================================================\n    FAIL: Test non native with native scalar, min/max, out non native\n    ----------------------------------------------------------------------\n    Traceback (most recent call last):\n      File ""/Users/david/pylocal/lib/python2.6/site-packages/numpy/core/tests/test_numeric.py"", line 671, in test_type_cast_11\n        a   = self._generate_non_native_data(self.nr, self.nc)\n      File ""/Users/david/pylocal/lib/python2.6/site-packages/numpy/core/tests/test_numeric.py"", line 396, in _generate_non_native_data\n        assert not data.dtype.isnative\n    AssertionError\n    \n    ======================================================================\n    FAIL: Check creation from list of list of tuples\n    ----------------------------------------------------------------------\n    Traceback (most recent call last):\n      File ""/Users/david/pylocal/lib/python2.6/site-packages/numpy/core/tests/test_numerictypes.py"", line 167, in test_list_of_list_of_tuple\n        self.assert_(normalize_descr(self._descr) == h.dtype.descr)\n    AssertionError\n    \n    ======================================================================\n    FAIL: Check creation from list of tuples\n    ----------------------------------------------------------------------\n    Traceback (most recent call last):\n      File ""/Users/david/pylocal/lib/python2.6/site-packages/numpy/core/tests/test_numerictypes.py"", line 158, in test_list_of_tuple\n        self.assert_(normalize_descr(self._descr) == h.dtype.descr)\n    AssertionError\n    \n    ======================================================================\n    FAIL: Check creation from tuples\n    ----------------------------------------------------------------------\n    Traceback (most recent call last):\n      File ""/Users/david/pylocal/lib/python2.6/site-packages/numpy/core/tests/test_numerictypes.py"", line 149, in test_tuple\n        self.assert_(normalize_descr(self._descr) == h.dtype.descr)\n    AssertionError\n    \n    ======================================================================\n    FAIL: Check creation from list of list of tuples\n    ----------------------------------------------------------------------\n    Traceback (most recent call last):\n      File ""/Users/david/pylocal/lib/python2.6/site-packages/numpy/core/tests/test_numerictypes.py"", line 167, in test_list_of_list_of_tuple\n        self.assert_(normalize_descr(self._descr) == h.dtype.descr)\n    AssertionError\n    \n    ======================================================================\n    FAIL: Check creation from list of tuples\n    ----------------------------------------------------------------------\n    Traceback (most recent call last):\n      File ""/Users/david/pylocal/lib/python2.6/site-packages/numpy/core/tests/test_numerictypes.py"", line 158, in test_list_of_tuple\n        self.assert_(normalize_descr(self._descr) == h.dtype.descr)\n    AssertionError\n    \n    ======================================================================\n    FAIL: Check creation from tuples\n    ----------------------------------------------------------------------\n    Traceback (most recent call last):\n      File ""/Users/david/pylocal/lib/python2.6/site-packages/numpy/core/tests/test_numerictypes.py"", line 149, in test_tuple\n        self.assert_(normalize_descr(self._descr) == h.dtype.descr)\n    AssertionError\n    \n    ======================================================================\n    FAIL: Check creation from list of list of tuples\n    ----------------------------------------------------------------------\n    Traceback (most recent call last):\n      File ""/Users/david/pylocal/lib/python2.6/site-packages/numpy/core/tests/test_numerictypes.py"", line 167, in test_list_of_list_of_tuple\n        self.assert_(normalize_descr(self._descr) == h.dtype.descr)\n    AssertionError\n    \n    ======================================================================\n    FAIL: Check creation from list of tuples\n    ----------------------------------------------------------------------\n    Traceback (most recent call last):\n      File ""/Users/david/pylocal/lib/python2.6/site-packages/numpy/core/tests/test_numerictypes.py"", line 158, in test_list_of_tuple\n        self.assert_(normalize_descr(self._descr) == h.dtype.descr)\n    AssertionError\n    \n    ======================================================================\n    FAIL: Check creation from tuples\n    ----------------------------------------------------------------------\n    Traceback (most recent call last):\n      File ""/Users/david/pylocal/lib/python2.6/site-packages/numpy/core/tests/test_numerictypes.py"", line 149, in test_tuple\n        self.assert_(normalize_descr(self._descr) == h.dtype.descr)\n    AssertionError\n    \n    ======================================================================\n    FAIL: Check creation from list of list of tuples\n    ----------------------------------------------------------------------\n    Traceback (most recent call last):\n      File ""/Users/david/pylocal/lib/python2.6/site-packages/numpy/core/tests/test_numerictypes.py"", line 167, in test_list_of_list_of_tuple\n        self.assert_(normalize_descr(self._descr) == h.dtype.descr)\n    AssertionError\n    \n    ======================================================================\n    FAIL: Check creation from list of tuples\n    ----------------------------------------------------------------------\n    Traceback (most recent call last):\n      File ""/Users/david/pylocal/lib/python2.6/site-packages/numpy/core/tests/test_numerictypes.py"", line 158, in test_list_of_tuple\n        self.assert_(normalize_descr(self._descr) == h.dtype.descr)\n    AssertionError\n    \n    ======================================================================\n    FAIL: Check creation from tuples\n    ----------------------------------------------------------------------\n    Traceback (most recent call last):\n      File ""/Users/david/pylocal/lib/python2.6/site-packages/numpy/core/tests/test_numerictypes.py"", line 149, in test_tuple\n        self.assert_(normalize_descr(self._descr) == h.dtype.descr)\n    AssertionError\n    \n    ======================================================================\n    FAIL: Check creation of 0-dimensional objects\n    ----------------------------------------------------------------------\n    Traceback (most recent call last):\n      File ""/Users/david/pylocal/lib/python2.6/site-packages/numpy/core/tests/test_numerictypes.py"", line 106, in test_zeros0D\n        self.assert_(normalize_descr(self._descr) == h.dtype.descr)\n    AssertionError\n    \n    ======================================================================\n    FAIL: Check creation of multi-dimensional objects\n    ----------------------------------------------------------------------\n    Traceback (most recent call last):\n      File ""/Users/david/pylocal/lib/python2.6/site-packages/numpy/core/tests/test_numerictypes.py"", line 126, in test_zerosMD\n        self.assert_(normalize_descr(self._descr) == h.dtype.descr)\n    AssertionError\n    \n    ======================================================================\n    FAIL: Check creation of single-dimensional objects\n    ----------------------------------------------------------------------\n    Traceback (most recent call last):\n      File ""/Users/david/pylocal/lib/python2.6/site-packages/numpy/core/tests/test_numerictypes.py"", line 116, in test_zerosSD\n        self.assert_(normalize_descr(self._descr) == h.dtype.descr)\n    AssertionError\n    \n    ======================================================================\n    FAIL: Check creation of 0-dimensional objects\n    ----------------------------------------------------------------------\n    Traceback (most recent call last):\n      File ""/Users/david/pylocal/lib/python2.6/site-packages/numpy/core/tests/test_numerictypes.py"", line 106, in test_zeros0D\n        self.assert_(normalize_descr(self._descr) == h.dtype.descr)\n    AssertionError\n    \n    ======================================================================\n    FAIL: Check creation of multi-dimensional objects\n    ----------------------------------------------------------------------\n    Traceback (most recent call last):\n      File ""/Users/david/pylocal/lib/python2.6/site-packages/numpy/core/tests/test_numerictypes.py"", line 126, in test_zerosMD\n        self.assert_(normalize_descr(self._descr) == h.dtype.descr)\n    AssertionError\n    \n    ======================================================================\n    FAIL: Check creation of single-dimensional objects\n    ----------------------------------------------------------------------\n    Traceback (most recent call last):\n      File ""/Users/david/pylocal/lib/python2.6/site-packages/numpy/core/tests/test_numerictypes.py"", line 116, in test_zerosSD\n        self.assert_(normalize_descr(self._descr) == h.dtype.descr)\n    AssertionError\n    \n    ======================================================================\n    FAIL: test_method_array (test_records.TestFromrecords)\n    ----------------------------------------------------------------------\n    Traceback (most recent call last):\n      File ""/Users/david/pylocal/lib/python2.6/site-packages/numpy/core/tests/test_records.py"", line 13, in test_method_array\n        assert_equal(r[1].item(), (25444, \'efg\', 1633837924))\n      File ""/Users/david/pylocal/lib/python2.6/site-packages/numpy/testing/utils.py"", line 176, in assert_equal\n        assert_equal(actual[k], desired[k], \'item=%r\\n%s\' % (k,err_msg), verbose)\n      File ""/Users/david/pylocal/lib/python2.6/site-packages/numpy/testing/utils.py"", line 183, in assert_equal\n        raise AssertionError(msg)\n    AssertionError: \n    Items are not equal:\n    item=0\n    \n     ACTUAL: 25699\n     DESIRED: 25444\n    \n    ======================================================================\n    FAIL: test_umath.TestComplexFunctions.test_against_cmath\n    ----------------------------------------------------------------------\n    Traceback (most recent call last):\n      File ""/Users/david/pylocal//lib/python2.6/site-packages/nose/case.py"", line 182, in runTest\n        self.test(*self.arg)\n      File ""/Users/david/pylocal/lib/python2.6/site-packages/numpy/core/tests/test_umath.py"", line 423, in test_against_cmath\n        assert abs(a - b) < atol, ""%s %s: %s; cmath: %s""%(fname,p,a,b)\n    AssertionError: arcsin 2: (1.57079632679-1.31695789692j); cmath: (1.57079632679+1.31695789692j)\n    \n    ----------------------------------------------------------------------\n    Ran 1769 tests in 10.913s\n\n'"
1555,7728205,thouis,thouis,2012-10-19 20:40:44,2012-10-19 20:40:46,2012-10-19 20:40:46,closed,,1.3.0,7,11 - Bug;component: numpy.testing;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1555,"b""decorators don't work with test generators (Trac #957)""","b'_Original ticket http://projects.scipy.org/numpy/ticket/957 on 2008-11-24 by @jarrodmillman, assigned to @alanmcintyre._\n\nNose has some problems with test generators in classes inherited from `TestCase`.  For example,\n\n\n\n    @dec.knownfailureif(True, ""This test is known to fail"")\n    def test_discrete_rvs_cdf_fail():\n       distknownfail = [ [\'logser\',   (0.6,)]]\n       for distname, arg in distknownfail:\n           if debug:\n               print distname\n           yield check_discrete_chisquare, distname, arg\n\n\n\nresults in:\n\n\n\n    ...........E\n    ======================================================================\n    ERROR: test_discrete_chisquare.test_discrete_rvs_cdf_fail\n    ----------------------------------------------------------------------\n    Traceback (most recent call last):\n     File ""C:\\Programs\\Python25\\lib\\site-packages\\nose-0.10.4-py2.5.egg\\nose\\case.p\n    y"", line 182, in runTest\n       self.test(*self.arg)\n     File ""C:\\Programs\\Python25\\lib\\site-packages\\numpy\\testing\\decorators.py"", line 119, in skipper\n       raise KnownFailureTest, msg\n    KnownFailureTest: This test is known to fail\n    \n    ----------------------------------------------------------------------\n    Ran 12 tests in 0.781s\n    \n    FAILED (errors=1)\n\n\n'"
1554,7728203,thouis,thouis,2012-10-19 20:40:42,2012-10-19 20:40:43,2012-10-19 20:40:43,closed,,1.3.0,2,11 - Bug;component: numpy.ma;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1554,b'ValueError: cannot convert float NaN to integer (Trac #956)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/956 on 2008-11-20 by @cournape, assigned to @pierregm._\n\nPython 2.6 specific error:\n\n\n\n    ERROR: Tests the min/max functions with explicit outputs\n    ----------------------------------------------------------------------\n    Traceback (most recent call last):\n      File ""/export/bbc8/python2.6/lib/python2.6/site-packages/numpy/ma/tests/test_core.py"", line 700, in test_minmax_funcs_with_output\n        result = npfunc(xm,axis=0,out=nout)\n      File ""/export/bbc8/python2.6/stow/numpy.svn//lib/python2.6/site-packages/numpy/core/fromnumeric.py"", line 1569, in amin\n        return amin(axis, out)\n      File ""/export/bbc8/python2.6/stow/numpy.svn//lib/python2.6/site-packages/numpy/ma/core.py"", line 3188, in min\n        np.putmask(out, newmask, np.nan)\n    ValueError: cannot convert float NaN to integer\n\n'"
1553,7728202,thouis,thouis,2012-10-19 20:40:38,2012-10-19 20:40:41,2012-10-19 20:40:41,closed,,,11,11 - Bug;component: numpy.core;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1553,b'[debian #505999] memory leak in exponentiation (Trac #955)',"b""_Original ticket http://projects.scipy.org/numpy/ticket/955 on 2008-11-20 by @stefanv, assigned to unknown._\n\nFrom http://bugs.debian.org/cgi-bin/bugreport.cgi?bug=505999:\n\nVersion: 1:1.1.0-3\n\nRaising zero to a negative power sometimes leaks memory, depending on the\ntypes involved. While this is easy to work around (check for zero and deal\nwith it separately), it shouldn't happen.\n\nIn particular, with the following combinations of types (where the base is\n0 and the exponent is -3 or -3.5), one object is leaked:\n\n\n\n    float ** numpy.float64\n    int ** numpy.float64\n    int ** numpy.int32\n    int ** numpy.int64\n    numpy.float32 ** numpy.float32\n    numpy.float64 ** float\n    numpy.float64 ** int\n    numpy.float64 ** numpy.float32\n    numpy.float64 ** numpy.float64\n    numpy.float64 ** numpy.int32\n    numpy.float64 ** numpy.int64\n    numpy.int32 ** int\n    numpy.int32 ** numpy.int32\n    numpy.int64 ** int\n    numpy.int64 ** numpy.int32\n    numpy.int64 ** numpy.int64\n\n\n\n(In addition, float ** numpy.int32 raises an exception; however, strictly\nspeaking, that would be a separate issue.)\n\nCode to reproduce this is enclosed below.\n\n\n\n    #!/usr/bin/python\n    \n    import gc, numpy\n    \n    def mem():\n        gc.collect()\n        return len(gc.get_objects())\n    \n    for zt in int, float, numpy.int32, numpy.int64, numpy.float32, numpy.float64:\n        z = zt(0)\n        for pt in int, float, numpy.int32, numpy.int64, numpy.float32, numpy.float64:\n            if zt in (int, float) and pt in (int, float):\n                continue\n            p = pt(-3.5)\n            try:\n                before = mem()\n                z**p\n                if mem()>before:\n                    print 'leak: ', type(z), '**', type(p)\n                else:\n                    print 'OK:   ', type(z), '**', type(p)\n            except:\n                print 'error:', type(z), '**', type(p)\n    \n\n\n"""
1551,7728197,thouis,thouis,2012-10-19 20:40:33,2012-10-19 20:40:34,2012-10-19 20:40:34,closed,,1.3.0,2,11 - Bug;component: Other;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1551,b'Typos in docstrings for matlib.ones and matlib.zeros cause doctest failures (Trac #953)',"b""_Original ticket http://projects.scipy.org/numpy/ticket/953 on 2008-11-12 by @dopplershift, assigned to unknown._\n\nHere's a quick diff to fix some typos in the docstrings for matlib.zeros and matlib.ones.  They're causing 2 (of many) failures in the doctests for me."""
1550,7728194,thouis,charris,2012-10-19 20:40:31,2013-04-07 19:20:33,2013-04-07 19:20:33,closed,,,3,11 - Bug;component: numpy.core;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1550,b'Pickling an element of a recarray is silently broken (Trac #952)',"b""_Original ticket http://projects.scipy.org/numpy/ticket/952 on 2008-11-07 by trac user philbinj, assigned to unknown._\n\nAs per the summary. Unpickling a pickled recarray element returns garbage data.\n\nWith numpy.__version__=='1.3.0.dev5883':\n\n\n\n    In [1]: import numpy as np\n    \n    In [2]: dtype = [('r','f4'),('g','f4'),('b','f4')]\n    \n    In [3]: arr = np.ones((10,), dtype=dtype)\n    \n    In [4]: arr\n    Out[4]:\n    array([(1.0, 1.0, 1.0), (1.0, 1.0, 1.0), (1.0, 1.0, 1.0), (1.0, 1.0, 1.0),\n          (1.0, 1.0, 1.0), (1.0, 1.0, 1.0), (1.0, 1.0, 1.0), (1.0, 1.0, 1.0),\n          (1.0, 1.0, 1.0), (1.0, 1.0, 1.0)],\n         dtype=[('r', '<f4'), ('g', '<f4'), ('b', '<f4')])\n    \n    In [5]: arr[0]\n    Out[5]: (1.0, 1.0, 1.0)\n    \n    In [6]: import cPickle; cPickle.loads(cPickle.dumps(arr[0]))\n    Out[6]: (0.0, 0.0, 1.8643547392640242e-38)\n\n\n\n\n"""
1549,7728193,thouis,thouis,2012-10-19 20:40:29,2012-10-19 20:40:30,2012-10-19 20:40:30,closed,,1.3.0,1,11 - Bug;component: numpy.core;priority: low,https://api.github.com/repos/numpy/numpy/issues/1549,b'test_memmap.py leaves tmpfiles on RHE4 systems (Trac #951)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/951 on 2008-11-06 by @chanley, assigned to unknown._\n\nThis was discovered by one of my co-workers.  I have been able to reproduce this bug on a RHE4 system.  I was not able to reproduce it on my Mac OS X 10.5 machine.  I believe the test just needs to do a little cleanup when finishing.\n\n--\n\npython\nimport numpy\nnumpy.test()\n\nleaves 6 files behind in /tmp.\n\n\n    -rw-r--r--  1 sienkiew science   448 Nov  6 09:40 tmphdFtvk\n    -rw-r--r--  1 sienkiew science    11 Nov  6 09:40 tmp_9fU_9\n    -rw-------  1 sienkiew science    48 Nov  6 09:40 mmapnt7S_3\n    -rw-------  1 sienkiew science    48 Nov  6 09:40 mmapRJlNsL\n    -rw-------  1 sienkiew science     0 Nov  6 09:40 mmapHGlGTq\n    -rw-------  1 sienkiew science    48 Nov  6 09:40 mmapFllGqi\n\n\nI believe the offending source code is in numpy-1.1.0/numpy/core/tests/test_memmap.py \n\nThis behavior exists in the current svn trunk.\n\n'"
1548,7728192,thouis,thouis,2012-10-19 20:40:27,2012-10-19 20:40:28,2012-10-19 20:40:28,closed,,1.3.0,3,11 - Bug;component: numpy.core;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1548,b'multiply empty arrays gives nonzero result (Trac #950)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/950 on 2008-11-05 by trac user pierre, assigned to unknown._\n\nHi,\n\nI found this bug on mac os 10.5, with power pc and also on an intel computer (but not on a 64bit linux). I used numpy 1.1.1, 1.2, and the latest svn.\n\nIn [6]: np.dot(np.array([]).reshape(1,0), np.array([]).reshape(0,1))\nOut[6]: array([[ 4.00002862]])\n\nIn [7]: np.dot(np.array([]).reshape(2,0), np.array([]).reshape(0,3))\nOut[7]: \narray([[ 0.,  0.,  0.],\n       [ 0.,  0.,  0.]])\n\nThanks!\nPierre\n\n'"
1546,7728187,thouis,thouis,2012-10-19 20:40:22,2012-10-19 20:40:24,2012-10-19 20:40:24,closed,,,4,11 - Bug;component: Other;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1546,b'Incorrect shape after basic arithmetic involving masked objects (Trac #948)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/948 on 2008-11-04 by trac user dharland, assigned to unknown._\n\nAdding ma.masked to an array of size 1 may change its shape.\n\n\n\n    a = ma.arange(10)\n    print (a[1:2] + 1).shape\n      --> (1,)\n    print (a[1:2] + ma.masked).shape\n      --> ()  # INCORRECT, should be (1,)\n\n\n\nPossible patch attached.'"
1545,7728186,thouis,thouis,2012-10-19 20:40:21,2012-10-19 20:40:21,2012-10-19 20:40:21,closed,,1.3.0,1,11 - Bug;component: numpy.core;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1545,b'Segmentation fault with tile + char array (Trac #947)',"b""_Original ticket http://projects.scipy.org/numpy/ticket/947 on 2008-11-03 by @pv, assigned to unknown._\n\nThis crashes: (numpy r5968)\n\n\n    import numpy\n    numpy.tile(1,'A'*33)\n\n\n\nSee the original bug report in Scipy Trac: http://scipy.org/scipy/scipy/ticket/717"""
1544,7728183,thouis,thouis,2012-10-19 20:40:18,2012-10-19 20:40:19,2012-10-19 20:40:19,closed,,1.3.0,1,11 - Bug;component: numpy.core;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1544,b'Segmentation fault with numpy.clip + char array (Trac #946)',"b""_Original ticket http://projects.scipy.org/numpy/ticket/946 on 2008-11-03 by @pv, assigned to unknown._\n\nThis crashes: (eg. on numpy trunk r5968)\n\n\n    import numpy\n    obj = numpy.complex_()\n    obj.clip('rrr',1)\n\n\n\nSee the report in Scipy Trac from http://scipy.org/scipy/scipy/ticket/716\n"""
1542,7728180,thouis,thouis,2012-10-19 20:40:14,2012-10-19 20:40:15,2012-10-19 20:40:15,closed,,,3,11 - Bug;component: numpy.lib;priority: high,https://api.github.com/repos/numpy/numpy/issues/1542,b'polyint() does not work with complex arrays (Trac #944)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/944 on 2008-10-27 by @rkern, assigned to @rkern._\n\nThe return array is always created with dtype=float.'"
1540,7728176,thouis,thouis,2012-10-19 20:40:09,2012-10-19 20:40:10,2012-10-19 20:40:10,closed,,,1,11 - Bug;component: Other;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1540,b'installation problem -> cannot find -lgcc_s (Trac #942)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/942 on 2008-10-23 by trac user christoph, assigned to unknown._\n\nI\'m a newbie...\n\nI have a problem installing the numpy packages (tried 1.2.0 and down to 1.0.4). I couldnt fix my problem although I searched information in the web...\n\nThere is a problem after ""python setup.py install"",\n\n/usr/bin/ld: skipping incompatible /usr/lib/liblapack.so when searching for -lla pack\n/usr/bin/ld: skipping incompatible /usr/lib/liblapack.a when searching for -llap ack\n/usr/bin/ld: skipping incompatible /usr/lib/libblas.so when searching for -lblas\n/usr/bin/ld: skipping incompatible /usr/lib/libblas.a when searching for -lblas\n/usr/bin/ld: skipping incompatible /usr/lib/libg2c.so when searching for -lg2c\n/usr/bin/ld: skipping incompatible /usr/lib/libg2c.a when searching for -lg2c\n/usr/bin/ld: skipping incompatible /usr/lib/libfrtbegin.a when searching for -lf rtbegin\n/usr/bin/ld: skipping incompatible /usr/lib/libg2c.so when searching for -lg2c\n/usr/bin/ld: skipping incompatible /usr/lib/libg2c.a when searching for -lg2c\n/usr/bin/ld: cannot find -lgcc_s\ncollect2: ld returned 1 exit status\n/usr/bin/ld: skipping incompatible /usr/lib/liblapack.so when searching for -lla pack\n/usr/bin/ld: skipping incompatible /usr/lib/liblapack.a when searching for -llap ack\n/usr/bin/ld: skipping incompatible /usr/lib/libblas.so when searching for -lblas\n/usr/bin/ld: skipping incompatible /usr/lib/libblas.a when searching for -lblas\n/usr/bin/ld: skipping incompatible /usr/lib/libg2c.so when searching for -lg2c\n/usr/bin/ld: skipping incompatible /usr/lib/libg2c.a when searching for -lg2c\n/usr/bin/ld: skipping incompatible /usr/lib/libfrtbegin.a when searching for -lf rtbegin\n/usr/bin/ld: skipping incompatible /usr/lib/libg2c.so when searching for -lg2c\n/usr/bin/ld: skipping incompatible /usr/lib/libg2c.a when searching for -lg2c\n/usr/bin/ld: cannot find -lgcc_s\ncollect2: ld returned 1 exit status\nerror: Command ""/usr/local/bin/g77 -g -Wall -g -Wall -shared build/temp.linux-x8 6_64-2.5/numpy/linalg/lapack_litemodule.o build/temp.linux-x86_64-2.5/numpy/lina lg/python_xerbla.o -L/usr/lib -llapack -lblas -lg2c -o build/lib.linux-x86_64-2. 5/numpy/linalg/lapack_lite.so"" failed with exit status 1\n\nI saw the same problem here posted in another Ticket (sorry, cant find it again!), where the person posted ""unsetenv cflags"" was the solution. \nI tried this, but I could not solve my problem. \n\nSorry, I\'m quite a newbie, so I would be very glad if you could help me...\n\nThank you very very much,\nchristoph'"
1537,7728169,thouis,thouis,2012-10-19 20:40:02,2012-10-19 20:40:03,2012-10-19 20:40:03,closed,,1.5.0,4,11 - Bug;component: numpy.core;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1537,b'Reference counting bug in PyArray_TakeFrom in exceptional case (Trac #939)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/939 on 2008-10-20 by @mdboom, assigned to unknown._\n\nWhen calling .take() with an ""out"" kwarg and PyArray_TakeFrom throws an exception because the indices array is not convertible to PyArray_INTP, the ""out"" object is incorrectly decref\'d, causing a segfault in the Python garbage collector upon exit.\n\nI have attached a script to reproduce this error, and a proposed patch.  The patch Py_XINCREFs ""out"" before going to the cleanup ""fail"" section of PyArray_TakeFrom, since ""fail"" assumes an extra reference count.  An alternative is to add a second goto statement below the PyArray_XDECREF_ERR(ret) and go there instead.\n\nInitially reported in matplotlib tracker by Dav Clark here:\n\nhttps://sourceforge.net/tracker/index.php?func=detail&aid=2173204&group_id=80706&atid=560720'"
1535,7728165,thouis,thouis,2012-10-19 20:39:56,2012-10-19 20:39:59,2012-10-19 20:39:59,closed,,1.5.1,8,11 - Bug;component: numpy.linalg;priority: high,https://api.github.com/repos/numpy/numpy/issues/1535,b'Bad complex return values & documentation for linalg.lstsq (Trac #937)',"b""_Original ticket http://projects.scipy.org/numpy/ticket/937 on 2008-10-17 by @nilswagner01, assigned to unknown._\n\nI am confused by the output of lstsq in case of complex matrices.\nresidues (Euclidian norm) should be real.\n\n{{{>>> numpy.__version__\n'1.3.0.dev5945'\n}}}\n\nIf I run the attached file I get\n\n\n\n    residues should be real but is complex [-0.04002398-0.01310083j]\n    residues is empty [] 0\n\n\n"""
1534,7728163,thouis,thouis,2012-10-19 20:39:52,2012-10-19 20:39:53,2012-10-19 20:39:53,closed,,1.3.0,3,11 - Bug;component: Other;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1534,b'Hashing protocol violation. (Trac #936)',"b""_Original ticket http://projects.scipy.org/numpy/ticket/936 on 2008-10-15 by @charris, assigned to unknown._\n\nCopied from Robert Kern's post on numpy-discussion:\n\nActually, the problem is that we provide a hash function explicitly. In multiarraymodule.c:\n\n\n\n       PyArrayDescr_Type.tp_hash = (hashfunc)_Py_HashPointer;\n\n\n\nThat is a violation of the hashing protocol (objects which compare equal and are hashable need to hash equal), and should be fixed."""
1533,7728160,thouis,thouis,2012-10-19 20:39:51,2012-10-19 20:39:51,2012-10-19 20:39:51,closed,,,2,11 - Bug;component: numpy.core;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1533,b'Failure to build/install numpy (Trac #935)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/935 on 2008-10-15 by trac user asbjorn, assigned to unknown._\n\nHi.\n\nWhen running the following command ""python setup.py install --prefix=/private/afel/.local/, the compiling process begins. After 4 seconds, I get this error:\n\n\n\n    building py_modules sources\n    building extension ""numpy.core.multiarray"" sources\n      adding \'build/src.linux-x86_64-2.5/numpy/core/include/numpy/config.h\' to sources.\n      adding \'build/src.linux-x86_64-2.5/numpy/core/include/numpy/numpyconfig.h\' to sources.\n    executing numpy/core/code_generators/generate_array_api.py\n      adding \'build/src.linux-x86_64-2.5/numpy/core/include/numpy/__multiarray_api.h\' to sources.\n    conv_template:> build/src.linux-x86_64-2.5/numpy/core/src/scalartypes.inc\n    Traceback (most recent call last):\n      File ""setup.py"", line 96, in <module>\n        setup_package()\n      File ""setup.py"", line 89, in setup_package\n        configuration=configuration )\n      File ""/work/afel/python/numpy-1.1.1/numpy/distutils/core.py"", line 184, in setup\n        return old_setup(**new_attr)\n      File ""/private/afel/.local//lib/python2.5/distutils/core.py"", line 151, in setup\n        dist.run_commands()\n      File ""/private/afel/.local//lib/python2.5/distutils/dist.py"", line 974, in run_commands\n        self.run_command(cmd)\n      File ""/private/afel/.local//lib/python2.5/distutils/dist.py"", line 994, in run_command\n        cmd_obj.run()\n      File ""/work/afel/python/numpy-1.1.1/numpy/distutils/command/build.py"", line 40, in run\n        old_build.run(self)\n      File ""/private/afel/.local//lib/python2.5/distutils/command/build.py"", line 112, in run\n        self.run_command(cmd_name)\n      File ""/private/afel/.local//lib/python2.5/distutils/cmd.py"", line 333, in run_command\n        self.distribution.run_command(command)\n      File ""/private/afel/.local//lib/python2.5/distutils/dist.py"", line 994, in run_command\n        cmd_obj.run()\n      File ""/work/afel/python/numpy-1.1.1/numpy/distutils/command/build_src.py"", line 130, in run\n        self.build_sources()\n      File ""/work/afel/python/numpy-1.1.1/numpy/distutils/command/build_src.py"", line 147, in build_sources\n        self.build_extension_sources(ext)\n      File ""/work/afel/python/numpy-1.1.1/numpy/distutils/command/build_src.py"", line 252, in build_extension_sources\n        sources = self.template_sources(sources, ext)\n      File ""/work/afel/python/numpy-1.1.1/numpy/distutils/command/build_src.py"", line 359, in template_sources\n        outstr = process_c_file(source)\n      File ""/work/afel/python/numpy-1.1.1/numpy/distutils/conv_template.py"", line 252, in process_file\n        code = process_str(\'\'.join(lines))\n      File ""/work/afel/python/numpy-1.1.1/numpy/distutils/conv_template.py"", line 222, in process_str\n        code.extend(parse_string(astr, global_names, 0, 1))\n      File ""/work/afel/python/numpy-1.1.1/numpy/distutils/conv_template.py"", line 210, in parse_string\n        newcode = parse_string(text, newenv, newlevel, newline)\n      File ""/work/afel/python/numpy-1.1.1/numpy/distutils/conv_template.py"", line 216, in parse_string\n        code.append(replace_re.sub(replace, astr))\n      File ""/work/afel/python/numpy-1.1.1/numpy/distutils/conv_template.py"", line 187, in replace\n        raise KeyError, msg\n    KeyError: ""#line 558\\n: \'form\'""\n\n\n\nI\'ve tried with both the numpy-1.1.0 and numpy-1.2.0, both gives the same output.\nDoes anyone have any idea regarding what causes this error?'"
1532,7728157,thouis,thouis,2012-10-19 20:39:48,2012-10-19 20:39:49,2012-10-19 20:39:49,closed,,,3,11 - Bug;component: numpy.distutils;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1532,b'Documentation error in site.cfg.example (Trac #934)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/934 on 2008-10-15 by trac user net20, assigned to @dmcooke._\n\nsite.cfg.example claims that directories in library_dirs should be separated by os.pathsep (which is : on FreeBSD 7.0, Python 2.5).  It appears that they should actually be separated by commas, and that colon-separated directory lists are silently ignored.'"
1531,7728156,thouis,thouis,2012-10-19 20:39:46,2012-10-19 20:39:47,2012-10-19 20:39:47,closed,,,1,11 - Bug;component: numpy.linalg;priority: high,https://api.github.com/repos/numpy/numpy/issues/1531,b'Where is LU decomposition? (Trac #933)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/933 on 2008-10-15 by trac user moo, assigned to unknown._\n\nhttp://www.scipy.org/NumPy_for_Matlab_Users \nSuggests that your package includes LU decomposition. It\'s a good page, aside from being hilariously out of date, as http://scipy.org/doc/numpy_api_docs/numpy.linalg.html seems to suggest it doesn\'t even exist anymore, which is a lovely bunch of coconuts. Has it migrated to somewhere super obvious and I\'m just an idiot for relying on Google and common sense, or has that functionality been removed as a ""feature""?'"
1529,7728152,thouis,charris,2012-10-19 20:39:42,2013-07-09 13:54:02,2013-07-09 13:54:02,closed,,,9,11 - Bug;component: numpy.core;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1529,"b'Records containing zero-length items pickle just fine, but cannot be unpickled (Trac #931)'","b'_Original ticket http://projects.scipy.org/numpy/ticket/931 on 2008-10-14 by @njsmith, assigned to unknown._\n\nIn numpy 1.0.4 (I don\'t have any newer version convenient to test), it is possible to create a structured array with a zero-repeat-count entry.  Such an array works fine, and can be pickled as normal.  However, attempting to unpickle such an array fails.\n\nThis is admittedly a somewhat esoteric bit of functionality, but the bug shows up in a nasty way -- I had some data that took all night to generate and that I saved to disk in a pickle, and it was only by chance that I still had the original array in memory when I attempted to re-load the data and discovered the problem.  (And it contained a zero-length sub-record because the code in question handles a variable number of ""distractor"" variables, which happened to be 0 in this run.)\n\nSingle-line reproducer:\n  $ python -c \'import numpy, cPickle; cPickle.loads(cPickle.dumps(numpy.array([(1, [])], dtype=[(""a"", ""i""), (""b"", ""i"", 0)])))\'\n\n\nTranscript:\n\n\n    ~$ python\n    Python 2.5.2 (r252:60911, Jul 31 2008, 17:31:22) \n    [GCC 4.2.3 (Ubuntu 4.2.3-2ubuntu7)] on linux2\n    Type ""help"", ""copyright"", ""credits"" or ""license"" for more information.\n    >>> import numpy as np\n    >>> np.__version__\n    \'1.0.4\'\n    >>> a = np.array([(1, [])], dtype=[(""a"", np.int32), (""b"", np.int32, 0)])\n    >>> a\n    array([(1, [])], \n          dtype=[(\'a\', \'<i4\'), (\'b\', \'<i4\', 0)])\n    >>> import cPickle\n    >>> cPickle.dumps(a)\n    ### (long string elided)\n    >>> cPickle.loads(cPickle.dumps(a))\n    Traceback (most recent call last):\n      File ""<stdin>"", line 1, in <module>\n    TypeError: (\'data type not understood\', <type \'numpy.dtype\'>, (\'V0\', 0, 1))\n\n\n\nThanks.'"
1528,7728151,thouis,thouis,2012-10-19 20:39:41,2012-10-19 20:39:41,2012-10-19 20:39:41,closed,,,1,11 - Bug;component: numpy.core;priority: low,https://api.github.com/repos/numpy/numpy/issues/1528,b'empty_like and zeros_like behave differently from ones_like (Trac #930)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/930 on 2008-10-14 by trac user jbosch, assigned to unknown._\n\nThe `empty_like` and `zeros_like` creation functions, which are defined in python in numeric.py, differ in their handling of array-subtype input from `ones_like`, which is defined in C as a ufunc.\n\nIn particular, if a subtype of ndarray is passed to `empty_like` or `zeros_like`, neither `__array_wrap__` or `__array_finalize__` is called, which makes it impossible for subtypes to define any extra attributes they might need.\n\nI believe this behavior could be fixed entirely by switching from:\n\n`if isinstance(a,ndarray):`\n\nto\n\n`if type(a)==ndarray:`\n\nat the top of those two functions, though there are probably more efficient ways to accomplish the same thing.\n\n'"
1527,7728149,thouis,thouis,2012-10-19 20:39:38,2012-10-19 20:39:39,2012-10-19 20:39:39,closed,,,1,11 - Bug;component: numpy.core;priority: low,https://api.github.com/repos/numpy/numpy/issues/1527,b'empty_like and zeros_like behave differently from ones_like (Trac #929)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/929 on 2008-10-14 by trac user jbosch, assigned to unknown._\n\nThe `empty_like` and `zeros_like` creation functions, which are defined in python in numeric.py, differ in their handling of array-subtype input from `ones_like`, which is defined in C as a ufunc.\n\nIn particular, if a subtype of ndarray is passed to `empty_like` or `zeros_like`, neither `__array_wrap__` or `__array_finalize__` is called, which makes it impossible for subtypes to define any extra attributes they might need.\n\nI believe this behavior could be fixed entirely by switching from:\n\n`if isinstance(a,ndarray):`\n\nto\n\n`if type(a)==ndarray:`\n\nat the top of those two functions, though there are probably more efficient ways to accomplish the same thing.\n\n'"
1526,7728147,thouis,thouis,2012-10-19 20:39:35,2012-10-19 20:39:37,2012-10-19 20:39:37,closed,,,4,11 - Bug;component: numpy.lib;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1526,b'histogramdd() overflow error on high-dimension arrays (Trac #928)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/928 on 2008-10-13 by trac user jvansanten, assigned to unknown._\n\nWhen histogramdd() is called on a large array (say, 5 dimensions with 100 bins each), it tries to create a flat array of the bins. The size of the flat array is given by nbin.prod(). prod() uses the dtype of nbin by default (int32), which on arrays like the example above overflows into a negative integer, throwing an error.\n\nThis is of course not a problem until one starts working with gigantic histograms, but it can be tricky nonetheless. Forcing nbin.prod() to use a long would clean this up nic'"
1525,7728146,thouis,thouis,2012-10-19 20:39:32,2012-10-19 20:39:33,2012-10-19 20:39:33,closed,,,1,11 - Bug;component: numpy.numarray;priority: high,https://api.github.com/repos/numpy/numpy/issues/1525,b'automatic type-conversin fails for numpy array (Trac #927)',"b""_Original ticket http://projects.scipy.org/numpy/ticket/927 on 2008-10-08 by trac user Qwertz, assigned to unknown._\n\n\n\n\n    #usually, automatic type conversion in python works like this\n    a = 2\n    a /= 3.0\n    #a = 0.66666, type(a) is float\n    \n    #in numpy an analogous conversion fails\n    a = numpy.arange(4)\n    #a is array([0, 1, 2, 3])\n    a /= 2.1\n    #a is array([0, 0, 0, 1]) <- bug\n    #a stays an int array, that's inconsistant with the type conversion shown above\n    #shall be like the following instead\n    a = a/2.1 #works\n    #array([ 0.        ,  0.47619048,  0.95238095,  1.42857143])\n\n\n\n"""
1524,7728143,thouis,thouis,2012-10-19 20:39:30,2012-10-19 20:39:31,2012-10-19 20:39:31,closed,,,4,11 - Bug;component: Other;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1524,b'NumPy array constructors are not honoring the shape in dtype (Trac #926)',"b""_Original ticket http://projects.scipy.org/numpy/ticket/926 on 2008-10-06 by @FrancescAlted, assigned to unknown._\n\nThe array constructors are shifting the shape in specified dtype into the ndarray object itself:\n\n\n\n    >>> a=numpy.empty([], dtype=('float64',(2, 2)))\n    >>> a.shape\n    (2, 2)\n    >>> a.dtype.shape\n    ()\n\n\n\nwhile I would expect:\n\n\n\n    >>> a=numpy.empty([], dtype=('float64',(2, 2)))\n    >>> a.shape\n    ()\n    >>> a.dtype.shape\n    (2,2)\n\n\n\nI need this in order to implement the capability to specify multidimensional atoms in !PyTables.  You can see a little discussion about this issue in:\n\nhttp://www.pytables.org/trac/ticket/133\n\nThanks"""
1523,7728140,thouis,thouis,2012-10-19 20:39:28,2012-10-19 20:39:29,2012-10-19 20:39:29,closed,,1.3.0,1,11 - Bug;component: Other;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1523,b'choose does not broadcast index array appropriately (Trac #925)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/925 on 2008-10-03 by @teoliphant, assigned to unknown._\n\nThe advertised behavior of choose(choices, sequence_of_arrays) is that the choices array and all the arrays in the sequence must be broadcastable to the same shape which is the shape of the output. \n\nHowever, NumPy does not look at the shape of the choices array, only the sequence_of_arrays. \n\nThis requires an adaptation of the code in PyArray_Choose function in C.   Probably the easiest thing is to construct a MultiIterator object to handle the broadcasting internal to that function, construct the output, and then fill appropriately.'"
1522,7728137,thouis,thouis,2012-10-19 20:39:25,2012-10-19 20:39:27,2012-10-19 20:39:27,closed,,,3,11 - Bug;component: numpy.core;priority: high,https://api.github.com/repos/numpy/numpy/issues/1522,b'problem with summing large array of float32 (Trac #924)',"b""_Original ticket http://projects.scipy.org/numpy/ticket/924 on 2008-10-03 by trac user emil, assigned to unknown._\n\nIn medical imaging large arrays of single floats are often used. In summing over such an\narray I discovered the following problem:\na=ones([840,2200,60],float32)\nsum(a.flatten()) yields 16777216 (4096^2)   ???\n\nHowever, sum(sum(sum(a,axis=0),axis=0),axis=0) yields 110880000 the correct result.\nThe problem doesn't occur with float64\ndot(a.flatten() , a.flatten() ) also gives 16777216\n\nI don't think the problem lies only with numpy. I tried to circumvent the problem by\nwriting my own summation in fortran (gfortran) and using f2py. The following fortran snippet\ngave me also incorrect results\n\n       Real*4 sum\n\n       sum = 0.\n\n       do i = 1,840\n             do j = 1,2200\n                    do k = 1,60\n                            sum = sum +1.0\n                    end do\n              end do\n       end do\n\nsum ends up being 16777216 again! the incorrect result!\non the other hand the following works:\n       Real*4 sum1, sum\n\n       sum = 0.\n\n       do i = 1,840\n             sum1 = 0.\n             do j = 1,2200\n                    do k = 1,60\n                            sum1 = sum1 +1.0\n                    end do\n              end do\n             sum = sum+sum1\n       end do      \n\n\nThe same problem seems to come up in matlab.\n\nMy computer has amd64's (opteron) and is running suse linux"""
1521,7728136,thouis,thouis,2012-10-19 20:39:22,2012-10-19 20:39:24,2012-10-19 20:39:24,closed,,1.3.0,7,11 - Bug;component: numpy.random;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1521,"b'numpy.random.logseries - incorrect convergence for k=1, k=2 (Trac #923)'","b""_Original ticket http://projects.scipy.org/numpy/ticket/923 on 2008-10-02 by @josef-pkt, assigned to unknown._\n\nrandom numbers generated by numpy.random.logseries do not converge to the theoretical distribution:\n\nNote: I checked with sample size 1 million, but numpy.random.logseries converges already for smaller sample sizes to the wrong values for k=1 and k=2.\n\nFor probability paramater pr = 0.8, the random number generator converges to a\nfrequency for k=1 at 39.8 %, while the theoretical probability mass is\n49.71%, k=2 is oversampled, other k's look ok\n\n\n\n    check frequency of k=1 and k=2 at N = 1000000\n    0.398406 0.296465\n    pmf at k = 1 and k=2 with formula\n    [ 0.4971  0.1988]\n\n\n\nFor probability paramater pr = 0.3, the results are not as bad, but are still off:\nfrequency for k=1 at 82.6 %, while the theoretical probability mass is 84.11%\n\n\n\n    check frequency of k=1 and k=2 at N = 1000000\n    0.826006 0.141244\n    pmf at k = 1 and k=2 with formula\n    [ 0.8411  0.1262]\n\n\n\nbelow is a quick script for checking this\n\nJosef\n\n\n\n    import numpy as np\n    from scipy import stats\n    \n    pr = 0.8\n    np.set_printoptions(precision=2, suppress=True)\n    \n    # calculation for N=1million takes some time\n    for N in [1000, 10000, 10000, 1000000]:\n        rvsn=np.random.logseries(pr,size=N)\n        fr=stats.itemfreq(rvsn)\n        pmfs=stats.logser.pmf(fr[:,0],pr)*100\n        print 'log series sample frequency and pmf (in %) with N = ', N\n        print np.column_stack((fr[:,0],fr[:,1]*100.0/N,pmfs))\n    \n    np.set_printoptions(precision=4, suppress=True)\n    \n    print 'check frequency of k=1 and k=2 at N = ', N\n    print np.sum(rvsn==1)/float(N),\n    print np.sum(rvsn==2)/float(N)\n    \n    k = np.array([1,2])\n    print 'pmf at k = 1 and k=2 with formula'\n    print -pr**k * 1.0 / k / np.log(1-pr)\n\n\n"""
1520,7728134,thouis,thouis,2012-10-19 20:39:20,2012-10-19 20:39:20,2012-10-19 20:39:20,closed,,,1,11 - Bug;component: numpy.random;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1520,b'numpy.random.hypergeometric: error for some cases (Trac #922)',"b""_Original ticket http://projects.scipy.org/numpy/ticket/922 on 2008-10-02 by @josef-pkt, assigned to unknown._\n\nIn my fuzz testing of scipy stats, I get sometimes a test failure. I think there is something wrong, random numbers are outside of support of the distribution, with numpy.random.hypergeometric for some cases:\n\n\n\n    >>> np.version.version\n    '1.2.0rc2'\n\n\n\nsignature:\nhypergeometric(ngood, nbad, nsample, size=None)\n\nwhen sample size (number of draws, nsample) is small then random numbers look ok:\n\n\n    >>> np.random.hypergeometric(3,18,8,size=10)\n    array([2, 1, 0, 2, 1, 1, 2, 1, 0, 3])\n    >>> np.random.hypergeometric(3,18,9,size=10)\n    array([2, 2, 0, 0, 1, 0, 1, 1, 3, 1])\n    >>> np.random.hypergeometric(3,18,10,size=10)\n    array([0, 2, 2, 0, 2, 2, 2, 0, 0, 2])\n\n\n\nfor sample size larger than 11 the random number are larger than possible (there are only 3 good balls in urn):\n\n\n\n    >>> np.random.hypergeometric(3,18,11,size=10)\n    array([18, 16, 16, 17, 18, 17, 18, 17, 17, 16])\n    >>> np.random.hypergeometric(3,18,12,size=10)\n    array([17, 16, 16, 18, 17, 17, 18, 17, 16, 17])\n    >>> np.random.hypergeometric(3,18,13,size=10)\n    array([18, 17, 17, 16, 17, 17, 16, 16, 18, 16])\n    >>> np.random.hypergeometric(3,18,14,size=10)\n    array([16, 17, 17, 17, 17, 18, 17, 16, 18, 17])\n    >>> np.random.hypergeometric(3,18,15,size=10)\n    array([18, 18, 17, 16, 17, 16, 17, 17, 18, 18])\n\n\n\n\nreversing the number of good and bad balls -> ok for small sample size:\n\n\n\n    >>> np.random.hypergeometric(18,3,5,size=10)    #ok\n    array([5, 4, 5, 5, 4, 4, 4, 4, 5, 5])\n    >>> np.random.hypergeometric(18,3,10,size=10)    #ok\n    array([9, 8, 9, 7, 8, 8, 7, 8, 8, 9])\n\n\n\nnegative numbers for sample size >= 11:\n\n\n\n    >>> np.random.hypergeometric(18,3,11,size=10)\n    array([-5, -5, -5, -7, -4, -5, -5, -4, -6, -6])\n    >>> np.random.hypergeometric(18,3,13,size=10)\n    array([-3, -5, -5, -4, -4, -4, -5, -5, -3, -4])\n    >>> np.random.hypergeometric(18,3,14,size=10)\n    array([-4, -3, -4, -3, -2, -4, -3, -4, -2, -4])\n    >>> np.random.hypergeometric(18,3,15,size=10)\n    array([-2, -2, -1, -1, -3, -2, -2, -2, -1, -2])\n    >>> np.random.hypergeometric(18,3,16,size=10)\n    array([-1, -1,  0, -1,  0, -2, -1, -2, -1, -2])\n\n"""
1519,7728130,thouis,thouis,2012-10-19 20:39:16,2014-01-02 20:07:49,2012-10-19 20:39:18,closed,,1.3.0,7,11 - Bug;component: numpy.random;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1519,b'numpy.random.hypergeometric: error for some cases (Trac #921)',"b""_Original ticket http://projects.scipy.org/numpy/ticket/921 on 2008-10-02 by @josef-pkt, assigned to unknown._\n\nIn my fuzz testing of scipy stats, I get sometimes a test failure. I think there is something wrong, random numbers are outside of support of the distribution, with numpy.random.hypergeometric for some cases:\n\n\n\n    >>> np.version.version\n    '1.2.0rc2'\n\n\n\nsignature:\nhypergeometric(ngood, nbad, nsample, size=None)\n\nwhen sample size (number of draws, nsample) is small then random numbers look ok:\n\n\n    >>> np.random.hypergeometric(3,18,8,size=10)\n    array([2, 1, 0, 2, 1, 1, 2, 1, 0, 3])\n    >>> np.random.hypergeometric(3,18,9,size=10)\n    array([2, 2, 0, 0, 1, 0, 1, 1, 3, 1])\n    >>> np.random.hypergeometric(3,18,10,size=10)\n    array([0, 2, 2, 0, 2, 2, 2, 0, 0, 2])\n\n\n\nfor sample size larger than 11 the random number are larger than possible (there are only 3 good balls in urn):\n\n\n\n    >>> np.random.hypergeometric(3,18,11,size=10)\n    array([18, 16, 16, 17, 18, 17, 18, 17, 17, 16])\n    >>> np.random.hypergeometric(3,18,12,size=10)\n    array([17, 16, 16, 18, 17, 17, 18, 17, 16, 17])\n    >>> np.random.hypergeometric(3,18,13,size=10)\n    array([18, 17, 17, 16, 17, 17, 16, 16, 18, 16])\n    >>> np.random.hypergeometric(3,18,14,size=10)\n    array([16, 17, 17, 17, 17, 18, 17, 16, 18, 17])\n    >>> np.random.hypergeometric(3,18,15,size=10)\n    array([18, 18, 17, 16, 17, 16, 17, 17, 18, 18])\n\n\n\n\nreversing the number of good and bad balls -> ok for small sample size:\n\n\n\n    >>> np.random.hypergeometric(18,3,5,size=10)    #ok\n    array([5, 4, 5, 5, 4, 4, 4, 4, 5, 5])\n    >>> np.random.hypergeometric(18,3,10,size=10)    #ok\n    array([9, 8, 9, 7, 8, 8, 7, 8, 8, 9])\n\n\n\nnegative numbers for sample size >= 11:\n\n\n\n    >>> np.random.hypergeometric(18,3,11,size=10)\n    array([-5, -5, -5, -7, -4, -5, -5, -4, -6, -6])\n    >>> np.random.hypergeometric(18,3,13,size=10)\n    array([-3, -5, -5, -4, -4, -4, -5, -5, -3, -4])\n    >>> np.random.hypergeometric(18,3,14,size=10)\n    array([-4, -3, -4, -3, -2, -4, -3, -4, -2, -4])\n    >>> np.random.hypergeometric(18,3,15,size=10)\n    array([-2, -2, -1, -1, -3, -2, -2, -2, -1, -2])\n    >>> np.random.hypergeometric(18,3,16,size=10)\n    array([-1, -1,  0, -1,  0, -2, -1, -2, -1, -2])\n\n"""
1518,7728129,thouis,thouis,2012-10-19 20:39:13,2012-10-19 20:39:14,2012-10-19 20:39:14,closed,,1.3.0,4,11 - Bug;component: Other;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1518,"b'np.nan has negative sign, should be positive. (Trac #920)'","b""_Original ticket http://projects.scipy.org/numpy/ticket/920 on 2008-10-02 by @charris, assigned to unknown._\n\nOn my reverse endian machine\n\n\n\n    In [3]: array([np.nan]).tostring()\n    Out[3]: '\\x00\\x00\\x00\\x00\\x00\\x00\\xf8\\xff'\n\n\n"""
1516,7728122,thouis,thouis,2012-10-19 20:39:08,2012-10-19 20:39:08,2012-10-19 20:39:08,closed,,1.3.0,1,11 - Bug;component: numpy.core;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1516,b'SETITEM and GETITEM macros end with semicolons (Trac #918)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/918 on 2008-09-25 by trac user jason, assigned to unknown._\n\nThe macros PyArray_SETITEM (and PyArray_GETITEM) in ndarrayobject.h end in semicolons, which causes problems as detailed below.  Can we remove the semicolon, but wrap the entire macro body in parentheses?  Are there other macros that end in semicolons that shouldn\'t?\n\n(In the email below, the replies are from Chuck Harris)\n\n\n    On Wed, Sep 24, 2008 at 9:25 PM, <jason-sage@creativetrax.com> wrote:\n    \n        I\'m working on getting the Sage matrices for real/complex doubles to use\n        numpy as a backend.  In this, I\'m using the PyArray_SETITEM macro from\n        within Cython.  However, Cython wraps the macro in a function call to\n        convert the output to a Python value:\n    \n         __pyx_1 = PyInt_FromLong(PyArray_SETITEM(__pyx_v_self->_matrix_numpy,\n        PyArray_GETPTR2(__pyx_v_self->_matrix_numpy, __pyx_v_i, __pyx_v_j),\n        __pyx_v_value));\n    \n        However, after preprocessing, because of the semicolon at the end of the\n        SETITEM macro, we get:\n    \n    \n    Hmm, not good. IMHO, macros should be ended with semicolons *when used*, not in themselves.\n     \n    \n    \n    \n        PyInt_FromLong(((PyArrayObject\n        *)(__pyx_v_self->_matrix_numpy))->descr->f->setitem((PyObject\n        *)(__pyx_v_value), (char *)(((void *)((((PyArrayObject\n        *)(__pyx_v_self->_matrix_numpy))->data) + (__pyx_v_i)*(((PyArrayObject\n        *)(__pyx_v_self->_matrix_numpy))->strides)[0] +\n        (__pyx_v_j)*(((PyArrayObject\n        *)(__pyx_v_self->_matrix_numpy))->strides)[1]))), (PyArrayObject\n        *)(__pyx_v_self->_matrix_numpy)););\n    \n        Note that at the end, we have a ""););"".  The file refuses to compile.\n        Presumably, since SETITEM returns a value, wrapping the return value in\n        a function call seems to be a reasonable thing to do.  Would there be a\n        problem in eliminating the semicolon and instead wrapping the entire\n        function body in parenthesis?\n    \n    \n    We should do this if possible. Open a ticket.\n     \n    \n    \n        I noticed that GETITEM also ended in a semicolon, though I didn\'t have\n        the same problem as above since Cython didn\'t automatically wrap it in a\n        function call (I\'m not even sure if it returns something).\n    \n        On a side note, is the above the best way (i.e., fastest way given an\n        arbitrary numpy array) to set/get\n        an element?\n    \n    \n    Don\'t know.\n    \n    Chuck\n\n'"
1515,7728121,thouis,thouis,2012-10-19 20:39:05,2012-10-19 20:39:06,2012-10-19 20:39:06,closed,,1.3.0,3,11 - Bug;component: numpy.core;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1515,"b""allow dtype='c' in chararray. (Trac #917)""","b""_Original ticket http://projects.scipy.org/numpy/ticket/917 on 2008-09-24 by trac user brentp, assigned to unknown._\n\ncurrently this fails:\n\n\n    np.array('abc1', dtype='c').view(np.chararray)\n\n\nbecause chararray checks for dtype.char in 'SUb'\n\nthe 1 character change in the patch (+ test) allows chararray to accept arrays with dtype='c'.\n"""
1514,7728117,thouis,charris,2012-10-19 20:39:02,2014-02-18 16:14:51,2014-02-18 16:14:51,closed,,,6,11 - Bug;component: numpy.core;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1514,b'Inconsistency in type equality (Trac #916)',"b""_Original ticket http://projects.scipy.org/numpy/ticket/916 on 2008-09-22 by @FrancescAlted, assigned to unknown._\n\nIt seems to me that there is a inconsistency between the comparisons of dtype and dtype.type attributes of a !NumPy array.  The next shows the problem (ran on a 32-bit machine):\n\n\n\n    In [20]: a=numpy.array([2], 'i')\n    \n    In [21]: b=numpy.array([2], 'l')\n    \n    In [22]: a.dtype == b.dtype\n    Out[22]: True\n    \n    In [23]: a.dtype.type == b.dtype.type\n    Out[23]: False\n    \n    In [24]: a.dtype.type\n    Out[24]: <type 'numpy.int32'>\n    \n    In [25]: b.dtype.type\n    Out[25]: <type 'numpy.int32'>\n\n\n\nI'd like to use arr.dtype.type instead of arr.dtype alone because there are situations where I want to check only for the raw type, without byteordering, shape or other considerations.\n\nThanks,\nFrancesc"""
1513,7728116,thouis,thouis,2012-10-19 20:38:59,2012-10-22 14:31:46,2012-10-19 20:39:00,closed,,1.3.0,2,11 - Bug;component: Other;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1513,b'Simpler math configuration (Trac #915)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/915 on 2008-09-20 by @cournape, assigned to @cournape._\n\nHere is a patch to simplify math configuration: instead of relying on heuristics for presence of some function, each function is checked separately:\n - To avoid long configuration times on standard compliant platforms, a check_funcs_once function to distutils config command has been added. Build times with gcc on linux and mac os x are the same as before.\n - I have tested the patch on numpy: it passes all tests on linux (32 bits), mac os X, mingw and Visual Studio 2003.'"
1512,7727398,numpy-gitbot,numpy-gitbot,2012-10-19 20:07:14,2012-10-23 02:39:51,2012-10-19 20:08:30,closed,,1.3.0,3,11 - Bug;component: Other;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1512,b'min is bogus if nan is in the array (Trac #914)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/914 on 2008-09-19 by @cournape, assigned to unknown._\n\n\n\n    #!python\n    import numpy as np\n    np.min(np.array([-1, np.nan, 2]))\n\n\n\nReturns 2, not the (correct) -1.'"
1511,7727373,numpy-gitbot,numpy-gitbot,2012-10-19 20:05:32,2012-10-23 02:39:49,2012-10-19 20:07:13,closed,,1.3.0,8,11 - Bug;component: Other;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1511,b'max is bogus if nan is in the array (Trac #913)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/913 on 2008-09-19 by @cournape, assigned to unknown._\n\n\n\n    #!python\n    import numpy as np\n    np.max(np.array([-1, np.nan, -2]))\n\n\n\nReturns -2, not -1.'"
1510,7727371,numpy-gitbot,numpy-gitbot,2012-10-19 20:05:29,2012-10-19 20:05:30,2012-10-19 20:05:30,closed,,1.3.0,3,11 - Bug;component: numpy.testing;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1510,b'numpy.test does not find any test on cygwin (Trac #912)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/912 on 2008-09-13 by @cournape, assigned to @cournape._\n\nI think it is because for some reason, all test scripts are executable when checking out numpy with subversion on cygwin, and nose do not execute those. If I remove the executable bit of all test scripts, then it works.'"
1509,7727369,numpy-gitbot,numpy-gitbot,2012-10-19 20:05:25,2012-10-19 20:05:27,2012-10-19 20:05:27,closed,,,2,11 - Bug;component: numpy.core;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1509,b'python2.4: indexing list with Numpy some integer scalars does not work (Trac #911)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/911 on 2008-09-11 by @pv, assigned to unknown._\n\nOn a 64-bit platform with Python 2.4 indexing a list with a Numpy integer scalar of non-platform native size fails:\n\n\n    Python 2.4.4 (#2, Apr 16 2008, 17:58:59) \n    [GCC 4.1.2 20061115 (prerelease) (Debian 4.1.1-21)] on linux2\n    Type ""help"", ""copyright"", ""credits"" or ""license"" for more information.\n    >>> import numpy as np\n    >>> np.__version__\n    \'1.2.0rc2\'\n    >>> x=[1,2,3]\n    >>> x[np.int32(0)]\n    Traceback (most recent call last):\n      File ""<stdin>"", line 1, in ?\n    TypeError: list indices must be integers\n    >>> x[np.int64(0)]\n    1\n    >>> np.int_ is np.int64\n    True\n\n\n\nIt works with Numpy on Python 2.5:\n\n\n    Python 2.5 (release25-maint, Jul 23 2008, 18:15:29) \n    [GCC 4.1.2 20061115 (prerelease) (Debian 4.1.1-21)] on linux2\n    Type ""help"", ""copyright"", ""credits"" or ""license"" for more information.\n    >>> import numpy as np\n    >>> np.__version__\n    \'1.1.1\'\n    >>> x=[1,2,3]\n    >>> x[np.int32(0)]\n    1\n    >>> x[np.int64(0)]\n    1\n    >>> np.int_ is np.int64\n    True\n\n\n'"
1508,7727368,numpy-gitbot,numpy-gitbot,2012-10-19 20:05:23,2012-10-23 02:39:44,2012-10-19 20:05:24,closed,,1.3.0,1,11 - Bug;component: numpy.core;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1508,b'Some test issues with Python 2.6 (Trac #910)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/910 on 2008-09-10 by @alberts, assigned to unknown._\n\nI\'ve gotten nose 0.10.3 up and running with !Python 2.6 by setting `__hash__` in !ContextSuite to `object.__hash__`.\n\nNow, when I run the test suite with the latest Python and !NumPy trunks, I see the following issues:\n\n\n\n    /opt/python26/lib/python2.6/site-packages/numpy/lib/tests/test_io.py:68: SyntaxWarning: assertion is always true, perhaps remove parentheses?\n\n\n\n\n    /opt/python26/lib/python2.6/site-packages/numpy/ma/tests/test_core.py:1350: SyntaxWarning: assertion is always true, perhaps remove parentheses?\n\n\n\n\n    /opt/python26/lib/python2.6/site-packages/numpy/ma/tests/test_core.py:1357: SyntaxWarning: assertion is always true, perhaps remove parentheses?\n\n\n\n\n    /opt/python26/lib/python2.6/site-packages/numpy/ma/tests/test_core.py:2024: SyntaxWarning: assertion is always true, perhaps remove parentheses?\n\n\n\n\n    ======================================================================\n    ERROR: Tests the min/max functions with explicit outputs\n    ----------------------------------------------------------------------\n    Traceback (most recent call last):\n      File ""/opt/python26/lib/python2.6/site-packages/numpy/ma/tests/test_core.py"", line 688, in test_minmax_funcs_with_output\n        result = npfunc(xm,axis=0,out=nout)\n      File ""/opt/python26/lib/python2.6/site-packages/numpy/core/fromnumeric.py"", line 1525, in amin\n        return amin(axis, out)\n      File ""/opt/python26/lib/python2.6/site-packages/numpy/ma/core.py"", line 2882, in min\n        np.putmask(out, newmask, np.nan)\n    ValueError: cannot convert float NaN to integer\n\n\n\nThe following failure happens on Windows with Python 2.6b2 too:\n\n\n\n    ======================================================================\n    FAIL: test_umath.TestComplexFunctions.test_against_cmath\n    ----------------------------------------------------------------------\n    Traceback (most recent call last):\n      File ""/opt/python26/lib/python2.6/site-packages/nose/case.py"", line 182, in runTest\n        self.test(*self.arg)\n      File ""/opt/python26/lib/python2.6/site-packages/numpy/core/tests/test_umath.py"", line 266, in test_against_cmath\n        assert abs(a - b) < atol, ""%s %s: %s; cmath: %s""%(fname,p,a,b)\n    AssertionError: arcsin 2: (1.57079632679-1.31695789692j); cmath: (1.57079632679+1.31695789692j)\n\n'"
1506,7727328,numpy-gitbot,numpy-gitbot,2012-10-19 20:03:43,2012-10-19 20:03:44,2012-10-19 20:03:44,closed,,1.2.1,3,11 - Bug;component: Other;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1506,b'Infinite loop in loadtxt of empty file (Trac #908)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/908 on 2008-09-09 by @pv, assigned to unknown._\n\nloadtxt enters an infinite loop when one attempts to load an empty file:\n\n\n    $> foo.dat\n    $ python -c \'import numpy; print numpy.__version__; numpy.loadtxt(""foo.dat"")\'\n    1.1.1\n    [... does not terminate ...]\n\n'"
1504,7727322,numpy-gitbot,numpy-gitbot,2012-10-19 20:03:39,2012-10-19 20:03:39,2012-10-19 20:03:39,closed,,1.2.0,1,11 - Bug;component: numpy.ma;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1504,b'Deepcopy does not copy _mask attribute of a masked array object (Trac #906)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/906 on 2008-09-05 by trac user vladan, assigned to @pierregm._\n\nChanging _mask attribute of a deep copy of a masked array also changes the original masked array. Example:\n\nIn [1]: import numpy\n\nIn [2]: from copy import deepcopy\n\nIn [3]: mar = numpy.ma.array([0,1,2], mask=[False,True,False])\n\nIn [4]: mar_copy = deepcopy(mar)\n\nIn [5]: mar_copy._mask[1] = False\n\nIn [6]: mar\n\nOut[6]:\nmasked_array(data = [0 1 2],\n      mask = [False False False],\n      fill_value=999999)\n\nInterestingly, changing _mask of the original masked array does not change a deep copy of that array.\n '"
1503,7727320,numpy-gitbot,numpy-gitbot,2012-10-19 20:03:37,2012-10-19 20:03:37,2012-10-19 20:03:37,closed,,1.2.0,1,11 - Bug;component: numpy.lib;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1503,b'numpy.loadtxt usecols argument no longer accepts numpy arrays (Trac #905)',"b""_Original ticket http://projects.scipy.org/numpy/ticket/905 on 2008-09-04 by @dopplershift, assigned to unknown._\n\nt appears that the usecols argument to loadtxt no longer accepts numpy arrays:\n\n>>>from StringIO import StringIO\n>>>text = StringIO('1 2 3\\n4 5 6\\n')\n>>>data = np.loadtxt(text, usecols=np.arange(1,3))\n\nValueError                                Traceback (most recent call last)\n\n/usr/lib64/python2.5/site-packages/numpy/lib/io.py in loadtxt(fname, dtype, comments, delimiter, converters, skiprows, usecols, unpack)\n    323         first_line = fh.readline()\n    324         first_vals = split_line(first_line)\n--> 325     N = len(usecols or first_vals)\n    326\n    327     dtype_types = flatten_dtype(dtype)\n\nValueError: The truth value of an array with more than one element is ambiguous. Use a.any() or a.all()\n\n>>>data = np.loadtxt(text, usecols=np.arange(1,3).tolist())\n>>>data\narray([[ 2.,  3.],\n       [ 5.,  6.]])\n\nBefore the fix and refactoring of loadtxt in 1.1.1, converting to a list was not necessary.  I think the assumptions just kind of cropped in (exploiting certain list functionality like list.find for ease of code).\n\nI've attached a simple patch against HEAD that does the obvious fix and converts usecols to a list if it's not None.  This should allow almost any iterable (including tuples, which are also currently broken but used in the docstring) to be passed in to usecols."""
1502,7727285,numpy-gitbot,charris,2012-10-19 20:02:19,2014-02-18 16:11:44,2014-02-18 16:11:44,closed,,,7,11 - Bug;component: Other;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1502,b'Ctypes Test failure on cygwin (Trac #904)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/904 on 2008-09-01 by @cournape, assigned to @rgommers._\n\n\n\n    ======================================================================\n    ERROR: test_basic (test_ctypeslib.TestLoadLibrary)\n    ----------------------------------------------------------------------\n    Traceback (most recent call last):\n      File ""/usr/lib/python2.5/site-packages/numpy/tests/test_ctypeslib.py"", line 9, in test_basic\n        np.core.multiarray.__file__)\n      File ""/usr/lib/python2.5/site-packages/numpy/ctypeslib.py"", line 111, in load_library\n        raise e\n    OSError: No such file or directory\n    \n    ----------------------------------------------------------------------\n    Ran 1573 tests in 19.562s\n\n\n\nWith revision r5738'"
1501,7727283,numpy-gitbot,numpy-gitbot,2012-10-19 20:02:17,2012-10-23 02:39:43,2012-10-19 20:02:18,closed,,1.2.0,2,11 - Bug;component: Other;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1501,b'Compilation fails on Cygwin (Trac #903)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/903 on 2008-09-01 by @mdehoon, assigned to unknown._\n\ncompiling C sources\nC compiler: gcc -fno-strict-aliasing -DNDEBUG -g -O3 -Wall -Wstrict-prototypes\n\ncompile options: \'-Ibuild/src.cygwin-1.5.25-i686-2.5/numpy/core/src -Inumpy/core\n/include -Ibuild/src.cygwin-1.5.25-i686-2.5/numpy/core/include/numpy -Inumpy/cor\ne/src -Inumpy/core/include -I/usr/include/python2.5 -I/usr/include/python2.5 -c\'\n\ngcc: build/src.cygwin-1.5.25-i686-2.5/numpy/core/src/umathmodule.c\nIn file included from numpy/core/src/umathmodule.c.src:2182:\nnumpy/core/src/ufuncobject.c: In function `_extract_pyvals\':\nnumpy/core/src/ufuncobject.c:1166: warning: int format, long int arg (arg 4)\nnumpy/core/src/ufuncobject.c:1166: warning: int format, long int arg (arg 5)\n/cygdrive/c/DOCUME~1/mdehoon/LOCALS~1/Temp/ccpLcg0M.s: Assembler messages:\n/cygdrive/c/DOCUME~1/mdehoon/LOCALS~1/Temp/ccpLcg0M.s:72840: Error: suffix or op\nerands invalid for `fnstsw\'\n/cygdrive/c/DOCUME~1/mdehoon/LOCALS~1/Temp/ccpLcg0M.s:73095: Error: suffix or op\nerands invalid for `fnstsw\'\nIn file included from numpy/core/src/umathmodule.c.src:2182:\nnumpy/core/src/ufuncobject.c: In function `_extract_pyvals\':\nnumpy/core/src/ufuncobject.c:1166: warning: int format, long int arg (arg 4)\nnumpy/core/src/ufuncobject.c:1166: warning: int format, long int arg (arg 5)\n/cygdrive/c/DOCUME~1/mdehoon/LOCALS~1/Temp/ccpLcg0M.s: Assembler messages:\n/cygdrive/c/DOCUME~1/mdehoon/LOCALS~1/Temp/ccpLcg0M.s:72840: Error: suffix or op\nerands invalid for `fnstsw\'\n/cygdrive/c/DOCUME~1/mdehoon/LOCALS~1/Temp/ccpLcg0M.s:73095: Error: suffix or op\nerands invalid for `fnstsw\'\nerror: Command ""gcc -fno-strict-aliasing -DNDEBUG -g -O3 -Wall -Wstrict-prototyp\nes -Ibuild/src.cygwin-1.5.25-i686-2.5/numpy/core/src -Inumpy/core/include -Ibuil\nd/src.cygwin-1.5.25-i686-2.5/numpy/core/include/numpy -Inumpy/core/src -Inumpy/c\nore/include -I/usr/include/python2.5 -I/usr/include/python2.5 -c build/src.cygwi\nn-1.5.25-i686-2.5/numpy/core/src/umathmodule.c -o build/temp.cygwin-1.5.25-i686-\n2.5/build/src.cygwin-1.5.25-i686-2.5/numpy/core/src/umathmodule.o"" failed with e\nxit status 1'"
1500,7727241,numpy-gitbot,numpy-gitbot,2012-10-19 20:00:34,2012-10-23 02:39:41,2012-10-19 20:02:15,closed,,1.3.0,4,11 - Bug;component: numpy.core;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1500,b'inconsistent  float to string conversion with german locale (Trac #902)',"b""_Original ticket http://projects.scipy.org/numpy/ticket/902 on 2008-08-31 by trac user ChristianK, assigned to @cournape._\n\nThe string representation of numpy.floatxx object is inconsistent on systems with german locale:\n\n\n\n    import locale\n    locale.str(1.2)\n    '1,2'\n    a = N.linspace(0,1,5)\n    a\n    array([ 0.  ,  0.25,  0.5 ,  0.75,  1.  ])\n    a.astype(float)\n    array([ 0.  ,  0.25,  0.5 ,  0.75,  1.  ])\n    a[0].astype(float)\n    0.0\n    a[1].astype(float)\n    0,25\n\n\n\nNote that 0 got converted to '0.0' whereas 0.25 yielded '0,25' using a comma as floating point in accordance with german locale.\n\nI vote against accounting for locale settings at all when printing numpy floats.\n\nChristian\n"""
1498,7727237,numpy-gitbot,numpy-gitbot,2012-10-19 20:00:30,2012-10-19 20:00:31,2012-10-19 20:00:31,closed,,1.2.0,1,11 - Bug;component: numpy.core;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1498,b'Compiler warnings (Trac #900)',"b""_Original ticket http://projects.scipy.org/numpy/ticket/900 on 2008-08-30 by @alberts, assigned to unknown._\n\nBuild !NumPy trunk r5726 on 64-Bit Linux with GCC 4.3:\n\n\n\n    gcc -o build/scons/numpy/core/src/multiarraymodule.os -c -O2 -fno-strict-aliasing -DNDEBUG -fomit-frame-pointer -g -Wall -Wstrict-prototypes -fPIC -I/opt/python26/include/python2.6 -Ibuild/scons/numpy/core/include -Ibuild/scons/numpy/core -I/opt/python26/include/python2.6 -I/opt/intel/mkl/10.0.4.023/include -I/opt/intel/mkl/10.0.4.023/include build/scons/numpy/core/src/multiarraymodule.c\n    In file included from build/scons/numpy/core/src/arrayobject.c:536,\n                     from build/scons/numpy/core/src/multiarraymodule.c:97:\n    build/scons/numpy/core/src/scalartypes.inc: In function 'object_arrtype_new':\n    build/scons/numpy/core/src/scalartypes.inc:1903: warning: unused variable 'src'\n    build/scons/numpy/core/src/scalartypes.inc:1903: warning: unused variable 'dest'\n    build/scons/numpy/core/src/scalartypes.inc:1902: warning: unused variable 'itemsize'\n\n"""
1497,7727234,numpy-gitbot,numpy-gitbot,2012-10-19 20:00:27,2012-10-19 20:00:29,2012-10-19 20:00:29,closed,,1.2.0,2,11 - Bug;component: numpy.testing;priority: highest,https://api.github.com/repos/numpy/numpy/issues/1497,b'NumPy test suite fails to run with Python 2.6b3 and nose 0.10.3 (Trac #899)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/899 on 2008-08-30 by @alberts, assigned to unknown._\n\nThe NumPy test suite fails to run with Python 2.6b3 and nose 0.10.3:\n\n\n\n    $ python2.6 -c \'import numpy; numpy.test()\'\n    Running unit tests for numpy\n    NumPy version 1.2.0.dev5726\n    NumPy is installed in /opt/python26/lib/python2.6/site-packages/numpy\n    Python version 2.6b3 (r26b3:65922, Aug 29 2008, 23:35:24) [GCC 4.3.0 20080428 (Red Hat 4.3.0-8)]\n    nose version 0.10.3\n    Traceback (most recent call last):\n      File ""<string>"", line 1, in <module>\n      File ""/opt/python26/lib/python2.6/site-packages/numpy/testing/nosetester.py"", line 278, in test\n        t = NumpyTestProgram(argv=argv, exit=False, plugins=plugins)\n      File ""/opt/python26/lib/python2.6/site-packages/nose/core.py"", line 219, in __init__\n        argv=argv, testRunner=testRunner, testLoader=testLoader)\n      File ""/opt/python26/lib/python2.6/unittest.py"", line 816, in __init__\n        self.parseArgs(argv)\n      File ""/opt/python26/lib/python2.6/site-packages/nose/core.py"", line 270, in parseArgs\n        self.createTests()\n      File ""/opt/python26/lib/python2.6/site-packages/nose/core.py"", line 284, in createTests\n        self.test = self.testLoader.loadTestsFromNames(self.testNames)\n      File ""/opt/python26/lib/python2.6/site-packages/nose/loader.py"", line 422, in loadTestsFromNames\n        return unittest.TestLoader.loadTestsFromNames(self, names, module)\n      File ""/opt/python26/lib/python2.6/unittest.py"", line 613, in loadTestsFromNames\n        suites = [self.loadTestsFromName(name, module) for name in names]\n      File ""/opt/python26/lib/python2.6/site-packages/nose/loader.py"", line 377, in loadTestsFromName\n        module, discovered=discovered)\n      File ""/opt/python26/lib/python2.6/site-packages/nose/loader.py"", line 301, in loadTestsFromModule\n        tests.extend(self.loadTestsFromDir(path))\n      File ""/opt/python26/lib/python2.6/site-packages/nose/loader.py"", line 165, in loadTestsFromDir\n        entry_path, discovered=True)\n      File ""/opt/python26/lib/python2.6/site-packages/nose/loader.py"", line 377, in loadTestsFromName\n        module, discovered=discovered)\n      File ""/opt/python26/lib/python2.6/site-packages/nose/loader.py"", line 306, in loadTestsFromModule\n        return self.suiteClass(ContextList(tests, context=module))\n      File ""/opt/python26/lib/python2.6/site-packages/nose/suite.py"", line 332, in __call__\n        return self.makeSuite(tests, context)\n      File ""/opt/python26/lib/python2.6/site-packages/nose/suite.py"", line 377, in makeSuite\n        self.context.setdefault(suite, []).append(context)\n    TypeError: unhashable type: \'ContextSuite\'\n\n\n'"
1496,7727229,numpy-gitbot,numpy-gitbot,2012-10-19 20:00:19,2012-10-19 20:00:26,2012-10-19 20:00:26,closed,,1.6.0,15,11 - Bug;component: numpy.core;priority: highest,https://api.github.com/repos/numpy/numpy/issues/1496,"b""NumPy trunk doesn't compile on Windows (Trac #898)""","b""_Original ticket http://projects.scipy.org/numpy/ticket/898 on 2008-08-29 by @alberts, assigned to @cournape._\n\n!NumPy trunk r5726 fails to compile on Windows Vista Business 64-bit with Python 2.6b2 and Visual Studio 2008.\n\n\n\n    umathmodule.c\n    numpy\\core\\src\\umathmodule.c.src(64) : error C2059: syntax error : 'type'\n    numpy\\core\\src\\umathmodule.c.src(70) : error C2059: syntax error : 'type'\n    numpy\\core\\src\\ufuncobject.c(1701) : warning C4244: '=' : conversion from 'npy_intp' to 'int', possible loss of data\n    numpy\\core\\src\\ufuncobject.c(2422) : warning C4244: '=' : conversion from 'npy_intp' to 'int', possible loss of data\n\n\n\nBuild log attached."""
1493,7727217,numpy-gitbot,numpy-gitbot,2012-10-19 20:00:00,2012-10-19 20:00:01,2012-10-19 20:00:01,closed,,1.2.0,1,11 - Bug;component: Other;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1493,b'Import error for matplotlib (Trac #895)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/895 on 2008-08-27 by @charris, assigned to unknown._\n\nWe should have no changes to the API and ABI for 1.2, yet matplotlib fails to import on account of a version error. \n\nRuntimeError: module compiled against version 100000a of C-API but this version of numpy is 1000009\n'"
1492,7727216,numpy-gitbot,numpy-gitbot,2012-10-19 19:59:57,2012-10-23 02:39:39,2012-10-19 19:59:58,closed,,1.3.0,1,11 - Bug;component: numpy.testing;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1492,b'-OO optimization fails with nosetester (Trac #894)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/894 on 2008-08-27 by @pierregm, assigned to unknown._\n\nLooks like `nosetester.docmethod` fails when the docstring are explicitly suppressed with the -OO flag.\n\n\n\n    python -OO -c ""import numpy as np""\n    \n    Traceback (most recent call last):\n      File ""<string>"", line 1, in ?\n      File ""/usr/lib64/python2.4/site-packages/numpy/__init__.py"", line 125, in ?\n        import add_newdocs\n      File ""/usr/lib64/python2.4/site-packages/numpy/add_newdocs.py"", line 9, in ?\n        from lib import add_newdoc\n      File ""/usr/lib64/python2.4/site-packages/numpy/lib/__init__.py"", line 4, in ?\n        from type_check import *\n      File ""/usr/lib64/python2.4/site-packages/numpy/lib/type_check.py"", line 8, in ?\n        import numpy.core.numeric as _nx\n      File ""/usr/lib64/python2.4/site-packages/numpy/core/__init__.py"", line 34, in ?\n        from numpy.testing import Tester\n      File ""/usr/lib64/python2.4/site-packages/numpy/testing/__init__.py"", line 12, in ?\n        from utils import *\n      File ""/usr/lib64/python2.4/site-packages/numpy/testing/utils.py"", line 9, in ?\n        from nosetester import import_nose\n      File ""/usr/lib64/python2.4/site-packages/numpy/testing/nosetester.py"", line 88, in ?\n        class NoseTester(object):\n      File ""/usr/lib64/python2.4/site-packages/numpy/testing/nosetester.py"", line 292, in NoseTester\n        _docmethod(_test_argv, \'(testtype)\')\n      File ""/usr/lib64/python2.4/site-packages/numpy/testing/nosetester.py"", line 85, in _docmethod\n        meth.__doc__ = meth.__doc__ % {\'test_header\':test_header}\n    TypeError: unsupported operand type(s) for %: \'NoneType\' and \'dict\'\n\n\n\nNote: I\'m just kicking the baby from ticket #1491...\n'"
1491,7727215,numpy-gitbot,numpy-gitbot,2012-10-19 19:59:50,2012-10-19 19:59:56,2012-10-19 19:59:56,closed,,1.2.0,16,11 - Bug;component: numpy.ma;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1491,b'Numpy incompatible with python -OO (Trac #893)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/893 on 2008-08-26 by trac user cscott, assigned to @pierregm._\n\nIn line 3256 of numpy/ma/core.py, the following code appears:\n inner.__doc__ += doc_note(""Masked values are replaced by 0."")\n\nThis line fails when python is invoked with the -OO option, which\nremoves doc strings to save memory, since inner.__doc__ will be None\nand a TypeError will be raised trying to add a string to None.  Adding\na guard like: \'if inner.__doc__:\' would fix this bug.'"
1490,7727214,numpy-gitbot,numpy-gitbot,2012-10-19 19:59:48,2012-10-19 19:59:48,2012-10-19 19:59:48,closed,,,1,11 - Bug;component: Other;priority: low,https://api.github.com/repos/numpy/numpy/issues/1490,"b""One-line summary in docstring isn't one-line. (Trac #892)""","b""_Original ticket http://projects.scipy.org/numpy/ticket/892 on 2008-08-22 by trac user timcera, assigned to unknown._\n\nThe example docstring for the 'foo' function has two lines for the one line summary.\n\nhttp://projects.scipy.org/scipy/numpy/browser/trunk/numpy/doc/example.py#L37"""
1488,7727210,numpy-gitbot,numpy-gitbot,2012-10-19 19:59:44,2012-10-19 19:59:45,2012-10-19 19:59:45,closed,,1.3.0,2,11 - Bug;component: numpy.core;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1488,b'test failures with mingw when SIZEOF_LONG_DOUBLE == 8 (Trac #890)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/890 on 2008-08-16 by @cournape, assigned to @cournape._\n\nSince mingw long double support is broken, we should force the configuration SIZEOF_LONG_DOUBLE to 8. Doing so cause the followng test failures:\n\n\n\n    ======================================================================\n    ERROR: Test generic loops.\n    ----------------------------------------------------------------------\n    Traceback (most recent call last):\n      File ""C:\\Python25\\lib\\site-packages\\numpy\\core\\tests\\test_ufunc.py"", line 79, in test_generic_loops\n        assert_almost_equal(fone(x), fone_val, err_msg=msg)\n      File ""C:\\Python25\\Lib\\site-packages\\numpy\\testing\\utils.py"", line 205, in assert_almost_equal\n        return assert_array_almost_equal(actual, desired, decimal, err_msg)\n      File ""C:\\Python25\\Lib\\site-packages\\numpy\\testing\\utils.py"", line 304, in assert_array_almost_equal\n        header=\'Arrays are not almost equal\')\n      File ""C:\\Python25\\Lib\\site-packages\\numpy\\testing\\utils.py"", line 272, in assert_array_compare\n        val = comparison(x[~xnanid], y[~ynanid])\n    IndexError: 0-d arrays can\'t be indexed\n    \n    ======================================================================\n    FAIL: test_large_types (test_scalarmath.TestPower)\n    ----------------------------------------------------------------------\n    Traceback (most recent call last):\n      File ""C:\\Python25\\lib\\site-packages\\numpy\\core\\tests\\test_scalarmath.py"", line 54, in test_large_types\n        assert_almost_equal(b, 6765201, err_msg=msg)\n      File ""C:\\Python25\\Lib\\site-packages\\numpy\\testing\\utils.py"", line 207, in assert_almost_equal\n        assert round(abs(desired - actual),decimal) == 0, msg\n    AssertionError:\n    Items are not equal: error with <type \'numpy.float64\'>: got 1.0\n     ACTUAL: 1.0\n     DESIRED: 6765201\n\n'"
1487,7727208,numpy-gitbot,numpy-gitbot,2012-10-19 19:59:42,2012-10-19 19:59:42,2012-10-19 19:59:42,closed,,1.2.0,1,11 - Bug;component: Other;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1487,b'Incorrect value returned by numpy.array.max (Trac #889)',"b""_Original ticket http://projects.scipy.org/numpy/ticket/889 on 2008-08-13 by trac user lefranck, assigned to unknown._\n\nHello,\n\nI've been trying to solve a weird problem with some of my data, and as far as I can tell, the problem seems to come from the numpy.array.max function. With my particular data block (640.000 float32 values between 0.0 and 1.0, pickle file attached), data.max() returns 0.545826792717, while the actual max value is 1.0. The built-in function max(data) returns 1.0, and if I loop through the data myself I find 1.0. If I call data.sort() before hand, data.max() then correctly returns 1.0. I'm using python 2.5.2 and numpy 1.0.4 on a standard Ubuntu 8.04 system with a core 2 duo CPU. The problem persists with numpy-1.2.0.dev5495.\n\nA compressed version of the pickle file can be found here:\n[http://le-franck.com/datablock.tar.bz2]\n\nFor instance:\n\n\n\n    In [11]: H.max()\n    Out[11]: 0.545826792717\n    \n    In [12]: H.argmax()\n    Out[12]: 24400\n    \n    In [13]: H[24400]\n    Out[13]: 1.0\n\n\n\nAlso:\n\n\n    In [41]: H.max()\n    Out[41]: 0.545826792717\n    \n    In [42]: H.sort()\n    \n    In [43]: H.max()\n    Out[43]: 1.0\n\n\n\nCheers,\nFranck\n"""
1486,7727207,numpy-gitbot,numpy-gitbot,2012-10-19 19:59:40,2012-10-19 19:59:40,2012-10-19 19:59:40,closed,,1.2.0,0,11 - Bug;component: Other;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1486,b'Incorrect value returned by numpy.array.max (Trac #888)',"b""_Original ticket http://projects.scipy.org/numpy/ticket/888 on 2008-08-13 by trac user lefranck, assigned to unknown._\n\nHello,\n\nI've been trying to solve a weird problem with some of my data, and as far as I can tell, the problem seems to come from the numpy.array.max function. With my particular data block (640.000 float32 values between 0.0 and 1.0, pickle file attached), data.max() returns 0.545826792717, while the actual max value is 1.0. The built-in function max(data) returns 1.0, and if I loop through the data myself I find 1.0. If I call data.sort() before hand, data.max() then correctly returns 1.0. I'm using python 2.5.2 and numpy 1.0.4 on a standard Ubuntu 8.04 system with a core 2 duo CPU. The problem persists with numpy-1.2.0.dev5495.\n\nFor instance:\n\n\n\n    In [11]: H.max()\n    Out[11]: 0.545826792717\n    \n    In [12]: H.argmax()\n    Out[12]: 24400\n    \n    In [13]: H[24400]\n    Out[13]: 1.0\n\n\n\nAlso:\n\n\n    In [41]: H.max()\n    Out[41]: 0.545826792717\n    \n    In [42]: H.sort()\n    \n    In [43]: H.max()\n    Out[43]: 1.0\n\n\n\nCheers,\nFranck\n"""
1483,7727202,numpy-gitbot,numpy-gitbot,2012-10-19 19:59:31,2012-10-23 02:39:37,2012-10-19 19:59:32,closed,,1.3.0,2,11 - Bug;component: numpy.core;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1483,b'sort does not accept axis=None (Trac #885)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/885 on 2008-08-10 by trac user ctw, assigned to unknown._\n\nThis bug refers to ticket [http://www.scipy.org/scipy/numpy/ticket/391 #989] and the following mailing list message: [http://projects.scipy.org/pipermail/numpy-discussion/2008-February/031384.html]\n\nCurrently the sort docstring states that axis=None is valid, but it raises a \nTypeError exception with the message ""an integer is required"". Either axis=None functionality should be implemented or the docstring should be changed to reflect the fact that None is not a valid value for axis.'"
1482,7727199,numpy-gitbot,numpy-gitbot,2012-10-19 19:59:27,2014-07-06 19:23:00,2012-10-19 19:59:30,closed,,1.3.0,11,11 - Bug;component: numpy.lib;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1482,b'fromfile and fromstring locale dependency (Trac #884)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/884 on 2008-08-09 by @pv, assigned to @cournape._\n\nBehavior of fromfile depends on the C locale used, fromstring does not depend on the locale: (assume foo.dat contains the string ""1,234"". Note that in Finnish locale, the decimal separator is comma, not period.):\n\n\n    >>> import numpy as np\n    >>> np.fromstring(\'1,234\', sep=\'x\')\n    array([ 1.])\n    >>> np.fromfile(\'foo.dat\', sep=\'x\')\n    array([ 1.])\n    >>> import locale\n    >>> locale.setlocale(locale.LC_NUMERIC, \'fi_FI\')\n    >>> ""%g"" % 1.2345      # python doesn\'t care about the C locale\n    \'1.2345\'\n    >>> np.fromstring(\'1,234\', sep=\'x\')\n    array([-1.])\n    >>> np.fromfile(\'foo.dat\', sep=\'x\')\n    array([ 1.234])\n\n\n\nIn summary: \n\n  - fromfile respects the C locale because it uses fscanf\n  - fromstring doesn\'t respect the locale as it uses PyOS_strtol\n  - fromstring still breaks with malformed data; some part of its code might rely on the C locale\n\nThe main question is whether we want to rely on C locale or not in I/O.\n\nPython itself appears to try to avoid relying on C locale. Personally, I think also we should not rely on C locale.\n\nThe simplest way to fix this probably is to wrap the fromfile/fromstring in pairs of setlocale calls that set and revert the locale. Similar audit might also be needed for all parts of the numpy code that use the C stdio library services.\n'"
1481,7727196,numpy-gitbot,charris,2012-10-19 19:59:25,2015-08-28 18:29:23,2015-08-28 18:29:23,closed,,,4,11 - Bug;component: numpy.lib;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1481,b'fromstring/fromfile behave badly with malformed data (Trac #883)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/883 on 2008-08-09 by @pv, assigned to unknown._\n\nSee the discussion at:\n\n    http://permalink.gmane.org/gmane.comp.python.numeric.general/24115\n\nIn summary: \n\n1. Empty string is understood as zero (except at the end of a string)\n\n\n    >>> np.fromstring(\'xxxxx\', sep=\'x\')\n    array([ 0.,  0.,  0.,  0.,  0.])\n\n\n  Missing values are treated as zeros. This is probably accidental, it\'s more likely that the memory allocated just happens to be filled with zeros...\n2. If count is given and not enough entries were read, the rest is padded with uninitialized data\n\n\n    >>> np.fromstring(""23"", dtype=np.float, sep=""x"", count=3)\n    array([  2.30000000e+001,   8.19397657e-269,   1.94625366e-312])\n\n\n3. Fromfile behaves differently from fromstring (Assume ""foo.dat"" contains string ""23xxx"")\n\n\n    >>> np.fromfile(""foo.dat"", dtype=np.float, sep=""x"")\n    array([  2.30000000e+001,   8.36783574e-269,   2.12885402e-313])\n    >>> np.fromfile(""foo.dat"", dtype=np.float, count=5, sep=""x"")\n    5 items requested but only 3 read\n    array([  2.30000000e+001,   6.04468244e-269,  -1.54891786e-039])\n\n\n  Again, the last value is ignored, but the former ones are not treated as zero; instead, the array is filled with uninitialized data for the missing entries. Note also that neither warning or error is raised; instead, a message is printed to stdout.\n\n\nQuestion: what is the correct behavior:\n\nA) Raise ValueError on malformed data.\n\nB) Raise ValueError on malformed data if count is given, otherwise truncate to valid part.\n\nC) Truncate to valid part of data.\n'"
1480,7727195,numpy-gitbot,numpy-gitbot,2012-10-19 19:59:23,2012-10-19 19:59:23,2012-10-19 19:59:23,closed,,1.2.0,2,11 - Bug;component: Other;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1480,b'Segmentation fault in array.choose with empty list as argument (Trac #882)',"b""_Original ticket http://projects.scipy.org/numpy/ticket/882 on 2008-08-09 by trac user nvj, assigned to @cournape._\n\narray.choose fails when given an empty list as argument. This code reliably provokes a segmentation fault:[[BR]]\n[[BR]]\nfrom numpy import numarray\na = numarray.array(1)\na.choose([])\n[[BR]][[BR]]\ngdb on core dump gives:[[BR]]\nCore was generated by `python test.py'.[[BR]]\nProgram terminated with signal 11, Segmentation fault.[[BR]]\n[New process 10356][[BR]]\n#0  PyArray_ConvertToCommonType (op=0xb6d95e0c, retn=0xbfa2bb88)[[BR]]\n    at numpy/core/src/multiarraymodule.c:2231\n[[BR]][[BR]]\n\nI'm running debian sid packages:[[BR]]\npython-dbg (2.5.2-2)[[BR]]\npython-numpy-dbg (1:1.1.0-3)[[BR]]\n(Running in vmware under XP)\n[[BR]][[BR]]\nHope this helps, I haven't checked the latest version, too much trouble and I'm pretty new to this."""
1479,7727193,numpy-gitbot,numpy-gitbot,2012-10-19 19:59:21,2012-10-23 02:39:31,2012-10-19 19:59:21,closed,,1.2.0,1,11 - Bug;component: numpy.core;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1479,b'Segmentation fault with numpy.object0 (Trac #881)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/881 on 2008-08-07 by trac user mgogoulos@..., assigned to @cournape._\n\nnumpy.object0 and numpy.object result in segmentation fault, see the following:\n\n$ gdb python\n...\n\n(gdb) run -c ""import numpy; obj = numpy.object0()""\n\nStarting program: /usr/bin/python -c ""import numpy; obj = numpy.object0()""\n\n...\n\n[New Thread 0xb7d498c0 (LWP 17024)]\n\nProgram received signal SIGSEGV, Segmentation fault.\n\n[Switching to Thread 0xb7d498c0 (LWP 17024)]\n\nobject_arrtype_new (type=0xb7c7d1c0, args=0xb7d0902c, kwds=0x0) at numpy/core/src/scalartypes.inc.src:1977\n\n1977\t    Py_INCREF(*((PyObject **)dest));\n\nTested on versions \'1.0.4\' and 1.1.1 with scipy 0.6.0, on Ubuntu hardy (python 2.5.2)\n\nBest regards, \nMarkos Gogoulos'"
1478,7727189,numpy-gitbot,charris,2012-10-19 19:59:19,2015-04-04 07:24:23,2015-04-04 07:24:23,closed,,,3,11 - Bug;component: numpy.core;Easy Fix;priority: low,https://api.github.com/repos/numpy/numpy/issues/1478,b'An error is given if a integer list is passed to nan_to_num (Trac #880)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/880 on 2008-08-06 by @bsouthey, assigned to unknown._\n\nWhen an integer list is passed to nan_to_num then an error occurs. This does not occur if the list contains floats or a numpy integer array is used.\n\n\n\n\n    np.nan_to_num([1.0,3]) # returns: array([ 1.,  3.])\n    n=np.array([1,3])\n    np.nan_to_num(n) # returns:   array([1, 3])\n    \n    np.nan_to_num([1,3])\n    Traceback (most recent call last):\n      File ""<stdin>"", line 1, in <module>\n      File ""/usr/lib64/python2.5/site-packages/numpy/lib/type_check.py"", line 135, in nan_to_num\n        maxf, minf = _getmaxmin(y.dtype.type)\n      File ""/usr/lib64/python2.5/site-packages/numpy/lib/type_check.py"", line 103, in _getmaxmin\n        f = getlimits.finfo(t)\n      File ""/usr/lib64/python2.5/site-packages/numpy/lib/getlimits.py"", line 46, in __new__\n        raise ValueError, ""data type %r not inexact"" % (dtype)\n    ValueError: data type <type \'numpy.int64\'> not inexact\n    \n\n\n\n'"
1476,7727186,numpy-gitbot,numpy-gitbot,2012-10-19 19:59:15,2012-10-19 19:59:16,2012-10-19 19:59:16,closed,,1.2.0,1,11 - Bug;component: numpy.lib;priority: high,https://api.github.com/repos/numpy/numpy/issues/1476,b'np.fix does not work properly for negative integers (Trac #878)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/878 on 2008-08-06 by trac user badland, assigned to @cournape._\n\nnp.fix is supposed to round floats towards the nearest integer closer to zero.\nIn particular, it should leave integers unchanged.\nHowever, at least in version 1.1.0, np.fix(-2) returns -1.\n\nIn the python function np.fix, a negative argument x is handled as np.floor(x)+1\nThis is correct if x is not an integer.\nAn easy fix (pun intended) would be to use -np.floor(-x) in the negative case.\n\nBTW: The web interface did not allow me to put version = 1.1.0\n\nBjrn dlandsvik'"
1475,7727185,numpy-gitbot,numpy-gitbot,2012-10-19 19:59:11,2012-10-19 19:59:14,2012-10-19 19:59:14,closed,,1.2.0,6,11 - Bug;component: Other;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1475,"b""Segfault when using recarray 'O' entries (Trac #877)""","b""_Original ticket http://projects.scipy.org/numpy/ticket/877 on 2008-08-06 by @mdboom, assigned to unknown._\n\n(This bug report began on the mailing list here: http://projects.scipy.org/pipermail/numpy-discussion/2008-July/035998.html)\n\n\nI've run into a segfault that occurs in the array destructor with arrays containing object references (type 'O') that have both names and titles.\n\nWhen a field contains both and name and a title, the fields dictionary contains two entries for that field.  This means that the array item destructor (which iterates through the fields dictionary) will decref the pointed-to object twice.  If the first decref causes the object to be deleted, the second decref has the potential to segfault.\n\nIt seems the simplest patch is to set the object pointer to NULL after decref'ing, so the second decref will do nothing.  However, perhaps there is a way to avoid decref'ing twice in the first place.\n\nI've attached a script that exercises the segfault, a gdb backtrace, and a patch.  You may need to adjust the number of rows until it is high enough to create a segfault on your system.\n\nThis is on:\nRHEL4\nPython 2.5.2\nNumpy SVN r5497"""
1473,7727171,numpy-gitbot,numpy-gitbot,2012-10-19 19:58:50,2012-10-19 19:58:51,2012-10-19 19:58:51,closed,,1.6.0,6,11 - Bug;component: numpy.lib;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1473,b'numpy.lib.io.save fails with NameError (Trac #875)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/875 on 2008-08-05 by trac user hvontres, assigned to unknown._\n\nWhile Testing the 1.1.1 relase on Python 2.3.5 for Windows I encountered the following problem:\n\n\n\n\n    from numpy import *\n    test=ones((10,10))\n    save(\'test\',test)\n    \n    Traceback (most recent call last):\n      File ""<pyshell#21>"", line 1, in -toplevel-\n        save(\'test\',test)\n      File ""C:\\Python23\\Lib\\site-packages\\numpy\\lib\\io.py"", line 159, in save\n        format.write_array(fid, arr)\n      File ""C:\\Python23\\Lib\\site-packages\\numpy\\lib\\format.py"", line 285, in write_array\n        write_array_header_1_0(fp, header_data_from_array_1_0(array))\n      File ""C:\\Python23\\Lib\\site-packages\\numpy\\lib\\format.py"", line 172, in write_array_header_1_0\n        for key, value in sorted(d.items()):\n    NameError: global name \'sorted\' is not defined\n\n\n\n\nAny Ideas?'"
1469,7727161,numpy-gitbot,numpy-gitbot,2012-10-19 19:58:36,2012-10-23 02:39:27,2012-10-19 19:58:41,closed,,,14,11 - Bug;component: numpy.f2py;priority: high,https://api.github.com/repos/numpy/numpy/issues/1469,b'f2py and/or distutils broken (unpack tuple of wrong size) (Trac #871)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/871 on 2008-08-04 by trac user dhendriks, assigned to unknown._\n\nUsing Python 2.3 on r5602 of the 1.1.x branch, after solving the problems of ticket #1419, I now try to use f2py. However, I get the following:\n\n\n\n    running build\n    running scons\n    customize UnixCCompiler\n    Found executable /usr/bin/gcc\n    customize GnuFCompiler\n    Found executable /usr/bin/g77\n    gnu: no Fortran 90 compiler found\n    Traceback (most recent call last):\n      File ""XXX/bin/f2py"", line 24, in ?\n        main()\n      File ""XXX/lib/python2.3/site-packages/numpy/f2py/f2py2e.py"", line 560, in main\n        run_compile()\n      File ""XXX/lib/python2.3/site-packages/numpy/f2py/f2py2e.py"", line 547, in run_compile\n        setup(ext_modules = [ext])\n      File ""XXX/lib/python2.3/site-packages/numpy/distutils/core.py"", line 184, in setup\n        return old_setup(**new_attr)\n      File ""/usr/lib/python2.3/distutils/core.py"", line 149, in setup\n        dist.run_commands()\n      File ""/usr/lib/python2.3/distutils/dist.py"", line 907, in run_commands\n        self.run_command(cmd)\n      File ""/usr/lib/python2.3/distutils/dist.py"", line 927, in run_command\n        cmd_obj.run()\n      File ""XXX/lib/python2.3/site-packages/numpy/distutils/command/build.py"", line 38, in run\n        self.run_command(\'scons\')\n      File ""/usr/lib/python2.3/distutils/cmd.py"", line 333, in run_command\n        self.distribution.run_command(command)\n      File ""/usr/lib/python2.3/distutils/dist.py"", line 926, in run_command\n        cmd_obj.ensure_finalized()\n      File ""/usr/lib/python2.3/distutils/cmd.py"", line 117, in ensure_finalized\n        self.finalize_options()\n      File ""XXX/lib/python2.3/site-packages/numpy/distutils/command/scons.py"", line 310, in finalize_options\n        force = self.force)\n      File ""XXX/lib/python2.3/site-packages/numpy/distutils/fcompiler/__init__.py"", line 809, in new_fcompiler\n        c_compiler=c_compiler)\n      File ""XXX/lib/python2.3/site-packages/numpy/distutils/fcompiler/__init__.py"", line 791, in get_default_fcompiler\n        c_compiler=c_compiler)\n      File ""XXX/lib/python2.3/site-packages/numpy/distutils/fcompiler/__init__.py"", line 740, in _find_existing_fcompiler\n        c.customize(dist)\n      File ""XXX/lib/python2.3/site-packages/numpy/distutils/fcompiler/__init__.py"", line 491, in customize\n        get_flags(\'debug\', dflags)\n      File ""XXX/lib/python2.3/site-packages/numpy/distutils/fcompiler/__init__.py"", line 478, in get_flags\n        flags.extend(getattr(self.flag_vars, tag))\n      File ""XXX/lib/python2.3/site-packages/numpy/distutils/environment.py"", line 37, in __getattr__\n        return self._get_var(name, conf_desc)\n      File ""XXX/lib/python2.3/site-packages/numpy/distutils/environment.py"", line 50, in _get_var\n        hook, envvar, confvar, convert = conf_desc\n    ValueError: unpack tuple of wrong size\n\n'"
1466,7727155,numpy-gitbot,numpy-gitbot,2012-10-19 19:58:29,2012-10-19 19:58:30,2012-10-19 19:58:30,closed,,NumPy 1.7,4,11 - Bug;component: numpy.lib;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1466,b'ipmt is not implemented (in lib.financial) (Trac #868)',"b""_Original ticket http://projects.scipy.org/numpy/ticket/868 on 2008-07-31 by @pv, assigned to unknown._\n\nThe ipmt function is not implemented in numpy r5584, there's a stub instead.\n\n\n    def ipmt(rate, per, nper, pv, fv=0.0, when='end'):\n        total = pmt(rate, nper, pv, fv, when)\n        # Now, compute the nth step in the amortization\n        raise NotImplementedError\n\n\nAs it appears in the main namespace, it probably should be implemented.\n\nAlso update http://sd-2116.dedibox.fr/pydocweb/doc/numpy.lib.financial.ipmt/ when implemented.\n"""
1465,7727154,numpy-gitbot,numpy-gitbot,2012-10-19 19:58:26,2012-10-19 19:58:27,2012-10-19 19:58:27,closed,,1.6.0,4,11 - Bug;component: numpy.core;priority: low,https://api.github.com/repos/numpy/numpy/issues/1465,b'Array generation fail (Trac #867)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/867 on 2008-07-31 by trac user davyzhu, assigned to unknown._\n\n>>> a = array([0x0000000E,0xFFFFFEB3],int32)\nTraceback (most recent call last):\n  File ""<interactive input>"", line 1, in <module>\nValueError: setting an array element with a sequence.'"
1464,7727148,numpy-gitbot,numpy-gitbot,2012-10-19 19:58:21,2012-10-19 19:58:24,2012-10-19 19:58:24,closed,,,9,11 - Bug;component: numpy.core;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1464,b'ldexp broken (Trac #866)',"b""_Original ticket http://projects.scipy.org/numpy/ticket/866 on 2008-07-29 by @huard, assigned to @cournape._\n\n\n\n    > [3]: np.ldexp(.4, 5)\n    ---------------------------------------------------------------------------\n    TypeError                                 Traceback (most recent call last)\n    \n    /storage/huardda/10kmf90/python/<ipython console> in <module>()\n    \n    TypeError: function not supported for these types, and can't coerce safely to supported types\n\n\n\nOn Fedora 9, gcc 4.3.0, NumPy 1.2.0.dev5566 """
1463,7727145,numpy-gitbot,numpy-gitbot,2012-10-19 19:58:18,2012-10-19 19:58:19,2012-10-19 19:58:19,closed,,1.2.0,2,11 - Bug;component: Other;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1463,b'Recent C99 changes (complex functions) break tests on windows (Trac #865)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/865 on 2008-07-29 by @cournape, assigned to unknown._\n\nI have 12 failed tests related to recent test_umath on win32 (with mingw).\n\n\n\n    ======================================================================\n    FAIL: test_umath.TestC99.test_cacos(<ufunc \'arccos\'>, (1.0, -1.#IND), (-1.#IND, -1.#IND), \'invalid-optional\')\n    ----------------------------------------------------------------------\n    Traceback (most recent call last):\n      File ""c:\\python25\\lib\\site-packages\\nose-0.10.1-py2.5.egg\\nose\\case.py"", line 203, in runTest\n        self.test(*self.arg)\n      File ""C:\\Python25\\lib\\site-packages\\numpy\\core\\tests\\test_umath.py"", line 393, in _check\n        assert got == expected, (got, expected)\n    AssertionError: (\'(1.#QNAN, -1.#IND)\', \'(-1.#IND, -1.#IND)\')\n    \n    ======================================================================\n    FAIL: test_umath.TestC99.test_cacos(<ufunc \'arccos\'>, (-1.#IND, 1.0), (-1.#IND, -1.#IND), \'invalid-optional\')\n    ----------------------------------------------------------------------\n    Traceback (most recent call last):\n      File ""c:\\python25\\lib\\site-packages\\nose-0.10.1-py2.5.egg\\nose\\case.py"", line 203, in runTest\n        self.test(*self.arg)\n      File ""C:\\Python25\\lib\\site-packages\\numpy\\core\\tests\\test_umath.py"", line 393, in _check\n        assert got == expected, (got, expected)\n    AssertionError: (\'(1.#QNAN, -1.#IND)\', \'(-1.#IND, -1.#IND)\')\n    \n    ======================================================================\n    FAIL: test_umath.TestC99.test_cacosh(<ufunc \'arccosh\'>, (1.0, -1.#IND), (-1.#IND, -1.#IND), \'invalid-optional\')\n    ----------------------------------------------------------------------\n    Traceback (most recent call last):\n      File ""c:\\python25\\lib\\site-packages\\nose-0.10.1-py2.5.egg\\nose\\case.py"", line 203, in runTest\n        self.test(*self.arg)\n      File ""C:\\Python25\\lib\\site-packages\\numpy\\core\\tests\\test_umath.py"", line 393, in _check\n        assert got == expected, (got, expected)\n    AssertionError: (\'(1.#QNAN, 1.#QNAN)\', \'(-1.#IND, -1.#IND)\')\n    \n    ======================================================================\n    FAIL: test_umath.TestC99.test_cacosh(<ufunc \'arccosh\'>, (-1.#IND, 1.0), (-1.#IND, -1.#IND), \'invalid-optional\')\n    ----------------------------------------------------------------------\n    Traceback (most recent call last):\n      File ""c:\\python25\\lib\\site-packages\\nose-0.10.1-py2.5.egg\\nose\\case.py"", line 203, in runTest\n        self.test(*self.arg)\n      File ""C:\\Python25\\lib\\site-packages\\numpy\\core\\tests\\test_umath.py"", line 393, in _check\n        assert got == expected, (got, expected)\n    AssertionError: (\'(1.#QNAN, 1.#QNAN)\', \'(-1.#IND, -1.#IND)\')\n    \n    ======================================================================\n    FAIL: test_umath.TestC99.test_clog(<ufunc \'log\'>, (0.0, 0.0), (-1.#INF, 3.1415926535897931), \'divide\')\n    ----------------------------------------------------------------------\n    Traceback (most recent call last):\n      File ""c:\\python25\\lib\\site-packages\\nose-0.10.1-py2.5.egg\\nose\\case.py"", line 203, in runTest\n        self.test(*self.arg)\n      File ""C:\\Python25\\lib\\site-packages\\numpy\\core\\tests\\test_umath.py"", line 399, in _check\n        assert_raises(FloatingPointError, func, point)\n      File ""C:\\Python25\\Lib\\site-packages\\numpy\\testing\\utils.py"", line 347, in assert_raises\n        return nose.tools.assert_raises(*args,**kwargs)\n    AssertionError: FloatingPointError not raised\n    \n    ======================================================================\n    FAIL: test_umath.TestC99.test_clog(<ufunc \'log\'>, (-1.#INF, 1.#INF), (1.#INF, 2.3561944901923448), \'\')\n    ----------------------------------------------------------------------\n    Traceback (most recent call last):\n      File ""c:\\python25\\lib\\site-packages\\nose-0.10.1-py2.5.egg\\nose\\case.py"", line 203, in runTest\n        self.test(*self.arg)\n      File ""C:\\Python25\\lib\\site-packages\\numpy\\core\\tests\\test_umath.py"", line 393, in _check\n        assert got == expected, (got, expected)\n    AssertionError: (\'(1.#INF, -1.#IND)\', \'(1.#INF, 2.3561944901923448)\')\n    \n    ======================================================================\n    FAIL: test_umath.TestC99.test_clog(<ufunc \'log\'>, (1.#INF, 1.#INF), (1.#INF, 0.78539816339744828), \'\')\n    ----------------------------------------------------------------------\n    Traceback (most recent call last):\n      File ""c:\\python25\\lib\\site-packages\\nose-0.10.1-py2.5.egg\\nose\\case.py"", line 203, in runTest\n        self.test(*self.arg)\n      File ""C:\\Python25\\lib\\site-packages\\numpy\\core\\tests\\test_umath.py"", line 393, in _check\n        assert got == expected, (got, expected)\n    AssertionError: (\'(1.#INF, -1.#IND)\', \'(1.#INF, 0.78539816339744828)\')\n    \n    ======================================================================\n    FAIL: test_umath.TestC99.test_clog(<ufunc \'log\'>, (1.#INF, -1.#IND), (1.#INF, -1.#IND), \'\')\n    ----------------------------------------------------------------------\n    Traceback (most recent call last):\n      File ""c:\\python25\\lib\\site-packages\\nose-0.10.1-py2.5.egg\\nose\\case.py"", line 203, in runTest\n        self.test(*self.arg)\n      File ""C:\\Python25\\lib\\site-packages\\numpy\\core\\tests\\test_umath.py"", line 393, in _check\n        assert got == expected, (got, expected)\n    AssertionError: (\'(-1.#IND, -1.#IND)\', \'(1.#INF, -1.#IND)\')\n    \n    ======================================================================\n    FAIL: test_umath.TestC99.test_clog(<ufunc \'log\'>, (-1.#INF, -1.#IND), (1.#INF, -1.#IND), \'\')\n    ----------------------------------------------------------------------\n    Traceback (most recent call last):\n      File ""c:\\python25\\lib\\site-packages\\nose-0.10.1-py2.5.egg\\nose\\case.py"", line 203, in runTest\n        self.test(*self.arg)\n      File ""C:\\Python25\\lib\\site-packages\\numpy\\core\\tests\\test_umath.py"", line 393, in _check\n        assert got == expected, (got, expected)\n    AssertionError: (\'(-1.#IND, -1.#IND)\', \'(1.#INF, -1.#IND)\')\n    \n    ======================================================================\n    FAIL: test_umath.TestC99.test_clog(<ufunc \'log\'>, (-1.#IND, 1.#INF), (1.#INF, -1.#IND), \'\')\n    ----------------------------------------------------------------------\n    Traceback (most recent call last):\n      File ""c:\\python25\\lib\\site-packages\\nose-0.10.1-py2.5.egg\\nose\\case.py"", line 203, in runTest\n        self.test(*self.arg)\n      File ""C:\\Python25\\lib\\site-packages\\numpy\\core\\tests\\test_umath.py"", line 393, in _check\n        assert got == expected, (got, expected)\n    AssertionError: (\'(-1.#IND, -1.#IND)\', \'(1.#INF, -1.#IND)\')\n    \n    ======================================================================\n    FAIL: test_umath.TestC99.test_csqrt(<ufunc \'sqrt\'>, (1.#INF, -1.#IND), (1.#INF, -1.#IND), \'\')\n    ----------------------------------------------------------------------\n    Traceback (most recent call last):\n      File ""c:\\python25\\lib\\site-packages\\nose-0.10.1-py2.5.egg\\nose\\case.py"", line 203, in runTest\n        self.test(*self.arg)\n      File ""C:\\Python25\\lib\\site-packages\\numpy\\core\\tests\\test_umath.py"", line 393, in _check\n        assert got == expected, (got, expected)\n    AssertionError: (\'(-1.#IND, -1.#IND)\', \'(1.#INF, -1.#IND)\')\n    \n    ======================================================================\n    FAIL: test_umath.TestC99.test_csqrt(<ufunc \'sqrt\'>, (-1.#IND, 1.0), (-1.#IND, -1.#IND), \'invalid-optional\')\n    ----------------------------------------------------------------------\n    Traceback (most recent call last):\n      File ""c:\\python25\\lib\\site-packages\\nose-0.10.1-py2.5.egg\\nose\\case.py"", line 203, in runTest\n        self.test(*self.arg)\n      File ""C:\\Python25\\lib\\site-packages\\numpy\\core\\tests\\test_umath.py"", line 393, in _check\n        assert got == expected, (got, expected)\n    AssertionError: (\'(1.#QNAN, 1.#QNAN)\', \'(-1.#IND, -1.#IND)\')\n\n'"
1462,7727143,numpy-gitbot,numpy-gitbot,2012-10-19 19:58:16,2012-10-19 19:58:17,2012-10-19 19:58:17,closed,,1.3.0,1,11 - Bug;component: numpy.ma;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1462,b'MAError is formatted badly when displayed (patch included) (Trac #864)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/864 on 2008-07-27 by @astraw, assigned to @pierregm._\n\n`python -c ""import numpy as np; np.ma.array([1,2,3],mask=[1,2])""` gives the following error:\n\n\n\n    $ python -c ""import numpy as np; np.ma.array([1,2,3],mask=[1,2])""\n    Traceback (most recent call last):\n      File ""<string>"", line 1, in <module>\n      File ""/home/astraw/PY_flydra/lib/python2.5/site-packages/numpy/ma/core.py"", line 3021, in array\n        fill_value=fill_value, ndmin=ndmin, shrink=shrink)\n      File ""/home/astraw/PY_flydra/lib/python2.5/site-packages/numpy/ma/core.py"", line 1231, in __new__\n        raise MAError, msg % (nd, nm)\n    numpy.ma.core.MAError: (\'M\', \'a\', \'s\', \'k\', \' \', \'a\', \'n\', \'d\', \' \', \'d\', \'a\', \'t\', \'a\', \' \', \'n\', \'o\', \'t\', \' \', \'c\', \'o\', \'m\', \'p\', \'a\', \'t\', \'i\', \'b\', \'l\', \'e\', \':\', \' \', \'d\', \'a\', \'t\', \'a\', \' \', \'s\', \'i\', \'z\', \'e\', \' \', \'i\', \'s\', \' \', \'3\', \',\', \' \', \'m\', \'a\', \'s\', \'k\', \' \', \'s\', \'i\', \'z\', \'e\', \' \', \'i\', \'s\', \' \', \'2\', \'.\')\n\n\n\nWith the following patch, I get a much nicer formatted error:\n\n\n\n    Index: numpy/ma/core.py\n    ===================================================================\n    --- numpy/ma/core.py\t(revision 5543)\n    +++ numpy/ma/core.py\t(working copy)\n    @@ -86,15 +86,7 @@\n     #---- --- Exceptions ---\n     #####--------------------------------------------------------------------------\n     class MAError(Exception):\n    -    ""Class for MA related errors.""\n    -    def __init__ (self, args=None):\n    -        ""Creates an exception.""\n    -        Exception.__init__(self, args)\n    -        self.args = args\n    -    def __str__(self):\n    -        ""Calculates the string representation.""\n    -        return str(self.args)\n    -    __repr__ = __str__\n    +    pass\n     \n     #####--------------------------------------------------------------------------\n     #---- --- Filling options ---\n\n\n\nIs there any reason MAError needs to implement it\'s own machinery? (I found r3514, which suggests somebody might be using the internals of MAError.)\n\nTested on the 1.1.x svn branch r5507. With the patch applied, all tests pass.'"
1461,7727142,numpy-gitbot,numpy-gitbot,2012-10-19 19:58:14,2012-10-23 02:39:19,2012-10-19 19:58:15,closed,,1.2.0,1,11 - Bug;component: Other;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1461,b'Regression in #658 ? (valgrind warning) (Trac #863)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/863 on 2008-07-26 by @cournape, assigned to unknown._\n\n@ 1.1.1rc2:\n\n\n\n    Ticket #658==7735== \n    ==7735== Conditional jump or move depends on uninitialised value(s)\n    ==7735==    at 0x4639E7A: PyArray_UpdateFlags (arrayobject.c:5172)\n    ==7735==    by 0x4658FB3: PyArray_Newshape (multiarraymodule.c:758)\n    ==7735==    by 0x465A097: array_reshape (arraymethods.c:87)\n    ==7735==    by 0x80C9992: PyEval_EvalFrameEx (ceval.c:3573)\n    ==7735==    by 0x80CB0D6: PyEval_EvalCodeEx (ceval.c:2836)\n    ==7735==    by 0x80C92DD: PyEval_EvalFrameEx (ceval.c:3669)\n    ==7735==    by 0x80CB0D6: PyEval_EvalCodeEx (ceval.c:2836)\n    ==7735==    by 0x81133BA: function_call (funcobject.c:517)\n    ==7735==    by 0x805CB36: PyObject_Call (abstract.c:1861)\n    ==7735==    by 0x80C7CE3: PyEval_EvalFrameEx (ceval.c:3853)\n    ==7735==    by 0x80CB0D6: PyEval_EvalCodeEx (ceval.c:2836)\n    ==7735==    by 0x811342F: function_call (funcobject.c:517)\n\n'"
1460,7727141,numpy-gitbot,numpy-gitbot,2012-10-19 19:58:11,2012-10-19 19:58:13,2012-10-19 19:58:13,closed,,,2,11 - Bug;component: numpy.distutils;priority: high,https://api.github.com/repos/numpy/numpy/issues/1460,b'bad detection of AMD Phenom procesor  ...in 64bit mode (Trac #862)',"b""_Original ticket http://projects.scipy.org/numpy/ticket/862 on 2008-07-24 by trac user mimi.vx, assigned to @dmcooke._\n\nPhenom processor is in 64bit mode detected as amd k6-2, detection routine in /distutils/cpuinfo ... \nPhenom processor will be detected as family 16 model 2\n\non line 130:\n\nreturn self._is_AMD() and self.info[0]['model'] == '2' and self.info[0]['family'] != '16'\n\nand  on line 146:\n\nreturn self.is_AMD() and self.info[0]['family'] == '15' or self.info[0]['family'] == '16'\n\nPS: sorry for my english"""
1459,7727140,numpy-gitbot,numpy-gitbot,2012-10-19 19:58:09,2012-10-19 19:58:09,2012-10-19 19:58:09,closed,,1.3.0,1,11 - Bug;component: numpy.core;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1459,b'numpy.matrix.var does not use ddof (Trac #861)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/861 on 2008-07-24 by @jpaalasm, assigned to unknown._\n\nnumpy.matrix.var does not pass the ddof parameter to N.ndarray.var.\n\nSee the patch for a fix.\n\n\nIndex: numpy/core/defmatrix.py\n===================================================================\n--- numpy/core/defmatrix.py     (revision 5516)\n+++ numpy/core/defmatrix.py     (working copy)\n@@ -445,7 +445,7 @@\n         is taken before squaring, so that the result is always real\n         and nonnegative.\n         """"""\n-        return N.ndarray.var(self, axis, dtype, out)._align(axis)\n+        return N.ndarray.var(self, axis, dtype, out, ddof)._align(axis)\n\n     def prod(self, axis=None, dtype=None, out=None):\n         return N.ndarray.prod(self, axis, dtype, out)._align(axis)'"
1458,7727138,numpy-gitbot,numpy-gitbot,2012-10-19 19:58:03,2012-10-23 02:39:18,2012-10-19 19:58:07,closed,,,13,11 - Bug;component: numpy.distutils;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1458,b'Numpy as setuptools dependency (Trac #860)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/860 on 2008-07-24 by trac user phsilva, assigned to @dmcooke._\n\nNumpy 1.1.0 works well with easy_install if called from command line, like:\n\neasy_install numpy==1.1.0\n\nBUT, if I declare numpy==1.1.0 as a dependency in my setup.py setup() function, then I got this error (actually I get the same errors with Numpy 1.0.4):\n\nTraceback (most recent call last):\n  File ""setup.py"", line 116, in <module>\n    platforms        = _chimera_platform_)\n  File ""/usr/lib/python2.5/distutils/core.py"", line 151, in setup\n    dist.run_commands()\n  File ""/usr/lib/python2.5/distutils/dist.py"", line 974, in run_commands\n    self.run_command(cmd)\n  File ""/usr/lib/python2.5/distutils/dist.py"", line 994, in run_command\n    cmd_obj.run()\n  File ""/usr/lib/python2.5/site-packages/setuptools-0.6c8-py2.5.egg/setuptools/command/develop.py"", line 27, in run\n  File ""/usr/lib/python2.5/site-packages/setuptools-0.6c8-py2.5.egg/setuptools/command/develop.py"", line 102, in install_for_development\n  File ""/usr/lib/python2.5/site-packages/easy_install.py"", line 519, in process_distribution\n    \n  File ""/usr/lib/python2.5/site-packages/pkg_resources.py"", line 522, in resolve\n    dist = best[req.key] = env.best_match(req, self, installer)\n  File ""/usr/lib/python2.5/site-packages/pkg_resources.py"", line 758, in best_match\n    return self.obtain(req, installer) # try and download/install\n  File ""/usr/lib/python2.5/site-packages/pkg_resources.py"", line 770, in obtain\n    return installer(requirement)\n  File ""/usr/lib/python2.5/site-packages/easy_install.py"", line 446, in easy_install\n    \n  File ""/usr/lib/python2.5/site-packages/easy_install.py"", line 476, in install_item\n    \n  File ""/usr/lib/python2.5/site-packages/easy_install.py"", line 655, in install_eggs\n    \n  File ""/usr/lib/python2.5/site-packages/easy_install.py"", line 930, in build_and_install\n    \n  File ""/usr/lib/python2.5/site-packages/easy_install.py"", line 919, in run_setup\n    \n  File ""/usr/lib/python2.5/site-packages/setuptools-0.6c8-py2.5.egg/setuptools/sandbox.py"", line 27, in run_setup\n  File ""/usr/lib/python2.5/site-packages/setuptools-0.6c8-py2.5.egg/setuptools/sandbox.py"", line 63, in run\n  File ""/usr/lib/python2.5/site-packages/setuptools-0.6c8-py2.5.egg/setuptools/sandbox.py"", line 29, in <lambda>\n  File ""setup.py"", line 96, in <module>\n    ""numpy == 1.1.0"",\n  File ""setup.py"", line 89, in setup_package\n    ""Elixir >= 0.5.2"",\n  File ""/tmp/easy_install-kOtWpP/numpy-1.1.0/numpy/distutils/core.py"", line 150, in setup\n  File ""setup.py"", line 56, in configuration\n    # setup\n  File ""/tmp/easy_install-kOtWpP/numpy-1.1.0/numpy/distutils/misc_util.py"", line 839, in add_subpackage\n  File ""/tmp/easy_install-kOtWpP/numpy-1.1.0/numpy/distutils/misc_util.py"", line 822, in get_subpackage\n  File ""/tmp/easy_install-kOtWpP/numpy-1.1.0/numpy/distutils/misc_util.py"", line 769, in _get_configuration_from_setup_py\n  File ""/home/henrique/work/chimera/chimera/setup.py"", line 9, in configuration\n    # as published by the Free Software Foundation; either version 2\n  File ""/tmp/easy_install-kOtWpP/numpy-1.1.0/numpy/distutils/misc_util.py"", line 839, in add_subpackage\n  File ""/tmp/easy_install-kOtWpP/numpy-1.1.0/numpy/distutils/misc_util.py"", line 822, in get_subpackage\n  File ""/tmp/easy_install-kOtWpP/numpy-1.1.0/numpy/distutils/misc_util.py"", line 769, in _get_configuration_from_setup_py\n  File ""/home/henrique/work/chimera/chimera/setup.py"", line 223, in configuration\n    \n  File ""/tmp/easy_install-kOtWpP/numpy-1.1.0/numpy/distutils/misc_util.py"", line 1039, in add_include_dirs\nAttributeError: \'NoneType\' object has no attribute \'extend\'\n\nThis seems similar to issue #679. Numpy distutils was expecting something which setuptools distutils (only in dependency mode) overrides and throw away.\n\nFollows a patch/hack against 1.1.0 that worked to me (for 1.0.4 it\'s just the same hack on different chunck).\n\nWhat the plan for distutils based installers (like setuptools) when numscons became the default? I\'m not going to integrate my package in distribution yet, so I\'m using easy_install which seems to be the easiest solution available. Any other idea about how to distribute Numpy? I was thinking about try to create an egg, but then I\'ll need to have one for each different setup (distro/arch) that I would like to use, right?\n\nThanks a lot, and congrats for the great work with Numpy!'"
1457,7727136,numpy-gitbot,numpy-gitbot,2012-10-19 19:58:01,2012-10-23 02:39:17,2012-10-19 19:58:02,closed,,1.3.0,1,11 - Bug;component: numpy.core;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1457,b'Indexing uniinitialized arrays in PyArrayIter_Reset (Trac #859)',"b""_Original ticket http://projects.scipy.org/numpy/ticket/859 on 2008-07-24 by @cournape, assigned to @cournape._\n\nDetected under valgrind, and looking at the code, it looks like there is a problem, but I don't know enough about that code to solve it quickly:\n\n\n\n    Tests compress2d==5148==\n    ==5148== Conditional jump or move depends on uninitialised value(s)\n    ==5148==    at 0x4636A27: PyArray_MapIterReset (arrayobject.c:10242)\n    ==5148==    by 0x466B511: array_subscript (arrayobject.c:2549)\n    ==5148==    by 0x466C07B: array_subscript_nice (arrayobject.c:3173)\n    ==5148==    by 0x80C7235: PyEval_EvalFrameEx (ceval.c:1193)\n    ==5148==    by 0x80CB0D6: PyEval_EvalCodeEx (ceval.c:2836)\n    ==5148==    by 0x80C92DD: PyEval_EvalFrameEx (ceval.c:3669)\n    ==5148==    by 0x80C95C4: PyEval_EvalFrameEx (ceval.c:3659)\n    ==5148==    by 0x80CB0D6: PyEval_EvalCodeEx (ceval.c:2836)\n    ==5148==    by 0x81133BA: function_call (funcobject.c:517)\n    ==5148==    by 0x805CB36: PyObject_Call (abstract.c:1861)\n    ==5148==    by 0x80C7CE3: PyEval_EvalFrameEx (ceval.c:3853)\n    ==5148==    by 0x80CB0D6: PyEval_EvalCodeEx (ceval.c:2836)\n\n\n\nThe problem is inside the macro PyArrayIter_GOTO: some items of the argument destination are accessed without having been set previously (when they are swapped with the copyswap function)."""
1455,7727131,numpy-gitbot,numpy-gitbot,2012-10-19 19:57:56,2012-10-19 19:57:57,2012-10-19 19:57:57,closed,,1.2.0,3,11 - Bug;component: numpy.ma;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1455,b'dividing masked arrays with newaxis fails (Trac #857)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/857 on 2008-07-22 by trac user fitz, assigned to @pierregm._\n\nDividing masked arrays fails when the denominator is broadcast with newaxis (r5497).  Example script attached.\n\n~/test_ma.py in <module>()\n      6     y = o.arange(3,dtype=n.float)\n      7     print x*y[n.newaxis,:]\n----> 8     print x/y[n.newaxis,:]\n      9\n     10\n~/lib/python/numpy/ma/core.pyc in __div__(self, other)\n   1882     def __div__(self, other):\n   1883         ""Divide other into self, and return a new masked array.""\n-> 1884         return divide(self, other)\n   1885     #\n   1886     def __truediv__(self, other):\n\n~/lib/python/numpy/ma/core.pyc in __call__(self, a, b)\n    640             mb = mask_or(mb, t)\n    641             # The following line controls the domain filling\n--> 642             d2 = np.where(t,self.filly,d2)\n    643         m = mask_or(ma, mb)\n    644         if (not m.ndim) and m:\n\nValueError: array dimensions must agree\n'"
1454,7727130,numpy-gitbot,numpy-gitbot,2012-10-19 19:57:54,2012-10-19 19:57:55,2012-10-19 19:57:55,closed,,,2,11 - Bug;component: numpy.core;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1454,b'chararray __mod__ error (Trac #856)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/856 on 2008-07-19 by @alanmcintyre, assigned to unknown._\n\nThe % operator doesn\'t seem to work as I\'d expect for chararray:\n\n\n    >>> A=np.array([[\'%.3f\',\'%d\'],[\'%s\',\'%r\']]).view(np.chararray)\n    >>> A % np.array([[1,2],[3,4]])\n    Traceback (most recent call last):\n     File ""<stdin>"", line 1, in <module>\n     File ""/opt/local/lib/python2.5/site-packages/numpy/core/defchararray.py"",\n    line 126, in __mod__\n       newarr[:] = res\n    ValueError: shape mismatch: objects cannot be broadcast to a single shape\n\n\n\nAttached is a patch that fixes this behavior and some associated tests.'"
1453,7727128,numpy-gitbot,numpy-gitbot,2012-10-19 19:57:52,2012-10-19 19:57:53,2012-10-19 19:57:53,closed,,,3,11 - Bug;component: numpy.core;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1453,b'chararray __mul__ error (Trac #855)',"b""_Original ticket http://projects.scipy.org/numpy/ticket/855 on 2008-07-18 by @alanmcintyre, assigned to unknown._\n\nMultiplication of a chararray by integers doesn't behave properly if any strings in the result should be longer than the size of a platform int (or so it seems).  For example, on a 32-bit machine:\n\n>>> A=np.array(['1','ab','xyz']).view(np.chararray)\n>>> A*1\nchararray(['1', 'ab', 'xyz'], \n      dtype='|S4')\n>>> A*2\nchararray(['11', 'abab', 'xyzx'], \n      dtype='|S4')\n>>> A*3     \nchararray(['111', 'abab', 'xyzx'], \n      dtype='|S4')\n\nThe dtype is always '|S4', and the longest strings are truncated to length 4. This seems to be caused by the way ndarray.__new__ uses the itemsize argument: when a numpy integer type is given for this argument, the itemsize of the argument (rather than the integer value it contains) is used as the itemsize of the new array.\n\nAttached is a patch that fixes this for chararray by forcing the itemsize argument given to ndarray.__new__ to be a Python int."""
1452,7727127,numpy-gitbot,numpy-gitbot,2012-10-19 19:57:48,2012-10-19 19:57:50,2012-10-19 19:57:50,closed,,1.2.0,2,11 - Bug;component: numpy.core;priority: high,https://api.github.com/repos/numpy/numpy/issues/1452,b'Non-standard branch cuts (Trac #854)',"b""_Original ticket http://projects.scipy.org/numpy/ticket/854 on 2008-07-17 by @pv, assigned to unknown._\n\nAt least numpy.arccosh has a very nonstandard choice of branch cuts. I think there are also no tests present that verify that the numpy functions with branch cuts behave according to some standard (eg. it would be nice to follow the ISO C99 standard).\n\nTests should be written, and all functions with branch cuts should be audited.\n\nConsider arccosh:\n\n\n    >>> import numpy as np\n    >>> numpy.__version__\n    '1.2.0.dev5436.e45a7627a39d'\n    >>> np.arccosh(-1e-9 + 0.1j)\n    (-0.099834078899207618-1.5707963277899337j)\n    >>> np.arccosh(1e-9 + 0.1j)\n    (0.099834078899207576+1.5707963257998594j)\n    >>> np.arccosh(-1e-9 - 0.1j)\n    (-0.099834078899207618+1.5707963277899337j)\n    >>> np.arccosh(1e-9 - 0.1j)\n    (0.099834078899207576-1.5707963257998594j)\n\n\n\nIt should be\n\n\n    >>> np.arccosh(-1e-9 + 0.1j)\n    (0.099834078899207576+1.5707963277899337j)\n    >>> np.arccosh(1e-9 + 0.1j)\n    (0.099834078899207576+1.5707963257998594j)\n    >>> np.arccosh(-1e-9 - 0.1j)\n    (0.099834078899207576-1.5707963277899337j)\n    >>> np.arccosh(1e-9 - 0.1j)\n    (0.099834078899207576-1.5707963257998594j)\n\n\nI see revisions r4881 and r4882 were made to fix this, but a braino slipped in as the new code is equivalent to the old one :)\n\nHere's a quick fix for arccosh\n\n\n    Index: umathmodule.c.src\n    ===================================================================\n    --- umathmodule.c.src\t(revision 5439)\n    +++ umathmodule.c.src\t(working copy)\n    @@ -825,15 +825,16 @@\n         c@typ@ t;\n     \n         nc_sum@c@(x, &nc_1@c@, &t);\n    +    nc_sqrt@c@(&t, &t);\n         nc_diff@c@(x, &nc_1@c@, r);\n    +    nc_sqrt@c@(r, r);\n         nc_prod@c@(&t, r, r);\n    -    nc_sqrt@c@(r, r);\n         nc_sum@c@(x, r, r);\n         nc_log@c@(r, r);\n         return;\n         /*\n           return nc_log(nc_sum(x,\n    -      nc_sqrt(nc_prod(nc_sum(x,nc_1), nc_diff(x,nc_1)))));\n    +      nc_prod(nc_sqrt(nc_sum(x,nc_1)), nc_sqrt(nc_diff(x,nc_1)))));\n         */\n     }\n\n\nThis is a very naive fix; we should be able to avoid calling sqrt twice by choosing the branch of the sqrt manually according to real and imaginary parts of x. Also, I didn't have time to write any tests yet, but I'll try to find time for writing and committing them.\n\nPlease, \n\n  - Don't close this ticket before there are test cases for *all* umath functions that have branch cuts.\n  - Don't commit any fixes to behavior if there are no tests are in SVN.\n\n\nReferences:\n\n  - ISO C standard (draft) is here: http://www.open-std.org/jtc1/sc22/wg14/www/standards\n  - Abramowitz & Stegun is here: http://www.math.sfu.ca/~cbm/aands/\n"""
1451,7727126,numpy-gitbot,numpy-gitbot,2012-10-19 19:57:46,2012-10-19 19:57:47,2012-10-19 19:57:47,closed,,,2,11 - Bug;component: numpy.core;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1451,b'numpy.sum is broken for anything with wrong a.sum() signature (Trac #853)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/853 on 2008-07-16 by @pv, assigned to unknown._\n\nOriginally reported in Scipy Trac (http://scipy.org/scipy/scipy/ticket/700) by alsuren.\n(The report is with numpy 1.0.4, but I believe this particular piece of code hasn\'t changed since.)\n\n-------\n\nThis is for python-numpy-1.0.4-6ubuntu3, but neither are on the version list below.\n\n== Test Case ==\n\n\n    from scipy import *\n    import numarray\n    a = numarray.numarraycore.ones((5,5))\n    fail = sum(a)\n    \n    /usr/lib/python2.5/site-packages/numpy/core/fromnumeric.py in sum(a, axis, dtype, out)\n        862     try:\n        863         sum = a.sum\n        864     except AttributeError:\n        865         return _wrapit(a, \'sum\', axis, dtype, out)\n    --> 866     return sum(axis, dtype, out)\n        867\n        868\n\n\n\n== Solution ==\nI personally don\'t like all this horrible flow control crap: I wouldn\'t even attempt to look for a sum() function, because the chances of it having the right signature is reasonably slim. I would simply call _wrapit() straight off. Something tells me that this may be expensive though. The solution looks like this (note that I have also added some assert statements. If these are also bugs, tell me.): \n\n\n     def sum(a, axis=None, dtype=None, out=None):\n         """"""...""""""\n         if isinstance(a, _gentype):\n             assert axis==None, ""axis is ignored for generator types.""\n             res = _sum_(a)\n             if out is not None:\n                 out[...] = res\n                 return out\n             return res\n         assert out == None, ""out is ignored for non-generator types.""\n         try:\n             return a.sum(axis, dtype, out)\n         except AttributeError: # Doesn\'t look like an ndarray\n         except TypeError:      # Doesn\'t quack like an ndarray\n             return _wrapit(a, \'sum\', axis, dtype, out)\n\n\n\n== Notes ==\nAlso, looking at the code, I\'m not quite sure what the point of ""out"" is (My first guess was that it would avoid stupid memory allocation, but surely the temporary array ""res"" will have been allocated on the heap anyway?). \nWork-around\n\nJust convert to ndarray using asarray() or array() (when is one or the other likely to be faster in the long run?)'"
1450,7727123,numpy-gitbot,numpy-gitbot,2012-10-19 19:57:37,2012-10-19 19:57:42,2012-10-19 19:57:42,closed,,1.4.1,7,11 - Bug;component: numpy.lib;priority: high,https://api.github.com/repos/numpy/numpy/issues/1450,b'Avoid temporary files when writing NPZ files. (Trac #852)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/852 on 2008-07-15 by @rkern, assigned to @rkern._\n\nCurrently, when writing out NPZ zip files, we make temporary files in order to use the ZipFile.write() API. These file names can conflict with other processes writing similar files. ZipFile.writestr() could be used to avoid writing temporary files at all, at the cost of memory. An alternative is to simply make a new temporary directory with tempfile.mkdtemp() and always put files in there, instead.\n\nChuck, is this a fix you want to allow for 1.1.1? Or should we just do it in 1.2? Thoughts on which fix to do?'"
1449,7727122,numpy-gitbot,numpy-gitbot,2012-10-19 19:57:34,2012-10-19 19:57:36,2012-10-19 19:57:36,closed,,,5,11 - Bug;component: numpy.core;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1449,b'binary_repr bug for some input types (Trac #851)',"b""_Original ticket http://projects.scipy.org/numpy/ticket/851 on 2008-07-13 by @rgommers, assigned to @cournape._\n\nbinary_repr() behaves differently for different types of ints/uints:\n\n\n    In [210]: binary_repr(255)\n    Out[210]: '11111111'\n    \n    In [211]: binary_repr(uint32(255))\n    Out[211]: '11111111'\n    \n    In [212]: binary_repr(uint16(255))\n    Out[212]: '1'\n\n\nThis is due to the use of hex() (checked that it is still present in trunk), which expects int or long int:\n\n\n    In [9]: hex(np.uint16(255))\n    Out[9]: '0x1'\n\n"""
1448,7727120,numpy-gitbot,numpy-gitbot,2012-10-19 19:57:32,2012-10-19 19:57:33,2012-10-19 19:57:33,closed,,1.2.0,2,11 - Bug;component: Other;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1448,b'Memory leak in `_strings_richcompare` (Trac #850)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/850 on 2008-07-09 by trac user Araneidae, assigned to @charris._\n\nWhen comparing `str` and `unicode` arrays the routine `_strings_richcompare` will leak a reference count if the type conversion fails.  This is fixed by the attached patch.'"
1447,7727118,numpy-gitbot,numpy-gitbot,2012-10-19 19:57:30,2012-10-19 19:57:30,2012-10-19 19:57:30,closed,,1.2.0,2,11 - Bug;component: Other;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1447,b'Possible reference to deallocated object (Trac #849)',"b""_Original ticket http://projects.scipy.org/numpy/ticket/849 on 2008-07-09 by trac user Araneidae, assigned to @charris._\n\nIn `dotblas_matrixproduct` there is a code sequence which can potentially set a reference count on an object to zero before incrementing it again -- this could occur if `PyArray_DescrFromType` succeeds but doesn't retain its `newtype` argument.  A little marginal, but easy to fix (and other code elsewhere does this right).\n\nPatch attached."""
1446,7727117,numpy-gitbot,numpy-gitbot,2012-10-19 19:57:25,2012-10-19 19:57:28,2012-10-19 19:57:28,closed,,1.2.0,8,11 - Bug;component: Other;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1446,b'Another ref count leak using PyArray_DescrFromType (Trac #848)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/848 on 2008-07-08 by trac user Araneidae, assigned to @teoliphant._\n\nThe attached patch fixes one of the two reference count leaks that occur every time a new datatype is created (eg, `float32()` leaks two references -- this patch fixes one).'"
1444,7727107,numpy-gitbot,numpy-gitbot,2012-10-19 19:57:18,2012-10-19 19:57:19,2012-10-19 19:57:19,closed,,1.2.0,1,11 - Bug;component: Other;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1444,b'Topical documentation as `numpy.doc` (Trac #846)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/846 on 2008-07-08 by @stefanv, assigned to @stefanv._\n\nProvide a new sub-module, numpy.doc, which contains docstrings for topics such\nas indexing and broadcasting.\n\nPlease review the proposed patch at http://codereview.appspot.com/2485.\n'"
1443,7726524,numpy-gitbot,numpy-gitbot,2012-10-19 19:31:33,2012-10-19 19:31:34,2012-10-19 19:31:34,closed,,1.2.0,1,11 - Bug;component: Other;priority: high,https://api.github.com/repos/numpy/numpy/issues/1443,b'deepcopy not identical to source (Trac #845)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/845 on 2008-07-07 by trac user Goswin, assigned to unknown._\n\nInstances created by calling _deepcopy_ on ojects including numpy arrays do not always behave identically as their source object. An example follows:\n\n\n\n    #!/usr/bin/python\n    import numpy as n #Arrays\n    from copy import deepcopy\n    \n    \n    class Data(object):\n      #\n      def __init__(self,rows,cols):\n        self.background = n.ones((rows+2,cols),)\n        #\n        self.matrix =  self.background[:rows,:]\n        self.addon = self.background[rows:rows+2,:]\n      #\n      def show(self):\n        print ""\\n\\nState of the data:""\n        print \'\\n\', self.background\n    \n    \n    prototype = Data(rows=4,cols=8)\n    #\n    data = prototype #WORKS OK (DESIRED BEHAVIOR)\n    #data = deepcopy(prototype) #DIFFERENT OUTPUT, uncomment in order to compare\n    #\n    data.show()\n    data.matrix[1,1] = -2\n    data.addon *= 2\n    data.matrix += 5\n    data.show()\n\n\n'"
1442,7726522,numpy-gitbot,numpy-gitbot,2012-10-19 19:31:30,2012-10-19 19:31:32,2012-10-19 19:31:32,closed,,1.1.1,3,11 - Bug;component: Official binaries;priority: highest,https://api.github.com/repos/numpy/numpy/issues/1442,b'failure with numpy.inner (Trac #844)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/844 on 2008-07-05 by trac user gregorth, assigned to @cournape._\n\nAfter upgrading to NumPy 1.1.0 (I installed numpy-1.1.0-win32-superpack-pyhon2.5) I observed a fatal failure with the following code which uses numpy.inner\n\n\n\n\n    import numpy\n    F = numpy.zeros(shape = (1,79), dtype = numpy.float64)\n    #this suceeds\n    FtF = numpy.inner(F,F.copy())\n    #this fails\n    FtF = numpy.inner(F,F)\n\n\n\n\nThe failure (Exception code 0xc0000005) happens in _dotblas.pyd. I use Windows XP on a Intel Core2Duo system. '"
1441,7726521,numpy-gitbot,numpy-gitbot,2012-10-19 19:31:28,2012-10-19 19:31:29,2012-10-19 19:31:29,closed,,1.2.0,3,11 - Bug;component: Other;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1441,b'Reference count error in PyArray_CanCoerceScalar (Trac #843)',"b""_Original ticket http://projects.scipy.org/numpy/ticket/843 on 2008-07-04 by @pv, assigned to @charris._\n\nForwarded here from numpy mailing list:\n\n-----\nMichael Abbott wrote:\n\nThe bug itself is very easy to see in Python debug mode: adding arrays of\ndiffering shapes causes the reference count to increase on each operation.\nFor example:\n\n\n    array(1) + 1      # Leaks one ref count per call\n    1 + array(1)      # Leaks 12 ref counts per call(!)\n\n\nIt turns out that PyArray_CanCoerceScalar is being called rather a lot of\ntimes (some of the lower level numpy code is really not nice, which is a\npity as there's some really clean code there too) ... and it has a ref\ncount leak.  The patch below fixes this problem.\n\nAttached patch was made against version 5331 from subversion.  The leak was\nintroduced in revision 2575 in June '06, over two years ago -- I'm a\nlittle surprised this hasn't been discovered already.\n"""
1440,7726510,numpy-gitbot,numpy-gitbot,2012-10-19 19:31:00,2012-10-23 02:39:16,2012-10-19 19:31:26,closed,,1.3.0,6,11 - Bug;component: numpy.core;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1440,b'Weird behavior of conjugate (Trac #842)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/842 on 2008-07-04 by @huard, assigned to unknown._\n\nThe string representation of complex arrays returned by conjugate is buggy.\n\n\n\n    np.conjugate(np.array(8+7j))\n     <[83]: (8.0+-7.0j)\n    \n    > [84]: np.array(8-7j)\n     <[84]: array((8-7j))\n\n\n\nNote also that integers are converted to floats.'"
1439,7726506,numpy-gitbot,numpy-gitbot,2012-10-19 19:30:57,2012-10-19 19:30:58,2012-10-19 19:30:58,closed,,,2,11 - Bug;component: Other;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1439,b'Inconsistency in complex string representation introduced in NumPy 1.1 (Trac #841)',"b""_Original ticket http://projects.scipy.org/numpy/ticket/841 on 2008-07-04 by @FrancescAlted, assigned to @charris._\n\nWith !NumPy 1.0 series, the representation of complex types where identical for !NumPy and Python:\n\n\n\n    >>> numpy.__version__\n    '1.0.3'\n    >>> repr(numpy.complex(0))    # The Python type\n    '0j'\n    >>> repr(numpy.complex128(0))  # The NumPy type\n    '0j'\n\n\n\nStarting with !NumPy 1.1, it diverges from the Python standard:\n\n\n\n    >>> numpy.__version__\n    '1.2.0.dev5313'\n    >>> repr(numpy.complex(0))\n    '0j'\n    >>> repr(numpy.complex128(0))\n    '(0.0+0.0j)'\n\n\n\nI think that, in order to ensure good interactivity of the !NumPy complex type with that of Python, the previous way to represent complex number should be reverted."""
1438,7726502,numpy-gitbot,numpy-gitbot,2012-10-19 19:30:51,2012-10-19 19:30:56,2012-10-19 19:30:56,closed,,,15,11 - Bug;component: numpy.core;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1438,"b""SystemError in ndarray.resize, order= argument doesn't work (Trac #840)""","b'_Original ticket http://projects.scipy.org/numpy/ticket/840 on 2008-07-04 by @pv, assigned to @cournape._\n\nThe third (order=) parameter in ndarray.resize apparently doesn\'t work:\n\n\n    >>> import numpy as np\n    >>> np.__version__\n    \'1.1.0\'\n    >>> a = np.array([[0,1],[2,3]])\n    >>> a.resize((2,2), order=False)\n    Traceback (most recent call last):\n      File ""<stdin>"", line 1, in <module>\n    SystemError: NULL result without error in PyObject_Call\n\n\nAlso, what is the third argument supposed to do? Its use is not explained in the docstring.\n\n(Reported originally here: http://sd-2116.dedibox.fr/pydocweb/doc/numpy.ndarray.resize/ )\n'"
1437,7726501,numpy-gitbot,numpy-gitbot,2012-10-19 19:30:49,2012-10-19 19:30:50,2012-10-19 19:30:50,closed,,1.2.0,2,11 - Bug;component: numpy.lib;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1437,b'DataSource tests require network access (Trac #839)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/839 on 2008-07-03 by @rkern, assigned to @rkern._\n\nThe unit tests for the URL handling capability require network access. We should stub in a replacement for `urllib2.urlopen()` to avoid accessing the network.'"
1435,7726499,numpy-gitbot,numpy-gitbot,2012-10-19 19:30:44,2012-10-19 19:30:45,2012-10-19 19:30:45,closed,,1.2.0,3,11 - Bug;component: Other;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1435,b'Infinite loop in fromfile & fromstring (Trac #837)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/837 on 2008-06-28 by @pv, assigned to unknown._\n\nIn numpy 1.1.0:\n\nThis causes an infinite loop:\n\n\n    >>> import numpy as np\n    >>> f = open(\'foo.txt\', \'w\'); f.write(\'1.234\'); f.close()\n    >>> np.fromfile(\'foo.txt\', sep=\' \')\n    array([ 1.234])\n    >>> f = open(\'foo.txt\', \'w\'); f.write(\'1,234\'); f.close()\n    >>> np.fromfile(\'foo.txt\', sep=\' \')\n    [infinite loop ensues]\n\n\n\nAnother way, which highlights a locale dependency:\n\n\n    >>> import numpy as np, locale\n    >>> locale.setlocale(locale.LC_ALL, \'fi_FI.UTF-8\')\n    >>> f = open(\'foo.txt\', \'w\'); f.write(\'1,234\'); f.close()\n    >>> np.fromfile(\'foo.txt\', sep=\' \')\n    array([ 1.234])\n    >>> f = open(\'foo.txt\', \'w\'); f.write(\'1.234\'); f.close()\n    >>> np.fromfile(\'foo.txt\', sep=\' \')\n    [infinite loop ensues]\n\n\n\nfromstring also hangs\n\n\n    >>> import numpy as np\n    >>> np.fromstring(\'1.234\', sep=\' \')\n    array([ 1.234])\n    >>> np.fromstring(\'1,234\', sep=\' \')\n    [hangs]\n\n\nbut it\'s not locale-dependent\n\n\n    >>> import numpy as np, locale\n    >>> locale.setlocale(locale.LC_ALL, \'fi_FI.UTF-8\')\n    >>> np.fromstring(\'1.234\', sep=\' \')\n    array([ 1.234])\n    >>> np.fromstring(\'1,234\', sep=\' \')\n    [hangs]\n\n\n\ngdb shows:\n\n\n    (gdb) bt\n    #0  0xb7e4bd73 in _IO_vfscanf () from /lib/tls/i686/cmov/libc.so.6\n    #1  0xb7e4f353 in vfscanf () from /lib/tls/i686/cmov/libc.so.6\n    #2  0xb7e54ce2 in fscanf () from /lib/tls/i686/cmov/libc.so.6\n    #3  0xb7cf9cae in DOUBLE_scan (fp=0x8320960, ip=0xb6102cd0, ignore=0x0, \n        ignore2=0xb7d35aa0) at numpy/core/src/arraytypes.inc.src:877\n    #4  0xb7ce509a in fromfile_next_element (fp=0xbfc9fe94, dptr=0xb6102cd0, \n        dtype=0xb7d35aa0, stream_data=0x0)\n        at numpy/core/src/multiarraymodule.c:5994\n    #5  0xb7cfe62b in array_from_text (dtype=0xb7d35aa0, num=-1, \n        sep=<value optimized out>, nread=0xbfc9fec8, stream=0x8320960, \n        next=0xb7ce5070 <fromfile_next_element>, \n        skip_sep=0xb7d02f90 <fromfile_skip_separator>, stream_data=0x0)\n        at numpy/core/src/multiarraymodule.c:6137\n    #6  0xb7d02b46 in PyArray_FromFile (fp=0x8320960, dtype=0xb7d35aa0, num=-1, \n        sep=0xbfc9fdb8 "",\\020T2\\211\\234T2\\232P\xa6\xc7`\\t2\\b,\\020"")\n        at numpy/core/src/multiarraymodule.c:6384\n    #7  0xb7d02ec6 in array_fromfile (ignored=0x0, args=0xb7de56cc, \n        keywds=0xb64051c4) at numpy/core/src/multiarraymodule.c:6448\n    #8  0x0805cb37 in PyObject_Call (func=0xbfc9fdb8, arg=0xb7de56cc, \n        kw=0xb64051c4) at ../Objects/abstract.c:1861\n    #9  0x080c7987 in PyEval_EvalFrameEx (f=0x81a823c, throwflag=0)\n        at ../Python/ceval.c:3784\n\n\n\nFixing this:\n  - In any case there shouldn\'t be an infinite loop\n  - I think that fromfile and fromstring should behave equivalently wrt. locales\n  - I think it might be preferable if fromfile and fromstring didn\'t depend on the locale\n  - The fix should probably be backported to 1.1.1\n'"
1433,7726494,numpy-gitbot,numpy-gitbot,2012-10-19 19:30:39,2012-10-23 02:39:13,2012-10-19 19:30:40,closed,,1.2.0,4,11 - Bug;component: numpy.core;priority: high,https://api.github.com/repos/numpy/numpy/issues/1433,b'bus error from numpy self tests on Solaris (Trac #835)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/835 on 2008-06-25 by @chanley, assigned to unknown._\n\nWe have been seeing a bus error on Solaris in the numpy self tests for a couple of days now.  The error is occurring with the HEAD of the svn trunk.  The message is below:\n\n\n\n    Writing /usr/stsci/pyssgdev/2.5.1/numpy-1.2.0.dev5313-py2.5.egg-info\n    if ( 0 != 0 ) then\n    echo BUILD SUCCEEDED - STARTING TEST\n    BUILD SUCCEEDED - STARTING TEST\n    python /eng/ssb/auto/prog/lib/numpy_test.py\n    /usr/ra/pyssg/2.5.1/numpy/lib/function_base.py:166: FutureWarning: \n            The semantics of histogram will be modified in\n            release 1.2 to improve outlier handling. The new behavior can be\n            obtained using new=True. Note that the new version accepts/returns\n            the bin edges instead of the left bin edges.\n            Please read the docstring for more information.\n      Please read the docstring for more information."""""", FutureWarning)\n    /usr/ra/pyssg/2.5.1/numpy/lib/function_base.py:193: FutureWarning: \n                The semantic for bins will change in version 1.2.\n                The bins will become the bin edges, instead of the left bin edges.\n                \n      """""", FutureWarning)\n    Bus Error (core dumped)\n    if ( 138 != 0 ) then\n    echo <font color=orange>selftest</font>\n    exit 0\n\n\n\nA full build log can be found at:\n\nhttp://stsdas.stsci.edu/lore/log/build/grail/numpy/06-24.23.14.log\n\n'"
1432,7726492,numpy-gitbot,numpy-gitbot,2012-10-19 19:30:37,2012-10-19 19:30:38,2012-10-19 19:30:38,closed,,1.2.0,1,11 - Bug;component: Other;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1432,"b""numpy.sort sometimes doesn't handle strings right (Trac #834)""","b'_Original ticket http://projects.scipy.org/numpy/ticket/834 on 2008-06-24 by @cournape, assigned to unknown._\n\nSee ticket 656 on scipy trac.'"
1431,7726491,numpy-gitbot,numpy-gitbot,2012-10-19 19:30:34,2012-10-19 19:30:35,2012-10-19 19:30:35,closed,,1.2.0,1,11 - Bug;component: Other;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1431,b'No array function equivalent to matrix ** [PATCH] (Trac #833)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/833 on 2008-06-24 by @cournape, assigned to unknown._\n\nSee ticket 625 on scipy.'"
1430,7726490,numpy-gitbot,numpy-gitbot,2012-10-19 19:30:32,2012-10-19 19:30:33,2012-10-19 19:30:33,closed,,1.2.0,2,11 - Bug;component: Other;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1430,b'numpy.ndarray relational operators do not (seem to) respect array priority (Trac #832)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/832 on 2008-06-24 by @cournape, assigned to unknown._\n\n(redirected from ticket 521 of scipy)\n\nSuppose I have an object class of Foo, say ""a"" that can be compared to an ndarray object, ""b"". I can make a + b or b + a both call the plus or rplus methods in class Foo. However, there is no way to make this happen for a == b and b == a (or any of the relational operators) I have not been able to figure out where to put this logic.'"
1429,7726489,numpy-gitbot,numpy-gitbot,2012-10-19 19:30:30,2012-10-19 19:30:31,2012-10-19 19:30:31,closed,,1.2.0,1,11 - Bug;component: numpy.lib;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1429,b'numpy.float64*poly1d = array (Trac #831)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/831 on 2008-06-24 by @cournape, assigned to unknown._\n\nInitially reported on scipy trac (495)\n\nI ran into a problem with multiplying a float by a poly1d and getting an array instead of a poly1d returned. It only actually happens if multiplying by a numpy.float64 and not just a regular float or int\n\ntemp = poly1d([1.0,2.0]) temp*10#<-- This is fine, returns poly1d 10*temp#<-- returns poly1d 10.0*temp#<-- returns poly1d numpy.float64(10.0)*temp#<-- returns array of coeffs '"
1428,7726488,numpy-gitbot,numpy-gitbot,2012-10-19 19:30:26,2012-10-23 02:39:11,2012-10-19 19:30:29,closed,,1.3.0,10,11 - Bug;component: numpy.core;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1428,b'Divide by zero memory leak (Trac #830)',"b""_Original ticket http://projects.scipy.org/numpy/ticket/830 on 2008-06-24 by @cournape, assigned to @cournape._\n\nSee ticket 493 from scipy trac\n\nDividing by zero (e.g. 1/scipy.float64(0.)) yields scipy.inf as it is supposed to, but leaks memory in the process.\n\nI'll attach a sample program where memory usage grows without bound.\n\n\n\n    #!python\n    import scipy\n    x = scipy.float64(0.)\n    while 1:\n        1/x\n\n\n """
1427,7726487,numpy-gitbot,numpy-gitbot,2012-10-19 19:30:24,2012-10-19 19:30:24,2012-10-19 19:30:24,closed,,1.2.0,2,11 - Bug;component: Other;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1427,b'SEGFAULT when attempting to use arrays as indices into multi-dimensional arrays (Trac #829)',"b""_Original ticket http://projects.scipy.org/numpy/ticket/829 on 2008-06-22 by @cournape, assigned to unknown._\n\nForwarded from scipy ticket 670\n\nI've tried several methods of using arrays as indices into a multi-dimensional array. One of them, taken from: http://mathesaurus.sourceforge.net/matlab-numpy.html\n\nsimply causes a ValueError?, the other two cause a segfault.\n\nSample 1: \n\n\n\n    #!python\n    from pylab import * \n    import numpy print numpy.version, numpy.__file__\n    \n    a = array([[ 11, 12, 13, 14 ], [ 21, 22, 23, 24 ], [ 31, 32, 33, 34 ]])\n    \n    try:\n        a.take([0,2]).take([0,3], axis=1)\n    except ValueError, e:\n        print 'Got a Value Error: %s' % e\n\n\n\n\nSample 2: \n\n\n\n    #!python\n    \n    from pylab import * \n    import numpy print numpy.version, numpy.__file__\n    \n    nrows = 648\n    ncols = 690\n    data = rand(nrows,ncols)\n    i,j = (data < 0.14).nonzero() \n    print 'I get a segfault here:' \n    data[ix_(i,j)] = data[ix_(i,j)]*0\n\n\n\nSample 3: \n\n\n\n    #!python\n    from pylab import * \n    import numpy print numpy.version, numpy.__file__ \n    \n    nrows = 648\n    ncols = 690\n    data = rand(nrows,ncols)\n    i,j = (data < 0.14).nonzero() \n    print 'I get a segfault here:' \n    data[i,:][:,j] = data[i,:][:,j]*0 \n\n"""
1426,7726484,numpy-gitbot,numpy-gitbot,2012-10-19 19:30:19,2012-10-19 19:30:22,2012-10-19 19:30:22,closed,,1.2.0,8,11 - Bug;component: Other;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1426,"b'npy file format test failures on open solaris (x86, 32 bits) (Trac #828)'","b'_Original ticket http://projects.scipy.org/numpy/ticket/828 on 2008-06-21 by @cournape, assigned to unknown._\n\nBig list of test failures on open solaris. I attached the compressed log of numpy.test(verbose = 10)'"
1425,7726482,numpy-gitbot,numpy-gitbot,2012-10-19 19:30:16,2012-10-19 19:30:18,2012-10-19 19:30:18,closed,,1.3.0,5,11 - Bug;component: numpy.testing;priority: highest,https://api.github.com/repos/numpy/numpy/issues/1425,b'numpy.test fails + nose traceback on windows (Trac #827)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/827 on 2008-06-20 by @cournape, assigned to unknown._\n\nI got the following error while testing numpy on windows:\n\n\n\n    #!python\n     File ""<string>"", line 1, in <module>\n     File ""C:\\Python25\\Lib\\site-packages\\numpy\\testing\\nosetester.py"", line 150, in test\n       nose.run(argv=argv)\n     File ""c:\\python25\\lib\\site-packages\\nose-0.10.3-py2.5.egg\\nose\\core.py"", line 368, in run\n       return TestProgram(*arg, **kw).success\n     File ""c:\\python25\\lib\\site-packages\\nose-0.10.3-py2.5.egg\\nose\\core.py"", line 219, in __init__\n       argv=argv, testRunner=testRunner, testLoader=testLoader)\n     File ""C:\\Python25\\lib\\unittest.py"", line 768, in __init__\n       self.runTests()\n     File ""c:\\python25\\lib\\site-packages\\nose-0.10.3-py2.5.egg\\nose\\core.py"", line 298, in runTests\n       result = self.testRunner.run(self.test)\n     File ""c:\\python25\\lib\\site-packages\\nose-0.10.3-py2.5.egg\\nose\\core.py"", line 62, in run\n       test(result)\n     File ""c:\\python25\\lib\\site-packages\\nose-0.10.3-py2.5.egg\\nose\\suite.py"", line 132, in __call__\n       return self.run(*arg, **kw)\n     File ""c:\\python25\\lib\\site-packages\\nose-0.10.3-py2.5.egg\\nose\\suite.py"", line 162, in run\n       test(orig)\n     File ""c:\\python25\\lib\\site-packages\\nose-0.10.3-py2.5.egg\\nose\\suite.py"", line 132, in __call__\n       return self.run(*arg, **kw)\n     File ""c:\\python25\\lib\\site-packages\\nose-0.10.3-py2.5.egg\\nose\\suite.py"", line 162, in run\n       test(orig)\n     File ""c:\\python25\\lib\\site-packages\\nose-0.10.3-py2.5.egg\\nose\\suite.py"", line 132, in __call__\n       return self.run(*arg, **kw)\n     File ""c:\\python25\\lib\\site-packages\\nose-0.10.3-py2.5.egg\\nose\\suite.py"", line 162, in run\n       test(orig)\n     File ""c:\\python25\\lib\\site-packages\\nose-0.10.3-py2.5.egg\\nose\\suite.py"", line 132, in __call__\n       return self.run(*arg, **kw)\n     File ""c:\\python25\\lib\\site-packages\\nose-0.10.3-py2.5.egg\\nose\\suite.py"", line 162, in run\n       test(orig)\n     File ""c:\\python25\\lib\\site-packages\\nose-0.10.3-py2.5.egg\\nose\\suite.py"", line 132, in __call__\n       return self.run(*arg, **kw)\n     File ""c:\\python25\\lib\\site-packages\\nose-0.10.3-py2.5.egg\\nose\\suite.py"", line 162, in run\n       test(orig)\n     File ""c:\\python25\\lib\\site-packages\\nose-0.10.3-py2.5.egg\\nose\\suite.py"", line 132, in __call__\n       return self.run(*arg, **kw)\n     File ""c:\\python25\\lib\\site-packages\\nose-0.10.3-py2.5.egg\\nose\\suite.py"", line 155, in run\n       for test in self._tests:\n     File ""c:\\python25\\lib\\site-packages\\nose-0.10.3-py2.5.egg\\nose\\suite.py"", line 277, in _get_wrapped_tests\n       for test in self._get_tests():\n     File ""c:\\python25\\lib\\site-packages\\nose-0.10.3-py2.5.egg\\nose\\suite.py"", line 76, in _get_tests\n       for test in self.test_generator:\n     File ""c:\\python25\\lib\\site-packages\\nose-0.10.3-py2.5.egg\\nose\\loader.py"", line 221, in generate\n       for test in g():\n     File ""C:\\Python25\\lib\\site-packages\\numpy\\lib\\tests\\test_format.py"", line 430, in test_memmap_roundtrip\n       fp = open(nfn, \'wb\')\n    OError: [Errno 2] No such file or directory: \'c:\\\\docume~1\\\\admini~1\\\\locals~1\\\\temp\\\\tmp9fvihc\\\\normal.npy\'\n\n\n\nThe file does exists, so I expect some problems with the path.'"
1424,7726480,numpy-gitbot,numpy-gitbot,2012-10-19 19:30:13,2013-03-22 23:20:50,2012-10-19 19:30:15,closed,,1.3.0,7,11 - Bug;component: numpy.core;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1424,b'Error in basic arithmetic involving masked objects and scalar types (Trac #826)',"b""_Original ticket http://projects.scipy.org/numpy/ticket/826 on 2008-06-20 by trac user dharland, assigned to unknown._\n\n[Running numpy 1.1 against python 2.4.5 on OSX 10.4.11]\n\nBasic arithmetic involving some numpy types and ma.masked doesn't propagate the masked value.\n\nFor example:\n\n\n\n    >>> a = ma.arange(10, dtype=float)\n    >>> a[0] = ma.masked\n    >>> print a[2] - a[0]\n    2.0  # Should be --\n\n\n\nWhether ma.masked propagates depends on the array type and order of arithmetic\n\n\n\n    >>> print numpy.float64(10) + ma.masked\n    10.0    # WRONG, *doesn't* enter into ma/core.py:__array_wrap__\n    >>> print ma.masked + numpy.float64(10)\n    --      # RIGHT, MaskedArray.__add__ handles the operation\n    >>> print numpy.float32(10) + ma.masked\n    --      # RIGHT, enters into ma/core.py:__array_wrap__\n    >>> print numpy.float128(10) + ma.masked\n    10.0    # WRONG, *doesn't* enter into ma/core.py:__array_wrap__\n    >>> print numpy.int32(10) + ma.masked\n    --      # RIGHT, enters into ma/core.py:__array_wrap__\n\n\n\nThe error is ultimately caused by __array_wrap__ not being called for some numpy types (which handles the propagation of the mask)\n\nAlthough it works correctly for an int with an ma.masked a similar error can be produced if we effectively transform ma.masked.dtype to numpy.int_\n\n\n\n    >>> print numpy.int_(1) + ma.MaskedArray(0, dtype=numpy.int_, mask=True)\n    1        # Sould be --\n\n\n\nIts speculating but I believe the error is in:\n\n\n      scalarmathmodule.c:_@name@_convert_to_ctype\n      (when called on the ma.masked PyObject)\n\n\nwhich I believe will call\n\n\n\n      PyArray_ScalarFromObject\n\n\n\nwhich does not work correctly for an ma.masked (it will detect its zero dimensional and just return its data element\n\n"""
1423,7726479,numpy-gitbot,numpy-gitbot,2012-10-19 19:30:10,2012-10-19 19:30:11,2012-10-19 19:30:11,closed,,1.2.0,5,11 - Bug;component: Other;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1423,b'SIGBUS in UNICODE_getatter on Sparc Linux (Trac #825)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/825 on 2008-06-18 by @drnlm, assigned to @charris._\n\nThe following throws a SIGBUS on Sparc Linux\n\n\n    import numpy as np\n    desc_str = [ (\'x\', \'u1\'), (\'s\', \'S2\'), ]\n    desc_uni2 = [ (\'x\', \'u4\'), (\'s\', \'U2\'), ]\n    desc_uni = [ (\'x\', \'u1\'), (\'s\', \'U2\'), ]\n    buffer = [ (5, \'cc\'), (6, \'dd\') ]\n    \n    ta = np.array(buffer, dtype=np.dtype(desc_str).newbyteorder(\'>\'))\n    print ta\n    ta = np.array(buffer, dtype=np.dtype(desc_uni2).newbyteorder(\'>\'))\n    print ta\n    ta = np.array(buffer, dtype=np.dtype(desc_uni).newbyteorder(\'>\'))\n    tb = ta\n    print \'assigmenet succeeds\'\n    print ta\n\n\n\n\n\n    $ python ./scipy_sparc_sugbus.py \n    [(5, \'cc\') (6, \'dd\')]\n    [(5L, u\'cc\') (6L, u\'dd\')]\n    assigmenet succeeds\n    Bus error\n\n\n\nFrom gdb\n\n\n    Program received signal SIGBUS, Bus error.\n    [Switching to Thread 0xf7faba00 (LWP 7000)]\n    UNICODE_getitem (ip=0x2426b9 """", ap=0x30be38)\n        at numpy/core/src/arraytypes.inc.src:264\n    264         while(mysize > 0 && *dptr-- == 0) mysize--;\n\n\n\nThis occurs with the latest svn snapshot (it\'s causing the bus error on the Sparc Linux buildbots), but also occurs with the debian 1.0.1 pacakges, so this likes like an existing bug uncovered by the new test suite.\n'"
1422,7726477,numpy-gitbot,numpy-gitbot,2012-10-19 19:30:08,2012-10-19 19:30:08,2012-10-19 19:30:08,closed,,1.3.0,1,11 - Bug;component: numpy.core;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1422,b'Infinite loop in floating point addition (Trac #824)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/824 on 2008-06-18 by @stefanv, assigned to unknown._\n\nIn r5264, the following code enters an infinite loop:\n\n\n\n    import numpy as np\n    z = np.float128(np.inf)\n    np.nan_to_num(z) + 200000000000000000000000000000000000000\n\n\n\n\n\n    #0  0x000d141e in construct_loop (self=0x4188f0, args=0x1326a30, kwds=0x0, mps=0xbf800a50) at ufuncobject.c:1787\n    #1  0x000d30ef in PyUFunc_GenericFunction (self=0x4188f0, args=0x1326a30, kwds=0x0, mps=0xbf800a50) at ufuncobject.c:1953\n    #2  0x000d47a9 in ufunc_generic_call (self=0x4188f0, args=0x1326a30, kwds=0x4188f0) at ufuncobject.c:3316\n    #3  0x001a3289 in call_function_tail ()\n    #4  0x001a726a in _PyObject_CallFunction_SizeT ()\n    #5  0x00520d47 in array_add (m1=0x144a720, m2=0x79100) at arrayobject.c:3543\n    #6  0x006dcc73 in longdouble_add (a=0x144a720, b=0x79100) at scalarmathmodule.c.src:575\n    #7  0x001a1f92 in binary_op1 ()\n    #8  0x001a2b96 in PyNumber_Add ()\n    #9  0x000cd66e in PyUFunc_OO_O (args=0x1f58648, dimensions=0x4188f0, steps=0x1326a30, func=0x1a2b70) at ufuncobject.c:535\n    #10 0x000d3790 in PyUFunc_GenericFunction (self=0x4188f0, args=0x1326a30, kwds=0x0, mps=0xbf8014a0) at ufuncobject.c:1971\n    #11 0x000d47a9 in ufunc_generic_call (self=0x4188f0, args=0x13269e0, kwds=0x4188f0) at ufuncobject.c:3316\n    #12 0x001a3289 in call_function_tail ()\n    #13 0x001a726a in _PyObject_CallFunction_SizeT ()\n    #14 0x00520d47 in array_add (m1=0x144a640, m2=0x79100) at arrayobject.c:3543\n    #15 0x006dcc73 in longdouble_add (a=0x144a640, b=0x79100) at scalarmathmodule.c.src:575\n    #16 0x001a1f92 in binary_op1 ()\n    #17 0x001a2b96 in PyNumber_Add ()\n    ...\n\n'"
1421,7726474,numpy-gitbot,seberg,2012-10-19 19:30:06,2014-02-21 19:18:24,2014-02-10 22:10:55,closed,,,13,11 - Bug;component: numpy.core;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1421,b'Size-1 arrays should be indexable by numpy.bool_ objects (Trac #823)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/823 on 2008-06-17 by @teoliphant, assigned to unknown._\n\nThe numpy.bool_ scalar should be allowed for masked-indexing of size-1 arrays.  Currently, if x is a 0-d array, then x>3 is a numpy.bool_ objects and for a 0-d array y[x>3] will fail, while it should succeed as if numpy.bool_ were a 0-d array of boolean datatype. \n\nThis is related to Ticket #1319.  There are some questions about whether or not 0-d arrays should be be ""maskable"".  I think they should be maskable and return a size-0 array if the mask does not succeed. \n'"
1420,7726472,numpy-gitbot,numpy-gitbot,2012-10-19 19:30:04,2012-10-23 02:39:05,2012-10-19 19:30:05,closed,,1.2.0,1,11 - Bug;component: Other;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1420,b'Segfault deallocating long chains of views (Trac #822)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/822 on 2008-06-17 by @rkern, assigned to unknown._\n\n\n\n    \n    In [1]: from numpy import *\n    \n    In [2]: A = zeros(1, dtype=uint8)\n    \n    In [3]: B = A[:]\n    \n    In [4]: for i in xrange(1000000):\n       ...:     B = B[:]\n       ...:     \n       ...:     \n    \n    In [5]: del B\n    zsh: segmentation fault  ipython\n\n\n\nThis has caused a problem for someone using PyMC.\n\nThe segfault occurs on line 2079 of arrayobject.c . On 32-bit Intel OS X, I only get the segfault if the number of iterations is >= 261935.'"
1419,7726471,numpy-gitbot,numpy-gitbot,2012-10-19 19:29:52,2012-10-23 02:39:04,2012-10-19 19:30:03,closed,,,52,11 - Bug;component: numpy.ma;priority: high,https://api.github.com/repos/numpy/numpy/issues/1419,"b'Numpy 1.1.0 broken for Python 2.3, because of unsupported dictionary update (Trac #821)'","b'_Original ticket http://projects.scipy.org/numpy/ticket/821 on 2008-06-17 by trac user dhendriks, assigned to @pearu._\n\nAfter I just upgraded my Numpy from 1.0.3.1 to 1.1.0 and executed (using \nPython 2.3.4):\n\n\n\n    python -c \'import numpy; numpy.test()\'\n\n\n\nI got:\n\n\n\n    Traceback (most recent call last):\n      File ""<string>"", line 1, in ?\n      File ""#######/lib/python2.3/site-packages/numpy/__init__.py"", line 107, in ?\n        import ma\n      File ""#######/lib/python2.3/site-packages/numpy/ma/__init__.py"", line 14, in ?\n        import core\n      File ""#######/lib/python2.3/site-packages/numpy/ma/core.py"", line 114, in ?\n        max_filler.update([(k,-numpy.inf) for k in [numpy.float32, numpy.float64]])\n    AttributeError: keys\n\n\n\nIt seems Python 2.3 doesn\'t allow updating dictionaries using a list of \nkey-value-pair tuples; it only allows a dictionary as parameter to update().\n\nSee also:[[BR]]\nhttp://www.python.org/doc/2.3.4/lib/typesmapping.html[[BR]]\nhttp://www.python.org/doc/2.4/lib/typesmapping.html\n'"
1418,7726469,numpy-gitbot,numpy-gitbot,2012-10-19 19:29:48,2012-10-19 19:29:50,2012-10-19 19:29:50,closed,,1.2.0,3,11 - Bug;component: numpy.ma;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1418,b'numpy.ma.array ignores mask when asembling masked array inputs (Trac #820)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/820 on 2008-06-16 by @astraw, assigned to @pierregm._\n\nThe following test fails with r5283. I assume (perhaps wrongly) that this is a bug. It appears numpy.ma.array has an argument keep_mask, which defaults to True. That implied to me that the expected behavior would have passed this test.\n\n{{{import numpy\n\nx = numpy.arange(10)\ny = numpy.arange(10)+20\nz = numpy.arange(10)+40\nx = numpy.ma.masked_where(x>5,x)\n\nX1=numpy.ma.array([x,y,z])\nX2=numpy.ma.vstack([x[numpy.newaxis,:],\n                    y[numpy.newaxis,:],\n                    z[numpy.newaxis,:]])\n\nassert numpy.ma.allclose(X1.mask,X2.mask)\n}}}'"
1417,7726465,numpy-gitbot,numpy-gitbot,2012-10-19 19:29:46,2012-10-23 02:38:47,2012-10-19 19:29:47,closed,,,2,11 - Bug;component: numpy.core;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1417,b'.flat reorders data (Trac #819)',"b""_Original ticket http://projects.scipy.org/numpy/ticket/819 on 2008-06-13 by trac user ahaldane, assigned to unknown._\n\nHi,\n\nI get an unexpected effect from doing .flat on arrays created by c_. In the code below, the values in the variable 'b' seem to get re-ordered during the call to array. Using .flatten() instead works as expected.\n\n\n\n    from numpy import c_, array\n    from numpy.random import rand\n    \n    b = c_[ rand(2,2), rand(2)]\n    \n    print b\n    array(b.flat)\n    print b \n\n\n\nThis prints:\n\n\n\n    [[ 0.8606752   0.11848512  0.95805826]\n     [ 0.84665539  0.7989498   0.20762479]]\n    [[ 0.8606752   0.95805826  0.7989498 ]\n     [ 0.11848512  0.84665539  0.20762479]] \n\n"""
1416,7726464,numpy-gitbot,numpy-gitbot,2012-10-19 19:29:44,2012-10-19 19:29:45,2012-10-19 19:29:45,closed,,1.2.0,1,11 - Bug;component: Other;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1416,b'floats cast to integer overwrites two entries in a numpy integer matrix (Trac #818)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/818 on 2008-06-12 by trac user deparvius, assigned to unknown._\n\nIn version 1.2.0.dev5243,\n\nA = matrix([2,3],[4,5]])\nA[0][0] = NaN\n\nresults in the matrix:\n0 0\n4 5\n\nA[0][0] = 4.8\nresults in:\n4 4\n4 5\n\nResult is A[0][0] = x\nint(x) int(x)\n4        5\n\nA[1][1] = NaN\nresults in an array index out of bounds error.\n\nNo such problems if A is defined as an array rather than a matrix.'"
1414,7726461,numpy-gitbot,numpy-gitbot,2012-10-19 19:29:38,2012-10-19 19:29:40,2012-10-19 19:29:40,closed,,1.2.0,4,11 - Bug;component: numpy.core;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1414,b'Constructing numpy.object_ causes a crash (Trac #816)',"b""_Original ticket http://projects.scipy.org/numpy/ticket/816 on 2008-06-09 by @pv, assigned to unknown._\n\nThe following code causes a segmentation fault:\n\n\n    import numpy as np\n    print np.__version__\n    np.object_(3)\n\n\n\nThe reason apparently is (see the Valgrind trace below) that the _object__ constructor expects a memory address as its parameter. This functionality probably shouldn't be user-visible.\n\nValgrind trace:\n\n\n    $ valgrind --suppressions=.valgrind/valgrind-python.supp python -c 'import numpy; print numpy.__version__; numpy.object_(3)'\n    ...\n    1.1.0\n    ==23495== \n    ==23495== Invalid read of size 4\n    ==23495==    at 0x4A6830F: object_arrtype_new (scalartypes.inc.src:1877)\n    ==23495==    by 0x809EDCC: type_call (typeobject.c:422)\n    ==23495==    by 0x805CB36: PyObject_Call (abstract.c:1861)\n    ==23495==    by 0x80C7986: PyEval_EvalFrameEx (ceval.c:3784)\n    ==23495==    by 0x80CB0D6: PyEval_EvalCodeEx (ceval.c:2836)\n    ==23495==    by 0x80CB226: PyEval_EvalCode (ceval.c:494)\n    ==23495==    by 0x80EB474: PyRun_StringFlags (pythonrun.c:1273)\n    ==23495==    by 0x80EB534: PyRun_SimpleStringFlags (pythonrun.c:900)\n    ==23495==    by 0x8058C80: Py_Main (main.c:512)\n    ==23495==    by 0x80587F1: main (python.c:23)\n    ==23495==  Address 0x3 is not stack'd, malloc'd or (recently) free'd\n    ==23495== \n    ==23495== Process terminating with default action of signal 11 (SIGSEGV)\n    ==23495==  Access not within mapped region at address 0x3\n    ==23495==    at 0x4A6830F: object_arrtype_new (scalartypes.inc.src:1877)\n    ==23495==    by 0x809EDCC: type_call (typeobject.c:422)\n    ==23495==    by 0x805CB36: PyObject_Call (abstract.c:1861)\n    ==23495==    by 0x80C7986: PyEval_EvalFrameEx (ceval.c:3784)\n    ==23495==    by 0x80CB0D6: PyEval_EvalCodeEx (ceval.c:2836)\n    ==23495==    by 0x80CB226: PyEval_EvalCode (ceval.c:494)\n    ==23495==    by 0x80EB474: PyRun_StringFlags (pythonrun.c:1273)\n    ==23495==    by 0x80EB534: PyRun_SimpleStringFlags (pythonrun.c:900)\n    ==23495==    by 0x8058C80: Py_Main (main.c:512)\n    ==23495==    by 0x80587F1: main (python.c:23)\n    ==23495== \n    ==23495== ERROR SUMMARY: 34 errors from 9 contexts (suppressed: 1194 from 7)\n    ==23495== malloc/free: in use at exit: 4,800,420 bytes in 4,902 blocks.\n    ==23495== malloc/free: 104,174 allocs, 99,272 frees, 48,061,410 bytes allocated.\n    ==23495== For counts of detected errors, rerun with: -v\n    ==23495== searching for pointers to 4,902 not-freed blocks.\n    ==23495== checked 6,128,912 bytes.\n    ==23495== \n    ==23495== LEAK SUMMARY:\n    ==23495==    definitely lost: 0 bytes in 0 blocks.\n    ==23495==      possibly lost: 110,244 bytes in 210 blocks.\n    ==23495==    still reachable: 4,690,176 bytes in 4,692 blocks.\n    ==23495==         suppressed: 0 bytes in 0 blocks.\n    ==23495== Rerun with --leak-check=full to see details of leaked memory.\n    Segmentation fault\n\n\n"""
1413,7726457,numpy-gitbot,numpy-gitbot,2012-10-19 19:29:33,2012-10-19 19:29:35,2012-10-19 19:29:35,closed,,1.2.0,4,11 - Bug;component: numpy.core;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1413,"b'self test failuers on RHE 4/32-bit, version 1.2.0.dev5255 (Trac #815)'","b'_Original ticket http://projects.scipy.org/numpy/ticket/815 on 2008-06-07 by @chanley, assigned to unknown._\n\n\n\n    Numpy is installed in /usr/stsci/pyssgdev/2.5.1/numpy\n    Numpy version 1.2.0.dev5255\n    Python version 2.5.1 (r251:54863, Jan 16 2008, 14:28:22) [GCC 3.4.6 20060404 (Red Hat 3.4.6-9)]\n      Found 3/3 tests for numpy.core.tests.test_ufunc\n      Found 145/145 tests for numpy.core.tests.test_regression\n      Found 63/63 tests for numpy.core.tests.test_unicode\n      Found 36/36 tests for numpy.core.tests.test_numerictypes\n      Found 16/16 tests for numpy.core.tests.test_umath\n      Found 289/289 tests for numpy.core.tests.test_multiarray\n      Found 12/12 tests for numpy.core.tests.test_records\n      Found 70/70 tests for numpy.core.tests.test_numeric\n      Found 18/18 tests for numpy.core.tests.test_defmatrix\n      Found 3/3 tests for numpy.core.tests.test_errstate\n      Found 7/7 tests for numpy.core.tests.test_scalarmath\n      Found 3/3 tests for numpy.core.tests.test_memmap\n      Found 4/4 tests for numpy.distutils.tests.test_fcompiler_gnu\n      Found 5/5 tests for numpy.distutils.tests.test_misc_util\n      Found 2/2 tests for numpy.fft.tests.test_fftpack\n      Found 3/3 tests for numpy.fft.tests.test_helper\n      Found 15/15 tests for numpy.lib.tests.test_twodim_base\n      Found 1/1 tests for numpy.lib.tests.test_regression\n      Found 4/4 tests for numpy.lib.tests.test_polynomial\n      Found 43/43 tests for numpy.lib.tests.test_type_check\n      Found 6/6 tests for numpy.lib.tests.test_index_tricks\n      Found 1/1 tests for numpy.lib.tests.test_financial\n      Found 1/1 tests for numpy.lib.tests.test_machar\n      Found 53/53 tests for numpy.lib.tests.test_function_base\n      Found 24/24 tests for numpy.lib.tests.test__datasource\n      Found 15/15 tests for numpy.lib.tests.test_io\n      Found 10/10 tests for numpy.lib.tests.test_arraysetops\n      Found 1/1 tests for numpy.lib.tests.test_ufunclike\n      Found 6/6 tests for numpy.lib.tests.test_getlimits\n      Found 49/49 tests for numpy.lib.tests.test_shape_base\n      Found 3/3 tests for numpy.linalg.tests.test_regression\n      Found 89/89 tests for numpy.linalg.tests.test_linalg\n      Found 36/36 tests for numpy.ma.tests.test_old_ma\n      Found 99/99 tests for numpy.ma.tests.test_core\n      Found 15/15 tests for numpy.ma.tests.test_extras\n      Found 4/4 tests for numpy.ma.tests.test_subclassing\n      Found 18/18 tests for numpy.ma.tests.test_mrecords\n      Found 7/7 tests for numpy.tests.test_random\n      Found 16/16 tests for numpy.testing.tests.test_utils\n      Found 6/6 tests for numpy.tests.test_ctypeslib\nn    ======================================================================\n    ERROR: Test generic loops.\n    ----------------------------------------------------------------------\n    Traceback (most recent call last):\n      File ""/usr/stsci/pyssgdev/2.5.1/numpy/core/tests/test_ufunc.py"", line 131, in check_generic_loops\n        x = np.zeros(10, dtype=np.object)[0::2]\n    SystemError: NULL result without error in PyObject_Call\n    \n    ======================================================================\n    ERROR: Ticket #86\n    ----------------------------------------------------------------------\n    Traceback (most recent call last):\n      File ""/usr/stsci/pyssgdev/2.5.1/numpy/core/tests/test_regression.py"", line 174, in check_object_array_fill\n        x = np.zeros(1, \'O\')\n    SystemError: error return without exception set\n    \n    ======================================================================\n    ERROR: Ticket #711\n    ----------------------------------------------------------------------\n    Traceback (most recent call last):\n      File ""/usr/stsci/pyssgdev/2.5.1/numpy/core/tests/test_regression.py"", line 961, in check_object_array_refcount_self_assign\n        arr = np.zeros(5, dtype=np.object_)\n    SystemError: NULL result without error in PyObject_Call\n    \n    ======================================================================\n    ERROR: Ticket #633\n    ----------------------------------------------------------------------\n    Traceback (most recent call last):\n      File ""/usr/stsci/pyssgdev/2.5.1/numpy/core/tests/test_regression.py"", line 863, in check_object_array_refcounting\n        arr = np.zeros(5, dtype=np.object_)\n    SystemError: NULL result without error in PyObject_Call\n    \n    ======================================================================\n    ERROR: Ticket #86\n    ----------------------------------------------------------------------\n    Traceback (most recent call last):\n      File ""/usr/stsci/pyssgdev/2.5.1/numpy/core/tests/test_regression.py"", line 174, in check_object_array_fill\n        x = np.zeros(1, \'O\')\n    SystemError: error return without exception set\n    \n    ======================================================================\n    ERROR: Ticket #711\n    ----------------------------------------------------------------------\n    Traceback (most recent call last):\n      File ""/usr/stsci/pyssgdev/2.5.1/numpy/core/tests/test_regression.py"", line 961, in check_object_array_refcount_self_assign\n        arr = np.zeros(5, dtype=np.object_)\n    SystemError: NULL result without error in PyObject_Call\n    \n    ======================================================================\n    ERROR: Ticket #633\n    ----------------------------------------------------------------------\n    Traceback (most recent call last):\n      File ""/usr/stsci/pyssgdev/2.5.1/numpy/core/tests/test_regression.py"", line 863, in check_object_array_refcounting\n        arr = np.zeros(5, dtype=np.object_)\n    SystemError: NULL result without error in PyObject_Call\n    \n    ======================================================================\n    ERROR: Test generic loops.\n    ----------------------------------------------------------------------\n    Traceback (most recent call last):\n      File ""/usr/stsci/pyssgdev/2.5.1/numpy/core/tests/test_ufunc.py"", line 131, in check_generic_loops\n        x = np.zeros(10, dtype=np.object)[0::2]\n    SystemError: NULL result without error in PyObject_Call\n    \n    ======================================================================\n    ERROR: check_recarray_from_obj (numpy.core.tests.test_records.TestFromrecords)\n    ----------------------------------------------------------------------\n    Traceback (most recent call last):\n      File ""/usr/stsci/pyssgdev/2.5.1/numpy/core/tests/test_records.py"", line 44, in check_recarray_from_obj\n        a = zeros(count, dtype=\'O\')\n    SystemError: NULL result without error in PyObject_Call\n    \n    ======================================================================\n    ERROR: check_3d (numpy.ma.tests.test_extras.TestApplyAlongAxis)\n    ----------------------------------------------------------------------\n    Traceback (most recent call last):\n      File ""/usr/stsci/pyssgdev/2.5.1/numpy/ma/tests/test_extras.py"", line 325, in check_3d\n        xa = apply_along_axis(myfunc,2,a)\n      File ""/usr/stsci/pyssgdev/2.5.1/numpy/ma/extras.py"", line 176, in apply_along_axis\n        i = np.zeros(nd,\'O\')\n    SystemError: error return without exception set\n    \n    ======================================================================\n    ERROR: Tests median w/ 2D\n    ----------------------------------------------------------------------\n    Traceback (most recent call last):\n      File ""/usr/stsci/pyssgdev/2.5.1/numpy/ma/tests/test_extras.py"", line 343, in test_2d\n        assert_equal(median(z[:,0]), 0)\n      File ""/usr/stsci/pyssgdev/2.5.1/numpy/ma/extras.py"", line 430, in median\n        result = apply_along_axis(_median1D, axis, asorted)\n      File ""/usr/stsci/pyssgdev/2.5.1/numpy/ma/extras.py"", line 176, in apply_along_axis\n        i = np.zeros(nd,\'O\')\n    SystemError: error return without exception set\n    \n    ======================================================================\n    ERROR: Tests median w/ 3D\n    ----------------------------------------------------------------------\n    Traceback (most recent call last):\n      File ""/usr/stsci/pyssgdev/2.5.1/numpy/ma/tests/test_extras.py"", line 350, in test_3d\n        assert_equal(median(x,0), [[12,9],[6,15],[12,9],[18,15]])\n      File ""/usr/stsci/pyssgdev/2.5.1/numpy/ma/extras.py"", line 430, in median\n        result = apply_along_axis(_median1D, axis, asorted)\n      File ""/usr/stsci/pyssgdev/2.5.1/numpy/ma/extras.py"", line 176, in apply_along_axis\n        i = np.zeros(nd,\'O\')\n    SystemError: error return without exception set\n    \n    ----------------------------------------------------------------------\n    Ran 1297 tests in 5.435s\n    \n    FAILED (errors=12)\n    errors: \n    \t(<numpy.core.tests.test_ufunc.TestUfunc testMethod=check_generic_loops>, \'Traceback (most recent call last):\\n  File ""/usr/stsci/pyssgdev/2.5.1/numpy/core/tests/test_ufunc.py"", line 131, in check_generic_loops\\n    x = np.zeros(10, dtype=np.object)[0::2]\\nSystemError: NULL result without error in PyObject_Call\\n\')\n    \t(<numpy.core.tests.test_regression.TestRegression testMethod=check_object_array_fill>, \'Traceback (most recent call last):\\n  File ""/usr/stsci/pyssgdev/2.5.1/numpy/core/tests/test_regression.py"", line 174, in check_object_array_fill\\n    x = np.zeros(1, \\\'O\\\')\\nSystemError: error return without exception set\\n\')\n    \t(<numpy.core.tests.test_regression.TestRegression testMethod=check_object_array_refcount_self_assign>, \'Traceback (most recent call last):\\n  File ""/usr/stsci/pyssgdev/2.5.1/numpy/core/tests/test_regression.py"", line 961, in check_object_array_refcount_self_assign\\n    arr = np.zeros(5, dtype=np.object_)\\nSystemError: NULL result without error in PyObject_Call\\n\')\n    \t(<numpy.core.tests.test_regression.TestRegression testMethod=check_object_array_refcounting>, \'Traceback (most recent call last):\\n  File ""/usr/stsci/pyssgdev/2.5.1/numpy/core/tests/test_regression.py"", line 863, in check_object_array_refcounting\\n    arr = np.zeros(5, dtype=np.object_)\\nSystemError: NULL result without error in PyObject_Call\\n\')\n    \t(<numpy.core.tests.test_regression.TestRegression testMethod=check_object_array_fill>, \'Traceback (most recent call last):\\n  File ""/usr/stsci/pyssgdev/2.5.1/numpy/core/tests/test_regression.py"", line 174, in check_object_array_fill\\n    x = np.zeros(1, \\\'O\\\')\\nSystemError: error return without exception set\\n\')\n    \t(<numpy.core.tests.test_regression.TestRegression testMethod=check_object_array_refcount_self_assign>, \'Traceback (most recent call last):\\n  File ""/usr/stsci/pyssgdev/2.5.1/numpy/core/tests/test_regression.py"", line 961, in check_object_array_refcount_self_assign\\n    arr = np.zeros(5, dtype=np.object_)\\nSystemError: NULL result without error in PyObject_Call\\n\')\n    \t(<numpy.core.tests.test_regression.TestRegression testMethod=check_object_array_refcounting>, \'Traceback (most recent call last):\\n  File ""/usr/stsci/pyssgdev/2.5.1/numpy/core/tests/test_regression.py"", line 863, in check_object_array_refcounting\\n    arr = np.zeros(5, dtype=np.object_)\\nSystemError: NULL result without error in PyObject_Call\\n\')\n    \t(<numpy.core.tests.test_ufunc.TestUfunc testMethod=check_generic_loops>, \'Traceback (most recent call last):\\n  File ""/usr/stsci/pyssgdev/2.5.1/numpy/core/tests/test_ufunc.py"", line 131, in check_generic_loops\\n    x = np.zeros(10, dtype=np.object)[0::2]\\nSystemError: NULL result without error in PyObject_Call\\n\')\n    \t(<numpy.core.tests.test_records.TestFromrecords testMethod=check_recarray_from_obj>, \'Traceback (most recent call last):\\n  File ""/usr/stsci/pyssgdev/2.5.1/numpy/core/tests/test_records.py"", line 44, in check_recarray_from_obj\\n    a = zeros(count, dtype=\\\'O\\\')\\nSystemError: NULL result without error in PyObject_Call\\n\')\n    \t(<numpy.ma.tests.test_extras.TestApplyAlongAxis testMethod=check_3d>, \'Traceback (most recent call last):\\n  File ""/usr/stsci/pyssgdev/2.5.1/numpy/ma/tests/test_extras.py"", line 325, in check_3d\\n    xa = apply_along_axis(myfunc,2,a)\\n  File ""/usr/stsci/pyssgdev/2.5.1/numpy/ma/extras.py"", line 176, in apply_along_axis\\n    i = np.zeros(nd,\\\'O\\\')\\nSystemError: error return without exception set\\n\')\n    \t(<numpy.ma.tests.test_extras.TestMedian testMethod=test_2d>, \'Traceback (most recent call last):\\n  File ""/usr/stsci/pyssgdev/2.5.1/numpy/ma/tests/test_extras.py"", line 343, in test_2d\\n    assert_equal(median(z[:,0]), 0)\\n  File ""/usr/stsci/pyssgdev/2.5.1/numpy/ma/extras.py"", line 430, in median\\n    result = apply_along_axis(_median1D, axis, asorted)\\n  File ""/usr/stsci/pyssgdev/2.5.1/numpy/ma/extras.py"", line 176, in apply_along_axis\\n    i = np.zeros(nd,\\\'O\\\')\\nSystemError: error return without exception set\\n\')\n    \t(<numpy.ma.tests.test_extras.TestMedian testMethod=test_3d>, \'Traceback (most recent call last):\\n  File ""/usr/stsci/pyssgdev/2.5.1/numpy/ma/tests/test_extras.py"", line 350, in test_3d\\n    assert_equal(median(x,0), [[12,9],[6,15],[12,9],[18,15]])\\n  File ""/usr/stsci/pyssgdev/2.5.1/numpy/ma/extras.py"", line 430, in median\\n    result = apply_along_axis(_median1D, axis, asorted)\\n  File ""/usr/stsci/pyssgdev/2.5.1/numpy/ma/extras.py"", line 176, in apply_along_axis\\n    i = np.zeros(nd,\\\'O\\\')\\nSystemError: error return without exception set\\n\')\n    failures: \n    if ( 1 != 0 ) then\n    echo <font color=orange>selftest</font>\n    exit 0\n\n'"
1412,7726452,numpy-gitbot,numpy-gitbot,2012-10-19 19:29:29,2012-10-23 02:38:45,2012-10-19 19:29:32,closed,,1.2.0,4,11 - Bug;component: numpy.core;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1412,"b'self test failuers on Sun Solaris 10 System, version 1.2.0.dev5255 (Trac #814)'","b'_Original ticket http://projects.scipy.org/numpy/ticket/814 on 2008-06-07 by @chanley, assigned to unknown._\n\n\n\n    umpy is installed in /usr/ra/pyssg/2.5.1/numpy\n    Numpy version 1.2.0.dev5255\n    Python version 2.5.1 (r251:54863, Jun  4 2008, 15:48:19) [C]\n      Found 3/3 tests for numpy.core.tests.test_ufunc\n      Found 145/145 tests for numpy.core.tests.test_regression\n      Found 63/63 tests for numpy.core.tests.test_unicode\n      Found 36/36 tests for numpy.core.tests.test_numerictypes\n      Found 16/16 tests for numpy.core.tests.test_umath\n      Found 289/289 tests for numpy.core.tests.test_multiarray\n      Found 12/12 tests for numpy.core.tests.test_records\n      Found 70/70 tests for numpy.core.tests.test_numeric\n      Found 18/18 tests for numpy.core.tests.test_defmatrix\n      Found 3/3 tests for numpy.core.tests.test_errstate\n      Found 7/7 tests for numpy.core.tests.test_scalarmath\n      Found 3/3 tests for numpy.core.tests.test_memmap\n      Found 4/4 tests for numpy.distutils.tests.test_fcompiler_gnu\n      Found 5/5 tests for numpy.distutils.tests.test_misc_util\n      Found 2/2 tests for numpy.fft.tests.test_fftpack\n      Found 3/3 tests for numpy.fft.tests.test_helper\n      Found 15/15 tests for numpy.lib.tests.test_twodim_base\n      Found 1/1 tests for numpy.lib.tests.test_regression\n      Found 4/4 tests for numpy.lib.tests.test_polynomial\n      Found 43/43 tests for numpy.lib.tests.test_type_check\n      Found 6/6 tests for numpy.lib.tests.test_index_tricks\n      Found 1/1 tests for numpy.lib.tests.test_financial\n      Found 1/1 tests for numpy.lib.tests.test_machar\n      Found 53/53 tests for numpy.lib.tests.test_function_base\n      Found 24/24 tests for numpy.lib.tests.test__datasource\n      Found 15/15 tests for numpy.lib.tests.test_io\n      Found 10/10 tests for numpy.lib.tests.test_arraysetops\n      Found 1/1 tests for numpy.lib.tests.test_ufunclike\n      Found 6/6 tests for numpy.lib.tests.test_getlimits\n      Found 49/49 tests for numpy.lib.tests.test_shape_base\n      Found 3/3 tests for numpy.linalg.tests.test_regression\n      Found 89/89 tests for numpy.linalg.tests.test_linalg\n      Found 36/36 tests for numpy.ma.tests.test_old_ma\n      Found 99/99 tests for numpy.ma.tests.test_core\n      Found 15/15 tests for numpy.ma.tests.test_extras\n      Found 4/4 tests for numpy.ma.tests.test_subclassing\n      Found 18/18 tests for numpy.ma.tests.test_mrecords\n      Found 7/7 tests for numpy.tests.test_random\n      Found 16/16 tests for numpy.testing.tests.test_utils\n      Found 6/6 tests for numpy.tests.test_ctypeslib\nn    ======================================================================\n    ERROR: Test generic loops.\n    ----------------------------------------------------------------------\n    Traceback (most recent call last):\n      File ""/usr/ra/pyssg/2.5.1/numpy/core/tests/test_ufunc.py"", line 131, in check_generic_loops\n        x = np.zeros(10, dtype=np.object)[0::2]\n    SystemError: NULL result without error in PyObject_Call\n    \n    ======================================================================\n    ERROR: Ticket #86\n    ----------------------------------------------------------------------\n    Traceback (most recent call last):\n      File ""/usr/ra/pyssg/2.5.1/numpy/core/tests/test_regression.py"", line 174, in check_object_array_fill\n        x = np.zeros(1, \'O\')\n    SystemError: error return without exception set\n    \n    ======================================================================\n    ERROR: Ticket #711\n    ----------------------------------------------------------------------\n    Traceback (most recent call last):\n      File ""/usr/ra/pyssg/2.5.1/numpy/core/tests/test_regression.py"", line 961, in check_object_array_refcount_self_assign\n        arr = np.zeros(5, dtype=np.object_)\n    SystemError: NULL result without error in PyObject_Call\n    \n    ======================================================================\n    ERROR: Ticket #633\n    ----------------------------------------------------------------------\n    Traceback (most recent call last):\n      File ""/usr/ra/pyssg/2.5.1/numpy/core/tests/test_regression.py"", line 863, in check_object_array_refcounting\n        arr = np.zeros(5, dtype=np.object_)\n    SystemError: NULL result without error in PyObject_Call\n    \n    ======================================================================\n    ERROR: Ticket #86\n    ----------------------------------------------------------------------\n    Traceback (most recent call last):\n      File ""/usr/ra/pyssg/2.5.1/numpy/core/tests/test_regression.py"", line 174, in check_object_array_fill\n        x = np.zeros(1, \'O\')\n    SystemError: error return without exception set\n    \n    ======================================================================\n    ERROR: Ticket #711\n    ----------------------------------------------------------------------\n    Traceback (most recent call last):\n      File ""/usr/ra/pyssg/2.5.1/numpy/core/tests/test_regression.py"", line 961, in check_object_array_refcount_self_assign\n        arr = np.zeros(5, dtype=np.object_)\n    SystemError: NULL result without error in PyObject_Call\n    \n    ======================================================================\n    ERROR: Ticket #633\n    ----------------------------------------------------------------------\n    Traceback (most recent call last):\n      File ""/usr/ra/pyssg/2.5.1/numpy/core/tests/test_regression.py"", line 863, in check_object_array_refcounting\n        arr = np.zeros(5, dtype=np.object_)\n    SystemError: NULL result without error in PyObject_Call\n    \n    ======================================================================\n    ERROR: Test generic loops.\n    ----------------------------------------------------------------------\n    Traceback (most recent call last):\n      File ""/usr/ra/pyssg/2.5.1/numpy/core/tests/test_ufunc.py"", line 131, in check_generic_loops\n        x = np.zeros(10, dtype=np.object)[0::2]\n    SystemError: NULL result without error in PyObject_Call\n    \n    ======================================================================\n    ERROR: check_recarray_from_obj (numpy.core.tests.test_records.TestFromrecords)\n    ----------------------------------------------------------------------\n    Traceback (most recent call last):\n      File ""/usr/ra/pyssg/2.5.1/numpy/core/tests/test_records.py"", line 44, in check_recarray_from_obj\n        a = zeros(count, dtype=\'O\')\n    SystemError: NULL result without error in PyObject_Call\n    \n    ======================================================================\n    ERROR: check_3d (numpy.lib.tests.test_shape_base.TestApplyAlongAxis)\n    ----------------------------------------------------------------------\n    Traceback (most recent call last):\n      File ""/usr/ra/pyssg/2.5.1/numpy/lib/tests/test_shape_base.py"", line 18, in check_3d\n        assert_array_equal(apply_along_axis(sum,0,a), [[27,30,33],[36,39,42],[45,48,51]])\n      File ""/usr/stsci/pyssgdev/2.5.1/numpy/lib/shape_base.py"", line 24, in apply_along_axis\n        i = zeros(nd,\'O\')\n    SystemError: error return without exception set\n    \n    ======================================================================\n    ERROR: check_simple (numpy.lib.tests.test_shape_base.TestApplyAlongAxis)\n    ----------------------------------------------------------------------\n    Traceback (most recent call last):\n      File ""/usr/ra/pyssg/2.5.1/numpy/lib/tests/test_shape_base.py"", line 11, in check_simple\n        assert_array_equal(apply_along_axis(len,0,a),len(a)*ones(shape(a)[1]))\n      File ""/usr/stsci/pyssgdev/2.5.1/numpy/lib/shape_base.py"", line 24, in apply_along_axis\n        i = zeros(nd,\'O\')\n    SystemError: error return without exception set\n    \n    ======================================================================\n    ERROR: check_3d (numpy.ma.tests.test_extras.TestApplyAlongAxis)\n    ----------------------------------------------------------------------\n    Traceback (most recent call last):\n      File ""/usr/ra/pyssg/2.5.1/numpy/ma/tests/test_extras.py"", line 325, in check_3d\n        xa = apply_along_axis(myfunc,2,a)\n      File ""/usr/stsci/pyssgdev/2.5.1/numpy/ma/extras.py"", line 176, in apply_along_axis\n        i = np.zeros(nd,\'O\')\n    SystemError: error return without exception set\n    \n    ======================================================================\n    ERROR: Tests median w/ 2D\n    ----------------------------------------------------------------------\n    Traceback (most recent call last):\n      File ""/usr/ra/pyssg/2.5.1/numpy/ma/tests/test_extras.py"", line 343, in test_2d\n        assert_equal(median(z[:,0]), 0)\n      File ""/usr/stsci/pyssgdev/2.5.1/numpy/ma/extras.py"", line 430, in median\n        result = apply_along_axis(_median1D, axis, asorted)\n      File ""/usr/stsci/pyssgdev/2.5.1/numpy/ma/extras.py"", line 176, in apply_along_axis\n        i = np.zeros(nd,\'O\')\n    SystemError: error return without exception set\n    \n    ======================================================================\n    ERROR: Tests median w/ 3D\n    ----------------------------------------------------------------------\n    Traceback (most recent call last):\n      File ""/usr/ra/pyssg/2.5.1/numpy/ma/tests/test_extras.py"", line 350, in test_3d\n        assert_equal(median(x,0), [[12,9],[6,15],[12,9],[18,15]])\n      File ""/usr/stsci/pyssgdev/2.5.1/numpy/ma/extras.py"", line 430, in median\n        result = apply_along_axis(_median1D, axis, asorted)\n      File ""/usr/stsci/pyssgdev/2.5.1/numpy/ma/extras.py"", line 176, in apply_along_axis\n        i = np.zeros(nd,\'O\')\n    SystemError: error return without exception set\n    \n    ----------------------------------------------------------------------\n    Ran 1297 tests in 25.295s\n    \n    FAILED (errors=14)\n    ctypes is not available on this python: skipping the test (import error was: ctypes is not available.)\n    No distutils available, skipping test.\n    errors: \n    \t(<numpy.core.tests.test_ufunc.TestUfunc testMethod=check_generic_loops>, \'Traceback (most recent call last):\\n  File ""/usr/ra/pyssg/2.5.1/numpy/core/tests/test_ufunc.py"", line 131, in check_generic_loops\\n    x = np.zeros(10, dtype=np.object)[0::2]\\nSystemError: NULL result without error in PyObject_Call\\n\')\n    \t(<numpy.core.tests.test_regression.TestRegression testMethod=check_object_array_fill>, \'Traceback (most recent call last):\\n  File ""/usr/ra/pyssg/2.5.1/numpy/core/tests/test_regression.py"", line 174, in check_object_array_fill\\n    x = np.zeros(1, \\\'O\\\')\\nSystemError: error return without exception set\\n\')\n    \t(<numpy.core.tests.test_regression.TestRegression testMethod=check_object_array_refcount_self_assign>, \'Traceback (most recent call last):\\n  File ""/usr/ra/pyssg/2.5.1/numpy/core/tests/test_regression.py"", line 961, in check_object_array_refcount_self_assign\\n    arr = np.zeros(5, dtype=np.object_)\\nSystemError: NULL result without error in PyObject_Call\\n\')\n    \t(<numpy.core.tests.test_regression.TestRegression testMethod=check_object_array_refcounting>, \'Traceback (most recent call last):\\n  File ""/usr/ra/pyssg/2.5.1/numpy/core/tests/test_regression.py"", line 863, in check_object_array_refcounting\\n    arr = np.zeros(5, dtype=np.object_)\\nSystemError: NULL result without error in PyObject_Call\\n\')\n    \t(<numpy.core.tests.test_regression.TestRegression testMethod=check_object_array_fill>, \'Traceback (most recent call last):\\n  File ""/usr/ra/pyssg/2.5.1/numpy/core/tests/test_regression.py"", line 174, in check_object_array_fill\\n    x = np.zeros(1, \\\'O\\\')\\nSystemError: error return without exception set\\n\')\n    \t(<numpy.core.tests.test_regression.TestRegression testMethod=check_object_array_refcount_self_assign>, \'Traceback (most recent call last):\\n  File ""/usr/ra/pyssg/2.5.1/numpy/core/tests/test_regression.py"", line 961, in check_object_array_refcount_self_assign\\n    arr = np.zeros(5, dtype=np.object_)\\nSystemError: NULL result without error in PyObject_Call\\n\')\n    \t(<numpy.core.tests.test_regression.TestRegression testMethod=check_object_array_refcounting>, \'Traceback (most recent call last):\\n  File ""/usr/ra/pyssg/2.5.1/numpy/core/tests/test_regression.py"", line 863, in check_object_array_refcounting\\n    arr = np.zeros(5, dtype=np.object_)\\nSystemError: NULL result without error in PyObject_Call\\n\')\n    \t(<numpy.core.tests.test_ufunc.TestUfunc testMethod=check_generic_loops>, \'Traceback (most recent call last):\\n  File ""/usr/ra/pyssg/2.5.1/numpy/core/tests/test_ufunc.py"", line 131, in check_generic_loops\\n    x = np.zeros(10, dtype=np.object)[0::2]\\nSystemError: NULL result without error in PyObject_Call\\n\')\n    \t(<numpy.core.tests.test_records.TestFromrecords testMethod=check_recarray_from_obj>, \'Traceback (most recent call last):\\n  File ""/usr/ra/pyssg/2.5.1/numpy/core/tests/test_records.py"", line 44, in check_recarray_from_obj\\n    a = zeros(count, dtype=\\\'O\\\')\\nSystemError: NULL result without error in PyObject_Call\\n\')\n    \t(<numpy.lib.tests.test_shape_base.TestApplyAlongAxis testMethod=check_3d>, \'Traceback (most recent call last):\\n  File ""/usr/ra/pyssg/2.5.1/numpy/lib/tests/test_shape_base.py"", line 18, in check_3d\\n    assert_array_equal(apply_along_axis(sum,0,a), [[27,30,33],[36,39,42],[45,48,51]])\\n  File ""/usr/stsci/pyssgdev/2.5.1/numpy/lib/shape_base.py"", line 24, in apply_along_axis\\n    i = zeros(nd,\\\'O\\\')\\nSystemError: error return without exception set\\n\')\n    \t(<numpy.lib.tests.test_shape_base.TestApplyAlongAxis testMethod=check_simple>, \'Traceback (most recent call last):\\n  File ""/usr/ra/pyssg/2.5.1/numpy/lib/tests/test_shape_base.py"", line 11, in check_simple\\n    assert_array_equal(apply_along_axis(len,0,a),len(a)*ones(shape(a)[1]))\\n  File ""/usr/stsci/pyssgdev/2.5.1/numpy/lib/shape_base.py"", line 24, in apply_along_axis\\n    i = zeros(nd,\\\'O\\\')\\nSystemError: error return without exception set\\n\')\n    \t(<numpy.ma.tests.test_extras.TestApplyAlongAxis testMethod=check_3d>, \'Traceback (most recent call last):\\n  File ""/usr/ra/pyssg/2.5.1/numpy/ma/tests/test_extras.py"", line 325, in check_3d\\n    xa = apply_along_axis(myfunc,2,a)\\n  File ""/usr/stsci/pyssgdev/2.5.1/numpy/ma/extras.py"", line 176, in apply_along_axis\\n    i = np.zeros(nd,\\\'O\\\')\\nSystemError: error return without exception set\\n\')\n    \t(<numpy.ma.tests.test_extras.TestMedian testMethod=test_2d>, \'Traceback (most recent call last):\\n  File ""/usr/ra/pyssg/2.5.1/numpy/ma/tests/test_extras.py"", line 343, in test_2d\\n    assert_equal(median(z[:,0]), 0)\\n  File ""/usr/stsci/pyssgdev/2.5.1/numpy/ma/extras.py"", line 430, in median\\n    result = apply_along_axis(_median1D, axis, asorted)\\n  File ""/usr/stsci/pyssgdev/2.5.1/numpy/ma/extras.py"", line 176, in apply_along_axis\\n    i = np.zeros(nd,\\\'O\\\')\\nSystemError: error return without exception set\\n\')\n    \t(<numpy.ma.tests.test_extras.TestMedian testMethod=test_3d>, \'Traceback (most recent call last):\\n  File ""/usr/ra/pyssg/2.5.1/numpy/ma/tests/test_extras.py"", line 350, in test_3d\\n    assert_equal(median(x,0), [[12,9],[6,15],[12,9],[18,15]])\\n  File ""/usr/stsci/pyssgdev/2.5.1/numpy/ma/extras.py"", line 430, in median\\n    result = apply_along_axis(_median1D, axis, asorted)\\n  File ""/usr/stsci/pyssgdev/2.5.1/numpy/ma/extras.py"", line 176, in apply_along_axis\\n    i = np.zeros(nd,\\\'O\\\')\\nSystemError: error return without exception set\\n\')\n    failures: \n    if ( 1 != 0 ) then\n    echo <font color=orange>selftest</font>\n    exit 0\n    \n\n'"
1411,7726451,numpy-gitbot,numpy-gitbot,2012-10-19 19:29:25,2012-10-19 19:29:27,2012-10-19 19:29:27,closed,,1.2.0,4,11 - Bug;component: numpy.core;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1411,b'_zerofill has a path with no return value (Trac #813)',"b""_Original ticket http://projects.scipy.org/numpy/ticket/813 on 2008-06-07 by @alanmcintyre, assigned to unknown._\n\nI happened to see a compiler warning about _zerofill (in core/src/arrayobject.c) not having a return value, and lo and behold the success path doesn't have a return statement.  I'm attaching a patch that adds one."""
1410,7726448,numpy-gitbot,numpy-gitbot,2012-10-19 19:29:23,2012-10-19 19:29:24,2012-10-19 19:29:24,closed,,1.2.0,2,11 - Bug;component: numpy.ma;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1410,"b'numpy.sum, numpy.std, numpy.var fail on masked arrays (Trac #812)'","b""_Original ticket http://projects.scipy.org/numpy/ticket/812 on 2008-06-06 by trac user bsulman, assigned to @pierregm._\n\nThe numpy sum, std, and var functions attempt to call the corresponding method of a masked array with arguments (axis, dtype, out), but the corresponding numpy.ma methods only accept the two keywords axis and dtype.  This would be fixed by adding the out keyword to the numpy.ma methods (x.mean already accepts the out keyword and does not have this problem).  This is current as of version 1.1.0\n\nExample:\n\n\n\n    In [1]: import numpy\n    \n    In [2]: x=numpy.ma.arange(10)\n    \n    In [3]: x.sum()\n    Out[3]: 45\n    \n    In [4]: numpy.sum(x)\n    ---------------------------------------------------------------------------\n    <type 'exceptions.TypeError'>             Traceback (most recent call last)\n    \n    /data/projects/cheas/lcreek/data/lic/<ipython console> in <module>()\n    \n    /home/bsulman/lib/python/numpy/core/fromnumeric.py in sum(a, axis, dtype, out)\n        992     except AttributeError:\n        993         return _wrapit(a, 'sum', axis, dtype, out)\n    --> 994     return sum(axis, dtype, out)\n        995 \n        996 \n    \n    <type 'exceptions.TypeError'>: sum() takes at most 3 arguments (4 given)\n    \n    In [7]: numpy.__version__\n    Out[7]: '1.1.0'\n\n"""
1409,7726444,numpy-gitbot,numpy-gitbot,2012-10-19 19:29:19,2012-10-23 02:38:43,2012-10-19 19:29:22,closed,,1.3.0,8,11 - Bug;component: numpy.core;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1409,"b""install error: Error: suffix or operands invalid for `fnstsw' (Trac #811)""","b'_Original ticket http://projects.scipy.org/numpy/ticket/811 on 2008-06-05 by trac user nbraspen, assigned to @cournape._\n\nMy installation of numpy on a fresh cygwin failed on this: ""Error: suffix or operands invalid for `fnstsw\'"". I think the error occured during the gcc step for umathmodule.\n\nBrowsing the internet on this error (also appeared for other packages than numpy), I found the following reason at http://www.nabble.com/The-Linux-binutils-2.18.50.0.4-is-released-td15360254.html\n\nStarting from the 2.18.50.0.4 release, the x86 assembler no longer\naccepts\n        fnstsw %eax\nfnstsw stores 16bit into %ax and the upper 16bit of %eax is unchanged.\nPlease use\n        fnstsw %ax\n\nSince installation of numpy on cygwin worked on another pc, I compared the installed binutils of cygwin and the fresh cygwin had version 20080523 while the other pc had version 20060817. By installing the older binutils package installation of numpy went fine. \n\nSo I guess that numpy should use the correct/new fnstsw suffix/operand when a newer version of binutils is installed on the system.'"
1408,7726443,numpy-gitbot,numpy-gitbot,2012-10-19 19:29:17,2012-10-19 19:29:17,2012-10-19 19:29:17,closed,,1.2.0,1,11 - Bug;component: numpy.testing;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1408,b'Verbose argument not effective for ndarrays in assert_equal (Trac #810)',"b""_Original ticket http://projects.scipy.org/numpy/ticket/810 on 2008-06-05 by @huard, assigned to unknown._\n\nThe assert_equal function provides a verbose keyword but it has no effect for ndarrays:\n\n\n    >>> a = np.array([1,2])\n    >>> np.testing.assert_equal(a, a+1, verbose=False)\n    ---------------------------------------------------------------------------\n    <type 'exceptions.AssertionError'>        Traceback (most recent call last)\n    \n    [...]\n    \n    <type 'exceptions.AssertionError'>: \n    Arrays are not equal\n    \n    (mismatch 100.0%)\n     x: array([1, 2])\n     y: array([2, 3])\n\n\nThis seems to be simply due to the fact that verbose is not given as an argument to assert_array_equal. If nobody objects, I'll fix that and report the revision number in a comment below. """
1406,7726441,numpy-gitbot,seberg,2012-10-19 19:29:14,2013-10-25 15:48:27,2013-10-25 15:48:27,closed,,,3,11 - Bug;component: numpy.lib;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1406,b'inserting multiple values using numpy.insert() (Trac #808)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/808 on 2008-06-03 by trac user markbakker, assigned to unknown._\n\nThe insert function works incorrectly when trying to insert multiple values after one index. \n\nIt works if there are multiple positions but only one value:\n\na = arange(5)\ninsert(a,[3,3],4)\n\nReturns: array([0, 1, 2, 4, 4, 3, 4])\n\nBut not when you give one position with multiple values:\ninsert(a,3,[7,7])\n\nReturns: array([0, 1, 2, 7, 3, 4]) \n\nwhile it should have returned array([0, 1, 2, 7, 7, 3, 4]) '"
1405,7726440,numpy-gitbot,numpy-gitbot,2012-10-19 19:29:12,2012-10-19 19:29:12,2012-10-19 19:29:12,closed,,1.2.0,0,11 - Bug;component: numpy.ma;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1405,b'massked_array_value /= scalar_value -> mask and data must be same size (Trac #807)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/807 on 2008-06-03 by trac user Bill5107, assigned to @pierregm._\n\nI have a case where I cannot do ""array_value /= scalar_value""  but I can to ""array_value = array_value / scalar_value""\n\nIt seems the near negative limit values are somehow involved in the failure. Here is a short example.\n\n\n\n    >>> numpy.__version__\n    \'1.1.0\'\n    >>> import numpy\n    >>> b = b/2\n    >>> a=numpy.array([1.23,-3.40282346639e+35,3.45], numpy.float32)\n    >>> b=numpy.ma.masked_values(a,-3.40282346639e+038)\n    >>> b/=2\n    Traceback (most recent call last):\n      File ""<stdin>"", line 1, in <module>\n      File ""C:\\Python25\\Lib\\site-packages\\numpy\\ma\\core.py"", line 1743, in __idiv__\n        numpy.putmask(other_data, dom_mask, 1)\n    ValueError: putmask: mask and data must be the same size\n    >>> b = b / 2\n\n\n\nBut if I slightly change the value in ""a"", things seem ok:\n\n\n    >>> b = b / 2\n    >>> a=numpy.array([1.23,-3.40282346639e+34,3.45], numpy.float32)\n    >>> b=numpy.ma.masked_values(a,-3.40282346639e+038)\n    >>> b = b/2\n\n\nDoes this look like a bug or am I doing something wrong here?\n\nThanks!'"
1404,7726438,numpy-gitbot,numpy-gitbot,2012-10-19 19:29:10,2012-10-19 19:29:11,2012-10-19 19:29:11,closed,,1.2.0,1,11 - Bug;component: numpy.ma;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1404,b'Conversion of masked arrays from one dtype to another fails because of fill_value (Trac #806)',"b""_Original ticket http://projects.scipy.org/numpy/ticket/806 on 2008-06-02 by @huard, assigned to @pierregm._\n\nConverting an array of char to an integer arrays fails. The problem seems to be due to the fill_value attribute which is not correctly modified when going from one type to another.\n\n\n\n\n    > [29]: a = ma.array(['3', '4', '5'])\n    \n    > [30]: ma.array(a, dtype=int)\n    ---------------------------------------------------------------------------\n    ValueError                                Traceback (most recent call last)\n    \n    /storage/huardda/buoy/buoy/metocean.py in <module>()\n    ----> 1 \n          2 \n          3 \n          4 \n          5 \n    \n    /usr/lib64/python2.5/site-packages/numpy/ma/core.pyc in array(data, dtype, copy, order, mask, fill_value, keep_mask, hard_mask, shrink, subok, ndmin)\n       2680     return MaskedArray(data, mask=mask, dtype=dtype, copy=copy, subok=subok,\n       2681                        keep_mask=keep_mask, hard_mask=hard_mask,\n    -> 2682                        fill_value=fill_value, ndmin=ndmin, shrink=shrink)\n       2683 array.__doc__ = masked_array.__doc__\n       2684 \n    \n    /usr/lib64/python2.5/site-packages/numpy/ma/core.pyc in __new__(cls, data, mask, dtype, copy, subok, ndmin, fill_value, keep_mask, hard_mask, flag, shrink, **options)\n       1218         if fill_value is None:\n       1219             fill_value = getattr(data,'_fill_value', None)\n    -> 1220         _data._fill_value = _check_fill_value(fill_value, _data.dtype)\n       1221         # Process extra options ..\n       1222         _data._hardmask = hard_mask\n    \n    /usr/lib64/python2.5/site-packages/numpy/ma/core.pyc in _check_fill_value(fill_value, dtype)\n        199                           for (f,d) in zip(fval, descr)]\n        200         else:\n    --> 201             fill_value = narray(fval, copy=False, dtype=dtype).item()\n        202     return fill_value\n        203 \n    \n    ValueError: invalid literal for int() with base 10: 'N/A'\n\n"""
1403,7726437,numpy-gitbot,numpy-gitbot,2012-10-19 19:29:08,2012-10-19 19:29:09,2012-10-19 19:29:09,closed,,1.2.0,3,11 - Bug;component: Other;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1403,b'PyArray_FromDims should use intp instead of int type for the dims on 64-bit machines (Trac #805)',"b""_Original ticket http://projects.scipy.org/numpy/ticket/805 on 2008-06-02 by trac user gnatty7, assigned to @charris._\n\nIn order to get the num_util library working on our 64-bit (amd64) linux machines, I had to make some changes to arrayobject.c, and fftpack_litemodule.c\n\nSpecifically, changed the *d argument in PyArray_FromDimsandDataAndDescr and PyArray_FromDims to use the 'intp' type rather than int.  The allows proper casting from the 8-byte pointer to the 8-byte long type that is used when Python is compiled on the 64-bit machine (Py_intptr_t is set to long) which intp and npy_intp are thus set to.\n\nIn addition, fftpack_litemodule.c was patched to use npt_intp types for the 'dim' variable in the fftpack_rffti and fftp_pack_cffti functions.\n\nI have compiled and ran the unit tests on our machine against Python 2.5.1, and with numpy compiled against Intel MKL 10.0.1.014, and all tests pass with these edits.\n\nI hope that I'm not breaking some other functionality or what not with this change.  Any help or advice would be greatly appreciated.\n\nThank You for developing such an amazing library and suite of tools!\n\n-Nate"""
1402,7726435,numpy-gitbot,numpy-gitbot,2012-10-19 19:29:06,2012-10-19 19:29:06,2012-10-19 19:29:06,closed,,1.3.0,2,11 - Bug;component: numpy.distutils;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1402,b'numpy 1.1.0 does not build as a python egg (easy_install.exe) (Trac #804)',"b""_Original ticket http://projects.scipy.org/numpy/ticket/804 on 2008-06-02 by trac user djkawa, assigned to @cournape._\n\nHi,\n\ni have been trying to build the numpy 1.1.0 release as an egg (with the easy_install.exe) but it fails both from the tar.gz source archive (a strange error) and the binary install (because it is not anymore a simple distutils .exe). (the one for python 2.4)\n\nany help on that, or having the 1.1.0 for python 2.4 available as an egg even if i don't build it myself, would be much appreciated.\n\nthanks\n\ngilles"""
1401,7726432,numpy-gitbot,charris,2012-10-19 19:29:04,2014-02-18 15:57:00,2014-02-18 15:47:28,closed,,,6,11 - Bug;component: numpy.core;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1401,b'Assignment problem on matrix advanced selection (Trac #803)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/803 on 2008-05-31 by trac user jprey@..., assigned to unknown._\n\nI found a problem when assigning a matrix to a matrix advanced selection\nin numpy 1.0.4.\n\n\n\n    m = numpy.matrix([[1, 2], [3, 4]])\n    m[[0, 0], [0, 1]] = numpy.matrix([-1, -2])\n    \n    ValueError: array is not broadcastable to correct shape\n\n\n\nThis is specific to assigning a matrix to a matrix advanced selection.\nThe following examples all work fine:\n\n\n\n    m = numpy.matrix([[1, 2], [3, 4]])\n    m[0] = numpy.matrix([-1, -2])\n\n\n\n\n\n    m = numpy.matrix([[1, 2], [3, 4]])\n    m[[0, 0], [0, 1]] = numpy.array([-1, -2])\n\n\n\nMost surprisingly, the following example also works\n\n\n\n    m = numpy.matrix([[1, 2], [3, 4]])\n    m[numpy.matrix([0, 0]), numpy.matrix([0, 1])] = numpy.matrix([-1, -2])\n\n\n\nI discovered this poblem while trying\n\n\n\n    m = numpy.matrix([[1, 2], [3, 4]])\n    m[m < 3] = -m[m < 3]\n    \n    ValueError: array is not broadcastable to correct shape\n\n\n\nI believe that if the integer advanced selection is fixed, the boolean\nadvanced selection will also be corrected.\n'"
1400,7726430,numpy-gitbot,charris,2012-10-19 19:29:03,2014-02-18 14:34:21,2014-02-18 14:34:21,closed,,,2,11 - Bug;component: numpy.core;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1400,b'`zeros_like` does not support record arrays (Trac #802)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/802 on 2008-05-28 by @stefanv, assigned to @stefanv._\n\n\n\n    >>> x\n    array([(1, 2), (3, 4)], \n          dtype=[(\'x\', \'<i4\'), (\'y\', \'<i4\')])\n    \n    >>> np.zeros_like(x)\n    ------------------------------------------------------------\n    Traceback (most recent call last):\n      File ""<ipython console>"", line 1, in <module>\n      File ""/Users/stefan/lib/python2.5/site-packages/numpy/core/numeric.py"", line 56, in zeros_like\n        res.fill(0)\n    TypeError: expected a readable buffer object\n\n\n\nThis should work, and be equivalent to:\n\n\n\n    >>> np.zeros(x.shape, x.dtype)\n    array([(0, 0), (0, 0)], \n          dtype=[(\'x\', \'<i4\'), (\'y\', \'<i4\')])\n\n'"
1399,7726429,numpy-gitbot,numpy-gitbot,2012-10-19 19:29:00,2012-10-19 19:29:01,2012-10-19 19:29:01,closed,,1.2.0,1,11 - Bug;component: Other;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1399,b'load_library cannot load libraries with extensions in the name: (Trac #801)',"b""_Original ticket http://projects.scipy.org/numpy/ticket/801 on 2008-05-25 by @cournape, assigned to unknown._\n\n\n\n    #!python\n    import numpy as np\n    np.ctypeslib.load_library('libc.so', '/lib)\n\n\n\nRaises an error:\n\n\n\n    ---------------------------------------------------------------------------\n    <type 'exceptions.UnboundLocalError'>     Traceback (most recent call last)\n    \n    /usr/media/misc/local/stow/<ipython console> in <module>()\n    \n    /home/david/local/stow/numpy.work/lib/python2.5/site-packages/numpy/ctypeslib.py in load_library(libname, loader_path)\n         46             libdir = loader_path\n         47 \n    ---> 48         for ln in libname_ext:\n         49             try:\n         50                 libpath = os.path.join(libdir, ln)\n    \n    <type 'exceptions.UnboundLocalError'>: local variable 'libname_ext' referenced before assignment\n\n"""
1397,7726425,numpy-gitbot,juliantaylor,2012-10-19 19:28:55,2014-03-01 14:40:45,2014-03-01 14:40:45,closed,,,9,11 - Bug;component: numpy.core;priority: low,https://api.github.com/repos/numpy/numpy/issues/1397,b'Segfault when subclassing numpy.float64 with multiple inheritance (Trac #799)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/799 on 2008-05-23 by trac user ReinderKamphorst, assigned to @cournape._\n\nWith numpy 1.0.4 (python 2.4.4 on win XP), the following code causes python to crash:\n\n\n\n    import numpy\n    \n    class A(object): pass\n    class B(A, numpy.float64): pass\n    \n    x = B(1.0)\n\n\n\nApparently numpy.float64 doesn\'t like to be subclassed the way class B does. However, no crash occurs with the following snippet:\n\n\n\n    import numpy\n    \n    class A(object): pass\n    class B(numpy.float64, A): pass\n    \n    x = B(1.0)\n\n\n\nThe same is true if you substitute numpy.float64 with numpy.int64. I haven\'t tried this yet with other numpy.* types.\n\nSubclassing numpy.float64 and the like like this might seem a bit strange; I use it in a tool that traces variables and their values throughout their existence in an arbitrary python script. The trick above works with ""regular"" int and float.\n\nCheers,\nReinder'"
1396,7726420,numpy-gitbot,numpy-gitbot,2012-10-19 19:28:54,2012-10-19 19:28:54,2012-10-19 19:28:54,closed,,1.2.0,1,11 - Bug;component: Other;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1396,b'`piecewise` exposes raw memory (Trac #798)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/798 on 2008-05-21 by @stefanv, assigned to unknown._\n\n`piecewise` uses `empty` to allocate output memory.  If the conditions do not sufficiently cover the output, then raw memory is returned, e.g.,\n\n\n\n    import numpy as np\n    np.piecewise([0,1,2],[True,False,False],[1])\n\n\n\nA patch which addresses the issue is available here for review:\n\nhttp://codereview.appspot.com/1105\n\nDocumentation is being updated on the wiki.\n'"
1394,7726416,numpy-gitbot,numpy-gitbot,2012-10-19 19:28:47,2012-10-19 19:28:49,2012-10-19 19:28:49,closed,,1.2.0,7,11 - Bug;component: Other;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1394,"b""Fake ticket to test Trac's ability to send notification emails (Trac #796)""","b'_Original ticket http://projects.scipy.org/numpy/ticket/796 on 2008-05-20 by trac user pwang, assigned to unknown._\n\nThis is a test ticket.'"
1392,7726411,numpy-gitbot,numpy-gitbot,2012-10-19 19:28:39,2012-10-19 19:28:42,2012-10-19 19:28:42,closed,,1.3.0,8,11 - Bug;component: numpy.core;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1392,b'Patch to fix behavior of numpy.sign(numpy.nan) (Trac #794)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/794 on 2008-05-17 by trac user brorson, assigned to @charris._\n\nAs was discussed on numpy-discuss earlier today, I am submitting a patch to fix the behavior of numpy.sign(numpy.nan).  With this patch, the following behavior obtains:\n\n\n\n    \n    \n    >>> R = numpy.array([-numpy.inf, -2, 0, 2, numpy.inf, numpy.nan])\n    >>> numpy.sign(R)\n    array([ -1.,  -1.,   0.,   1.,   1.,  NaN])\n    >>>\n    >>> C = numpy.array([-numpy.inf, -2+1j, 0, 2-1j, numpy.inf, numpy.nan])\n    >>> numpy.sign(C)\n    array([ -1.+0.j,  -1.+0.j,   0.+0.j,   1.+0.j,   1.+0.j,  NaN+0.j])\n    \n    \n\n\n\nCheers,\n\nStuart Brorson[[BR]]\nInteractive Supercomputing, inc.[[BR]]\n135 Beaver Street | Waltham | MA | 02452 | USA[[BR]]\nhttp://www.interactivesupercomputing.com/[[BR]]\n\n'"
1391,7726410,numpy-gitbot,numpy-gitbot,2012-10-19 19:28:36,2012-10-19 19:28:38,2012-10-19 19:28:38,closed,,1.1.0,7,11 - Bug;component: Other;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1391,b'recarray.list() raises RunTimeError (Trac #793)',"b""_Original ticket http://projects.scipy.org/numpy/ticket/793 on 2008-05-16 by @huard, assigned to unknown._\n\n\n\n    [10]: from numpy import *\n    [11]: num = 2\n    [12]: a = recarray(num, formats='i4,f8,f8',names='id,x,y')\n    [13]: a\n    [13]: \n    recarray([(15987136, -1.1449730052959239e-12, 6.7903865339544522e-313),\n           (0, 4.7430302000759668e-322, 2.4190752022043574e-312)], \n          dtype=[('id', '<i4'), ('x', '<f8'), ('y', '<f8')])\n    [14]: a.tolist()\n    RuntimeError                              Traceback (most recent call last)\n    \n    /aos/home/huardda/<ipython console> in <module>()\n    \n    RuntimeError: array_item not returning smaller-dimensional array\n    \n\n"""
1390,7726408,numpy-gitbot,numpy-gitbot,2012-10-19 19:28:33,2012-10-19 19:28:35,2012-10-19 19:28:35,closed,,1.1.0,3,11 - Bug;component: numpy.f2py;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1390,b'set -D_FORTIFY_SOURCE=1 instead of 2 (Trac #792)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/792 on 2008-05-14 by @huard, assigned to @pearu._\n\nOn Fedora, the flag -D_FORTIFY_SOURCE is set to 2 by default, with for effect the removal of all docstrings from f2py generated fortran extensions. The following patch sets the flag to 1. Note to devs: I have no knowledge of distutils so this patch may be seriously flawed or have unintended consequences. On the upside, it works for me. \n\n\n\n    Index: numpy/distutils/ccompiler.py\n    ===================================================================\n    --- numpy/distutils/ccompiler.py        (revision 5077)\n    +++ numpy/distutils/ccompiler.py        (working copy)\n    @@ -219,6 +219,12 @@\n                 if hasattr(self,\'compiler\'):\n                     log.warn(""#### %s #######"" % (self.compiler,))\n                 log.warn(\'Missing compiler_cxx fix for \'+self.__class__.__name__)\n    +    try:\n    +        i = self.compiler_so.index(\'-Wp,-D_FORTIFY_SOURCE=2\')\n    +        self.compiler_so[i] = \'-Wp,-D_FORTIFY_SOURCE=1\'\n    +    except (AttributeError, ValueError):\n    +        pass\n    +\n         return\n     \n     replace_method(CCompiler, \'customize\', CCompiler_customize)\n\n'"
1389,7726406,numpy-gitbot,numpy-gitbot,2012-10-19 19:28:30,2012-10-19 19:28:32,2012-10-19 19:28:32,closed,,1.1.0,7,11 - Bug;component: Other;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1389,b'Possible bug: std/var not properly calling array_finalize (Trac #791)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/791 on 2008-05-13 by trac user psederberg, assigned to unknown._\n\nHi Folks:\n\nMy colleagues and I have been making a subclass of ndarray that has the ability to save custom attributes (similar to the example given at http://www.scipy.org/Subclasses), however I think I\'ve found a bug where __array_finalize__ does not get called properly when you use the std or var methods (all other methods I have tried work fine.)\n\nHere\'s a sample class that is even simpler than the example:\n\n\n\n    import numpy as np   # that\'s what was adopted right?\n    \n    class TestArray(np.ndarray):\n        def __new__(cls, data, info):\n            # ensure ndarray\n            result = np.array(data)\n    \n            # transform the data to the new class\n            result = result.view(cls)\n    \n            # set the custom attribute\n            result.info = info\n    \n            # return new custom array\n            return result\n    \n        def __array_finalize__(self, obj):\n            # provide info for what\'s happening\n            print ""finalize:\\t%s\\n\\t\\t%s"" % (self.__class__, obj.__class__)\n            # set the custom attribute\n            self.info = getattr(obj,\'info\',\'\')\n            # provide more info\n            if hasattr(obj,\'info\'):\n                print ""\\t\\t%s : %s"" % (self.info, obj.info)\n            else:\n                print ""\\t\\t%s : None"" % (self.info)\n    \n\n\n\nSo, if you run it like this, you\'ll see the problem (the debug messages are a little verbose):\n\n\n\n    dat = TestArray([[1,2,3,4],[5,6,7,8]], \'jubba\')\n    dat.info           # gives you \'jubba\'\n    dat.mean(1).info   # gives you \'jubba\'\n    dat.std(1).info    # gives you \'\'\n\n\n\nAfter calling array_finalize with the proper self and obj, the last time it is called in std is with a ndarray that is not an instance of TestArray.  I\'m not sure why this is, but I don\'t think it\'s correct and if it is, I think it prevents all subclassing with custom attributes (like the example given on the scipy page) from working.\n\nThanks for looking at this issue because it\'s preventing us from continuing work.  If you do find and fix it, could you also suggest any workarounds for the current release because we would ideally like to use the numpy releases in Debian testing.\n\nOh, I forgot to tell you my version info:\n\nnumpy.version.version = 1.0.4\npython = Python 2.5.2\n\nThis is the current Debian testing.\n\nThanks,\nPer\n'"
1388,7726404,numpy-gitbot,numpy-gitbot,2012-10-19 19:28:27,2012-10-19 19:28:29,2012-10-19 19:28:29,closed,,1.1.0,4,11 - Bug;component: Other;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1388,b'import error with latest numpy (Trac #790)',"b""_Original ticket http://projects.scipy.org/numpy/ticket/790 on 2008-05-12 by @chanley, assigned to unknown._\n\nI am unable to import numpy after building from svn.  I receive the following error:\n\n\n\n    In [1]: import numpy\n    ---------------------------------------------------------------------------\n    <type 'exceptions.ImportError'>           Traceback (most recent call last)\n    \n    /home/chanley/<ipython console> in <module>()\n    \n    /user/chanley/dev/site-packages/lib/python/numpy/__init__.py in <module>()\n         50     import lib\n         51     from lib import *\n    ---> 52     import linalg\n         53     import fft\n         54     import random\n    \n    /user/chanley/dev/site-packages/lib/python/numpy/linalg/__init__.py in <module>(\n    )\n          2 from info import __doc__\n          3 \n    ----> 4 from linalg import *\n          5 \n          6 def test(level=1, verbosity=1):\n    \n    /user/chanley/dev/site-packages/lib/python/numpy/linalg/linalg.py in <module>()\n         27         isfinite, size\n         28 from numpy.lib import triu\n    ---> 29 from numpy.linalg import lapack_lite\n         30 from numpy.core.defmatrix import matrix_power, matrix\n         31 \n    \n    <type 'exceptions.ImportError'>: /user/chanley/dev/site-packages/lib/python/nump\n    y/linalg/lapack_lite.so: undefined symbol: e_wsfe\n    \n\n\n\nThis is a RedHat Enterprise system running on a 64-bit processor.  The build is from r5157.\n\nThis has never been an issue before.\n"""
1387,7726400,numpy-gitbot,numpy-gitbot,2012-10-19 19:28:24,2014-04-09 09:26:03,2012-10-19 19:28:26,closed,,1.1.0,6,11 - Bug;component: numpy.core;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1387,"b'Segfault if ndarray.compress can\'t safely cast into the ""out"" array (Trac #789)'","b""_Original ticket http://projects.scipy.org/numpy/ticket/789 on 2008-05-12 by @alanmcintyre, assigned to @cournape._\n\nIf you give ndarray.compress an out argument of a type with lower precision than self, it causes a segfault.  Here's a simple example:\n\n---------------------------------------------------------\n> from numpy import *\n> a = array([[1,2,3],[4,5,6]])\n> b = array([[0.,0.],[0.,0.]],dtype=single)\n> a.compress([False,False,True],axis=1,out=c)\nSegmentation fault\n---------------------------------------------------------\n\nThis appears to happen because the call to PyArray_FromArray from PyArray_TakeFrom (at multiarraymodule.c line 3896) fails but there is no NULL check for the return variable.\n\nI'm attaching a patch that adds a null check, and just ends up raising a ValueError for the above example."""
1386,7726396,numpy-gitbot,numpy-gitbot,2012-10-19 19:28:17,2012-10-19 19:28:23,2012-10-19 19:28:23,closed,,1.1.0,12,11 - Bug;component: Other;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1386,b'astype sometimes fails to return a copy (Trac #788)',"b""_Original ticket http://projects.scipy.org/numpy/ticket/788 on 2008-05-10 by @efiring, assigned to unknown._\n\nThe astype ndarray method is supposed to return a copy, but sometimes it returns the original array. Here is an example session illustrating this,using a pickled array.  Note that the __array_interface__['data'] points to the same location for the original array and for the result of the astype('d') method.  The 'badarray' pickle file is attached.\n\nIn [1]:import cPickle\n\nIn [3]:xx = cPickle.load(open('badarray'))\n\nIn [4]:xx\nOut[4]:\narray([ 23.73140116,  23.72649352,  23.72382685,  23.72405394,\n        23.72166806,  23.6917912 ,  23.62796481,  23.59340417,\n        23.66240509,  23.78591019,  23.78932755,  23.7951713 ,\n        23.800875  ,  23.80596065,  23.7897963 ,  23.79318796,\n        23.79156296,  23.78386296,  23.76369236,  23.76529907,\n        23.7601169 ,  23.76050602,  23.75864167,  23.75500278,\n        23.75078102,  23.74768727,  23.74270162,  23.73668056,\n        23.68076759,  23.59250231,  23.54354653,  23.59569167,\n        23.65320718,  23.74927338,  23.80626389,  23.83042199,\n        23.82865718,  23.82814468,  23.82959745,  23.83229907,\n        23.8211838 ,  23.87093542,  23.88018032,  23.89005787,\n        23.89711852,  23.89482917,  23.89307963,  23.89227315,\n        23.89159653,  23.89037407,  23.88799167,  23.88153796,\n        23.80637824,  23.74419097,  23.73798194,  23.75471204,\n        23.87062662,  23.91047731,  23.94460741,  23.9374419 ,\n        23.89750278,  23.81816829,  23.81924861,  23.83898287,\n        23.84776829,  23.85297662,  23.85658449,  23.86032917,\n        23.86472083,  23.87044954,  23.87483171,  23.88724005,  23.96076778])\n\nIn [5]:xx.__array_interface__\nOut[5]:\n{'data': (137505876, False),\n 'descr': [('', '<f8')],\n 'shape': (73,),\n 'strides': None,\n 'typestr': '<f8',\n 'version': 3}\n\nIn [6]:xxx = xx.astype('d')\n\nIn [7]:xxx.__array_interface__\nOut[7]:\n{'data': (137505876, False),\n 'descr': [('', '<f8')],\n 'shape': (73,),\n 'strides': None,\n 'typestr': '<f8',\n 'version': 3}\n\nIn [8]:import numpy as np\n\nIn [9]:np.version\nOut[9]:<module 'numpy.version' from '/usr/local/lib/python2.5/site-packages/numpy/version.pyc'>\n\nIn [10]:np.__version__\nOut[10]:'1.2.0.dev5150'\n"""
1385,7726393,numpy-gitbot,numpy-gitbot,2012-10-19 19:28:13,2012-10-19 19:28:16,2012-10-19 19:28:16,closed,,1.3.0,10,11 - Bug;component: numpy.core;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1385,"b""Matrix power augmented assignment doesn't work correctly (Trac #787)""","b'_Original ticket http://projects.scipy.org/numpy/ticket/787 on 2008-05-10 by trac user jprey@..., assigned to @cournape._\n\nThe power augmented assignment for matrix objects doesn\'t work correctly. It is inherited from ndarray and compute element-by-element power instead of matrix power.\n\n\n\n    >>> m = numpy.matrix(""1 2 ; 3 4"")\n    >>> m **= 2\n    >>> print m\n    [[ 1  4]\n     [ 9 16]]\n\n\n\n\n== Proposed fix ==\n\nin numpy/core/defmatrix.py, add a new method to class matrix:\n\n\n\n\n        def __ipow__(self, other):\n            self[:] = self ** other\n            return self\n\n\n'"
1384,7726391,numpy-gitbot,numpy-gitbot,2012-10-19 19:28:10,2012-10-23 02:38:34,2012-10-19 19:28:12,closed,,1.3.0,5,11 - Bug;component: numpy.linalg;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1384,b'TypeError in linalg.norm() (Trac #786)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/786 on 2008-05-09 by trac user nick, assigned to unknown._\n\nWhile working on a unit test for linalg.norm() (see ticket #1361), I discovered that if a vector is passed into the norm() method with \'fro\' as the argument for the ord, an error occurs. Example:\n\n\n\n    >>> from numpy import linalg\n    >>> a = [1,2,3,4]\n    >>> linalg.norm(a,\'fro\')\n    Traceback (most recent call last):\n      File ""<stdin>"", line 1, in <module>\n      File ""/tmp/lib/python2.5/site-packages/numpy/linalg/linalg.py"", line 1262, in norm\n        return ((abs(x)**ord).sum())**(1.0/ord)\n    TypeError: unsupported operand type(s) for ** or pow(): \'numpy.ndarray\' and \'str\'\n    >>> \n    \n\n\n\nPerforming the same test but omiting the parameter \'fro\' allows the method to execute normally. A test case that exposes this is available in ticket #1361.'"
1383,7726390,numpy-gitbot,numpy-gitbot,2012-10-19 19:28:07,2012-10-23 02:38:31,2012-10-19 19:28:08,closed,,1.2.0,3,11 - Bug;component: Other;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1383,b'Error in linalg.norm() (Trac #785)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/785 on 2008-05-09 by trac user nick, assigned to unknown._\n\nWhile working on a unit test for linalg.norm() (see ticket #1361), I discovered that if a vector is passed into the norm() method with \'fro\' as the argument for the ord, an error occurs. Example:\n\n\n\n    >>> from numpy import linalg\n    >>> a = [1,2,3,4]\n    >>> linalg.norm(a,\'fro\')\n    Traceback (most recent call last):\n      File ""<stdin>"", line 1, in <module>\n      File ""/tmp/lib/python2.5/site-packages/numpy/linalg/linalg.py"", line 1262, in norm\n        return ((abs(x)**ord).sum())**(1.0/ord)\n    TypeError: unsupported operand type(s) for ** or pow(): \'numpy.ndarray\' and \'str\'\n    >>> \n    \n\n\n\nPerforming the same test but omiting the parameter \'fro\' allows the method to execute normally. A test case that exposes this is available in ticket #1361.'"
1381,7726388,numpy-gitbot,numpy-gitbot,2012-10-19 19:28:03,2012-10-19 19:28:03,2012-10-19 19:28:03,closed,,1.1.0,1,11 - Bug;component: Other;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1381,b'Markup errors in trunk/numpy/ma/API_CHANGES.txt (Trac #783)',"b""_Original ticket http://projects.scipy.org/numpy/ticket/783 on 2008-05-08 by @vnoel, assigned to unknown._\n\nThere are two errors in the markup in trunk/numpy/ma/API_CHANGES.txt, see http://scipy.org/scipy/numpy/wiki/MaskedArrayApiChanges\n\nI've noticed there is no numpy.ma Trac component for bugs in masked arrays. Should one be created ?"""
1380,7726387,numpy-gitbot,numpy-gitbot,2012-10-19 19:28:01,2012-10-19 19:28:01,2012-10-19 19:28:01,closed,,1.1.0,1,11 - Bug;component: Other;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1380,b'Markup errors in trunk/numpy/ma/API_CHANGES.txt (Trac #782)',"b""_Original ticket http://projects.scipy.org/numpy/ticket/782 on 2008-05-08 by @vnoel, assigned to unknown._\n\nThere are two errors in the markup in trunk/numpy/ma/API_CHANGES.txt, see http://scipy.org/scipy/numpy/wiki/MaskedArrayApiChanges\n\nI've noticed there is no numpy.ma Trac component for bugs in masked arrays. Should one be created ?"""
1379,7726385,numpy-gitbot,numpy-gitbot,2012-10-19 19:27:59,2012-10-19 19:28:00,2012-10-19 19:28:00,closed,,1.1.0,1,11 - Bug;component: Other;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1379,b'Markup errors in trunk/numpy/ma/API_CHANGES.txt (Trac #781)',"b""_Original ticket http://projects.scipy.org/numpy/ticket/781 on 2008-05-08 by @vnoel, assigned to unknown._\n\nThere are two errors in the markup in trunk/numpy/ma/API_CHANGES.txt, see http://scipy.org/scipy/numpy/wiki/MaskedArrayApiChanges\n\nI've noticed there is no numpy.ma Trac component for bugs in masked arrays. Should one be created ?"""
1378,7726384,numpy-gitbot,numpy-gitbot,2012-10-19 19:27:57,2012-10-19 19:27:57,2012-10-19 19:27:57,closed,,1.1.0,1,11 - Bug;component: Other;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1378,b'Markup errors in trunk/numpy/ma/API_CHANGES.txt (Trac #780)',"b""_Original ticket http://projects.scipy.org/numpy/ticket/780 on 2008-05-08 by @vnoel, assigned to unknown._\n\nThere are two errors in the markup in trunk/numpy/ma/API_CHANGES.txt, see http://scipy.org/scipy/numpy/wiki/MaskedArrayApiChanges\n\nI've noticed there is no numpy.ma Trac component for bugs in masked arrays. Should one be created ?"""
1377,7726382,numpy-gitbot,numpy-gitbot,2012-10-19 19:27:55,2012-10-19 19:27:56,2012-10-19 19:27:56,closed,,1.1.0,2,11 - Bug;component: Other;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1377,b'Markup errors in trunk/numpy/ma/API_CHANGES.txt (Trac #779)',"b""_Original ticket http://projects.scipy.org/numpy/ticket/779 on 2008-05-08 by @vnoel, assigned to unknown._\n\nThere are two errors in the markup in trunk/numpy/ma/API_CHANGES.txt, see http://scipy.org/scipy/numpy/wiki/MaskedArrayApiChanges\n\nI've noticed there is no numpy.ma Trac component for bugs in masked arrays. Should one be created ?"""
1376,7726381,numpy-gitbot,numpy-gitbot,2012-10-19 19:27:53,2012-10-19 19:27:54,2012-10-19 19:27:54,closed,,1.1.0,2,11 - Bug;component: numpy.ma;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1376,b'Markup errors in trunk/numpy/ma/API_CHANGES.txt (Trac #778)',"b""_Original ticket http://projects.scipy.org/numpy/ticket/778 on 2008-05-08 by @vnoel, assigned to @jarrodmillman._\n\nThere are two errors in the markup in trunk/numpy/ma/API_CHANGES.txt, see http://scipy.org/scipy/numpy/wiki/MaskedArrayApiChanges\n\nI've noticed there is no numpy.ma Trac component for bugs in masked arrays. Should one be created ?"""
1375,7726380,numpy-gitbot,numpy-gitbot,2012-10-19 19:27:51,2012-10-19 19:27:51,2012-10-19 19:27:51,closed,,1.1.0,2,11 - Bug;component: Other;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1375,b'array resize shifts values in array (Trac #777)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/777 on 2008-05-07 by trac user nick, assigned to unknown._\n\nWhen resize is called on a 2d array, if the value of the ""column resize"" is greater than the current column size, a wrapping of the values occurs. I noticed this while trying to resize a diagonal matrix. Example:\n\n\n\n    Python 2.5.1 (r251:54863, Apr 18 2007, 08:51:08) [MSC v.1310 32 bit (Intel)] on\n    win32\n    Type ""help"", ""copyright"", ""credits"" or ""license"" for more information.\n    >>> from numpy import *\n    >>> from numpy.lib import twodim_base\n    >>> a = [1,2,3,4]\n    >>> a_diag = twodim_base.diag(a)\n    >>> print a_diag\n    [[1 0 0 0]\n     [0 2 0 0]\n     [0 0 3 0]\n     [0 0 0 4]]\n    >>> a_diag.resize((5,4))\n    >>> print a_diag\n    [[1 0 0 0]\n     [0 2 0 0]\n     [0 0 3 0]\n     [0 0 0 4]\n     [0 0 0 0]]\n    >>> a = [1,2,3,4]\n    >>> a_diag = twodim_base.diag(a)\n    >>> a_diag.resize((4,5))\n    >>> print a_diag\n    [[1 0 0 0 0]\n     [2 0 0 0 0]\n     [3 0 0 0 0]\n     [4 0 0 0 0]]\n    >>>\n\n\n\nThe documentation led me to believe that a column of 0\'s would be added (much like how a row of 0\'s was added when the number of rows was increased).\n\nNick Loadholtes - nick@ironboundsoftware.com'"
1374,7726379,numpy-gitbot,numpy-gitbot,2012-10-19 19:27:48,2012-10-19 19:27:49,2012-10-19 19:27:49,closed,,1.1.0,1,11 - Bug;component: Other;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1374,b'array resize shifts values in array (Trac #776)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/776 on 2008-05-07 by trac user nick, assigned to unknown._\n\nWhen resize is called on a 2d array, if the value of the ""column resize"" is greater than the current column size, a wrapping of the values occurs. I noticed this while trying to resize a diagonal matrix. Example:\n\n\n\n    Python 2.5.1 (r251:54863, Apr 18 2007, 08:51:08) [MSC v.1310 32 bit (Intel)] on\n    win32\n    Type ""help"", ""copyright"", ""credits"" or ""license"" for more information.\n    >>> from numpy import *\n    >>> from numpy.lib import twodim_base\n    >>> a = [1,2,3,4]\n    >>> a_diag = twodim_base.diag(a)\n    >>> print a_diag\n    [[1 0 0 0]\n     [0 2 0 0]\n     [0 0 3 0]\n     [0 0 0 4]]\n    >>> a_diag.resize((5,4))\n    >>> print a_diag\n    [[1 0 0 0]\n     [0 2 0 0]\n     [0 0 3 0]\n     [0 0 0 4]\n     [0 0 0 0]]\n    >>> a = [1,2,3,4]\n    >>> a_diag = twodim_base.diag(a)\n    >>> a_diag.resize((4,5))\n    >>> print a_diag\n    [[1 0 0 0 0]\n     [2 0 0 0 0]\n     [3 0 0 0 0]\n     [4 0 0 0 0]]\n    >>>\n\n\n\nThe documentation led me to believe that a column of 0\'s would be added (much like how a row of 0\'s was added when the number of rows was increased).\n\nNick Loadholtes - nick@ironboundsoftware.com'"
1373,7726377,numpy-gitbot,numpy-gitbot,2012-10-19 19:27:45,2012-10-19 19:27:47,2012-10-19 19:27:47,closed,,1.4.1,6,11 - Bug;component: Documentation;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1373,b'array resize shifts values in array (Trac #775)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/775 on 2008-05-07 by trac user nick, assigned to unknown._\n\nWhen resize is called on a 2d array, if the value of the ""column resize"" is greater than the current column size, a wrapping of the values occurs. I noticed this while trying to resize a diagonal matrix. Example:\n\n\n\n    Python 2.5.1 (r251:54863, Apr 18 2007, 08:51:08) [MSC v.1310 32 bit (Intel)] on\n    win32\n    Type ""help"", ""copyright"", ""credits"" or ""license"" for more information.\n    >>> from numpy import *\n    >>> from numpy.lib import twodim_base\n    >>> a = [1,2,3,4]\n    >>> a_diag = twodim_base.diag(a)\n    >>> print a_diag\n    [[1 0 0 0]\n     [0 2 0 0]\n     [0 0 3 0]\n     [0 0 0 4]]\n    >>> a_diag.resize((5,4))\n    >>> print a_diag\n    [[1 0 0 0]\n     [0 2 0 0]\n     [0 0 3 0]\n     [0 0 0 4]\n     [0 0 0 0]]\n    >>> a = [1,2,3,4]\n    >>> a_diag = twodim_base.diag(a)\n    >>> a_diag.resize((4,5))\n    >>> print a_diag\n    [[1 0 0 0 0]\n     [2 0 0 0 0]\n     [3 0 0 0 0]\n     [4 0 0 0 0]]\n    >>>\n\n\n\nThe documentation led me to believe that a column of 0\'s would be added (much like how a row of 0\'s was added when the number of rows was increased).\n\nNick Loadholtes - nick@ironboundsoftware.com'"
1372,7726376,numpy-gitbot,rgommers,2012-10-19 19:27:42,2013-05-05 20:16:22,2013-05-05 20:01:24,closed,,,7,11 - Bug;component: numpy.core;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1372,b'Memory leak when running unit tests (Trac #774)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/774 on 2008-05-07 by @alberts, assigned to unknown._\n\nValgrind reports the following memory leak when running the unit tests:\n\n\n\n    ==14758== 88 (80 direct, 8 indirect) bytes in 2 blocks are definitely lost in loss record 30 of 75\n    ==14758==    at 0x4005400: malloc (vg_replace_malloc.c:149)\n    ==14758==    by 0x4334B92: array_alloc (arrayobject.c:6929)\n    ==14758==    by 0x433F63A: PyArray_NewFromDescr (arrayobject.c:5575)\n    ==14758==    by 0x4358EEC: PyArray_FromScalar (scalartypes.inc.src:249)\n    ==14758==    by 0x437E991: gen_arrtype_subscript (scalartypes.inc.src:2405)\n    ==14758==    by 0x80CC7BD: PyEval_EvalFrameEx (ceval.c:1207)\n    ==14758==    by 0x80D0CA5: PyEval_EvalCodeEx (ceval.c:2908)\n    ==14758==    by 0x81235D5: function_call (funcobject.c:524)\n    ==14758==    by 0x805BE24: PyObject_Call (abstract.c:2490)\n    ==14758==    by 0x80CB503: PyEval_EvalFrameEx (ceval.c:3944)\n    ==14758==    by 0x80D0CA5: PyEval_EvalCodeEx (ceval.c:2908)\n    ==14758==    by 0x80CF002: PyEval_EvalFrameEx (ceval.c:3741)\n    ==14758==    by 0x80D04A2: PyEval_EvalFrameEx (ceval.c:3731)\n    ==14758==    by 0x80D0CA5: PyEval_EvalCodeEx (ceval.c:2908)\n    ==14758==    by 0x81235D5: function_call (funcobject.c:524)\n    ==14758==    by 0x805BE24: PyObject_Call (abstract.c:2490)\n    ==14758==    by 0x80CB503: PyEval_EvalFrameEx (ceval.c:3944)\n    ==14758==    by 0x80D0CA5: PyEval_EvalCodeEx (ceval.c:2908)\n    ==14758==    by 0x812350B: function_call (funcobject.c:524)\n    ==14758==    by 0x805BE24: PyObject_Call (abstract.c:2490)\n\n\n\nFound using the Python 2.6 buildbot.'"
1371,7726374,numpy-gitbot,numpy-gitbot,2012-10-19 19:27:40,2012-10-19 19:27:41,2012-10-19 19:27:41,closed,,1.3.0,3,11 - Bug;component: numpy.core;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1371,b'Valgrind causes some tests to fail (Trac #773)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/773 on 2008-05-07 by @alberts, assigned to unknown._\n\nValgrind causes the following tests to fail:\n\n\n\n    ======================================================================\n    FAIL: test_divide (test_errstate.TestErrstate)\n    ----------------------------------------------------------------------\n    Traceback (most recent call last):\n      File ""<string>"", line 38, in test_divide\n    AssertionError\n    \n    ======================================================================\n    FAIL: test_invalid (test_errstate.TestErrstate)\n    ----------------------------------------------------------------------\n    Traceback (most recent call last):\n      File ""<string>"", line 24, in test_invalid\n    AssertionError\n    \n    ======================================================================\n    FAIL: test_divideerr (numpy.core.tests.test_numeric.TestSeterr)\n    ----------------------------------------------------------------------\n    Traceback (most recent call last):\n      File ""/home/buildbot/numpy/b6/numpy-install/lib/python2.6/site-packages/numpy/core/tests/test_numeric.py"", line 196, in test_divideerr\n        self.fail()\n    AssertionError\n\n\n\nIt would be useful if all tests could pass when run under Valgrind.'"
1370,7726372,numpy-gitbot,numpy-gitbot,2012-10-19 19:27:37,2012-10-23 02:38:28,2012-10-19 19:27:38,closed,,,4,11 - Bug;component: numpy.core;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1370,b'Valgrind warning when running test for compress2d (Trac #772)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/772 on 2008-05-07 by @alberts, assigned to unknown._\n\nValgrind warning when running test for compress2d:\n\n\n\n    ==14758== Conditional jump or move depends on uninitialised value(s)\n    ==14758==    at 0x4330DB6: PyArray_MapIterReset (arrayobject.c:10190)\n    ==14758==    by 0x437D85E: array_subscript (arrayobject.c:2549)\n    ==14758==    by 0x437E491: array_subscript_nice (arrayobject.c:3173)\n    ==14758==    by 0x80CC7BD: PyEval_EvalFrameEx (ceval.c:1207)\n    ==14758==    by 0x80D0CA5: PyEval_EvalCodeEx (ceval.c:2908)\n    ==14758==    by 0x80CF002: PyEval_EvalFrameEx (ceval.c:3741)\n    ==14758==    by 0x80D04A2: PyEval_EvalFrameEx (ceval.c:3731)\n    ==14758==    by 0x80D0CA5: PyEval_EvalCodeEx (ceval.c:2908)\n    ==14758==    by 0x81235D5: function_call (funcobject.c:524)\n    ==14758==    by 0x805BE24: PyObject_Call (abstract.c:2490)\n    ==14758==    by 0x80CB503: PyEval_EvalFrameEx (ceval.c:3944)\n    ==14758==    by 0x80D0CA5: PyEval_EvalCodeEx (ceval.c:2908)\n    ==14758==    by 0x812350B: function_call (funcobject.c:524)\n    ==14758==    by 0x805BE24: PyObject_Call (abstract.c:2490)\n    ==14758==    by 0x8062C76: instancemethod_call (classobject.c:2558)\n    ==14758==    by 0x805BE24: PyObject_Call (abstract.c:2490)\n    ==14758==    by 0x80CBE34: PyEval_EvalFrameEx (ceval.c:3856)\n    ==14758==    by 0x80D0CA5: PyEval_EvalCodeEx (ceval.c:2908)\n    ==14758==    by 0x812350B: function_call (funcobject.c:524)\n    ==14758==    by 0x805BE24: PyObject_Call (abstract.c:2490)\n\n\n\nFound by Python 2.6 buildbot.'"
1369,7726371,numpy-gitbot,numpy-gitbot,2012-10-19 19:27:34,2012-10-23 02:38:25,2012-10-19 19:27:36,closed,,1.2.0,4,11 - Bug;component: numpy.core;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1369,b'Valgrind warning when running test for ticket #658 (Trac #771)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/771 on 2008-05-07 by @alberts, assigned to unknown._\n\nValgrind warning when running test for ticket #1256:\n\n\n\n    ==14758== Conditional jump or move depends on uninitialised value(s)\n    ==14758==    at 0x433E2D2: PyArray_UpdateFlags (arrayobject.c:5172)\n    ==14758==    by 0x43679C8: PyArray_Newshape (multiarraymodule.c:742)\n    ==14758==    by 0x436856E: array_reshape (arraymethods.c:87)\n    ==14758==    by 0x80CF775: PyEval_EvalFrameEx (ceval.c:3645)\n    ==14758==    by 0x80D0CA5: PyEval_EvalCodeEx (ceval.c:2908)\n    ==14758==    by 0x80CF002: PyEval_EvalFrameEx (ceval.c:3741)\n    ==14758==    by 0x80D0CA5: PyEval_EvalCodeEx (ceval.c:2908)\n    ==14758==    by 0x81235D5: function_call (funcobject.c:524)\n    ==14758==    by 0x805BE24: PyObject_Call (abstract.c:2490)\n    ==14758==    by 0x80CB503: PyEval_EvalFrameEx (ceval.c:3944)\n    ==14758==    by 0x80D0CA5: PyEval_EvalCodeEx (ceval.c:2908)\n    ==14758==    by 0x812350B: function_call (funcobject.c:524)\n    ==14758==    by 0x805BE24: PyObject_Call (abstract.c:2490)\n    ==14758==    by 0x8062C76: instancemethod_call (classobject.c:2558)\n    ==14758==    by 0x805BE24: PyObject_Call (abstract.c:2490)\n    ==14758==    by 0x80CBE34: PyEval_EvalFrameEx (ceval.c:3856)\n    ==14758==    by 0x80D0CA5: PyEval_EvalCodeEx (ceval.c:2908)\n    ==14758==    by 0x812350B: function_call (funcobject.c:524)\n    ==14758==    by 0x805BE24: PyObject_Call (abstract.c:2490)\n    ==14758==    by 0x8062C76: instancemethod_call (classobject.c:2558)\n\n\n\nFound by the Python 2.6 buildbot.'"
1368,7726368,numpy-gitbot,numpy-gitbot,2012-10-19 19:27:31,2012-10-19 19:27:33,2012-10-19 19:27:33,closed,,1.1.0,3,11 - Bug;component: numpy.core;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1368,b'numpy.core.tests.test_multiarray.TestView failures on big-endian machines (Trac #770)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/770 on 2008-05-05 by @chanley, assigned to unknown._\n\nWe are receiving the following numpy self-test failures on our big-endian Solaris 10 system.  The numpy version is 1.1.0.dev5125.\n\n\n\n    ======================================================================\n    FAIL: test_basic (numpy.core.tests.test_multiarray.TestView)\n    ----------------------------------------------------------------------\n    Traceback (most recent call last):\n      File ""/usr/ra/pyssg/2.5.1/numpy/core/tests/test_multiarray.py"", line 843, in test_basic\n        assert_array_equal(y, [67305985, 134678021])\n      File ""/usr/stsci/pyssgdev/2.5.1/numpy/testing/utils.py"", line 248, in assert_array_equal\n        verbose=verbose, header=\'Arrays are not equal\')\n      File ""/usr/stsci/pyssgdev/2.5.1/numpy/testing/utils.py"", line 240, in assert_array_compare\n        assert cond, msg\n    AssertionError: \n    Arrays are not equal\n    \n    (mismatch 100.0%)\n     x: array([16909060, 84281096])\n     y: array([ 67305985, 134678021])\n    \n    ======================================================================\n    FAIL: test_keywords (numpy.core.tests.test_multiarray.TestView)\n    ----------------------------------------------------------------------\n    Traceback (most recent call last):\n      File ""/usr/ra/pyssg/2.5.1/numpy/core/tests/test_multiarray.py"", line 852, in test_keywords\n        assert_array_equal(y,[[513]])\n      File ""/usr/stsci/pyssgdev/2.5.1/numpy/testing/utils.py"", line 248, in assert_array_equal\n        verbose=verbose, header=\'Arrays are not equal\')\n      File ""/usr/stsci/pyssgdev/2.5.1/numpy/testing/utils.py"", line 240, in assert_array_compare\n        assert cond, msg\n    AssertionError: \n    Arrays are not equal\n    \n    (mismatch 100.0%)\n     x: array([[258]], dtype=int16)\n     y: array([[513]])\n    \n    ----------------------------------------------------------------------\n    Ran 986 tests in 21.707s\n    \n    FAILED (failures=2)\n    errors: \n    failures: \n    \t(<numpy.core.tests.test_multiarray.TestView testMethod=test_basic>, \'Traceback (most recent call last):\\n  File ""/usr/ra/pyssg/2.5.1/numpy/core/tests/test_multiarray.py"", line 843, in test_basic\\n    assert_array_equal(y, [67305985, 134678021])\\n  File ""/usr/stsci/pyssgdev/2.5.1/numpy/testing/utils.py"", line 248, in assert_array_equal\\n    verbose=verbose, header=\\\'Arrays are not equal\\\')\\n  File ""/usr/stsci/pyssgdev/2.5.1/numpy/testing/utils.py"", line 240, in assert_array_compare\\n    assert cond, msg\\nAssertionError: \\nArrays are not equal\\n\\n(mismatch 100.0%)\\n x: array([16909060, 84281096])\\n y: array([ 67305985, 134678021])\\n\')\n    \t(<numpy.core.tests.test_multiarray.TestView testMethod=test_keywords>, \'Traceback (most recent call last):\\n  File ""/usr/ra/pyssg/2.5.1/numpy/core/tests/test_multiarray.py"", line 852, in test_keywords\\n    assert_array_equal(y,[[513]])\\n  File ""/usr/stsci/pyssgdev/2.5.1/numpy/testing/utils.py"", line 248, in assert_array_equal\\n    verbose=verbose, header=\\\'Arrays are not equal\\\')\\n  File ""/usr/stsci/pyssgdev/2.5.1/numpy/testing/utils.py"", line 240, in assert_array_compare\\n    assert cond, msg\\nAssertionError: \\nArrays are not equal\\n\\n(mismatch 100.0%)\\n x: array([[258]], dtype=int16)\\n y: array([[513]])\\n\')\n    if ( 1 != 0 ) then\n    echo <font color=orange>selftest</font>\n    exit 0\n    \n\n'"
1364,7726358,numpy-gitbot,numpy-gitbot,2012-10-19 19:27:17,2012-10-19 19:27:20,2012-10-19 19:27:20,closed,,1.6.0,6,11 - Bug;component: numpy.core;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1364,b'fastCopyAndTranspose segfaults (Trac #766)',"b""_Original ticket http://projects.scipy.org/numpy/ticket/766 on 2008-04-30 by trac user dave.hirschfeld, assigned to unknown._\n\nThe below code causes fastCopyAndTranspose to segfault.\n\n> It looks like the segfault occurs in the printing of the result.    If \n> you set y = fastCopyAndTranspose(x)  you don't get a segfault until you \n> try to print it (actually __repr__ it). \n> \n> -Travis\n\n\nfrom datetime import datetime, timedelta\n\nfrom numpy import asarray, fastCopyAndTranspose\n\ntimestamps = [datetime(2007,1,1)]\n\nwhile timestamps[-1] < datetime(2007,12,31):\n    timestamps.append(timestamps[-1] + timedelta(1))\n\n\nx = [asarray(timestamps),asarray(range(len(timestamps)))]\n\nfastCopyAndTranspose(x)\n\n"""
1359,7726348,numpy-gitbot,numpy-gitbot,2012-10-19 19:27:03,2012-10-19 19:27:05,2012-10-19 19:27:05,closed,,1.1.0,5,11 - Bug;component: numpy.numarray;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1359,b'operator += fails silently when adding arrays with diffenent base types (Trac #761)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/761 on 2008-04-27 by trac user drevicko, assigned to unknown._\n\nExample:\n\n\n    >>> a=array([1,2,3])\n    >>> b=array([4,5,6])\n    >>> b+=a\n    >>> b    # b and a are both integer arrays and += succeeds as expected\n    array([5, 7, 9])\n    >>> b+=0.1*a\n    >>> b    # b and integer array, 0.1*a a float array : += failed silently\n    array([5, 7, 9])\n    >>> b=b+0.1*a\n    >>> b    # works when written longhand.\n    array([ 5.1,  7.2,  9.3])\n    >>> \n\n\n\nI have numpy version 1.04 (this is not in the trac version list...)\nPython 2.5.2 on win32'"
1358,7726345,numpy-gitbot,numpy-gitbot,2012-10-19 19:27:00,2012-10-19 19:27:01,2012-10-19 19:27:01,closed,,1.1.0,4,11 - Bug;component: Other;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1358,b'scalar indexing of matrices -> deprecation warning (Trac #760)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/760 on 2008-04-26 by trac user aisaac, assigned to unknown._\n\nGiven current discussions, it seems that scalar indexing of matrices will change behavior.  Therefore there should be a warning.  The attached patch to defmatrix.py produces a deprecation warning.'"
1357,7726344,numpy-gitbot,numpy-gitbot,2012-10-19 19:26:57,2012-10-19 19:26:59,2012-10-19 19:26:59,closed,,1.1.0,7,11 - Bug;component: numpy.lib;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1357,b'spurious underflow warning in numpy.lib.machar (Trac #759)',"b""_Original ticket http://projects.scipy.org/numpy/ticket/759 on 2008-04-26 by @cournape, assigned to unknown._\n\nI sometimes use seterr(all = 'warn') to detect potential problems in my algorithms, and I always get warning in numpy.lib.machar when importing e.g. scipy.io. For example, this minimal script shows this behaviour:\n\n\n\n    #!python\n    import numpy as np                                                                       \n    from scipy.testing import *                                                              \n            \n    a = np.seterr(all = 'warn')                                                              \n        \n    from scipy.io import savemat, loadmat    \n\n\n\nI attached a patch which should solve the problem. As I am not familiar with this part of numpy codebase, I did not apply it right away."""
1355,7726338,numpy-gitbot,numpy-gitbot,2012-10-19 19:26:53,2012-10-19 19:26:53,2012-10-19 19:26:53,closed,,,1,11 - Bug;component: Other;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1355,"b""numpy.sort sometimes doesn't handle strings right (Trac #757)""","b""_Original ticket http://projects.scipy.org/numpy/ticket/757 on 2008-04-25 by trac user jloper, assigned to unknown._\n\n- numpy.sort(numpy.array(['\\x01\\x00\\x02','\\x01\\x00\\x04','\\x01\\x00\\x02']))\n\narray(['\\x01\\x00\\x02', '\\x01\\x00\\x04', '\\x01\\x00\\x02'], dtype='|S3')\n\n- '\\x01\\x00\\x02'<'\\x01\\x00\\x04'\n\nTrue\n\n- '\\x01\\x00\\x02'>'\\x01\\x00\\x04'\nFalse\n\n... important because people are using a.view('S8') to run unique() across rows... """
1351,7726330,numpy-gitbot,numpy-gitbot,2012-10-19 19:26:43,2012-10-19 19:26:44,2012-10-19 19:26:44,closed,,1.1.0,1,11 - Bug;component: Other;priority: high,https://api.github.com/repos/numpy/numpy/issues/1351,b'numpy.ma.morestats requires scipy (Trac #753)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/753 on 2008-04-23 by @rkern, assigned to @pierregm._\n\nThis code needs to be removed before 1.1.0 is released. Although the module itself is optional, the test suite picks it up and causes errors for people without scipy.'"
1350,7726324,numpy-gitbot,charris,2012-10-19 19:26:36,2014-02-18 13:58:05,2014-02-18 13:58:05,closed,,,22,11 - Bug;component: numpy.distutils;Patch;priority: low,https://api.github.com/repos/numpy/numpy/issues/1350,b'Order of compilation of fortran 90 modules (Trac #752)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/752 on 2008-04-22 by @huard, assigned to @pearu._\n\nWhen compiling a fortran 90 extension using disutils, the build process sometimes fails because the dependence between modules seems to be ignored. That is, if one module uses another module, there seems to be no guarantee the latter will be compiled first. '"
1349,7726322,numpy-gitbot,numpy-gitbot,2012-10-19 19:26:31,2012-10-19 19:26:34,2012-10-19 19:26:34,closed,,1.1.0,10,11 - Bug;component: numpy.distutils;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1349,b'distutils does not seem to handle the ALL section in site.cfg (Trac #751)',"b""_Original ticket http://projects.scipy.org/numpy/ticket/751 on 2008-04-22 by @cournape, assigned to @cournape._\n\nI can't make numpy.distutils use my custom paths set in site.cfg if set in the ALL section. If I use the [DEFAULT] section, it does work. It seems something was not set up correctly when the default section name was changed."""
1348,7726321,numpy-gitbot,numpy-gitbot,2012-10-19 19:26:29,2012-10-19 19:26:30,2012-10-19 19:26:30,closed,,1.2.0,4,11 - Bug;component: Other;priority: high,https://api.github.com/repos/numpy/numpy/issues/1348,b'Swig interface - Bug in FORTRAN-ordering support (Trac #750)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/750 on 2008-04-22 by trac user kishorg, assigned to unknown._\n\nI am applying following typemap for passing address of a Fortran style Numpy matrix to C++ function using Swig.  \n\n%apply (double* IN_FARRAY2, int DIM1,int DIM2) {(double *ptr_in, index_t n_rows_in, index_t n_cols_in)};\n\nI always get C-style ordered array in my C++ code with a new copy of Numpy matrix. \n\nThe problem is typemap definition for IN_FARRAY2 in numpy.i at line number 713 calls function \n\narray = obj_to_array_contiguous_allow_conversion($input, DATA_TYPECODE, &is_new_object); \n\nwhich copies it into new C-Style array. If I replace this call with function\n\narray = obj_to_array_no_conversion($input, DATA_TYPECODE);\n\nthen it works correctly. This is a bug in Numpy.i and need to fix it.\n'"
1347,7726319,numpy-gitbot,numpy-gitbot,2012-10-19 19:26:27,2012-10-19 19:26:27,2012-10-19 19:26:27,closed,,1.1.0,1,11 - Bug;component: Other;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1347,b'incorrect behaviour when using mask to index masked array (Trac #749)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/749 on 2008-04-20 by trac user mattknox_ca, assigned to unknown._\n\nBelow is some code that illustrates the problem\n\n=========================================\n\nimport numpy as np\n\nfrom numpy import ma\n\n\na = ma.array([55])\n\na[0] = ma.masked\n\n\nb = ma.array([66])\n\nprint repr(a[a.mask])\n\nprint repr(b[a.mask])\n\n\n_idx = a.mask #.copy()\n\nprint repr(_idx)\n\n\na[_idx] = b[_idx]\n\n\n# a[0] is equal to 55 still, but should be 66\n\n\nprint repr(a)\n\nprint repr(b)\n\n=========================================\n\nIf you change the code such that _idx = a.mask.copy(), then it works\nas expected (ie. a[0] == 66)\n\nEven wierder is that if you explicitly pass mask=[True] when\nconstructing ""a"", and remove the\nline ""a[0] = ma.masked"", then it works without needing to copy the\nmask prior to indexing.\n\n'"
1346,7726314,numpy-gitbot,numpy-gitbot,2012-10-19 19:26:21,2012-10-19 19:26:25,2012-10-19 19:26:25,closed,,1.1.0,17,11 - Bug;component: numpy.fft;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1346,b'Ifft pads incorrectly (Trac #748)',"b""_Original ticket http://projects.scipy.org/numpy/ticket/748 on 2008-04-20 by @stefanv, assigned to unknown._\n\nIfft should pad with zeros in the middle of the input, not at the end.\n\n\n\n    import numpy as np\n    from matplotlib import pylab as pp\n    from math import *\n    \n    def pad(x,n,centre=False):\n        if not centre:\n            return np.hstack((x,np.zeros(n)))\n        else:\n            return np.hstack((x[:len(x)/2],np.zeros(n),x[len(x)/2:]))\n    \n    p = pp.hamming(10)\n    Fp = np.fft.fft(p,n=2**10)\n    p1 = np.fft.ifft(Fp)\n    p2=np.fft.ifft(Fp,n=2**12)\n    p3=np.fft.ifft(pad(Fp, 2**12, centre=True))\n    \n    \n    pp.subplot(311)\n    pp.title('Input')\n    pp.plot(p)\n    \n    pp.subplot(312)\n    pp.title('ifft padding')\n    pp.plot(p2[:45])\n    \n    pp.subplot(313)\n    pp.title('Correct ifft padding')\n    pp.plot(p3[:45])\n    \n    pp.show()\n\n"""
1345,7726312,numpy-gitbot,numpy-gitbot,2012-10-19 19:26:18,2012-10-19 19:26:19,2012-10-19 19:26:19,closed,,1.1.0,3,11 - Bug;component: numpy.core;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1345,b'Reference counting bug in call to ufunc object loops. (Trac #747)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/747 on 2008-04-20 by @charris, assigned to unknown._\n\nThe following code tests out fine if I comment out the Py_XDECREF.\n\n\n\n\n    static void\n    PyUFunc_O_O_method(char **args, intp *dimensions, intp *steps, void *func)\n    {\n        intp n = dimensions[0];\n        intp is1 = steps[0];\n        intp is2 = steps[1];\n        char *ip1 = args[0];\n        char *op = args[1];\n        char *meth = (char *)func;\n        intp i;\n    \n        for(i = 0; i < n; i++, ip1 += is1, op += is2) {\n            PyObject *in1 = *(PyObject **)ip1;\n            PyObject **out = (PyObject **)op;\n            PyObject *ret = PyObject_CallMethod(in1, meth, NULL);\n    \n            if (ret == NULL) {\n                return;\n            }\n            Py_XDECREF(*out);\n            *out = ret;\n        }\n    }\n    \n\n\n\n '"
1344,7726310,numpy-gitbot,numpy-gitbot,2012-10-19 19:26:16,2012-10-23 02:38:20,2012-10-19 19:26:17,closed,,1.1.0,1,11 - Bug;component: numpy.core;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1344,b'Segfault calling logical_not on own object (Trac #746)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/746 on 2008-04-19 by @charris, assigned to unknown._\n\nThe following causes a segfault:\n\n\n\n\n            class foo :\n                def logical_not(self) :\n                    return np.bool_(1)\n                def logical_and(self, obj) :\n                    return np.bool_(1)\n     \n            # check unary PyUFunc_O_O_method\n            msg = ""PyUFunc_O_O_method""\n            x = np.zeros(10, dtype=np.object)[0::2]\n            x[...] = foo()\n            assert np.all(np.logical_not(x) == True), msg\n    \n\n\n'"
1343,7726309,numpy-gitbot,numpy-gitbot,2012-10-19 19:26:13,2012-10-19 19:26:15,2012-10-19 19:26:15,closed,,,4,11 - Bug;component: numpy.testing;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1343,b'assert_almost_equal fails for object arrays. (Trac #745)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/745 on 2008-04-19 by @charris, assigned to @cournape._\n\nThis traceback refers to a test function that isn\'t yet committed.\n\n\n\n    ERROR: Test generic loops.\n    ----------------------------------------------------------------------\n    Traceback (most recent call last):\n      File ""/usr/lib/python2.5/site-packages/numpy/core/tests/test_ufunc.py"", line 120, in check_generic_loops\n        assert_almost_equal(np.abs(x), 1, err_msg=msg)\n      File ""/usr/lib/python2.5/site-packages/numpy/testing/utils.py"", line 156, in assert_almost_equal\n        return assert_array_almost_equal(actual, desired, decimal, err_msg)\n      File ""/usr/lib/python2.5/site-packages/numpy/testing/utils.py"", line 255, in assert_array_almost_equal\n        header=\'Arrays are not almost equal\')\n      File ""/usr/lib/python2.5/site-packages/numpy/testing/utils.py"", line 225, in assert_array_compare\n        val = comparison(x,y)\n      File ""/usr/lib/python2.5/site-packages/numpy/testing/utils.py"", line 253, in compare\n        return around(abs(x-y),decimal) <= 10.0**(-decimal)\n      File ""/usr/lib/python2.5/site-packages/numpy/core/fromnumeric.py"", line 1516, in around\n        return round(decimals, out)\n    AttributeError: \'float\' object has no attribute \'rint\'\n    \n\n\n'"
1342,7726307,numpy-gitbot,numpy-gitbot,2012-10-19 19:26:09,2012-10-19 19:26:10,2012-10-19 19:26:10,closed,,1.1.0,3,11 - Bug;component: Other;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1342,"b'Loss of dimension bug in numpy.ma.__getitem__ for arrays of shape (n, 1) or (1, n) or (n, 1, 1, ...) (Trac #744)'","b'_Original ticket http://projects.scipy.org/numpy/ticket/744 on 2008-04-19 by trac user dharland, assigned to @pierregm._\n\nThere is a bug in MaskedArray.__getitem__ that causes a loss in dimension for masked arrays of shape (n, 1) or (1, n) or more generally, any shape of the form (1,)*a + (n,) + (1,)*b\n\nHeres an example\n\n\n\n      # A 2d column vector\n      x = ma.arange(5).reshape( (-1, 1) )\n    \n      # mask a point\n      x[3] = ma.masked\n    \n      # Different behavior for unmasked and masked items\n      print x[0], x[0].shape\n      print x[3], x[3].shape\n\n\n\nthis produces as output\n\n\n\n      [0] (1,)    # Correct\n      -- ()       # This should be [--]\n\n\n\nAs a result code cannot reliably iterate over rows of a 2d array (in case its in fact a (n,1) array)\n\nThe error appears in the following code snippet in numpy/core/ma.py:\n\n\n            mi = m[i]\n            if mi.size == 1:    # <-- Should this be if mi.size == 1 and mi.ndim == 0\n                if mi:\n                    return masked    # <-- dimension loss here if mi.ndim > 0\n                else:\n                    return dout\n\n\n\n'"
1341,7726305,numpy-gitbot,numpy-gitbot,2012-10-19 19:26:07,2012-10-19 19:26:08,2012-10-19 19:26:08,closed,,1.1.0,2,11 - Bug;component: Other;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1341,b'Array content zeroed by |= even though exception raised (Trac #743)',"b""_Original ticket http://projects.scipy.org/numpy/ticket/743 on 2008-04-18 by @charris, assigned to unknown._\n\nThis bug is also dependent on the array size:\n\n\n\n\n    In [9]: a = ones((10000,))\n    \n    In [10]: a |= a\n    ---------------------------------------------------------------------------\n    TypeError                                 Traceback (most recent call last)\n    \n    /home/charris/<ipython console> in <module>()\n    \n    TypeError: unsupported operand type(s) for |: 'float' and 'float'\n    \n    In [11]: a\n    Out[11]: array([ 0.,  0.,  0., ...,  0.,  0.,  0.])\n    \n    In [14]: a = ones((9999,))\n    \n    In [15]: a |= a\n    ---------------------------------------------------------------------------\n    TypeError                                 Traceback (most recent call last)\n    \n    /home/charris/<ipython console> in <module>()\n    \n    TypeError: unsupported operand type(s) for |: 'float' and 'float'\n    \n    In [16]: a\n    Out[16]: array([ 1.,  1.,  1., ...,  1.,  1.,  1.])\n    \n\n\n"""
1340,7726303,numpy-gitbot,numpy-gitbot,2012-10-19 19:26:05,2012-10-19 19:26:05,2012-10-19 19:26:05,closed,,1.1.0,1,11 - Bug;component: numpy.lib;priority: high,https://api.github.com/repos/numpy/numpy/issues/1340,"b""Don't require bz2 or gzip (Trac #742)""","b'_Original ticket http://projects.scipy.org/numpy/ticket/742 on 2008-04-17 by @rkern, assigned to @rkern._\n\nThe gzip and bz2 modules are optional components of the standard library and may not be built on some platforms.'"
1338,7726297,numpy-gitbot,charris,2012-10-19 19:25:57,2014-02-20 00:06:33,2014-02-20 00:06:33,closed,,,7,11 - Bug;component: numpy.distutils;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1338,"b'numpy setup.py too restrictive, prevents use of fblas with cblas (Trac #740)'","b""_Original ticket http://projects.scipy.org/numpy/ticket/740 on 2008-04-17 by trac user gnurser, assigned to @cournape._\n\nFor blas/atlas etc in numpy & scipy on an opteron I use the AMD libraries (which only have fblas) from http://developer.amd.com together with cblas from  http://www.netlib.org/blas/blast-forum/cblas.tgz. This works very well, since the AMD libraries are well optimized.\n\nDetails of how I did it are in the attached file acml2.log\n\nHowever numpy from current SVN will not build linked to these libraries.\nThe problem is that SVN (v4779) in line 295-296 of numpy/core/setup.py  has:\n\n           if ('NO_ATLAS_INFO',1) in blas_info.get('define_macros',[]):\n               return None # dotblas needs ATLAS, Fortran compiled\nblas will not be sufficient\n\n'NO_ATLAS_INFO' is set, and so dotblas is not created.\n\nTo get my AMD fblas/cblas approach to work, I have to comment out\nthese two lines.\n\n"""
1336,7726292,numpy-gitbot,numpy-gitbot,2012-10-19 19:25:53,2012-10-19 19:25:54,2012-10-19 19:25:54,closed,,1.1.0,2,11 - Bug;component: Other;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1336,b'Test trying to write file in wrong location (Trac #738)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/738 on 2008-04-14 by @cournape, assigned to unknown._\n\nOn vista, this causes an error:\n\nERROR: test_ValidHTTP (numpy.lib.tests.test__datasource.TestDataSourceOpen)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File ""C:\\Program\nFiles\\Python25\\lib\\site-packages\\numpy\\lib\\tests\\test__datasource.py"",\nline 79, in test_ValidHTTP\n    assert self.ds.open(valid_httpurl())\n  File ""C:\\Program\nFiles\\Python25\\lib\\site-packages\\numpy\\lib\\_datasource.py"", line 366,\nin open\n    found = self._findfile(path)\n  File ""C:\\Program\nFiles\\Python25\\lib\\site-packages\\numpy\\lib\\_datasource.py"", line 243,\nin _findfile\n    name = self._cache(name)\n  File ""C:\\Program\nFiles\\Python25\\lib\\site-packages\\numpy\\lib\\_datasource.py"", line 203,\nin _cache\n    file(upath, \'w\').write(openedurl.read())\nIOError: [Errno 13] Permission denied: \'/index.html\'\n\n----------------------------------------------------------------------\n\nXp does not complain, but that just should not happen'"
1335,7726290,numpy-gitbot,numpy-gitbot,2012-10-19 19:25:51,2012-10-19 19:25:52,2012-10-19 19:25:52,closed,,1.1.0,0,11 - Bug;component: Other;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1335,b'String to integer conversion inconsistent. (Trac #737)',"b""_Original ticket http://projects.scipy.org/numpy/ticket/737 on 2008-04-13 by @charris, assigned to unknown._\n\nTo wit:\n\n\n\n\n    In [1]: int8('12')\n    Out[1]: array([1, 2], dtype=int8)\n    \n    In [2]: int32('12')\n    Out[2]: 12\n\n\n\n\nI suspect int32 behaves differently because it is a subtype of the python integer and so behaves as (I) would expect. If int32 is indeed a subtype of the python int I think that is also an error as Python ints are longs.\n\n\n"""
1334,7726287,numpy-gitbot,numpy-gitbot,2012-10-19 19:25:47,2012-10-23 02:38:19,2012-10-19 19:25:50,closed,,1.1.0,9,11 - Bug;component: Other;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1334,b'Inconsistent integer conversion from strings (Trac #736)',"b""_Original ticket http://projects.scipy.org/numpy/ticket/736 on 2008-04-12 by @stefanv, assigned to @teoliphant._\n\nPauli Virtanen noticed the following behaviour (mentioned as part of #1317 discussion):\n\n\n\n    In [8]: np.array([('123',), ('456',)], dtype=[('num', '<i8')])\n    Out[8]: \n    array([(123L,), (456L,)], \n          dtype=[('num', '<i8')])\n\n\n\nvs.\n\n\n\n    In [9]: np.array([('123',), ('456',)], dtype=[('num', '<i4')])\n    \n    TypeError: expected a readable buffer object\n\n\n\nI believe this is related to the following inconsistent integer-from-string conversions:\n\n\n\n    In [27]: np.int32('12')\n    Out[27]: 12\n    \n    In [28]: np.int64('12')\n    Out[28]: array([1, 2], dtype=int64)\n\n\n\n"""
1333,7726285,numpy-gitbot,numpy-gitbot,2012-10-19 19:25:45,2012-10-19 19:25:46,2012-10-19 19:25:46,closed,,1.1.0,1,11 - Bug;component: numpy.core;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1333,b'FAIL: test_record (numpy.lib.tests.test_io.Testloadtxt) -- On Solaris 10 (Trac #735)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/735 on 2008-04-12 by @chanley, assigned to unknown._\n\nThe following test case fails on Solaris 10 with 1.0.5.dev5024\n\n\n\n    ======================================================================\n    FAIL: test_record (numpy.lib.tests.test_io.Testloadtxt)\n    ----------------------------------------------------------------------\n    Traceback (most recent call last):\n      File ""/data/basil5/site-packages/lib/python/numpy/lib/tests/test_io.py"", line \n    42, in test_record\n        assert_array_equal(x, a)\n      File ""numpy/testing/utils.py"", line 248, in assert_array_equal\n      File ""numpy/testing/utils.py"", line 240, in assert_array_compare\n    AssertionError: \n    Arrays are not equal\n    \n    (mismatch 100.0%)\n     x: array([(1, 2), (3, 4)], \n          dtype=[(\'x\', \'>i4\'), (\'y\', \'>i4\')])\n     y: array([(1, 2), (3, 4)], \n          dtype=[(\'x\', \'<i4\'), (\'y\', \'<i4\')])\n    \n    ----------------------------------------------------------------------\n    Ran 895 tests in 9.468s\n    \n    FAILED (failures=1)\n    <unittest._TextTestResult run=895 errors=0 failures=1>\n    >>> numpy.__version__\n    \'1.0.5.dev5024\'\n\n'"
1331,7726278,numpy-gitbot,numpy-gitbot,2012-10-19 19:25:41,2012-10-19 19:25:42,2012-10-19 19:25:42,closed,,1.1.0,3,11 - Bug;component: Other;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1331,b'check_object_casting failing on Python 2.6 (Trac #733)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/733 on 2008-04-10 by @alberts, assigned to unknown._\n\nAs can be seen here:\n\nhttp://buildbot.scipy.org/builders/Linux_x86_Fedora_Py2.6/builds/332/steps/shell_2/logs/stdio\n\nthere is a test failure on Python 2.6:\n\n\n\n    ======================================================================\n    FAIL: check_object_casting (test_regression.TestRegression)\n    ----------------------------------------------------------------------\n    Traceback (most recent call last):\n      File ""/home/buildbot/numpy/b6/numpy-install/lib/python2.6/site-packages/numpy/core/tests/test_regression.py"", line 756, in check_object_casting\n        self.failUnlessRaises(TypeError,rs)\n    AssertionError: TypeError not raised\n\n\n\nIt would be worthwhile to investigate this, as this test failure happened for the first time relatively recently, which might mean the test is new or there is a problem with Python 2.6.'"
1330,7726276,numpy-gitbot,numpy-gitbot,2012-10-19 19:25:38,2012-10-19 19:25:39,2012-10-19 19:25:39,closed,,1.1.0,2,11 - Bug;component: numpy.core;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1330,b'error string on IndexError is wrong (Trac #732)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/732 on 2008-04-09 by @astraw, assigned to unknown._\n\nThe error string in the following is wrong.\n\n\n\n    >>> import numpy\n    >>> x=numpy.arange(10)\n    >>> x.shape=5,2\n    >>> x[5,1]\n    Traceback (most recent call last):\n      File ""<stdin>"", line 1, in <module>\n    IndexError: index (5) out of range (0<=index<=5) in dimension 0\n\n\n\nThe final ""<="" should be ""<"".\nThe attached patch fixes the issue.'"
1329,7726272,numpy-gitbot,numpy-gitbot,2012-10-19 19:25:36,2012-10-19 19:25:37,2012-10-19 19:25:37,closed,,1.1.0,4,11 - Bug;component: Other;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1329,"b""numpy.linalg.eigvals can't take nested lists while numpy.linalg.eig can (Trac #731)""","b'_Original ticket http://projects.scipy.org/numpy/ticket/731 on 2008-04-09 by trac user nmb, assigned to @charris._\n\nI was a bit surprised by the following this afternoon:\n\n\n\n    >>> import numpy\n    >>> numpy.linalg.eig([[1,2],[3,4]])\n    (array([-0.37228132,  5.37228132]), array([[-0.82456484, -0.41597356],\n           [ 0.56576746, -0.90937671]]))\n    >>> numpy.linalg.eigvals([[1,2],[3,4]])\n    Traceback (most recent call last):\n      File ""<stdin>"", line 1, in <module>\n      File ""/Library/Frameworks/Python.framework/Versions/2.5/lib/python2.5/site-packages/numpy/linalg/linalg.py"", line 548, in eigvals\n        _assertRank2(a)\n      File ""/Library/Frameworks/Python.framework/Versions/2.5/lib/python2.5/site-packages/numpy/linalg/linalg.py"", line 120, in _assertRank2\n        if len(a.shape) != 2:\n    AttributeError: \'list\' object has no attribute \'shape\'\n    >>> \n\n\n\nThe attached patch solves the problem for all of the functions in linalg and adds tests to that effect.'"
1328,7726271,numpy-gitbot,numpy-gitbot,2012-10-19 19:25:33,2012-10-19 19:25:35,2012-10-19 19:25:35,closed,,1.2.0,4,11 - Bug;component: Other;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1328,b'long doubles display differently than the other float types (Trac #730)',"b""_Original ticket http://projects.scipy.org/numpy/ticket/730 on 2008-04-09 by @charris, assigned to @charris._\n\n\n\n\n    In [6]: single('1.234')\n    Out[6]: 1.234\n    \n    In [7]: double('1.234')\n    Out[7]: 1.234\n    \n    In [8]: longdouble('1.234')\n    Out[8]: 1.233999999999999985789\n    \n\n\n"""
1326,7726268,numpy-gitbot,numpy-gitbot,2012-10-19 19:25:27,2012-10-19 19:25:30,2012-10-19 19:25:30,closed,,1.6.0,8,11 - Bug;component: numpy.core;priority: high,https://api.github.com/repos/numpy/numpy/issues/1326,b'numpy.r_ incorrectly casts with mixed types (Trac #728)',"b""_Original ticket http://projects.scipy.org/numpy/ticket/728 on 2008-04-09 by @bsouthey, assigned to unknown._\n\nNumpy.r_ appears to use the type of the array argument in determining the return types. So when arguments have mixed types, there can be a loss of precision:\n\nCorrect when all arguments have the same type:\n\n\n    import numpy\n    ra=numpy.r_[-10, numpy.array([2, 3, 4]), 10]\n    type(ra), type(ra[0]), type(ra[1])\n\n\nProvides: (<type 'numpy.ndarray'>, <type 'numpy.int64'>, <type 'numpy.int64'>)\n\n\nIt is also correct if at least one array has the 'correct' type:\n\n\n\n    ra=numpy.r_[-10.1, numpy.array([1]), numpy.array([2, 3, 4], dtype=float), 10]\n    type(ra), type(ra[0]), type(ra[1]), ra[0], ra[4]\n\n\nProvides: (<type 'numpy.ndarray'>, <type 'numpy.float64'>, <type 'numpy.float64'>, -10.1, 4.0)\n\nBut if mixed types are used:\n\n\n\n    import numpy\n    ra=numpy.r_[-10.1, numpy.array([2, 3, 4]), 10.0]\n    type(ra), type(ra[0]), type(ra[1]), ra[0], ra[4]\n\n\n\nProvides: (<type 'numpy.ndarray'>, <type 'numpy.int64'>, <type 'numpy.int64'>, -10, 10)[[BR]]\n\nSo the float has been down cast to a integer so 10.1 becomes 10.\n\nThe workaround is to ensure that all numpy arrays have the same type as required:\n\n\n\n    import numpy\n    ra=numpy.r_[-10.1, numpy.array([2, 3, 4], dtype=float), 10]\n    type(ra), type(ra[0]), type(ra[1]), ra[0], ra[4]\n\n\nProvides: \n(<type 'numpy.ndarray'>, <type 'numpy.float64'>, <type 'numpy.float64'>, -10.1, 10.0)\n\n"""
1324,7726264,numpy-gitbot,numpy-gitbot,2012-10-19 19:25:21,2012-10-19 19:25:22,2012-10-19 19:25:22,closed,,1.1.0,1,11 - Bug;component: numpy.testing;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1324,"b""r4980 doesn't test assert_ functions with nan arrays (Trac #726)""","b'_Original ticket http://projects.scipy.org/numpy/ticket/726 on 2008-04-08 by @pv, assigned to unknown._\n\nr4980 added a test to numpy/testing/tests/test_utils.py\n\n\n    47          def test_nan_array(self):\n    48 \t        """"""Test two arrays with different shapes are found not equal.""""""\n    49 \t        a = N.array([1, 2])\n    50 \t        b = N.array([[1, 2], [1, 2]])\n    51 \t\n    52 \t        self._test_not_equal(a, b)\n\n\nThis is repetition of the previous test_array_diffshape and does not actually test the functions for nans. (Small thing, but let\'s file a ticket nonetheless.)\n'"
1321,7726256,numpy-gitbot,numpy-gitbot,2012-10-19 19:25:12,2012-10-23 02:38:19,2012-10-19 19:25:15,closed,,1.1.0,5,11 - Bug;component: numpy.distutils;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1321,b'gfortran installed in Program Files is not found (Trac #723)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/723 on 2008-04-06 by @pearu, assigned to @pearu._\n\nThe issue was reported here:\nhttp://cens.ioc.ee/pipermail/f2py-users/2008-April/001577.html'"
1319,7726251,numpy-gitbot,numpy-gitbot,2012-10-19 19:25:03,2012-10-19 19:25:08,2012-10-19 19:25:08,closed,,1.6.0,8,11 - Bug;component: numpy.core;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1319,b'0-dimensional boolean arrays should work as masks for array scalars (Trac #721)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/721 on 2008-04-05 by @stefanv, assigned to @teoliphant._\n\nAccording to the changelog of 4822.'"
1317,7726246,numpy-gitbot,numpy-gitbot,2012-10-19 19:24:58,2012-10-23 02:38:15,2012-10-19 19:25:00,closed,,1.1.0,7,11 - Bug;component: Other;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1317,"b""No test for 'fromregex' in r4960 (Trac #719)""","b""_Original ticket http://projects.scipy.org/numpy/ticket/719 on 2008-04-05 by @stefanv, assigned to @teoliphant._\n\nNo test for 'fromregex' in r4960.  Blocks release of 1.0.5."""
1314,7726242,numpy-gitbot,numpy-gitbot,2012-10-19 19:24:47,2012-10-19 19:24:48,2012-10-19 19:24:48,closed,,1.1.0,1,11 - Bug;component: Other;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1314,"b'Inconsistent behavior, i686 vs x86_64 (Trac #716)'","b""_Original ticket http://projects.scipy.org/numpy/ticket/716 on 2008-04-02 by trac user jamie@..., assigned to unknown._\n\nGentoo, numpy-1.0.4-r2.\n\nPossible related to http://scipy.org/scipy/numpy/ticket/669\n\nSimple example,\n\n\n    [either i686 or x86_64]\n    >>> numpy.uint64(418465321) / 8928000\n    46.871115703405017\n    >>> numpy.uint32(418465321) / 8928000\n    46\n\n\n\nExample that actually bit me,\n\n\n    [i686]\n    >>> A = numpy.array([1, 2, 3, 4], numpy.uint8)\n    >>> B = numpy.array([2, 4, 6, 8], numpy.uint8)\n    >>> C = B - A\n    >>> S = C.sum()\n    >>> type(S)\n    <type 'numpy.uint32'>\n    >>> L = len(C)\n    >>> type(L)\n    <type 'int'>\n    >>> S/L\n    2\n    \n    [x86_64]\n    >>> A = numpy.array([1, 2, 3, 4], numpy.uint8)\n    >>> B = numpy.array([2, 4, 6, 8], numpy.uint8)\n    >>> C = B - A\n    >>> S = C.sum()\n    >>> type(S)\n    <type 'numpy.uint64'>\n    >>> type(L)\n    <type 'int'>\n    >>> S/L\n    2.5\n\n\n\nComments:\n\n1) numpy.uint64 / int -> float\n   numpy.uint32 / int -> int\n\n   It seems like these should at least evaluate to the same type.\n\n2) Should .sum() return a numpy.uint64, even on 32-bit platforms,\n   for the sake of consistency?\n"""
1313,7726240,numpy-gitbot,numpy-gitbot,2012-10-19 19:24:45,2012-10-19 19:24:46,2012-10-19 19:24:46,closed,,1.1.0,2,11 - Bug;component: numpy.distutils;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1313,b'The interactive mode of setup.py incorrect lower-cases prefix settings (Trac #715)',"b""_Original ticket http://projects.scipy.org/numpy/ticket/715 on 2008-04-01 by @rkern, assigned to @pearu._\n\nThe menu system automatically lower-cases inputs. On case-sensitive file systems, this means that the path set for the prefix is also lower-cased.\n\nI would prefer simply to remove the interactive setup. It will always be a non-standard method of installation, and I don't see evidence of people using it except for people who have problems with it."""
1312,7726238,numpy-gitbot,numpy-gitbot,2012-10-19 19:24:42,2012-10-19 19:24:43,2012-10-19 19:24:43,closed,,,2,11 - Bug;component: numpy.core;priority: high,https://api.github.com/repos/numpy/numpy/issues/1312,b'segfault when using 0-d array as index (Trac #714)',"b""_Original ticket http://projects.scipy.org/numpy/ticket/714 on 2008-04-01 by trac user gabriel, assigned to unknown._\n\nIn [1]: import numpy\n\nIn [2]: numpy.__version__\n\nOut[2]: '1.0.4'\n\nIn [3]: numpy.zeros(10)[numpy.array(0)]\n\nSegmentation fault (core dumped)\n\nI work with Linux, pentium 4 machine. But another pc in the lab with windows had the same problem. Best, Gabriel\n\n\n"""
1311,7726235,numpy-gitbot,numpy-gitbot,2012-10-19 19:24:40,2012-10-19 19:24:40,2012-10-19 19:24:40,closed,,1.1.0,1,11 - Bug;component: numpy.core;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1311,b'numpy.any segfaults for object arrays with >=10000 elements (Trac #713)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/713 on 2008-03-25 by trac user mmanns, assigned to unknown._\n\nThe numpy.any function segfaults for object arrays with >=10000 elements.\n2-dimensional arrays of the respective size also crash.\nThe type of object in the array does not seem to influence the problem.\n\n>  $ python\n>  Python 2.5.1 (r251:54863, Jan 26 2008, 01:34:00)\n>  [GCC 4.1.2 (Gentoo 4.1.2)] on linux2\n>  Type ""help"", ""copyright"", ""credits"" or ""license"" for more information.\n>  >>> import numpy\n\n>  >>> numpy.version.version\n\n>  \'1.0.4\'\n\n>  >>> numpy.version.release\n\n>  True\n\n>  >>> small_zero = [0] * 9999\n\n>  >>> large_zero = [0] * 10000\n\n>  >>> small_none = [None] * 9999\n\n>  >>> large_none = [None] * 10000\n\n>  >>> any(small_zero)\n\n>  False\n\n>  >>> any(large_zero)\n\n>  False\n\n>  >>> any(small_none)\n\n>  False\n\n>  >>> any(large_none)\n\n>  False\n\n>  >>> any(numpy.array(small_zero))\n\n>  False\n\n>  >>> any(numpy.array(large_zero))\n\n>  False\n\n>  >>> any(numpy.array(small_none))\n\n>  False\n\n>  >>> any(numpy.array(large_none))\n\n>  False\n\n>  >>> numpy.any(numpy.array(small_zero))\n\n>  False\n\n>  >>> numpy.any(numpy.array(large_zero))\n\n>  False\n\n>  >>> numpy.any(numpy.array(small_none))\n\n>  False\n\n>  >>> numpy.any(numpy.array(large_none))\n\n>  Segmentation fault'"
1310,7726234,numpy-gitbot,numpy-gitbot,2012-10-19 19:24:37,2012-10-23 02:38:10,2012-10-19 19:24:38,closed,,1.1.0,1,11 - Bug;component: numpy.core;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1310,b'scalar math test failure on solaris (Trac #712)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/712 on 2008-03-23 by @cournape, assigned to unknown._\n\nSee #1252. I think the error is in the test, but someone who knows about this part of numpy should look at it more carefully.'"
1309,7726232,numpy-gitbot,numpy-gitbot,2012-10-19 19:24:35,2012-10-19 19:24:36,2012-10-19 19:24:36,closed,,1.1.0,2,11 - Bug;component: numpy.core;priority: highest,https://api.github.com/repos/numpy/numpy/issues/1309,b'object array refcount bug (Trac #711)',"b""_Original ticket http://projects.scipy.org/numpy/ticket/711 on 2008-03-21 by @pv, assigned to unknown._\n\nIn r4906 there is another object array refcount bug:\n\n\n    >>> import numpy as np\n    >>> a = object()\n    >>> m = np.zeros(5, dtype=np.object_)\n    >>> m[:] = a\n    >>> del a\n    >>> m[:] = m\n    >>> m[:] = m\n    Segmentation fault\n\n\nThis occurs because in the object array copy pattern in r4906, all elements of m[:] are DECREF'd on slice assignment before copying, and the refcount of 'a' so hits zero before the copy is done.\n"""
1308,7726227,numpy-gitbot,numpy-gitbot,2012-10-19 19:24:31,2012-10-19 19:24:33,2012-10-19 19:24:33,closed,,1.1.0,4,11 - Bug;component: Other;priority: highest,https://api.github.com/repos/numpy/numpy/issues/1308,"b'Reference count error, in array_reshape? (Trac #710)'","b""_Original ticket http://projects.scipy.org/numpy/ticket/710 on 2008-03-21 by @matthew-brett, assigned to unknown._\n\nIn some runs of numpy.test()\n\n*** Reference count error detected: \nan attempt was made to deallocate 17 (O) ***\n*** Reference count error detected: \nan attempt was made to deallocate 17 (O) ***\n*** Reference count error detected: \nan attempt was made to deallocate 17 (O) ***\n(etc)\n\nIn [2]: numpy.__version__\nOut[2]: '1.0.5.dev4899'\n\nLinux localhost 2.6.25-rc6_x61 #1 SMP Tue Mar 18 18:22:11 CET 2008 x86_64 Intel(R) Core(TM)2 Duo CPU     L7300  @ 1.40GHz GNU/Linux\n\nValgrind session excerpt:\n\nTicket #658==26607== \n==26607== Conditional jump or move depends on uninitialised value(s)\n==26607==    at 0x659D56A: PyArray_UpdateFlags (arrayobject.c:5043)\n==26607==    by 0x65CBC54: PyArray_Newshape (multiarraymodule.c:742)\n==26607==    by 0x65CC2A3: array_reshape (arraymethods.c:87)\n==26607==    by 0x51D626D: PyEval_EvalFrameEx (in /usr/lib64/libpython2.5.so.1.0)\n==26607==    by 0x51D83F7: PyEval_EvalCodeEx (in /usr/lib64/libpython2.5.so.1.0)\n==26607==    by 0x51D67CC: PyEval_EvalFrameEx (in /usr/lib64/libpython2.5.so.1.0)\n==26607==    by 0x51D83F7: PyEval_EvalCodeEx (in /usr/lib64/libpython2.5.so.1.0)\n==26607==    by 0x517F780: (within /usr/lib64/libpython2.5.so.1.0)\n==26607==    by 0x51633C2: PyObject_Call (in /usr/lib64/libpython2.5.so.1.0)\n==26607==    by 0x51D504A: PyEval_EvalFrameEx (in /usr/lib64/libpython2.5.so.1.0)\n ... ok\n"""
1306,7726222,numpy-gitbot,numpy-gitbot,2012-10-19 19:24:24,2012-10-19 19:24:27,2012-10-19 19:24:27,closed,,1.1.0,7,11 - Bug;component: numpy.distutils;priority: highest,https://api.github.com/repos/numpy/numpy/issues/1306,b'Setuptools call to numpy trunk causes numpy.scons error (Trac #708)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/708 on 2008-03-20 by @matthew-brett, assigned to @cournape._\n\nI am trying to install some packages using setuptools - in fact from enthought, and I get a traceback into numpy distutils, ending with:\n\n\n\n    [mb312@localhost ~]$ easy_install -f http://code.enthought.com/enstaller/eggs/source enthought.tvtk\n    Searching for enthought.tvtk\n    Reading http://code.enthought.com/enstaller/eggs/source\n    Best match: enthought.tvtk 2.0.2\n    Downloading http://code.enthought.com/enstaller/eggs/source/enthought.tvtk-2.0.2.tar.gz\n    Processing enthought.tvtk-2.0.2.tar.gz\n    Running enthought.tvtk-2.0.2/setup.py -q bdist_egg --dist-dir /home/mb312/tmp/easy_install-pPImLs/enthought.tvtk-2.0.2/egg-dist-tmp-nDpb2A\n    Traceback (most recent call last):\n      File ""/usr/bin/easy_install"", line 8, in <module>\n        load_entry_point(\'setuptools==0.6c6\', \'console_scripts\', \'easy_install\')()\n      File ""/usr/lib/python2.5/site-packages/easy_install.py"", line 1670, in main\n        \n      File ""/usr/lib/python2.5/site-packages/easy_install.py"", line 1659, in with_ei_usage\n        \n      File ""/usr/lib/python2.5/site-packages/easy_install.py"", line 1674, in <lambda>\n        \n      File ""/usr/lib64/python2.5/distutils/core.py"", line 151, in setup\n        dist.run_commands()\n      File ""/usr/lib64/python2.5/distutils/dist.py"", line 974, in run_commands\n        self.run_command(cmd)\n      File ""/usr/lib64/python2.5/distutils/dist.py"", line 994, in run_command\n        cmd_obj.run()\n      File ""/usr/lib/python2.5/site-packages/easy_install.py"", line 211, in run\n        \n      File ""/usr/lib/python2.5/site-packages/easy_install.py"", line 446, in easy_install\n        \n      File ""/usr/lib/python2.5/site-packages/easy_install.py"", line 471, in install_item\n        \n      File ""/usr/lib/python2.5/site-packages/easy_install.py"", line 655, in install_eggs\n        \n      File ""/usr/lib/python2.5/site-packages/easy_install.py"", line 930, in build_and_install\n        \n      File ""/usr/lib/python2.5/site-packages/easy_install.py"", line 919, in run_setup\n        \n      File ""/home/mandrake/rpm/tmp//python-setuptools-root//usr/lib/python2.5/site-packages/setuptools/sandbox.py"", line 27, in run_setup\n      File ""/home/mandrake/rpm/tmp//python-setuptools-root//usr/lib/python2.5/site-packages/setuptools/sandbox.py"", line 63, in run\n      File ""/home/mandrake/rpm/tmp//python-setuptools-root//usr/lib/python2.5/site-packages/setuptools/sandbox.py"", line 29, in <lambda>\n      File ""setup.py"", line 70, in <module>\n      File ""setup.py"", line 16, in configuration\n      File ""/home/mb312/lib64/python2.5/site-packages/numpy/distutils/misc_util.py"", line 837, in add_subpackage\n        caller_level = 2)\n      File ""/home/mb312/lib64/python2.5/site-packages/numpy/distutils/misc_util.py"", line 820, in get_subpackage\n        caller_level = caller_level + 1)\n      File ""/home/mb312/lib64/python2.5/site-packages/numpy/distutils/misc_util.py"", line 767, in _get_configuration_from_setup_py\n        config = setup_module.configuration(*args)\n      File ""enthought/tvtk/setup.py"", line 18, in configuration\n      File ""/home/mb312/lib64/python2.5/site-packages/numpy/distutils/misc_util.py"", line 850, in add_subpackage\n        dist = self.get_distribution()\n      File ""/home/mb312/lib64/python2.5/site-packages/numpy/distutils/misc_util.py"", line 717, in get_distribution\n        return get_distribution()\n      File ""/home/mb312/lib64/python2.5/site-packages/numpy/distutils/core.py"", line 100, in get_distribution\n        raise NotImplementedError(""setuptools not supported yet for numpy.scons branch"")\n    NotImplementedError: setuptools not supported yet for numpy.scons branch\n\n'"
1305,7726215,numpy-gitbot,numpy-gitbot,2012-10-19 19:24:18,2012-10-19 19:24:23,2012-10-19 19:24:23,closed,,1.2.0,11,11 - Bug;component: numpy.core;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1305,b'numpy.array failes if the input is a list of matrixes (Trac #707)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/707 on 2008-03-19 by trac user markmat, assigned to unknown._\n\nnumpy.array failes if the input is a list of matrixes (with more then one column).\n\n\n    >>> import sys, numpy\n    >>> sys.version\n    \'2.5 (r25:51908, Sep 19 2006, 09:52:17) [MSC v.1310 32 bit (Intel)]\'\n    >>> numpy.version.version\n    \'1.0.4\'\n    >>> numpy.array([numpy.mat(\'1 0\')])\n    \n    Traceback (most recent call last):\n      File ""<pyshell#3>"", line 1, in <module>\n        numpy.array([numpy.mat(\'1 0\')])\n    ValueError: setting an array element with a sequence.\n    >>> numpy.array([numpy.mat(\'1; 0\')])\n    array([[[1],\n            [0]]])\n    \n\n\n'"
1304,7726214,numpy-gitbot,numpy-gitbot,2012-10-19 19:24:15,2012-10-19 19:24:16,2012-10-19 19:24:16,closed,,1.1.0,4,11 - Bug;component: numpy.linalg;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1304,b'[ numpy-Bugs-601052 ] SVD did not converge (Trac #706)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/706 on 2008-03-19 by trac user menscher, assigned to @stefanv._\n\nThis was reported (and supposedly fixed by dubois) in 2002, but the fix isn\'t in current code.  So reporting again....\n\nThe routine singular_value_decomposition() sometimes\ndies with the error ""SVD did not converge"".  But there is\n*always* (by definition) an SVD inverse, so this is not an\nacceptable error message.\n\nTracing things back, it comes from an max_iteration\ncount that is too small in the file dlapack_lite.c.  For the\nlatest version, it\'s on line 22562.  When I change the\nvalue from 20 to 50, my matrix can be inverted.  There\'s\nno reason to have this number so small, since it\'s really\njust there to prevent infinite loops.  I\'ve changed it (in my\ncopy) to 100, and recommend you do the same.\n\nI\'m attaching a pickle of a matrix I used for testing\npurposes.\n\nDamian'"
1303,7726209,numpy-gitbot,numpy-gitbot,2012-10-19 19:24:14,2012-10-19 19:24:14,2012-10-19 19:24:14,closed,,1.1.0,0,11 - Bug;component: Other;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1303,b'[ numpy-Bugs-601052 ] SVD did not converge (Trac #705)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/705 on 2008-03-19 by trac user menscher, assigned to unknown._\n\nThis was reported (and supposedly fixed by dubois) in 2002, but the fix isn\'t in current code.  So reporting again....\n\nThe routine singular_value_decomposition() sometimes\ndies with the error ""SVD did not converge"".  But there is\n*always* (by definition) an SVD inverse, so this is not an\nacceptable error message.\n\nTracing things back, it comes from an max_iteration\ncount that is too small in the file dlapack_lite.c.  For the\nlatest version, it\'s on line 22562.  When I change the\nvalue from 20 to 50, my matrix can be inverted.  There\'s\nno reason to have this number so small, since it\'s really\njust there to prevent infinite loops.  I\'ve changed it (in my\ncopy) to 100, and recommend you do the same.\n\nI\'m attaching a pickle of a matrix I used for testing\npurposes.\n\nDamian'"
1302,7726208,numpy-gitbot,numpy-gitbot,2012-10-19 19:24:11,2012-10-19 19:24:12,2012-10-19 19:24:12,closed,,1.1.0,2,11 - Bug;component: numpy.distutils;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1302,b'Building SciPy crashes if no FORTRAN compiler available (Trac #704)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/704 on 2008-03-18 by @jpaalasm, assigned to @dmcooke._\n\nBue to a faulty checking of self.fcompiler being None (self.compiler is checked instead), building scipy crashes when no fortran compiler if installed.\n\nOutput from running ""python2.5 setup.py build"" in SciPy\'s source directory:\n\n\n\n    don\'t know how to compile Fortran code on platform \'posix\'\n    Traceback (most recent call last):\n      File ""setup.py"", line 53, in <module>\n        setup_package()\n      File ""setup.py"", line 45, in setup_package\n        configuration=configuration )\n      File ""/usr/lib/python2.5/site-packages/numpy/distutils/core.py"", line 184, in setup\n        return old_setup(**new_attr)\n      File ""/usr/lib/python2.5/distutils/core.py"", line 151, in setup\n        dist.run_commands()\n      File ""/usr/lib/python2.5/distutils/dist.py"", line 974, in run_commands\n        self.run_command(cmd)\n      File ""/usr/lib/python2.5/distutils/dist.py"", line 994, in run_command\n        cmd_obj.run()\n      File ""/usr/lib/python2.5/site-packages/numpy/distutils/command/build.py"", line 40, in run\n        old_build.run(self)\n      File ""/usr/lib/python2.5/distutils/command/build.py"", line 112, in run\n        self.run_command(cmd_name)\n      File ""/usr/lib/python2.5/distutils/cmd.py"", line 333, in run_command\n        self.distribution.run_command(command)\n      File ""/usr/lib/python2.5/distutils/dist.py"", line 994, in run_command\n        cmd_obj.run()\n      File ""/usr/lib/python2.5/site-packages/numpy/distutils/command/build_clib.py"", line 83, in run\n        self.fcompiler.customize(self.distribution)\n    AttributeError: \'NoneType\' object has no attribute \'customize\'\n\n'"
1301,7726206,numpy-gitbot,numpy-gitbot,2012-10-19 19:24:08,2012-10-19 19:24:09,2012-10-19 19:24:09,closed,,1.1.0,1,11 - Bug;component: Other;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1301,b'ma.masked_where can make a defective array (Trac #703)',"b""_Original ticket http://projects.scipy.org/numpy/ticket/703 on 2008-03-17 by @efiring, assigned to unknown._\n\nAs illustrated below, masked_where can generate what appears at first to be a valid masked array, but which will later fail with an obscure-looking error.  The invalid condition argument needs to be trapped in masked_where, and an informative exception raised.\n\n\n    In [52]:x = [1,2]\n    \n    In [53]:y = ma.masked_where(False, x)\n    \n    In [54]:y\n    Out[54]:\n    masked_array(data = [1 2],\n           mask = False,\n           fill_value=999999)\n    \n    \n    In [55]:y[1]\n    ---------------------------------------------------------------------------\n    IndexError                                Traceback (most recent call last)\n    \n    /home/efiring/<ipython console> in <module>()\n    \n    /usr/local/lib/python2.5/site-packages/numpy/ma/core.pyc in \n    __getitem__(self, indx)\n        1307         if not getattr(dout,'ndim', False):\n        1308             # Just a scalar............\n    -> 1309             if m is not nomask and m[indx]:\n        1310                 return masked\n        1311         else:\n    \n    IndexError: 0-d arrays can't be indexed\n\n\n"""
1300,7726202,numpy-gitbot,numpy-gitbot,2012-10-19 19:24:06,2012-10-19 19:24:07,2012-10-19 19:24:07,closed,,1.1.0,4,11 - Bug;component: numpy.numarray;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1300,b'Memory leak in generic 1d array (Trac #702)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/702 on 2008-03-17 by trac user robertwb, assigned to unknown._\n\nThe following file illustrates the issue. It looks like the elements of the numpy array are not getting freed as they should. '"
1298,7726199,numpy-gitbot,numpy-gitbot,2012-10-19 19:24:00,2012-10-19 19:24:01,2012-10-19 19:24:01,closed,,1.1.0,2,11 - Bug;component: Other;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1298,"b'Test for mean fails, incorrect processing of weights (Trac #700)'","b'_Original ticket http://projects.scipy.org/numpy/ticket/700 on 2008-03-15 by @stefanv, assigned to @stefanv._\n\nDavid Huard added the following test which exposes some broken behaviour in mean:\n\n\n\n    ======================================================================\n    ERROR: check_shape (numpy.lib.tests.test_function_base.TestAverage)\n    ----------------------------------------------------------------------\n    Traceback (most recent call last):\n      File ""/home/stefan/Buildbot/slave/numpy/b1/numpy-install/lib/python2.5/site-packages/numpy/lib/tests/test_function_base.py"", line 77, in check_shape\n        assert_array_equal(average(y, weights=w1, axis=1), desired)\n      File ""../numpy-install/lib/python2.5/site-packages/numpy/lib/function_base.py"", line 383, in average\n    ValueError: axis not in array\n\n\n\nThis ticket blocks the release of numpy 1.0.5.\n'"
1297,7726197,numpy-gitbot,numpy-gitbot,2012-10-19 19:23:58,2012-10-19 19:23:59,2012-10-19 19:23:59,closed,,1.1.0,1,11 - Bug;component: Other;priority: low,https://api.github.com/repos/numpy/numpy/issues/1297,b'corrcoef incorrect behaviour (Trac #699)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/699 on 2008-03-15 by trac user kazboris021, assigned to unknown._\n\nIn [1]: import numpy as N\n\nIn [2]: N.corrcoef([0,0,0],[1,2,3])\n\nWarning: invalid value encountered in divide\n\nOut[2]: \n\narray([[ NaN,  NaN],\n       [ NaN,   1.]])\n\nIn [3]: numpy.corrcoef([0,0,0],[1,2,3])[0,0] is numpy.nan\n\nWarning: invalid value encountered in divide\n\nOut[3]: False __#Should be True I think__\n'"
1296,7726192,numpy-gitbot,numpy-gitbot,2012-10-19 19:23:54,2012-10-19 19:23:57,2012-10-19 19:23:57,closed,,1.2.0,11,11 - Bug;component: numpy.core;priority: high,https://api.github.com/repos/numpy/numpy/issues/1296,b'segfault float96 + None (Trac #698)',"b""_Original ticket http://projects.scipy.org/numpy/ticket/698 on 2008-03-14 by trac user gabriel, assigned to @stefanv._\n\nIf I (accidentally) try to add None to a float96, I get a segmentation fault instead of an error:\n\nIn [1]: import numpy\n\nIn [2]: numpy.__version__\nOut[2]: '1.0.4'\n\nIn [3]: numpy.float96(3.0) + None\nSegmentation fault (core dumped)\n\nUbuntu linux on a pentium 4. Numpy compiled from tarball.\n\nBest, Gabriel\n"""
1295,7726191,numpy-gitbot,numpy-gitbot,2012-10-19 19:23:52,2012-10-19 19:23:52,2012-10-19 19:23:52,closed,,1.1.0,1,11 - Bug;component: numpy.lib;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1295,b'ValueError: shape mismatch: objects cannot be broadcast to a single shape (Trac #697)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/697 on 2008-03-13 by @nilswagner01, assigned to @charris._\n\n\n\n\n    /usr/bin/python -i julien.py\n    Traceback (most recent call last):\n      File ""julien.py"", line 36, in ?\n        (ar,br) = numpy.polyfit(T,XXX,1)\n      File ""/usr/lib/python2.4/site-packages/numpy/lib/polynomial.py"", line 310, in polyfit\n        c /= vander([scale], order)[0]\n    ValueError: shape mismatch: objects cannot be broadcast to a single shape\n\n\n'"
1294,7726190,numpy-gitbot,numpy-gitbot,2012-10-19 19:23:49,2012-10-19 19:23:50,2012-10-19 19:23:50,closed,,1.1.0,3,11 - Bug;component: Other;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1294,b'No test for r4853 (Trac #696)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/696 on 2008-03-12 by @stefanv, assigned to @stefanv._\n\nNew ddof parameter should be tested.\n\nMarking as blocker for 1.0.5 since all new functionality should be tested before release.'"
1291,7726186,numpy-gitbot,numpy-gitbot,2012-10-19 19:23:41,2012-10-19 19:23:42,2012-10-19 19:23:42,closed,,1.1.0,3,11 - Bug;component: numpy.core;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1291,b'No test for r4826 (Trac #693)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/693 on 2008-03-12 by @stefanv, assigned to @stefanv._\n\nThis changeset implements printing of complicated dtypes, but no test has been submitted.\n\nMarking as a blocker, since 1.0.5 should not be released without testing all new functionality.'"
1290,7726184,numpy-gitbot,numpy-gitbot,2012-10-19 19:23:37,2012-10-19 19:23:40,2012-10-19 19:23:40,closed,,1.1.0,2,11 - Bug;component: numpy.core;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1290,b'No test for r4822 (Trac #692)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/692 on 2008-03-12 by @stefanv, assigned to @stefanv._\n\nChanges to C code without corresponding tests.\n\nMarking as blocker since we should test all new features before releasing 1.0.5.'"
1289,7726182,numpy-gitbot,numpy-gitbot,2012-10-19 19:23:35,2012-10-23 02:38:10,2012-10-19 19:23:36,closed,,1.1.0,2,11 - Bug;component: numpy.lib;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1289,b'No test for r4819 (Trac #691)',"b""_Original ticket http://projects.scipy.org/numpy/ticket/691 on 2008-03-12 by @stefanv, assigned to @stefanv._\n\nThe bug came in through the Debian bug-tracker, which means our test machinery didn't catch it.\n\nMarking as blocker since we shouldn't release 1.0.5 before testing added/fixed functionality."""
1288,7726181,numpy-gitbot,numpy-gitbot,2012-10-19 19:23:33,2012-10-19 19:23:34,2012-10-19 19:23:34,closed,,1.1.0,2,11 - Bug;component: Other;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1288,b'No test for r4806 (Trac #690)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/690 on 2008-03-12 by @stefanv, assigned to @stefanv._\n\nChangelog states:\n\n\n\n    For 4D samples, histogramdd returned badly shaped histograms once in a while. This should be fixed now.\n\n\n\nBut no test has been submitted.\n\nMarking as blocker since we cannot release 1.0.5 before testing added/fixed functionality.'"
1287,7726179,numpy-gitbot,numpy-gitbot,2012-10-19 19:23:31,2012-10-19 19:23:32,2012-10-19 19:23:32,closed,,1.1.0,0,11 - Bug;component: Other;priority: high,https://api.github.com/repos/numpy/numpy/issues/1287,b'SyntaxError while installing v1.0.5 on MacTel running OSX v10.4.11 (Trac #689)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/689 on 2008-03-11 by trac user msousa, assigned to unknown._\n\nbyte-compiling /System/Library/Frameworks/Python.framework/Versions/2.3/lib/python2.3/site-packages/numpy/ma/extras.py to extras.pyc\n  File ""/System/Library/Frameworks/Python.framework/Versions/2.3/lib/python2.3/site-packages/numpy/ma/extras.py"", line 759\n    tmp = numpy.fromiter((g[1] for g in group), int_)\n                                 ^\nSyntaxError: invalid syntax\n\n'"
1286,7726178,numpy-gitbot,numpy-gitbot,2012-10-19 19:23:29,2012-10-19 19:23:30,2012-10-19 19:23:30,closed,,1.1.0,1,11 - Bug;component: Other;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1286,b'Numpy and scipy should give informative error messages when run from source dir (Trac #688)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/688 on 2008-03-11 by @stefanv, assigned to @stefanv._\n\nCurrently, running numpy or scipy from the source dir causes:\n\n\n\n      Traceback (most recent call last):\n        File ""<stdin>"", line 1, in <module>\n        File ""scipy/__init__.py"", line 54, in <module>\n          from __config__ import show as show_config\n      ImportError: No module named __config__\n\n\n\nThis should be replaced by a proper error message.'"
1285,7726177,numpy-gitbot,numpy-gitbot,2012-10-19 19:23:27,2012-10-23 02:38:08,2012-10-19 19:23:28,closed,,1.1.0,2,11 - Bug;component: Other;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1285,"b""site.cfg: ConfigParser in Python 2.6 does not allow section 'DEFAULT' (Trac #687)""","b""_Original ticket http://projects.scipy.org/numpy/ticket/687 on 2008-03-11 by @stefanv, assigned to unknown._\n\nhttp://www.gossamer-threads.com/lists/python/checkins/624896\n\nAt the moment, we use the 'DEFAULT' section in site.cfg, which won't work under Python 2.6 any longer."""
1284,7726174,numpy-gitbot,numpy-gitbot,2012-10-19 19:23:24,2012-10-23 02:38:07,2012-10-19 19:23:26,closed,,1.1.0,6,11 - Bug;component: Other;priority: highest,https://api.github.com/repos/numpy/numpy/issues/1284,b'Intp takes 2 arguments on all platforms except Windows x86 64 MSVC (Trac #686)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/686 on 2008-03-11 by @stefanv, assigned to unknown._\n\n\n\n    ERROR: Ticket #99\n    ----------------------------------------------------------------------\n    Traceback (most recent call last):\n      File ""c:\\numpy-buildbot\\numpy\\b11\\install\\Lib\\site-packages\\numpy\\core\\tests\\test_regression.py"", line 197, in check_intp\n        np.intp(\'0x\' + \'f\'*i_width,16)\n    TypeError: function takes at most 1 argument (2 given)\n\n\n\nMarked as blocker before release of numpy 1.0.5.\n'"
1283,7726170,numpy-gitbot,numpy-gitbot,2012-10-19 19:23:22,2012-10-23 02:38:04,2012-10-19 19:23:23,closed,,1.1.0,1,11 - Bug;component: Other;priority: highest,https://api.github.com/repos/numpy/numpy/issues/1283,b'Intp takes 2 arguments on all platforms except Windows x86 64 MSVC (Trac #685)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/685 on 2008-03-11 by @stefanv, assigned to unknown._\n\n\n\n    ERROR: Ticket #99\n    ----------------------------------------------------------------------\n    Traceback (most recent call last):\n      File ""c:\\numpy-buildbot\\numpy\\b11\\install\\Lib\\site-packages\\numpy\\core\\tests\\test_regression.py"", line 197, in check_intp\n        np.intp(\'0x\' + \'f\'*i_width,16)\n    TypeError: function takes at most 1 argument (2 given)\n\n\n\nMarked as blocker before release of numpy 1.0.5.\n'"
1282,7726168,numpy-gitbot,numpy-gitbot,2012-10-19 19:23:20,2012-10-23 02:38:03,2012-10-19 19:23:20,closed,,1.1.0,1,11 - Bug;component: Other;priority: highest,https://api.github.com/repos/numpy/numpy/issues/1282,b'Intp takes 2 arguments on all platforms except Windows x86 64 MSVC (Trac #684)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/684 on 2008-03-11 by @stefanv, assigned to unknown._\n\n\n\n    ERROR: Ticket #99\n    ----------------------------------------------------------------------\n    Traceback (most recent call last):\n      File ""c:\\numpy-buildbot\\numpy\\b11\\install\\Lib\\site-packages\\numpy\\core\\tests\\test_regression.py"", line 197, in check_intp\n        np.intp(\'0x\' + \'f\'*i_width,16)\n    TypeError: function takes at most 1 argument (2 given)\n\n\n\nMarked as blocker before release of numpy 1.0.5.\n'"
1281,7726164,numpy-gitbot,numpy-gitbot,2012-10-19 19:23:18,2012-10-19 19:23:19,2012-10-19 19:23:19,closed,,1.1.0,1,11 - Bug;component: Other;priority: highest,https://api.github.com/repos/numpy/numpy/issues/1281,b'MyPyLong_AsUnsignedLongLong fails on 64bit *nix platforms (Trac #683)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/683 on 2008-03-11 by @jarrodmillman, assigned to @charris._\n\nThe buildbot for Linux_x86_64_Ubuntu and FreeBSD_x86_64 has the following error:\n\n\n    ======================================================================\n    ERROR: check_MyPyLong_AsUnsignedLongLong (test_regression.TestRegression)\n    ----------------------------------------------------------------------\n    Traceback (most recent call last):\n      File ""/home/stefan/Buildbot/slave/numpy/b1/numpy-install/lib/python2.5/site-packages/numpy/core/tests/test_regression.py"", line 806, in check_MyPyLong_AsUnsignedLongLong\n        assert_equal(np.uint64(-2), np.uint64(18446744073709551614))\n    OverflowError: long too big to convert\n\n\n\nI can verify this error on my 64bit Fedora 8 machine:\n\n\n    >>> numpy.uint64(-2)\n    18446744073709551614\n    >>> numpy.uint64(18446744073709551614)\n    Traceback (most recent call last):\n      File ""<stdin>"", line 1, in <module>\n    OverflowError: long too big to convert\n\n'"
1280,7726163,numpy-gitbot,numpy-gitbot,2012-10-19 19:23:16,2012-10-19 19:23:17,2012-10-19 19:23:17,closed,,1.1.0,1,11 - Bug;component: Other;priority: highest,https://api.github.com/repos/numpy/numpy/issues/1280,b'fromfile/tofile broken under Windows (Trac #682)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/682 on 2008-03-11 by @stefanv, assigned to unknown._\n\nI/O roundtrip fails under all Windows platforms (see http://buildbot.scipy.org):\n\n\n\n    FAIL: test_file (numpy.core.tests.test_multiarray.TestFromToFile)\n    \n     x: array([  1.04871876e-316+0.65881535j,   0.00000000e+000+0.76613079j,\n             0.00000000e+000+0.80686635j,   0.00000000e+000+0.03426517j,\n             0.00000000e+000+0.31677123j,   0.00000000e+000+0.15563303j,...\n     y: array([ 0.58894384+0.65881535j,  0.68303040+0.76613079j,\n            0.41126205+0.80686635j,  0.99830670+0.03426517j,\n            0.19038197+0.31677123j,  0.90550957+0.15563303j,...\n\n\n\nPriority set to highest in view of 1.0.5 release that has to be made.'"
1278,7726160,numpy-gitbot,numpy-gitbot,2012-10-19 19:23:11,2012-10-19 19:23:12,2012-10-19 19:23:12,closed,,1.1.0,1,11 - Bug;component: numpy.core;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1278,b'Bug in numpy/core/defmatrix.py (Trac #680)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/680 on 2008-03-09 by @nilswagner01, assigned to unknown._\n\n\n\n\n    >>> bmat([[identity(2),zeros((2,2))],[zeros((2,2)),zeros((2,2))]])\n    matrix([[ 1.,  0.,  0.,  0.],\n            [ 0.,  1.,  0.,  0.],\n            [ 0.,  0.,  0.,  0.],\n            [ 0.,  0.,  0.,  0.]])\n\n\n\nworks fine, but\n\n\n\n    >>> bmat(\'identity(2), zeros((2,2)); zeros((2,2)), zeros((2,2))\')\n    Traceback (most recent call last):\n      File ""<stdin>"", line 1, in ?\n      File ""/usr/lib/python2.4/site-packages/numpy/core/defmatrix.py"", line 503, in bmat\n        return matrix(_from_string(obj, glob_dict, loc_dict))\n      File ""/usr/lib/python2.4/site-packages/numpy/core/defmatrix.py"", line 472, in _from_string\n        raise KeyError, ""%s not found"" % (col,)\n    KeyError: \'identity(2) not found\'\n\n\n\n'"
1277,7726158,numpy-gitbot,numpy-gitbot,2012-10-19 19:23:10,2012-10-23 02:38:02,2012-10-19 19:23:10,closed,,1.1.0,1,11 - Bug;component: numpy.core;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1277,b'ERROR: check_MyPyLong_AsUnsignedLongLong (test_regression.TestRegression) (Trac #679)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/679 on 2008-03-06 by @chanley, assigned to unknown._\n\nAs of r4851 I have been receiving this error on a RHE4 64-bit system.  This same error also occurs in r4852.\n\n\n\n    \n    ======================================================================\n    ERROR: check_MyPyLong_AsUnsignedLongLong (test_regression.TestRegression)\n    ----------------------------------------------------------------------\n    Traceback (most recent call last):\n      File ""/data/thor1/chanley/dev/site-packages/lib/python/numpy/core/tests/test_regression.py"", line 806, in check_MyPyLong_AsUnsignedLongLong\n        assert_equal(np.uint64(-2), np.uint64(18446744073709551614))\n    OverflowError: long too big to convert\n    \n    ----------------------------------------------------------------------\n    \n\n'"
1276,7726156,numpy-gitbot,numpy-gitbot,2012-10-19 19:23:08,2012-10-19 19:23:08,2012-10-19 19:23:08,closed,,1.1.0,1,11 - Bug;component: Other;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1276,b'fromfile() : reading past end of file causes unhandled exception (Trac #678)',"b""_Original ticket http://projects.scipy.org/numpy/ticket/678 on 2008-03-05 by trac user lcasburn, assigned to unknown._\n\nReading binary file past end of file causes crash; needs better error handling to catch unhandled exception.\n\nExample interactive input that causes crash:\n\n\n    >>> from numpy import *\n    >>> x = arange(20).reshape(4,5)\n    >>> x.tofile('testBinary.mtx')\n    >>> \n    >>> myfile = open('testBinary.mtx', 'rb')\n    >>> print fromfile(myfile, dtype=int, count=5)\n    [0 1 2 3 4]\n    >>> print fromfile(myfile, dtype=int, count=5)\n    [5 6 7 8 9]\n    >>> print fromfile(myfile, dtype=int, count=5)\n    [10 11 12 13 14]\n    >>> print fromfile(myfile, dtype=int, count=5)\n    [15 16 17 18 19]\n    >>> print fromfile(myfile, dtype=int, count=5)\n\n\n"""
1275,7726155,numpy-gitbot,numpy-gitbot,2012-10-19 19:23:06,2012-10-19 19:23:06,2012-10-19 19:23:06,closed,,1.1.0,2,11 - Bug;component: numpy.core;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1275,b'format string / substitutable parameter mismatch in numpy/core/src/arrayobject.c (Trac #677)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/677 on 2008-03-04 by trac user paul.metcalfe, assigned to unknown._\n\nChangeset 4839 introduced a call to `PyErr_Format` at line 11006 of `numpy/core/src/arrayobject.c`.  The format string has one substitutable parameter; two are given.  Attached very trivial patch fixes it.\n\nHTH.'"
1274,7726154,numpy-gitbot,numpy-gitbot,2012-10-19 19:23:03,2012-10-19 19:23:04,2012-10-19 19:23:04,closed,,1.1.0,4,11 - Bug;component: Other;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1274,b'fortran-order .flatten() fails for multidimensional arrays (Trac #676)',"b""_Original ticket http://projects.scipy.org/numpy/ticket/676 on 2008-03-03 by @pv, assigned to unknown._\n\nFortran-order .flatten('F') does not actually output fortran-order flattened data for multidimensional (ndim > 2) arrays.\n\nThe fortran-order flatten should return [1, 3, 2, 4] also in the second case:\n\n\n    >>> import numpy as N\n    >>> N.__version\n    '1.0.4'\n    >>> x = N.array([[1, 2], [3, 4]])\n    >>> x.flatten()\n    array([1, 2, 3, 4])\n    >>> x.flatten('F')\n    array([1, 3, 2, 4])\n    >>> x = N.array([[[1, 2], [3, 4]]])\n    >>> x.flatten()\n    array([1, 2, 3, 4])\n    >>> x.flatten('F')\n    array([1, 2, 3, 4])\n\n\n\nThe code responsible for flattening appears to be in arrayobject.c:_flat_copyinto\n"""
1273,7726152,numpy-gitbot,seberg,2012-10-19 19:23:01,2014-02-10 22:22:21,2014-02-10 22:22:21,closed,,,4,11 - Bug;component: numpy.core;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1273,b'0-d array does not allow masked (bool) indexing (Trac #675)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/675 on 2008-03-01 by @stefanv, assigned to @teoliphant._\n\n\n\n    import numpy as np\n    x = np.array([3])\n    x[[True]]\n\n\n\nyields\n\n\n\n    IndexError: index 1 out of bounds 0<=index<1\n\n\n\nThe boolean index should not be converted to int.\n'"
1272,7726151,numpy-gitbot,numpy-gitbot,2012-10-19 19:22:58,2012-10-19 19:23:00,2012-10-19 19:23:00,closed,,,8,11 - Bug;component: numpy.lib;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1272,b'Impossible to rename object fields (Trac #674)',"b""_Original ticket http://projects.scipy.org/numpy/ticket/674 on 2008-02-28 by trac user sameer, assigned to unknown._\n\nIt is not possible to change the name of a field if it is an object array.\n\nPlease see the code block below or reference the discussion at \nhttp://projects.scipy.org/pipermail/numpy-discussion/2008-February/031654.html\n\n\n\n     In [1]: from numpy import *\n    \n     In [2]: olddt = dtype([('foo', '|O4'), ('bar', float)])\n    \n     In [3]: a = zeros(10, olddt)\n    \n     In [4]: a\n     Out[4]:\n     array([(0, 0.0), (0, 0.0), (0, 0.0), (0, 0.0), (0, 0.0), (0, 0.0),\n            (0, 0.0), (0, 0.0), (0, 0.0), (0, 0.0)],\n           dtype=[('foo', '|O4'), ('bar', '<f8')])\n    \n     In [5]: newdt = dtype([('notfoo', '|O4'), ('notbar', float)])\n    \n     In [6]: b = a.view(newdt)\n     ---------------------------------------------------------------------------\n     TypeError                                 Traceback (most recent call last)\n    \n     /home/titan/sameer/projects/<ipython console>\n    \n     TypeError: Cannot change data-type for object array.\n    \n\n\n\nAlso, it would be useful to have an API to rename record array fields. The current method of creating a new dtype and calling the view method of the record array seems like too much of a hack. """
1271,7726150,numpy-gitbot,charris,2012-10-19 19:22:54,2014-02-15 19:41:52,2014-02-15 19:41:52,closed,,,10,11 - Bug;component: numpy.linalg;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1271,b'change the error handling code in lapack_lite to return a python exception (Trac #673)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/673 on 2008-02-28 by trac user Zbyszek_Szmek, assigned to unknown._\n\nFunction xerbla_ is called when an error (e.g. improper argument) is detected in functions converted to C from Fortran. Citing the manpage for xerbla from the lapack3 library:\n\n  XERBLA is an error handler for the LAPACK routines.  It is called by an LAPACK routine\n  if an input   parameter has an invalid value.\n  A message is printed and execution stops.\n\n  Installers may consider modifying the STOP statement in order to call system-specific \n  exception-handling facilities.\n\nI believe that it should indeed be customized for lapack_lite in numpy, because\n  a. it tries to print a message using Fortran I/O, which doesn\'t always work\n  b. calls s_stop, which simply exits the program returning 0\n\nThe Python interface validates all arguments, so that the error-handling code in functions converted from Fortran is not called, but in case it happens, an exception should be thrown.\n\nAn example:\n\n\n      import numpy\n      Ainv = numpy.linalg.inv( numpy.matrix( numpy.zeros((0,0)) ) )\n      print Ainv\n\n\n\nOn suse 10.3 (64bits) with python-numpy-1.0.4-0.pm.2 running such a program gives no output (Fortran I/O doesn\'t work properly?) and returns 0. \nOn debian with python-numpy-10.0.3-1 it says:\n\n\n       ** On entry to DGESV  parameter number  4 had an illegal value\n\n\nand returns 0.\n\nWith the attached patch, python returns 1 after printing:\n\n\n      Traceback (most recent call last):\n      File ""test_linalg_inv.py"", line 2, in <module>\n        Ainv = numpy.linalg.inv( numpy.matrix( numpy.zeros((0,0)) ) )\n      File ""/usr/lib64/python2.5/site-packages/numpy/linalg/linalg.py"", line 246, in inv\n        return wrap(solve(a, identity(a.shape[0], dtype=a.dtype)))\n      File ""/usr/lib64/python2.5/site-packages/numpy/linalg/linalg.py"", line 193, in solve\n        return b.transpose().astype(result_t)\n      ValueError: On entry to DGESV parameter number 4 had an illegal value\n\n\n\nOf course all this is caused by a small bug in the python wrapper for dsegv.\n'"
1270,7726147,numpy-gitbot,numpy-gitbot,2012-10-19 19:22:52,2012-10-19 19:22:53,2012-10-19 19:22:53,closed,,1.1.0,2,11 - Bug;component: Official binaries;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1270,b'Fatal Python error: PyEval_RestoreThread: NULL tstate (Trac #672)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/672 on 2008-02-27 by trac user ggenellina, assigned to @cournape._\n\nThis looks like an error in NumPy, altough I\'ve found it using matplotlib.\nWith Windows XP SP2, Python 2.5.1 from www.python.org, NumPy 1.0.4,  matplotlib 0.91.2, all installed using the distributed binaries.\n\nAll matplotlib examples fail with an application error box, and this message:\n\n""""""Fatal Python error: PyEval_RestoreThread: NULL tstate\n\nThis application has requested the Runtime to terminate it in an\n unusual way. Please contact the application\'s support team for more\n information.""""""\n\nThe error happens inside _dotblas.pyd. Downgrading to NumPy 1.0.3.1 fixed the problem.'"
1269,7726146,numpy-gitbot,numpy-gitbot,2012-10-19 19:22:49,2012-10-19 19:22:51,2012-10-19 19:22:51,closed,,1.1.0,6,11 - Bug;component: numpy.linalg;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1269,b'linalg ImportError on Solaris 10 systems (Trac #671)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/671 on 2008-02-26 by @chanley, assigned to unknown._\n\nWhen building numpy from svn on a Sun Ultra 10 running Solaris 10 the build completes without error.  However, when attempting to then import numpy I receive the following ""ImportError"" exception:\n\n\n\n    Python 2.5.1 (r251:54863, Feb  8 2008, 15:02:09) [C] on sunos5\n    Type ""help"", ""copyright"", ""credits"" or ""license"" for more information.\n    >>> import numpy\n    Traceback (most recent call last):\n      File ""<stdin>"", line 1, in <module>\n      File ""/data/basil5/site-pckages/lib/python/numpy/__init__.py"", line 51, in <module>\n      File ""/data/basil5/site-pckages/lib/python/numpy/linalg/__init__.py"", line 4, in <module>\n      File ""/data/basil5/site-pckages/lib/python/numpy/linalg/linalg.py"", line 28, in <module>\n    ImportError: ld.so.1: python: fatal: relocation error: file /data/basil5/site-packages/lib/python/numpy/linalg/lapack_lite.so: symbol s_cat: referenced symbol not found\n    >>> \n\n\n\nSince numpy doesn\'t have a required dependency on lapack I found this error puzzling.  The exception also didn\'t occur previously.\n\n'"
1268,7726144,numpy-gitbot,numpy-gitbot,2012-10-19 19:22:47,2012-10-19 19:22:47,2012-10-19 19:22:47,closed,,1.1.0,2,11 - Bug;component: numpy.core;priority: high,https://api.github.com/repos/numpy/numpy/issues/1268,b'cmp_arg_types bug (Trac #670)',"b""_Original ticket http://projects.scipy.org/numpy/ticket/670 on 2008-02-25 by @nbecker, assigned to @teoliphant._\n\nI dont' think the current cmp_arg_types works at all, it doesn't even increment the pointers to examine all the types.  I think this is correct:\n\nstatic int\ncmp_arg_types(int *arg1, int *arg2, int n)\n{\n    for (;n > 0; n--, ++arg1, ++arg2) {\n        if (PyArray_EquivTypenums(*arg1, *arg2) ||\n            PyArray_CanCastSafely(*arg1, *arg2))\n          continue;\n        return 1;\n    }\n    return 0;\n}"""
1267,7726143,numpy-gitbot,numpy-gitbot,2012-10-19 19:22:45,2012-10-19 19:22:45,2012-10-19 19:22:45,closed,,,2,11 - Bug;component: Other;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1267,b'Undesired upcasting of uint64 to float64 in NumPy scalars (Trac #669)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/669 on 2008-02-25 by @FrancescAlted, assigned to unknown._\n\nIn the middle of integer arithmetic, I find this quite misleading:\n\n\n\n    In [8]: 5 % numpy.int64(3)\n    Out[8]: 2\n    \n    In [9]: 5 % numpy.uint64(3)\n    Out[9]: 2.0\n\n\n\nBut the next is definitely worse:\n\n\n\n    In [10]: 5 / numpy.int64(3)\n    Out[10]: 1\n    \n    In [11]: 5 / numpy.uint64(3)\n    Out[11]: 1.66666666667\n\n\n\nIn my case, this lead to many programming errors.\n\nI do think that the outcome of an operation between integers should be an integer, as most of programming languages do.'"
1265,7726139,numpy-gitbot,numpy-gitbot,2012-10-19 19:22:40,2013-08-06 00:36:31,2012-10-19 19:22:41,closed,,1.1.0,3,11 - Bug;component: numpy.core;priority: high,https://api.github.com/repos/numpy/numpy/issues/1265,b'_dotblas.so only built if ATLAS is installed (Trac #667)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/667 on 2008-02-24 by trac user otizonaizit, assigned to unknown._\n\nDear numpy devs, after changeset 3854 ( http://projects.scipy.org/scipy/numpy/changeset/3854 ) dotblas only gets built when ATLAS is installed (LAPACK+BLAS is not enough anymore). This prevents the python-numpy debian package ( http://packages.debian.org/sid/python-numpy ) from being built with dotblas support (see debian bug for details: http://bugs.debian.org/cgi-bin/bugreport.cgi?bug=464784 ). What is the reason for such a dependency? Shouldn\'t the API for BLAS and ATLAS routines be exactly the same so that they can be used interchangeably? Simply adding a dependency on ATLAS for python-numpy in debian at the moment is not feasible (see the debian bug report for more details).\n\nThank you for your attention and keep up with the very good work!\n\ntiziano\n\nps: I\'ve set the priority for this bug report to ""high"" and severity to ""critical"", because numpy on debian is presently *really* slow, at the point that is almost unusable, forcing users to build it from source. \n'"
1263,7726134,numpy-gitbot,numpy-gitbot,2012-10-19 19:22:37,2012-10-19 19:22:37,2012-10-19 19:22:37,closed,,1.1.0,1,11 - Bug;component: Other;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1263,"b'100% cpu error consolidation, tickets 627, 628, 652 (Trac #665)'","b'_Original ticket http://projects.scipy.org/numpy/ticket/665 on 2008-02-24 by @charris, assigned to unknown._\n\nTickets 627, 628, 652 are probably related, if not identical. If one gets fixed, test the others also so that we can close all of them.'"
1260,7726127,numpy-gitbot,numpy-gitbot,2012-10-19 19:22:29,2012-10-23 02:37:58,2012-10-19 19:22:30,closed,,1.1.0,2,11 - Bug;component: Other;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1260,b'eigh hangup (Trac #662)',"b""_Original ticket http://projects.scipy.org/numpy/ticket/662 on 2008-02-21 by trac user Numpty, assigned to unknown._\n\nnumpy version[[BR]]\n`1.0.4`\n\nsys.version[[BR]]\n`2.5 (r25:51908, Sep 19 2006, 09:52:17) [MSC v.1310 32 bit (Intel)]`\n\n\n\n    #!python\n    import numpy\n    \n    cov = numpy.array([\n        [ 77.70273908,   3.51489954,  15.64602427],\n        [  3.51489954,  88.97013878,  -1.07431931],\n        [ 15.64602427,  -1.07431931,  98.18223512],\n    ])\n    # or any array I've tried\n    \n    \n    # This never returns (not within minutes anyway)\n    vals, vecs = numpy.linalg.eigh(cov)\n    \n\n\n\neig() works and using the gui examples tool from the LAPACK 3.1.1 Windows installation, it seems that the DSYEVD routine mentioned in the docstring succeeds with these inputs.\n"""
1259,7726126,numpy-gitbot,numpy-gitbot,2012-10-19 19:22:27,2012-10-19 19:22:28,2012-10-19 19:22:28,closed,,1.1.0,3,11 - Bug;component: Other;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1259,b'maximum handles nan improperly (Trac #661)',"b""_Original ticket http://projects.scipy.org/numpy/ticket/661 on 2008-02-21 by trac user tmb, assigned to unknown._\n\nReproduce by:\n\n>>> maximum(3,array([1,nan,3.0]))\nWarning: invalid value encountered in maximum\narray([ 3.        ,         nan,  3.        ])\n>>> \n\nPrinting a warning is about the worst thing the system can do: the error message is not informative and it messes up interactive and CGI output.  There is also no obvious way of disabling it, and the message doesn't even make it clear that it comes from numpy.maximum, leading people on a wild goose chase through their sources.\n\nThe correct behavior would be either to raise an exception if the condition is detected, or to quietly carry out the operation.  I think the default should be to raise an exception, with an option to disable."""
1258,7726124,numpy-gitbot,numpy-gitbot,2012-10-19 19:22:24,2012-10-19 19:22:26,2012-10-19 19:22:26,closed,,1.1.0,4,11 - Bug;component: numpy.numarray;priority: high,https://api.github.com/repos/numpy/numpy/issues/1258,b'Crash in numpy.unique1D (release only) (Trac #660)',"b""_Original ticket http://projects.scipy.org/numpy/ticket/660 on 2008-02-19 by trac user Kaloo, assigned to @jarrodmillman._\n\nI have one example which causes a crash with __unique1d__.\n\nI re-compiled numpy into debug mode, and it didn't crash.\nHowever, the bug is perfectly reproducible with release version (numpy __1.0.4__)\n\nI attached a script which loads data in a numpy array, and launches unique1d."""
1257,7726121,numpy-gitbot,charris,2012-10-19 19:22:22,2014-02-18 14:54:16,2014-02-18 14:47:07,closed,,,5,11 - Bug;component: Other;Easy Fix;priority: low,https://api.github.com/repos/numpy/numpy/issues/1257,b'Some strings containing zeros are displayed incorrectly. (Trac #659)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/659 on 2008-02-13 by @charris, assigned to unknown._\n\nThe array display routine has some problems when it is showing strings \ncontaining zeros.\n\n\n    In [8]: array([""\\x00\\x50"",""\\x50\\x50""])\n    Out[8]: \n    array([\'\\x00P\', \'PP\'], \n          dtype=\'|S2\')\n    \n    In [9]: array([""\\x00\\x00"",""\\x50\\x50""])\n    Out[9]: \n    array([\'\', \'PP\'], \n          dtype=\'|S2\')\n\n\n\n'"
1256,7726118,numpy-gitbot,numpy-gitbot,2012-10-19 19:22:19,2012-10-19 19:22:19,2012-10-19 19:22:19,closed,,1.1.0,2,11 - Bug;component: numpy.core;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1256,b'Segfault on reshape (Trac #658)',"b""_Original ticket http://projects.scipy.org/numpy/ticket/658 on 2008-02-12 by @stefanv, assigned to unknown._\n\n\n\n    import numpy as np\n    np.indices((0,3,4)).T.reshape(-1,3)\n\n\n\n\n\n    ==10171== 233675 errors in context 93 of 95:\n    ==10171== Invalid read of size 4\n    ==10171==    at 0x4550E79: PyArray_Newshape (multiarraymodule.c:516)\n    ==10171==    by 0x4551B17: array_reshape (arraymethods.c:87)\n    ==10171==    by 0x80C8EEB: PyEval_EvalFrameEx (in /usr/bin/python2.5)\n    ==10171==    by 0x80CA114: PyEval_EvalCodeEx (in /usr/bin/python2.5)\n    ==10171==    by 0x80CA186: PyEval_EvalCode (in /usr/bin/python2.5)\n    ==10171==    by 0x80E9697: PyRun_FileExFlags (in /usr/bin/python2.5)\n    ==10171==    by 0x80E9926: PyRun_SimpleFileExFlags (in /usr/bin/python2.5)\n    ==10171==    by 0x805938F: Py_Main (in /usr/bin/python2.5)\n    ==10171==    by 0x80588C1: main (in /usr/bin/python2.5)\n    ==10171==  Address 0x59A3F50 is 0 bytes after a block of size 8 alloc'd\n    ==10171==    at 0x4022765: malloc (vg_replace_malloc.c:149)\n    ==10171==    by 0x453885E: PyArray_IntpConverter (multiarraymodule.c:4549)\n    ==10171==    by 0x4551AF9: array_reshape (arraymethods.c:79)\n    ==10171==    by 0x80C8EEB: PyEval_EvalFrameEx (in /usr/bin/python2.5)\n    ==10171==    by 0x80CA114: PyEval_EvalCodeEx (in /usr/bin/python2.5)\n    ==10171==    by 0x80CA186: PyEval_EvalCode (in /usr/bin/python2.5)\n    ==10171==    by 0x80E9697: PyRun_FileExFlags (in /usr/bin/python2.5)\n    ==10171==    by 0x80E9926: PyRun_SimpleFileExFlags (in /usr/bin/python2.5)\n    ==10171==    by 0x805938F: Py_Main (in /usr/bin/python2.5)\n    ==10171==    by 0x80588C1: main (in /usr/bin/python2.5)\n    ==10171== \n    ==10171== 639859 errors in context 94 of 95:\n    ==10171== Conditional jump or move depends on uninitialised value(s)\n    ==10171==    at 0x4550E8A: PyArray_Newshape (multiarraymodule.c:515)\n    ==10171==    by 0x4551B17: array_reshape (arraymethods.c:87)\n    ==10171==    by 0x80C8EEB: PyEval_EvalFrameEx (in /usr/bin/python2.5)\n    ==10171==    by 0x80CA114: PyEval_EvalCodeEx (in /usr/bin/python2.5)\n    ==10171==    by 0x80CA186: PyEval_EvalCode (in /usr/bin/python2.5)\n    ==10171==    by 0x80E9697: PyRun_FileExFlags (in /usr/bin/python2.5)\n    ==10171==    by 0x80E9926: PyRun_SimpleFileExFlags (in /usr/bin/python2.5)\n    ==10171==    by 0x805938F: Py_Main (in /usr/bin/python2.5)\n    ==10171==    by 0x80588C1: main (in /usr/bin/python2.5)\n    ==10171== 639859 errors in context 95 of 95:\n    ==10171== \n    ==10171== Conditional jump or move depends on uninitialised value(s)\n    ==10171==    at 0x4550E82: PyArray_Newshape (multiarraymodule.c:514)\n    ==10171==    by 0x4551B17: array_reshape (arraymethods.c:87)\n    ==10171==    by 0x80C8EEB: PyEval_EvalFrameEx (in /usr/bin/python2.5)\n    ==10171==    by 0x80CA114: PyEval_EvalCodeEx (in /usr/bin/python2.5)\n    ==10171==    by 0x80CA186: PyEval_EvalCode (in /usr/bin/python2.5)\n    ==10171==    by 0x80E9697: PyRun_FileExFlags (in /usr/bin/python2.5)\n    ==10171==    by 0x80E9926: PyRun_SimpleFileExFlags (in /usr/bin/python2.5)\n    ==10171==    by 0x805938F: Py_Main (in /usr/bin/python2.5)\n    ==10171==    by 0x80588C1: main (in /usr/bin/python2.5)\n\n"""
1255,7726117,numpy-gitbot,numpy-gitbot,2012-10-19 19:22:17,2012-10-19 19:22:17,2012-10-19 19:22:17,closed,,1.1.0,1,11 - Bug;component: numpy.core;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1255,b'x.flat[:] interprets non-native byteorder arrays incorrectly (Trac #657)',"b""_Original ticket http://projects.scipy.org/numpy/ticket/657 on 2008-02-11 by @rkern, assigned to unknown._\n\n\n\n    \n    In [9]: from numpy import *\n    \n    In [10]: import sys\n    \n    In [11]: sys.byteorder\n    Out[11]: 'little'\n    \n    In [12]: arange(10).astype('>i4')\n    Out[12]: array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\n    \n    In [13]: arange(10).astype('>i4').flat[:]\n    Out[13]: \n    array([        0,  16777216,  33554432,  50331648,  67108864,  83886080,\n           100663296, 117440512, 134217728, 150994944])\n    \n    In [14]: arange(10).astype('>f8')\n    Out[14]: array([ 0.,  1.,  2.,  3.,  4.,  5.,  6.,  7.,  8.,  9.])\n    \n    In [15]: arange(10).astype('>f8').flat[:]\n    Out[15]: \n    array([  0.00000000e+000,   3.03865194e-319,   3.16202013e-322,\n             1.04346664e-320,   2.05531309e-320,   2.56123631e-320,\n             3.06715953e-320,   3.57308275e-320,   4.07900597e-320,\n             4.33196758e-320])\n\n"""
1254,7726116,numpy-gitbot,numpy-gitbot,2012-10-19 19:22:15,2012-10-19 19:22:15,2012-10-19 19:22:15,closed,,1.1.0,1,11 - Bug;component: numpy.lib;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1254,b'numpy.histogram fails if bins is a sequence (Trac #656)',"b""_Original ticket http://projects.scipy.org/numpy/ticket/656 on 2008-02-11 by trac user jochen.eppler, assigned to @jarrodmillman._\n\nWith numpy 1.04, the following code\n\n\n    import numpy\n    xs = numpy.arange(0.0, 20.0, 0.1)\n    hist = numpy.histogram(xs, bins=numpy.linspace(0.0, 20.0, 4.0))\n\n\nproduces an exception.\n\n\n    ---------------------------------------------------------------------------\n    exceptions.NameError                                 Traceback (most recent call last)\n    \n    /usr/lib/python2.4/site-packages/numpy/lib/function_base.py in histogram(a, bins, range, normed)\n        152         bins = linspace(mn, mx, bins, endpoint=False)\n        153     else:\n    --> 154         if(any(bins[1:]-bins[:-1] < 0)):\n        155             raise AttributeError, 'bins must increase monotonically.'\n        156\n    \n    NameError: global name 'any' is not defined\n\n\n\nWith 1.0.3 the function works nicely."""
1252,7726107,numpy-gitbot,numpy-gitbot,2012-10-19 19:22:05,2012-10-19 19:22:09,2012-10-19 19:22:09,closed,,1.1.0,6,11 - Bug;component: Other;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1252,b'Numpy tests failure on solaris (Trac #654)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/654 on 2008-02-05 by trac user yippi, assigned to @cournape._\n\n\nI find that numpy has test programs in this directory:\n\n/usr/lib/python2.4/vendor-packages/numpy/core/tests\n\nTwo tests seem to have failures.  test_scalarmath.py and test_numeric.py.  The other tests seem to pass okay.  I am\nrunning on Solaris Nevada x86.  Are you seeing these errors on other platforms?\n\nI see the following output with the two failed tests.\n\n% python test_scalarmath.py\n\n  Found 6/6 tests for __main__\n.F....\n======================================================================\nFAIL: check_large_types (__main__.TestPower)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File ""test_scalarmath.py"", line 52, in check_large_types\n    assert b == 6765201, ""error with %r: got %r"" % (t,b)\nAssertionError: error with <type \'numpy.float96\'>: got 6765201.00000000000364\n\n----------------------------------------------------------------------\nRan 6 tests in 0.078s\n\nFAILED (failures=1)\n\n$ python test_numeric.py\n  Found 62/62 tests for __main__\n.......................................................................Warning: invalid value encountered in absolute\nWarning: invalid value encountered in absolute\nWarning: invalid value encountered in less_equal\n.....\n----------------------------------------------------------------------\nRan 76 tests in 0.124s\n\nOK\n\n'"
1251,7726106,numpy-gitbot,numpy-gitbot,2012-10-19 19:22:02,2012-10-19 19:22:04,2012-10-19 19:22:04,closed,,1.1.0,4,11 - Bug;component: numpy.distutils;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1251,b'v1.0.4 incorrectly identifies Xeon as 64-bit (Trac #653)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/653 on 2008-02-04 by trac user doneal24, assigned to @dmcooke._\n\nPlatform Gentoo Linux on Intel Xeon, 32-bit\n\n\n\n\n    biowolf # cat /proc/cpuinfo \n    processor       : 0\n    vendor_id       : GenuineIntel\n    cpu family      : 15\n    model           : 2\n    model name      : Intel(R) Xeon(TM) CPU 2.80GHz\n    stepping        : 9\n    cpu MHz         : 2799.930\n    cache size      : 512 KB\n    physical id     : 0\n    siblings        : 2\n    core id         : 0\n    cpu cores       : 1\n    fdiv_bug        : no\n    hlt_bug         : no\n    f00f_bug        : no\n    coma_bug        : no\n    fpu             : yes\n    fpu_exception   : yes\n    cpuid level     : 2\n    wp              : yes\n    flags           : fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush dts acpi mmx fxsr sse sse2 ss ht tm pbe cid xtpr\n    bogomips        : 5572.09\n    clflush size    : 64\n    biowolf # python\n    Python 2.4.4 (#1, Jan 15 2008, 12:27:23) \n    [GCC 4.1.2 (Gentoo 4.1.2 p1.0.2)] on linux2\n    Type ""help"", ""copyright"", ""credits"" or ""license"" for more information.\n    >>> from numpy.distutils.cpuinfo import cpu\n    >>> cpu.is_64bit()\n    True\n    >>>\n\n\n \n\nCommenting out lines 282-283 in /usr/lib/python2.4/site-packages/numpy/distutils/cpuinfo.py\n\n\n    #if self.info[0].get(\'clflush size\',\'\')==\'64\':\n    #   return True\n\n\nwill then correctly return the system type as 32bit but this is not the optimal solution.\n\nIncorrect identification of the system as 64-bit causes scipy to fail in many modules.'"
1250,7726103,numpy-gitbot,numpy-gitbot,2012-10-19 19:22:00,2012-10-23 02:37:56,2012-10-19 19:22:00,closed,,1.1.0,1,11 - Bug;component: Official binaries;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1250,b'linalg.eig takes 100% cpu and never ends (Trac #652)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/652 on 2008-02-01 by trac user PeterC, assigned to @cournape._\n\nUsing the official binaries for 1.0.4-py2.4 the following code never ends\n\n\n\n    from numpy import arange, float64\n    from numpy.linalg import eig\n    a = arange(13*13, dtype = float64)\n    a.shape = (13,13)\n    a = a%17\n    eig(a)\n\n\n\nhowever this completes on the official 1.0.3.1-py2.4\n\nThis may be related to #1225 but I do not have python 2.5 so I cannot try the binaries posted.\n\nMy system is\nWindows XP, Intel Xeon 5140 \n\n'"
1249,7726101,numpy-gitbot,numpy-gitbot,2012-10-19 19:21:58,2012-10-19 19:21:59,2012-10-19 19:21:59,closed,,1.1.0,0,11 - Bug;component: Other;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1249,b'typos in  _compiled_base.c  function  arr_bincount (Trac #651)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/651 on 2008-01-30 by @sebhaase, assigned to unknown._\n\nHi,\nin _compiled_base.c (current SVN)\nI might have found 2 ""typos""\nin function arr_bincount\n\n1) missing `f` \n\n\n     ""irst argument of bincount must be non-negative"");\n\n\n\n2) the starting comment says ""histogram"" (a few times),  should it say ""arr_bincount"" !? '"
1248,7726100,numpy-gitbot,numpy-gitbot,2012-10-19 19:21:56,2012-10-19 19:21:57,2012-10-19 19:21:57,closed,,1.1.0,2,11 - Bug;component: numpy.core;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1248,b'fromfile and fromstring differ in parsing ascii integer strings (Trac #650)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/650 on 2008-01-29 by @efiring, assigned to unknown._\n\nWhen parsing ascii with an integer dtype specified, fromfile uses fscanf with a format string that assumes base-10, while fromstring uses PyOS_strtol with its third parameter, base, set to 0.  This causes auto-detection of the base, allowing hex and octal to be recognized automatically.  The disadvantages are that this can cause the same string to be parsed differently by fromfile and fromstring, and that in common cases, such as parsing a date or time string, the leading 0 triggers unwanted interpretation of a number as octal (which can fail outright) when it is actually base-10.\n\n\n\n    In [2]:numpy.fromstring(""12:09:09"", dtype=int, sep=\':\')\n    Out[2]:array([12,  0])\n\n\n\nChanging the base argument to PyOS_strtol from 0 to 10 in arraytypes.inc.src would change the behavior of fromstring to match that of fromfile and eliminate the surprising behavior illustrated above.\n\nThis has been discussed in the thread [http://thread.gmane.org/gmane.comp.python.numeric.general/18630]\n '"
1247,7726099,numpy-gitbot,numpy-gitbot,2012-10-19 19:21:53,2012-10-19 19:21:55,2012-10-19 19:21:55,closed,,1.1.0,6,11 - Bug;component: Other;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1247,b'numpy.linalg.lstsq segfaults on i686 32-bit and ia64 linux (Trac #649)',"b""_Original ticket http://projects.scipy.org/numpy/ticket/649 on 2008-01-24 by trac user psederberg, assigned to unknown._\n\nHowdy Everybody:\n\nI am coding a simple ridge regression with numpy and seem to have uncovered a bug that exists in numpy.linalg.lstsq, but NOT in scipy.linalg,lstsq.\n\nRunning the following code gives rise to a segfault on 32-bit i686 and 64-bit ia64 linux, but not on a amd64 linux machine:\n\n############ START CODE ##################\nimport numpy as N\n\n# set dimensions\nnsamples = 53 \nnfeatures = 1000 \n\n# create random data\ndata = N.random.rand(nsamples,nfeatures)\nlab = N.random.rand(nsamples)\n\n# run a ridge regression with constant term\nLambda = .05*nfeatures*N.eye(nfeatures)\na = N.concatenate( \\\n    (N.concatenate((data, N.ones((nsamples, 1))), 1),\n     N.concatenate((Lambda, N.zeros((nfeatures, 1))), 1)))\nb = N.concatenate((lab, N.zeros(nfeatures)))\nw = N.linalg.lstsq(a,b)[0]  # here is the segfault\n\n################ END CODE ####################\n\nAll machines were tested with Debian testing and numpy version 1.0.4.  \n\nI've attached the results of running valgrind on the above code.\n\nIt should also be added that replacing the numpy lstsq with the scipy.linalg.lstsq prevents the segfault and gives rise to the correct result.\n\nThanks,\nPer\n\n"""
1246,7726097,numpy-gitbot,numpy-gitbot,2012-10-19 19:21:51,2012-10-23 02:37:56,2012-10-19 19:21:52,closed,,1.1.0,1,11 - Bug;component: numpy.core;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1246,b'Bus Error with object arrays on big endian system (Trac #648)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/648 on 2008-01-21 by @chanley, assigned to unknown._\n\nThe following will cause a bus error on a big endian machine (Solaris 10 Sun in this case):\n\n\n\n    > Python 2.5.1 (r251:54863, Jun 29 2007, 15:29:55) [C] on sunos5\n    > Type ""help"", ""copyright"", ""credits"" or ""license"" for more information.\n    >>>> import numpy\n    >>>> o = numpy.ndarray(shape=3,dtype=[(\'SEGMENT\', \'|S4\'), (\'SPEC_FOUND\', \'|i1\')])\n    >>>> o1 = o.getfield(numpy.dtype(\'|S4\'),0)\n    >>>> print o1[0]\n    > UX\n    >>>> print o1[1]\n    > 4\n    >>>> print o1[2]\n    > NT\n    >>>> print o1\n    > Bus error (core dumped)\n\n\n\nThere are no issues on Linux or Mac OS X Intel based systems.\n\nThis example was done on the latest svn version of numpy (r1.0.5.dev47360).'"
1245,7726094,numpy-gitbot,numpy-gitbot,2012-10-19 19:21:47,2012-10-19 19:21:50,2012-10-19 19:21:50,closed,,1.1.0,10,11 - Bug;component: numpy.core;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1245,b'Bus Error with object arrays on big endian Solaris system (Trac #647)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/647 on 2008-01-21 by @chanley, assigned to @teoliphant._\n\nThe following will cause a bus error on a big endian machine (Solaris 10 Sun in this case):\n\n\n\n    > Python 2.5.1 (r251:54863, Jun 29 2007, 15:29:55) [C] on sunos5\n    > Type ""help"", ""copyright"", ""credits"" or ""license"" for more information.\n    >>>> import numpy\n    >>>> o = numpy.ndarray(shape=3,dtype=[(\'SEGMENT\', \'|S4\'), (\'SPEC_FOUND\', \'|i1\')])\n    >>>> o1 = o.getfield(numpy.dtype(\'|S4\'),0)\n    >>>> print o1[0]\n    > UX\n    >>>> print o1[1]\n    > 4\n    >>>> print o1[2]\n    > NT\n    >>>> print o1\n    > Bus error (core dumped)\n\n\n\nThere are no issues on Linux or Mac OS X Intel based systems.\n\nThis example was done on the latest svn version of numpy (r1.0.5.dev47360).'"
1244,7726093,numpy-gitbot,numpy-gitbot,2012-10-19 19:21:45,2012-10-19 19:21:46,2012-10-19 19:21:46,closed,,1.1.0,2,11 - Bug;component: Other;priority: high,https://api.github.com/repos/numpy/numpy/issues/1244,b'incorrect calculation on int64 array (Trac #646)',"b""_Original ticket http://projects.scipy.org/numpy/ticket/646 on 2008-01-19 by trac user latrine00, assigned to unknown._\n\nI get curious results on array calculation in numpy 1.0.4\n\nExample code in python:\n\n\n\n    import numpy\n    a = numpy.arange(0, 200, 2, dtype='int64')\n    np = (a+1)**1\n    print a\n    print np\n\n\n\nSecond array np contains even numbers - should be odd only:\n\n\n\n    array([  0,   2,   4,   6,   8,  10,  12,  14,  16,  18,  20,  22,  24,\n            26,  28,  30,  32,  34,  36,  38,  40,  42,  44,  46,  48,  50,\n            52,  54,  56,  58,  60,  62,  64,  66,  68,  70,  72,  74,  76,\n            78,  80,  82,  84,  86,  88,  90,  92,  94,  96,  98, 100, 102,\n           104, 106, 108, 110, 112, 114, 116, 118, 120, 122, 124, 126, 128,\n           130, 132, 134, 136, 138, 140, 142, 144, 146, 148, 150, 152, 154,\n           156, 158, 160, 162, 164, 166, 168, 170, 172, 174, 176, 178, 180,\n           182, 184, 186, 188, 190, 192, 194, 196, 198], dtype=int64)\n    array([  1,   3,   5,   7,   9,  11,  12,  15,  17,  19,  20,  22,  24,\n            27,  28,  30,  33,  35,  37,  39,  41,  43,  45,  47,  49,  51,\n            53,  54,  57,  58,  60,  62,  64,  66,  68,  71,  72,  74,  77,\n            79,  81,  82,  85,  86,  89,  91,  93,  95,  96,  99, 101, 103,\n           105, 107, 108, 111, 112, 115, 117, 119, 120, 123, 124, 127, 129,\n           131, 132, 135, 137, 139, 141, 142, 144, 147, 148, 151, 153, 154,\n           157, 159, 161, 163, 164, 166, 168, 171, 173, 175, 176, 179, 181,\n           182, 185, 187, 188, 190, 192, 194, 197, 199], dtype=int64)\n    \n\n\n\n"""
1243,7726090,numpy-gitbot,numpy-gitbot,2012-10-19 19:21:43,2012-10-19 19:21:44,2012-10-19 19:21:44,closed,,1.1.0,1,11 - Bug;component: Other;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1243,b'maskedarray extrema operations break on non-array types (Trac #645)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/645 on 2008-01-14 by trac user bsulman, assigned to unknown._\n\nExtrema operations in maskedarray raise an exception when used on a non-array object.  Example:\n\n\n\n    In [1]: import maskedarray as ma\n    \n    In [2]: import numpy.core.ma as MA\n    \n    In [3]: l=[1,2,3]\n    \n    In [4]: max(l)\n    Out[4]: 3\n    \n    In [5]: MA.maximum(l)\n    Out[5]: 3\n    \n    In [6]: ma.max(l)\n    ---------------------------------------------------------------------------\n    <type \'exceptions.AttributeError\'>        Traceback (most recent call last)\n    \n    /home/bsulman/<ipython console> in <module>()\n    \n    /home/bsulman/lib/python/maskedarray/core.py in max(obj, axis, out)\n       2386         raise TypeError(""Output arrays Unsupported for masked arrays"")\n       2387     if axis is None:\n    -> 2388         return maximum(obj)\n       2389     else:\n       2390         return maximum.reduce(obj, axis)\n    \n    /home/bsulman/lib/python/maskedarray/core.py in __call__(self, a, b)\n       2307         ""Executes the call behavior.""\n       2308         if b is None:\n    -> 2309             return self.reduce(a)\n       2310         return where(self.compare(a, b), a, b)\n       2311     #.........\n    \n    /home/bsulman/lib/python/maskedarray/core.py in reduce(self, target, axis)\n       2317         else:\n       2318             kargs = {}\n    -> 2319             target = target.ravel()\n       2320             if not (m is nomask):\n       2321                 m = m.ravel()\n    \n    <type \'exceptions.AttributeError\'>: \'list\' object has no attribute \'ravel\'\n\n\n\nThe maskedarray version of _extrema_operation.reduce (line 2535 in branches/maskedarray/numpy/ma/core.py) calls target.ravel() for axis=None.  (I\'m using the older scipy.sandbox version of maskedarray but the line number I gave is for the maskedarray branch version and the problem still appears to be there.)  This is a problem because doing a \n` from maskedarray import * ` \nwill break the builtin max and min functions for non-array objects.\n\nProbably the easiest fix is just to call array(object) in reduce?\n\nThanks!'"
1242,7726087,numpy-gitbot,numpy-gitbot,2012-10-19 19:21:39,2012-10-19 19:21:42,2012-10-19 19:21:42,closed,,1.1.0,8,11 - Bug;component: numpy.distutils;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1242,b'distutils/cpuinfo fails to detect some nocona based hardware (Trac #644)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/644 on 2008-01-11 by trac user jsbronder, assigned to @cournape._\n\nReference: https://bugs.gentoo.org/show_bug.cgi?id=183236\n\nBasically, cpuinfo is failed to verify that the following cpuinfo is, in fact, nocona.\nThis has been verified against numpy-1.0.4.\n\n\n\n    processor       : 0\n    vendor_id       : GenuineIntel\n    cpu family      : 6\n    model           : 15\n    model name      : Genuine Intel(R) CPU                  @ 2.40GHz\n    stepping        : 4\n    cpu MHz         : 2400.130\n    cache size      : 4096 KB\n    physical id     : 0\n    siblings        : 2\n    core id         : 0\n    cpu cores       : 2\n    fpu             : yes\n    fpu_exception   : yes\n    cpuid level     : 10\n    wp              : yes\n    flags           : fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov\n    pat pse36 clflush dts acpi mmx fxsr sse sse2 ss ht tm syscall nx lm\n    constant_tsc pni monitor ds_cpl vmx est tm2 ssse3 cx16 xtpr lahf_lm\n    bogomips        : 4802.95\n    clflush size    : 64\n    cache_alignment : 64\n    address sizes   : 36 bits physical, 48 bits virtual\n    power management:\n\n\n'"
1241,7726085,numpy-gitbot,numpy-gitbot,2012-10-19 19:21:35,2012-10-19 19:21:38,2012-10-19 19:21:38,closed,,1.1.0,9,11 - Bug;component: Other;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1241,b'Tracebacks in Turkish locales (Trac #643)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/643 on 2008-01-10 by trac user marco, assigned to @rkern._\n\nThe following result in a traceback. I suspect it might be related to the fact that importing gtk changes the default encoding to utf-8. I\'m using python 2.5.1 and numpy 1.0.3.1\n\nLANG=tr_TR.UTF-8 python -c ""import gtk, numpy""\n\n\n\n    \n    Traceback (most recent call last):\n      File ""<string>"", line 1, in <module>\n      File ""/usr/lib64/python2.5/site-packages/numpy/__init__.py"", line 39, in <module>\n        import core\n      File ""/usr/lib64/python2.5/site-packages/numpy/core/__init__.py"", line 8, in <module>\n        import numerictypes as nt\n      File ""/usr/lib64/python2.5/site-packages/numpy/core/numerictypes.py"", line 241, in <module>\n        void = allTypes[\'void\']\n    KeyError: \'void\'\n\n'"
1240,7726083,numpy-gitbot,numpy-gitbot,2012-10-19 19:21:32,2012-10-19 19:21:33,2012-10-19 19:21:33,closed,,1.0.4,2,11 - Bug;component: Other;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1240,b'maskedarray concatenate does not handle nomask right (unlike numpy.core.ma) (Trac #642)',"b""_Original ticket http://projects.scipy.org/numpy/ticket/642 on 2008-01-09 by trac user bsulman, assigned to unknown._\n\nWhen concatenating masked arrays in maskedarray, if one array has mask nomask, all arrays after are treated as nomask.\n\nExample:\n\nIn [1]: import maskedarray as MA\n\nIn [2]: x=MA.zeros(5);y=MA.ones(5);m=MA.zeros(5);m[3]=1;y=MA.array(y,mask=m)\n\nIn [3]: MA.concatenate((x,y))\n\nOut[3]: masked_array(data = [ 0. 0. 0. 0. 0. 1. 1. 1. 1. 1.],\n\n    mask = False, fill_value=1e+20)\n\nIn [6]: MA.concatenate((y,x))\n\nOut[6]: masked_array(data = [1.0 1.0 1.0 -- 1.0 0.0 0.0 0.0 0.0 0.0],\n\n    mask = [False False False True False False False False False False], fill_value=1e+20)\n\nThe reason for this: in the code (branches/maskedarray/numpy/ma/core.py line 2735 as of revision 4625):\n\n...\n\n\n        # Check whether one of the arrays has a non-empty mask... \n        for x in arrays:\n    \n            if getmask(x) is not nomask:\n    \n                break\n    \n            return data\n    \n        # OK, so we have to concatenate the masks\n\n\n...\n\nThis returns the data as soon as it hits an array that has mask=nomask\n\n'return data' should be put in an else clause as appears in numpy.core.ma:\n\n\n        for x in arrays:\n    \n            if getmask(x) is not nomask: break\n    \n        else:\n    \n            return masked_array(d)\n\n\ncorrected maskedarray code:\n\n...\n\n\n        # Check whether one of the arrays has a non-empty mask...\n        for x in arrays:\n    \n            if getmask(x) is not nomask:\n    \n                break\n    \n        else:\n    \n            return data\n    \n        # OK, so we have to concatenate the masks\n\n\n...\n\nI filed this under scipy originally.  Looks like maskedarray was moved to numpy.  Sorry if this showed up twice for people."""
1239,7726080,numpy-gitbot,numpy-gitbot,2012-10-19 19:21:28,2012-10-19 19:21:31,2012-10-19 19:21:31,closed,,1.1.0,9,11 - Bug;component: numpy.core;priority: high,https://api.github.com/repos/numpy/numpy/issues/1239,"b'numpy.sqrt(numpy.array([-1.0], dtype=numpy.complex256)) segfaults (Trac #641)'","b'_Original ticket http://projects.scipy.org/numpy/ticket/641 on 2008-01-07 by @nilswagner01, assigned to unknown._\n\n\n\n\n    >>> numpy.sqrt(numpy.array([-1.0], dtype=numpy.complex256))\n    array([0.0+1.7100542e-4937j], dtype=complex256)\n    >>> numpy.sqrt(numpy.array([-1.0], dtype=numpy.complex256))\n    array([0.0+9.1807977e-4929j], dtype=complex256)\n    >>> numpy.sqrt(numpy.array([-1.0], dtype=numpy.complex256))\n    array([0.0+5.3847568e-4675j], dtype=complex256)\n    >>> numpy.sqrt(numpy.array([-1.0], dtype=numpy.complex256))\n    \n    Program received signal SIGSEGV, Segmentation fault.\n    [Switching to Thread 46912509653888 (LWP 17547)]\n    0x00002aaaab5a4c86 in __mpn_mul_1 () from /lib64/tls/libc.so.6\n    (gdb)\n    (gdb) bt\n    #0  0x00002aaaab5a4c86 in __mpn_mul_1 () from /lib64/tls/libc.so.6\n    #1  0x00002aaaab5ad355 in __printf_fp () from /lib64/tls/libc.so.6\n\n\n'"
1238,7726079,numpy-gitbot,numpy-gitbot,2012-10-19 19:21:24,2012-10-19 19:21:27,2012-10-19 19:21:27,closed,,1.6.0,6,11 - Bug;component: numpy.core;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1238,"b'Index assignment into pre-allocated array does silent type cast, causing user confusion (or worse) (Trac #640)'","b""_Original ticket http://projects.scipy.org/numpy/ticket/640 on 2008-01-04 by trac user brorson, assigned to unknown._\n\nNumPy gurus --\n\nI just discovered this today.  It looks like a bug to me.  Please\nflame me mercilessly if I am wrong!  :-)\n\nSometimes you need to initialize an array using zeros() before doing\nan assignment to it in a loop.  If you assign a complex value to the\ninitialized array, the imaginary part of the array is dropped.  Does\nNumPy do a silent type-cast which causes this behavior?  Is this\ntypecast a feature?\n\nBelow I attach a session log showing the bug.  Note that I have boiled\ndown my complex code to this simple case for ease of comprehension.  [1] \nI will also input this bug into the tracking system.\n\nBy the way, this is NumPy 1.0.4:\n\nIn [39]: numpy.__version__\nOut[39]: '1.0.4'\n\nCheers,\n\nStuart Brorson\nInteractive Supercomputing, inc.\n135 Beaver Street | Waltham | MA | 02452 | USA\nhttp://www.interactivesupercomputing.com/\n\n\n----------------------  <session log>  --------------------\n\nIn [29]: A = numpy.random.rand(4) + 1j*numpy.random.rand(4)\n\nIn [30]: B = numpy.zeros((4))\n\nIn [31]:\n\nIn [31]: for i in range(4):\n    ....:       B[i] = A[i]\n    ....:\n\nIn [32]: A\nOut[32]: \narray([ 0.12150180+0.00577893j,  0.39792515+0.03607227j,\n         0.61933379+0.04506978j,  0.56751678+0.24576083j])\n\nIn [33]: B\nOut[33]: array([ 0.1215018 ,  0.39792515,  0.61933379,  0.56751678])\n\n-----------------------  </session log>  -------------------\n\n\n[1]  Yes, I know that I should use vectorized code as often as\npossible, and that this example is not vectorized.  This is a simple\nexample illustrating the problem.  Moreover, many times the\ncomputation you wish to perform can't easily be vectorized, leaving\nthe nasty old for loop as the only choice......"""
1237,7726076,numpy-gitbot,numpy-gitbot,2012-10-19 19:21:21,2012-10-19 19:21:22,2012-10-19 19:21:22,closed,,1.1.0,2,11 - Bug;component: numpy.lib;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1237,b'test_format.py:283: ImportError: No module named nose.tools (Trac #639)',"b""_Original ticket http://projects.scipy.org/numpy/ticket/639 on 2008-01-02 by @nilswagner01, assigned to @teoliphant._\n\n\n\n\n    Warning: FAILURE importing tests for <module 'numpy.lib.format' from '...-packages/numpy/lib/format.pyc'>\n    /usr/local/lib64/python2.5/site-packages/numpy/lib/tests/test_format.py:283: ImportError: No module named nose.tools (in <module>)\n\n\n"""
1236,7726071,numpy-gitbot,numpy-gitbot,2012-10-19 19:21:15,2012-10-19 19:21:20,2012-10-19 19:21:20,closed,,1.1.0,13,11 - Bug;component: numpy.core;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1236,b'var should take absolute value for complex numbers. (Trac #638)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/638 on 2007-12-30 by trac user akumar, assigned to unknown._\n\nHi!\n\nI was just wondering why numpy.var gives me complex variances for complex numbers.\n\ne.g.\n\n\n\n    h1 = (randn(1000,1) + 1j *randn(1000,1)) / sqrt(2)\n    var(h1)\n\n\ngives: ` (-0.00757596036094-0.0234608549341j) `\n\nWhile I actually expect the output to be similar to that which is from\n\n\n    var(square(abs(h1)))\n\n\nwhich gives: ` 0.994899762171 `\n\nI feel this is an error, though I may be wrong. :-)\n\nThanks.\n\nKumar'"
1235,7726069,numpy-gitbot,numpy-gitbot,2012-10-19 19:21:13,2012-10-19 19:21:14,2012-10-19 19:21:14,closed,,1.1.0,2,11 - Bug;component: numpy.core;priority: low,https://api.github.com/repos/numpy/numpy/issues/1235,b'typo in scalarmathmodule.c.src for ctype_negative (Trac #637)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/637 on 2007-12-19 by trac user dpgrote, assigned to unknown._\n\nI believe there is a typo in scalarmathmodule.c.src at line 382, which defines uns. Should it be\n#uns=(0,1)*5,0*3#\nwith the 0 and 1 swapped, since the order of types in name gives the signed first, then unsigned.\n  Thanks!\n     Dave'"
1233,7726067,numpy-gitbot,numpy-gitbot,2012-10-19 19:21:07,2012-10-19 19:21:08,2012-10-19 19:21:08,closed,,1.1.0,2,11 - Bug;component: Official binaries;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1233,b'numpy-1.0.4 crashes when doing linalg.inv on P3 Windows machine.  Invalid op code. (Trac #635)',"b""_Original ticket http://projects.scipy.org/numpy/ticket/635 on 2007-12-18 by trac user brorson, assigned to @cournape._\n\nI have been testing numpy-1.0.4 on a variety of different machine configurations.  I have found a numpy crash in the following config:\n\nComputer = Dell OptiPlex GX1p\nProcessor = Intel Pentium 3,  family 6, model 7, stepping 3, revision E.\nOS = Win XP 32 bit\nPython-2.5.1 win 32 bit version (latest from python.org)\nnumpy-1.0.4\n\nThe following code causes a crash, handled by windows:\n\nimport numpy\nA = numpy.random.rand(100, 100)\nB = numpy.linalg.inv(A)\n---> crash here\n\nThe crash's error code indicates an illegal instruction (windows code 0xc000001d).\n\nInterestingly, Wiping the NumPy installation and installing numpy-1.0.3.1 works just fine.\n\nIt looks like you switched compile flags or even switched the compiler between 1.0.3.1 and 1.0.4, and the new compiler generates op codes which the P3 doesn't know about.\n"""
1232,7726066,numpy-gitbot,numpy-gitbot,2012-10-19 19:21:05,2012-10-19 19:21:06,2012-10-19 19:21:06,closed,,1.1.0,3,11 - Bug;component: Other;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1232,"b'masked array with dtype bool, sum to bool instead of int. (Trac #634)'","b'_Original ticket http://projects.scipy.org/numpy/ticket/634 on 2007-12-18 by trac user zongzhi.liu@..., assigned to unknown._\n\nmasked array with dtype bool, sum to bool instead of int.\na = array([True, False, True])\na.sum() # 2\n\nm = ma.array([True, False, True], mask=[False, False, False])\nm.sum() # True\n\nnumpy version 1.0.3.1\nLinux: Fedora 8\nIntel Pentium M 1.4G laptop (compaq presario X1000)'"
1231,7726061,numpy-gitbot,numpy-gitbot,2012-10-19 19:20:59,2012-10-19 19:21:03,2012-10-19 19:21:03,closed,,1.1.0,13,11 - Bug;component: numpy.core;priority: highest,https://api.github.com/repos/numpy/numpy/issues/1231,b'segfault in assignment to pyobject array (Trac #633)',"b""_Original ticket http://projects.scipy.org/numpy/ticket/633 on 2007-12-18 by trac user batripler, assigned to @teoliphant._\n\nEnter the following sequence:\n\n\n\n    >>> import numpy\n    >>> m=numpy.zeros(1000000, dtype='object')\n    >>> m[:]=1\n    >>> m[:]=1\n\n\n\nThe 2nd assignment (sometimes the 3rd) will cause a segfault. This occurs on numpy v1.0.4 and py v2.5.1 (installed from release binaries on Win32)."""
1230,7726057,numpy-gitbot,numpy-gitbot,2012-10-19 19:20:56,2012-10-19 19:20:58,2012-10-19 19:20:58,closed,,1.1.0,5,11 - Bug;component: numpy.lib;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1230,b'numpy.histogram fails with bin=<list> (Trac #632)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/632 on 2007-12-17 by trac user orbeckst, assigned to unknown._\n\nnumpy.histogram() in 1.0.4 (with python 2.3) fails if the argument to bins is a list:\n\n1) any() is not found[[BR]]\n2) exception at line 155, `if(any(bins[1:]-bins[:-1] < 0)):` \n\nSolution: two changes in _numpy/lib/function_base.py_:\n\n1) add\n\n\n    from numpy.core import any\n\n\nat the top of the file[[BR]]   \n2) change line 155 from[[BR]]\n\n\n    if(any(bins[1:]-bins[:-1] < 0)):\n\n\nto \n\n\n    if(any(asarray(bins[1:])-asarray(bins[:-1]) < 0)):\n\n\n'"
1229,7726055,numpy-gitbot,numpy-gitbot,2012-10-19 19:20:54,2012-10-19 19:20:55,2012-10-19 19:20:55,closed,,1.1.0,1,11 - Bug;component: numpy.linalg;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1229,b'incorrect description of numpy.linalg.pinv in linalg/info.py (Trac #631)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/631 on 2007-12-17 by @lebedov, assigned to unknown._\n\nThe function numpy.linalg.pinv uses svd. However, the doc string in linalg/info.py incorrectly describes the function as ""using lstsq."" '"
1228,7726053,numpy-gitbot,numpy-gitbot,2012-10-19 19:20:49,2012-10-19 19:20:53,2012-10-19 19:20:53,closed,,1.1.0,12,11 - Bug;component: numpy.core;priority: low,https://api.github.com/repos/numpy/numpy/issues/1228,"b""If float('123.45') works, so should numpy.float32('123.45') (Trac #630)""","b'_Original ticket http://projects.scipy.org/numpy/ticket/630 on 2007-12-16 by @astraw, assigned to unknown._\n\nWe should make a constructor that takes strings for the numpy scalar types. Note that float64() and int64() already do this.\n\nThis would let longdouble types be specified with all full precision.'"
1227,7726051,numpy-gitbot,numpy-gitbot,2012-10-19 19:20:43,2012-10-19 19:20:48,2012-10-19 19:20:48,closed,,1.3.0,12,11 - Bug;component: numpy.core;priority: high,https://api.github.com/repos/numpy/numpy/issues/1227,b'repr() fails on scalars (float64) (Trac #629)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/629 on 2007-12-15 by @astraw, assigned to @cournape._\n\nThe attached test fails, but I think it should pass.'"
1226,7726048,numpy-gitbot,numpy-gitbot,2012-10-19 19:20:40,2012-10-23 02:37:55,2012-10-19 19:20:42,closed,,1.1.0,5,11 - Bug;component: Official binaries;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1226,"b'polyfit uses 100% CPU and does not stop (Windows XP, Python 2.5.1 NumPy 1.0.4) (Trac #628)'","b'_Original ticket http://projects.scipy.org/numpy/ticket/628 on 2007-12-09 by trac user behrisch, assigned to @cournape._\n\nThe attached code shows the very same behavior as #1225, although I can confirm that it works with numpy 1.0.3 on the same machine with te same Python distribution. I used the binary packages from the sourceforge download site together with Python 2.5.1. I did not install any LAPACK or BLAS packages.\n\nFurthermore it works on openSUSE 10.3 with numpy 1.0.4, libblas3-3.1.1-29, liblapack3-3.1.1-29 (which may be another hint, that it is no duplicate of #1225)\n'"
1225,7726045,numpy-gitbot,numpy-gitbot,2012-10-19 19:20:33,2012-10-23 02:37:51,2012-10-19 19:20:39,closed,,1.1.0,16,11 - Bug;component: numpy.linalg;priority: high,https://api.github.com/repos/numpy/numpy/issues/1225,b'linalg.svd takes 100% CPU and never ends (Trac #627)',"b""_Original ticket http://projects.scipy.org/numpy/ticket/627 on 2007-12-09 by trac user Czarny, assigned to @cournape._\n\nWhen I call the svd function with an array it takes 100% of my CPU and never actually finishes the calculation. Python needs to get killed manually (Ctrl+C doesn't work as usually).\n\nI've tested that on:\nLinux:\nLinux kacper 2.6.22.10_laptop-0.6 #1 SMP PREEMPT Sun Oct 21 17:48:51 CEST 2007 i686 Intel(R)_Pentium(R)_M_processor_1.70GHz PLD Linux\npython-2.5.1-4.i686\npython-numpy-1.0.4-1.i686\n(I've tried with earlier 1.0.3.1 as well)\n\nWindows:\ni686\npython-2.5\npython-numpy-1.0.4\n\nI've used two scripts found on the net (google with 'svd python') and both behave in exactly the same way\nhttp://www.thescripts.com/forum/post1806623-4.html\nhttp://mail.python.org/pipermail/python-list/2006-November/412156.html"""
1223,7726039,numpy-gitbot,numpy-gitbot,2012-10-19 19:20:29,2012-10-19 19:20:29,2012-10-19 19:20:29,closed,,1.1.0,0,11 - Bug;component: numpy.testing;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1223,b'ImportError: No module named test_ufunc (Trac #625)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/625 on 2007-12-03 by @nilswagner01, assigned to @stefanv._\n\n\n\n\n    python -i /usr/local/lib64/python2.5/site-packages/numpy/core/tests/test_multiarray.py\n    Traceback (most recent call last):\n      File ""/usr/local/lib64/python2.5/site-packages/numpy/core/tests/test_multiarray.py"", line 538, in <module>\n        from test_ufunc import *\n    ImportError: No module named test_ufunc\n\n\n'"
1222,7726036,numpy-gitbot,numpy-gitbot,2012-10-19 19:20:27,2012-10-19 19:20:28,2012-10-19 19:20:28,closed,,1.1.0,1,11 - Bug;component: numpy.core;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1222,b'Statistics-related array method are not self-consistent. (Trac #624)',"b""_Original ticket http://projects.scipy.org/numpy/ticket/624 on 2007-12-03 by trac user usovalx, assigned to unknown._\n\nStatistincs-related array methods (mean, std) are not self-consistent.\nThe data-type of the result does not reflects the way calculations are done.\nConsider the example:\n\n\n\n    a = arange(1, 100, dtype=float32)\n    r1 = a.mean()\n    r2 = a.astype(float64).mean()\n    \n    print(type(r1), r1)\n    (<type 'numpy.float64'>, 0.052296744452582464)\n    \n    print(type(r2), r2)\n    (<type 'numpy.float64'>, 0.052296743192004433)\n\n\n\nBoth results have the same datatype, which is confusing. As the exact method of calculation differs (which might result in the dramatic differences in the results for some boundary cases).\n\nThings are even more confusing when we deal with integer arrays:\n\n\n    a = repeat(2147483647, 100)\n    print a.sum()\n    -100\n    print a.mean()\n    2147483647.0\n    print a.astype(float32).mean()\n    2147483648.0\n\n\n\nI believe the convention for the handling of intermediate variables should be clearly specified and obeyed.\n"""
1221,7726033,numpy-gitbot,numpy-gitbot,2012-10-19 19:20:24,2012-10-19 19:20:26,2012-10-19 19:20:26,closed,,1.1.0,5,11 - Bug;component: numpy.core;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1221,b'loadtxt fails with record arrays (Trac #623)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/623 on 2007-12-01 by trac user mstarzyk, assigned to unknown._\n\nHi, there is a problem with loading records via loadtxt(). See the example code below:\n\n\n\n    import numpy as N\n    import StringIO\n    \n    c = StringIO.StringIO()\n    c.write(\'1 2\\n3 4\')\n    N.loadtxt(c, dtype=[(\'x\', N.int32), (\'y\', N.int32)])\n\n\n\nThis raises the following exception:\n\n\n    Traceback (most recent call last):\n      File ""C:\\tmp\\aa.py"", line 6, in <module>\n        N.loadtxt(c, dtype=[(\'x\', N.int32), (\'y\', N.int32)])\n      File ""c:\\python25\\lib\\site-packages\\numpy-1.0.4-py2.5-win32.egg\\numpy\\core\\numeric.py"", line 726, in loadtxt\n        r,c = X.shape\n    ValueError: need more than 1 value to unpack\n\n'"
1219,7725543,numpy-gitbot,numpy-gitbot,2012-10-19 19:00:33,2012-10-22 14:31:27,2012-10-22 14:31:27,closed,,1.1.0,2,11 - Bug;component: numpy.f2py;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1219,b'wrapping f95 fails (Trac #621)',"b""_Original ticket http://projects.scipy.org/numpy/ticket/621 on 2007-11-23 by trac user jspaans, assigned to @jarrodmillman._\n\nWhen trying to wrap some fortran90 code on my platform (OS X, python2.5 from macports, gfortran 4.3, using numpy-latest downloaded today) I get an error which is fixed by applying the following (obvious) patch:\n\n\n\n    --- /opt/local/lib/python2.5/site-packages/numpy/f2py/rules.py~\t2007-11-23 17:36:11.000000000 +0100\n    +++ /opt/local/lib/python2.5/site-packages/numpy/f2py/rules.py\t2007-11-23 17:36:11.000000000 +0100\n    @@ -1219,7 +1219,7 @@\n             f.write('!     This file is autogenerated with f2py (version:%s)\\n'%(f2py_version))\n             f.write('!     It contains Fortran 90 wrappers to fortran functions.\\n')\n             lines = []\n    -        for l in '\\n\\n'.join(funcwrappers2)+'\\n'.split('\\n'):\n    +        for l in ('\\n\\n'.join(funcwrappers2)+'\\n').split('\\n'):\n                 if len(l)>72 and l[0]==' ':\n                     lines.append(l[:72]+'&\\n     &')\n                     l = l[72:]\n\n"""
1218,7725540,numpy-gitbot,numpy-gitbot,2012-10-19 19:00:30,2012-10-19 19:00:32,2012-10-19 19:00:32,closed,,1.1.0,3,11 - Bug;component: Other;priority: high,https://api.github.com/repos/numpy/numpy/issues/1218,b'Error in the typemaps in numpy.i (Trac #620)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/620 on 2007-11-23 by trac user matthieu.brucher, assigned to @stefanv._\n\nSome typemaps are not C89 compatible (variables are declared inside a block and not at its beginning).\nFor instance :\n\n%typemap(in)\n  (DATA_TYPE IN_ARRAY1[ANY])\n  (PyArrayObject* array=NULL, int is_new_object=0)\n{\n  array = obj_to_array_contiguous_allow_conversion($input, DATA_TYPECODE, &is_new_object);\n  npy_intp size[1] = { $1_dim0 };\n  if (!array || !require_dimensions(array, 1) || !require_size(array, size, 1)) SWIG_fail;\n  $1 = ($1_ltype) array_data(array);\n}\n\nsize should have been declared first.'"
1216,7725536,numpy-gitbot,numpy-gitbot,2012-10-19 19:00:18,2012-10-19 19:00:20,2012-10-19 19:00:20,closed,,1.1.0,3,11 - Bug;component: numpy.core;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1216,b'numpy freebsd fix (Trac #618)',"b""_Original ticket http://projects.scipy.org/numpy/ticket/618 on 2007-11-21 by trac user hawking, assigned to unknown._\n\nAttached patch allows numpy to work on freebsd. Note that it will still compile\nwithout the patch, but tests fail and it is not usable. There's also a similar\n[http://www.freebsd.org/cgi/cvsweb.cgi/ports/math/py-numpy/files/patch-numpy-core-include-numpy-ufuncobject.h patch] in freebsd ports but it doesn't fix all problems. Patch was written\nby Joe Peterson.\n\n"""
1215,7725534,numpy-gitbot,numpy-gitbot,2012-10-19 19:00:16,2012-10-19 19:00:16,2012-10-19 19:00:16,closed,,1.1.0,1,11 - Bug;component: numpy.random;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1215,b'numpy.random.randint error with negative numbers (Trac #617)',"b""_Original ticket http://projects.scipy.org/numpy/ticket/617 on 2007-11-20 by trac user fawzi, assigned to @stefanv._\n\nimport numpy.random\n\nprint repr(numpy.random.randint(-3,-1))\n\nwill print a large positive number (as 4294967293L)\n\nobviously negative 32 bit number interpreted as a positive 64bit number.\n\n>>> numpy.version.version\n'1.0.3.1'\nPython 2.5 (r25:51918, Sep 19 2006, 08:49:13) \n[GCC 4.0.1 (Apple Computer, Inc. build 5341)] on darwin\nMacOSX 10.4.10\nIntel Core 2 Duo\n\nFawzi"""
1214,7725533,numpy-gitbot,numpy-gitbot,2012-10-19 19:00:14,2012-10-19 19:00:14,2012-10-19 19:00:14,closed,,1.1.0,1,11 - Bug;component: numpy.core;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1214,b'arange: incorrect output byteorder (Trac #616)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/616 on 2007-11-17 by @stefanv, assigned to @stefanv._\n\nSebastian Haase found the following bug:\n\n\n\n    >> a = N.arange(.5, dtype="">f"")\n    >>> `a.dtype`\n    \'dtype(\'float32\')\'\n    >>> a = N.arange(.5, dtype=""<f"")\n    >>> `a.dtype`\n    \'dtype(\'float32\')\'\n\n'"
1213,7725532,numpy-gitbot,numpy-gitbot,2012-10-19 19:00:11,2012-10-23 02:37:35,2012-10-19 19:00:12,closed,,1.1.0,2,11 - Bug;component: numpy.core;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1213,b'numpy.array([])[arange(10000)>=0] = 123 segfaults (Trac #615)',"b""_Original ticket http://projects.scipy.org/numpy/ticket/615 on 2007-11-15 by trac user rauli, assigned to unknown._\n\narray([])[arange(10000)>=0] = 123 segfaults; apparently boolean array indices are used unchecked. array([])[arange(10000)] instead raises IndexError as expected. This happens on\nUbuntu Feisty x86-32, numpy 1.0.1 as well as 1.0.4, and Ubuntu Gutsy x86-64 with numpy 1.0.3.\nI haven't tested it with the trunk.\n"""
1212,7725529,numpy-gitbot,numpy-gitbot,2012-10-19 19:00:08,2012-10-19 19:00:10,2012-10-19 19:00:10,closed,,1.1.0,4,11 - Bug;component: numpy.core;priority: high,https://api.github.com/repos/numpy/numpy/issues/1212,b'SegFault/double free with simple array mask operation (Trac #614)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/614 on 2007-11-15 by trac user AchimGaedke, assigned to @stefanv._\n\nPlease have a look at the program below:\n\n# start\nimport numpy\n\nt_array=numpy.ones(2048, dtype=numpy.float32)\nsinc_array=numpy.array((len(t_array),),dtype=numpy.float32)\nsinc_array[(t_array > 0.)]=1.0\n# end\n\nIf you execute this program, it crashes with Segmentation Fault or\n*** glibc detected *** python: double free or corruption (out): \n0x081fe470 ***\n\nIt depends on the circumstances, which error occurs, e.g. you must quit \nyour interpreter if you are in interactvie mode.\n\nObviously numpy.array() should be numpy.zeros() or numpy.empty() .... \nBut this program should not crash with a core dump.\n\nUsed Linux Versions are:\nDebian Testing with numpy 1.0.3,\nDebian Stable with numpy 1.0.1,\nUbuntu Linux 6.10 with numpy 1.0\nAlso numpy-1.0.4 crashes.\n(The trac system does not know these versions?!)'"
1211,7725527,numpy-gitbot,numpy-gitbot,2012-10-19 19:00:05,2012-10-19 19:00:07,2012-10-19 19:00:07,closed,,1.1.0,1,11 - Bug;component: numpy.core;priority: low,https://api.github.com/repos/numpy/numpy/issues/1211,"b'resize on an empty array fails in some cases, very weird (Trac #613)'","b'_Original ticket http://projects.scipy.org/numpy/ticket/613 on 2007-11-14 by @tovrstra, assigned to unknown._\n\nThe problem is rather simple and probably not hurting many people. This works:\n\n\n\n    >>> a = numpy.zeros(0)\n    >>> a.resize(5)\n    >>> a\n    array([ 0.,  0.,  0.,  0.,  0.])\n\n\n\nThis doesn\'t:\n\n\n\n    >>> a = numpy.zeros(0)\n    >>> a\n    array([], dtype=float64)\n    >>> a.resize(5)\n    Traceback (most recent call last):\n      File ""<stdin>"", line 1, in ?\n    ValueError: cannot resize an array that has been referenced or is referencing\n    another array in this way.  Use the resize function\n\n\n\nI\'m not sure whether this is a real problem, but it is at least a bit confusing.'"
1210,7725522,numpy-gitbot,numpy-gitbot,2012-10-19 19:00:02,2012-10-19 19:00:04,2012-10-19 19:00:04,closed,,1.1.0,3,11 - Bug;component: Other;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1210,b'NumPy 1.0.4 fails to compile on Cygwin (Trac #612)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/612 on 2007-11-14 by @mdehoon, assigned to unknown._\n\nThis is the output I get:\n\n$ python setup.py build\nRunning from numpy source directory.\nnon-existing path in \'numpy/distutils\': \'site.cfg\'\nF2PY Version 2_4422\nblas_opt_info:\nblas_mkl_info:\n  libraries mkl,vml,guide not found in /usr/local/lib\n  libraries mkl,vml,guide not found in /usr/lib\n  NOT AVAILABLE\n\natlas_blas_threads_info:\nSetting PTATLAS=ATLAS\n  libraries ptf77blas,ptcblas,atlas not found in /usr/local/lib\n  libraries ptf77blas,ptcblas,atlas not found in /usr/lib\n  NOT AVAILABLE\n\natlas_blas_info:\n  libraries f77blas,cblas,atlas not found in /usr/local/lib\n  libraries f77blas,cblas,atlas not found in /usr/lib\n  NOT AVAILABLE\n\n/home/mdehoon/Software/numpy-1.0.4/numpy/distutils/system_info.py:1340: UserWarn\ning:\n    Atlas (http://math-atlas.sourceforge.net/) libraries not found.\n    Directories to search for the libraries can be specified in the\n    numpy/distutils/site.cfg file (section [atlas]) or by setting\n    the ATLAS environment variable.\n  warnings.warn(AtlasNotFoundError.__doc__)\nblas_info:\n  libraries blas not found in /usr/local/lib\n  libraries blas not found in /usr/lib\n  NOT AVAILABLE\n\n/home/mdehoon/Software/numpy-1.0.4/numpy/distutils/system_info.py:1349: UserWarn\ning:\n    Blas (http://www.netlib.org/blas/) libraries not found.\n    Directories to search for the libraries can be specified in the\n    numpy/distutils/site.cfg file (section [blas]) or by setting\n    the BLAS environment variable.\n  warnings.warn(BlasNotFoundError.__doc__)\nblas_src_info:\n  NOT AVAILABLE\n\n/home/mdehoon/Software/numpy-1.0.4/numpy/distutils/system_info.py:1352: UserWarn\ning:\n    Blas (http://www.netlib.org/blas/) sources not found.\n    Directories to search for the sources can be specified in the\n    numpy/distutils/site.cfg file (section [blas_src]) or by setting\n    the BLAS_SRC environment variable.\n  warnings.warn(BlasSrcNotFoundError.__doc__)\n  NOT AVAILABLE\n\nlapack_opt_info:\nlapack_mkl_info:\nmkl_info:\n  libraries mkl,vml,guide not found in /usr/local/lib\n  libraries mkl,vml,guide not found in /usr/lib\n  NOT AVAILABLE\n\n  NOT AVAILABLE\n\natlas_threads_info:\nSetting PTATLAS=ATLAS\n  libraries ptf77blas,ptcblas,atlas not found in /usr/local/lib\n  libraries lapack_atlas not found in /usr/local/lib\n  libraries ptf77blas,ptcblas,atlas not found in /usr/lib\n  libraries lapack_atlas not found in /usr/lib\nnumpy.distutils.system_info.atlas_threads_info\n  NOT AVAILABLE\n\natlas_info:\n  libraries f77blas,cblas,atlas not found in /usr/local/lib\n  libraries lapack_atlas not found in /usr/local/lib\n  libraries f77blas,cblas,atlas not found in /usr/lib\n  libraries lapack_atlas not found in /usr/lib\nnumpy.distutils.system_info.atlas_info\n  NOT AVAILABLE\n\n/home/mdehoon/Software/numpy-1.0.4/numpy/distutils/system_info.py:1247: UserWarn\ning:\n    Atlas (http://math-atlas.sourceforge.net/) libraries not found.\n    Directories to search for the libraries can be specified in the\n    numpy/distutils/site.cfg file (section [atlas]) or by setting\n    the ATLAS environment variable.\n  warnings.warn(AtlasNotFoundError.__doc__)\nlapack_info:\n  libraries lapack not found in /usr/local/lib\n  libraries lapack not found in /usr/lib\n  NOT AVAILABLE\n\n/home/mdehoon/Software/numpy-1.0.4/numpy/distutils/system_info.py:1258: UserWarn\ning:\n    Lapack (http://www.netlib.org/lapack/) libraries not found.\n    Directories to search for the libraries can be specified in the\n    numpy/distutils/site.cfg file (section [lapack]) or by setting\n    the LAPACK environment variable.\n  warnings.warn(LapackNotFoundError.__doc__)\nlapack_src_info:\n  NOT AVAILABLE\n\n/home/mdehoon/Software/numpy-1.0.4/numpy/distutils/system_info.py:1261: UserWarn\ning:\n    Lapack (http://www.netlib.org/lapack/) sources not found.\n    Directories to search for the sources can be specified in the\n    numpy/distutils/site.cfg file (section [lapack_src]) or by setting\n    the LAPACK_SRC environment variable.\n  warnings.warn(LapackSrcNotFoundError.__doc__)\n  NOT AVAILABLE\n\nrunning build\nrunning config_cc\nunifing config_cc, config, build_clib, build_ext, build commands --compiler opti\nons\nrunning config_fc\nunifing config_fc, config, build_clib, build_ext, build commands --fcompiler opt\nions\nrunning build_src\nbuilding py_modules sources\nbuilding extension ""numpy.core.multiarray"" sources\nGenerating build/src.cygwin-1.5.24-i686-2.5/numpy/core/config.h\ncustomize GnuFCompiler\nCould not locate executable g77\nCould not locate executable f77\ncustomize IntelVisualFCompiler\nCould not locate executable ifl\ncustomize AbsoftFCompiler\nCould not locate executable f90\ndon\'t know how to compile Fortran code on platform \'posix\' with \'compaqv\' compil\ner. Supported compilers are: none,absoft,compaq,gnu,vast,sun,nag,lahey,intelem,g\nnu95,intelv,g95,intele,pg,intel,mips,hpux,intelev,ibm)\nTraceback (most recent call last):\n  File ""setup.py"", line 89, in <module>\n    setup_package()\n  File ""setup.py"", line 82, in setup_package\n    configuration=configuration )\n  File ""/home/mdehoon/Software/numpy-1.0.4/numpy/distutils/core.py"", line 176, i\nn setup\n    return old_setup(**new_attr)\n  File ""/tmp/python.6884/usr/lib/python2.5/distutils/core.py"", line 151, in setu\np\n  File ""/tmp/python.6884/usr/lib/python2.5/distutils/dist.py"", line 974, in run_\ncommands\n  File ""/tmp/python.6884/usr/lib/python2.5/distutils/dist.py"", line 994, in run_\ncommand\n  File ""/tmp/python.6884/usr/lib/python2.5/distutils/command/build.py"", line 112\n, in run\n  File ""/usr/lib/python2.5/cmd.py"", line 333, in run_command\n    del help[cmd]\n  File ""/tmp/python.6884/usr/lib/python2.5/distutils/dist.py"", line 994, in run_\ncommand\n  File ""/home/mdehoon/Software/numpy-1.0.4/numpy/distutils/command/build_src.py""\n, line 130, in run\n    self.build_sources()\n  File ""/home/mdehoon/Software/numpy-1.0.4/numpy/distutils/command/build_src.py""\n, line 147, in build_sources\n    self.build_extension_sources(ext)\n  File ""/home/mdehoon/Software/numpy-1.0.4/numpy/distutils/command/build_src.py""\n, line 250, in build_extension_sources\n    sources = self.generate_sources(sources, ext)\n  File ""/home/mdehoon/Software/numpy-1.0.4/numpy/distutils/command/build_src.py""\n, line 307, in generate_sources\n    source = func(extension, build_dir)\n  File ""numpy/core/setup.py"", line 51, in generate_config_h\n    library_dirs = default_lib_dirs)\n  File ""/tmp/python.6884/usr/lib/python2.5/distutils/command/config.py"", line 27\n8, in try_run\n  File ""/home/mdehoon/Software/numpy-1.0.4/numpy/distutils/command/config.py"", l\nine 31, in _check_compiler\n    c_compiler=self.compiler)\n  File ""/home/mdehoon/Software/numpy-1.0.4/numpy/distutils/fcompiler/__init__.py\n"", line 809, in new_fcompiler\n    c_compiler=c_compiler)\n  File ""/home/mdehoon/Software/numpy-1.0.4/numpy/distutils/fcompiler/__init__.py\n"", line 791, in get_default_fcompiler\n    c_compiler=c_compiler)\n  File ""/home/mdehoon/Software/numpy-1.0.4/numpy/distutils/fcompiler/__init__.py\n"", line 740, in _find_existing_fcompiler\n    c.customize(dist)\nAttributeError: \'NoneType\' object has no attribute \'customize\'\n'"
1209,7725520,numpy-gitbot,numpy-gitbot,2012-10-19 18:59:59,2012-10-19 19:00:00,2012-10-19 19:00:00,closed,,1.1.0,3,11 - Bug;component: numpy.core;priority: highest,https://api.github.com/repos/numpy/numpy/issues/1209,b'[Vista - NPY_OWNDATA] data created in C code deleted on return to python (Trac #611)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/611 on 2007-11-09 by trac user chafporte, assigned to @cournape._\n\nI create an array in C.\nI prepare it to be handled by numpy and python,\nI set the flag NPY_OWNDATA.\nthen when it exits the C code and return to python,\nthe array is correctly handled by numpy and python.\nThis works perfectly on every platform (linux, macosx, XP, windows 2000)\n\n... but not on VISTA. where the array is deleted right away.\n'"
1207,7725514,numpy-gitbot,numpy-gitbot,2012-10-19 18:59:55,2012-10-19 18:59:56,2012-10-19 18:59:56,closed,,1.1.0,1,11 - Bug;component: numpy.linalg;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1207,b'numpy/linalg/lapack_litemodule.c:lapack_lite_zgeqrf int vs. long (Trac #609)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/609 on 2007-11-08 by trac user kjetijor, assigned to unknown._\n\nWhen building numpy 1.0.4 (and for that matter 1.0.3.1, 1.0.2 and svn-trunk) on x86_64 some of my users had trouble with numpy.linalg.qr for matrices containing complex numbers.\n\nAfter a little bit of testing and digging I ended up doing the following, in changeset:3850 and changeset:3851 parsing of arguments to zgeqrf was changed to take integer-values instead of long-values, however in the return-statement for Py_BuildValue it\'s still using long-values which seems to break on my x86_64 boxes with various pythons and various distros. (Example would be CentOS 5, x86_64 and Python 2.4.3)\n\nnumpy.linalg.qr(numpy.array([[1.0j,2],[3,4]])) will raise LinAlgError with ""numpy.linalg.linalg.LinAlgError: zgeqrf returns 18038862643""\n\nWhat I ended up doing was changing the return-statement for numpy/linalg/lapack_litemodule.c:lapack_lite_zgeqrf\n\nreturn Py_BuildValue(""{s:i,s:i,s:i,s:i,s:i,s:i}"", .....) instead of\nreturn Py_BuildValue(""{s:l,s:l,s:l,s:l,s:l,s:l}"", .....)\n\nWhat also seemed to work were to leave the conversions as long\'s and cast the values to/as long.\n\nGiven that I don\'t really know the inner workings of numpy all that well, this may of course be badness, although apparently it seemed to fix my problem.'"
1205,7725512,numpy-gitbot,numpy-gitbot,2012-10-19 18:59:50,2012-10-19 18:59:52,2012-10-19 18:59:52,closed,,1.1.0,5,11 - Bug;component: numpy.core;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1205,b'segfault from particular indexing of empty array (Trac #607)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/607 on 2007-11-06 by @efiring, assigned to unknown._\n\nThe following causes a segfault upon execution as a script:\n\nimport numpy\nu = numpy.array([])\ng = numpy.array([True, True])\nu[g] = 0\n\nSee the thread starting with\nhttp://projects.scipy.org/pipermail/numpy-discussion/2007-November/029801.html'"
1204,7725511,numpy-gitbot,numpy-gitbot,2012-10-19 18:59:48,2012-10-19 18:59:49,2012-10-19 18:59:49,closed,,1.0.4,1,11 - Bug;component: numpy.distutils;priority: high,https://api.github.com/repos/numpy/numpy/issues/1204,b'ImportError: No module named distutils.ccompiler (Trac #606)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/606 on 2007-11-05 by @nilswagner01, assigned to @dmcooke._\n\nI cannot install the latest svn version of numpy. I am using python2.3 on x86_64.\n\n\n    python setup.py install --prefix=$HOME/local\n    Running from numpy source directory.\n    Traceback (most recent call last):\n      File ""setup.py"", line 90, in ?\n        setup_package()\n      File ""setup.py"", line 62, in setup_package\n        from numpy.distutils.core import setup\n      File ""/data/home/nwagner/svn/numpy/numpy/distutils/__init__.py"", line 6, in ?\n        import ccompiler\n      File ""/data/home/nwagner/svn/numpy/numpy/distutils/ccompiler.py"", line 6, in ?\n        from distutils.ccompiler import *\n    ImportError: No module named distutils.ccompiler\n\n\n'"
1203,7725506,numpy-gitbot,numpy-gitbot,2012-10-19 18:59:44,2012-10-23 02:37:33,2012-10-19 18:59:47,closed,,1.2.0,10,11 - Bug;component: numpy.lib;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1203,b'Incorrect behaviour of numpy.histogram (Trac #605)',"b""_Original ticket http://projects.scipy.org/numpy/ticket/605 on 2007-11-04 by trac user Elby, assigned to unknown._\n\nThe behavior of numpy.histogram is not consistent with its doc string :\n - doc string says that, with a range argument, values outside of this range are allocated to the closest bin.\n - in fact values below the range are simply ignored.\n\nThere was a discussion on this subject on the scipy.user mailing list: http://groups.google.com/group/scipy-user/browse_frm/thread/3b3166e2200f846b/d6040fb6b659c6dd?hl=fr&lnk=gst&q=histogram#d6040fb6b659c6dd \n\nIMHO, the current behavior of numpy.histogram, that is assuming that values below the range are outliers, is not what a neophyte is waiting for, and should be clearly stated.\n\nBesides, the user should have the possibility to choose what to do with values outside the range : just ignoring them is not a good idea in most of the case I've seen.\n\n """
1202,7725504,numpy-gitbot,numpy-gitbot,2012-10-19 18:59:42,2012-10-19 18:59:43,2012-10-19 18:59:43,closed,,1.0.4,1,11 - Bug;component: numpy.core;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1202,b'array creation does not work with generators (Trac #604)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/604 on 2007-11-03 by trac user chtito, assigned to unknown._\n\nI think that `array(n**2 for n in range(10))` should create an array with ten elements. Right now it creates an array with only one generator object which is not consistent with the behaviour for lists. Indeed, `array([n**2 for n in range(10)])` creates an array with ten elements instead of an array of one list object.\n'"
1201,7725502,numpy-gitbot,numpy-gitbot,2012-10-19 18:59:39,2012-10-19 18:59:41,2012-10-19 18:59:41,closed,,1.1.0,6,11 - Bug;component: numpy.core;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1201,"b'numpy 1.0.3.1, python crash when indexing an array with a int32 ndarray (see example) (Trac #603)'","b'_Original ticket http://projects.scipy.org/numpy/ticket/603 on 2007-10-29 by trac user djkawa, assigned to @jarrodmillman._\n\n>>> import numpy\n>>> from numpy import array\n>>> array = array([0.0], dtype = numpy.float64)\n>>> index = array([0.0], dtype = numpy.int32)\n>>> cum_var[index]\narray([ 0.])\n>>> index = array(0., dtype = numpy.int32)\n>>> cum_var[index]\n\n----> CRASH'"
1200,7725500,numpy-gitbot,numpy-gitbot,2012-10-19 18:59:36,2012-10-19 18:59:37,2012-10-19 18:59:37,closed,,1.0.4,1,11 - Bug;component: numpy.core;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1200,b'Memory leak in ufunc_update_use_defaults (Trac #602)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/602 on 2007-10-28 by trac user langner, assigned to unknown._\n\nA missing Py_DECREF(errobj) in ufunc_update_use_defaults (ufuncobject.c) causes references to cumulate and memory to leak. The function is called by ufunc_seterr, which is called for instance when formatting float arrays (from the method FloatFormat.fillFormat). Resident process memory grows rapidly due to this, for instance in the loop:\n\n\n\n\n    while True:\n        s = numpy.array([1.0]).__str__()\n\n\n\nPatch for r4210 of trunk/numpy/core/src/ufuncobject.c:\n3206a3207\n>     Py_DECREF(errobj);\n\nThis has been discussed on the list:\nhttp://projects.scipy.org/pipermail/numpy-discussion/2007-October/029667.html http://projects.scipy.org/pipermail/numpy-discussion/2007-October/029669.html'"
1198,7725493,numpy-gitbot,numpy-gitbot,2012-10-19 18:59:29,2012-10-19 18:59:31,2012-10-19 18:59:31,closed,,1.0.4,2,11 - Bug;component: numpy.core;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1198,b'Cannot load numpy.unicode_ dumped by cPickle (Trac #600)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/600 on 2007-10-26 by trac user Kaloo, assigned to unknown._\n\nThe following code is crashing (dumping a unicode field of a ndArray, then loading it) :\n\n\n\n    import numpy\n    import cPickle\n    titi = numpy.array([""DROND"", ""DROND1""], dtype=""<U6"", order=""FORTRAN"")\n    toto = titi[1]\n    f = open(""c:/toto.txt"", ""w"")\n    cPickle.dump(toto, f)\n    f.close()\n    f = open(""c:/toto.txt"", ""r"")\n    t = cPickle.load(f)\n\n\n\nError is :\n__File ""<interactive input>"", line 1, in <module>__\n\n__ValueError: (\'initialization string is too small\', <built-in function scalar>, (dtype(\'<U6\'), \'D\\x00R\\x00O\\x00N\\x00D\\x001\\x00\'))__\n\nWith Python 2.5, numpy 1.0.3.1, on Windows XP'"
1197,7725488,numpy-gitbot,numpy-gitbot,2012-10-19 18:59:27,2012-10-19 18:59:28,2012-10-19 18:59:28,closed,,1.0.4,2,11 - Bug;component: numpy.core;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1197,b'Possible error in fromnumeric.py:_wrapit for nonarray types (Trac #599)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/599 on 2007-10-24 by trac user dharland, assigned to unknown._\n\nBy chance I noticed this odd looking snippet of code in _wrapit.\n\n\n\n        if wrap and isinstance(result, mu.ndarray):\n            if not isinstance(result, mu.ndarray):  # - SURELY THIS CAN NEVER BE TRUE?!\n                result = asarray(result)\n            result = wrap(result)\n\n\n\nShould this instead be?\n\n\n\n        if wrap:\n            if not isinstance(result, mu.ndarray):\n                result = asarray(result)\n            result = wrap(result)\n\n\n\n'"
1196,7725485,numpy-gitbot,numpy-gitbot,2012-10-19 18:59:23,2012-10-19 18:59:26,2012-10-19 18:59:26,closed,,1.0.4,7,11 - Bug;component: Other;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1196,"b'incorrect behaviour with ( ""%d""%a[i]) on uint64 (Trac #598)'","b'_Original ticket http://projects.scipy.org/numpy/ticket/598 on 2007-10-22 by trac user gregsmith_to, assigned to unknown._\n\n\n\n    #!python\n    >>> a\n    array([18446744073709551615, 18446744073709551615], dtype=uint64)\n    >>> ""%d"" % a[0]\n    \'-1\'\n    >>> ""%u"" % a[0]\n    \'-1\'\n    >>> ""%x"" % a[0]\n    \'-1\'\n\n\nThis occurs on 64 and 32 bit machines. Sorry for posting against an older version, can\'t find a ticket for this issue though. It used to be that hex(a[0]) would give you \'-0x1\' here, but that was fixed by 1.02 whilst this remains.\n\nWorkaround: ""%d"" % long(a[0]) or ""%s"" % a[0]\n'"
1195,7725484,numpy-gitbot,numpy-gitbot,2012-10-19 18:59:21,2012-10-19 18:59:22,2012-10-19 18:59:22,closed,,1.1.0,3,11 - Bug;component: Other;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1195,b'assigning negative # to a uint64 array element gives wrong answer on 32-bit machine (Trac #597)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/597 on 2007-10-22 by trac user gregsmith_to, assigned to unknown._\n\n\n\n    #!python\n    a = numpy.zeros((2,), numpy.uint64)\n    a[0] = -1234567\n    a\n    array([18446744073709551615,                    0], dtype=uint64)\n\n\nThe right answer is 18446744073708317049 (to be consistent with the uint32 behaviour anyway). The value you get (184...615) is the largest possible uint64.\n\nFailure does not occur on a 64-bit machine.\nSorry for posting against an older version; I could not find any tickets for this issue so it may remain.\n\n\n'"
1194,7725481,numpy-gitbot,numpy-gitbot,2012-10-19 18:59:17,2012-10-19 18:59:19,2012-10-19 18:59:19,closed,,1.1.0,9,11 - Bug;component: numpy.distutils;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1194,"b""setuptools' develop mode broken (Trac #596)""","b'_Original ticket http://projects.scipy.org/numpy/ticket/596 on 2007-10-21 by @astraw, assigned to @dmcooke._\n\nAs of svn 4271, I could not get the numpy.scons branch to install using the develop mode of setuptools:\n\nSteps to reproduce:\n\n0. `svn co http://svn.scipy.org/svn/numpy/branches/numpy.scons`\n\n1. `python setup.py build` (may not be neccessary, but I did it)\n\n2. Attempt to install using setuptools\' develop mode (set `sys.argv[0], __name__, __main__` to their expected values in case setup.py introspect these)\n`python -c ""import numpy.distutils, setuptools, sys;f=\'setup.py\';sys.argv[0]=f;execfile(f,{\'__file__\':f,\'__name__\':\'__main__\'})"" develop`\n\n3. `python setupegg.py develop` also breaks, and there\'s a fairly load warning about numpy.distutils not being imported.\n\nThe error I get:\n\n\n    Traceback (most recent call last):\n      File ""<string>"", line 1, in <module>\n      File ""setup.py"", line 90, in <module>\n        setup_package()\n      File ""setup.py"", line 83, in setup_package\n        configuration=configuration )\n      File ""/home/astraw/other-peoples-src/numpy.svn.scons/numpy/distutils/core.py"", line 182, in setup\n        return old_setup(**new_attr)\n      File ""distutils/core.py"", line 151, in setup\n      File ""distutils/dist.py"", line 974, in run_commands\n      File ""distutils/dist.py"", line 994, in run_command\n      File ""/usr/lib/python2.5/site-packages/setuptools/command/develop.py"", line 26, in run\n        self.install_for_development()\n      File ""/usr/lib/python2.5/site-packages/setuptools/command/develop.py"", line 81, in install_for_development\n        self.process_distribution(None, self.dist, not self.no_deps)\n      File ""/usr/lib/python2.5/site-packages/setuptools/command/easy_install.py"", line 497, in process_distribution\n        self.install_egg_scripts(dist)\n      File ""/usr/lib/python2.5/site-packages/setuptools/command/develop.py"", line 111, in install_egg_scripts\n        script_path = os.path.abspath(convert_path(script_name))\n      File ""/usr/lib/python2.5/posixpath.py"", line 402, in abspath\n        if not isabs(path):\n      File ""/usr/lib/python2.5/posixpath.py"", line 49, in isabs\n        return s.startswith(\'/\')\n    AttributeError: \'function\' object has no attribute \'startswith\'\n\n\n\nThanks so far for your work on the scons branch -- I hope I can get it to work soon!'"
1192,7725476,numpy-gitbot,numpy-gitbot,2012-10-19 18:59:12,2012-10-19 18:59:13,2012-10-19 18:59:13,closed,,1.1.0,3,11 - Bug;component: numpy.core;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1192,"b""Major slowdown when mixing array with Python's list (Trac #594)""","b""_Original ticket http://projects.scipy.org/numpy/ticket/594 on 2007-10-20 by trac user Boris, assigned to unknown._\n\nI encountered a major slowdown every time I use a simple Python list with an array function. Here is an example which occurs quite often in my code:\n\n\n    t1 = Timer(setup='from numpy import *; x=arange(1,100); k=array([97,43,3,6,23,0])', stmt='x[k]')\n    t1.timeit(10000)\n    =0.029493949996\n    \n    t2 = Timer(setup='from numpy import *; x=arange(1,100); k=[97,43,3,6,23,0]', stmt='x[k]')\n    t2.timeit(10000)\n    =0.177627355842\n\n\nI would expect that t2 is as fast as t1. \nUsing an array instead of the list is also no option since I create this index lists very often and \n\n\n    k=[97,43,3,6,23,0]\n\n\nis a lot faster than\n\n\n    k=array([97,43,3,6,23,0])\n\n\nThis slowdown also occurs with other functions, e.g. sum, sort."""
1190,7725469,numpy-gitbot,numpy-gitbot,2012-10-19 18:59:07,2012-10-19 18:59:08,2012-10-19 18:59:08,closed,,,2,11 - Bug;component: Other;priority: highest,https://api.github.com/repos/numpy/numpy/issues/1190,b'numpy-1.0.4.dev3947 segfaults on |= for largish array sizes (Trac #592)',"b""_Original ticket http://projects.scipy.org/numpy/ticket/592 on 2007-10-16 by trac user AaronParsons, assigned to @teoliphant._\n\nI'm on Fedora Core 7, running Python 2.5 with numpy-1.0.4.dev3947.\nThe following:\n\n\n    >>> import numpy\n    >>> a = numpy.zeros((484,256))\n    >>> a |= numpy.ones((484,256))\n\n\nSegfaults\n\nExpected behavior:\n\n\n    TypeError: unsupported operand type(s) for |: 'float' and 'float'\n\n\n\nSeems to be array size dependent."""
1188,7725462,numpy-gitbot,numpy-gitbot,2012-10-19 18:59:01,2012-10-19 18:59:03,2012-10-19 18:59:03,closed,,1.0.4,3,11 - Bug;component: numpy.core;priority: high,https://api.github.com/repos/numpy/numpy/issues/1188,b'arr.max() does not always return maximum (Trac #590)',"b""_Original ticket http://projects.scipy.org/numpy/ticket/590 on 2007-10-10 by @stefanv, assigned to unknown._\n\n(See attachment for data)\n\n\n\n    import numpy as N\n    z = N.fromfile('z.dat',sep=' ')\n    print z.max(), z[z > z.max()]\n\n\n\n\n\n    0.149478116585 [ 0.15997875  0.17071139  0.16408428  0.17560516]\n\n\n"""
1187,7725460,numpy-gitbot,numpy-gitbot,2012-10-19 18:58:59,2012-10-19 18:59:00,2012-10-19 18:59:00,closed,,1.1.0,2,11 - Bug;component: numpy.distutils;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1187,b'problem installing with latest version of Intel MKL (Trac #589)',"b""_Original ticket http://projects.scipy.org/numpy/ticket/589 on 2007-10-09 by trac user DavidPowell, assigned to @dmcooke._\n\nThere is a problem (I think with disutils) in finding the libraries for version 9.1.021 of the Intel MKL.  The installation looks for libraries mkl_lapack32 and mkl_lapack64, which do not exist.  I was able to get around it by creating symbolic links from these files to mkl_lapack.  Following the wiki instructions on installation with ifort and mkl did not help.\n\nIn addition, I found that it was necessary to add the SELinux context textrel_shlib_t to the shared libraries libguide.so, libirc.so, libmkl.so, libvml.so and libmkl_lapack.so, though I don't really know what this actually did.\n"""
1186,7725457,numpy-gitbot,numpy-gitbot,2012-10-19 18:58:56,2012-10-19 18:58:57,2012-10-19 18:58:57,closed,,1.0.4,3,11 - Bug;component: numpy.core;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1186,"b""numpy.dot() doesn't work correctly on non-contingous arrays (Trac #588)""","b""_Original ticket http://projects.scipy.org/numpy/ticket/588 on 2007-10-08 by @robince, assigned to @teoliphant._\n\nUsing dot() with non-contigous arrays doesn't work correctly.\n\n\nExample:\n\nIn [1]: from numpy import *\n\nIn [2]: x=array([[1.,5.,25.,125.,625.]])\n\nIn [3]: y=array([[20.],[160.],[640.],[1280.],[1024.]])\n\nIn [4]: z=array([[1024.],[1280.],[640.],[160.],[20.]])\n\nIn [5]: y2 = y[::-1]\n\nIn [6]: y2-z\nOut[6]: \narray([[ 0.],\n       [ 0.],\n       [ 0.],\n       [ 0.],\n       [ 0.]])\n\nIn [8]: dot(x,z)\nOut[8]: array([[ 55924.]])\n\nIn [9]: dot(x,y2)\nOut[9]: array([[ 640000.]])\n\nIn [10]: dot(x,array(y2))\nOut[10]: array([[ 55924.]])\n\nIn [11]: __version__\nOut[11]: '1.0.4.dev4155'\n\n\n\nPerhaps a test could be added to try and catch this type of problem (testing core functions with non-contigous arrays).\n\n\n"""
1185,7725454,numpy-gitbot,numpy-gitbot,2012-10-19 18:58:54,2012-10-19 18:58:55,2012-10-19 18:58:55,closed,,1.1.0,3,11 - Bug;component: numpy.f2py;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1185,b'f2py fails on INTEGER(8) return statement in f90 code (Trac #587)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/587 on 2007-10-07 by @tovrstra, assigned to @pearu._\n\nThis is the example code:\n\n\n\n    MODULE fc\n    IMPLICIT NONE\n    CONTAINS\n        SUBROUTINE color_stat(valsg, valsp, alphasg, alphasp, result, n)\n    !f2py   intent(hide) n\n            INTEGER(1),DIMENSION(n),INTENT(in) :: valsg, valsp, alphasg, alphasp\n            INTEGER(8),INTENT(out),DIMENSION(256,3) :: result\n            ! local vars\n            INTEGER :: i, n, weight\n    \n            result(:,:) = 0\n            DO i=1,n\n                weight = alphasg(n)*alphasp(n)\n                IF (weight > 0) THEN\n                    result(valsp(n),1) = result(valsp(n),1) + weight\n                    result(valsp(n),2) = result(valsp(n),2) + valsg(n)*weight\n                    result(valsp(n),3) = result(valsp(n),3) + valsg(n)*valsg(n)*weight\n                END IF\n            END DO\n    \n        END SUBROUTINE\n    END MODULE\n\n\n\nWhen I try to make a module with f2py, I get this:\n\n\n\n    toon@poony ~/tmp/trevi $ f2py -m helpers -c helpers.f90 \n    running build\n    running config_cc\n    unifing config_cc, config, build_clib, build_ext, build commands --compiler options\n    running config_fc\n    unifing config_fc, config, build_clib, build_ext, build commands --fcompiler options\n    running build_src\n    building extension ""helpers"" sources\n    f2py options: []\n    f2py:> /tmp/tmpR6Rx7w/src.linux-i686-2.4/helpersmodule.c\n    creating /tmp/tmpR6Rx7w\n    creating /tmp/tmpR6Rx7w/src.linux-i686-2.4\n    Reading fortran codes...\n            Reading file \'helpers.f90\' (format:free)\n    Post-processing...\n            Block: helpers\n                            Block: fsim\n                                    Block: color_stat\n    Post-processing (stage 2)...\n            Block: helpers\n                    Block: unknown_interface\n                            Block: fsim\n                                    Block: color_stat\n    Building modules...\n            Building module ""helpers""...\n                    Constructing F90 module support for ""fsim""...\n                            Constructing wrapper function ""fsim.color_stat""...\n                              result = color_stat(valsg,valsp,alphasg,alphasp)\n            Wrote C/API module ""helpers"" to file ""/tmp/tmpR6Rx7w/src.linux-i686-2.4/helpersmodule.c""\n            Fortran 90 wrappers are saved to ""/tmp/tmpR6Rx7w/src.linux-i686-2.4/helpers-f2pywrappers2.f90""\n      adding \'/tmp/tmpR6Rx7w/src.linux-i686-2.4/fortranobject.c\' to sources.\n      adding \'/tmp/tmpR6Rx7w/src.linux-i686-2.4\' to include_dirs.\n    copying /usr/lib/python2.4/site-packages/numpy/f2py/src/fortranobject.c -> /tmp/tmpR6Rx7w/src.linux-i686-2.4\n    copying /usr/lib/python2.4/site-packages/numpy/f2py/src/fortranobject.h -> /tmp/tmpR6Rx7w/src.linux-i686-2.4\n      adding \'/tmp/tmpR6Rx7w/src.linux-i686-2.4/helpers-f2pywrappers2.f90\' to sources.\n    running build_ext\n    customize UnixCCompiler\n    customize UnixCCompiler using build_ext\n    customize GnuFCompiler\n    Could not locate executable g77\n    Could not locate executable f77\n    Could not locate executable ifort\n    Could not locate executable ifc\n    Could not locate executable ifort\n    Could not locate executable efort\n    Could not locate executable efc\n    Could not locate executable ifort\n    Could not locate executable efort\n    Could not locate executable efc\n    customize IntelFCompiler\n    customize LaheyFCompiler\n    customize PGroupFCompiler\n    customize AbsoftFCompiler\n    customize NAGFCompiler\n    customize VastFCompiler\n    customize GnuFCompiler\n    Could not locate executable g77\n    Could not locate executable f77\n    customize CompaqFCompiler\n    customize IntelItaniumFCompiler\n    customize IntelEM64TFCompiler\n    customize Gnu95FCompiler\n    Could not locate executable f95\n    customize Gnu95FCompiler\n    Could not locate executable f95\n    customize Gnu95FCompiler using build_ext\n    building \'helpers\' extension\n    compiling C sources\n    C compiler: i686-pc-linux-gnu-gcc -pthread -fno-strict-aliasing -DNDEBUG -fPIC\n    \n    creating /tmp/tmpR6Rx7w/tmp\n    creating /tmp/tmpR6Rx7w/tmp/tmpR6Rx7w\n    creating /tmp/tmpR6Rx7w/tmp/tmpR6Rx7w/src.linux-i686-2.4\n    compile options: \'-I/tmp/tmpR6Rx7w/src.linux-i686-2.4 -I/usr/lib/python2.4/site-packages/numpy/core/include -I/usr/include/python2.4 -c\'\n    i686-pc-linux-gnu-gcc: /tmp/tmpR6Rx7w/src.linux-i686-2.4/helpersmodule.c\n    /tmp/tmpR6Rx7w/src.linux-i686-2.4/helpersmodule.c:136: error: expected declaration specifiers or \xa1\xae...\xa1\xaf before \xa1\xaelong_long\xa1\xaf\n    /tmp/tmpR6Rx7w/src.linux-i686-2.4/helpersmodule.c: In function \xa1\xaef2py_rout_helpers_fsim_color_stat\xa1\xaf:\n    /tmp/tmpR6Rx7w/src.linux-i686-2.4/helpersmodule.c:165: error: \xa1\xaelong_long\xa1\xaf undeclared (first use in this function)\n    /tmp/tmpR6Rx7w/src.linux-i686-2.4/helpersmodule.c:165: error: (Each undeclared identifier is reported only once\n    /tmp/tmpR6Rx7w/src.linux-i686-2.4/helpersmodule.c:165: error: for each function it appears in.)\n    /tmp/tmpR6Rx7w/src.linux-i686-2.4/helpersmodule.c:165: error: \xa1\xaeresult\xa1\xaf undeclared (first use in this function)\n    /tmp/tmpR6Rx7w/src.linux-i686-2.4/helpersmodule.c:190: error: expected expression before \xa1\xae)\xa1\xaf token\n    /tmp/tmpR6Rx7w/src.linux-i686-2.4/helpersmodule.c:240: error: too many arguments to function \xa1\xaef2py_func\xa1\xaf\n    /tmp/tmpR6Rx7w/src.linux-i686-2.4/helpersmodule.c:136: error: expected declaration specifiers or \xa1\xae...\xa1\xaf before \xa1\xaelong_long\xa1\xaf\n    /tmp/tmpR6Rx7w/src.linux-i686-2.4/helpersmodule.c: In function \xa1\xaef2py_rout_helpers_fsim_color_stat\xa1\xaf:\n    /tmp/tmpR6Rx7w/src.linux-i686-2.4/helpersmodule.c:165: error: \xa1\xaelong_long\xa1\xaf undeclared (first use in this function)\n    /tmp/tmpR6Rx7w/src.linux-i686-2.4/helpersmodule.c:165: error: (Each undeclared identifier is reported only once\n    /tmp/tmpR6Rx7w/src.linux-i686-2.4/helpersmodule.c:165: error: for each function it appears in.)\n    /tmp/tmpR6Rx7w/src.linux-i686-2.4/helpersmodule.c:165: error: \xa1\xaeresult\xa1\xaf undeclared (first use in this function)\n    /tmp/tmpR6Rx7w/src.linux-i686-2.4/helpersmodule.c:190: error: expected expression before \xa1\xae)\xa1\xaf token\n    /tmp/tmpR6Rx7w/src.linux-i686-2.4/helpersmodule.c:240: error: too many arguments to function \xa1\xaef2py_func\xa1\xaf\n    error: Command ""i686-pc-linux-gnu-gcc -pthread -fno-strict-aliasing -DNDEBUG -fPIC -I/tmp/tmpR6Rx7w/src.linux-i686-2.4 -I/usr/lib/python2.4/site-packages/numpy/core/include -I/usr/include/python2.4 -c /tmp/tmpR6Rx7w/src.linux-i686-2.4/helpersmodule.c -o /tmp/tmpR6Rx7w/tmp/tmpR6Rx7w/src.linux-i686-2.4/helpersmodule.o"" failed with exit status 1\n\n\n\nWhen I replace INTEGER(8) by INTEGER(4) in the example code, f2py works fine.\n\nSome system info:\nnumpy-1.0.3.1\ncompiled with gcc version 4.1.2 (Gentoo 4.1.2)\n\nP.S. I can not select the right numpy version from the new ticket form.'"
1181,7725447,numpy-gitbot,numpy-gitbot,2012-10-19 18:58:46,2012-10-19 18:58:46,2012-10-19 18:58:46,closed,,1.1.0,1,11 - Bug;component: numpy.core;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1181,b'fromiter: memory error on invalid dtype (Trac #583)',"b""_Original ticket http://projects.scipy.org/numpy/ticket/583 on 2007-09-25 by @stefanv, assigned to unknown._\n\nTriggered by\n\n\n\n    import numpy as N\n    x = [['12',_],['13',_]]\n    z = N.fromiter(x,str)\n\n\n"""
1180,7725444,numpy-gitbot,numpy-gitbot,2012-10-19 18:58:41,2012-10-19 18:58:44,2012-10-19 18:58:44,closed,,1.0.4,10,11 - Bug;component: numpy.core;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1180,b'Crash when embedded using Borland Builder 6 (Trac #582)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/582 on 2007-09-20 by trac user thomas, assigned to unknown._\n\nHi,\n\nwhen used in an embedded scenario with some non-g++ compilers, every call of ""import numpy"" leads to a crash (Floating Point Overflow) because of the following function in umathmodule.c:\n\nstatic double\npinf_init(void)\n{\n double mul = 1e10;\n double tmp = 0.0;\n double pinf;\n pinf = mul;\n for (;;) {\n pinf *= mul;\n if (pinf == tmp) break;\n tmp = pinf;\n }\n return pinf;\n}\n\nWhen pinf supercedes 1E300, g++ will turn it to infinity, whereas other compilers (e.g. Borland C++ Builder) will throw an overflow exception.\n\nMy recommendation is to directly generate the double value for infinity by IEEE 754 specification:\n\n  char inf_string[9] = ""\\x00\\x00\\x00\\x00\\x00\\x00\\xF0\\x7F"";\n  double pinf = ((double*)inf_string)[0];\n\non little endian architectures, and\n\n  char inf_string[9] = ""\\x7F\\xF0\\x00\\x00\\x00\\x00\\x00\\x00"";\n  double pinf = ((double*)inf_string)[0];\n\non big endian architectures.\n\nThank you!'"
1179,7725443,numpy-gitbot,numpy-gitbot,2012-10-19 18:58:39,2012-10-19 18:58:40,2012-10-19 18:58:40,closed,,1.1.0,4,11 - Bug;component: numpy.random;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1179,b'random.set_state does not reset state of random.standard_normal (Trac #581)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/581 on 2007-09-17 by trac user Yung-Chin Oei, assigned to @rkern._\n\nWhen calling random.set_state the function random.standard_normal may return an internally retained old number before starting to use the new state of the generator. \n\nI think this happens because the Box-Muller algorithm generates normally distributed numbers in pairs. If an uneven number of calls to the function was made before using set_state, the second number of such a pair is returned before new numbers are generated.\n\nMaybe useful for fixing this problem: using random.seed(0) does seem to properly reset the internal state of random.standard_normal - the next call to standard_normal always returns the expected new random number.'"
1178,7725441,numpy-gitbot,numpy-gitbot,2012-10-19 18:58:37,2012-10-19 18:58:37,2012-10-19 18:58:37,closed,,1.0.4,1,11 - Bug;component: numpy.f2py;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1178,b'ExtGen uses Python 2.4 features (Trac #580)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/580 on 2007-09-14 by @rkern, assigned to @jarrodmillman._\n\nI noticed in a buildbot log that @property was being used by !ExtGen. As these are Python 2.4 features and we are still targeting Python 2.3, these need to be changed to the `""foo = property(foo)""` form.'"
1176,7725436,numpy-gitbot,numpy-gitbot,2012-10-19 18:58:32,2012-10-19 18:58:33,2012-10-19 18:58:33,closed,,1.0.4,1,11 - Bug;component: numpy.core;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1176,b'Indexing of multi-D arrays is counterintuitive (Trac #578)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/578 on 2007-09-13 by trac user gic888, assigned to unknown._\n\nnumpy 1.0.4.dev3869 with Python 2.5 on Mac OS 10.4.9 (Intel)\n\nSlicing 1 dimension of a 2D array does not have the same effect as using the same slice on a 1D array. Also, calling ""array"" on the slice generates an array different than the slice, and some slice indexes behave differently than others. I will clarify with examples:\n\n\n    ipy > z=reshape(arange(30), (15,2))\n    ipy > z[3:,0]=z[:-3,0]\n    ipy > z\n     out:\n    array([[ 0,  1],\n           [ 2,  3],\n           [ 4,  5],\n           [ 0,  7],\n           [ 2,  9],\n           [ 4, 11],\n           [ 0, 13],\n           [ 2, 15],\n           [ 4, 17],\n           [ 0, 19],\n           [ 2, 21],\n           [ 4, 23],\n           [ 0, 25],\n           [ 2, 27],\n           [ 4, 29]])\n\n\nbut:\n\n\n    ipy > z=reshape(arange(30), (15,2))\n    ipy > z[:-3,0]=z[3:,0]\n    ipy > z\n     out: \n    array([[ 6,  1],\n           [ 8,  3],\n           [10,  5],\n           [12,  7],\n           [14,  9],\n           [16, 11],\n           [18, 13],\n           [20, 15],\n           [22, 17],\n           [24, 19],\n           [26, 21],\n           [28, 23],\n           [24, 25],\n           [26, 27],\n           [28, 29]])\n\n\nand:\n\n\n    ipy > z=reshape(arange(30), (15,2))\n    ipy > z[3:,0]=array(z[:-3,0])\n    ipy > z\n     out: \n    array([[ 0,  1],\n           [ 2,  3],\n           [ 4,  5],\n           [ 0,  7],\n           [ 2,  9],\n           [ 4, 11],\n           [ 6, 13],\n           [ 8, 15],\n           [10, 17],\n           [12, 19],\n           [14, 21],\n           [16, 23],\n           [18, 25],\n           [20, 27],\n           [22, 29]])\n\n\n\n'"
1175,7725435,numpy-gitbot,numpy-gitbot,2012-10-19 18:58:30,2012-10-19 18:58:31,2012-10-19 18:58:31,closed,,1.0.4,3,11 - Bug;component: Other;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1175,b'Return value of sum of masked array is inconsistent (Trac #577)',"b""_Original ticket http://projects.scipy.org/numpy/ticket/577 on 2007-09-12 by trac user reggie, assigned to @stefanv._\n\nWhen calling the sum method of a masked array with no arguments, the result can be either a scalar or a 1 element array depending on whether the mask is nomask or not.  I'm attaching a patch for ma.py below that should fix this problem."""
1174,7725434,numpy-gitbot,numpy-gitbot,2012-10-19 18:58:28,2012-10-19 18:58:29,2012-10-19 18:58:29,closed,,1.2.0,2,11 - Bug;component: numpy.f2py;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1174,"b""numpy installation doesn't detect gfortran or g95 (Trac #576)""","b""_Original ticket http://projects.scipy.org/numpy/ticket/576 on 2007-09-06 by trac user gruel, assigned to unknown._\n\nI'm using the last svn version of numpy (. \n\nI tried the solution found on the mail list:\n\npython setup.py config_fc --fcompiler=gnu95 build                               \n\nthe two interesting part (at least for me) in the building process are:\n\ncustomize GnuFCompiler\nFound executable /usr/bin/g77\ngnu: no Fortran 90 compiler found\ngnu: no Fortran 90 compiler found\ncustomize GnuFCompiler\ngnu: no Fortran 90 compiler found\ngnu: no Fortran 90 compiler found\ncustomize GnuFCompiler using config\n\nand later:\ncustomize G95FCompiler\nFound executable /usr/local/bin/g95\n\nbut I still have the same answer when I'm trying to do:\nf2py -c -m hello hello.f90\n\ncustomize GnuFCompiler\nFound executable /usr/bin/g77\ngnu: no Fortran 90 compiler found\ngnu: no Fortran 90 compiler found\ncustomize GnuFCompiler\ngnu: no Fortran 90 compiler found\ngnu: no Fortran 90 compiler found\n\nand so:\n\nerror: f90 not supported by GnuFCompiler needed for hello.f90\n\nI can't compile my fortran module because of this. I'll attach the file obtain with \n\npython setup.py -v config_fc --fcompiler=gnu95 build\n\nthank you for numpy and f2py."""
1173,7725432,numpy-gitbot,numpy-gitbot,2012-10-19 18:58:25,2012-10-19 18:58:26,2012-10-19 18:58:26,closed,,1.0.4,3,11 - Bug;component: numpy.core;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1173,b'fast putmask implementation does not work on big-endian systems (Trac #575)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/575 on 2007-08-25 by @chanley, assigned to @stefanv._\n\nThe fast putmask implementation introduced in r3981 does not work on big-endian machines.  The record array test added in r3982 confirms this fact.\n\n\n\n    ======================================================================\n    FAIL: test_record_array (numpy.core.tests.test_multiarray.test_putmask)\n    ----------------------------------------------------------------------\n    Traceback (most recent call last):\n      File ""/data/basil5/site-packages/lib/python/numpy/core/tests/test_multiarray.p\n    y"", line 450, in test_record_array\n        assert_array_equal(rec[\'x\'],[10,5])\n      File ""/data/basil5/site-packages/lib/python/numpy/testing/utils.py"", line 223,\n     in assert_array_equal\n        verbose=verbose, header=\'Arrays are not equal\')\n      File ""/data/basil5/site-packages/lib/python/numpy/testing/utils.py"", line 215,\n     in assert_array_compare\n        assert cond, msg\n    AssertionError: \n    Arrays are not equal\n    \n    (mismatch 50.0%)\n     x: array([  4.58492919e-320,   5.00000000e+000])\n     y: array([10,  5])\n    \n    ----------------------------------------------------------------------\n    Ran 673 tests in 13.436s\n    \n    FAILED (failures=1)\n    <unittest.TextTestRunner object at 0x565f70>\n    >>> numpy.__version__\n    \'1.0.4.dev4011\'\n    >>> \n    \n\n\n\nThis test does pass on our Redhat Enterprise systems which our little-endian.\n\n\n\n'"
1172,7725431,numpy-gitbot,numpy-gitbot,2012-10-19 18:58:23,2012-10-19 18:58:24,2012-10-19 18:58:24,closed,,1.0.4,2,11 - Bug;component: numpy.core;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1172,"b'tri(n, dtype=bool) return None (Trac #574)'","b'_Original ticket http://projects.scipy.org/numpy/ticket/574 on 2007-08-24 by trac user zz2liu, assigned to @stefanv._\n\n    def tri(N, M=None, k=0, dtype=float):\n        """""" returns a N-by-M array where all the diagonals starting from\n            lower left corner up to the k-th are all ones.\n        """"""\n        if M is None: M = N\n        m = greater_equal(subtract.outer(arange(N), arange(M)),-k)\n        if m.dtype != dtype:\n            return m.astype(dtype)\n        #else:\n        #   return m\n\ntri(3, dtype=bool) will return None\nmaybe should fix it by adding the block commented to the end of the code.\n\n\n'"
1171,7725428,numpy-gitbot,numpy-gitbot,2012-10-19 18:58:20,2012-10-19 18:58:22,2012-10-19 18:58:22,closed,,1.1.0,6,11 - Bug;component: Other;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1171,b'numpy does not build when LDFLAGS are set (Trac #573)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/573 on 2007-08-24 by trac user bicatali, assigned to unknown._\n\nOn Linux, [[BR]]\n\n\n\n    LDFLAGS=""-Wl,-s"" python setup.py build\n\n\n \nwill not link properly, at least the cblas libraries. \nThis happen with whatever LDFLAGS. \nI\'ve seen similar posts in lists and tickets, but never a proper answer or resolution. The only work around is to build the lite libraries, i.e. unset BLAS and LAPACK env variables. \nscipy suffers from it even more.[[BR]]\n\nDo you plan to add user LDFLAGS for linking?\n\n\n'"
1170,7725427,numpy-gitbot,numpy-gitbot,2012-10-19 18:58:16,2012-10-23 02:37:24,2012-10-19 18:58:18,closed,,1.0.4,6,11 - Bug;component: numpy.lib;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1170,b'Memory leak in _insert when using rank 0 input (Trac #572)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/572 on 2007-08-24 by @cournape, assigned to unknown._\n\nThe function _insert has a memory leak, and this shows when using for example cdf functions of distributions classes in scipy.stats (see scipy #1074).\n\nThe fix is trivial: just call Py_DECREF on ainput in rank 0 case, as in general case (the attached patch avoids separate code path for memory cleaning instead).'"
1168,7725419,numpy-gitbot,numpy-gitbot,2012-10-19 18:58:08,2012-10-23 02:37:22,2012-10-19 18:58:10,closed,,1.1.0,7,11 - Bug;component: numpy.core;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1168,b'Vectorize leaks (Trac #570)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/570 on 2007-08-13 by @alberts, assigned to unknown._\n\nhttp://projects.scipy.org/pipermail/numpy-discussion/2007-August/028860.html'"
1167,7725418,numpy-gitbot,numpy-gitbot,2012-10-19 18:58:06,2012-10-19 18:58:07,2012-10-19 18:58:07,closed,,1.0.4,1,11 - Bug;component: numpy.core;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1167,b'.transpose() of memmap array fails to close() (Trac #569)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/569 on 2007-08-13 by @alberts, assigned to unknown._\n\nhttp://projects.scipy.org/pipermail/numpy-discussion/2007-August/028851.html'"
1164,7725413,numpy-gitbot,numpy-gitbot,2012-10-19 18:57:57,2012-10-23 02:37:19,2012-10-19 18:58:00,closed,,1.0.4,9,11 - Bug;component: numpy.core;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1164,b'lexsort fails to completely sort (Trac #566)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/566 on 2007-08-10 by trac user hattawayd, assigned to unknown._\n\nI am sorting a large array with lexsort, and while it seems to sort, the sort is not complete, I still have to sort it again to be finished.\nI will try to attach my test case once I get permission to release the data.'"
1162,7725409,numpy-gitbot,numpy-gitbot,2012-10-19 18:57:52,2012-10-19 18:57:53,2012-10-19 18:57:53,closed,,1.0.4,2,11 - Bug;component: numpy.lib;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1162,b'poly1d subtraction yields coefficient of 0 (Trac #564)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/564 on 2007-08-06 by trac user DrIdiot, assigned to unknown._\n\nUsing ipython -pylabs, explicitly setting the leading coefficient to 0 does this:\n\n\nIn [3]: a = numpy.poly1d([1,2,3])\nIn [4]: a[2] = 0\nIn [5]: print a\n + 2 x + 3\nIn [6]: a.coeffs\nOut[6]: array([0, 2, 3])\n\nLikewise, \n\nIn [10]: a = numpy.poly1d([1,2,3])\nIn [11]: a[2] = 0\nIn [12]: a[1] = 0\nIn [13]: print a\n + 3\nIn [14]: a.coeffs\nOut[14]: array([0, 0, 3])\n\nLikewise,\nIn [15]: a = numpy.poly1d([1,2,3])\nIn [16]: a[2] = 0\nIn [17]: a[1] = 0\nIn [18]: a[0] = 0\nIn [19]: print a \n\nIn [20]: a.coeffs\nOut[20]: array([0, 0, 0])\n\n(The correct behavior is:)\nIn [22]: a = numpy.poly1d([0])\nIn [23]: print a \n0\n\nI am running Gentoo Linux and numpy version 1.0.3'"
1161,7725407,numpy-gitbot,numpy-gitbot,2012-10-19 18:57:50,2012-10-19 18:57:51,2012-10-19 18:57:51,closed,,1.0.4,1,11 - Bug;component: numpy.core;priority: low,https://api.github.com/repos/numpy/numpy/issues/1161,b'Python 2.6 DeprecationWarnings (Trac #563)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/563 on 2007-08-04 by @alberts, assigned to @jarrodmillman._\n\nThe following !DeprecationWarnings are emitted when building !NumPy with Python 2.6 from trunk:\n\nnumpy/distutils/misc_util.py:1279: !DeprecationWarning: os.popen4 is deprecated.  Use the subprocess module.\n\nnumpy/core/code_generators/genapi.py:9: !DeprecationWarning: the md5 module is deprecated; use hashlib instead'"
1160,7725403,numpy-gitbot,numpy-gitbot,2012-10-19 18:57:45,2012-10-23 02:37:14,2012-10-19 18:57:49,closed,,1.1.0,13,11 - Bug;component: numpy.core;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1160,b'Reference leaks (Trac #562)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/562 on 2007-08-03 by @alberts, assigned to unknown._\n\nLisandro Dalcin reported some possible reference leaks:\n\nhttp://projects.scipy.org/pipermail/numpy-discussion/2007-August/028749.html\nhttp://projects.scipy.org/pipermail/numpy-discussion/2007-August/028757.html'"
1159,7725401,numpy-gitbot,numpy-gitbot,2012-10-19 18:57:42,2012-10-19 18:57:43,2012-10-19 18:57:43,closed,,1.0.4,4,11 - Bug;component: Other;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1159,"b'problem compiling, cannot find multiarray (Trac #561)'","b'_Original ticket http://projects.scipy.org/numpy/ticket/561 on 2007-08-03 by @johannct, assigned to unknown._\n\nI just tried to compile SVN version of numpy, and I get :\n[cohen@localhost numpy-svn]$ python setup.py build\nTraceback (most recent call last):\n  File ""setup.py"", line 90, in <module>\n    setup_package()\n  File ""setup.py"", line 62, in setup_package\n    from numpy.distutils.core import setup\n  File ""/data1/sources/python/numpy-svn/numpy/__init__.py"", line 39, in <module>\n    import core\n  File ""/data1/sources/python/numpy-svn/numpy/core/__init__.py"", line 8, in <module>\n    import numerictypes as nt\n  File ""/data1/sources/python/numpy-svn/numpy/core/numerictypes.py"", line 83, in <module>\n    from numpy.core.multiarray import typeinfo, ndarray, array, empty, dtype\nImportError: No module named multiarray\n\nI have a hard time believing that this is a bug, but rather that something is wrong in my setup.... though I can\'t find what right now.\nthanks'"
1158,7725399,numpy-gitbot,numpy-gitbot,2012-10-19 18:57:40,2012-10-19 18:57:41,2012-10-19 18:57:41,closed,,1.0.4,1,11 - Bug;component: numpy.core;priority: high,https://api.github.com/repos/numpy/numpy/issues/1158,b'asfarray applied to a matrix returns a matrix instead of an array (Trac #560)',"b""_Original ticket http://projects.scipy.org/numpy/ticket/560 on 2007-08-01 by @nilswagner01, assigned to unknown._\n\n\n\n\n    >>> from numpy import *\n    >>> asfarray(matrix([[0.3]]))\n    matrix([[ 0.3]])\n    >>> array(matrix([[0.3]]))\n    array([[ 0.3]])\n    >>> numpy.__version__\n    '1.0.4.dev3937'\n\n\n"""
1157,7725398,numpy-gitbot,numpy-gitbot,2012-10-19 18:57:38,2012-10-19 18:57:39,2012-10-19 18:57:39,closed,,1.0.4,3,11 - Bug;component: Other;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1157,b'var() on a size=1 array should raise exception. (Trac #559)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/559 on 2007-07-30 by trac user gpk, assigned to unknown._\n\nProperly, a single value does not have a variance.\nWhoa!, you might say:  ""I can compute the\nsum of the squares of the distance from the mean,\neven when there is only one value.  It\'s zero.""\nThat\'s true, but misleading.\n\nSince you call it ""var"", you are implying that\nit is a variance, and variance is undefined unless\nyou have two or more values.\n\nMore importantly, even the biassed estimator of\nvariance ( sum((x-xbar)^2)/N ) does not have a\nwell-defined value when N==1.   All estimates of\nthe variance are equally good or equally bad when\nyou have only one value.   Follow the logic to\ncompute the minimum variance estimator of variance\nfor a single sample, and you\'ll see all kinds of\nabsurdities, including characteristic functions\nfor the probability distribution that do not have a limiting value.\n\nFrom a practical point of view, anyone who takes the variance\nof a single value is probably in deep trouble.    Variances\ntend to get used for F-tests, which are undefined for zero\ndegrees of freedom.   The get used to build confidence intervals\nfor t-tests, but the t-distribution is undefined for zero degrees\nof freedom.    Some people will construct confidence intervals\nvia   [mean-3*sqrt(var), mean+3*sqrt(var)] or some similar\napproximation:  this will fail badly and lead to tears.\n\nAnd, the same logic applies to the std(), of course.\n\n\n\n\n    >>> import numpy\n    >>> x = numpy.array([1.0])\n    >>> x\n    array([ 1.])\n    >>> x.var()\n    0.0\n    >>>\n\n'"
1155,7725387,numpy-gitbot,numpy-gitbot,2012-10-19 18:57:29,2012-10-19 18:57:32,2012-10-19 18:57:32,closed,,1.0.4,7,11 - Bug;component: numpy.linalg;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1155,b'pinv sefgaults with empty arrays (Trac #557)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/557 on 2007-07-26 by @cournape, assigned to unknown._\n\nThis is a copy of ticket 381 from scipy:\n\n""When I create an empty matrix and ask for the .I attribute, scipy crashes. I think this operation should raise an exception not crash scipy. Details are below.""\n\n\n\n\n    \n    Python 2.5 (r25:51908, Sep 19 2006, 09:52:17) [MSC v.1310 32 bit (Intel)] on win32\n    Type ""help"", ""copyright"", ""credits"" or ""license"" for more information.\n    >>> import scipy\n    >>> scipy.version.version\n    \'0.5.2\'\n    >>> scipy.version.release\n    True\n    >>> x = scipy.matrix([])\n    >>> x.I\n     ** On entry to DGESDD parameter number 10 had an illegal value\n\n'"
1154,7725385,numpy-gitbot,numpy-gitbot,2012-10-19 18:57:27,2012-10-19 18:57:28,2012-10-19 18:57:28,closed,,1.0.4,2,11 - Bug;component: numpy.lib;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1154,b'polydiv function gets the wrong answer!! (Trac #556)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/556 on 2007-07-24 by trac user subheight640, assigned to unknown._\n\nthe numpy.polydiv function does not seem to work for all cases. For example, \n\n>>> numpy.polydiv([7,6,5,4,3,2,1],[6,5,4,3,2,1])\n(array([ 1.16666667,  0.        ]), array([1]))\n\nThe answer I got from two other polynomial division programs, my own function, and by working the problem out by hand is:\n\n>>> poly_divider([7,6,5,4,3,2,1],[6,5,4,3,2,1])\n([1.1666666666666667, 0.027777777777777679], [0.194444444444, 0.388888888889, 0.583333333333, 0.777777777778, 0.972222222222])\n\npolydiv seems to suffer from rounding errors. '"
1153,7725381,numpy-gitbot,numpy-gitbot,2012-10-19 18:57:24,2012-10-19 18:57:26,2012-10-19 18:57:26,closed,,1.1.0,5,11 - Bug;component: numpy.random;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1153,b'setting random seed does not work with a numpy.int64 (Trac #555)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/555 on 2007-07-24 by trac user scottzelak, assigned to unknown._\n\nThe following code fails:\n\n\n\n    for loop_num in arange(4):\n        random.seed(loop_num)\n    \n    Traceback (most recent call last):\n      File ""<stdin>"", line 2, in <module>\n      File ""mtrand.pyx"", line 515, in mtrand.RandomState.seed\n    ValueError: object of too small depth for desired array\n\n\n\nbut will work if I replace the command in the loop with:[[BR]]\n\n\n        random.seed(int(loop_num))\n\n\n'"
1152,7725380,numpy-gitbot,numpy-gitbot,2012-10-19 18:57:21,2012-10-19 18:57:23,2012-10-19 18:57:23,closed,,1.0.4,2,11 - Bug;component: numpy.lib;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1152,b'poly1d equate error (Trac #554)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/554 on 2007-07-24 by trac user DrIdiot, assigned to unknown._\n\nWhen I try to see if two polynomials are equal, I get an error:\nIn [13]: numpy.poly1d([1, 1, 1, 1,0,1]) == numpy.poly1d([1,0])\n---------------------------------------------------------------------------\nexceptions.AttributeError                            Traceback (most recent call last)\n\n/home/harrison/<console> \n\n/usr/lib/python2.4/site-packages/numpy/lib/polynomial.py in __eq__(self, other)\n    601 \n    602     def __eq__(self, other):\n--> 603         return (self.coeffs == other.coeffs).all()\n    604 \n    605     def __ne__(self, other):\n\n\nI am running Gentoo with numpy 1.0.3'"
1151,7725378,numpy-gitbot,numpy-gitbot,2012-10-19 18:57:19,2012-10-19 18:57:20,2012-10-19 18:57:20,closed,,1.0.4,4,11 - Bug;component: numpy.lib;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1151,b'poly1d division error (Trac #553)',"b""_Original ticket http://projects.scipy.org/numpy/ticket/553 on 2007-07-23 by trac user DrIdiot, assigned to unknown._\n\nUsing ipython -pylabs, I get the error when dividing two polynomials:\n\nIn [5]: polydiv(numpy.poly1d([1,2,3]), numpy.poly1d([1,2,3,4,5]))\n---------------------------------------------------------------------------\nexceptions.NameError                                 Traceback (most recent call last)\n\n/home/harrison/<console> \n\nNameError: name 'polydiv' is not defined\n\n\nI am running Gentoo Linux and numpy version 1.0.3"""
1150,7725376,numpy-gitbot,numpy-gitbot,2012-10-19 18:57:17,2012-10-19 18:57:18,2012-10-19 18:57:18,closed,,1.0.4,2,11 - Bug;component: numpy.oldnumeric;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1150,b'Bad import in oldnumeric/random_array.py (Trac #552)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/552 on 2007-07-17 by trac user ColdWind, assigned to unknown._\n\noldnumeric/random_array.py has the following import:\n\nimport numpy as Numeric\n\nwhich seems that should be:\n\nimport numpy.oldnumeric as Numeric\n\nIf not, it complains about ArrayType. To reproduce execute:\n\n$ python -c ""from numpy.oldnumeric.random_array import * ; randint(0, 50, [2,3])""'"
1149,7725372,numpy-gitbot,numpy-gitbot,2012-10-19 18:57:07,2012-10-19 18:57:15,2012-10-19 18:57:15,closed,,1.1.0,32,11 - Bug;component: numpy.core;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1149,b'numpy.ndarray messed up after unpickling (Trac #551)',"b""_Original ticket http://projects.scipy.org/numpy/ticket/551 on 2007-07-16 by trac user cotackst, assigned to unknown._\n\nAfter unpickling a pickled numpy.ndarray matrix (using cPickle), I get a segmentation fault when trying to multiply the matrix by a vector. However I can multiply a copy of the matrix with the same vector.\n\nThe code to generate the actual matrix is quite large, so I only attach the pickled matrix ('mat.bug').\n\nReproducing code:[[BR]]\nfrom cPickle import Unpickler[[BR]]\nfrom numpy import ones, dot[[BR]]\n\nbug_mat = Unpickler(file('mat.bug','r')).load()[[BR]]\nok_mat = bug_mat.copy()[[BR]]\nv = ones((1,bug_mat.shape[0]))[[BR]]\ndot(v,ok_mat) # this works[[BR]]\ndot(v,bug_mat) # this segfault[[BR]]\n"""
1148,7725370,numpy-gitbot,numpy-gitbot,2012-10-19 18:57:03,2012-10-19 18:57:05,2012-10-19 18:57:05,closed,,1.0.4,4,11 - Bug;component: numpy.core;priority: high,https://api.github.com/repos/numpy/numpy/issues/1148,b'tofile() broken on 64-bit linux (Trac #550)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/550 on 2007-07-11 by trac user myrvoll, assigned to unknown._\n\nNumpy compiled on X86_64 Fedora Core 3 SMP system under Python 2.5 and GCC3.4.2\n\nThe following breaks numpy 1.0.3:\n\n>>> import numpy\n>>> G = numpy.zeros([30000,30000])\n>>> fh = open(\'foo\',\'w\')\n>>> G.tofile(fh)\nTraceback (most recent call last):\n  File ""<stdin>"", line 1, in <module>\nValueError: 900000000 requested and 0 written\n\n\n\n'"
1147,7725369,numpy-gitbot,numpy-gitbot,2012-10-19 18:57:01,2012-10-19 18:57:02,2012-10-19 18:57:02,closed,,1.0.4,4,11 - Bug;component: numpy.core;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1147,b'int() of numpy scalar fails silently (Trac #549)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/549 on 2007-07-10 by trac user zouave, assigned to unknown._\n\n[posted on numpy-discussion on 2007-07-09]\n\nThe conversion from a numpy scalar to a python int is not consistent \nwith python\'s native conversion (or numarray\'s):  if the scalar is out \nof bounds for an int, python and numarray automatically create a long \nwhile numpy still creates an int... with the wrong value.\n\ne.g. (using numpy 1.0.3):\n\n\n\n    Python 2.4.3 (#2, Apr 27 2006, 14:43:58)\n    [GCC 4.0.3 (Ubuntu 4.0.3-1ubuntu5)] on linux2\n    Type ""help"", ""copyright"", ""credits"" or ""license"" for more information.\n     >>> from numpy import *\n     >>> l= [1e3, 1e9, 1e15, -1e3, -1e9, -1e15]\n     >>> a= array(l)\n     >>> map(int, l)\n    [1000, 1000000000, 1000000000000000L, -1000, -1000000000, \n    -1000000000000000L]\n     >>> map(int, a)\n    [1000, 1000000000, -2147483648, -1000, -1000000000, -2147483648]\n     >>> map(long, a)\n    [1000L, 1000000000L, 1000000000000000L, -1000L, -1000000000L, \n    -1000000000000000L]\n     >>>\n\n\n\nIMHO, numpy\'s conversions to int should behave like Python\'s \'float_int\' \nor \'long_int\' functions (see $PYTHON_SRC_DIR/Objects/floatobject.c, \n$PYTHON_SRC_DIR/Objects/longobject.c): if it doesn\'t fit in an int, \nreturn a long.  For now (svn), it seems that numpy is always using \nPyInt_FromLong after an implicit C cast to long (which silently fails; \nsee $NUMPY_SRC_DIR/numpy/core/src/scalarmathmodule.c.src)\n\n'"
1146,7725366,numpy-gitbot,numpy-gitbot,2012-10-19 18:56:58,2012-10-19 18:56:59,2012-10-19 18:56:59,closed,,1.0.4,2,11 - Bug;component: numpy.core;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1146,b'fromfile crashes due to failed allocation (Trac #548)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/548 on 2007-07-10 by @alberts, assigned to unknown._\n\nI\'m seeing a crash that appears to be due to fromfile or something it calls ignoring a failed allocation.\n\nCode to reproduce:\n\n\n\n    import numpy as N\n    \n    def main():\n        dtype = N.dtype(\'f4\')\n        iocount = 6\n    \n        x = N.zeros((33554432,), dtype=dtype)\n        assert x.nbytes == 128 * 1024 * 1024\n        count = len(x)\n    \n        print \'writing\'\n        fp = open(\'matrix.out\', \'wb\')\n        for i in xrange(iocount):\n            x.tofile(fp)\n        fp.close()\n    \n        del x\n    \n        fp = open(\'matrix.out\', \'rb\')\n        toomuch = []\n        for i in xrange(100):\n            print i\n            fp.seek(0)\n            y = N.fromfile(fp, dtype=dtype, count=5*count)\n            print len(y)\n            toomuch.append(y)\n        fp.close()\n    \n    if __name__ == \'__main__\':\n        main()\n\n\n\nOutput on my Windows machine, which can\'t handle more than one 640 MB allocation even though it has 2 GB RAM (heap fragmentation rocks):\n\n\n\n    writing\n    0\n    167772160\n    1\n    167772160 items requested but only 0 read\n\n\n\nCrash dialog:\n\n\n\n    ---------------------------\n    python.exe - Application Error\n    ---------------------------\n    The instruction at ""0x10022439"" referenced memory at ""0x0000001c"". The memory could not be ""read"".\n    \n    \n    Click on OK to terminate the program\n    Click on CANCEL to debug the program\n    ---------------------------\n    OK   Cancel   \n    ---------------------------\n\n'"
1144,7725361,numpy-gitbot,numpy-gitbot,2012-10-19 18:56:53,2012-10-19 18:56:53,2012-10-19 18:56:53,closed,,1.0.4,2,11 - Bug;component: numpy.core;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1144,"b""Array of non-native numbers don't work correctly (Trac #546)""","b""_Original ticket http://projects.scipy.org/numpy/ticket/546 on 2007-07-03 by trac user usovalx, assigned to unknown._\n\nConsider the following example:\n\n\n    a = arange(3, dtype='>f')\n    print a[a.argmax()] == a.max()\n\n\nFor the machines I have tested (FC6 32- and 64-bit, numpy-1.0.3) this gives False."""
1143,7725359,numpy-gitbot,numpy-gitbot,2012-10-19 18:56:51,2012-10-23 02:37:06,2012-10-19 18:56:51,closed,,,2,11 - Bug;component: numpy.core;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1143,"b""Array of non-native numbers don't work correctly (Trac #545)""","b""_Original ticket http://projects.scipy.org/numpy/ticket/545 on 2007-07-03 by trac user usovalx, assigned to unknown._\n\nConsider the following example:\n\na = arange(3, dtype='>f')\nprint(a[a.argmax()] == a.max())\n\nFor the machines I have tested (FC6 32- and 64-bit) this gives False."""
1142,7725357,numpy-gitbot,numpy-gitbot,2012-10-19 18:56:49,2012-10-19 18:56:49,2012-10-19 18:56:49,closed,,1.0.4,1,11 - Bug;component: numpy.core;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1142,b'typo in arrayprint.py added in r3877 (Trac #544)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/544 on 2007-07-02 by @chanley, assigned to @chanley._\n\nA typo in arrayprint r3877 causes the unittests to fail:\n\n\n\n    ======================================================================\n    ERROR: Test of conversions and indexing\n    ----------------------------------------------------------------------\n    Traceback (most recent call last):\n      File ""/data/sparty1/dev/site-packages/lib/python/numpy/core/tests/test_ma.py"", line 200, in check_testCI\n        junk, garbage = str(x2), repr(x2)\n      File ""/data/sparty1/dev/site-packages/lib/python/numpy/core/ma.py"", line 761, in __repr__\n        \'data\': str(self.filled()),\n      File ""/data/sparty1/dev/site-packages/lib/python/numpy/core/numeric.py"", line 473, in array_str\n        return array2string(a, max_line_width, precision, suppress_small, \' \', """", str)\n      File ""/data/sparty1/dev/site-packages/lib/python/numpy/core/arrayprint.py"", line 240, in array2string\n        separator, prefix)\n      File ""/data/sparty1/dev/site-packages/lib/python/numpy/core/arrayprint.py"", line 153, in _array2string\n        len(str(mininum.reduce(data))))\n    NameError: global name \'mininum\' is not defined\n\n'"
1141,7725354,numpy-gitbot,numpy-gitbot,2012-10-19 18:56:46,2012-10-19 18:56:47,2012-10-19 18:56:47,closed,,1.0.4,2,11 - Bug;component: Other;priority: low,https://api.github.com/repos/numpy/numpy/issues/1141,b'documentation string for cumproduct is wrong (Trac #543)',"b""_Original ticket http://projects.scipy.org/numpy/ticket/543 on 2007-07-01 by @tovrstra, assigned to unknown._\n\nHi,\n\nThis is just an obvious type-oh, nothing to be really worried about:\n\n\n\n    Help on function cumproduct in module numpy.core.fromnumeric:\n    \n    cumproduct(x, axis=None, dtype=None, out=None)\n        Sum the array over the given axis.\n\n\n\n\n\n    >>> numpy.__version__\n    '1.0.2'\n\n\n\nthanks for all the nice work so far!\n\nToon\n\n\n"""
1140,7725353,numpy-gitbot,numpy-gitbot,2012-10-19 18:56:45,2012-10-19 18:56:45,2012-10-19 18:56:45,closed,,1.0.4,0,11 - Bug;component: Other;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1140,b'int division by zero gives wrong results (Trac #542)',"b""_Original ticket http://projects.scipy.org/numpy/ticket/542 on 2007-06-28 by trac user chipschips, assigned to unknown._\n\ninteger division by zero returns 0 rather then inf (or some other specially defined integer infinity constant). This behavior is not consistent with floats and is mathematically wrong.\n\nExample:\n\n>>> 1/int_(0)\n0\n>>> 1/float_(0)\ninf\n\nIs this a bug or there is some good reason why ints behave this way? \nI'm using numpy 1.0.1 and scipy 0.5.2"""
1139,7725351,numpy-gitbot,numpy-gitbot,2012-10-19 18:56:43,2012-10-23 02:37:04,2012-10-19 18:56:43,closed,,1.0.4,2,11 - Bug;component: Other;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1139,b'int division by zero give wrong results (Trac #541)',"b""_Original ticket http://projects.scipy.org/numpy/ticket/541 on 2007-06-28 by trac user chipschips, assigned to unknown._\n\ninteger division by zero returns 0 rather then inf (or some other specially defined integer infinity constant). This behavior is not consistent with floats and is mathematically wrong.\n\nExample:\n\n>>> 1/int_(0)\n0\n>>> 1/float_(0)\ninf\n\nIs this a bug or there is some good reason why ints behave this way? \nI'm using numpy 1.0.1 and scipy 0.5.2"""
1138,7725350,numpy-gitbot,numpy-gitbot,2012-10-19 18:56:41,2012-10-19 18:56:41,2012-10-19 18:56:41,closed,,1.0.4,1,11 - Bug;component: numpy.core;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1138,"b""Merge sort doesn't work correctly for string arrays. (Trac #540)""","b""_Original ticket http://projects.scipy.org/numpy/ticket/540 on 2007-06-27 by @charris, assigned to unknown._\n\nMerge sort doesn't do a stable sort on string arrays.\n\n\n\n\n    In [3]: charArr = numpy.array(['a','a','a','b','b','b','c','d'])\n    \n    In [12]: numpy.argsort(charArr, kind='m')\n    Out[12]: array([2, 1, 0, 5, 4, 3, 6, 7])\n\n\n\nThe result should be array([0, 1, 2, 3, 4, 5, 6, 7])\n"""
1137,7725345,numpy-gitbot,numpy-gitbot,2012-10-19 18:56:37,2012-10-19 18:56:39,2012-10-19 18:56:39,closed,,1.2.0,6,11 - Bug;component: numpy.distutils;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1137,b'config parameters are not passed on to build (Trac #539)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/539 on 2007-06-26 by @pv, assigned to @cournape._\n\nnumpy 1.0.3 (and dev.r3875), Python 2.5 (on Linux):\n\nPropagation of some command-line parameters given to the `config` and `config_fc` commands to `build` appear not to work as intended (in `setup.py config --help`):\n\n  - `./setup.py config -I/somepath build`: `-I` is not passed to the C compiler (gcc).\n  - Ditto for `-l` and `-L`\n  - `./setup.py config -Dfoo=bar build`: results to error `error: error in command line: command \'config\' has no such option \'define\'`\n  - Ditto for `-Ufoo`\n\nFor `build_ext` the flags `-I` and `-L` appear to work, but flags `-D`, `-U`, `-l`, `-R` are not recognized although they appear in the help text. Instead, `error: option -l not recognized`\nAlso, `build_ext` accepts the switches of the commands `build_src` and `config` which is slightly confusing.\n\nFor `build_clib`, there appears to be no way to pass the parameters `-I` and `-L`: the parameters from `config` are ignored, and `build_clib` doesn\'t accept them.\n\nFor `config_fc --fcompiler=gnu95`, the parameters `--noopt`, `--noarch` and `--debug` appear to have no effect on the resulting compiler flags used, I always get `-O3 -funroll-loops -mmmx -m3dnow -msse`\n\nThe above occurs on the following setup.py, which AFAIK is correct\n\n\n    #!/usr/bin/env python\n    \n    from numpy.distutils.misc_util import Configuration\n    \n    def configuration(parent_package=\'\', top_path=None):\n        config = Configuration(\'xxx\', parent_package, top_path,\n                               package_path=\'xxx\',\n                               )\n    \n        config.add_library(\'a\', sources=[\'xxx/a.c\'])\n        config.add_extension(\'b\', sources=[\'xxx/b.c\'], libraries=[\'a\'])\n        config.add_library(\'c\', sources=[\'xxx/c.f90\'])\n        return config\n    \n    if __name__ == ""__main__"":\n        from numpy.distutils.core import setup\n        setup(**configuration(top_path=\'\').todict())\n\n\n\nI think I had also some problems with the --compiler parameter on Windows (needed to specify it multiple times both for config, build_clib and build_ext), but I\'ll need to verify this later.\n'"
1136,7725344,numpy-gitbot,numpy-gitbot,2012-10-19 18:56:35,2012-10-19 18:56:35,2012-10-19 18:56:35,closed,,1.0.4,1,11 - Bug;component: numpy.distutils;priority: highest,https://api.github.com/repos/numpy/numpy/issues/1136,b'numpy r3871 build problem (Trac #538)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/538 on 2007-06-15 by @chanley, assigned to @dmcooke._\n\nThe latest numpy build fails on my RHE3 machine using the default gnu compilers.  The build log is attached.'"
1135,7725343,numpy-gitbot,numpy-gitbot,2012-10-19 18:56:32,2012-10-19 18:56:33,2012-10-19 18:56:33,closed,,,2,11 - Bug;component: numpy.oldnumeric;priority: low,https://api.github.com/repos/numpy/numpy/issues/1135,b'Compatibility issues with old Numeric (Trac #537)',"b""_Original ticket http://projects.scipy.org/numpy/ticket/537 on 2007-06-13 by trac user multijon, assigned to unknown._\n\nHi,\n\nI've been using the Python Gnuplot interface a few months now, and have noticed there is a strange discrepancy between the numbers I provide it with and the results displayed (Needed background - Gnuplot.py hasn't been updated for the past couple of years, and is using old Numeric in order to convert input data into a standard input type). \n\nToday, after diving into its source code, I found out that Gnuplot is trying to cast a float first to float32, and if it doesn't succeed, it then casts the input data into float64. My guess is that old Numeric would have raised an Exception when trying to cast a number larger than 32bits into a 32-bit data-type, a feature that isn't available in the current version of Numeric.\n\nThis, of course, should be fixed for compatibility's sake.\n\n\nJon\n"""
1134,7725340,numpy-gitbot,numpy-gitbot,2012-10-19 18:56:28,2012-10-19 18:56:30,2012-10-19 18:56:30,closed,,1.6.0,7,11 - Bug;component: numpy.core;priority: low,https://api.github.com/repos/numpy/numpy/issues/1134,b'importing numpy crashes python if python is built with COUNT_ALLOCS (Trac #536)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/536 on 2007-06-12 by @cournape, assigned to unknown._\n\nI tried to build numpy with a special built python (using COUNT_ALLOCS). Unfortunately, importing numpy crashes the interpreter. It looks like the C function _import_array is where the crashs happens, when importing umath.so'"
1133,7725339,numpy-gitbot,numpy-gitbot,2012-10-19 18:56:26,2012-10-19 18:56:27,2012-10-19 18:56:27,closed,,1.0.4,1,11 - Bug;component: numpy.distutils;priority: low,https://api.github.com/repos/numpy/numpy/issues/1133,b'distutils places extra files in installation directory (Trac #535)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/535 on 2007-06-05 by @chanley, assigned to @dmcooke._\n\nWhen installing numpy, the ""COMPATIBILITY"", ""scipy_compatibility"", and ""site.cfg.example"" files are placed in site-packages (or whatever the installation target might be).\n\n\n\n    [familyfun:site-packages/lib/python] chanley% ls -al\n    total 40\n    drwxr-xr-x    7 chanley  chanley   238 Jun  5 09:14 .\n    drwxr-xr-x    3 chanley  chanley   102 May  2 15:24 ..\n    -rw-r--r--    1 chanley  chanley  1620 Apr 22 15:51 COMPATIBILITY\n    drwxr-xr-x   36 chanley  chanley  1224 Jun  5 09:14 numpy\n    -rw-r--r--    1 chanley  chanley  1619 Jun  5 09:14 numpy-1.0.4.dev3859-py2.5.egg-info\n    -rw-r--r--    1 chanley  chanley   123 Jan 11 10:32 scipy_compatibility\n    -rw-r--r--    1 chanley  chanley  4613 Apr 16 10:33 site.cfg.example\n    [familyfun:site-packages/lib/python] chanley% \n\n\n\nThis is true for all platforms I have tested (Solaris 10, Mac OSX 10.4.9, RHE3).  I don\'t think this is intended.\n\nChris\n\n\n'"
1132,7725338,numpy-gitbot,numpy-gitbot,2012-10-19 18:56:23,2012-10-19 18:56:25,2012-10-19 18:56:25,closed,,1.0.4,2,11 - Bug;component: numpy.core;priority: high,https://api.github.com/repos/numpy/numpy/issues/1132,b'build problem on Intel Mac running OSX 10.4 (Trac #534)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/534 on 2007-06-03 by @chanley, assigned to unknown._\n\nI cannot build numpy r3857 on my Intel MacBook running OS X 10.4.  It appears that distutils is looking for a FORTRAN compiler which should not be required to build numpy.  Build log is attached to the ticket.\n'"
1130,7725330,numpy-gitbot,numpy-gitbot,2012-10-19 18:56:11,2012-10-19 18:56:14,2012-10-19 18:56:14,closed,,1.0.4,3,11 - Bug;component: Other;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1130,b'Invalid numpy.trace docstring (Trac #532)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/532 on 2007-06-01 by @pv, assigned to unknown._\n\nThe numpy.trace docstring is invalid, trace actually sums over the diagonal in the __first__ two axes by default:\n\n\n\n    import numpy as N\n    print N.__version__\n    N.info(N.trace)\n    x = N.zeros((4,4,5,6))\n    print N.trace(x).shape\n    x = N.zeros((5,6,4,4))\n    print N.trace(x).shape\n\n\noutputs\n\n\n    1.0.3\n     trace(a, offset=0, axis1=0, axis2=1, dtype=None, out=None)\n    \n    trace(a,offset=0, axis1=0, axis2=1) returns the sum along diagonals\n    (defined by the last two dimenions) of the array.\n    (5, 6)\n    (4, 4)\n\n\n'"
1129,7725327,numpy-gitbot,numpy-gitbot,2012-10-19 18:56:07,2012-10-19 18:56:09,2012-10-19 18:56:09,closed,,1.0.4,5,11 - Bug;component: numpy.distutils;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1129,"b""SciPy Windows build with Intel Visual Fortran doesn't work (Trac #531)""","b""_Original ticket http://projects.scipy.org/numpy/ticket/531 on 2007-05-31 by @alberts, assigned to @dmcooke._\n\n!NumPy build on Windows with MSVC is working now. Next up, !SciPy build with with Intel Visual Fortran.\n\nCommand I'm using to build:\n\n\n\n    python setup.py -v config --compiler=msvc --fcompiler=intelv build_clib --compiler=msvc --fcompiler=intelv build_ext --compiler=msvc --fcompiler=intelv bdist_wininst\n\n\n\nsite.cfg contents in !NumPy root directory when I built that:\n\n\n\n    [mkl]\n    include_dirs = C:\\Program Files\\Intel\\MKL\\9.0\\include\n    library_dirs = C:\\Program Files\\Intel\\MKL\\9.0\\ia32\\lib\n    mkl_libs = mkl_c, libguide40\n    lapack_libs = mkl_lapack\n\n\n\nBuild output when compiling SciPy attached. Looks like it's struggling with a path name that contains a space."""
1128,7725325,numpy-gitbot,numpy-gitbot,2012-10-19 18:56:04,2012-10-19 18:56:04,2012-10-19 18:56:04,closed,,1.0.4,1,11 - Bug;component: numpy.distutils;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1128,"b""SciPy Windows build with Intel Visual Fortran doesn't work (Trac #530)""","b""_Original ticket http://projects.scipy.org/numpy/ticket/530 on 2007-05-31 by @alberts, assigned to @dmcooke._\n\n!NumPy build on Windows with MSVC is working now. Next up, !SciPy build with with Intel Visual Fortran.\n\nCommand I'm using to build:\n\n\n\n    python setup.py -v config --compiler=msvc --fcompiler=intelv build_clib --compiler=msvc --fcompiler=intelv build_ext --compiler=msvc --fcompiler=intelv bdist_wininst\n\n\n\nsite.cfg contents in !NumPy root directory when I built that:\n\n\n\n    [mkl]\n    include_dirs = C:\\Program Files\\Intel\\MKL\\9.0\\include\n    library_dirs = C:\\Program Files\\Intel\\MKL\\9.0\\ia32\\lib\n    mkl_libs = mkl_c, libguide40\n    lapack_libs = mkl_lapack\n\n\n\nBuild output when compiling SciPy attached. Looks like it's struggling with a path name that contains a space."""
1126,7725319,numpy-gitbot,numpy-gitbot,2012-10-19 18:55:59,2012-10-19 18:56:00,2012-10-19 18:56:00,closed,,1.0.4,1,11 - Bug;component: numpy.lib;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1126,b'select changes choicelist as side effect (Trac #528)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/528 on 2007-05-28 by trac user markmat, assigned to unknown._\n\nselect() changes choicelist as side effect. Example:\n\n\n\n\n    >>> condlist = [zeros((4,6), int) for i in range(3)]\n    >>> choicelist = [zeros((4,6)) for i in range(3)]\n    >>> print len(condlist), len(choicelist)\n    3 3\n    >>> result = numpy.select(condlist, choicelist)\n    >>> print len(condlist), len(choicelist)\n    3 4\n\n\n\nI running Windows XP, Python 2.4.3, Numpy 1.0.2'"
1124,7725314,numpy-gitbot,numpy-gitbot,2012-10-19 18:55:53,2012-10-19 18:55:55,2012-10-19 18:55:55,closed,,1.6.0,6,11 - Bug;component: numpy.distutils;priority: high,https://api.github.com/repos/numpy/numpy/issues/1124,b'g95 support is broken (Trac #526)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/526 on 2007-05-24 by trac user bgranger, assigned to @pearu._\n\nWhen using g95 as the fortran compiler, numpy won\'t build.  This is because the g95 fortran compiler doesn\'t set the linker_exe key of the executables dict.  Thus you get a KeyError:\n\n\n    running build_ext\n    customize UnixCCompiler\n    customize UnixCCompiler using build_ext\n    customize G95FCompiler\n    Traceback (most recent call last):\n      File ""setup.py"", line 89, in <module>\n        setup_package()\n      File ""setup.py"", line 82, in setup_package\n        configuration=configuration )\n      File ""/home2/user/work/txp/txpython-0.2-linux/spkg/build/numpy-1.0.3.dev3673/numpy/distutils/core.py"", line 174, in setup\n        return old_setup(**new_attr)\n      File ""/home2/user/work/txp/txpython-0.2-linux/local/lib/python2.5/distutils/core.py"", line 151, in setup\n        dist.run_commands()\n      File ""/home2/user/work/txp/txpython-0.2-linux/local/lib/python2.5/distutils/dist.py"", line 974, in run_commands\n        self.run_command(cmd)\n      File ""/home2/user/work/txp/txpython-0.2-linux/local/lib/python2.5/distutils/dist.py"", line 994, in run_command\n        cmd_obj.run()\n      File ""/home2/user/work/txp/txpython-0.2-linux/spkg/build/numpy-1.0.3.dev3673/numpy/distutils/command/install.py"", line 16, in run\n        r = old_install.run(self)\n      File ""/home2/user/work/txp/txpython-0.2-linux/local/lib/python2.5/distutils/command/install.py"", line 506, in run\n        self.run_command(\'build\')\n      File ""/home2/user/work/txp/txpython-0.2-linux/local/lib/python2.5/distutils/cmd.py"", line 333, in run_command\n        self.distribution.run_command(command)\n      File ""/home2/user/work/txp/txpython-0.2-linux/local/lib/python2.5/distutils/dist.py"", line 994, in run_command\n        cmd_obj.run()\n      File ""/home2/user/work/txp/txpython-0.2-linux/local/lib/python2.5/distutils/command/build.py"", line 112, in run\n        self.run_command(cmd_name)\n      File ""/home2/user/work/txp/txpython-0.2-linux/local/lib/python2.5/distutils/cmd.py"", line 333, in run_command\n        self.distribution.run_command(command)\n      File ""/home2/user/work/txp/txpython-0.2-linux/local/lib/python2.5/distutils/dist.py"", line 994, in run_command\n        cmd_obj.run()\n      File ""/home2/user/work/txp/txpython-0.2-linux/spkg/build/numpy-1.0.3.dev3673/numpy/distutils/command/build_ext.py"", line 113, in run\n        self.fcompiler.customize(self.distribution)\n      File ""/home2/user/work/txp/txpython-0.2-linux/spkg/build/numpy-1.0.3.dev3673/numpy/distutils/fcompiler/__init__.py"", line 351, in customize\n        linker_exe_flags = self.__get_flags(self.get_flags_linker_exe,\'LDFLAGS\')\n      File ""/home2/user/work/txp/txpython-0.2-linux/spkg/build/numpy-1.0.3.dev3673/numpy/distutils/fcompiler/__init__.py"", line 533, in __get_flags\n        var = command()\n      File ""/home2/user/work/txp/txpython-0.2-linux/spkg/build/numpy-1.0.3.dev3673/numpy/distutils/fcompiler/__init__.py"", line 203, in get_flags_linker_exe\n        if self.executables[\'linker_exe\']:\n    KeyError: \'linker_exe\'\n\n\nThe current syntax in `fcompiler/__init__.py`, in `get_flags_linker_exe`\ndoes not protect against this error.  My guess is that `linker_exe` should simply be set properly in the g95 fcompiler class.\n\n'"
1123,7725313,numpy-gitbot,numpy-gitbot,2012-10-19 18:55:50,2012-10-19 18:55:51,2012-10-19 18:55:51,closed,,1.0.3 Release,3,11 - Bug;component: numpy.core;priority: low,https://api.github.com/repos/numpy/numpy/issues/1123,b'Inconsistency in the length of buffers of unicode scalars (Trac #525)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/525 on 2007-05-22 by @FrancescAlted, assigned to unknown._\n\nI think there is an inconsistency here:\n\n\n\n    >>> import sys\n    >>> sys.maxunicode\n    65535  # using python with UCS2 here\n    >>> u=numpy.unicode_(\'popo\')\n    >>> u.data\n    <read-only buffer for 0x82276e0, size 16, offset 0 at 0xb7dc3780>\n    >>> len(u.data)\n    8  # should be 16!\n    >>> u=numpy.array(u\'popo\')\n    >>> u.data\n    <read-write buffer for 0x82454d0, size 16, offset 0 at 0xb7dc3780>\n    >>> len(u.data)\n    16    # This works fine for 0-dim arrays\n\n\n\nThis prevents thinks like:\n\n\n\n    >>> numpy.ndarray(buffer=numpy.unicode_(\'popo\'), dtype=\'uint32\', shape=4)\n    Traceback (most recent call last):\n      File ""<stdin>"", line 1, in <module>\n    TypeError: buffer is too small for requested array\n\n\n\nto work correctly.\n\nHowever, the above works well in UCS4 Python interpreters:\n\n\n\n    >>> import sys\n    >>> sys.maxunicode\n    1114111\n    >>> import numpy\n    >>> u=numpy.unicode_(\'popo\')\n    >>> u.data\n    <read-only buffer for 0x8203b60, size 16, offset 0 at 0xb7283640>\n    >>> len(u.data)\n    16\n    >>> numpy.ndarray(buffer=u, dtype=\'uint32\', shape=4)\n    array([112, 111, 112, 111], dtype=uint32)   # Works fine\n\n\n\nThanks'"
1122,7725312,numpy-gitbot,numpy-gitbot,2012-10-19 18:55:48,2012-10-19 18:55:49,2012-10-19 18:55:49,closed,,,1,11 - Bug;component: Other;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1122,b'Scalar arithmetic with arrays produces values that masquerade as a particular type but are not (Trac #524)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/524 on 2007-05-21 by @davidsocha, assigned to unknown._\n\nMultiplication and addition of scalars with arrays produces values that say they are of a particular type but are not actually of that type.\n\nHere\'s an example:\n\n\n    Microsoft Windows XP [Version 5.1.2600]\n    (C) Copyright 1985-2001 Microsoft Corp.\n    \n    C:\\Documents and Settings\\socha>python\n    Python 2.4.3 - Enthought Edition 1.0.0 (#69, Aug  2 2006, 12:09:59) [MSC v.1310 32 bit (Intel)] on win32\n    Type ""help"", ""copyright"", ""credits"" or ""license"" for more information.\n    >>> import numpy\n    >>> numpy.__version__\n    \'1.0.2\'\n    >>> from numpy import array\n    >>> a = array([1000])\n    >>> b = 1000*array([1])\n    >>> type(a[0]) == type(b[0])\n    False\n    >>> type(a[0])\n    <type \'numpy.int32\'>\n    >>> type(b[0])\n    <type \'numpy.int32\'>\n    >>> from numpy import int32\n    >>> type(a[0]) == int32\n    True\n    >>> type(b[0]) == int32\n    False\n    >>> b = array([1000])\n    >>> type(b[0]) == int32\n    True\n    >>> type(a[0]) == type(b[0])\n    True\n    >>> c = 1000+array([1])          # also happens for \'+\'\n    >>> c\n    array([1001])\n    >>> type(c[0]) == int32\n    False\n    >>>\n\n\n\nDaniel Terhorst and David Socha ([http://www.urbansim.org UrbanSim])'"
1121,7725311,numpy-gitbot,numpy-gitbot,2012-10-19 18:55:46,2012-10-23 02:37:02,2012-10-19 18:55:47,closed,,1.0.3 Release,1,11 - Bug;component: numpy.numarray;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1121,b'Tiny bug causes compilation on Cygwin to fail (Trac #523)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/523 on 2007-05-17 by @mdehoon, assigned to unknown._\n\nIn numpy/numarray/_capi.c, for a number of platforms fenv.h or fenv.c is #included twice.\n\nLines 227-232 in current source:\n#if defined(__GLIBC__) || defined(__APPLE__) || defined(__CYGWIN__) || defined(__MINGW32__)\n\n#if defined(__GLIBC__) || defined(__APPLE__) || defined(__MINGW32__)\n\n#include <fenv.h>\n\n#elif defined(__CYGWIN__)\n\n#include ""numpy/fenv/fenv.c""\n\n#endif\n\nand further down in lines 2940-2945:\n\n#elif defined(__GLIBC__) || defined(__APPLE__) || defined(__CYGWIN__) || defined(__MINGW32__)\n\n#if defined(__GLIBC__) || defined(darwin) || defined(__MINGW32__)\n\n#include <fenv.h>\n\n#elif defined(__CYGWIN__)\n\n#include ""numpy/fenv/fenv.h""\n\n#endif\n\nIn numpy release 1.0.2, the second #include for __CYGWIN__ actually reads \n#include ""numpy/fenv/fenv.c""\nso it includes fenv.c instead of fenv.h twice. This causes the somewhat cryptic error message:\n\nIn file included from numpy/numarray/_capi.c:2945:\nnumpy/core/include/numpy/fenv/fenv.c:32: error: redefinition of \'__fe_dfl_env\'\nnumpy/core/include/numpy/fenv/fenv.c:32: error: previous definition of \'__fe_dfl\n_env\' was here\n\nIn the latest revision of numpy/numarray/_capi.c, the second #include reads fenv.h instead of fenv.c. This appears to be a lucky typo, which actually allows the compilation to proceed. Nevertheless, the second set of #include\'s seem to be unnecessary.'"
1119,7725307,numpy-gitbot,numpy-gitbot,2012-10-19 18:55:41,2012-10-19 18:55:43,2012-10-19 18:55:43,closed,,1.0.3 Release,4,11 - Bug;component: Other;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1119,b'add stacklevel=2 to ScipyTest DeprecationWarning (Trac #521)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/521 on 2007-05-14 by @mbeachy, assigned to unknown._\n\nPlease add stacklevel=2 to the !ScipyTest !DeprecationWarning in numpy/testing/numpytest.py so the deprecation warning is for the user of !ScipyTest, not the numpytest module.\n\nThis should be safe and easy and could presumably target the 1.03 release.\n'"
1118,7725303,numpy-gitbot,numpy-gitbot,2012-10-19 18:55:38,2012-10-19 18:55:40,2012-10-19 18:55:40,closed,,1.0.3 Release,2,11 - Bug;component: Other;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1118,"b""intel compiler package uses arch specific flags in get_flags_linker_so that can't be overridden (Trac #520)""","b""_Original ticket http://projects.scipy.org/numpy/ticket/520 on 2007-05-14 by @mbeachy, assigned to unknown._\n\nI've been trying to set up configuration files to standardize a local 1.02 numpy installation and have run into a problem with the intel compiler package. If I try\n\n`python setup.py config_fc --fcompiler=intel build_ext`\n\n(from the top level numpy-1.0.2 directory) I get the following failures (with ifort 8.1):\n\n\n\n    ifort: Command line warning: extension 'M' not supported ignored in option '-x'\n    ifort: Command line error: Unrecognized keyword 'SSE2' for option '-arch'\n    ifort: Command line warning: extension 'M' not supported ignored in option '-x'\n    ifort: Command line error: Unrecognized keyword 'SSE2' for option '-arch'\n\n\n\nI assumed that the 'noarch' option to the config_fc command would get me around this, but it does not. This seems to be because the get_flags_linker_so method in the numpy.distutils.fcompiler.intel.IntelFCompiler class always extends the options with the result of self.get_flags_arch(). Removing that call fixes the problem.\n\nI don't think that having architecture specific flags in the shared linker options even matters, does it? It would be nice if we could just get rid of the self.get_flags_arch() call in get_flags_linker_so for the 1.03 release."""
1117,7725301,numpy-gitbot,numpy-gitbot,2012-10-19 18:55:36,2012-10-19 18:55:37,2012-10-19 18:55:37,closed,,1.0.3 Release,3,11 - Bug;component: numpy.core;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1117,b'allclose fails with inf (Trac #519)',"b""_Original ticket http://projects.scipy.org/numpy/ticket/519 on 2007-05-14 by trac user qwerty, assigned to unknown._\n\nallclose(x,y, rtol, atol)\n\n| x - y | < atol + rtol * | y |\n\n\nThis formula is good so long as x and y do not contain inf (-inf) at the same index.  In such a case, the difference is not well-defined.  The problem then, is that allclose fails and returns False when it should be returning True.\n\n\n\n    >>> a = array([log(0)])\n    >>> b = array([log(0)])\n    >>> a == b\n    array([True], dtype=bool)\n    >>> allclose(a,b)\n    False\n\n\n\nalltrue(a==b) will work if you have an array of inf...but this is definitely undesirable when you comparing floats.  Somehow, it would be nice if the following returned True instead of False.\n\n\n\n    >>> a = array([log(0), log(.5)])\n    >>> b = array([log(0), log(.5000000001)])\n    >>> allclose(a,b)\n    False\n\n\n\nEck. Here is an uninformed solution:\n\n\n\n    pruned_x = []\n    pruned_y = []\n    for xx, yy in zip(x,y):\n      if xx != yy:\n        pruned_x.append(xx)\n        pruned_y.append(yy)\n    return old_allclose(array(pruned_x), array(pruned_y))\n\n\n\nThis means we'd need an additional run through the values, but this certainly makes results more predictable...and prevents the operator from having to check for cases like these."""
1116,7725300,numpy-gitbot,numpy-gitbot,2012-10-19 18:55:32,2012-10-19 18:55:34,2012-10-19 18:55:34,closed,,1.0.3 Release,5,11 - Bug;component: numpy.core;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1116,"b'a.var(), a.std(), and a.mean() return incorrect type when no axis specified (Trac #518)'","b""_Original ticket http://projects.scipy.org/numpy/ticket/518 on 2007-05-12 by @charris, assigned to unknown._\n\nThe dtype keyword has no effect when the {variance,std,mean} is computed using the default axis:\n\n\n\n    In [28]: eye(2).var(dtype=float32).dtype\n    Out[28]: dtype('float64')\n\n\n\nIt does work when the axis is specified.\n\n\n\n    In [29]: eye(2).var(axis=0,dtype=float32).dtype\n    Out[29]: dtype('float32')\n\n\n\nInteger types are always ignored:\n\n\n\n    In [35]: eye(2).var(axis=0,dtype=int).dtype\n    Out[35]: dtype('float64')\n\n\n\nThe question here is whether int specifies the accumulator type, which should probably raise an error, or the return type for values computed using float64.\n\n"""
1115,7725296,numpy-gitbot,numpy-gitbot,2012-10-19 18:55:29,2012-10-23 02:37:01,2012-10-19 18:55:31,closed,,,5,11 - Bug;component: Other;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1115,"b'Mean, median, and std dev need optimization in numpy (Trac #517)'","b'_Original ticket http://projects.scipy.org/numpy/ticket/517 on 2007-05-10 by trac user cwarner62, assigned to unknown._\n\nI have been using numpy/scipy while writing software to deal with sets of large (2048x2048) astronomical images and have discovered that the built-in mean, median, and std methods for numpy are very slow -- much slower than calculating those quantities by hand.  There is no reason for this and I am not sure why they were written in such a way as to be so slow but for instance m = reduce(add,z)/z.shape[0] is nearly twice as fast as m = z.mean(0).  See below for full results from some time tests I ran:\n\n>>> z.shape\n(10, 2048, 2048)\n>>> z\narray([[[ 186.,  154.,  134., ...,  385.,  359.,  251.],\n        [ 232.,  208.,  210., ...,  344.,  333.,  220.],\n        [ 236.,  208.,  226., ...,  330.,  324.,  226.],\n        ...,\n        [ 428.,  400.,  475., ...,  334.,  304.,  371.],\n        [ 447.,  488.,  455., ...,  296.,  285.,  340.],\n        [ 495.,  480.,  533., ...,  236.,  226.,  275.]],\n\n       [[ 138.,  119.,  111., ...,  309.,  278.,  189.],\n        [ 185.,  168.,  183., ...,  289.,  269.,  176.],\n        [ 212.,  175.,  188., ...,  280.,  282.,  188.],\n        ...,\n        [ 360.,  346.,  398., ...,  277.,  246.,  275.],\n        [ 362.,  407.,  378., ...,  258.,  233.,  241.],\n        [ 382.,  381.,  424., ...,  176.,  175.,  209.]],\n\n       [[ 136.,  117.,  106., ...,  304.,  268.,  182.],\n        [ 174.,  169.,  180., ...,  285.,  275.,  169.],\n        [ 199.,  167.,  183., ...,  280.,  278.,  188.],\n        ...,\n        [ 352.,  349.,  398., ...,  279.,  245.,  267.],\n        [ 367.,  410.,  378., ...,  250.,  227.,  251.],\n        [ 379.,  373.,  418., ...,  188.,  186.,  200.]],\n\n       ...,\n       [[ 144.,  115.,  101., ...,  304.,  274.,  193.],\n        [ 183.,  168.,  173., ...,  285.,  274.,  171.],\n        [ 209.,  169.,  184., ...,  273.,  278.,  182.],\n        ...,\n        [ 356.,  346.,  395., ...,  272.,  244.,  264.],\n        [ 361.,  412.,  377., ...,  244.,  235.,  243.],\n        [ 384.,  378.,  428., ...,  194.,  186.,  208.]],\n\n       [[ 133.,  117.,  107., ...,  295.,  273.,  183.],\n        [ 180.,  167.,  185., ...,  286.,  273.,  174.],\n        [ 199.,  168.,  189., ...,  277.,  285.,  189.],\n        ...,\n        [ 362.,  344.,  399., ...,  283.,  243.,  262.],\n        [ 362.,  408.,  383., ...,  249.,  227.,  242.],\n        [ 377.,  376.,  421., ...,  181.,  175.,  204.]],\n\n       [[ 139.,  121.,  105., ...,  309.,  273.,  189.],\n        [ 177.,  174.,  181., ...,  289.,  280.,  177.],\n        [ 209.,  177.,  185., ...,  273.,  273.,  183.],\n        ...,\n        [ 353.,  339.,  396., ...,  264.,  248.,  266.],\n        [ 367.,  414.,  386., ...,  246.,  228.,  249.],\n        [ 387.,  373.,  423., ...,  183.,  178.,  202.]]])\n\n1. Mean is slower than reduce(add)\n>>> t = time.time(); m = z.mean(0); print time.time()-t\n1.68424701691\n>>> m\narray([[ 142.4,  121.9,  108.8, ...,  311.9,  279.9,  193.2],\n       [ 184.4,  173.9,  181.9, ...,  293.1,  280.4,  179.8],\n       [ 206.5,  174.1,  190.9, ...,  284.2,  284.7,  190.7],\n       ...,\n       [ 365.2,  349.9,  406.3, ...,  279.7,  255.3,  276.4],\n       [ 373. ,  418.6,  389.1, ...,  254.1,  237.7,  252.9],\n       [ 392.3,  385.4,  433.4, ...,  190.3,  183.3,  209.8]])\n>>> t = time.time(); m = reduce(add,z)/z.shape[0]; print time.time()-t\n1.00891780853\n>>> m\narray([[ 142.4,  121.9,  108.8, ...,  311.9,  279.9,  193.2],\n       [ 184.4,  173.9,  181.9, ...,  293.1,  280.4,  179.8],\n       [ 206.5,  174.1,  190.9, ...,  284.2,  284.7,  190.7],\n       ...,\n       [ 365.2,  349.9,  406.3, ...,  279.7,  255.3,  276.4],\n       [ 373. ,  418.6,  389.1, ...,  254.1,  237.7,  252.9],\n       [ 392.3,  385.4,  433.4, ...,  190.3,  183.3,  209.8]])\n\n2. Std Dev is much slower than calculating by hand:\n>>> t = time.time(); s = z.std(0); print time.time()-t\n16.9463210106\n>>> s\narray([[ 14.90771612,  11.42322196,   8.87468309, ...,  24.65542537,\n         26.60996054,  19.55914109],\n       [ 16.13815355,  11.81058847,  10.22203502, ...,  17.3634674 ,\n         18.25486237,  13.99142595],\n       [ 10.92931837,  11.86970935,  12.16100325, ...,  16.22837022,\n         13.55027675,  12.09173271],\n       ...,\n       [ 21.27345764,  16.87275911,  23.2467202 , ...,  18.83640093,\n         17.51028269,  31.8031445 ],\n       [ 24.95195383,  23.26886332,  22.26858774, ...,  14.54269576,\n         16.81695573,  29.48711583],\n       [ 34.40363353,  31.65185619,  33.29324256, ...,  16.14341971,\n         15.36912489,  22.18017132]])\n>>> t = time.time(); m = reduce(add,z)/z.shape[0]; s = sqrt(reduce(add,z*z)*(1./z.shape[0])-m*m); print time.time()-t\n2.93472313881\n>>> s\narray([[ 14.90771612,  11.42322196,   8.87468309, ...,  24.65542537,\n         26.60996054,  19.55914109],\n       [ 16.13815355,  11.81058847,  10.22203502, ...,  17.3634674 ,\n         18.25486237,  13.99142595],\n       [ 10.92931837,  11.86970935,  12.16100325, ...,  16.22837022,\n         13.55027675,  12.09173271],\n       ...,\n       [ 21.27345764,  16.87275911,  23.2467202 , ...,  18.83640093,\n         17.51028269,  31.8031445 ],\n       [ 24.95195383,  23.26886332,  22.26858774, ...,  14.54269576,\n         16.81695573,  29.48711583],\n       [ 34.40363353,  31.65185619,  33.29324256, ...,  16.14341971,\n         15.36912489,  22.18017132]])\n\n3. Median slower than sorting and taking middle value\n>>> t = time.time(); m = median(z); print time.time()-t\n18.8376431465\n>>> m\narray([[ 138. ,  120. ,  106.5, ...,  304. ,  273. ,  188. ],\n       [ 179. ,  169. ,  180.5, ...,  287. ,  274.5,  176.5],\n       [ 202. ,  169.5,  188. , ...,  280. ,  281. ,  188. ],\n       ...,\n       [ 360.5,  344. ,  398.5, ...,  274.5,  248. ,  265. ],\n       [ 366.5,  410.5,  381.5, ...,  249.5,  233.5,  242.5],\n       [ 382. ,  374.5,  422.5, ...,  187. ,  179. ,  203. ]])\n\n>>> from arraymedian import *\n>>> t = time.time(); m = arraymedian(z,axis=""Y""); print time.time()-t\n11.0808348656\n>>> m\narray([[ 138. ,  120. ,  106.5, ...,  304. ,  273. ,  188. ],\n       [ 179. ,  169. ,  180.5, ...,  287. ,  274.5,  176.5],\n       [ 202. ,  169.5,  188. , ...,  280. ,  281. ,  188. ],\n       ...,\n       [ 360.5,  344. ,  398.5, ...,  274.5,  248. ,  265. ],\n       [ 366.5,  410.5,  381.5, ...,  249.5,  233.5,  242.5],\n       [ 382. ,  374.5,  422.5, ...,  187. ,  179. ,  203. ]])\n\n\nMy arraymedian method simply sorts and takes the middle value.  I can send it to you if you wish.  I have also noticed that doing this is still a factor of 2.5 slower than IDL\'s median method.  Perhaps the built-in sort is not optimized to do a quick sort?  Thanks.\n\nCraig\n\nwarner@astro.ufl.edu'"
1114,7725287,numpy-gitbot,numpy-gitbot,2012-10-19 18:55:21,2012-10-19 18:55:22,2012-10-19 18:55:22,closed,,1.0.3 Release,2,11 - Bug;component: numpy.core;priority: highest,https://api.github.com/repos/numpy/numpy/issues/1114,b'Error transposing arrays with many dimensions [fix included] (Trac #516)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/516 on 2007-05-10 by trac user gcross, assigned to unknown._\n\n== Symptom ==\n\nNumpy incorrectly reports the error ""dimensions too large"" when transposing arrays with many dimensions.  For example, the following code produces an error:\n\n\n\n    from numpy.random import rand\n    arr1 = rand(*(2,)*16)\n    arr2 = arr1.transpose(range(16))\n\n\n\nClearly the above should cause no problems, since not only should arr2 not be too big given we could already create arr1, but also in this particular case we are not even changing the indices of arr2!\n\n\n== Cause ==\n\nThe problem can be traced to an erroneous assumption made in the C routine PyArray_Transpose.  In line 1875 of this routine, a call is made to PyArray_NewFromDescr to allocate space for a new array descriptor:\n\n\n\n    \tret = (PyArrayObject *)\\\n    \t\tPyArray_NewFromDescr(ap->ob_type,\n    \t\t\t\t     ap->descr,\n    \t\t\t\t     n, permutation,\n    \t\t\t\t     NULL, ap->data, ap->flags,\n    \t\t\t\t     (PyObject *)ap);\n\n\n\nTo see the problem, look at the fourth argument of the call:  ""permutation"".  This passes in an array which contains the permuted indices, but in an argument which meant to specify the new dimensions of the array!  For arrays with, say, 16 dimensions, this confuses numpy into thinking that we are creating an array of size 16!=20922789888000, which is clearly not what we want.\n\nAs far as I can tell, this was done to save a little memory.  The programmer preferred not to create intermediate arrays with the correct values for the dimensions and strides to pass into PyArray_NewFromDescr, so instead he figured that he could just pass any dummy array with the correct size into the ""dims"" argument, and then later write the correct dimensions and strides directly into the fields of the newly allocated descriptor.  However, when doing this he forgot that the ""dims"" argument is used to check whether the array being allocated is too big, so that you cannot pass just anything into it and expect the call to work.\n\n== Solution ==\n\nI am not sufficiently familiar with the code to know whether passing a dummy array into this field is even a good idea, but assuming that it is: a better choice would be the ""dimensions"" field of the old array ""ap"", i.e. ""ap->dimensions"", so that the call becomes\n\n\n\n    \tret = (PyArrayObject *)\\\n    \t\tPyArray_NewFromDescr(ap->ob_type,\n    \t\t\t\t     ap->descr,\n    \t\t\t\t     n, ap->dimensions,\n    \t\t\t\t     NULL, ap->data, ap->flags,\n    \t\t\t\t     (PyObject *)ap);\n\n\n\nThis seems to fix the problem for me.\n\n== DIFF ==\n\nnumpy/core/src/multiarraymodule.c\n\n\n\n    1878c1878\n    <                                    n, permutation,\n    ---\n    >                                    n, ap->dimensions,\n\n'"
1113,7725286,numpy-gitbot,numpy-gitbot,2012-10-19 18:55:19,2012-10-19 18:55:20,2012-10-19 18:55:20,closed,,1.0.3 Release,2,11 - Bug;component: numpy.distutils;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1113,b'Wrong -march flags selected for modern Xeon processors (Trac #515)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/515 on 2007-05-10 by trac user jitter, assigned to @dmcooke._\n\nExecutive summary: A wrong -march flag for gfortran causes the scipy build to break.\n\n\ncat /proc/cpuinfo contains:\n\n\n\n    processor       : 3\n    vendor_id       : GenuineIntel\n    cpu family      : 6\n    model           : 15\n    model name      : Intel(R) Xeon(R) CPU            5160  @ 3.00GHz\n    stepping        : 6\n    cpu MHz         : 3000.149\n    cache size      : 4096 KB\n    physical id     : 3\n    siblings        : 2\n    core id         : 1\n    cpu cores       : 2\n    fpu             : yes\n    fpu_exception   : yes\n    cpuid level     : 10\n    wp              : yes\n    flags           : fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush dts acpi mmx fxsr sse sse2 ss ht tm syscall lm constant_tsc pni monitor ds_cpl vmx est tm2 cx16 xtpr lahf_lm\n    bogomips        : 6000.72\n    clflush size    : 64\n    cache_alignment : 64\n    address sizes   : 36 bits physical, 48 bits virtual\n    power management:\n\n\n\n\n... and it\'s correctly detected as Xeon CPU by cpuinfo.py. So far so good.\n\nnumpy/distutils/fcompiler/gnu.py fails to list Xeon processors, though. Therefore the default fallback (-march=i686) is chosen. This doesn\'t work because -march=i686 doesn\'t support 64bit instructions.\n\nThe bug isn\'t triggered inside numpy, but is triggered when building scipy (Lib/fftpack/dfftpack).\n\nMy current solution is to apply the following patch:\n\n\n\n\n    Index: numpy/distutils/fcompiler/gnu.py\n    ===================================================================\n    --- numpy/distutils/fcompiler/gnu.py    (revision 3737)\n    +++ numpy/distutils/fcompiler/gnu.py    (working copy)\n    @@ -225,6 +225,8 @@\n                     march_opt = \'-march=nocona\'\n                 elif cpu.is_Core2():\n                     march_opt = \'-march=nocona\'\n    +           elif cpu.is_Xeon():\n    +               march_opt = \'-march=nocona\'\n                 elif cpu.is_Prescott():\n                     march_opt = \'-march=prescott\'\n                 elif cpu.is_PentiumIV():\n\n\n\nYou *might* have to add an additional condition that it\'s a 64bit Xeon. I unfortunately don\'t have access to a 32bit Xeon to test that. No idea whether ""nocona"" cares about 32/64bit instructions.'"
1112,7725285,numpy-gitbot,numpy-gitbot,2012-10-19 18:55:17,2012-10-19 18:55:18,2012-10-19 18:55:18,closed,,1.0.3 Release,3,11 - Bug;component: numpy.core;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1112,b'memory corruption crash with array of strings (Trac #514)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/514 on 2007-05-09 by @bthyreau, assigned to unknown._\n\nHi,\nThe following code seems to trigger a crash for me.\n\n\n\n    from numpy import hstack, __version__\n    print __version__\n    s = ""aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa""\n    t = []\n    print hstack((t, s ))\n    # in some case, try a second time\n    print hstack((t, s ))\n\n\n\n1.0.3.dev3736\n\n*** glibc detected *** python: malloc(): memory corruption: 0x08c70a98 ***\n\nTested on Python 2.4.1, 2.4.3 and 2.5, with numpy 1.0.1.dev3460 and 1.0.3.dev3736\n\nNote that i\'m aware that the code itself is silly :-)\n\nThanks'"
1111,7725283,numpy-gitbot,numpy-gitbot,2012-10-19 18:55:15,2012-10-19 18:55:15,2012-10-19 18:55:15,closed,,1.0.3 Release,1,11 - Bug;component: numpy.core;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1111,b'Cygwin build problem: Multi-include protection needed for fenv.c (Trac #513)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/513 on 2007-05-07 by trac user jenisys, assigned to unknown._\n\n__VERSION:__  1.0.2\n__PLATFORM:__ Cygwin 1.5.24-2\n__PYTHON:__   2.5.1\n\nfile:numpy/core/include/numpy/fenv/fenv.c seems to be included multiple times in some source files. Compilation fails because symbol ""__fe_dfl_env"" exists twice in same source/object file.\n\n__QUICKFIX:__ Add header-like multi-include protection to source file.'"
1110,7725281,numpy-gitbot,charris,2012-10-19 18:55:11,2014-02-18 13:24:09,2014-02-18 13:24:09,closed,,,8,11 - Bug;component: numpy.core;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1110,b'Incorrect conversion of None into a string for string arrays of size less than 4. (Trac #512)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/512 on 2007-05-04 by @davidsocha, assigned to unknown._\n\nI would have expected each of the following to have \'None\' in them, and a type of |S4:\n\n\n\n    Python 2.4.3 - Enthought Edition 1.0.0 (#69, Aug  2 2006, 12:09:59) [MSC v.1310\n    32 bit (Intel)] on win32\n    Type ""help"", ""copyright"", ""credits"" or ""license"" for more information.\n    >>> import numpy\n    >>> numpy.__version__\n    \'1.0.2\'\n    >>> from numpy import array\n    >>> array([\'a\',None,\'c\'], dtype=\'S\')\n    array([\'a\', \'N\', \'c\'],\n          dtype=\'|S1\')\n    >>> array([\'abd\',None,\'cde\'], dtype=\'S\')\n    array([\'abd\', \'Non\', \'cde\'],\n          dtype=\'|S3\')\n    >>> array([\'abcd\',None,\'cdef\'], dtype=\'S\')\n    array([\'abcd\', \'None\', \'cdef\'],\n          dtype=\'|S4\')\n    >>>\n\n\n\n-- David Socha & Daniel Terhorst ([http://www.urbansim.org/ UrbanSim])'"
1109,7725280,numpy-gitbot,numpy-gitbot,2012-10-19 18:55:09,2012-10-19 18:55:10,2012-10-19 18:55:10,closed,,1.0.3 Release,0,11 - Bug;component: numpy.core;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1109,b'array does not consistently handle list with strings and Nones (Trac #511)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/511 on 2007-05-04 by @davidsocha, assigned to unknown._\n\nWhen creating an array from a list that has a combination of strings and Nones, it fails if None is not the last element, but succeeds if None is the last element.\n\n\n\n    Microsoft Windows XP [Version 5.1.2600]\n    (C) Copyright 1985-2001 Microsoft Corp.\n    \n    Z:\\>python\n    Python 2.4.3 - Enthought Edition 1.0.0 (#69, Aug  2 2006, 12:09:59) [MSC v.1310\n    32 bit (Intel)] on win32\n    Type ""help"", ""copyright"", ""credits"" or ""license"" for more information.\n    >>> import numpy\n    >>> numpy.__version__\n    \'1.0.2\'\n    >>> from numpy import array\n    >>> array([\'a\',None])\n    array([a, None], dtype=object)\n    >>> array([\'a\',None,\'b\'])\n    Traceback (most recent call last):\n      File ""<stdin>"", line 1, in ?\n    TypeError: expected a readable buffer object\n    >>> array([\'a\',None,\'b\',\'c\',None])\n    array([a, None, b, c, None], dtype=object)\n    >>>\n\n\n\n-- David Socha & Daniel Terhorst [http://www.urbansim.org/ UrbanSim]'"
1108,7725277,numpy-gitbot,numpy-gitbot,2012-10-19 18:55:06,2012-10-23 02:36:56,2012-10-19 18:55:08,closed,,1.3.0,4,11 - Bug;component: numpy.core;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1108,b'Difference in the number of elements in a fromfile() between Windows and Linux (Trac #510)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/510 on 2007-05-04 by trac user Matt, assigned to @cournape._\n\nLet ""0.0 inf 13.9040914426 14.7406669444 inf 4.41783247603 inf inf 6.05071515635 inf inf inf 15.6925185021 inf inf inf inf inf inf inf"" be the content of a text file data.txt\nIf data.txt is loaded with ""data = numpy.fromfile(""data.txt"", sep="" "", dtype = numpy.float)"", the behaviour is different under Linux and Windows :\nLinux : the array contains 20 elements.\nWindows : the array contains only 6 elements.\n\nSome thoughts : float(""inf"") in the Python interpreter is not recognised under Windows as the infinite value, it is for Linux.'"
1107,7725273,numpy-gitbot,numpy-gitbot,2012-10-19 18:55:03,2012-10-19 18:55:04,2012-10-19 18:55:04,closed,,1.0.3 Release,3,11 - Bug;component: Other;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1107,b'histogramdd fails on indentical input arrays (Trac #509)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/509 on 2007-05-02 by @huard, assigned to unknown._\n\nEmanuele Olivetti reported the following bug on the numpy discussion list. \n\n\n    import numpy\n    x = numpy.array([0,0])\n    y = numpy.array([0,1])\n    numpy.histogram2d(x,y,bins=[2,2])\n    -----------------------------------------------------------------\n    Warning: divide by zero encountered in log10\n    ---------------------------------------------------------------------------\n    exceptions.OverflowError                             Traceback (most\n    recent call last)\n\n\nThe patch fixes this and adds the relevant test. The fix makes the behavior identical to histogram, namely that if min() == max(), the range is chosen as [min()-.5, max()+.5].'"
1106,7725270,numpy-gitbot,numpy-gitbot,2012-10-19 18:55:00,2012-10-19 18:55:01,2012-10-19 18:55:01,closed,,1.0.3 Release,2,11 - Bug;component: numpy.core;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1106,b'astype modifies fortran-ordering (Trac #508)',"b""_Original ticket http://projects.scipy.org/numpy/ticket/508 on 2007-05-01 by @stefanv, assigned to unknown._\n\n\n\n    In [5]: z = N.array([[1,2],[3,4]],order='F').astype(N.float64)\n    \n    In [6]: z\n    Out[6]: \n    array([[ 1.,  2.],\n           [ 3.,  4.]])\n    \n    In [7]: z.flags\n    Out[7]: \n      C_CONTIGUOUS : True\n      F_CONTIGUOUS : False\n      OWNDATA : True\n      WRITEABLE : True\n      ALIGNED : True\n      UPDATEIFCOPY : False\n    \n    In [8]: x = N.array([[1,2],[3,4]],order='F')\n    \n    In [9]: x.flags\n    Out[9]: \n      C_CONTIGUOUS : False\n      F_CONTIGUOUS : True\n      OWNDATA : True\n      WRITEABLE : True\n      ALIGNED : True\n      UPDATEIFCOPY : False\n    \n    In [10]: x.astype(N.float64).flags\n    Out[10]: \n      C_CONTIGUOUS : True\n      F_CONTIGUOUS : False\n      OWNDATA : True\n      WRITEABLE : True\n      ALIGNED : True\n      UPDATEIFCOPY : False\n\n"""
1105,7725269,numpy-gitbot,numpy-gitbot,2012-10-19 18:54:57,2012-10-19 18:54:59,2012-10-19 18:54:59,closed,,1.0.3 Release,4,11 - Bug;component: Other;priority: high,https://api.github.com/repos/numpy/numpy/issues/1105,b'invalid math result in numpy.sqrt() and numpy.square() when using 2^32 and (2^32)^2 (Trac #507)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/507 on 2007-04-27 by trac user Xiph1980, assigned to unknown._\n\nI encountered this error a little while ago, and I couldn\'t find it already mentioned in other tickets.[[BR]]\nI apologise if I totally misplaced this bug-report or made any other mistakes, but this is the best place I\'ve found so far to report this :)\n\nI\'m not a programmer so I don\'t know where or how the error occurs, but with numpy.square weird stuff starts to happen in the area of 2^32^ where I first encountered it, for example, numpy.square((2**32)-1) gives the negative number -8589934591, and numpy.square((2**32)+1) gives 2^32^ * 2 + 1 as answer. Obviously this isn\'t correct...[[BR]]\nI filed this as critical since numpy.square() just gives a false result, and not an error to attend the programmer that something\'s going pretty wrong.\n\n\nFollowing is a direct copy from the interpreter window where the error how I encountered it, shows in lines 12-17. Also can be seen by the test in line 18-19 with the sqrt function in math that that version of sqrt doesn\'t bug out. \n\n\n    Python 2.5 (r25:51908, Sep 19 2006, 09:52:17) [MSC v.1310 32 bit (Intel)] on win\n    32\n    Type ""help"", ""copyright"", ""credits"" or ""license"" for more information.\n    >>> import numpy\n    >>> import math\n    >>> print numpy.__version__\n    1.0.2\n    >>> 2**32\n    4294967296L\n    >>> (2**32)**2\n    18446744073709551616L\n    >>> numpy.square(2**32)\n    0\n    >>> numpy.sqrt((2**32)**2)\n    Traceback (most recent call last):\n      File ""<stdin>"", line 1, in <module>\n    AttributeError: \'long\' object has no attribute \'sqrt\'\n    >>> math.sqrt((2**32)**2)\n    4294967296.0\n\n\n\nAfter a bit of fiddling, it seems that 9223372036854775807 is the largest number for with numpy.sqrt() works before it passing on the abovementioned AttributeError.\n\n\nSystemspecs:[[BR]]\nAMD Athlon 64 3200+[[BR]]\n2 * 512MB DDR[[BR]]\nWindows XP 32bit[[BR]]\nPython 2.5[[BR]]\nnumpy 1.02[[BR]]'"
1104,7725267,numpy-gitbot,numpy-gitbot,2012-10-19 18:54:53,2012-10-19 18:54:56,2012-10-19 18:54:56,closed,,1.0.3 Release,7,11 - Bug;component: numpy.fft;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1104,b'fft is unusable of moderately large arrays with a size which is a prime number (Trac #506)',"b""_Original ticket http://projects.scipy.org/numpy/ticket/506 on 2007-04-27 by @cournape, assigned to unknown._\n\nCurrently, using fft on arrays of size which has a prime number is extremely slow (up to 15 minutes for eg an array of size 100003). The major problem though is that the code being uninterruptible, this effectively kills the current python session. My understanding is that the fft in numpy is using fftpack converted in C, which uses a O(N^2) algorithm for prime numbers ? Would it be possible at least to make the code  interruptible ?\n\n{{\n#!python\nimport numpy as N\nfrom scipy import fftpack\n\n# prime is a prime number\nprime   = 100003\n                                                                                                                                                                      \na       = N.random.randn(prime)                                                      \n                                                                                         \nprint 'scipy computing...'                                                           \nfftpack.fft(a)                                                                       \n                                                                                         \nprint 'numpy computing...'                                                           \nN.fft.fft(a)                      \n}}"""
1103,7725265,numpy-gitbot,numpy-gitbot,2012-10-19 18:54:51,2012-10-19 18:54:52,2012-10-19 18:54:52,closed,,1.0.3 Release,2,11 - Bug;component: numpy.core;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1103,b'fromfile does not work with files opened with gzip (Trac #505)',"b""_Original ticket http://projects.scipy.org/numpy/ticket/505 on 2007-04-24 by trac user mesmith, assigned to unknown._\n\nI would like to use fromfile with a file opened with the gzip module\n\n         fp = gzip.open(filename,'r')\n         arraybuffer = fromfile(fp, sep=',')\n\nbut this gives an error\n\nIOError: first argument must be an open file\n\nI found a similar problem at\n\nhttp://projects.scipy.org/astropy/pyfits/ticket/7\n\nHas this problem been addressed in numpy? I am using version 1.0rc1.\n\n"""
1101,7725262,numpy-gitbot,numpy-gitbot,2012-10-19 18:54:46,2012-10-19 18:54:47,2012-10-19 18:54:47,closed,,1.0.3 Release,2,11 - Bug;component: numpy.core;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1101,b'non native endian does not work with frompyfunc (Trac #503)',"b""_Original ticket http://projects.scipy.org/numpy/ticket/503 on 2007-04-20 by trac user hugo, assigned to unknown._\n\n\n\n    >>> uradians = numpy.frompyfunc(math.radians, 1, 1)\n    >>> big = numpy.array([83.4, 83.5], dtype='>f8')\n    >>> uradians(big)\n    array([-2.6919063283e-182, 1.26773292198e-318], dtype=object)\n    >>> little = numpy.array([83.4, 83.5], dtype='<f8')\n    >>> uradians(little)\n    array([1.45560459616, 1.45734992542], dtype=object)\n\n\n\nThis particular example can better be done by multiplying by pi/180, it is just a simple prove of concept."""
1099,7725256,numpy-gitbot,numpy-gitbot,2012-10-19 18:54:35,2012-10-19 18:54:40,2012-10-19 18:54:40,closed,,1.0.3 Release,14,11 - Bug;component: numpy.core;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1099,"b'""print arr"" fails with nan when seterr(all=\'raise\') [test included] (Trac #501)'","b""_Original ticket http://projects.scipy.org/numpy/ticket/501 on 2007-04-17 by @astraw, assigned to unknown._\n\nThe included testcase (a patch to go in numpy's unittests) triggers what I consider to be a bug. One should be able to print an array no matter what the seterr state is. If necessary, I suggest array_str pushes the errors state when setting to 'ignore', does the conversion to string, and pops the error state again."""
1098,7725255,numpy-gitbot,numpy-gitbot,2012-10-19 18:54:32,2012-10-19 18:54:33,2012-10-19 18:54:33,closed,,1.0.3 Release,3,11 - Bug;component: numpy.distutils;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1098,b'Numpy distutils relies on obsoleted gfortran --version output (Trac #500)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/500 on 2007-04-17 by trac user jarodwilson, assigned to @dmcooke._\n\nNumpy\'s distutils relies on the output of gcc\'s gfortran --version to determine the presence of fortran 95 support. Upstream gcc has removed ""95"" from the version string, because gcc fortran actually supports f95, f77 and now part of f2003 as well. At present, numpy still builds against Fedora\'s development tree, but scipy, which uses numpy\'s distutils, crashes and burns.\n\nReferences:\n\nhttp://gcc.gnu.org/ml/gcc-patches/2007-03/msg00320.html\n\nhttp://gcc.gnu.org/bugzilla/show_bug.cgi?id=31050\n\nhttps://bugzilla.redhat.com/bugzilla/show_bug.cgi?id=236670\n'"
1095,7725246,numpy-gitbot,numpy-gitbot,2012-10-19 18:54:24,2012-10-23 02:36:54,2012-10-19 18:54:26,closed,,1.0.3 Release,3,11 - Bug;component: Other;priority: high,https://api.github.com/repos/numpy/numpy/issues/1095,b'The dot and inner products fail for large arrays on 64 bit linux using the ATLAS libraries. (Trac #497)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/497 on 2007-04-10 by @charris, assigned to unknown._\n\nThe problem is easy to exhibit:\n\n\n\n    In [2]: dot(eye(1000),eye(1000))\n    Illegal instruction\n    \n\n\n\nThe products work for smaller arrays, so I suspect either the output array or a work array is being created with the wrong size, probably a 64bit integer thing in the cblas interface. The example works on 32 bit linux.\n\nThis ticket replaces #1030'"
1094,7725243,numpy-gitbot,numpy-gitbot,2012-10-19 18:54:21,2012-10-19 18:54:23,2012-10-19 18:54:23,closed,,1.0.3 Release,2,11 - Bug;component: Other;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1094,b'ones and zeros return floats by default (not ints) (Trac #496)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/496 on 2007-04-05 by @davidsocha, assigned to @teoliphant._\n\nDespite what the documentation says, ones and zeros return floats by default, not ints.  Here\'s an example:\n\n\n\n    C:\\Documents and Settings\\socha>python\n    Python 2.4.3 - Enthought Edition 1.0.0 (#69, Aug  2 2006, 12:09:59) [MSC v.1310 32 bit (Intel)] on win32\n    Type ""help"", ""copyright"", ""credits"" or ""license"" for more information.\n    >>> import numpy\n    >>> numpy.__version__\n    \'1.0.2\'\n    >>> from numpy import ones\n    >>> ones(3)\n    array([ 1.,  1.,  1.])\n    >>> from numpy import zeros\n    >>> zeros(3)\n    array([ 0.,  0.,  0.])\n    >>>\n\n\n\nYet on page 88 of the manual, it says:\n\n\n\n    zeros (shape=, dtype=int, order=\xa1\xafC\xa1\xaf)\n    ...\n    ones (shape=, dtype=int, order=\xa1\xafC\xa1\xaf)\n\n\n\nwhich indicates that the default type is int.\n\n- David Socha & Daniel Terhorst, UrbanSim Project, http://www.urbansim.org\n'"
1093,7725240,numpy-gitbot,numpy-gitbot,2012-10-19 18:54:19,2012-10-19 18:54:20,2012-10-19 18:54:20,closed,,1.0.2 Release,1,11 - Bug;component: numpy.core;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1093,b'maximum_sctype returns incompatible types on different computers (Trac #495)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/495 on 2007-04-05 by @davidsocha, assigned to unknown._\n\nOn our Windows XP Pro computer we get:\n\n\n\n    C:\\Documents and Settings\\socha>python\n    Python 2.4.3 - Enthought Edition 1.0.0 (#69, Aug  2 2006, 12:09:59) [MSC v.1310 32 bit (Intel)] on win32\n    Type ""help"", ""copyright"", ""credits"" or ""license"" for more information.\n    >>> import numpy\n    >>> numpy.__version__\n    \'1.0.2\'\n    >>> from numpy import array\n    >>> from numpy import maximum_sctype\n    >>> g = array([1], dtype=\'float32\')\n    >>> maximum_sctype(g)\n    <type \'numpy.float96\'>\n    >>> from numpy import float128\n    Traceback (most recent call last):\n      File ""<stdin>"", line 1, in ?\n    ImportError: cannot import name float128\n    >>>\n\n\n\nNote that the maximum type for float32 is float96, and we cannot import float128.\n\nOn our Macintosh with an Intel 2GHz Core Duo, maximum_sctype returns float128 for float32, and float96 cannot be imported.  This makes it problematic to share results between the two computers, since files written as float96 will not be readable on the other computers.\n\nWe\'d expect both computers to return the same type from maximum_sctype.\n\n- David Socha & Daniel Terhorst, UrbanSim Project, http://www.urbansim.org'"
1092,7725238,numpy-gitbot,numpy-gitbot,2012-10-19 18:54:14,2012-10-19 18:54:17,2012-10-19 18:54:17,closed,,1.0.3 Release,9,11 - Bug;component: numpy.core;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1092,b'Arrays of type float96 or float128 do not display correctly (Trac #494)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/494 on 2007-04-05 by @davidsocha, assigned to unknown._\n\nHere is an example:\n\n\n\n    C:\\Documents and Settings\\socha>python\n    Python 2.4.3 - Enthought Edition 1.0.0 (#69, Aug  2 2006, 12:09:59) [MSC v.1310 32 bit (Intel)] on win32\n    Type ""help"", ""copyright"", ""credits"" or ""license"" for more information.\n    >>> import numpy\n    >>> numpy.__version__\n    \'1.0.2\'\n    >>> from numpy import array\n    >>> f = array([1,2,3], dtype=\'float96\')\n    >>> f\n    array([0.0, 0.0, -2.0], dtype=float96)             <== float96 prints incorrectly\n    >>> f.astype(\'float32\')\n    array([ 1.,  2.,  3.], dtype=float32)              <== Yet data seems intact\n    >>> f.sum()\n    -2.0                                               <== prints incorrectly\n    >>> f.sum().astype(\'float32\')\n    6.0                                                <== prints correctly if force to float32\n    >>>\n\n\n\nWe have the same symptoms with float128 (on a Mac with an Intel 2GHz Core Duo).\n\n- David Socha & Daniel Terhorst, UrbanSim Project, http://www.urbansim.org\n'"
1091,7725237,numpy-gitbot,numpy-gitbot,2012-10-19 18:54:11,2012-10-19 18:54:12,2012-10-19 18:54:12,closed,,1.0.2 Release,1,11 - Bug;component: numpy.core;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1091,b'maximum_sctype returns a smaller type than is actually used by the data (Trac #493)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/493 on 2007-04-05 by @davidsocha, assigned to unknown._\n\nHere\'s an example:\n\n\n\n    C:\\Documents and Settings\\socha>python\n    Python 2.4.3 - Enthought Edition 1.0.0 (#69, Aug  2 2006, 12:09:59) [MSC v.1310 32 bit (Intel)] on win32\n    Type ""help"", ""copyright"", ""credits"" or ""license"" for more information.\n    >>> import numpy\n    >>> numpy.__version__\n    \'1.0.2\'\n    >>> from numpy import array\n    >>> from numpy import maximum_sctype\n    >>> g = array([1], dtype=\'int64\')\n    >>> maximum_sctype(g)\n    <type \'numpy.int32\'>       <== Why is this not at least int64?\n    >>>\n\n\n\n- David Socha & Daniel Terhorst, UrbanSim Project, http://www.urbansim.org\n'"
1090,7725235,numpy-gitbot,numpy-gitbot,2012-10-19 18:54:09,2012-10-19 18:54:10,2012-10-19 18:54:10,closed,,1.0.2 Release,1,11 - Bug;component: numpy.core;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1090,b'integer overflow on plus and sum (at least) (Trac #492)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/492 on 2007-04-05 by @davidsocha, assigned to unknown._\n\nThere are several places (at least) where integer operations overflow, instead of upgrading the size of the result to accommodate larger values.  Here are some examples.\n\n\n\n    C:\\Documents and Settings\\socha>python\n    Python 2.4.3 - Enthought Edition 1.0.0 (#69, Aug  2 2006, 12:09:59) [MSC v.1310 32 bit (Intel)] on win32\n    Type ""help"", ""copyright"", ""credits"" or ""license"" for more information.\n    >>> import numpy\n    >>> numpy.__version__\n    \'1.0.2\'\n    >>> from numpy import array\n    >>> a = array([127,127], dtype=\'int8\')\n    >>> a+a\n    array([-2, -2], dtype=int8)                           <== overflow (bad!)\n    >>> a.sum()\n    254                                                   <== correct value\n    >>> a.sum().dtype\n    dtype(\'int32\')                                        <== correctly upgraded to larger type\n    \n    \n    \n    >>> b = array([1250000000,1250000000], dtype=\'int32\')\n    >>> b+b\n    array([-1794967296, -1794967296])                     <== overflow (bad!)\n    >>> b.sum()\n    -1794967296                                           <== overflow\n    >>> b.sum().dtype\n    dtype(\'int32\')                                        <== did not upgrade type to available int64 type \n    >>>\n    >>> from numpy import int64                           <== int64 exists\n    >>> c = array([1250000000,1250000000], dtype=\'int64\')\n    >>> c\n    array([1250000000, 1250000000], dtype=int64)\n    >>> c.sum()\n    2500000000                                            <== correct value\n    >>> c + c\n    array([2500000000, 2500000000], dtype=int64)          <== correct value\n    >>>\n    \n    \n    >>> f = array([8750000000000000000, 8750000000000000000], dtype=int64)\n    >>> f+f\n    array([-946744073709551616, -946744073709551616], dtype=int64)    <== overflow (bad too?)\n    >>> f.sum()\n    -946744073709551616                                               <== overflow (bad too?)\n    >>>\n\n\n\n\n- David Socha & Daniel Terhorst, UrbanSim Project, http://www.urbansim.org'"
1089,7725234,numpy-gitbot,numpy-gitbot,2012-10-19 18:54:06,2012-10-19 18:54:07,2012-10-19 18:54:07,closed,,1.0.3 Release,3,11 - Bug;component: numpy.distutils;priority: high,https://api.github.com/repos/numpy/numpy/issues/1089,b'Build cares about being in an SVN checkout (Trac #491)',"b""_Original ticket http://projects.scipy.org/numpy/ticket/491 on 2007-04-03 by @rkern, assigned to @rkern._\n\nCurrently, the build process for numpy requires one to be in an SVN checkout or have the appropriate files generated from an sdist done from an SVN checkout. This prevents people from working from an SVN export or with distributed version control tools like SVK or any of the DVCSs that can be supported by tailor. This patch removes the restriction.\n\nBuilds done from outside an SVN checkout and are not releases will still have a `'.dev'` appended to the version number. F2PY will have a version of `'2_?'` as seems to have been the default when `__svn_version__.py` could not be found.\n\nIf no one complains, I will check this in shortly. Pearu, I'm CCing you about the F2PY version number. If you have another preference, please suggest it."""
1088,7725231,numpy-gitbot,numpy-gitbot,2012-10-19 18:54:04,2012-10-19 18:54:04,2012-10-19 18:54:04,closed,,1.0.2 Release,1,11 - Bug;component: numpy.core;priority: highest,https://api.github.com/repos/numpy/numpy/issues/1088,b'problem with simple matrix addition (Trac #490)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/490 on 2007-04-03 by trac user gauthampdas, assigned to unknown._\n\nwhen we declare an row vector as a matrix, and doing addition i noticed a problem.\n\n\n\n    >>> a=mat([1,2,3])\n    >>> a+transpose(a)\n    matrix([[2, 3, 4],\n            [3, 4, 5],\n            [4, 5, 6]])\n    >>> a+a\n    matrix([[2, 4, 6]])\n\n\n\nIn my application i have to handle different matrices and vectors. Just noticed it. This is a simple mistake but can make big errors'"
1086,7725227,numpy-gitbot,numpy-gitbot,2012-10-19 18:54:00,2012-10-19 18:54:00,2012-10-19 18:54:00,closed,,,1,11 - Bug;component: numpy.random;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1086,b'seeded randint returns different values on 32 and 64bit architectures (Trac #488)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/488 on 2007-04-02 by trac user benstone, assigned to unknown._\n\nThis returns different values on 32 and 64bit Ubuntu (feisty) - using Numpy1.0.1\n\n\n    import numpy.random as r\n    r.seed(7777)\n    r.randint(10)\n\n'"
1085,7725223,numpy-gitbot,numpy-gitbot,2012-10-19 18:53:57,2012-10-19 18:53:58,2012-10-19 18:53:58,closed,,,3,11 - Bug;component: numpy.core;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1085,b'Segfault with recarrays and r3632 (Trac #487)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/487 on 2007-04-01 by @FrancescAlted, assigned to unknown._\n\nIt seems that a problem has slipped in lately because the next code:\n\n\n\n    import numpy\n    \n    dtype = [(\'var1\', \'S4\')]\n    for i in xrange(10):\n        recarr = numpy.empty(shape=1, dtype=dtype)\n    print ""-->"", recarr\n\n\n\nconsistently causes a segfault at least with r3632. This seems to work well using r3546.'"
1084,7725220,numpy-gitbot,numpy-gitbot,2012-10-19 18:53:54,2012-10-19 18:53:56,2012-10-19 18:53:56,closed,,1.0.2 Release,5,11 - Bug;component: numpy.core;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1084,b'FAIL: check_basic(numpy.core.tests.test_multiarray.test_clip) on Solaris 8 system (Trac #486)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/486 on 2007-04-01 by @chanley, assigned to unknown._\n\nNumpy 1.0.2 rev 3632 fails on a Solaris 8 system running Python 2.4.3.\n\n\n\n\n    ======================================================================\n    FAIL: check_basic (numpy.core.tests.test_multiarray.test_clip)\n    ----------------------------------------------------------------------\n    Traceback (most recent call last):\n      File ""/data/basil5/site-packages/lib/python/numpy/core/tests/test_multiarray.py"", line 388, in check_basic\n        self._clip_type(\'float\',1024,-12.8,100.2, inplace=inplace)\n      File ""/data/basil5/site-packages/lib/python/numpy/core/tests/test_multiarray.py"", line 382, in _clip_type\n        assert_equal(byteorder,x.dtype.byteorder)\n      File ""/data/basil5/site-packages/lib/python/numpy/testing/utils.py"", line 143, in assert_equal\n        assert desired == actual, msg\n    AssertionError: \n    Items are not equal:\n     ACTUAL: \'<\'\n     DESIRED: \'=\'\n    \n    ----------------------------------------------------------------------\n    Ran 562 tests in 19.376s\n    \n    FAILED (failures=1)\n    \n\n'"
1083,7725218,numpy-gitbot,numpy-gitbot,2012-10-19 18:53:52,2012-10-19 18:53:53,2012-10-19 18:53:53,closed,,,2,11 - Bug;component: numpy.core;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1083,"b""Problem with numpy.rec.fromarrays when using 'titles' argument (Trac #485)""","b'_Original ticket http://projects.scipy.org/numpy/ticket/485 on 2007-03-29 by trac user obi, assigned to unknown._\n\nThe error is documented by the following ipython log:\n\n\n\n\n          1 import numpy\n          2 a = numpy.array([1,2,3])\n          3 b = numpy.array([0.1,0.2,0.3])\n          4 print numpy.rec.fromarrays([a,b],names=\'A,B\')\n    ----> 5 print numpy.rec.fromarrays([a,b],names=\'A,B\',titles=\'Spalte 1,Spalte 2\')\n    \n    /usr/lib/python2.4/site-packages/numpy-1.0.1-py2.4-linux-i686.egg/numpy/core/records.py in fromarrays(arrayList, dtype, shape, formats, names, titles, aligned, byteorder)\n        317     # Determine shape from data-type.\n        318     if len(descr) != len(arrayList):\n    --> 319         raise ValueError, ""mismatch between the number of fields ""\\\n        320               ""and the number of arrays""\n        321\n    \n    ValueError: mismatch between the number of fields and the number of arrays\n    WARNING: Failure executing file: <test_fromarrays.py>\n    [(1, 0.10000000000000001) (2, 0.20000000000000001) (3, 0.29999999999999999)]\n\n\n\nNote, that the problem does not occur in version 0.9.6. '"
1082,7725215,numpy-gitbot,numpy-gitbot,2012-10-19 18:53:51,2012-10-19 18:53:51,2012-10-19 18:53:51,closed,,,1,11 - Bug;component: numpy.random;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1082,b'random state not portable between 32-bit and 64-bit architectures (Trac #484)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/484 on 2007-03-28 by trac user berkes, assigned to unknown._\n\nThe random state in the numpy.random module contains an\narray of int32 or int64 depending on the architecture, making\nit not portable. This makes simulations not reproducible on different machines.\n\nFor example, try the following on two machines with different\narchitecures:\n\n\n\n\n    Python 2.4.4 (#2, Jan 13 2007, 17:50:26)\n    [GCC 4.1.2 20061115 (prerelease) (Debian 4.1.1-21)] on linux2\n    Type ""help"", ""copyright"", ""credits"" or ""license"" for more information.\n    >>> import numpy\n    >>> import platform\n    >>> import pickle\n    >>>\n    >>> platform.architecture()\n    (\'32bit\', \'\')\n    >>>\n    >>> state = numpy.random.get_state()\n    >>> pickle.dump(state, file(\'/tmp/random_state.pic\',\'w\'))\n    >>> numpy.random.permutation(numpy.arange(10))\n    array([8, 6, 3, 1, 0, 5, 7, 4, 2, 9])\n    >>>\n    \n    Python 2.5 (r25:51908, Mar 19 2007, 13:41:07)\n    [GCC 4.1.0 (SUSE Linux)] on linux2\n    Type ""help"", ""copyright"", ""credits"" or ""license"" for more information.\n    >>> import numpy\n    >>> import platform\n    >>> import pickle\n    >>>\n    >>> platform.architecture()\n    (\'64bit\', \'ELF\')\n    >>>\n    >>> state = pickle.load(file(\'/tmp/random_state.pic\',\'r\'))\n    >>> numpy.random.set_state(state)\n    >>> numpy.random.permutation(numpy.arange(10))\n    array([3, 9, 4, 8, 1, 6, 2, 0, 5, 7])\n    >>>\n    \n    \n\n\n'"
1081,7725214,numpy-gitbot,numpy-gitbot,2012-10-19 18:53:48,2012-10-19 18:53:49,2012-10-19 18:53:49,closed,,,3,11 - Bug;component: Other;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1081,b'Junk in the representation of string fields of recarrays (Trac #483)',"b""_Original ticket http://projects.scipy.org/numpy/ticket/483 on 2007-03-28 by @FrancescAlted, assigned to unknown._\n\nThe next exposes the problem:\n\n\n\n    In [27]:r=numpy.array([['abc']], dtype=[('var1', '|S20')])\n    In [28]:r['var1']\n    Out[28]:\n    array([['abc\\xb7\\x08\\xc1+\\x08\\xc0>\\xde\\xb7@\\xec\\x95\\xb7`\\xec\\x95\\xb7']],\n          dtype='|S20')\n    In [30]:r['var1'][0]\n    Out[30]:\n    array(['abc\\xb7\\x08\\xc1+\\x08\\xc0>\\xde\\xb7@\\xec\\x95\\xb7`\\xec\\x95\\xb7'],\n          dtype='|S20')\n    In [31]:r['var1'][0][0]\n    Out[31]:'abc\\xb7\\x08\\xc1+\\x08\\xc0>\\xde\\xb7@\\xec\\x95\\xb7`\\xec\\x95\\xb7'\n    In [32]:str(r['var1'][0][0])\n    Out[32]:'abc\\xb7\\x08\\xc1+\\x08\\xc0>\\xde\\xb7@\\xec\\x95\\xb7`\\xec\\x95\\xb7'\n\n\n\nThis seems to be a problem related only with string fields on recarrays, because I'm not able to reproduce it on plain string arrays:\n\n\n\n    In [34]:s2=numpy.array([['abc']], dtype='S20')\n    In [35]:s2\n    Out[35]:\n    array([['abc']],\n          dtype='|S20')\n    In [36]:s2[0][0]\n    Out[36]:'abc'\n    In [37]:str(s2[0][0])\n    Out[37]:'abc'\n\n\n\nUsing 1.0.2.dev3546 here.\n\nThanks!"""
1080,7725212,numpy-gitbot,numpy-gitbot,2012-10-19 18:53:45,2012-10-19 18:53:47,2012-10-19 18:53:47,closed,,,4,11 - Bug;component: numpy.core;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1080,b'crash on fancy indexing (Trac #482)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/482 on 2007-03-26 by @pv, assigned to unknown._\n\nThe following code crashes, but not always: (on numpy 1.0.1)\n\n\n    import numpy as N\n    \n    A = N.zeros((800, 7, 8))\n    B = N.zeros((6,6)) + 1\n    \n    print N.__version__, N.__file__\n    \n    for i in xrange(800):\n        A[N.ix_([i], [0,1,2,3,5,6], [0,1,2,3,4,5])] = B # crash here\n    \n    print ""no crash""\n\n\n\nIt\'s probably a ""non-local"" error, since puzzling things happen\n\n\n    $ echo x${PYTHONPATH}x\n    xx\n    $ python2.4 xxx.py\n    1.0.1 /usr/lib/python2.4/site-packages/numpy/__init__.pyc\n    no crash\n    $ PYTHONPATH=this-path-doesnt-exist python2.4 xxx.py\n    1.0.1 /usr/lib/python2.4/site-packages/numpy/__init__.pyc\n    Segmentation fault (core dumped)\n    $ PYTHONPATH= python2.4 xxx.py\n    1.0.1 /usr/lib/python2.4/site-packages/numpy/__init__.pyc\n    Segmentation fault (core dumped)\n\n\nThere are no lurking numpy installations or source dirs, only the one in /usr. I have been able to reproduce this on different machines (different gcc, processors, and build options). Also, although this crashes on python2.4, there is no crash on python2.5.\n\nStack trace & some debug info attached.\n'"
1079,7725210,numpy-gitbot,numpy-gitbot,2012-10-19 18:53:43,2012-10-19 18:53:44,2012-10-19 18:53:44,closed,,,1,11 - Bug;component: Other;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1079,"b'Inconsistency between ""plot""-like commands and the ""getp"" command (Trac #481)'","b'_Original ticket http://projects.scipy.org/numpy/ticket/481 on 2007-03-26 by trac user jbmichel, assigned to unknown._\n\nThe following piece of code does not work:\np = plot(whatever)\ngetp(p, anyProperty)\n\nThe reason for this is that the getp function is tailored to take as an input an instance of, say, Line2D, but the command ""plot"" produces a list of such objects. \n\n2 solutions:\n1. Take this into account, and run the command \np = plot(whatever)\ngetp(p[0], anyProperty)\n\n2. Modify the getp code at line 416 and use\nfunc = getattr(o[0], \'get_\' + name)\ninstead of \nfunc = getattr(o, \'get_\' + name)\n\nJB\n'"
1078,7725208,numpy-gitbot,numpy-gitbot,2012-10-19 18:53:41,2012-10-19 18:53:42,2012-10-19 18:53:42,closed,,1.0.2 Release,1,11 - Bug;component: numpy.core;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1078,b'Recent changes in defmatrix.py (Trac #480)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/480 on 2007-03-26 by @nilswagner01, assigned to unknown._\n\nscipy.test(1) \n\n\n\n    ======================================================================\n    ERROR: check_matmat (scipy.sparse.tests.test_sparse.test_csc)\n    ----------------------------------------------------------------------\n    Traceback (most recent call last):\n      File ""/usr/local/lib64/python2.5/site-packages/scipy/sparse/tests/test_sparse.py"", line 142, in check_matmat\n        assert_array_almost_equal((a*bsp).todense(), a*b)\n      File ""/usr/local/lib64/python2.5/site-packages/numpy/core/defmatrix.py"", line 162, in __mul__\n        return N.dot(self, other)\n    ValueError: objects are not aligned\n    \n    ======================================================================\n    ERROR: check_rmatvec (scipy.sparse.tests.test_sparse.test_csc)\n    ----------------------------------------------------------------------\n    Traceback (most recent call last):\n      File ""/usr/local/lib64/python2.5/site-packages/scipy/sparse/tests/test_sparse.py"", line 107, in check_rmatvec\n        assert_array_almost_equal(row*M, row*M.todense())\n      File ""/usr/local/lib64/python2.5/site-packages/numpy/core/defmatrix.py"", line 162, in __mul__\n        return N.dot(self, other)\n    ValueError: objects are not aligned\n    \n    ======================================================================\n    ERROR: check_matmat (scipy.sparse.tests.test_sparse.test_csr)\n    ----------------------------------------------------------------------\n    Traceback (most recent call last):\n      File ""/usr/local/lib64/python2.5/site-packages/scipy/sparse/tests/test_sparse.py"", line 142, in check_matmat\n        assert_array_almost_equal((a*bsp).todense(), a*b)\n      File ""/usr/local/lib64/python2.5/site-packages/numpy/core/defmatrix.py"", line 162, in __mul__\n        return N.dot(self, other)\n    ValueError: objects are not aligned\n    \n    ======================================================================\n    ERROR: check_rmatvec (scipy.sparse.tests.test_sparse.test_csr)\n    ----------------------------------------------------------------------\n    Traceback (most recent call last):\n      File ""/usr/local/lib64/python2.5/site-packages/scipy/sparse/tests/test_sparse.py"", line 107, in check_rmatvec\n        assert_array_almost_equal(row*M, row*M.todense())\n      File ""/usr/local/lib64/python2.5/site-packages/numpy/core/defmatrix.py"", line 162, in __mul__\n        return N.dot(self, other)\n    ValueError: objects are not aligned\n    \n    ======================================================================\n    ERROR: check_matmat (scipy.sparse.tests.test_sparse.test_dok)\n    ----------------------------------------------------------------------\n    Traceback (most recent call last):\n      File ""/usr/local/lib64/python2.5/site-packages/scipy/sparse/tests/test_sparse.py"", line 142, in check_matmat\n        assert_array_almost_equal((a*bsp).todense(), a*b)\n      File ""/usr/local/lib64/python2.5/site-packages/numpy/core/defmatrix.py"", line 162, in __mul__\n        return N.dot(self, other)\n    ValueError: objects are not aligned\n    \n    ======================================================================\n    ERROR: Does the matrix\'s mean(,axis=0) method work?\n    ----------------------------------------------------------------------\n    Traceback (most recent call last):\n      File ""/usr/local/lib64/python2.5/site-packages/scipy/sparse/tests/test_sparse.py"", line 54, in check_mean\n        assert_array_equal(self.dat.mean(axis=0), self.datsp.mean(axis=0))\n      File ""/usr/local/lib64/python2.5/site-packages/scipy/sparse/sparse.py"", line 423, in mean\n        mean = self.sum(0)\n      File ""/usr/local/lib64/python2.5/site-packages/scipy/sparse/sparse.py"", line 402, in sum\n        return o * self\n      File ""/usr/local/lib64/python2.5/site-packages/numpy/core/defmatrix.py"", line 162, in __mul__\n        return N.dot(self, other)\n    ValueError: objects are not aligned\n    \n    ======================================================================\n    ERROR: check_rmatvec (scipy.sparse.tests.test_sparse.test_dok)\n    ----------------------------------------------------------------------\n    Traceback (most recent call last):\n      File ""/usr/local/lib64/python2.5/site-packages/scipy/sparse/tests/test_sparse.py"", line 107, in check_rmatvec\n        assert_array_almost_equal(row*M, row*M.todense())\n      File ""/usr/local/lib64/python2.5/site-packages/numpy/core/defmatrix.py"", line 162, in __mul__\n        return N.dot(self, other)\n    ValueError: objects are not aligned\n    \n    ======================================================================\n    ERROR: Does the matrix\'s sum(,axis=0) method work?\n    ----------------------------------------------------------------------\n    Traceback (most recent call last):\n      File ""/usr/local/lib64/python2.5/site-packages/scipy/sparse/tests/test_sparse.py"", line 46, in check_sum\n        assert_array_equal(self.dat.sum(axis=0), self.datsp.sum(axis=0))\n      File ""/usr/local/lib64/python2.5/site-packages/scipy/sparse/sparse.py"", line 402, in sum\n        return o * self\n      File ""/usr/local/lib64/python2.5/site-packages/numpy/core/defmatrix.py"", line 162, in __mul__\n        return N.dot(self, other)\n    ValueError: objects are not aligned\n    \n    ======================================================================\n    ERROR: check_matmat (scipy.sparse.tests.test_sparse.test_lil)\n    ----------------------------------------------------------------------\n    Traceback (most recent call last):\n      File ""/usr/local/lib64/python2.5/site-packages/scipy/sparse/tests/test_sparse.py"", line 142, in check_matmat\n        assert_array_almost_equal((a*bsp).todense(), a*b)\n      File ""/usr/local/lib64/python2.5/site-packages/numpy/core/defmatrix.py"", line 162, in __mul__\n        return N.dot(self, other)\n    ValueError: objects are not aligned\n    \n    ======================================================================\n    ERROR: Does the matrix\'s mean(,axis=0) method work?\n    ----------------------------------------------------------------------\n    Traceback (most recent call last):\n      File ""/usr/local/lib64/python2.5/site-packages/scipy/sparse/tests/test_sparse.py"", line 54, in check_mean\n        assert_array_equal(self.dat.mean(axis=0), self.datsp.mean(axis=0))\n      File ""/usr/local/lib64/python2.5/site-packages/scipy/sparse/sparse.py"", line 423, in mean\n        mean = self.sum(0)\n      File ""/usr/local/lib64/python2.5/site-packages/scipy/sparse/sparse.py"", line 402, in sum\n        return o * self\n      File ""/usr/local/lib64/python2.5/site-packages/numpy/core/defmatrix.py"", line 162, in __mul__\n        return N.dot(self, other)\n    ValueError: objects are not aligned\n    \n    ======================================================================\n    ERROR: check_rmatvec (scipy.sparse.tests.test_sparse.test_lil)\n    ----------------------------------------------------------------------\n    Traceback (most recent call last):\n      File ""/usr/local/lib64/python2.5/site-packages/scipy/sparse/tests/test_sparse.py"", line 107, in check_rmatvec\n        assert_array_almost_equal(row*M, row*M.todense())\n      File ""/usr/local/lib64/python2.5/site-packages/numpy/core/defmatrix.py"", line 162, in __mul__\n        return N.dot(self, other)\n    ValueError: objects are not aligned\n    \n    ======================================================================\n    ERROR: Does the matrix\'s sum(,axis=0) method work?\n    ----------------------------------------------------------------------\n    Traceback (most recent call last):\n      File ""/usr/local/lib64/python2.5/site-packages/scipy/sparse/tests/test_sparse.py"", line 46, in check_sum\n        assert_array_equal(self.dat.sum(axis=0), self.datsp.sum(axis=0))\n      File ""/usr/local/lib64/python2.5/site-packages/scipy/sparse/sparse.py"", line 402, in sum\n        return o * self\n      File ""/usr/local/lib64/python2.5/site-packages/numpy/core/defmatrix.py"", line 162, in __mul__\n        return N.dot(self, other)\n    ValueError: objects are not aligned\n\n\n'"
1077,7725206,numpy-gitbot,numpy-gitbot,2012-10-19 18:53:39,2012-10-23 02:36:53,2012-10-19 18:53:40,closed,,1.0.3 Release,3,11 - Bug;component: Other;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1077,b'MemoryError creating recarrays from medium sized python objects (Trac #479)',"b""_Original ticket http://projects.scipy.org/numpy/ticket/479 on 2007-03-26 by @FrancescAlted, assigned to unknown._\n\nThe next exposes the (weird) behaviour:\n\n\n\n    In [207]:N=8670\n    In [208]:numpy.rec.array([[range(N)]], dtype=[('var1', 'f8', (N,))])\n    Out[208]:\n    recarray([ (array([  0.00000000e+00,   1.00000000e+00,   2.00000000e+00, ...,\n             8.66700000e+03,   8.66800000e+03,   8.66900000e+03]),)],\n          dtype=[('var1', '<f8', (8670,))])\n    In [209]:N=8680\n    In [210]:numpy.rec.array([[range(N)]], dtype=[('var1', 'f8', (N,))])\n    ---------------------------------------------------------------------------\n    exceptions.MemoryError                               Traceback (most recent call last)\n    \n    /home/faltet/<ipython console>\n    \n    /usr/lib/python2.4/site-packages/numpy/core/records.py in array(obj, dtype, shape, offset, strides, formats, names, titles, aligned, byteorder, copy)\n        531     elif isinstance(obj, (list, tuple)):\n        532         if isinstance(obj[0], (tuple, list)):\n    --> 533             return fromrecords(obj, dtype=dtype, shape=shape, **kwds)\n        534         else:\n        535             return fromarrays(obj, dtype=dtype, shape=shape, **kwds)\n    \n    /usr/lib/python2.4/site-packages/numpy/core/records.py in fromrecords(recList, dtype, shape, formats, names, titles, aligned, byteorder)\n        384\n        385     try:\n    --> 386         retval = sb.array(recList, dtype = descr)\n        387     except TypeError:  # list of lists instead of list of tuples\n        388         if (shape is None or shape == 0):\n    \n    MemoryError:\n\n\n\nThe memory of my machine is 512 MB, and the recarray + python object should fit in far less than 1 MB.\n\nCuriously enough, you can achieve the desired recarray by using a regular numpy array\n\n\n\n    In [211]:numpy.rec.array(numpy.arange(N*1.), dtype=[('var1', 'f8', (N,))])\n    Out[211]:\n    recarray([ (array([  0.00000000e+00,   1.00000000e+00,   2.00000000e+00, ...,\n             8.67700000e+03,   8.67800000e+03,   8.67900000e+03]),)],\n          dtype=[('var1', '<f8', (8680,))])\n\n\n\nBut note the strange nesting of the resulting recarray (see ticket #1076)."""
1075,7725202,numpy-gitbot,numpy-gitbot,2012-10-19 18:53:34,2012-10-19 18:53:34,2012-10-19 18:53:34,closed,,,0,11 - Bug;component: Other;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1075,b'isscalar give strange results (Trac #477)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/477 on 2007-03-25 by @charris, assigned to unknown._\n\nThis seems to be expected behaviour.'"
1074,7725201,numpy-gitbot,numpy-gitbot,2012-10-19 18:53:32,2012-10-19 18:53:32,2012-10-19 18:53:32,closed,,,2,11 - Bug;component: Other;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1074,"b""Strings with leading nulls don't compare properly (Trac #476)""","b'_Original ticket http://projects.scipy.org/numpy/ticket/476 on 2007-03-24 by trac user kreymborg, assigned to unknown._\n\nComparison of equal-length numpy strings appears to cease at the first null character.    I used MSVC 7.1 compiler on 1.0.2.dev3593.  Example:\n\ns1 = ""\\000\\001""[[BR]]\ns2 = ""\\000\\002""[[BR]]\nprint s1 == s2  # this evaluates as True[[BR]]\nprint array(s1) == array(s2) # this evaluates as False[[BR]]\n\n'"
1073,7725200,numpy-gitbot,numpy-gitbot,2012-10-19 18:53:30,2012-10-19 18:53:30,2012-10-19 18:53:30,closed,,1.0.2 Release,0,11 - Bug;component: Other;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1073,b'Right/Left multiplication of matrix by sequence is inconsistent. (Trac #475)',"b""_Original ticket http://projects.scipy.org/numpy/ticket/475 on 2007-03-24 by @charris, assigned to unknown._\n\n\n\n\n    In [12]: i = matrix(eye(2))\n    \n    In [13]: [1,2]*i\n    Out[13]: matrix([[ 1.,  2.]])\n\n\n\nworks\n\n\n\n\n    In [14]: i*[[1],[2]]\n    ---------------------------------------------------------------------------\n    exceptions.TypeError                                 Traceback (most recent call last)\n    \n    /home/charris/<ipython console> \n    \n    TypeError: can't multiply sequence by non-int\n    \n\n\n\ndoesn't."""
1072,7725196,numpy-gitbot,numpy-gitbot,2012-10-19 18:53:28,2012-10-19 18:53:29,2012-10-19 18:53:29,closed,,,2,11 - Bug;component: numpy.core;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1072,b'Record type inconsistency between rank 0 recarrays and rank > 0 recarrays (Trac #474)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/474 on 2007-03-23 by trac user SuperElectric, assigned to unknown._\n\n= Short description =\n\nThe records of rank-N record arrays are usually returned as rank-N ndarrays. However, if N is 0, the records are returned as scalars. This makes it problematic to write general vectorized code that operates on arbitrary-rank record arrays, as expressions like ""recarr.x[...] = 2"" fail if rank = 0.\n\n= Example =\n\n\n    >>> import numpy as N\n    >>> dt = N.dtype([(\'x\',\'f8\'),(\'y\',\'f8\')])\n    >>> rarr = N.zeros((), dtype = dt).view(N.recarray)\n    >>> rarr\n    recarray((0.0, 0.0),\n         dtype=[(\'x\', \'<f8\'), (\'y\', \'<f8\')])\n    >>> # oddly, rarr.x is not an array\n    >>> rarr.x\n    0.0\n    >>> # This makes it impossible to fill values in the usual manner\n    >>> rarr.x[...] = 2.0\n    TypeError: object does not support item assignment\n    >>> # A workaround is to reshape to non-zero rank\n    >>> rarr.shape = [1]\n    >>> # Now rarr.x returns a ndarray of the same rank as rarr\n    >>> rarr.x\n    array([ 0.])\n    >>> # Value-setting now works as expected. >>> rarr.x[...] = 2.0\n    >>> rarr   recarray([(2.0, 0.0)],\n         dtype=[(\'x\', \'<f8\'), (\'y\', \'<f8\')]) \n\n\n\n= Workaround =\nThe fallout of this bug can be illustrated by its workaround. You need to insert special checks for ndim==0, and temporarily reshape the record array to rank > 0 before performing array operations on its records.\n\nIn other words, you need to replace this:\n\n\n    rarr.x[...] = blah\n    return rarr\n\n\n\nWith this:\n\n\n    if rarr.ndim == 0:\n       rarr = output.reshape([1])\n       rarrWas0dim = True\n    else:\n       rarrWas0dim = False\n    \n    rarr.x[...] = blah\n    \n    if rarrWas0dim:\n       rarr = rarr.reshape([])\n    \n    return rarr \n\n\n\nThis code bloat quickly gets nasty when dealing with arithmetic between many record arrays, all of which may be of rank 0.'"
1071,7725193,numpy-gitbot,numpy-gitbot,2012-10-19 18:53:26,2014-02-10 18:41:43,2012-10-19 18:53:27,closed,,,1,11 - Bug;component: numpy.core;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1071,b'Matrix multiplication returns wrong result (Trac #473)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/473 on 2007-03-22 by @charris, assigned to unknown._\n\nA row vector is returned when the result should be a column vector.\n\n\n\n\n    In [2]:I = matrix(eye(2))\n    \n    In [3]:x = array([1,2])\n    \n    In [4]:I*x\n    Out[4]:matrix([[ 1.,  2.]])\n    \n\n\n'"
1070,7725190,numpy-gitbot,numpy-gitbot,2012-10-19 18:53:24,2012-10-19 18:53:25,2012-10-19 18:53:25,closed,,,4,11 - Bug;component: Other;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1070,"b""pyrex example doesn't compile. (Trac #472)""","b""_Original ticket http://projects.scipy.org/numpy/ticket/472 on 2007-03-20 by trac user royd, assigned to unknown._\n\nAfter make clean the pyrex example doesn't compile any more:\n\n$ make\npython setup.py build_ext --inplace\n/usr/lib/python2.4/site-packages/numpy/lib/utils.py:83: DeprecationWarning: get_numpy_include is deprecated, use get_include\n  DeprecationWarning)\nrunning build_ext\nbuilding 'numpyx' extension\n/home/royd/python/pyrex/c_numpy.pxd:99:22: Array element cannot be a Python object\nmake: *** [all] Error 1\n\n$ rpm -q numpy\nnumpy-1.0.1-3.fc6\n$ pyrexc -v\nPyrex version 0.9.4\n\nBoth numpy and pyrex are installed using std. rpms provided for Fedora 6.\n\nRegards,\nr."""
1069,7725189,numpy-gitbot,numpy-gitbot,2012-10-19 18:53:21,2012-10-19 18:53:22,2012-10-19 18:53:22,closed,,,1,11 - Bug;component: numpy.random;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1069,b'Recent changes in mtrand.pyx (Trac #471)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/471 on 2007-03-20 by @nilswagner01, assigned to unknown._\n\nscipy.test(1) results in several errors, e.g.\n\n\n\n      File ""mtrand.pyx"", line 1234, in mtrand.RandomState.binomial\n    NameError: PyInt_AsLong\n\n\n\n\n\n      File ""mtrand.pyx"", line 946, in mtrand.RandomState.standard_t\n      File ""mtrand.pyx"", line 149, in mtrand.cont1_array_sc\n    AttributeError: \'module\' object has no attribute \'Float64\'\n\n\n\n\n\n      File ""mtrand.pyx"", line 1206, in mtrand.RandomState.triangular\n      File ""mtrand.pyx"", line 248, in mtrand.cont3_array_sc\n    AttributeError: \'module\' \n\n\n\n\n\n\n      File ""mtrand.pyx"", line 1323, in mtrand.RandomState.zipf\n      File ""mtrand.pyx"", line 420, in mtrand.discd_array_sc\n    AttributeError: \'module\' object has no attribute \'Int\'\n\n\n\n'"
1068,7725188,numpy-gitbot,numpy-gitbot,2012-10-19 18:53:18,2012-10-19 18:53:20,2012-10-19 18:53:20,closed,,,6,11 - Bug;component: numpy.distutils;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1068,b'numpy uses mixture of tabs and spaces in source code (Trac #470)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/470 on 2007-03-19 by trac user bhoel, assigned to unknown._\n\nBuilding a module of mine usin numpy.distutils I get an error message related to the inconsistent use of tabs and spaces in indentation when invoking python with the ""-tt"" command line switch.\n\n\n\n    Traceback (most recent call last):\n      File ""setup.py"", line 24, in ?\n        from numpy.distutils.core import setup\n      File ""C:\\Python24\\lib\\site-packages\\numpy\\distutils\\__init__.py"", line 5, in ?\n        import ccompiler\n      File ""C:\\Python24\\lib\\site-packages\\numpy\\distutils\\ccompiler.py"", line 11, in ?\n        import log\n      File ""C:\\Python24\\lib\\site-packages\\numpy\\distutils\\log.py"", line 7, in ?\n        from misc_util import red_text, yellow_text, cyan_text, is_sequence, is_string\n      File ""C:\\Python24\\lib\\site-packages\\numpy\\distutils\\misc_util.py"", line 975\n        import numpy.numarray.util as nnu\n                                        ^\n    TabError: inconsistent use of tabs and spaces in indentation\n    \n\n\n\nComponent is set to `numpy.core`, but problem might apply to other components as well.\n'"
1067,7725187,numpy-gitbot,numpy-gitbot,2012-10-19 18:53:16,2012-10-19 18:53:17,2012-10-19 18:53:17,closed,,1.0.3 Release,4,11 - Bug;component: numpy.core;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1067,b'Memory error: string concatenation (Trac #469)',"b""_Original ticket http://projects.scipy.org/numpy/ticket/469 on 2007-03-17 by @stefanv, assigned to @teoliphant._\n\nWith r3580, the following code produces a memory error:\n\n\n\n    import numpy as N\n    x = N.array([])\n    N.append(x,'asdasd\\tasdasd')\n\n\n\nValgrind says:\n\n\n\n    ==9184== Invalid write of size 1\n    ==9184==    at 0x4022CE2: memcpy (mc_replace_strmem.c:405)\n    ==9184==    by 0x463D5E4: PyArray_Concatenate (multiarraymodule.c:1596)\n    ==9184==    by 0x463D71E: array_concatenate (multiarraymodule.c:6277)\n    ==9184==    by 0x805A0B6: PyObject_Call (in /usr/bin/python2.5)\n    ==9184==    by 0x80BE4E9: PyEval_EvalFrameEx (in /usr/bin/python2.5)\n    ==9184==    by 0x80C37F4: PyEval_EvalCodeEx (in /usr/bin/python2.5)\n    ==9184==    by 0x80C183D: PyEval_EvalFrameEx (in /usr/bin/python2.5)\n    ==9184==    by 0x80C37F4: PyEval_EvalCodeEx (in /usr/bin/python2.5)\n    ==9184==    by 0x80C3866: PyEval_EvalCode (in /usr/bin/python2.5)\n    ==9184==    by 0x80E2EEB: PyRun_FileExFlags (in /usr/bin/python2.5)\n    ==9184==  Address 0x43FCFE1 is 1 bytes after a block of size 8 alloc'd\n    ==9184==    at 0x4021396: malloc (vg_replace_malloc.c:149)\n    ==9184==    by 0x4629CD4: PyArray_NewFromDescr (arrayobject.c:5386)\n    ==9184==    by 0x463D56B: PyArray_Concatenate (multiarraymodule.c:1584)\n    ==9184==    by 0x463D71E: array_concatenate (multiarraymodule.c:6277)\n    ==9184==    by 0x805A0B6: PyObject_Call (in /usr/bin/python2.5)\n    ==9184==    by 0x80BE4E9: PyEval_EvalFrameEx (in /usr/bin/python2.5)\n    ==9184==    by 0x80C37F4: PyEval_EvalCodeEx (in /usr/bin/python2.5)\n    ==9184==    by 0x80C183D: PyEval_EvalFrameEx (in /usr/bin/python2.5)\n    ==9184==    by 0x80C37F4: PyEval_EvalCodeEx (in /usr/bin/python2.5)\n    ==9184==    by 0x80C3866: PyEval_EvalCode (in /usr/bin/python2.5)\n\n\n"""
1065,7725183,numpy-gitbot,numpy-gitbot,2012-10-19 18:53:12,2012-10-19 18:53:12,2012-10-19 18:53:12,closed,,,1,11 - Bug;component: numpy.lib;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1065,b'inconsistent mgrid results (Trac #467)',"b""_Original ticket http://projects.scipy.org/numpy/ticket/467 on 2007-03-14 by trac user acorrigan, assigned to unknown._\n\n\n >>> print mgrid[2.45:2.6:0.05, 0:5:1]\n[[[ 2.45  2.45  2.45  2.45  2.45]\n [ 2.5   2.5   2.5   2.5   2.5 ]]\n\n[[ 0.    1.    2.    3.    4.  ]\n [ 0.    1.    2.    3.    4.  ]]]\n\n >>> print mgrid[2.45:2.6:0.05]\n[ 2.45  2.5   2.55]\n\n\nI'm using 2.45:2.6:0.05 to specify the grid in the first dimension, but get different results in each case.\n"""
1064,7725180,numpy-gitbot,numpy-gitbot,2012-10-19 18:53:05,2012-10-19 18:53:10,2012-10-19 18:53:10,closed,,NumPy 1.7,16,11 - Bug;component: numpy.core;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1064,b'Segmentation fault when reversing an array enough times (Trac #466)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/466 on 2007-03-08 by @FrancescAlted, assigned to @dmcooke._\n\nHi,\n\nI\'m getting a consistent seg fault by running this code:\n\n\n\n    import numpy\n    \n    print ""numpy version-->"", numpy.__version__\n    N = 1000*1000\n    a = numpy.array([1,2])\n    for i in xrange(N):\n        a = a[::-1]\n\n\n\nand the output for my machine:\n\n\n\n    numpy version--> 1.0.2.dev3546\n    Violaci\xa8\xae de segment\n\n\n\nI need 1 million of iterations for getting the segfault, but your mileage may vary.'"
1063,7725178,numpy-gitbot,numpy-gitbot,2012-10-19 18:53:03,2014-05-13 01:53:02,2012-10-19 18:53:04,closed,,1.0.2 Release,2,11 - Bug;component: numpy.core;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1063,"b""ndarray's mean method should be computed using double precision (Trac #465)""","b'_Original ticket http://projects.scipy.org/numpy/ticket/465 on 2007-03-07 by @chanley, assigned to unknown._\n\nThe default data type for the accumulator variable in the mean method should be double precision.  The problem can best be illustrated with the following example:\n\n\n\n    Python 2.4.3 (#2, Dec  7 2006, 11:01:45) \n    [GCC 4.0.1 (Apple Computer, Inc. build 5367)] on darwin\n    Type ""help"", ""copyright"", ""credits"" or ""license"" for more information.\n    >>> import numpy as n\n    >>> n.__version__\n    \'1.0.2.dev3571\'\n    >>> a = n.ones((1000,1000),dtype=n.float32)*132.00005\n    >>> print a\n    [[ 132.00004578  132.00004578  132.00004578 ...,  132.00004578\n       132.00004578  132.00004578]\n     [ 132.00004578  132.00004578  132.00004578 ...,  132.00004578\n       132.00004578  132.00004578]\n     [ 132.00004578  132.00004578  132.00004578 ...,  132.00004578\n       132.00004578  132.00004578]\n     ..., \n     [ 132.00004578  132.00004578  132.00004578 ...,  132.00004578\n       132.00004578  132.00004578]\n     [ 132.00004578  132.00004578  132.00004578 ...,  132.00004578\n       132.00004578  132.00004578]\n     [ 132.00004578  132.00004578  132.00004578 ...,  132.00004578\n       132.00004578  132.00004578]]\n    >>> a.min()\n    132.000045776\n    >>> a.max()\n    132.000045776\n    >>> a.mean()\n    133.96639999999999\n\n\n\nHaving the mean be greater than the maximum is a tad odd.\n\nThe calculation of the mean is occurring with a single precision accumulator variable.  A user can force a double precision calculation with the following command and receive a correct result:\n\n\n\n    >>> a.mean(dtype=n.float64)\n    132.00004577636719\n    >>> \n\n\n\nHowever, this is not going to be obvious to the casual user and will appear to be an error.\n\nI realize that one reason for not doing all calculations as double precision is performance.  However, it is probably better to always receive the correct answer than to quickly arrive at the wrong one.\n\nThe current default behavior needs to be changed.  All calculations should be done in double precision.  If performance is needed the ""expert user"" can go back and start setting data types after having shown that their application arrives at a correct result.\n\nNot having to worry about overflow problems in the accumulator variable would also make numpy consistent with numarray\'s behavior.\n\n'"
1062,7725176,numpy-gitbot,numpy-gitbot,2012-10-19 18:53:00,2012-10-19 18:53:01,2012-10-19 18:53:01,closed,,1.0.3 Release,3,11 - Bug;component: numpy.numarray;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1062,"b'division inconsistent with Python;  a/b inconsistent with a%b, scary scalar behaviour (Trac #464)'","b""_Original ticket http://projects.scipy.org/numpy/ticket/464 on 2007-03-06 by trac user gregsmithto, assigned to unknown._\n\nWith integer `n/d` and `n%d` , if  `n <0`  and `d>0` , python always rounds `n/d`  to -inf and gives `0 <= n%d < d` ; whereas numpy gives you whatever the C division does, which is usually rounding towards zero for `n/d` . I brought this up for Numeric a few years ago, and was informed that this had been discussed on the group and it was done this way for performance reasons. I would have voted strongly the other way, but that is what it is, and it wasn't such a big deal for Numeric. However, with numpy, this behaviour is inherited by integers extracted from arrays, which otherwise behave like Python ints. These objects could travel an arbitrary distance into other parts of a Python application which are completely unaware of numpy, so there is the potential for very strange failures. Also,  it seems that numpy (unlike Numeric) now gives the python result for `%`, but still gives the C result for `/` (and `//`). \n\nSo we have:\n   * `(n/d)*d+(n%d) != n`   because `/` and `%` are inconsistent\n   * `//` operator (which is called 'floor_division' internally), does not do floor division\n   * very surprising behavior with scalars, as shown below.\n\n\n\n\n    >>> from numpy import array\n    >>> a,b= -7,10\n    >>> a,b\n    (-7, 10)\n    >>> a/b,  a%b\n    (-1, 3)\n    >>> divmod(a,b)\n    (-1, 3)\n    >>> pair=array((a,b))\n    >>> pair\n    array([-7, 10])\n    >>> a,b=pair\n    >>> a,b\n    (-7, 10)\n    >>> a/b,  a%b\n    (0, 3)\n    >>> divmod(a,b)\n    (0, 3)\n\n\n\nAt least it is now possible to get a future-proof,portable floor division without needing conditionals: ` (n-(n%d))//d `, since the `%` works.\n\nI recognize the problems associated with changing this behaviour. But it's already been changed (I don't know when) for `%`; and having it propogated into the scalars creates a serious new problem which wasn't there in Numeric. Also -- at least in principle -- the current behaviour is platform dependent, so apps using numpy may encounter the same issue simply by moving to a different C compiler platform.\n\n"""
1061,7725172,numpy-gitbot,numpy-gitbot,2012-10-19 18:52:58,2012-10-19 18:52:59,2012-10-19 18:52:59,closed,,,4,11 - Bug;component: numpy.numarray;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1061,"b'hex(), oct() fails on int64 array (Trac #463)'","b""_Original ticket http://projects.scipy.org/numpy/ticket/463 on 2007-03-06 by trac user gregsmithto, assigned to unknown._\n\nThis probably only fails on 32-bit platforms:\n\n\n\n    >>> a = array([0,257<<31])\n    >>> a\n    array([           0, 551903297536], dtype=int64)\n    >>> a[1]\n    551903297536\n    >>> hex(a[1])\n    '-0x80000000'\n    >>> hex(a.tolist()[1])\n    '0x8080000000L'\n\n\nIt looks like the value is being squeezed through an int32 pipe before the conversion. oct() is likewise.\n\n\n"""
1057,7725165,numpy-gitbot,numpy-gitbot,2012-10-19 18:52:49,2012-10-19 18:52:49,2012-10-19 18:52:49,closed,,,2,11 - Bug;component: numpy.lib;priority: high,https://api.github.com/repos/numpy/numpy/issues/1057,b'select does not preserve dtype for 1-element case (Trac #459)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/459 on 2007-03-03 by trac user batripler, assigned to unknown._\n\nin lib/function_base.py/def select:\n\n421 \t    if type(S) in ScalarType or max(asarray(S).shape)==1:\n422 \t        pfac = asarray(1)\n423 \t        for k in range(n2+1):\n424 \t            pfac = pfac + asarray(choicelist[k])\n425 \t        S = S*ones(asarray(pfac).shape)\n\nthe last line should preserve dtype:\n\n425 \t        S = S*ones(asarray(pfac).shape, S.dtype)\n\nAn example that works is:\n  n=5; numpy.select([numpy.ones(n)>200],[numpy.ones(n)])\nAn example that does not currently work, and should:\n  n=1; numpy.select([numpy.ones(n)>200],[numpy.ones(n)])\n\nThe patch is attached.'"
1056,7725163,numpy-gitbot,numpy-gitbot,2012-10-19 18:52:46,2012-10-19 18:52:47,2012-10-19 18:52:47,closed,,,2,11 - Bug;component: numpy.numarray;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1056,b'Compilation fails on Cygwin (Trac #458)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/458 on 2007-03-01 by @mdehoon, assigned to @teoliphant._\n\nCompiling NumPy 1.0.1 with Python 2.5 failed on Cygwin with the following error:\n\n...\ngcc -shared -Wl,--enable-auto-image-base build/temp.cygwin-1.5.23-i686-2.5/numpy\n/numarray/_capi.o -L/usr/local/lib/python2.5/config -lpython2.5 -o build/lib.cyg\nwin-1.5.23-i686-2.5/numpy/numarray/_capi.dll\nbuild/temp.cygwin-1.5.23-i686-2.5/numpy/numarray/_capi.o: In function `NA_checkF\nPErrors\':\n/home/mdehoon/numpy-1.0.1/numpy/numarray/_capi.c:2947: undefined reference to `_\nfetestexcept\'\n/home/mdehoon/numpy-1.0.1/numpy/numarray/_capi.c:2954: undefined reference to `_\nfeclearexcept\'\nbuild/temp.cygwin-1.5.23-i686-2.5/numpy/numarray/_capi.o: In function `NA_clearF\nPErrors\':\n/home/mdehoon/numpy-1.0.1/numpy/numarray/_capi.c:2947: undefined reference to `_\nfetestexcept\'\n/home/mdehoon/numpy-1.0.1/numpy/numarray/_capi.c:2954: undefined reference to `_\nfeclearexcept\'\nbuild/temp.cygwin-1.5.23-i686-2.5/numpy/numarray/_capi.o: In function `NA_checkA\nndReportFPErrors\':\n/home/mdehoon/numpy-1.0.1/numpy/numarray/_capi.c:2947: undefined reference to `_\nfetestexcept\'\n/home/mdehoon/numpy-1.0.1/numpy/numarray/_capi.c:2954: undefined reference to `_\nfeclearexcept\'\ncollect2: ld returned 1 exit status\nbuild/temp.cygwin-1.5.23-i686-2.5/numpy/numarray/_capi.o: In function `NA_checkF\nPErrors\':\n/home/mdehoon/numpy-1.0.1/numpy/numarray/_capi.c:2947: undefined reference to `_\nfetestexcept\'\n/home/mdehoon/numpy-1.0.1/numpy/numarray/_capi.c:2954: undefined reference to `_\nfeclearexcept\'\nbuild/temp.cygwin-1.5.23-i686-2.5/numpy/numarray/_capi.o: In function `NA_clearF\nPErrors\':\n/home/mdehoon/numpy-1.0.1/numpy/numarray/_capi.c:2947: undefined reference to `_\nfetestexcept\'\n/home/mdehoon/numpy-1.0.1/numpy/numarray/_capi.c:2954: undefined reference to `_\nfeclearexcept\'\nbuild/temp.cygwin-1.5.23-i686-2.5/numpy/numarray/_capi.o: In function `NA_checkA\nndReportFPErrors\':\n/home/mdehoon/numpy-1.0.1/numpy/numarray/_capi.c:2947: undefined reference to `_\nfetestexcept\'\n/home/mdehoon/numpy-1.0.1/numpy/numarray/_capi.c:2954: undefined reference to `_\nfeclearexcept\'\ncollect2: ld returned 1 exit status\nerror: Command ""gcc -shared -Wl,--enable-auto-image-base build/temp.cygwin-1.5.2\n3-i686-2.5/numpy/numarray/_capi.o -L/usr/local/lib/python2.5/config -lpython2.5\n-o build/lib.cygwin-1.5.23-i686-2.5/numpy/numarray/_capi.dll"" failed with exit s\ntatus 1'"
1055,7725161,numpy-gitbot,numpy-gitbot,2012-10-19 18:52:44,2012-10-19 18:52:45,2012-10-19 18:52:45,closed,,,2,11 - Bug;component: numpy.core;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1055,b'searchsorted docstring patch (Trac #457)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/457 on 2007-02-28 by @astraw, assigned to unknown._\n\nThe attached patch fixes a docstring bug. The following demonstrates that the output array is the shape of v, not a as described in the docstring.\n\n\n\n    >>> import numpy\n    >>> \n    >>> a=numpy.arange(20)\n    >>> v=numpy.array([2,3,6,3,5])\n    >>> \n    >>> result = numpy.searchsorted(a,v)\n    >>> print result.shape\n    (5,)\n\n\n'"
1054,7725159,numpy-gitbot,numpy-gitbot,2012-10-19 18:52:39,2012-10-19 18:52:42,2012-10-19 18:52:42,closed,,,5,11 - Bug;component: numpy.core;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1054,b'Inconsistent behaviour of representation of numpy scalar strings when NULLs exists (Trac #456)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/456 on 2007-02-22 by @FrancescAlted, assigned to unknown._\n\nHi,\n\nI think the next behaviour is somewhat inconsistent:\n\n\n\n    >>> numpy.array(""a\\x00\\x0b\\x0c\\x00"")\n    array(\'a\',\n          dtype=\'|S5\')\n\n\n\ni.e. the representation of scalar strings truncates when the first NULL is encountered. This is not the default behaviour in Python, that accepts NULLs as part of the representation:\n\n\n\n    >>> s=""a\\x00b\\x0c\\x00""\n    >>> s\n    \'a\\x00b\\x0c\\x00\'\n\n\n\nFurthermore, it seems that some conversion methods works well in this case:\n\n\n\n    >>> numpy.array(""a\\x00b\\x0c\\x00"").tostring()\n    \'a\\x00b\\x0c\\x00\'\n\n\n\nBut others seems to be broken:\n\n\n\n    >>> numpy.array(""a\\x00b\\x0c\\x00"").item()\n    \'a\'\n\n'"
1053,7725157,numpy-gitbot,numpy-gitbot,2012-10-19 18:52:35,2012-10-23 02:36:52,2012-10-19 18:52:37,closed,,1.0.2 Release,4,11 - Bug;component: Other;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1053,b'histogram2d crashes if all points are outliers (Trac #455)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/455 on 2007-02-17 by trac user npadmana, assigned to unknown._\n\nhistogram2d crashes if all the points are outliers -- the issue appears to be that the xy array is empty, resulting in bincount returning a very long array which exceeds the dimensions of hist.\n\nI think simply protecting that piece of code with an if xy.size > 0 should solve this problem.'"
1052,7725153,numpy-gitbot,numpy-gitbot,2012-10-19 18:52:32,2012-10-19 18:52:34,2012-10-19 18:52:34,closed,,,4,11 - Bug;component: numpy.core;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1052,b'Importing numpy prevents decrementing references for local variables (Trac #454)',"b""_Original ticket http://projects.scipy.org/numpy/ticket/454 on 2007-02-16 by trac user goddard, assigned to unknown._\n\nIf the first import of numpy is within a function it prevents that function's\nlocal variables and all locals in higher call frames that led to the import\nfrom being deleted.  This can prevent freeing up large numpy arrays.\n\nThe problem is that numpy __init__.py imports numpy _import_tools.py\nand creates a PackageLoader object that saves the parent frame\n\n       self.parent_frame = frame = sys._getframe(1)\n\nSaving the parent frame results in saving the entire call stack even after\nall those functions have returned.\n\nI've attached Python code illustrating the problem.\n"""
1051,7725151,numpy-gitbot,numpy-gitbot,2012-10-19 18:52:29,2012-10-19 18:52:31,2012-10-19 18:52:31,closed,,,1,11 - Bug;component: numpy.core;priority: highest,https://api.github.com/repos/numpy/numpy/issues/1051,b'coercion rules for boolean arrays are broken (Trac #453)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/453 on 2007-02-16 by @chanley, assigned to unknown._\n\nIn Python boolean multiplication results in the following:\n\n\n\n    In [1]: True * 4096\n    Out[1]: 4096\n\n\n\nNUMARRAY is consistent with what you get from Python:\n\n\n\n    In [2]: import numarray\n    \n    In [3]: a = numarray.ones(10,type=numarray.Bool)\n    \n    In [4]: print a\n    [1 1 1 1 1 1 1 1 1 1]\n    \n    In [5]: a * 4096\n    Out[5]: array([4096, 4096, 4096, 4096, 4096, 4096, 4096, 4096, 4096, 4096])\n\n\n\nHowever, numpy gives the following results:\n\n\n\n    In [6]: import numpy\n    \n    In [7]: b = numpy.ones(10,dtype=numpy.bool_)\n    \n    In [8]: print b\n    [ True  True  True  True  True  True  True  True  True  True]\n    \n    In [9]: b * 4096\n    Out[9]: array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0], dtype=int8)\n\n\n\nThe NUMPY coercion rules are not even self consistent.  If you extract an element from array b to get a rank zero array you get the same behavior as Python:\n\n\n\n    In [10]: print b[0]\n    True\n    \n    In [11]: b[0] * 4096\n    Out[11]: 4096\n\n\n\n\n'"
1050,7725149,numpy-gitbot,numpy-gitbot,2012-10-19 18:52:28,2012-10-19 18:52:28,2012-10-19 18:52:28,closed,,,1,11 - Bug;component: Other;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1050,b'.tolist() for void scalar type is returning a tuple (Trac #452)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/452 on 2007-02-14 by @FrancescAlted, assigned to unknown._\n\nThis exposes the problem:\n\n\n\n    In [37]: a=numpy.array((1,2,""asa""), ""i2,i2,a3"")\n    \n    In [38]: a.tolist()\n    Out[38]: (1, 2, \'asa\')\n    \n    In [39]: a.item()\n    Out[39]: (1, 2, \'asa\')\n    \n    In [40]: type(a.tolist())\n    Out[40]: <type \'tuple\'>\n    \n    In [41]: type(a.item())\n    Out[41]: <type \'tuple\'>\n    \n\n\n\n.tolist() for void scalar type is returning a tuple, and provided that .item() already returns a tuple, perhaps it would nice if .tolist() could return a list instead.'"
1048,7725146,numpy-gitbot,numpy-gitbot,2012-10-19 18:52:17,2012-10-23 02:36:50,2012-10-19 18:52:23,closed,,NumPy 1.7,16,11 - Bug;component: numpy.core;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1048,b'Make a.min() not copy data (Trac #450)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/450 on 2007-02-14 by trac user goddard, assigned to unknown._\n\nI would like the min/max array methods not to copy the array.  This limits the ability to handle very large data sets (our case is 3-D electron microscopy).  Here\'s an example:\n\n>>> import numpy as n\n>>> a = n.zeros((1024, 1024, 1400), n.int8)\n>>> a.min()\n0\n>>> b = a[1:,1:,1:]\n>>> b.min()\nTraceback (most recent call last):\n  File ""<pyshell#509>"", line 1, in ?\n    b.min()\nMemoryError'"
1047,7725143,numpy-gitbot,numpy-gitbot,2012-10-19 18:52:15,2012-10-19 18:52:16,2012-10-19 18:52:16,closed,,,1,11 - Bug;component: Other;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1047,"b""Swaping byteorder in recarrays with multidimensional fields doesn't work (Trac #449)""","b'_Original ticket http://projects.scipy.org/numpy/ticket/449 on 2007-02-12 by @FrancescAlted, assigned to unknown._\n\nWhen swaping the byteorder of a recarray with multidimensional fields, those are not swapped at all as can be seen in:\n\n\n\n    In [45]:r=numpy.array([(1,(0,1,2))], dtype=""i2,3i2"")\n    In [46]:r.byteswap()\n    Out[46]:\n    array([(256, [0, 1, 2])],\n          dtype=[(\'f0\', \'<i2\'), (\'f1\', \'<i2\', 3)])\n\n\n\nCuriously, this seems to work fine with nested recarrays (without multidimensional columns, of course):\n\n\n\n    In [47]:mydescriptor = numpy.dtype([(\'x\', \'f4\'),(\'y\', \'f4\'),(\'nested\', [(\'i\', \'i2\'),(\'j\',\'i2\')])])\n    In [48]:nra=numpy.array([(1.0, 2.0, (1,2)), (2.1, 3.2, (3,2))], dtype=mydescriptor)\n    In [49]:nra.byteswap()\n    Out[49]:\n    array([(4.6006029882248069e-41, 8.9683101716788293e-44, (256, 512)),\n           (2.7156489580261977e+23, -428443648.0, (768, 512))],\n          dtype=[(\'x\', \'<f4\'), (\'y\', \'<f4\'), (\'nested\', [(\'i\', \'<i2\'), (\'j\', \'<i2\')])])\n    \n\n'"
1046,7725142,numpy-gitbot,numpy-gitbot,2012-10-19 18:52:14,2012-10-19 18:52:14,2012-10-19 18:52:14,closed,,,0,11 - Bug;component: Other;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1046,b'memory error in polymul (Trac #448)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/448 on 2007-02-09 by @stefanv, assigned to unknown._\n\nReproduce by\n\n\n\n    N.polymul([],[1.])\n\n\nFixed in r3543.'"
1044,7725139,numpy-gitbot,numpy-gitbot,2012-10-19 18:52:10,2012-10-19 18:52:11,2012-10-19 18:52:11,closed,,,1,11 - Bug;component: Other;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1044,b'numpy.linalg.qr bug on 64-bit platforms (Trac #446)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/446 on 2007-02-07 by @fperez, assigned to unknown._\n\nHi all,\n\nI recently got a report of a bug triggered only on 64-bit hardware, and on a machine (in case it\'s relevant) that runs python 2.5:\n\n\n\n    \n    In [1]: import numpy\n    \n    In [2]: numpy.__version__\n    Out[2]: \'1.0.2.dev3540\'\n    \n    In [3]: a = numpy.array([[1.0,2],[3,4]])\n    \n    In [4]: numpy.linalg.qr(a)\n     ** On entry to DGEQRF parameter number  2 had an illegal value\n    sage[~]>  # dumped back at system prompt\n    \n\n\n\nOn my 2.4-using, 32-bit desktop, this code runs just fine.\n\nA quick grep exercise in the sources shows this as the probable source: in numpy/linalg/dlapack_lite.c, this code is the one that seems to matter (around line 4920):\n\n\n\n        /* Function Body */\n        *info = 0;\n        nb = ilaenv_(&c__1, ""DGEQRF"", "" "", m, n, &c_n1, &c_n1, (ftnlen)6, (ftnlen)\n                1);\n        lwkopt = *n * nb;\n        work[1] = (doublereal) lwkopt;\n        lquery = *lwork == -1;\n        if (*m < 0) {\n            *info = -1;\n        } else if (*n < 0) {\n            *info = -2;\n        } else if (*lda < max(1,*m)) {\n            *info = -4;\n        } else if ((*lwork < max(1,*n) && ! lquery)) {\n            *info = -7;\n        }\n        if (*info != 0) {\n            i__1 = -(*info);\n            xerbla_(""DGEQRF"", &i__1);\n            return 0;\n        } else if (lquery) {\n            return 0;\n        }\n\n\nI\'m not sure why *n should have come out negative while *m is fine in this case though.'"
1043,7725138,numpy-gitbot,numpy-gitbot,2012-10-19 18:52:08,2012-10-19 18:52:09,2012-10-19 18:52:09,closed,,,4,11 - Bug;component: numpy.lib;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1043,b'normed histogram returns incorrect results (Trac #445)',"b""_Original ticket http://projects.scipy.org/numpy/ticket/445 on 2007-02-05 by trac user cvwright, assigned to @rkern._\n\nThe histogram() function, when called with normed=True, returns incorrect results for the bins' frequencies.  The frequencies should sum to 1.0 in order to be a real probability distribution, but usually with the current code they do not.\n\nLooking at the current version of the code in trac, I believe the problem is on lines 105 and 106 of function_base.py.  On line 105, we calculate the width of a bin, and on line 106, we divide the counts for each bin by the size of the input times the bin width.  I think the problem could be fixed by simply removing the bin width calculation and instead dividing the bin counts by only the number of samples in the input."""
1042,7725137,numpy-gitbot,numpy-gitbot,2012-10-19 18:52:06,2012-10-19 18:52:06,2012-10-19 18:52:06,closed,,,0,11 - Bug;component: numpy.numarray;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1042,"b""from numpy.numarray import * fails with AttributeError: 'module' object has no attribute 'NewAxis' (Trac #444)""","b""_Original ticket http://projects.scipy.org/numpy/ticket/444 on 2007-02-03 by trac user jachaves, assigned to unknown._\n\n\n\n    from numpy.numarray import *\n    fails with\n    AttributeError: 'module' object has no attribute 'NewAxis'\n    \n    because file numpy/numarray/__init__.py\n    is missing the following line:\n    from compat import *\n\n\n"""
1041,7725136,numpy-gitbot,numpy-gitbot,2012-10-19 18:52:04,2012-10-19 18:52:05,2012-10-19 18:52:05,closed,,1.0.2 Release,0,11 - Bug;component: numpy.lib;priority: lowest,https://api.github.com/repos/numpy/numpy/issues/1041,b'ERROR: check_complex_bad (numpy.lib.tests.test_type_check.test_nan_to_num) (Trac #443)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/443 on 2007-02-02 by @nilswagner01, assigned to unknown._\n\n\n\n\n    ======================================================================\n    ERROR: check_complex_bad (numpy.lib.tests.test_type_check.test_nan_to_num)\n    ----------------------------------------------------------------------\n    Traceback (most recent call last):\n      File ""/usr/lib64/python2.4/site-packages/numpy/lib/tests/test_type_check.py"", line 245, in check_complex_bad\n        vals = nan_to_num(v)\n      File ""/usr/lib64/python2.4/site-packages/numpy/lib/type_check.py"", line 132, in nan_to_num\n        are_inf = isposinf(y)\n      File ""/usr/lib64/python2.4/site-packages/numpy/lib/ufunclike.py"", line 33, in isposinf\n        umath.logical_and(isinf(x), ~signbit(x), y)\n    TypeError: function not supported for these types, and can\'t coerce safely to supported types\n    \n    ======================================================================\n    ERROR: check_complex_bad2 (numpy.lib.tests.test_type_check.test_nan_to_num)\n    ----------------------------------------------------------------------\n    Traceback (most recent call last):\n      File ""/usr/lib64/python2.4/site-packages/numpy/lib/tests/test_type_check.py"", line 253, in check_complex_bad2\n        vals = nan_to_num(v)\n      File ""/usr/lib64/python2.4/site-packages/numpy/lib/type_check.py"", line 132, in nan_to_num\n        are_inf = isposinf(y)\n      File ""/usr/lib64/python2.4/site-packages/numpy/lib/ufunclike.py"", line 33, in isposinf\n        umath.logical_and(isinf(x), ~signbit(x), y)\n    TypeError: function not supported for these types, and can\'t coerce safely to supported types\n    \n    ======================================================================\n    ERROR: check_complex_good (numpy.lib.tests.test_type_check.test_nan_to_num)\n    ----------------------------------------------------------------------\n    Traceback (most recent call last):\n      File ""/usr/lib64/python2.4/site-packages/numpy/lib/tests/test_type_check.py"", line 238, in check_complex_good\n        vals = nan_to_num(1+1j)\n      File ""/usr/lib64/python2.4/site-packages/numpy/lib/type_check.py"", line 132, in nan_to_num\n        are_inf = isposinf(y)\n      File ""/usr/lib64/python2.4/site-packages/numpy/lib/ufunclike.py"", line 33, in isposinf\n        umath.logical_and(isinf(x), ~signbit(x), y)\n    TypeError: function not supported for these types, and can\'t coerce safely to supported types\n    \n    ----------------------------------------------------------------------\n    Ran 526 tests in 0.518s\n    \n    FAILED (errors=3)\n    <unittest.TextTestRunner object at 0x2aaaae34ffd0>\n    >>> numpy.__version__\n    \'1.0.2.dev3534\'\n\n\n'"
1038,7725131,numpy-gitbot,charris,2012-10-19 18:51:56,2014-02-17 18:20:35,2014-02-17 18:20:35,closed,,,9,11 - Bug;component: numpy.core;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1038,b'Inconsistent behaviour for empty arrays (Trac #440)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/440 on 2007-01-30 by @stefanv, assigned to @stefanv._\n\nFunctions returning floating point values based on array input, like mean, average and median should behave in a consistent fashion.\n\nCurrent situation:\n\nmean([]) -> nan\naverage([]) -> ZeroDivisionError\nmedian([]) -> IndexError\n'"
1037,7725129,numpy-gitbot,numpy-gitbot,2012-10-19 18:51:54,2012-10-19 18:51:55,2012-10-19 18:51:55,closed,,,1,11 - Bug;component: numpy.lib;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1037,b'poly1d objects can not be pickled (Trac #439)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/439 on 2007-01-30 by @tovrstra, assigned to unknown._\n\nDue to a bug in the `__getattr__` method of the `poly1d` class, instances of this class can not be pickled. The current version of the method is like this (in file `numpy/lib/polynomial.py`):\n\n\n\n        def __getattr__(self, key):\n            if key in [\'r\', \'roots\']:\n                return roots(self.coeffs)\n            elif key in [\'c\',\'coef\',\'coefficients\']:\n                return self.coeffs\n            elif key in [\'o\']:\n                return self.order\n            else:\n                return self.__dict__[key]\n\n\n\nwhile it should be something like this:\n\n\n\n        def __getattr__(self, key):\n            if key in [\'r\', \'roots\']:\n                return roots(self.coeffs)\n            elif key in [\'c\',\'coef\',\'coefficients\']:\n                return self.coeffs\n            elif key in [\'o\']:\n                return self.order\n            elif key not in self.__dict__:\n                raise AttributeError(""\'%s\' has not attribute \'%s\'"" % (self.__class__, key))\n            else:\n                return self.__dict__[key]\n\n\n\nIn the original version a `KeyError` is raised when one tries to access a non-existing attribute, while an `AttributeError` should be raised. This confuses the pickle process since it tries to access the method `__getstate__` as an attribute and it expects an `AttributeError` to be raised when this method does not exist. I have tested the new version and it works.\n'"
1036,7725124,numpy-gitbot,numpy-gitbot,2012-10-19 18:51:51,2012-10-23 02:36:45,2012-10-19 18:51:53,closed,,1.0.2 Release,4,11 - Bug;component: numpy.f2py;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1036,"b'extension modules on x86_64 fail, march is set to i686 (Trac #438)'","b'_Original ticket http://projects.scipy.org/numpy/ticket/438 on 2007-01-29 by @tovrstra, assigned to @dmcooke._\n\nWhen trying to compile this fortran example module into a python module:\n\n\n\n    MODULE test\n    IMPLICIT NONE\n    CONTAINS\n        FUNCTION add(a,b)\n            REAL(8),INTENT(IN) :: a,b\n            REAL(8) :: add\n            add = a+b\n        END FUNCTION\n    END MODULE\n\n\n\nwith f2py:\n\n\n\n    f2py -c test.f90\n\n\n\non my x86-64 box, I get the following output:\n\n\n\n    toon@dropklop:~/$ f2py -c test.f90\n    running build\n    running config_fc\n    running build_src\n    building extension ""untitled"" sources\n    f2py options: []\n    f2py:> /tmp/tmpus7JnZ/src.linux-x86_64-2.4/untitledmodule.c\n    creating /tmp/tmpus7JnZ\n    creating /tmp/tmpus7JnZ/src.linux-x86_64-2.4\n    Reading fortran codes...\n            Reading file \'test.f90\' (format:free)\n    Post-processing...\n            Block: untitled\n                            Block: test\n                                    Block: add\n    Post-processing (stage 2)...\n            Block: untitled\n                    Block: unknown_interface\n                            Block: test\n                                    Block: add\n    Building modules...\n            Building module ""untitled""...\n                    Constructing F90 module support for ""test""...\n                    Creating wrapper for Fortran function ""add""(""add"")...\n                            Constructing wrapper function ""test.add""...\n                              add = add(a,b)\n            Wrote C/API module ""untitled"" to file ""/tmp/tmpus7JnZ/src.linux-x86_64-2.4/untitledmodule.c""\n            Fortran 90 wrappers are saved to ""/tmp/tmpus7JnZ/src.linux-x86_64-2.4/untitled-f2pywrappers2.f90""\n      adding \'/tmp/tmpus7JnZ/src.linux-x86_64-2.4/fortranobject.c\' to sources.\n      adding \'/tmp/tmpus7JnZ/src.linux-x86_64-2.4\' to include_dirs.\n    copying /usr/lib/python2.4/site-packages/numpy/f2py/src/fortranobject.c -> /tmp/tmpus7JnZ/src.linux-x86_64-2.4\n    copying /usr/lib/python2.4/site-packages/numpy/f2py/src/fortranobject.h -> /tmp/tmpus7JnZ/src.linux-x86_64-2.4\n      adding \'/tmp/tmpus7JnZ/src.linux-x86_64-2.4/untitled-f2pywrappers2.f90\' to sources.\n    running build_ext\n    customize UnixCCompiler\n    customize UnixCCompiler using build_ext\n    Could not locate executable g77\n    Could not locate executable f77\n    customize GnuFCompiler\n    Could not locate executable ifort\n    Could not locate executable ifc\n    Could not locate executable ifort\n    Could not locate executable efort\n    Could not locate executable efc\n    Could not locate executable ifort\n    Could not locate executable efort\n    Could not locate executable efc\n    customize IntelFCompiler\n    customize LaheyFCompiler\n    customize PGroupFCompiler\n    customize AbsoftFCompiler\n    customize NAGFCompiler\n    customize VastFCompiler\n    customize GnuFCompiler\n    customize CompaqFCompiler\n    customize IntelItaniumFCompiler\n    customize IntelEM64TFCompiler\n    customize Gnu95FCompiler\n    customize Gnu95FCompiler\n    customize Gnu95FCompiler using build_ext\n    building \'untitled\' extension\n    compiling C sources\n    C compiler: gcc -pthread -fno-strict-aliasing -DNDEBUG -g -O2 -Wall -Wstrict-prototypes -fPIC\n    \n    creating /tmp/tmpus7JnZ/tmp\n    creating /tmp/tmpus7JnZ/tmp/tmpus7JnZ\n    creating /tmp/tmpus7JnZ/tmp/tmpus7JnZ/src.linux-x86_64-2.4\n    compile options: \'-I/tmp/tmpus7JnZ/src.linux-x86_64-2.4 -I/usr/lib/python2.4/site-packages/numpy/core/include -I/usr/include/python2.4 -c\'\n    gcc: /tmp/tmpus7JnZ/src.linux-x86_64-2.4/untitledmodule.c\n    gcc: /tmp/tmpus7JnZ/src.linux-x86_64-2.4/fortranobject.c\n    compiling Fortran 90 module sources\n    Fortran f77 compiler: /usr/bin/gfortran -Wall -ffixed-form -fno-second-underscore -fPIC -O3 -funroll-loops -march=i686 -mmmx -msse2 -msse -fomit-frame-pointer\n    Fortran f90 compiler: /usr/bin/gfortran -Wall -fno-second-underscore -fPIC -O3 -funroll-loops -march=i686 -mmmx -msse2 -msse -fomit-frame-pointer\n    Fortran fix compiler: /usr/bin/gfortran -Wall -ffixed-form -fno-second-underscore -Wall -fno-second-underscore -fPIC -O3 -funroll-loops -march=i686 -mmmx -msse2 -msse -fomit-frame-pointer\n    compile options: \'-I/tmp/tmpus7JnZ/src.linux-x86_64-2.4 -I/usr/lib/python2.4/site-packages/numpy/core/include -I/usr/include/python2.4 -c\'\n    extra options: \'-J/tmp/tmpus7JnZ/ -I/tmp/tmpus7JnZ/\'\n    gfortran:f90: test.f90\n    test.f90:0: error: CPU you selected does not support x86-64 instruction set\n    test.f90:0: error: CPU you selected does not support x86-64 instruction set\n    test.f90:0: error: CPU you selected does not support x86-64 instruction set\n    test.f90:0: error: CPU you selected does not support x86-64 instruction set\n    error: Command ""/usr/bin/gfortran -Wall -fno-second-underscore -fPIC -O3 -funroll-loops -march=i686 -mmmx -msse2 -msse -fomit-frame-pointer -I/tmp/tmpus7JnZ/src.linux-x86_64-2.4 -I/usr/lib/python2.4/site-packages/numpy/core/include -I/usr/include/python2.4 -c -c test.f90 -o /tmp/tmpus7JnZ/test.o -J/tmp/tmpus7JnZ/ -I/tmp/tmpus7JnZ/"" failed with exit status 1\n\n\n\nIt seems that f2py is not correctly recognizing the cpu architecture. i.e. the compiler option -march=i686 is wrong. As a workaround, one can simply disable the architecture optimization:\n\n\n\n    FARCH=\'\' f2py -c test.f90\n\n'"
1034,7725115,numpy-gitbot,numpy-gitbot,2012-10-19 18:51:37,2012-10-23 02:36:42,2012-10-19 18:51:38,closed,,,4,11 - Bug;component: Other;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1034,b'a[::-1].tofile(f)  creates junk (Trac #436)',"b""_Original ticket http://projects.scipy.org/numpy/ticket/436 on 2007-01-27 by @sebhaase, assigned to unknown._\n\nHi!\n\n`arr.tofile(f)` creates garbage in `f`.\n`f` in my case is an open file object at position 1024 \n(that's the length of our file format's header)\n\n\n    N.__version__\n    '1.0.1'\n\n\nIt cannot determine what exactly goes wrong - the file size seems to be varying even if `arr` always has the same size  (my `arr` has `dtype=uint16`)\n\nThanks,\nSebastian Haase\n"""
1033,7725114,numpy-gitbot,numpy-gitbot,2012-10-19 18:51:34,2014-05-13 01:53:02,2012-10-19 18:51:35,closed,,,1,11 - Bug;component: numpy.core;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1033,b'numpy.mean(): accumulator default type should not be single precision (Trac #435)',"b""_Original ticket http://projects.scipy.org/numpy/ticket/435 on 2007-01-24 by @chanley, assigned to unknown._\n\nThe accumulator used in the mean algorithm should not be single precision by default.  This default can cause unexpected results.  Please see the following example:\n\n\n\n    In [5]: a.dtype\n    Out[5]: dtype('>f4')\n    \n    In [6]: print a\n    [[ 132.  132.  132. ...,  132.  132.  132.]\n     [ 132.  132.  132. ...,  132.  132.  132.]\n     [ 132.  132.  132. ...,  132.  132.  132.]\n     ..., \n     [ 132.  132.  132. ...,  132.  132.  132.]\n     [ 132.  132.  132. ...,  132.  132.  132.]\n     [ 132.  132.  132. ...,  132.  132.  132.]]\n    \n    In [7]: a.min()\n    Out[7]: 132.0\n    \n    In [8]: a.max()\n    Out[8]: 389.0\n    \n    In [9]: a.mean()\n    Out[9]: 129.742439153\n\n\n\nHowever, if you recast the array as float64 you get the correct result:\n\n\n    In [11]: a.astype(numpy.float64).mean()\n    Out[11]: 132.062805059\n\n\n\nI believe that double precision would be a more appropriate default type for the accumulator.\n"""
1031,7725111,numpy-gitbot,numpy-gitbot,2012-10-19 18:51:29,2012-10-19 18:51:29,2012-10-19 18:51:29,closed,,1.0.3 Release,2,11 - Bug;component: numpy.core;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1031,b'longdouble on G5 OS X operates incorrectly (Trac #433)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/433 on 2007-01-24 by @rkern, assigned to unknown._\n\nAs reported by Vincent Nijs:\n\n\n\n    \n    Mac OS X 10.4.8\n    G5 PPC\n    \n    Numpy svn: 2602\n    \n    Target: powerpc-apple-darwin8\n    Configured with: /private/var/tmp/gcc/gcc-5367.obj~1/src/configure\n    --disable-checking -enable-werror --prefix=/usr --mandir=/share/man\n    --enable-languages=c,objc,c++,obj-c++\n    --program-transform-name=/^[cg][^.-]*$/s/$/-4.0/\n    --with-gxx-include-dir=/include/c++/4.0.0 --with-slibdir=/usr/lib\n    --build=powerpc-apple-darwin8 --host=powerpc-apple-darwin8\n    --target=powerpc-apple-darwin8\n    Thread model: posix\n    gcc version 4.0.1 (Apple Computer, Inc. build 5367)\n    \n    \n    ======================================================================\n    FAIL: check_large_types (numpy.core.tests.test_scalarmath.test_power)\n    ----------------------------------------------------------------------\n    Traceback (most recent call last):\n      File \n    ""/Library/Frameworks/Python.framework/Versions/2.4/lib/python2.4/site-packag\n    es/numpy/core/tests/test_scalarmath.py"", line 46, in check_large_types\n        assert b == 6765201, ""error with %r: got %r"" % (t,b)\n    AssertionError: error with <type \'numpy.float128\'>: got 0.0\n    \n    ======================================================================\n    FAIL: check_types (numpy.core.tests.test_scalarmath.test_types)\n    ----------------------------------------------------------------------\n    Traceback (most recent call last):\n      File \n    ""/Library/Frameworks/Python.framework/Versions/2.4/lib/python2.4/site-packag\n    es/numpy/core/tests/test_scalarmath.py"", line 19, in check_types\n        assert a == 1, ""error with %r: got %r"" % (atype,a)\n    AssertionError: error with <type \'numpy.float128\'>: got 1.0\n    \n    ----------------------------------------------------------------------\n    Ran 526 tests in 1.133s\n    \n    FAILED (failures=2)\n\n'"
1030,7725109,numpy-gitbot,numpy-gitbot,2012-10-19 18:51:24,2012-10-23 02:36:39,2012-10-19 18:51:27,closed,,1.0.3 Release,12,11 - Bug;component: Other;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1030,b'cov segfaults when input is oriented incorrectly (Trac #432)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/432 on 2007-01-23 by @huard, assigned to unknown._\n\n\n\n    r = random.randn(1000,2)\n    cov(r)\n\n\nCrashes the shell. Ubuntu Dapper, 1.0.1.dev3423.\n\n\n    cov(r.T)\n\n\nworks fine.'"
1029,7725108,numpy-gitbot,numpy-gitbot,2012-10-19 18:51:21,2012-10-19 18:51:22,2012-10-19 18:51:22,closed,,1.6.0,4,11 - Bug;component: numpy.distutils;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1029,b'default_x11_lib_dirs should contain 64 bit library paths (Trac #431)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/431 on 2007-01-22 by @lebedov, assigned to @dmcooke._\n\nThe list of X11 library directories in `numpy/distutils/system_info.py` (default_x11_lib_dirs) ought to include those directories unique to 64  bit systems (e.g., `/usr/lib64`, `/usr/X11R6/lib64`).'"
1028,7725104,numpy-gitbot,numpy-gitbot,2012-10-19 18:51:18,2012-10-19 18:51:20,2012-10-19 18:51:20,closed,,1.1.0,3,11 - Bug;component: Other;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1028,b'numpy fails with PyWin build 210 (PyWin32-210.win32-py2.5.exe) (Trac #430)',"b""_Original ticket http://projects.scipy.org/numpy/ticket/430 on 2007-01-22 by trac user rstockford, assigned to unknown._\n\nI have installed Py 2.5 for Windows with PyWin as above.  Everything works as before, except that numpy causes PyWin to crash  ('PyWin32 has encountered a problem and needs to close...').  The details are:\n\nmodule   umath.pyd\noffset   0001d310\ncode     0xc0000091\naddress  0x000000006485d310\n\nnumpy was installed with no errors and works fine with Idle: it can be imported and used.  Any sugestions?\n\nRichard Stockford"""
1025,7725098,numpy-gitbot,numpy-gitbot,2012-10-19 18:51:09,2012-10-19 18:51:09,2012-10-19 18:51:09,closed,,1.0.2 Release,1,11 - Bug;component: numpy.random;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1025,b'numpy.random.permutation cannot handle numpy integer scalars (Trac #427)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/427 on 2007-01-18 by @rkern, assigned to @rkern._\n\nAs reported by Emanuele Olivetti:\n\n\n\n    \n    Look at this:\n    \n    ----------bug.py-------\n    import numpy\n    a=numpy.array([1,2])\n    b=a.sum()\n    print type(b)\n    c=numpy.random.permutation(b)\n    -----------------------\n    \n    If I run it (Python 2.5, numpy 1.0.1 on a Linux box) I get:\n    -----------\n    #> python /tmp/bug.py\n    <type \'numpy.int32\'>\n    Traceback (most recent call last):\n      File ""/tmp/bug.py"", line 5, in <module>\n        c=numpy.random.permutation(b)\n      File ""mtrand.pyx"", line 1227, in mtrand.RandomState.permutation\n      File ""mtrand.pyx"", line 1211, in mtrand.RandomState.shuffle\n    TypeError: len() of unsized object\n    -----------\n\n\n\nWe are currently using `type(x) is int` to distinguish integers from arrays. We should test for `isinstance(x, int) or isinstance(numpy.integer)`, I believe. Possibly, we should also check for `hasattr(x, \'__index__\')`.'"
1022,7725094,numpy-gitbot,numpy-gitbot,2012-10-19 18:50:59,2012-10-19 18:51:01,2012-10-19 18:51:01,closed,,1.0.2 Release,5,11 - Bug;component: numpy.core;priority: high,https://api.github.com/repos/numpy/numpy/issues/1022,b'stable argsort() and sort() behave differently on 2-column uint64 arrays. possibly a bug in argsort() or sort() . (Trac #424)',"b""_Original ticket http://projects.scipy.org/numpy/ticket/424 on 2007-01-16 by trac user ciro, assigned to unknown._\n\nnumpy 1.0.1 fails to pass the following\nin a reproducible way.\n\n\n\n    #!/usr/bin/env python2.4\n    from numpy import *\n    \n    \n    N = 500000\n    X = zeros((N,2), uint64)\n    \n    for i in range(N):\n       X[i,0] = random.randint(2**20) << 43      # if we set highest bit - problems\n    #   X[i,0] = random.randint(2**20) << 42     # this works, instead\n    \n    \n    X2 = X[:,0].copy()\n    X2.sort(kind='mergesort')\n    \n    X_index = X[:,0].argsort(kind='mergesort')\n    X[:,0] = take(X[:,0], X_index)\n    \n    print alltrue(X2 == X[:,0])\n\n\n\nConversely, the following always works:\n\n\n\n    N = 500000\n    X = zeros(N, uint64)\n    \n    for i in range(N):\n       X[i] = random.randint(2**20) << 43      # if we set highest bit, ok in this case\n    #   X[i] = random.randint(2**20) << 42     # this works\n    \n    \n    X2 = X.copy()\n    X2.sort(kind='mergesort')\n    \n    X_index = X.argsort(kind='mergesort')\n    X = take(X, X_index)\n    \n    print alltrue(X2 == X)\n\n\n\nbehavior seems inconsistent across architectures and numpy versions.\n\n"""
1021,7725092,numpy-gitbot,numpy-gitbot,2012-10-19 18:50:57,2012-10-19 18:50:58,2012-10-19 18:50:58,closed,,,2,11 - Bug;component: Other;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1021,b'clip segfaults when using out argument with non-expected datatype (Trac #423)',"b""_Original ticket http://projects.scipy.org/numpy/ticket/423 on 2007-01-15 by @cournape, assigned to unknown._\n\nThe clip function segfaults when using a out argument which does not have the expected type:\n\nimport numpy as N\na   = N.linspace(0, 10, 100).astype(numpy.int32)\nm   = N.int32(0)                                                                     \nM   = N.int32(1)\n# works\na.clip(m, M) \nb   = N.zeros(a.shape, dtype = N.int32)                                              \n# works\na.clip(m, M, out = b)\nb   = N.zeros(a.shape, dtype = N.int64)                                              \n# always segfaults\na.clip(m, M, out = b)\n\nThis is with a recent SVN numpy ('1.0.2.dev3510')."""
1020,7725090,numpy-gitbot,numpy-gitbot,2012-10-19 18:50:55,2012-10-19 18:50:56,2012-10-19 18:50:56,closed,,1.0.3 Release,3,11 - Bug;component: numpy.core;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1020,b'__getitem__ method of MaskedArray returns ndarray in some cases (Trac #422)',"b""_Original ticket http://projects.scipy.org/numpy/ticket/422 on 2007-01-12 by trac user reggie, assigned to unknown._\n\nWhen using extended slicing on a MaskedArray with its mask set to nomask, the `__getitem__` method (called because of the *extended* slicing) will return only the data portion of the MaskedArray thereby causing the result of your slicing operation to be an ndarray instead of a MaskedArray.\n\nI'm attaching a patch that seems to fix this problem and also eliminates the `__getslice__` and `__setslice__` methods as I believe they're only needed in Python versions prior to 2.0 which aren't supported by numpy, if I'm not mistaken."""
1016,7725082,numpy-gitbot,numpy-gitbot,2012-10-19 18:50:45,2012-10-19 18:50:46,2012-10-19 18:50:46,closed,,,4,11 - Bug;component: numpy.core;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1016,b'Segfault dotblas.c (Trac #418)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/418 on 2007-01-11 by @nilswagner01, assigned to unknown._\n\n\n\n\n    Program received signal SIGSEGV, Segmentation fault.\n    [Switching to Thread 46912509653888 (LWP 30502)]\n    dotblas_matrixproduct (dummy=<value optimized out>, args=<value optimized out>) at _dotblas.c:233\n    233             Py_DECREF(ap1);\n\n\n'"
1015,7725081,numpy-gitbot,numpy-gitbot,2012-10-19 18:50:40,2012-10-19 18:50:43,2012-10-19 18:50:43,closed,,,8,11 - Bug;component: numpy.distutils;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1015,b'Numpy 1.0.1 compilation fails on IRIX 6.5 (Trac #417)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/417 on 2007-01-10 by trac user goddard, assigned to @cournape._\n\nCompiling numpy 1.0.1 on SGI IRIX 6.5.24m fails with the error shown below.  The trouble is that it is compiling with the -n32 (""new"" 32 ABI) but it is also explicitly adding -L/usr/lib to the link line and that system directory contains incompatible o32 libraries.  The /usr/lib directory was added because it found BLAS libraries in that directory.\n\nAfter working around that problem by changing default_lib_dirs to [] in numpy-1.0.1/numpy/distutils/system_info.py I get the C code errors shown in the second error message below undefined symbols expm1l, rintf, ..., non-constant initializers, ...).\n\nThese problems are using SGI compilers (not gcc).\n\n    Tom\n\n\n\n    % python2.4 setup.py install\n    ...\n    C compiler: cc -n32 -OPT:Olimit=0 -DNDEBUG -O\n    \n    compile options: \'-I/usr/local/src/staff/chimera-build/IRIX-X11/foreign/Python-2.4.3/include/python2.4 -Inumpy/core/src -Inumpy/core/include -I/usr/local/src/staff/chimera-build/IRIX-X11/foreign/Python-2.4.3/include/python2.4 -c\'\n    cc: _configtest.c\n    cc -n32 _configtest.o -L/usr/local/src/staff/chimera-build/IRIX-X11/foreign/Python-2.4.3/lib -L/usr/local/lib -L/usr/lib -o _configtest\n    ld32: FATAL   12 : Expecting n32 objects: /usr/lib/crt1.o is o32.\n    ld32: FATAL   12 : Expecting n32 objects: /usr/lib/crt1.o is o32.\n    failure.\n    removing: _configtest.c _configtest.o\n    Traceback (most recent call last):\n      File ""setup.py"", line 89, in ?\n        setup_package()\n      File ""setup.py"", line 82, in setup_package\n        configuration=configuration )\n      File ""/usr/local/src/staff/goddard/chimera/foreign/numpy/numpy-1.0.1/numpy/distutils/core.py"", line 174, in setup\n        return old_setup(**new_attr)\n      File ""/usr/local/src/staff/chimera-build/IRIX-X11/foreign/Python-2.4.3/lib/python2.4/distutils/core.py"", line 149, in setup\n        dist.run_commands()\n      File ""/usr/local/src/staff/chimera-build/IRIX-X11/foreign/Python-2.4.3/lib/python2.4/distutils/dist.py"", line 946, in run_commands\n        self.run_command(cmd)\n      File ""/usr/local/src/staff/chimera-build/IRIX-X11/foreign/Python-2.4.3/lib/python2.4/distutils/dist.py"", line 966, in run_command\n        cmd_obj.run()\n      File ""/usr/local/src/staff/goddard/chimera/foreign/numpy/numpy-1.0.1/numpy/distutils/command/install.py"", line 16, in run\n        r = old_install.run(self)\n      File ""/usr/local/src/staff/chimera-build/IRIX-X11/foreign/Python-2.4.3/lib/python2.4/distutils/command/install.py"", line 506, in run\n        self.run_command(\'build\')\n      File ""/usr/local/src/staff/chimera-build/IRIX-X11/foreign/Python-2.4.3/lib/python2.4/distutils/cmd.py"", line 333, in run_command\n        self.distribution.run_command(command)\n      File ""/usr/local/src/staff/chimera-build/IRIX-X11/foreign/Python-2.4.3/lib/python2.4/distutils/dist.py"", line 966, in run_command\n        cmd_obj.run()\n      File ""/usr/local/src/staff/chimera-build/IRIX-X11/foreign/Python-2.4.3/lib/python2.4/distutils/command/build.py"", line 112, in run\n        self.run_command(cmd_name)\n      File ""/usr/local/src/staff/chimera-build/IRIX-X11/foreign/Python-2.4.3/lib/python2.4/distutils/cmd.py"", line 333, in run_command\n        self.distribution.run_command(command)\n      File ""/usr/local/src/staff/chimera-build/IRIX-X11/foreign/Python-2.4.3/lib/python2.4/distutils/dist.py"", line 966, in run_command\n        cmd_obj.run()\n      File ""/usr/local/src/staff/goddard/chimera/foreign/numpy/numpy-1.0.1/numpy/distutils/command/build_src.py"", line 87, in run\n        self.build_sources()\n      File ""/usr/local/src/staff/goddard/chimera/foreign/numpy/numpy-1.0.1/numpy/distutils/command/build_src.py"", line 106, in build_sources\n        self.build_extension_sources(ext)\n      File ""/usr/local/src/staff/goddard/chimera/foreign/numpy/numpy-1.0.1/numpy/distutils/command/build_src.py"", line 212, in build_extension_sources\n        sources = self.generate_sources(sources, ext)\n      File ""/usr/local/src/staff/goddard/chimera/foreign/numpy/numpy-1.0.1/numpy/distutils/command/build_src.py"", line 270, in generate_sources\n        source = func(extension, build_dir)\n      File ""numpy/core/setup.py"", line 50, in generate_config_h\n        raise ""ERROR: Failed to test configuration""\n    ERROR: Failed to test configuration\n\n\n\n-------\nAfter setting default_lib_dirs = [] get several C code errors:\n\n\n\n    % python2.4 setup.py install\n    Running from numpy source directory.\n    Appending numpy.distutils.command configuration to numpy.distutils\n    Ignoring attempt to set \'name\' (from \'numpy.distutils\' to \'numpy.distutils.command\')\n    Appending numpy.distutils.fcompiler configuration to numpy.distutils\n    Ignoring attempt to set \'name\' (from \'numpy.distutils\' to \'numpy.distutils.fcompiler\')\n    Appending numpy.distutils configuration to numpy\n    Ignoring attempt to set \'name\' (from \'numpy\' to \'numpy.distutils\')\n    Appending numpy.testing configuration to numpy\n    Ignoring attempt to set \'name\' (from \'numpy\' to \'numpy.testing\')\n    Appending numpy.f2py.lib.parser configuration to numpy.f2py.lib\n    Ignoring attempt to set \'name\' (from \'numpy.f2py.lib\' to \'numpy.f2py.lib.parser\')\n    Appending numpy.f2py.lib configuration to numpy.f2py\n    Ignoring attempt to set \'name\' (from \'numpy.f2py\' to \'numpy.f2py.lib\')\n    F2PY Version 2_3473\n    Appending numpy.f2py configuration to numpy\n    Ignoring attempt to set \'name\' (from \'numpy\' to \'numpy.f2py\')\n    Ignoring attempt to set \'version\' (from None to \'2_3473\')\n    blas_opt_info:\n    blas_mkl_info:\n      libraries mkl,vml,guide not found in /usr/local/src/staff/chimera-build/IRIX-X11/foreign/Python-2.4.3/lib\n      NOT AVAILABLE\n    \n    atlas_blas_threads_info:\n    Setting PTATLAS=ATLAS\n      libraries lapack,blas not found in /usr/local/src/staff/chimera-build/IRIX-X11/foreign/Python-2.4.3/lib\n      NOT AVAILABLE\n    \n    atlas_blas_info:\n      libraries lapack,blas not found in /usr/local/src/staff/chimera-build/IRIX-X11/foreign/Python-2.4.3/lib\n      NOT AVAILABLE\n    \n    /usr/local/src/staff/goddard/chimera/foreign/numpy/numpy-1.0.1/numpy/distutils/system_info.py:1302: UserWarning: \n        Atlas (http://math-atlas.sourceforge.net/) libraries not found.\n        Directories to search for the libraries can be specified in the\n        numpy/distutils/site.cfg file (section [atlas]) or by setting\n        the ATLAS environment variable.\n      warnings.warn(AtlasNotFoundError.__doc__)\n    blas_info:\n      libraries blas not found in /usr/local/src/staff/chimera-build/IRIX-X11/foreign/Python-2.4.3/lib\n      NOT AVAILABLE\n    \n    /usr/local/src/staff/goddard/chimera/foreign/numpy/numpy-1.0.1/numpy/distutils/system_info.py:1311: UserWarning: \n        Blas (http://www.netlib.org/blas/) libraries not found.\n        Directories to search for the libraries can be specified in the\n        numpy/distutils/site.cfg file (section [blas]) or by setting\n        the BLAS environment variable.\n      warnings.warn(BlasNotFoundError.__doc__)\n    blas_src_info:\n      NOT AVAILABLE\n    \n    /usr/local/src/staff/goddard/chimera/foreign/numpy/numpy-1.0.1/numpy/distutils/system_info.py:1314: UserWarning: \n        Blas (http://www.netlib.org/blas/) sources not found.\n        Directories to search for the sources can be specified in the\n        numpy/distutils/site.cfg file (section [blas_src]) or by setting\n        the BLAS_SRC environment variable.\n      warnings.warn(BlasSrcNotFoundError.__doc__)\n      NOT AVAILABLE\n    \n    Appending numpy.core configuration to numpy\n    Ignoring attempt to set \'name\' (from \'numpy\' to \'numpy.core\')\n    Appending numpy.lib configuration to numpy\n    Ignoring attempt to set \'name\' (from \'numpy\' to \'numpy.lib\')\n    Appending numpy.oldnumeric configuration to numpy\n    Ignoring attempt to set \'name\' (from \'numpy\' to \'numpy.oldnumeric\')\n    Appending numpy.numarray configuration to numpy\n    Ignoring attempt to set \'name\' (from \'numpy\' to \'numpy.numarray\')\n    Appending numpy.fft configuration to numpy\n    Ignoring attempt to set \'name\' (from \'numpy\' to \'numpy.fft\')\n    lapack_opt_info:\n    lapack_mkl_info:\n    mkl_info:\n      libraries mkl,vml,guide not found in /usr/local/src/staff/chimera-build/IRIX-X11/foreign/Python-2.4.3/lib\n      NOT AVAILABLE\n    \n      NOT AVAILABLE\n    \n    atlas_threads_info:\n    Setting PTATLAS=ATLAS\n      libraries lapack,blas not found in /usr/local/src/staff/chimera-build/IRIX-X11/foreign/Python-2.4.3/lib\n      libraries lapack_atlas not found in /usr/local/src/staff/chimera-build/IRIX-X11/foreign/Python-2.4.3/lib\n    numpy.distutils.system_info.atlas_threads_info\n      NOT AVAILABLE\n    \n    atlas_info:\n      libraries lapack,blas not found in /usr/local/src/staff/chimera-build/IRIX-X11/foreign/Python-2.4.3/lib\n      libraries lapack_atlas not found in /usr/local/src/staff/chimera-build/IRIX-X11/foreign/Python-2.4.3/lib\n    numpy.distutils.system_info.atlas_info\n      NOT AVAILABLE\n    \n    /usr/local/src/staff/goddard/chimera/foreign/numpy/numpy-1.0.1/numpy/distutils/system_info.py:1211: UserWarning: \n        Atlas (http://math-atlas.sourceforge.net/) libraries not found.\n        Directories to search for the libraries can be specified in the\n        numpy/distutils/site.cfg file (section [atlas]) or by setting\n        the ATLAS environment variable.\n      warnings.warn(AtlasNotFoundError.__doc__)\n    lapack_info:\n      libraries lapack not found in /usr/local/src/staff/chimera-build/IRIX-X11/foreign/Python-2.4.3/lib\n      NOT AVAILABLE\n    \n    /usr/local/src/staff/goddard/chimera/foreign/numpy/numpy-1.0.1/numpy/distutils/system_info.py:1222: UserWarning: \n        Lapack (http://www.netlib.org/lapack/) libraries not found.\n        Directories to search for the libraries can be specified in the\n        numpy/distutils/site.cfg file (section [lapack]) or by setting\n        the LAPACK environment variable.\n      warnings.warn(LapackNotFoundError.__doc__)\n    lapack_src_info:\n      NOT AVAILABLE\n    \n    /usr/local/src/staff/goddard/chimera/foreign/numpy/numpy-1.0.1/numpy/distutils/system_info.py:1225: UserWarning: \n        Lapack (http://www.netlib.org/lapack/) sources not found.\n        Directories to search for the sources can be specified in the\n        numpy/distutils/site.cfg file (section [lapack_src]) or by setting\n        the LAPACK_SRC environment variable.\n      warnings.warn(LapackSrcNotFoundError.__doc__)\n      NOT AVAILABLE\n    \n    Appending numpy.linalg configuration to numpy\n    Ignoring attempt to set \'name\' (from \'numpy\' to \'numpy.linalg\')\n    Appending numpy.random configuration to numpy\n    Ignoring attempt to set \'name\' (from \'numpy\' to \'numpy.random\')\n    Appending numpy configuration to \n    Ignoring attempt to set \'name\' (from \'\' to \'numpy\')\n    running install\n    running build\n    running config_fc\n    running build_src\n    building py_modules sources\n    building extension ""numpy.core.multiarray"" sources\n    Generating build/src.irix64-6.5-2.4/numpy/core/config.h\n    customize MipsFCompiler\n    customize MipsFCompiler\n    customize MipsFCompiler using config\n    C compiler: cc -n32 -OPT:Olimit=0 -DNDEBUG -O\n    \n    compile options: \'-I/usr/local/src/staff/chimera-build/IRIX-X11/foreign/Python-2.4.3/include/python2.4 -Inumpy/core/src -Inumpy/core/include -I/usr/local/src/staff/chimera-build/IRIX-X11/foreign/Python-2.4.3/include/python2.4 -c\'\n    cc: _configtest.c\n    cc -n32 _configtest.o -L/usr/local/src/staff/chimera-build/IRIX-X11/foreign/Python-2.4.3/lib -o _configtest\n    _configtest\n    success!\n    removing: _configtest.c _configtest.o _configtest\n    C compiler: cc -n32 -OPT:Olimit=0 -DNDEBUG -O\n    \n    compile options: \'-Inumpy/core/src -Inumpy/core/include -I/usr/local/src/staff/chimera-build/IRIX-X11/foreign/Python-2.4.3/include/python2.4 -c\'\n    cc: _configtest.c\n    cc -n32 _configtest.o -o _configtest\n    _configtest\n    success!\n    removing: _configtest.c _configtest.o _configtest\n    C compiler: cc -n32 -OPT:Olimit=0 -DNDEBUG -O\n    \n    compile options: \'-Inumpy/core/src -Inumpy/core/include -I/usr/local/src/staff/chimera-build/IRIX-X11/foreign/Python-2.4.3/include/python2.4 -c\'\n    cc: _configtest.c\n    cc-1171 cc: WARNING File = _configtest.c, Line = 4\n      The indicated expression has no effect.\n    \n        expl;\n        ^\n    \n    cc -n32 _configtest.o -o _configtest\n    success!\n    removing: _configtest.c _configtest.o _configtest\n    C compiler: cc -n32 -OPT:Olimit=0 -DNDEBUG -O\n    \n    compile options: \'-Inumpy/core/src -Inumpy/core/include -I/usr/local/src/staff/chimera-build/IRIX-X11/foreign/Python-2.4.3/include/python2.4 -c\'\n    cc: _configtest.c\n    cc-1171 cc: WARNING File = _configtest.c, Line = 4\n      The indicated expression has no effect.\n    \n        expf;\n        ^\n    \n    cc -n32 _configtest.o -o _configtest\n    success!\n    removing: _configtest.c _configtest.o _configtest\n    C compiler: cc -n32 -OPT:Olimit=0 -DNDEBUG -O\n    \n    compile options: \'-Inumpy/core/src -Inumpy/core/include -I/usr/local/src/staff/chimera-build/IRIX-X11/foreign/Python-2.4.3/include/python2.4 -c\'\n    cc: _configtest.c\n    cc-1171 cc: WARNING File = _configtest.c, Line = 4\n      The indicated expression has no effect.\n    \n        log1p;\n        ^\n    \n    cc -n32 _configtest.o -o _configtest\n    success!\n    removing: _configtest.c _configtest.o _configtest\n    C compiler: cc -n32 -OPT:Olimit=0 -DNDEBUG -O\n    \n    compile options: \'-Inumpy/core/src -Inumpy/core/include -I/usr/local/src/staff/chimera-build/IRIX-X11/foreign/Python-2.4.3/include/python2.4 -c\'\n    cc: _configtest.c\n    cc-1171 cc: WARNING File = _configtest.c, Line = 4\n      The indicated expression has no effect.\n    \n        expm1;\n        ^\n    \n    cc -n32 _configtest.o -o _configtest\n    success!\n    removing: _configtest.c _configtest.o _configtest\n    C compiler: cc -n32 -OPT:Olimit=0 -DNDEBUG -O\n    \n    compile options: \'-Inumpy/core/src -Inumpy/core/include -I/usr/local/src/staff/chimera-build/IRIX-X11/foreign/Python-2.4.3/include/python2.4 -c\'\n    cc: _configtest.c\n    cc-1171 cc: WARNING File = _configtest.c, Line = 4\n      The indicated expression has no effect.\n    \n        asinh;\n        ^\n    \n    cc -n32 _configtest.o -o _configtest\n    success!\n    removing: _configtest.c _configtest.o _configtest\n    C compiler: cc -n32 -OPT:Olimit=0 -DNDEBUG -O\n    \n    compile options: \'-Inumpy/core/src -Inumpy/core/include -I/usr/local/src/staff/chimera-build/IRIX-X11/foreign/Python-2.4.3/include/python2.4 -c\'\n    cc: _configtest.c\n    cc-1020 cc: ERROR File = _configtest.c, Line = 4\n      The identifier ""atanhf"" is undefined.\n    \n        atanhf;\n        ^\n    \n    1 error detected in the compilation of ""_configtest.c"".\n    cc-1020 cc: ERROR File = _configtest.c, Line = 4\n      The identifier ""atanhf"" is undefined.\n    \n        atanhf;\n        ^\n    \n    1 error detected in the compilation of ""_configtest.c"".\n    failure.\n    removing: _configtest.c _configtest.o\n    C compiler: cc -n32 -OPT:Olimit=0 -DNDEBUG -O\n    \n    compile options: \'-Inumpy/core/src -Inumpy/core/include -I/usr/local/src/staff/chimera-build/IRIX-X11/foreign/Python-2.4.3/include/python2.4 -c\'\n    cc: _configtest.c\n    cc-1020 cc: ERROR File = _configtest.c, Line = 4\n      The identifier ""atanhl"" is undefined.\n    \n        atanhl;\n        ^\n    \n    1 error detected in the compilation of ""_configtest.c"".\n    cc-1020 cc: ERROR File = _configtest.c, Line = 4\n      The identifier ""atanhl"" is undefined.\n    \n        atanhl;\n        ^\n    \n    1 error detected in the compilation of ""_configtest.c"".\n    failure.\n    removing: _configtest.c _configtest.o\n    C compiler: cc -n32 -OPT:Olimit=0 -DNDEBUG -O\n    \n    compile options: \'-Inumpy/core/src -Inumpy/core/include -I/usr/local/src/staff/chimera-build/IRIX-X11/foreign/Python-2.4.3/include/python2.4 -c\'\n    cc: _configtest.c\n    cc-1171 cc: WARNING File = _configtest.c, Line = 4\n      The indicated expression has no effect.\n    \n        isnan;\n        ^\n    \n    cc -n32 _configtest.o -o _configtest\n    success!\n    removing: _configtest.c _configtest.o _configtest\n    C compiler: cc -n32 -OPT:Olimit=0 -DNDEBUG -O\n    \n    compile options: \'-Inumpy/core/src -Inumpy/core/include -I/usr/local/src/staff/chimera-build/IRIX-X11/foreign/Python-2.4.3/include/python2.4 -c\'\n    cc: _configtest.c\n    cc-1020 cc: ERROR File = _configtest.c, Line = 4\n      The identifier ""isinf"" is undefined.\n    \n        isinf;\n        ^\n    \n    1 error detected in the compilation of ""_configtest.c"".\n    cc-1020 cc: ERROR File = _configtest.c, Line = 4\n      The identifier ""isinf"" is undefined.\n    \n        isinf;\n        ^\n    \n    1 error detected in the compilation of ""_configtest.c"".\n    failure.\n    removing: _configtest.c _configtest.o\n    C compiler: cc -n32 -OPT:Olimit=0 -DNDEBUG -O\n    \n    compile options: \'-Inumpy/core/src -Inumpy/core/include -I/usr/local/src/staff/chimera-build/IRIX-X11/foreign/Python-2.4.3/include/python2.4 -c\'\n    cc: _configtest.c\n    cc-1171 cc: WARNING File = _configtest.c, Line = 4\n      The indicated expression has no effect.\n    \n        rint;\n        ^\n    \n    cc -n32 _configtest.o -o _configtest\n    success!\n    removing: _configtest.c _configtest.o _configtest\n      adding \'build/src.irix64-6.5-2.4/numpy/core/config.h\' to sources.\n    executing numpy/core/code_generators/generate_array_api.py\n      adding \'build/src.irix64-6.5-2.4/numpy/core/__multiarray_api.h\' to sources.\n    creating build/src.irix64-6.5-2.4/numpy/core/src\n    conv_template:> build/src.irix64-6.5-2.4/numpy/core/src/scalartypes.inc\n      adding \'build/src.irix64-6.5-2.4/numpy/core/src\' to include_dirs.\n    conv_template:> build/src.irix64-6.5-2.4/numpy/core/src/arraytypes.inc\n    numpy.core - nothing done with h_files= [\'build/src.irix64-6.5-2.4/numpy/core/src/scalartypes.inc\', \'build/src.irix64-6.5-2.4/numpy/core/src/arraytypes.inc\', \'build/src.irix64-6.5-2.4/numpy/core/config.h\', \'build/src.irix64-6.5-2.4/numpy/core/__multiarray_api.h\']\n    building extension ""numpy.core.umath"" sources\n      adding \'build/src.irix64-6.5-2.4/numpy/core/config.h\' to sources.\n    executing numpy/core/code_generators/generate_ufunc_api.py\n      adding \'build/src.irix64-6.5-2.4/numpy/core/__ufunc_api.h\' to sources.\n    conv_template:> build/src.irix64-6.5-2.4/numpy/core/src/umathmodule.c\n      adding \'build/src.irix64-6.5-2.4/numpy/core/src\' to include_dirs.\n    numpy.core - nothing done with h_files= [\'build/src.irix64-6.5-2.4/numpy/core/src/scalartypes.inc\', \'build/src.irix64-6.5-2.4/numpy/core/src/arraytypes.inc\', \'build/src.irix64-6.5-2.4/numpy/core/config.h\', \'build/src.irix64-6.5-2.4/numpy/core/__ufunc_api.h\']\n    building extension ""numpy.core._sort"" sources\n      adding \'build/src.irix64-6.5-2.4/numpy/core/config.h\' to sources.\n    executing numpy/core/code_generators/generate_array_api.py\n      adding \'build/src.irix64-6.5-2.4/numpy/core/__multiarray_api.h\' to sources.\n    conv_template:> build/src.irix64-6.5-2.4/numpy/core/src/_sortmodule.c\n    numpy.core - nothing done with h_files= [\'build/src.irix64-6.5-2.4/numpy/core/config.h\', \'build/src.irix64-6.5-2.4/numpy/core/__multiarray_api.h\']\n    building extension ""numpy.core.scalarmath"" sources\n      adding \'build/src.irix64-6.5-2.4/numpy/core/config.h\' to sources.\n    executing numpy/core/code_generators/generate_array_api.py\n      adding \'build/src.irix64-6.5-2.4/numpy/core/__multiarray_api.h\' to sources.\n    executing numpy/core/code_generators/generate_ufunc_api.py\n      adding \'build/src.irix64-6.5-2.4/numpy/core/__ufunc_api.h\' to sources.\n    conv_template:> build/src.irix64-6.5-2.4/numpy/core/src/scalarmathmodule.c\n    numpy.core - nothing done with h_files= [\'build/src.irix64-6.5-2.4/numpy/core/config.h\', \'build/src.irix64-6.5-2.4/numpy/core/__multiarray_api.h\', \'build/src.irix64-6.5-2.4/numpy/core/__ufunc_api.h\']\n    building extension ""numpy.core._dotblas"" sources\n    building extension ""numpy.lib._compiled_base"" sources\n    building extension ""numpy.numarray._capi"" sources\n    building extension ""numpy.fft.fftpack_lite"" sources\n    building extension ""numpy.linalg.lapack_lite"" sources\n    creating build/src.irix64-6.5-2.4/numpy/linalg\n    ### Warning:  Using unoptimized lapack ###\n      adding \'numpy/linalg/lapack_litemodule.c\' to sources.\n      adding \'numpy/linalg/zlapack_lite.c\' to sources.\n      adding \'numpy/linalg/dlapack_lite.c\' to sources.\n      adding \'numpy/linalg/blas_lite.c\' to sources.\n      adding \'numpy/linalg/dlamch.c\' to sources.\n      adding \'numpy/linalg/f2c_lite.c\' to sources.\n    building extension ""numpy.random.mtrand"" sources\n    creating build/src.irix64-6.5-2.4/numpy/random\n    C compiler: cc -n32 -OPT:Olimit=0 -DNDEBUG -O\n    \n    compile options: \'-Inumpy/core/src -Inumpy/core/include -I/usr/local/src/staff/chimera-build/IRIX-X11/foreign/Python-2.4.3/include/python2.4 -c\'\n    cc: _configtest.c\n    cc-1035 cc: WARNING File = _configtest.c, Line = 7\n      #error directive:  No _WIN32\n    \n      #error No _WIN32\n       ^\n    \n    cc -n32 _configtest.o -o _configtest\n    _configtest\n    failure.\n    removing: _configtest.c _configtest.o _configtest\n    building data_files sources\n    running build_py\n    creating build/lib.irix64-6.5-2.4\n    creating build/lib.irix64-6.5-2.4/numpy\n    copying numpy/__init__.py -> build/lib.irix64-6.5-2.4/numpy\n    copying numpy/_import_tools.py -> build/lib.irix64-6.5-2.4/numpy\n    copying numpy/add_newdocs.py -> build/lib.irix64-6.5-2.4/numpy\n    copying numpy/ctypeslib.py -> build/lib.irix64-6.5-2.4/numpy\n    copying numpy/dual.py -> build/lib.irix64-6.5-2.4/numpy\n    copying numpy/matlib.py -> build/lib.irix64-6.5-2.4/numpy\n    copying numpy/setup.py -> build/lib.irix64-6.5-2.4/numpy\n    copying numpy/version.py -> build/lib.irix64-6.5-2.4/numpy\n    copying build/src.irix64-6.5-2.4/numpy/__config__.py -> build/lib.irix64-6.5-2.4/numpy\n    creating build/lib.irix64-6.5-2.4/numpy/distutils\n    copying numpy/distutils/__init__.py -> build/lib.irix64-6.5-2.4/numpy/distutils\n    copying numpy/distutils/__version__.py -> build/lib.irix64-6.5-2.4/numpy/distutils\n    copying numpy/distutils/ccompiler.py -> build/lib.irix64-6.5-2.4/numpy/distutils\n    copying numpy/distutils/conv_template.py -> build/lib.irix64-6.5-2.4/numpy/distutils\n    copying numpy/distutils/core.py -> build/lib.irix64-6.5-2.4/numpy/distutils\n    copying numpy/distutils/cpuinfo.py -> build/lib.irix64-6.5-2.4/numpy/distutils\n    copying numpy/distutils/exec_command.py -> build/lib.irix64-6.5-2.4/numpy/distutils\n    copying numpy/distutils/extension.py -> build/lib.irix64-6.5-2.4/numpy/distutils\n    copying numpy/distutils/from_template.py -> build/lib.irix64-6.5-2.4/numpy/distutils\n    copying numpy/distutils/info.py -> build/lib.irix64-6.5-2.4/numpy/distutils\n    copying numpy/distutils/intelccompiler.py -> build/lib.irix64-6.5-2.4/numpy/distutils\n    copying numpy/distutils/interactive.py -> build/lib.irix64-6.5-2.4/numpy/distutils\n    copying numpy/distutils/log.py -> build/lib.irix64-6.5-2.4/numpy/distutils\n    copying numpy/distutils/lib2def.py -> build/lib.irix64-6.5-2.4/numpy/distutils\n    copying numpy/distutils/line_endings.py -> build/lib.irix64-6.5-2.4/numpy/distutils\n    copying numpy/distutils/mingw32ccompiler.py -> build/lib.irix64-6.5-2.4/numpy/distutils\n    copying numpy/distutils/misc_util.py -> build/lib.irix64-6.5-2.4/numpy/distutils\n    copying numpy/distutils/setup.py -> build/lib.irix64-6.5-2.4/numpy/distutils\n    copying numpy/distutils/system_info.py -> build/lib.irix64-6.5-2.4/numpy/distutils\n    copying numpy/distutils/unixccompiler.py -> build/lib.irix64-6.5-2.4/numpy/distutils\n    copying build/src.irix64-6.5-2.4/numpy/distutils/__config__.py -> build/lib.irix64-6.5-2.4/numpy/distutils\n    creating build/lib.irix64-6.5-2.4/numpy/distutils/command\n    copying numpy/distutils/command/__init__.py -> build/lib.irix64-6.5-2.4/numpy/distutils/command\n    copying numpy/distutils/command/bdist_rpm.py -> build/lib.irix64-6.5-2.4/numpy/distutils/command\n    copying numpy/distutils/command/build.py -> build/lib.irix64-6.5-2.4/numpy/distutils/command\n    copying numpy/distutils/command/build_clib.py -> build/lib.irix64-6.5-2.4/numpy/distutils/command\n    copying numpy/distutils/command/build_ext.py -> build/lib.irix64-6.5-2.4/numpy/distutils/command\n    copying numpy/distutils/command/build_py.py -> build/lib.irix64-6.5-2.4/numpy/distutils/command\n    copying numpy/distutils/command/build_scripts.py -> build/lib.irix64-6.5-2.4/numpy/distutils/command\n    copying numpy/distutils/command/build_src.py -> build/lib.irix64-6.5-2.4/numpy/distutils/command\n    copying numpy/distutils/command/config.py -> build/lib.irix64-6.5-2.4/numpy/distutils/command\n    copying numpy/distutils/command/config_compiler.py -> build/lib.irix64-6.5-2.4/numpy/distutils/command\n    copying numpy/distutils/command/egg_info.py -> build/lib.irix64-6.5-2.4/numpy/distutils/command\n    copying numpy/distutils/command/install.py -> build/lib.irix64-6.5-2.4/numpy/distutils/command\n    copying numpy/distutils/command/install_data.py -> build/lib.irix64-6.5-2.4/numpy/distutils/command\n    copying numpy/distutils/command/install_headers.py -> build/lib.irix64-6.5-2.4/numpy/distutils/command\n    copying numpy/distutils/command/sdist.py -> build/lib.irix64-6.5-2.4/numpy/distutils/command\n    creating build/lib.irix64-6.5-2.4/numpy/distutils/fcompiler\n    copying numpy/distutils/fcompiler/__init__.py -> build/lib.irix64-6.5-2.4/numpy/distutils/fcompiler\n    copying numpy/distutils/fcompiler/absoft.py -> build/lib.irix64-6.5-2.4/numpy/distutils/fcompiler\n    copying numpy/distutils/fcompiler/compaq.py -> build/lib.irix64-6.5-2.4/numpy/distutils/fcompiler\n    copying numpy/distutils/fcompiler/g95.py -> build/lib.irix64-6.5-2.4/numpy/distutils/fcompiler\n    copying numpy/distutils/fcompiler/gnu.py -> build/lib.irix64-6.5-2.4/numpy/distutils/fcompiler\n    copying numpy/distutils/fcompiler/hpux.py -> build/lib.irix64-6.5-2.4/numpy/distutils/fcompiler\n    copying numpy/distutils/fcompiler/ibm.py -> build/lib.irix64-6.5-2.4/numpy/distutils/fcompiler\n    copying numpy/distutils/fcompiler/intel.py -> build/lib.irix64-6.5-2.4/numpy/distutils/fcompiler\n    copying numpy/distutils/fcompiler/lahey.py -> build/lib.irix64-6.5-2.4/numpy/distutils/fcompiler\n    copying numpy/distutils/fcompiler/mips.py -> build/lib.irix64-6.5-2.4/numpy/distutils/fcompiler\n    copying numpy/distutils/fcompiler/nag.py -> build/lib.irix64-6.5-2.4/numpy/distutils/fcompiler\n    copying numpy/distutils/fcompiler/none.py -> build/lib.irix64-6.5-2.4/numpy/distutils/fcompiler\n    copying numpy/distutils/fcompiler/pg.py -> build/lib.irix64-6.5-2.4/numpy/distutils/fcompiler\n    copying numpy/distutils/fcompiler/sun.py -> build/lib.irix64-6.5-2.4/numpy/distutils/fcompiler\n    copying numpy/distutils/fcompiler/vast.py -> build/lib.irix64-6.5-2.4/numpy/distutils/fcompiler\n    creating build/lib.irix64-6.5-2.4/numpy/testing\n    copying numpy/testing/__init__.py -> build/lib.irix64-6.5-2.4/numpy/testing\n    copying numpy/testing/info.py -> build/lib.irix64-6.5-2.4/numpy/testing\n    copying numpy/testing/numpytest.py -> build/lib.irix64-6.5-2.4/numpy/testing\n    copying numpy/testing/setup.py -> build/lib.irix64-6.5-2.4/numpy/testing\n    copying numpy/testing/utils.py -> build/lib.irix64-6.5-2.4/numpy/testing\n    creating build/lib.irix64-6.5-2.4/numpy/f2py\n    copying numpy/f2py/__init__.py -> build/lib.irix64-6.5-2.4/numpy/f2py\n    copying numpy/f2py/__svn_version__.py -> build/lib.irix64-6.5-2.4/numpy/f2py\n    copying numpy/f2py/__version__.py -> build/lib.irix64-6.5-2.4/numpy/f2py\n    copying numpy/f2py/auxfuncs.py -> build/lib.irix64-6.5-2.4/numpy/f2py\n    copying numpy/f2py/capi_maps.py -> build/lib.irix64-6.5-2.4/numpy/f2py\n    copying numpy/f2py/cb_rules.py -> build/lib.irix64-6.5-2.4/numpy/f2py\n    copying numpy/f2py/cfuncs.py -> build/lib.irix64-6.5-2.4/numpy/f2py\n    copying numpy/f2py/common_rules.py -> build/lib.irix64-6.5-2.4/numpy/f2py\n    copying numpy/f2py/crackfortran.py -> build/lib.irix64-6.5-2.4/numpy/f2py\n    copying numpy/f2py/diagnose.py -> build/lib.irix64-6.5-2.4/numpy/f2py\n    copying numpy/f2py/f2py2e.py -> build/lib.irix64-6.5-2.4/numpy/f2py\n    copying numpy/f2py/f2py_testing.py -> build/lib.irix64-6.5-2.4/numpy/f2py\n    copying numpy/f2py/f90mod_rules.py -> build/lib.irix64-6.5-2.4/numpy/f2py\n    copying numpy/f2py/func2subr.py -> build/lib.irix64-6.5-2.4/numpy/f2py\n    copying numpy/f2py/info.py -> build/lib.irix64-6.5-2.4/numpy/f2py\n    copying numpy/f2py/rules.py -> build/lib.irix64-6.5-2.4/numpy/f2py\n    copying numpy/f2py/setup.py -> build/lib.irix64-6.5-2.4/numpy/f2py\n    copying numpy/f2py/use_rules.py -> build/lib.irix64-6.5-2.4/numpy/f2py\n    creating build/lib.irix64-6.5-2.4/numpy/f2py/lib\n    copying numpy/f2py/lib/__init__.py -> build/lib.irix64-6.5-2.4/numpy/f2py/lib\n    copying numpy/f2py/lib/api.py -> build/lib.irix64-6.5-2.4/numpy/f2py/lib\n    copying numpy/f2py/lib/main.py -> build/lib.irix64-6.5-2.4/numpy/f2py/lib\n    copying numpy/f2py/lib/py_wrap.py -> build/lib.irix64-6.5-2.4/numpy/f2py/lib\n    copying numpy/f2py/lib/py_wrap_subprogram.py -> build/lib.irix64-6.5-2.4/numpy/f2py/lib\n    copying numpy/f2py/lib/py_wrap_type.py -> build/lib.irix64-6.5-2.4/numpy/f2py/lib\n    copying numpy/f2py/lib/setup.py -> build/lib.irix64-6.5-2.4/numpy/f2py/lib\n    copying numpy/f2py/lib/test_derived_scalar.py -> build/lib.irix64-6.5-2.4/numpy/f2py/lib\n    copying numpy/f2py/lib/test_module_module.py -> build/lib.irix64-6.5-2.4/numpy/f2py/lib\n    copying numpy/f2py/lib/test_module_scalar.py -> build/lib.irix64-6.5-2.4/numpy/f2py/lib\n    copying numpy/f2py/lib/test_scalar_function_in.py -> build/lib.irix64-6.5-2.4/numpy/f2py/lib\n    copying numpy/f2py/lib/test_scalar_in_out.py -> build/lib.irix64-6.5-2.4/numpy/f2py/lib\n    copying numpy/f2py/lib/wrapper_base.py -> build/lib.irix64-6.5-2.4/numpy/f2py/lib\n    creating build/lib.irix64-6.5-2.4/numpy/f2py/lib/parser\n    copying numpy/f2py/lib/parser/Fortran2003.py -> build/lib.irix64-6.5-2.4/numpy/f2py/lib/parser\n    copying numpy/f2py/lib/parser/__init__.py -> build/lib.irix64-6.5-2.4/numpy/f2py/lib/parser\n    copying numpy/f2py/lib/parser/api.py -> build/lib.irix64-6.5-2.4/numpy/f2py/lib/parser\n    copying numpy/f2py/lib/parser/base_classes.py -> build/lib.irix64-6.5-2.4/numpy/f2py/lib/parser\n    copying numpy/f2py/lib/parser/block_statements.py -> build/lib.irix64-6.5-2.4/numpy/f2py/lib/parser\n    copying numpy/f2py/lib/parser/parsefortran.py -> build/lib.irix64-6.5-2.4/numpy/f2py/lib/parser\n    copying numpy/f2py/lib/parser/pattern_tools.py -> build/lib.irix64-6.5-2.4/numpy/f2py/lib/parser\n    copying numpy/f2py/lib/parser/readfortran.py -> build/lib.irix64-6.5-2.4/numpy/f2py/lib/parser\n    copying numpy/f2py/lib/parser/sourceinfo.py -> build/lib.irix64-6.5-2.4/numpy/f2py/lib/parser\n    copying numpy/f2py/lib/parser/splitline.py -> build/lib.irix64-6.5-2.4/numpy/f2py/lib/parser\n    copying numpy/f2py/lib/parser/statements.py -> build/lib.irix64-6.5-2.4/numpy/f2py/lib/parser\n    copying numpy/f2py/lib/parser/test_Fortran2003.py -> build/lib.irix64-6.5-2.4/numpy/f2py/lib/parser\n    copying numpy/f2py/lib/parser/test_parser.py -> build/lib.irix64-6.5-2.4/numpy/f2py/lib/parser\n    copying numpy/f2py/lib/parser/utils.py -> build/lib.irix64-6.5-2.4/numpy/f2py/lib/parser\n    copying numpy/f2py/lib/parser/typedecl_statements.py -> build/lib.irix64-6.5-2.4/numpy/f2py/lib/parser\n    creating build/lib.irix64-6.5-2.4/numpy/core\n    copying numpy/core/__init__.py -> build/lib.irix64-6.5-2.4/numpy/core\n    copying numpy/core/__svn_version__.py -> build/lib.irix64-6.5-2.4/numpy/core\n    copying numpy/core/_internal.py -> build/lib.irix64-6.5-2.4/numpy/core\n    copying numpy/core/arrayprint.py -> build/lib.irix64-6.5-2.4/numpy/core\n    copying numpy/core/defchararray.py -> build/lib.irix64-6.5-2.4/numpy/core\n    copying numpy/core/defmatrix.py -> build/lib.irix64-6.5-2.4/numpy/core\n    copying numpy/core/fromnumeric.py -> build/lib.irix64-6.5-2.4/numpy/core\n    copying numpy/core/info.py -> build/lib.irix64-6.5-2.4/numpy/core\n    copying numpy/core/ma.py -> build/lib.irix64-6.5-2.4/numpy/core\n    copying numpy/core/memmap.py -> build/lib.irix64-6.5-2.4/numpy/core\n    copying numpy/core/numeric.py -> build/lib.irix64-6.5-2.4/numpy/core\n    copying numpy/core/numerictypes.py -> build/lib.irix64-6.5-2.4/numpy/core\n    copying numpy/core/records.py -> build/lib.irix64-6.5-2.4/numpy/core\n    copying numpy/core/setup.py -> build/lib.irix64-6.5-2.4/numpy/core\n    copying numpy/core/code_generators/generate_array_api.py -> build/lib.irix64-6.5-2.4/numpy/core\n    creating build/lib.irix64-6.5-2.4/numpy/lib\n    copying numpy/lib/__init__.py -> build/lib.irix64-6.5-2.4/numpy/lib\n    copying numpy/lib/arraysetops.py -> build/lib.irix64-6.5-2.4/numpy/lib\n    copying numpy/lib/convdtype.py -> build/lib.irix64-6.5-2.4/numpy/lib\n    copying numpy/lib/function_base.py -> build/lib.irix64-6.5-2.4/numpy/lib\n    copying numpy/lib/getlimits.py -> build/lib.irix64-6.5-2.4/numpy/lib\n    copying numpy/lib/index_tricks.py -> build/lib.irix64-6.5-2.4/numpy/lib\n    copying numpy/lib/info.py -> build/lib.irix64-6.5-2.4/numpy/lib\n    copying numpy/lib/machar.py -> build/lib.irix64-6.5-2.4/numpy/lib\n    copying numpy/lib/polynomial.py -> build/lib.irix64-6.5-2.4/numpy/lib\n    copying numpy/lib/scimath.py -> build/lib.irix64-6.5-2.4/numpy/lib\n    copying numpy/lib/setup.py -> build/lib.irix64-6.5-2.4/numpy/lib\n    copying numpy/lib/shape_base.py -> build/lib.irix64-6.5-2.4/numpy/lib\n    copying numpy/lib/twodim_base.py -> build/lib.irix64-6.5-2.4/numpy/lib\n    copying numpy/lib/type_check.py -> build/lib.irix64-6.5-2.4/numpy/lib\n    copying numpy/lib/ufunclike.py -> build/lib.irix64-6.5-2.4/numpy/lib\n    copying numpy/lib/user_array.py -> build/lib.irix64-6.5-2.4/numpy/lib\n    copying numpy/lib/utils.py -> build/lib.irix64-6.5-2.4/numpy/lib\n    creating build/lib.irix64-6.5-2.4/numpy/oldnumeric\n    copying numpy/oldnumeric/__init__.py -> build/lib.irix64-6.5-2.4/numpy/oldnumeric\n    copying numpy/oldnumeric/alter_code1.py -> build/lib.irix64-6.5-2.4/numpy/oldnumeric\n    copying numpy/oldnumeric/alter_code2.py -> build/lib.irix64-6.5-2.4/numpy/oldnumeric\n    copying numpy/oldnumeric/array_printer.py -> build/lib.irix64-6.5-2.4/numpy/oldnumeric\n    copying numpy/oldnumeric/compat.py -> build/lib.irix64-6.5-2.4/numpy/oldnumeric\n    copying numpy/oldnumeric/fft.py -> build/lib.irix64-6.5-2.4/numpy/oldnumeric\n    copying numpy/oldnumeric/fix_default_axis.py -> build/lib.irix64-6.5-2.4/numpy/oldnumeric\n    copying numpy/oldnumeric/functions.py -> build/lib.irix64-6.5-2.4/numpy/oldnumeric\n    copying numpy/oldnumeric/linear_algebra.py -> build/lib.irix64-6.5-2.4/numpy/oldnumeric\n    copying numpy/oldnumeric/ma.py -> build/lib.irix64-6.5-2.4/numpy/oldnumeric\n    copying numpy/oldnumeric/matrix.py -> build/lib.irix64-6.5-2.4/numpy/oldnumeric\n    copying numpy/oldnumeric/misc.py -> build/lib.irix64-6.5-2.4/numpy/oldnumeric\n    copying numpy/oldnumeric/mlab.py -> build/lib.irix64-6.5-2.4/numpy/oldnumeric\n    copying numpy/oldnumeric/precision.py -> build/lib.irix64-6.5-2.4/numpy/oldnumeric\n    copying numpy/oldnumeric/random_array.py -> build/lib.irix64-6.5-2.4/numpy/oldnumeric\n    copying numpy/oldnumeric/rng.py -> build/lib.irix64-6.5-2.4/numpy/oldnumeric\n    copying numpy/oldnumeric/rng_stats.py -> build/lib.irix64-6.5-2.4/numpy/oldnumeric\n    copying numpy/oldnumeric/setup.py -> build/lib.irix64-6.5-2.4/numpy/oldnumeric\n    copying numpy/oldnumeric/typeconv.py -> build/lib.irix64-6.5-2.4/numpy/oldnumeric\n    copying numpy/oldnumeric/ufuncs.py -> build/lib.irix64-6.5-2.4/numpy/oldnumeric\n    copying numpy/oldnumeric/user_array.py -> build/lib.irix64-6.5-2.4/numpy/oldnumeric\n    creating build/lib.irix64-6.5-2.4/numpy/numarray\n    copying numpy/numarray/__init__.py -> build/lib.irix64-6.5-2.4/numpy/numarray\n    copying numpy/numarray/alter_code1.py -> build/lib.irix64-6.5-2.4/numpy/numarray\n    copying numpy/numarray/alter_code2.py -> build/lib.irix64-6.5-2.4/numpy/numarray\n    copying numpy/numarray/compat.py -> build/lib.irix64-6.5-2.4/numpy/numarray\n    copying numpy/numarray/convolve.py -> build/lib.irix64-6.5-2.4/numpy/numarray\n    copying numpy/numarray/fft.py -> build/lib.irix64-6.5-2.4/numpy/numarray\n    copying numpy/numarray/functions.py -> build/lib.irix64-6.5-2.4/numpy/numarray\n    copying numpy/numarray/image.py -> build/lib.irix64-6.5-2.4/numpy/numarray\n    copying numpy/numarray/linear_algebra.py -> build/lib.irix64-6.5-2.4/numpy/numarray\n    copying numpy/numarray/ma.py -> build/lib.irix64-6.5-2.4/numpy/numarray\n    copying numpy/numarray/matrix.py -> build/lib.irix64-6.5-2.4/numpy/numarray\n    copying numpy/numarray/mlab.py -> build/lib.irix64-6.5-2.4/numpy/numarray\n    copying numpy/numarray/nd_image.py -> build/lib.irix64-6.5-2.4/numpy/numarray\n    copying numpy/numarray/numerictypes.py -> build/lib.irix64-6.5-2.4/numpy/numarray\n    copying numpy/numarray/random_array.py -> build/lib.irix64-6.5-2.4/numpy/numarray\n    copying numpy/numarray/session.py -> build/lib.irix64-6.5-2.4/numpy/numarray\n    copying numpy/numarray/setup.py -> build/lib.irix64-6.5-2.4/numpy/numarray\n    copying numpy/numarray/ufuncs.py -> build/lib.irix64-6.5-2.4/numpy/numarray\n    copying numpy/numarray/util.py -> build/lib.irix64-6.5-2.4/numpy/numarray\n    creating build/lib.irix64-6.5-2.4/numpy/fft\n    copying numpy/fft/__init__.py -> build/lib.irix64-6.5-2.4/numpy/fft\n    copying numpy/fft/fftpack.py -> build/lib.irix64-6.5-2.4/numpy/fft\n    copying numpy/fft/helper.py -> build/lib.irix64-6.5-2.4/numpy/fft\n    copying numpy/fft/info.py -> build/lib.irix64-6.5-2.4/numpy/fft\n    copying numpy/fft/setup.py -> build/lib.irix64-6.5-2.4/numpy/fft\n    creating build/lib.irix64-6.5-2.4/numpy/linalg\n    copying numpy/linalg/__init__.py -> build/lib.irix64-6.5-2.4/numpy/linalg\n    copying numpy/linalg/info.py -> build/lib.irix64-6.5-2.4/numpy/linalg\n    copying numpy/linalg/linalg.py -> build/lib.irix64-6.5-2.4/numpy/linalg\n    copying numpy/linalg/setup.py -> build/lib.irix64-6.5-2.4/numpy/linalg\n    creating build/lib.irix64-6.5-2.4/numpy/random\n    copying numpy/random/__init__.py -> build/lib.irix64-6.5-2.4/numpy/random\n    copying numpy/random/info.py -> build/lib.irix64-6.5-2.4/numpy/random\n    copying numpy/random/setup.py -> build/lib.irix64-6.5-2.4/numpy/random\n    running build_ext\n    customize UnixCCompiler\n    customize UnixCCompiler using build_ext\n    building \'numpy.core.multiarray\' extension\n    compiling C sources\n    C compiler: cc -n32 -OPT:Olimit=0 -DNDEBUG -O\n    \n    creating build/temp.irix64-6.5-2.4\n    creating build/temp.irix64-6.5-2.4/numpy\n    creating build/temp.irix64-6.5-2.4/numpy/core\n    creating build/temp.irix64-6.5-2.4/numpy/core/src\n    compile options: \'-Ibuild/src.irix64-6.5-2.4/numpy/core/src -Inumpy/core/include -Ibuild/src.irix64-6.5-2.4/numpy/core -Inumpy/core/src -Inumpy/core/include -I/usr/local/src/staff/chimera-build/IRIX-X11/foreign/Python-2.4.3/include/python2.4 -c\'\n    cc: numpy/core/src/multiarraymodule.c\n    cc-1552 cc: WARNING File = numpy/core/src/scalartypes.inc.src, Line = 1123\n      The variable ""numbytes"" is set but never used.\n    \n                      int numbytes;\n                          ^\n    \n    cc-1178 cc: WARNING File = numpy/core/src/arraytypes.inc.src, Line = 885\n      Argument is incompatible with the corresponding format string conversion.\n    \n              num = fscanf(fp, ""%""LONGLONG_FMT, ip);\n                                                ^\n    \n    cc-1178 cc: WARNING File = numpy/core/src/arraytypes.inc.src, Line = 885\n      Argument is incompatible with the corresponding format string conversion.\n    \n              num = fscanf(fp, ""%""ULONGLONG_FMT, ip);\n                                                 ^\n    \n    cc-1185 cc: WARNING File = numpy/core/src/arrayobject.c, Line = 1279\n      An enumerated type is mixed with another type.\n    \n                      fortran = PyArray_ISFORTRAN(m1);\n                              ^\n    \n    cc-1185 cc: WARNING File = numpy/core/src/arrayobject.c, Line = 1853\n      An enumerated type is mixed with another type.\n    \n                      order = PyArray_ISFORTRAN(self);\n                            ^\n    \n    cc-1515 cc: WARNING File = numpy/core/src/arrayobject.c, Line = 4433\n      A value of type ""void *"" cannot be assigned to an entity of type\n              ""int (*)(void *, void *, int, int)"".\n    \n              cmpfunc = func;\n                      ^\n    \n    cc-1185 cc: WARNING File = numpy/core/src/arrayobject.c, Line = 4792\n      An enumerated type is mixed with another type.\n    \n                              temp1 = PyArray_Ravel(arr,0);\n                                                        ^\n    \n    cc-1185 cc: WARNING File = numpy/core/src/arraymethods.c, Line = 364\n      An enumerated type is mixed with another type.\n    \n      \t\tif ((ret = (PyArrayObject *)PyArray_NewCopy(self,-1)) == NULL)\n      \t\t                                                 ^\n    \n    cc-1185 cc: WARNING File = numpy/core/src/arraymethods.c, Line = 654\n      An enumerated type is mixed with another type.\n    \n      \t\tobj = _ARET(PyArray_NewCopy(self,0));\n      \t\t      ^\n    \n    cc-1515 cc: WARNING File = numpy/core/src/arrayobject.c, Line = 5416\n      A value of type ""void *"" cannot be assigned to an entity of type\n              ""PyArray_FinalizeFunc *"".\n    \n                                      cfunc = PyCObject_AsVoidPtr(func);\n                                            ^\n    \n    cc-1515 cc: WARNING File = numpy/core/src/arrayobject.c, Line = 7446\n      A value of type ""void *"" cannot be assigned to an entity of type\n              ""PyArray_VectorUnaryFunc *"".\n    \n                                      castfunc = PyCObject_AsVoidPtr(cobj);\n                                               ^\n    \n    cc-1552 cc: WARNING File = numpy/core/src/arrayobject.c, Line = 9267\n      The variable ""typecode"" is set but never used.\n    \n              PyArray_Descr *typecode;\n                             ^\n    \n    cc-1185 cc: WARNING File = numpy/core/src/arrayobject.c, Line = 9526\n      An enumerated type is mixed with another type.\n    \n              return PyArray_Flatten(it->ao, 0);\n                                             ^\n    \n    cc-1185 cc: WARNING File = numpy/core/src/multiarraymodule.c, Line = 221\n      An enumerated type is mixed with another type.\n    \n      \t\tfortran = PyArray_ISFORTRAN(a);\n      \t\t        ^\n    \n    cc-1185 cc: WARNING File = numpy/core/src/multiarraymodule.c, Line = 381\n      An enumerated type is mixed with another type.\n    \n      \t\torder = PyArray_ISFORTRAN(a);\n      \t\t      ^\n    \n    cc-1185 cc: WARNING File = numpy/core/src/multiarraymodule.c, Line = 632\n      An enumerated type is mixed with another type.\n    \n      \t\tfortran = PyArray_ISFORTRAN(self);\n      \t\t        ^\n    \n    cc-1185 cc: WARNING File = numpy/core/src/multiarraymodule.c, Line = 1156\n      An enumerated type is mixed with another type.\n    \n                      new = PyArray_NewCopy(self, -1);\n                                                  ^\n    \n    cc-1185 cc: WARNING File = numpy/core/src/multiarraymodule.c, Line = 1542\n      An enumerated type is mixed with another type.\n    \n      \t\t\totmp = PyArray_Ravel(mps[i],0);\n      \t\t\t                            ^\n    \n    cc-1185 cc: WARNING File = numpy/core/src/multiarraymodule.c, Line = 1873\n      An enumerated type is mixed with another type.\n    \n      \t\t\tretval = descr->f->scalarkind((arr ? *arr : NULL));\n      \t\t\t       ^\n    \n    ld -n32 -shared -all build/temp.irix64-6.5-2.4/numpy/core/src/multiarraymodule.o -o build/lib.irix64-6.5-2.4/numpy/core/multiarray.so\n    ld32: WARNING 47 : This module (build/temp.irix64-6.5-2.4/numpy/core/src/multiarraymodule.o .text) contains branch instruction(s)\n    \t\t   that might degrade performance on an older version (rev. 2.2) R4000 processor.\n    building \'numpy.core.umath\' extension\n    compiling C sources\n    C compiler: cc -n32 -OPT:Olimit=0 -DNDEBUG -O\n    \n    creating build/temp.irix64-6.5-2.4/build\n    creating build/temp.irix64-6.5-2.4/build/src.irix64-6.5-2.4\n    creating build/temp.irix64-6.5-2.4/build/src.irix64-6.5-2.4/numpy\n    creating build/temp.irix64-6.5-2.4/build/src.irix64-6.5-2.4/numpy/core\n    creating build/temp.irix64-6.5-2.4/build/src.irix64-6.5-2.4/numpy/core/src\n    compile options: \'-Ibuild/src.irix64-6.5-2.4/numpy/core/src -Inumpy/core/include -Ibuild/src.irix64-6.5-2.4/numpy/core -Inumpy/core/src -Inumpy/core/include -I/usr/local/src/staff/chimera-build/IRIX-X11/foreign/Python-2.4.3/include/python2.4 -c\'\n    cc: build/src.irix64-6.5-2.4/numpy/core/src/umathmodule.c\n    cc-1020 cc: ERROR File = build/src.irix64-6.5-2.4/numpy/core/__umath_generated.c, Line = 66\n      The identifier ""expm1l"" is undefined.\n    \n      static void * expm1_data[] = { (void *)expm1f, (void *)expm1, (void *)expm1l, (void *)nc_expm1f, (void *)nc_expm1, (void *)nc_expm1l, (void *)""expm1"" };\n                                                                            ^\n    \n    cc-1041 cc: ERROR File = build/src.irix64-6.5-2.4/numpy/core/__umath_generated.c, Line = 66\n      The indicated expression must have arithmetic or pointer type.\n    \n      static void * expm1_data[] = { (void *)expm1f, (void *)expm1, (void *)expm1l, (void *)nc_expm1f, (void *)nc_expm1, (void *)nc_expm1l, (void *)""expm1"" };\n                                                                            ^\n    \n    cc-1020 cc: ERROR File = build/src.irix64-6.5-2.4/numpy/core/__umath_generated.c, Line = 165\n      The identifier ""rintf"" is undefined.\n    \n      static void * rint_data[] = { (void *)rintf, (void *)rint, (void *)rintl, (void *)nc_rintf, (void *)nc_rint, (void *)nc_rintl, (void *)""rint"" };\n                                            ^\n    \n    cc-1041 cc: ERROR File = build/src.irix64-6.5-2.4/numpy/core/__umath_generated.c, Line = 165\n      The indicated expression must have arithmetic or pointer type.\n    \n      static void * rint_data[] = { (void *)rintf, (void *)rint, (void *)rintl, (void *)nc_rintf, (void *)nc_rint, (void *)nc_rintl, (void *)""rint"" };\n                                            ^\n    \n    cc-1028 cc: ERROR File = numpy/core/src/ufuncobject.c, Line = 2071\n      The expression used must have a constant value.\n    \n              int arg_types[3] = {otype, otype, otype};\n                                  ^\n    \n    cc-1028 cc: ERROR File = numpy/core/src/ufuncobject.c, Line = 2071\n      The expression used must have a constant value.\n    \n              int arg_types[3] = {otype, otype, otype};\n                                         ^\n    \n    cc-1028 cc: ERROR File = numpy/core/src/ufuncobject.c, Line = 2071\n      The expression used must have a constant value.\n    \n              int arg_types[3] = {otype, otype, otype};\n                                                ^\n    \n    7 errors detected in the compilation of ""build/src.irix64-6.5-2.4/numpy/core/src/umathmodule.c"".\n    cc-1020 cc: ERROR File = build/src.irix64-6.5-2.4/numpy/core/__umath_generated.c, Line = 66\n      The identifier ""expm1l"" is undefined.\n    \n      static void * expm1_data[] = { (void *)expm1f, (void *)expm1, (void *)expm1l, (void *)nc_expm1f, (void *)nc_expm1, (void *)nc_expm1l, (void *)""expm1"" };\n                                                                            ^\n    \n    cc-1041 cc: ERROR File = build/src.irix64-6.5-2.4/numpy/core/__umath_generated.c, Line = 66\n      The indicated expression must have arithmetic or pointer type.\n    \n      static void * expm1_data[] = { (void *)expm1f, (void *)expm1, (void *)expm1l, (void *)nc_expm1f, (void *)nc_expm1, (void *)nc_expm1l, (void *)""expm1"" };\n                                                                            ^\n    \n    cc-1020 cc: ERROR File = build/src.irix64-6.5-2.4/numpy/core/__umath_generated.c, Line = 165\n      The identifier ""rintf"" is undefined.\n    \n      static void * rint_data[] = { (void *)rintf, (void *)rint, (void *)rintl, (void *)nc_rintf, (void *)nc_rint, (void *)nc_rintl, (void *)""rint"" };\n                                            ^\n    \n    cc-1041 cc: ERROR File = build/src.irix64-6.5-2.4/numpy/core/__umath_generated.c, Line = 165\n      The indicated expression must have arithmetic or pointer type.\n    \n      static void * rint_data[] = { (void *)rintf, (void *)rint, (void *)rintl, (void *)nc_rintf, (void *)nc_rint, (void *)nc_rintl, (void *)""rint"" };\n                                            ^\n    \n    cc-1028 cc: ERROR File = numpy/core/src/ufuncobject.c, Line = 2071\n      The expression used must have a constant value.\n    \n              int arg_types[3] = {otype, otype, otype};\n                                  ^\n    \n    cc-1028 cc: ERROR File = numpy/core/src/ufuncobject.c, Line = 2071\n      The expression used must have a constant value.\n    \n              int arg_types[3] = {otype, otype, otype};\n                                         ^\n    \n    cc-1028 cc: ERROR File = numpy/core/src/ufuncobject.c, Line = 2071\n      The expression used must have a constant value.\n    \n              int arg_types[3] = {otype, otype, otype};\n                                                ^\n    \n    7 errors detected in the compilation of ""build/src.irix64-6.5-2.4/numpy/core/src/umathmodule.c"".\n    error: Command ""cc -n32 -OPT:Olimit=0 -DNDEBUG -O -Ibuild/src.irix64-6.5-2.4/numpy/core/src -Inumpy/core/include -Ibuild/src.irix64-6.5-2.4/numpy/core -Inumpy/core/src -Inumpy/core/include -I/usr/local/src/staff/chimera-build/IRIX-X11/foreign/Python-2.4.3/include/python2.4 -c build/src.irix64-6.5-2.4/numpy/core/src/umathmodule.c -o build/temp.irix64-6.5-2.4/build/src.irix64-6.5-2.4/numpy/core/src/umathmodule.o"" failed with exit status 2\n\n'"
1014,7725079,numpy-gitbot,numpy-gitbot,2012-10-19 18:50:36,2012-10-19 18:50:38,2012-10-19 18:50:38,closed,,1.6.0,8,11 - Bug;component: numpy.core;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1014,b'The docstrings of functions which take an out= parameter should mention that fact (Trac #416)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/416 on 2007-01-09 by @rkern, assigned to @rkern._\n\nMost of the functions that take an `out` optional argument fail to mention that they do so. Each of them ought to do so.'"
1012,7725075,numpy-gitbot,numpy-gitbot,2012-10-19 18:50:31,2012-10-23 02:36:33,2012-10-19 18:50:32,closed,,,1,11 - Bug;component: numpy.core;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1012,b'bug in reduce for numpy.array (Trac #414)',"b""_Original ticket http://projects.scipy.org/numpy/ticket/414 on 2007-01-08 by trac user lbolla, assigned to unknown._\n\n[[BR]]\nWrong results are given by subtract.reduce and divide.reduce, with respect to the standard function reduce.\nTake a look at this piece of code:\n\n------------------------------------------\nfrom numpy import *\n\nx = arange(4)            # x = array([0,1,2,3])\n\n\n\ndef myadd(x,y):          # re-define the binary sum function\n\n    return x + y\n\n\n\nprint reduce(myadd, x)   # 6, as expected\n\nprint add.reduce(x)      # 6, as expected\n\ndef mysub(x,y):          # re-define the binary diff function\n\n    return x - y\n\n\n\nprint reduce(mysub, x)   # -6, as expected\n\nprint subtract.reduce(x) # 2 ---> WRONG!\n\n------------------------------------------\n\nIt probably depends on the wrong order of the operands in the binary operation subtract or divide. Any non-commutative operation can lead to this problem (and it's worth checking!).\nThis code works correctly if the Numeric package is imported istead of numpy (first row of the snippet)."""
1011,7725071,numpy-gitbot,numpy-gitbot,2012-10-19 18:50:27,2012-10-19 18:50:29,2012-10-19 18:50:29,closed,,,6,11 - Bug;component: numpy.core;priority: high,https://api.github.com/repos/numpy/numpy/issues/1011,b'Reduction with noncommutative ufuncs is broken (Trac #413)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/413 on 2007-01-08 by @rkern, assigned to @teoliphant._\n\n\n\n    In [21]: import numpy\n    \n    In [22]: numpy.subtract.reduce(numpy.arange(5))\n    Out[22]: 2\n    \n    In [23]: import Numeric\n    \n    In [24]: Numeric.subtract.reduce(Numeric.arange(5))\n    Out[24]: -10\n    \n    In [25]: print numpy.__version__\n    1.0.2.dev3493\n    \n    In [26]: print Numeric.__version__\n    24.2\n\n'"
1010,7725066,numpy-gitbot,numpy-gitbot,2012-10-19 18:50:24,2012-10-19 18:50:26,2012-10-19 18:50:26,closed,,,5,11 - Bug;component: numpy.core;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1010,b'segault in numpy.float64(z) for complex z (Trac #412)',"b""_Original ticket http://projects.scipy.org/numpy/ticket/412 on 2007-01-08 by @timleslie, assigned to unknown._\n\nPassing a complex value to N.float or N.int raises a type error as expected.\n\n\n\n    In [1]: import numpy as N\n    \n    In [2]: N.float(2.5 + 2.5j)\n    ---------------------------------------------------------------------------\n    exceptions.TypeError                                 Traceback (most recent call last)\n    \n    /home/timl/src/scipy/Lib/sparse/sparsetools/<ipython console> \n    \n    TypeError: can't convert complex to float; use abs(z)\n\n\n\nPassing to any of int32, int64, float32 or float64 (I havn't tested other types) results in a \nsegfault.\n\n\n\n    In [6]: N.float64(2.5 + 2.5j)\n    Segmentation fault (core dumped)\n\n\n\nThis is with\n\n\n\n    In [2]: numpy.__version__\n    Out[2]: '1.0.2.dev3497'\n\n\n\nAnd crashes on my macbook and also my 64bit linux box."""
1008,7725063,numpy-gitbot,numpy-gitbot,2012-10-19 18:50:20,2012-10-19 18:50:21,2012-10-19 18:50:21,closed,,,5,11 - Bug;component: Other;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1008,b'setmember1d problem (Trac #410)',"b""_Original ticket http://projects.scipy.org/numpy/ticket/410 on 2007-01-02 by trac user curiousjan, assigned to unknown._\n\nPlease see the attached scripts.\nI am simply comparing two arrays, storing items that appear in both lists.\nI do this by\na) storing all items from list 1 that are also in list 2\nb) storing all items from list 2 that are also in list 1\nThe two resulting arrays should be identical, but they are not.\nA simple fix is \n\nsvn diff numpy/lib\n\n\n\n    Index: numpy/lib/arraysetops.py\n    ===================================================================\n    --- numpy/lib/arraysetops.py    (revision 3491)\n    +++ numpy/lib/arraysetops.py    (working copy)\n    @@ -126,7 +126,7 @@\n         zlike = nm.zeros_like\n         ar = nm.concatenate( (ar1, ar2 ) )\n         tt = nm.concatenate( (zlike( ar1 ), zlike( ar2 ) + 1) )\n    -    perm = ar.argsort()\n    +    perm = ar.argsort(kind='mergesort')\n         aux = ar[perm]\n         aux2 = tt[perm]\n     #    flag = ediff1d( aux, 1 ) == 0\n\n"""
1007,7725062,numpy-gitbot,numpy-gitbot,2012-10-19 18:50:18,2012-10-19 18:50:18,2012-10-19 18:50:18,closed,,,2,11 - Bug;component: numpy.testing;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1007,"b""svn trunk build doesn't pass numpy.test() (Trac #409)""","b'_Original ticket http://projects.scipy.org/numpy/ticket/409 on 2006-12-24 by trac user darren.weber, assigned to unknown._\n\n.............................**********************************************************************\nFile\n""/usr/lib/python2.4/site-packages/numpy/lib/tests/test_ufunclike.py"",\nline 20, in test_ufunclike\nFailed example:\n    U.isposinf(a)\nExpected:\n    array([True, False, False, False, False, False], dtype=bool)\nGot:\n    array([ True, False, False, False, False, False], dtype=bool)\n**********************************************************************\n\n\nIt looks like all the array([True],dtype=bool) values are returning\n\n\' True\' instead of \'True\' values.\n'"
1006,7725061,numpy-gitbot,numpy-gitbot,2012-10-19 18:50:16,2012-10-19 18:50:16,2012-10-19 18:50:16,closed,,,1,11 - Bug;component: numpy.core;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1006,b'problem using chararray with argsort() (Trac #408)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/408 on 2006-12-22 by @chanley, assigned to unknown._\n\n\nThe following works with numarray but not numpy.\n\n\n\n    \n    NUMARRAY Example:\n    >>> from numarray import strings as chararray\n    >>> a = chararray.array([\'a\',\'b\',\'c\'])\n    >>> index=a.argsort()\n    >>> print index\n    [0 1 2]\n    >>>\n    \n    NUMPY Example: \n    >>> from numpy import char\n    >>> a = char.array([\'a\',\'b\',\'c\'])\n    >>> index =a.argsort()\n    Traceback (most recent call last):\n      File ""<stdin>"", line 1, in <module>\n      File ""/data/sparty1/dev/site-packages/lib/python/numpy/core/defchararray.py"", line 43, in __array_finalize__\n        raise ValueError, ""Can only create a chararray from string data.""\n    ValueError: Can only create a chararray from string data.\n    >>> \n    >>> import numpy\n    >>> numpy.__version__\n    \'1.0.2.dev3487\'\n    >>> \n\n'"
1005,7725060,numpy-gitbot,numpy-gitbot,2012-10-19 18:50:14,2012-10-19 18:50:14,2012-10-19 18:50:14,closed,,1.0 Release,1,11 - Bug;component: numpy.lib;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1005,b'apply_along_axis fails for ndim>2 arrays (Trac #407)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/407 on 2006-12-22 by trac user user_0901, assigned to unknown._\n\nSorry, I don\'t know how to submit patches and am in a time crunch, or I would....\n\nI first noticed this when trying to use stats.stats.nanmedian (which is broken because of this bug). It fails when the input function returns a scalar for arrays larger than 2dimensions:\n\n\n\n\n    >>> a = numpy.arange(27).reshape((3,3,3))\n    >>> numpy.apply_along_axis(numpy.sum,0,a)\n    array([[45, 45, 45],\n           [48, 48, 48],\n           [51, 51, 51]])\n\n\n\n\n\nHere\'s a fix for this, though. In numpy/lib/shape_base.py, the lines:\n        outarr[ind] = res\nand\n            outarr[ind] = res\nshould have the ""ind"" replaced with ""tuple(ind)"":\n        outarr[tuple(ind)] = res\nand\n            outarr[tuple(ind)] = res\n\nCheers!'"
1004,7725058,numpy-gitbot,numpy-gitbot,2012-10-19 18:50:11,2012-10-19 18:50:12,2012-10-19 18:50:12,closed,,,1,11 - Bug;component: numpy.lib;priority: low,https://api.github.com/repos/numpy/numpy/issues/1004,b'Missing docstring for nan_to_num (Trac #406)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/406 on 2006-12-21 by @nilswagner01, assigned to unknown._\n\nhelp (nan_to_num)\n\n\n\n    Help on function nan_to_num in module numpy.lib.type_check:\n    \n    nan_to_num(x)\n    \n\n\n '"
1003,7725057,numpy-gitbot,numpy-gitbot,2012-10-19 18:50:09,2012-10-19 18:50:10,2012-10-19 18:50:10,closed,,1.0.3 Release,3,11 - Bug;component: Other;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1003,b'nan-functions do not preserve matrix subclass (Trac #405)',"b""_Original ticket http://projects.scipy.org/numpy/ticket/405 on 2006-12-21 by trac user svetosch, assigned to unknown._\n\nKeith reported on the mailing list (sorry don't have latest numpy installed currently to test myself but Keith is usually reliable ...) that the functions nanmin, nanmax, nanargmin, nanargmax, nansum return an array when given a matrix subclass, as opposed to virtually all other numpy functions.\n\n(due to first line being y=array(a))\n-sven"""
1002,7725053,numpy-gitbot,numpy-gitbot,2012-10-19 18:50:07,2012-10-19 18:50:08,2012-10-19 18:50:08,closed,,1.0.3 Release,3,11 - Bug;component: numpy.core;priority: normal,https://api.github.com/repos/numpy/numpy/issues/1002,b'numpy.fromfile on file-like object (Trac #404)',"b""_Original ticket http://projects.scipy.org/numpy/ticket/404 on 2006-12-20 by trac user eisele, assigned to unknown._\n\nI would have expected that the following steps would allow to read an array from \na compressed file:\n\n\n\n    from os import popen\n    import numpy\n    f = popen('zcat movieID.gz')\n    a = numpy.fromfile(f,'int32',-1)\n\n\n\nHowever, I get an array of length 0 and the\nmessage \n\n\n\n    zcat: stdout: Broken pipe\n\n\n\nIs it reasonable to assume that this could be done?\n\nThanks and best regards,\nAndreas\n\n"""
999,7725044,numpy-gitbot,numpy-gitbot,2012-10-19 18:49:55,2012-10-23 02:36:32,2012-10-19 18:49:56,closed,,1.0 Release,2,11 - Bug;component: numpy.core;priority: normal,https://api.github.com/repos/numpy/numpy/issues/999,b'numpy.roots() does not return roots if they are all zero. (Trac #401)',"b""_Original ticket http://projects.scipy.org/numpy/ticket/401 on 2006-12-12 by trac user DaleD, assigned to unknown._\n\nPython 2.4.3, Enthought Edition 1.0.0, on Windows, numpy.version.version=\n'0.9.9.2706'\n\nIf all of the roots of a polynomial are zero, then an empty array is returned from roots().  Example:\n\n>>> from numpy import *\n>>> roots(array([1.0,0,1.0]))\narray([ 0.+1.j,  0.-1.j])      # correct\n>>> roots(array([1.0,0,0]))\narray([], dtype=int32)         # either incorrect or inconvenient\n>>> roots(array([1.0,1.0,0]))\narray([-1.,  0.])              # returns the zero root okay here\n>>> \n\nShould either document this behavior(yuck) or return all the zero roots(cool)."""
997,7725038,numpy-gitbot,numpy-gitbot,2012-10-19 18:49:50,2012-10-19 18:49:51,2012-10-19 18:49:51,closed,,1.0.3 Release,2,11 - Bug;component: Other;priority: normal,https://api.github.com/repos/numpy/numpy/issues/997,b'Short notation (typecode+size) for integers is not present in sctypeNA dict (Trac #399)',"b""_Original ticket http://projects.scipy.org/numpy/ticket/399 on 2006-12-11 by @FrancescAlted, assigned to unknown._\n\nHi,\n\nsctypeNA does have entries for booleans, floats, complex short notation:\n\n\n\n    In [27]:numpy.sctypeNA['b1']\n    Out[27]:'Bool'\n    In [28]:numpy.sctypeNA['f4']\n    Out[28]:'Float32'\n    In [29]:numpy.sctypeNA['c8']\n    Out[29]:'Complex32'\n\n\n\nbut not for integers:\n\n\n\n    In [30]:numpy.sctypeNA['i4']\n    ---------------------------------------------------------------------------\n    exceptions.KeyError                                  Traceback (most recent call last)\n    \n    /home/faltet/<ipython console>\n    \n    KeyError: 'i4'\n    In [31]:numpy.sctypeNA['u4']\n    ---------------------------------------------------------------------------\n    exceptions.KeyError                                  Traceback (most recent call last)\n    \n    /home/faltet/<ipython console>\n    \n    KeyError: 'u4'\n\n"""
995,7725031,numpy-gitbot,numpy-gitbot,2012-10-19 18:49:39,2012-10-19 18:49:40,2012-10-19 18:49:40,closed,,,2,11 - Bug;component: numpy.core;priority: normal,https://api.github.com/repos/numpy/numpy/issues/995,b'Misspelled True in array.byteswap (Trac #397)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/397 on 2006-12-10 by trac user ahonkela, assigned to unknown._\n\nA call to array.byteswap in numpy.oldnumeric.array_constructor (defined in numpy/oldnumeric/compat.py) has an invalid argument TRUE instead of True.\n\nThe same bug also appears in the docstring for array.byteswap.\n\nA patch to fix this is attached.'"
994,7725027,numpy-gitbot,numpy-gitbot,2012-10-19 18:49:37,2012-10-19 18:49:38,2012-10-19 18:49:38,closed,,,3,11 - Bug;component: Other;priority: normal,https://api.github.com/repos/numpy/numpy/issues/994,b'poly1d hangs (Trac #396)',"b""_Original ticket http://projects.scipy.org/numpy/ticket/396 on 2006-12-05 by trac user joris, assigned to unknown._\n\nfrom numpy import *\n\np = poly1d([nan,nan,1], r=0)\n\np.r\n\nThe last command makes python hang, not even CTRL-C helps.\nIn practice you don't give of course deliberately [nan,nan,1]\nas coefficients, but earlier in the code something may have\ngone wrong, so that the coefficients are not what is meant. \nI would expect then an ArithmeticError of poly1d rather than hanging.\n\nVersions: Python 2.5 + Numpy 1.0\n"""
993,7725024,numpy-gitbot,numpy-gitbot,2012-10-19 18:49:34,2012-10-19 18:49:35,2012-10-19 18:49:35,closed,,1.0.3 Release,3,11 - Bug;component: numpy.core;priority: low,https://api.github.com/repos/numpy/numpy/issues/993,b'GCC compiler warning (Trac #395)',"b""_Original ticket http://projects.scipy.org/numpy/ticket/395 on 2006-12-05 by @alberts, assigned to unknown._\n\nRecent changes to !NumPy (probably in r3475 and r3476) have caused the following compiler warning when building with GCC 4.1.1 on Fedora Core 6:\n\n\n\n    compile options: '-Ibuild/src.linux-i686-2.4/numpy/core/src -Inumpy/core/include -Ibuild/src.linux-i686-2.4/numpy/core -Inumpy/core/src -Inumpy/core/include -I/usr/include/python2.4 -c'\n    gcc: numpy/core/src/multiarraymodule.c\n    numpy/core/src/multiarraymodule.c: In function 'PyArray_ArgSort':\n    numpy/core/src/multiarraymodule.c:2494: warning: assignment from incompatible pointer type\n    numpy/core/src/multiarraymodule.c:2496: warning: return from incompatible pointer type\n\n"""
992,7725020,numpy-gitbot,numpy-gitbot,2012-10-19 18:49:30,2012-10-19 18:49:32,2012-10-19 18:49:32,closed,,1.0.3 Release,7,11 - Bug;component: Other;priority: normal,https://api.github.com/repos/numpy/numpy/issues/992,b'Memory leak in .argsort() method (Trac #394)',"b""_Original ticket http://projects.scipy.org/numpy/ticket/394 on 2006-12-04 by @FrancescAlted, assigned to unknown._\n\nIt seems that a memory leak in recent !NumPy 1.0.1 has slipped in.\n\nThe next code snipped reproduces the problem:\n\n\n\n    #!python\n    from numpy import *\n    \n    N=1000\n    M=10000\n    # Toggle to this for valgrind\n    #N=10\n    #M=100\n    \n    for i in xrange(N):\n        a = arange(M)\n        b = a.argsort()\n    \n\n\n\nand see evolution of memory consumption with an appropriate tool.\n\nRunning the above against valgrind, I've got:\n\n\n\n    \n    ==10942== 4,480 (400 direct, 4,080 indirect) bytes in 10 blocks are definitely l\n    ost in loss record 36 of 44\n    ==10942==    at 0x401C38B: malloc (vg_replace_malloc.c:149)\n    ==10942==    by 0x45A414C: array_alloc (arrayobject.c:6671)\n    ==10942==    by 0x45A075B: PyArray_NewFromDescr (arrayobject.c:5323)\n    ==10942==    by 0x45C706D: PyArray_ArangeObj (multiarraymodule.c:6476)\n    ==10942==    by 0x45C738E: array_arange (multiarraymodule.c:6532)\n    ==10942==    by 0x80B954A: PyEval_EvalFrame (in /usr/bin/python2.4)\n    ==10942==    by 0x80BA6B4: PyEval_EvalCodeEx (in /usr/bin/python2.4)\n    ==10942==    by 0x80BA718: PyEval_EvalCode (in /usr/bin/python2.4)\n    ==10942==    by 0x80DD046: PyRun_FileExFlags (in /usr/bin/python2.4)\n    ==10942==    by 0x80DD243: PyRun_SimpleFileExFlags (in /usr/bin/python2.4)\n    ==10942==    by 0x8055BA7: Py_Main (in /usr/bin/python2.4)\n    ==10942==    by 0x8055031: main (in /usr/bin/python2.4)\n    \n\n\n\nSo, it seems that the arrays created by .arange() method don't got freed.\n\nAn inspection of the latests commits in trunk pointed directly to the r3466 changeset. Below is a fix:\n\n\n\n    Index: numpy/core/src/multiarraymodule.c\n    ===================================================================\n    --- numpy/core/src/multiarraymodule.c   (revision 3466)\n    +++ numpy/core/src/multiarraymodule.c   (working copy)\n    @@ -2490,6 +2490,7 @@\n    \n            /* Determine if we should use new algorithm or not */\n            if (op2->descr->f->argsort[which] != NULL) {\n    +               Py_DECREF(op);\n                    return _new_argsort(op2, axis, which);\n            }\n    \n\n\n\nThis patch seems to behave well with both !NumPy and !PyTables tests.\n"""
991,7725018,numpy-gitbot,numpy-gitbot,2012-10-19 18:49:28,2012-10-19 18:49:29,2012-10-19 18:49:29,closed,,1.0 Release,1,11 - Bug;component: Other;priority: normal,https://api.github.com/repos/numpy/numpy/issues/991,b'numpy-1.0 import fails on Red Hat 9 (RH9) (blas related) (Trac #393)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/393 on 2006-12-01 by trac user twegener, assigned to unknown._\n\nImporting numpy (1.0) fails in Red Hat 9 Linux (blas-3.0-20). (Compiled and run on same machine.) The error output is shown below:\n\n\n\n    Python 2.5 (r25:51908, Oct 17 2006, 11:51:06)\n    [GCC 3.2.2 20030222 (Red Hat Linux 3.2.2-5)] on linux2\n    Type ""help"", ""copyright"", ""credits"" or ""license"" for more information.\n    >>> import numpy\n    Traceback (most recent call last):\n      File ""<stdin>"", line 1, in <module>\n      File ""/radstd/python/site-packages/i686-linux_py2.5/numpy/__init__.py"", line 40, in <module>\n        import linalg\n      File ""/radstd/python/site-packages/i686-linux_py2.5/numpy/linalg/__init__.py"", line 4, in <module>\n        from linalg import *\n      File ""/radstd/python/site-packages/i686-linux_py2.5/numpy/linalg/linalg.py"", line 25, in <module>\n        from numpy.linalg import lapack_lite\n    ImportError: /usr/lib/libblas.so.3: undefined symbol: e_wsfe\n\n\n\nThis happens with Python 2.5, 2.4 and 2.3.\n\nIt works fine with Fedora 3 (blas-3.0-26.fc3) and Fedora 2 (blas-3.0-24.1)\n'"
989,7725014,numpy-gitbot,numpy-gitbot,2012-10-19 18:49:24,2012-10-19 18:49:25,2012-10-19 18:49:25,closed,,,2,11 - Bug;component: numpy.core;priority: normal,https://api.github.com/repos/numpy/numpy/issues/989,b'argsort default axis + axis=None (Trac #391)',"b""_Original ticket http://projects.scipy.org/numpy/ticket/391 on 2006-11-28 by @pierregm, assigned to unknown._\n\nFolks, \nThe default axis for `argsort` (method & function) is -1, when it's `None` for `argmin` and `argmax`.\nMoreover, forcing the axis to `None` raises a `TypeError: an integer is required` exception.\n\n\n\n\n    >>>import numpy as N\n    >>>N.version.version\n    '1.0.1.dev3460'\n    >>>a=N.array([[1,3],[2,4]])\n    >>>N.argmin(a), N.argmax(a), \n    (0,3)\n    >>>N.argsort(a)\n    array([[0, 1],\n           [0, 1]])\n    >>>N.argsort(a,None)\n    /usr/lib64/python2.4/site-packages/numpy/core/fromnumeric.py in argsort(a, axis, kind)\n        192     except AttributeError:\n        193         return _wrapit(a, 'argsort', axis, kind)\n    --> 194     return argsort(axis, kind)\n        195\n        196 def argmax(a, axis=None):\n    \n    TypeError: an integer is required\n\n"""
988,7725011,numpy-gitbot,numpy-gitbot,2012-10-19 18:49:21,2012-10-19 18:49:23,2012-10-19 18:49:23,closed,,1.2.0,5,11 - Bug;component: Other;priority: normal,https://api.github.com/repos/numpy/numpy/issues/988,b'repr() on recarray failure (Trac #390)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/390 on 2006-11-22 by @astraw, assigned to unknown._\n\nThe script\n\n\n\n    import numpy\n    \n    a= numpy.rec.array([ (1, 2, 3)],dtype=[(\'a\', numpy.int8),\n                                           (\'b\', numpy.int8),\n                                           (\'c\', numpy.int8)])\n    \n    x=repr(a)\n    \n    from numpy import *\n    eval(x)\n\n\n\nresults in\n\n\n\n    Traceback (most recent call last):\n      File ""NUMPY_RECARRAY_BUG.py"", line 10, in ?\n        eval(x)\n      File ""<string>"", line 2, in ?\n      File ""/usr/lib/python2.4/site-packages/numpy/core/records.py"", line 181, in __new__\n        self = ndarray.__new__(subtype, shape, (record, descr))\n    TypeError: an integer is required\n\n\n\nAdding `x = x.replace(\'recarray\',\'rec.array\')` before eval() stops the exception. I think this illustrates that rec.array\'s `__repr__()`  should print \'rec.array\' rather than \'recarray\'. However, I\'m no recarray expert...'"
987,7725009,numpy-gitbot,numpy-gitbot,2012-10-19 18:49:19,2012-10-19 18:49:20,2012-10-19 18:49:20,closed,,,1,11 - Bug;component: Other;priority: normal,https://api.github.com/repos/numpy/numpy/issues/987,b'ones is not working for compound types (Trac #389)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/389 on 2006-11-22 by @FrancescAlted, assigned to unknown._\n\nHi,\n\nI don\'t know if the next is intended or not:\n\n\n\n    In [51]:numpy.ones(shape=2, dtype=\'i2\')\n    Out[51]:array([1, 1], dtype=int16)\n    # So far so good. However,\n    In [52]:numpy.zeros(shape=2, dtype=\'i4,i2\')\n    Out[52]:\n    array([(0, 0), (0, 0)],\n          dtype=[(\'f0\', \'<i4\'), (\'f1\', \'<i2\')])\n    In [53]:numpy.ones(shape=2, dtype=\'i4,i2\')\n    ---------------------------------------------------------------------------\n    exceptions.TypeError                                 Traceback (most recent call last)\n    \n    /home/faltet/<ipython console>\n    \n    /usr/lib/python2.4/site-packages/numpy/core/numeric.py in ones(shape, dtype, order)\n        587     """"""\n        588     a = empty(shape, dtype, order)\n    --> 589     a.fill(1)\n        590     # Above is faster now after addition of fast loops.\n        591     #a = zeros(shape, dtype, order)\n    \n    TypeError: expected a readable buffer object\n    \n\n\n\nI\'d say that, provided that ones() works well for single types, and zeros also works for compound types, then ones() is having some problem there.\n\nUsing 1.0.1.dev3428'"
986,7725008,numpy-gitbot,numpy-gitbot,2012-10-19 18:49:18,2012-10-19 18:49:18,2012-10-19 18:49:18,closed,,,1,11 - Bug;component: Other;priority: normal,https://api.github.com/repos/numpy/numpy/issues/986,b'Doc error for std in http://scipy.org/Numpy_Example_List#std (Trac #388)',"b""_Original ticket http://projects.scipy.org/numpy/ticket/388 on 2006-11-22 by trac user g2boojum, assigned to unknown._\n\nAccording to the example in http://scipy.org/Numpy_Example_List#std, \narray.std() uses an N-1 normalization\n(and that's what the example shows).  With numpy-1.0 on my machine:\n\n\n\n    \n    In [22]: a = array([1., 2., 7.])\n    \n    In [23]: a.std()\n    Out[23]: 2.62466929134\n    \n    In [24]: sqrt(((1.-a.mean())**2 + (2.-a.mean())**2 + (7.-a.mean())**2)/3)\n    Out[24]: 2.6246692913372702\n    \n    In [25]: sqrt(((1.-a.mean())**2 + (2.-a.mean())**2 + (7.-a.mean())**2)/2)\n    Out[25]: 3.214550253664318 <-- That's the result in the example\n    \n\n\nPlease fix the docs."""
985,7725005,numpy-gitbot,numpy-gitbot,2012-10-19 18:49:16,2012-10-19 18:49:16,2012-10-19 18:49:16,closed,,1.0 Release,0,11 - Bug;component: Other;priority: normal,https://api.github.com/repos/numpy/numpy/issues/985,b'Small polynomial bug (with patch suggestion) (Trac #387)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/387 on 2006-11-22 by trac user clovisgo, assigned to unknown._\n\n\n\n\n    Subject: Small bug in polynomial\n    There seems to exist a small bug in the numpy.polynomial functions:\n    Consider the following script:\n    \n    ################################\n    import numpy\n    poly1 = numpy.poly1d([1.0])\n    poly2 = numpy.poly1d([1.0, 1.0])\n    poly3 = numpy.poly1d([2.0,1.0])\n    print ""Poly1 is""\n    print poly1\n    print type(poly1)\n    print ""Poly2 is""\n    print poly2\n    print type(poly2)\n    print ""Poly3 is""\n    print poly3\n    print type(poly3)\n    print ""Poly1+Poly2 = ""\n    auxvar = numpy.polyadd(poly1,poly2)\n    print auxvar\n    print type(auxvar)\n    print ""Poly2+Poly3 = ""\n    auxvar = numpy.polyadd(poly2,poly3)\n    print auxvar\n    print type(auxvar)\n    ################################\n    \n    Raw output is given below:\n    \n    Poly1 is\n    1\n    <class \'numpy.lib.polynomial.poly1d\'>\n    Poly2 is\n    1 x + 1\n    <class \'numpy.lib.polynomial.poly1d \'>\n    Poly3 is\n    2 x + 1\n    <class \'numpy.lib.polynomial.poly1d\'>\n    Poly1+Poly2 =\n    1 x + 2\n    <class \'numpy.lib.polynomial.poly1d\'>\n    Poly2+Poly3 =\n    [ 3.  2.]\n    <type \'numpy.ndarray\'>\n    \n    ################################\n    Comments. The last test (Poly2+Poly3) is bad!\n    The result shoud be:\n    3 x + 2\n    and the type should be\n    <class \'numpy.lib.polynomial.poly1d\'>\n    and not:\n    <type \' numpy.ndarray\'>\n    \n    The same problem exists with polysub.\n    The solution seems to be simple. The original\n    code for the polyadd function (with line numbers) is:\n    \n    1   def polyadd(a1, a2):\n    2       """"""Adds two polynomials represented as sequences\n    3       """"""\n    4       truepoly = (isinstance(a1, poly1d) or isinstance(a2, poly1d))\n    5       a1 = atleast_1d(a1)\n    6       a2 = atleast_1d(a2)\n    7       diff = len(a2) - len(a1)\n    8       if diff == 0:\n    9           return a1 + a2\n    10       elif diff > 0:\n    11          zr = NX.zeros(diff, a1.dtype)\n    12          val = NX.concatenate((zr, a1)) + a2\n    13       else:\n    14          zr = NX.zeros(abs(diff), a2.dtype)\n    15          val = a1 + NX.concatenate((zr, a2))\n    16      if truepoly:\n    17          val = poly1d(val)\n    18      return val\n    \n    In order to correct the problem is sufficient\n    to replace the original line #9 by:\n    \n    9        val = a1 + a2\n    \n    If this change is made, the return value\n    will be an array (if input variables are\n    arrays) or a poly1d (if one of the input\n    variables are polynomials).\n    \n    A similar change should be made for the polysub function.\n    Clovis\n\n\n'"
984,7725003,numpy-gitbot,numpy-gitbot,2012-10-19 18:49:14,2012-10-19 18:49:15,2012-10-19 18:49:15,closed,,,1,11 - Bug;component: Other;priority: normal,https://api.github.com/repos/numpy/numpy/issues/984,b'import error (Trac #386)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/386 on 2006-11-22 by @astraw, assigned to @stefanv._\n\nWith revision 3457 (current as of now), the script\n\n\n\n    from numpy.numarray.linear_algebra import solve_linear_equations as solve\n    from numpy.oldnumeric.linear_algebra import *\n\n\n\nresults in the traceback\n\n\n\n    Traceback (most recent call last):\n      File ""NUMPY_IMPORT_BUG.py"", line 2, in ?\n        from numpy.oldnumeric.linear_algebra import *\n    AttributeError: \'module\' object has no attribute \'qr_decomposition\'\n\n\n\nI will debug this and submit a patch as I have time. If someone beats me to it, great.'"
983,7725002,numpy-gitbot,numpy-gitbot,2012-10-19 18:49:11,2012-10-19 18:49:12,2012-10-19 18:49:12,closed,,1.0.3 Release,3,11 - Bug;component: numpy.distutils;priority: normal,https://api.github.com/repos/numpy/numpy/issues/983,b'distutils has invalid flag for nagware fortran compiler version 5 (Trac #385)',"b""_Original ticket http://projects.scipy.org/numpy/ticket/385 on 2006-11-21 by trac user jgraham, assigned to unknown._\n\nOn upgrading from version 4.something (I think) to version 5.1 of the nagware compiler for Linux, f2py no longer works as the `-target=native` option is no longer recognised; the last useful error message before failure is:\n\n`Option error: Unrecognised argument to -target=`\n\nI think just removing this option in distutils/fcompiler/nag.py is OK for version 5 but I don't know what effect this will have on earlier versions."""
982,7724998,numpy-gitbot,numpy-gitbot,2012-10-19 18:49:07,2012-10-19 18:49:08,2012-10-19 18:49:08,closed,,,2,11 - Bug;component: Other;priority: normal,https://api.github.com/repos/numpy/numpy/issues/982,b'numpy.fft.fft segfaults when called with null of negative argument for size (Trac #384)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/384 on 2006-11-20 by @cournape, assigned to unknown._\n\nI made a mistake in my code by giving an axis argument instead of the expected size argument in numpy.fft.fft: this resulted in segfault.\n\n\n\n    #!python\n    from numpy import fft\n    fft(random.randn(10, 2), 0)\n\n\n\n->segfaults\n\n\n\n    #!python\n    from numpy import fft\n    fft(random.randn(10, 2), -1)\n\n\n\n->100% CPU, and fails with floating point excetpion\n\nI understand the arguments does not make any sense, but would it be possible to detect this ?'"
981,7724996,numpy-gitbot,numpy-gitbot,2012-10-19 18:49:05,2012-10-19 18:49:05,2012-10-19 18:49:05,closed,,,0,11 - Bug;component: numpy.core;priority: normal,https://api.github.com/repos/numpy/numpy/issues/981,b'PyArray_GETPTR C/API macros defect (Trac #383)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/383 on 2006-11-19 by trac user yairchu, assigned to @charris._\n\nmissing () for the i of PyArray_GETPTR1(obj, i)\ncurrently = (void *)(PyArray_BYTES(obj)+i*PyArray_STRIDES(obj)[0])\nshould turn i to (i)\n\nmight create hard to find bugs like it did for me :)\n'"
980,7724995,numpy-gitbot,numpy-gitbot,2012-10-19 18:49:03,2012-10-19 18:49:04,2012-10-19 18:49:04,closed,,,1,11 - Bug;component: numpy.f2py;priority: normal,https://api.github.com/repos/numpy/numpy/issues/980,b'Huge file in SVN repositori (Trac #382)',"b""_Original ticket http://projects.scipy.org/numpy/ticket/382 on 2006-11-16 by @FrancescAlted, assigned to unknown._\n\nHi,\n\nFrom some time ago, I'm detecting a very huge file in the !NumPy repository (trunk). The file is:\n\n\n\n    $ ll trunk/numpy/f2py/lib/research/\n    total 4585\n    -rw-r--r-- 1 faltet users 4687328 2006-11-16 20:24 04-007.pdf\n\n\n\nIt seems that it is the draft for a forthcoming version of Fortran. Given that it doesn't seem relevant for NumPy to work, I'd remove it from the repository."""
979,7724992,numpy-gitbot,numpy-gitbot,2012-10-19 18:49:01,2012-10-19 18:49:02,2012-10-19 18:49:02,closed,,,2,11 - Bug;component: numpy.core;priority: normal,https://api.github.com/repos/numpy/numpy/issues/979,"b""getattr(True_,'imag') and getattr(False_,'imag') cause a seg fault (Trac #381)""","b""_Original ticket http://projects.scipy.org/numpy/ticket/381 on 2006-11-15 by trac user davebaum, assigned to unknown._\n\nThe following code causes a core dump:\n\nimport numpy\ngetattr(numpy.False_, 'imag')\n\nI have tried this on a 1.0b5 build on Mac OSX and 1.0rc1 build on Linux.\n"""
978,7724988,numpy-gitbot,numpy-gitbot,2012-10-19 18:48:59,2012-10-19 18:48:59,2012-10-19 18:48:59,closed,,,1,11 - Bug;component: numpy.core;priority: normal,https://api.github.com/repos/numpy/numpy/issues/978,b'broadcasting problem?: - differs from  -= and + differs from += (Trac #380)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/380 on 2006-11-14 by trac user holistone, assigned to unknown._\n\n\n\n    #!python\n    a = ones((3,2))\n    print a-a[0]\n    [[ 0.  0.] [ 0.  0.] [ 0.  0.]]\n    a -= a[0]\n    print a\n    [[ 0.  0.] [ 1.  1.] [ 1.  1.]]\n    \n    a = ones((3,2))\n    a+a[0]\n    array([[ 2.,  2.], [ 2.,  2.], [ 2.,  2.]])\n    a += a[0]\n    a\n    array([[ 2.,  2.], [ 3.,  3.], [ 3.,  3.]])\n    \n\n\n\nI expected the same result in both cases.\nIs this the intended behavior?'"
977,7724986,numpy-gitbot,numpy-gitbot,2012-10-19 18:48:57,2012-10-19 18:48:58,2012-10-19 18:48:58,closed,,,1,11 - Bug;component: Other;priority: normal,https://api.github.com/repos/numpy/numpy/issues/977,b'different error when slicing with Python 2.4 and 2.5 (Trac #379)',"b""_Original ticket http://projects.scipy.org/numpy/ticket/379 on 2006-11-13 by @bthyreau, assigned to unknown._\n\nHi,\nI happened to get an error when slicing with an array.\n\n\n    from numpy import *\n    names = arange(8)\n    v = array([8])\n    names[:v]\n\n\nPython 2.4 outputs :\n`array([0, 1, 2, 3, 4, 5, 6, 7])`\nwhile Python 2.5 outputs :\n`TypeError: only 0-d integerarrays can be converted to an index`\n\nWhen `v = array([7, 8])`, Python 2.4 outputs\n`IndexError: invalid slice`\n\nThis was tested using various >1.0 Numpy. On my case 1.0, 1.0.1.dev3416, 1.0.1.dev3432...\n\nSince slicing with an 1-element array is wrong anyway, this shouldn't occurs frequently, but might break badly-written code.\nThanks"""
976,7724983,numpy-gitbot,numpy-gitbot,2012-10-19 18:48:52,2012-10-19 18:48:56,2012-10-19 18:48:56,closed,,,13,11 - Bug;component: numpy.core;priority: normal,https://api.github.com/repos/numpy/numpy/issues/976,b'NumPy or Python crashing with segfault (Trac #378)',"b""_Original ticket http://projects.scipy.org/numpy/ticket/378 on 2006-11-11 by trac user tecki, assigned to unknown._\n\nI just ran the following little python script:\n\n\n\n    import numpy\n    \n    a = numpy.arange(100 * 100)\n    a = a.reshape(100, 100)\n    b = a\n    \n    def p(x, y):\n            print x, y\n            return x\n    \n    v = numpy.vectorize(p)\n    print v(a,b)\n\n\n\nand I god a segmentation fault. I considered this strange, since there should\nbe no segfaults using python, but exceptions, no?\n\nOK, I am using slackware linux on an i386, tried their packages python-2.4.1, python-2.4.3 and a self-compiled python-2.5, all with numpy-1.0. Since the\npython version doesn't matter, I guessed it is the numpy package which makes problems.\n"""
975,7724982,numpy-gitbot,numpy-gitbot,2012-10-19 18:48:50,2012-10-19 18:48:51,2012-10-19 18:48:51,closed,,,1,11 - Bug;component: numpy.linalg;priority: normal,https://api.github.com/repos/numpy/numpy/issues/975,b'Compiler warnings in lapack_lite.c (Trac #377)',"b'_Original ticket http://projects.scipy.org/numpy/ticket/377 on 2006-11-11 by @alberts, assigned to unknown._\n\nWarning from GCC 4.0.3 when building lapack_litemodule.c as of r3432:\n\n\n\n    numpy/linalg/lapack_litemodule.c: In function ""lapack_lite_dgesdd"":\n    numpy/linalg/lapack_litemodule.c:462: warning: label ""defaul"" defined but not used\n    numpy/linalg/lapack_litemodule.c:446: warning: ""nwork"" may be used uninitialized in this function\n\n\n'"
