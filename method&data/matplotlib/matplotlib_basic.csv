issue,id,reporter,closed_by,created_at,updated_at,closed_at,state,assignee,milestone,comments,label_name,url,title,body
6509,157607745,efiring,QuLogic,2016-05-31 07:36:50,2016-07-10 01:05:23,2016-07-10 01:05:23,closed,mdboom,2.0 (style change major release),12,confirmed bug;Release critical,https://api.github.com/repos/matplotlib/matplotlib/issues/6509,b'pylab image_masked is broken',"b'It looks like the input values are getting clipped instead of registering as over and under.\r\n\r\nWith v2.x:\r\n![image_masked_v2](https://cloud.githubusercontent.com/assets/85125/15666726/134b9824-26ae-11e6-84ed-02fbb4b731f6.png)\r\n\r\nIt should look like this, from v1.5:\r\n![image_masked_v1 5](https://cloud.githubusercontent.com/assets/85125/15666787/61d4044a-26ae-11e6-8e92-50480ca2fbd3.png)\r\n\r\n'"
6276,146449255,peynmurray,tacaswell,2016-04-06 22:06:50,2016-05-16 20:59:53,2016-05-16 20:59:50,closed,tacaswell,1.5.2 (Critical bug fix release),2,confirmed bug;GUI/Qt,https://api.github.com/repos/matplotlib/matplotlib/issues/6276,b'Ticklabel format not preserved after editing plot limits',"b'Version: 1.5.1, Windows 7, using QT5 backend. Not tested on linux yet. After setting the format of an axis to use use scientific notation,\r\n\r\n`ticklabel_format(style=\'sci\', axis=\'y\', scilimits=(0,0))`\r\n\r\nchanging the limits of the plot using the green checkbox widget in the NavigationToolbar will remove the scientific notation formatting that was just set. This would be a huge convenience for users who use scientific notation and want to work with plots interactively. Example:\r\n\r\n```\r\nimport matplotlib\r\nmatplotlib.use(""Qt5Agg"")\r\nfrom numpy import *\r\nfrom matplotlib.pyplot import *\r\nfrom numpy.random import uniform\r\n\r\nnpts = 1000\r\n\r\nx = uniform(-100, 100, npts)\r\ny = 1000*sin(x)*cos(x**2)\r\n\r\nplot(x, y)\r\nticklabel_format(style=\'sci\', axis=\'both\', scilimits=(0,0))\r\n\r\nshow()\r\n```'"
6270,146125368,w2naf,tacaswell,2016-04-05 22:32:38,2016-05-16 13:47:19,2016-05-16 13:47:15,closed,efiring,1.5.2 (Critical bug fix release),4,confirmed bug,https://api.github.com/repos/matplotlib/matplotlib/issues/6270,b'pyplot.contour() not working with matplotlib.ticker.LinearLocator()',"b'Hello. Code using `matplotlib.ticker.LinearLocator()` with `pyplot.contour()` does not work anymore. I have tested other `matplotlib.ticker` subclasses (such as `LogLocator()` and `AutoLocator()`) which have worked fine. Please see the attached example and debug trace.\r\n\r\nThank you,\r\nNathaniel\r\n\r\n    Matplotlib version: 1.5.1 (installed by cloning git repository, then using sudo pip install -e .)\r\n    Python version: Python 2.7.3 (default, Jun 22 2015, 19:33:41)\r\n    Platform: Ubuntu 12.04\r\n\r\nExample based on: http://matplotlib.org/examples/pylab_examples/contour_demo.html\r\n```python\r\n#!/usr/bin/env python\r\n""""""\r\nIllustrate simple contour plotting, contours on an image with\r\na colorbar for the contours, and labelled contours.\r\n\r\nSee also contour_image.py.\r\n""""""\r\nimport matplotlib\r\nimport numpy as np\r\nimport matplotlib.cm as cm\r\nimport matplotlib.mlab as mlab\r\nimport matplotlib.pyplot as plt\r\n\r\nmatplotlib.rcParams[\'xtick.direction\'] = \'out\'\r\nmatplotlib.rcParams[\'ytick.direction\'] = \'out\'\r\n\r\ndelta = 0.025\r\nx = np.arange(-3.0, 3.0, delta)\r\ny = np.arange(-2.0, 2.0, delta)\r\nX, Y = np.meshgrid(x, y)\r\nZ1 = mlab.bivariate_normal(X, Y, 1.0, 1.0, 0.0, 0.0)\r\nZ2 = mlab.bivariate_normal(X, Y, 1.5, 0.5, 1, 1)\r\n# difference of Gaussians\r\nZ = 10.0 * (Z2 - Z1)\r\n\r\n\r\n# Create a simple contour plot with labels using default colors.  The\r\n# inline argument to clabel will control whether the labels are draw\r\n# over the line segments of the contour, removing the lines beneath\r\n# the label\r\nplt.figure()\r\nCS = plt.contour(X, Y, Z,locator=matplotlib.ticker.LinearLocator(10))\r\nplt.clabel(CS, inline=1, fontsize=10)\r\nplt.title(\'Simplest default with labels\')\r\n```\r\nOutput trace:\r\n```pytb\r\n---------------------------------------------------------------------------\r\nTypeError                                 Traceback (most recent call last)\r\n<ipython-input-13-37a1d06c84a1> in <module>()\r\n     30 # the label\r\n     31 plt.figure()\r\n---> 32 CS = plt.contour(X, Y, Z,locator=matplotlib.ticker.LinearLocator(10))\r\n     33 plt.clabel(CS, inline=1, fontsize=10)\r\n     34 plt.title(\'Simplest default with labels\')\r\n\r\n/home/w2naf/code/matplotlib/lib/matplotlib/pyplot.pyc in contour(*args, **kwargs)\r\n   2764         ax.hold(hold)\r\n   2765     try:\r\n-> 2766         ret = ax.contour(*args, **kwargs)\r\n   2767     finally:\r\n   2768         ax.hold(washold)\r\n\r\n/home/w2naf/code/matplotlib/lib/matplotlib/__init__.pyc in inner(ax, *args, **kwargs)\r\n   1810                     warnings.warn(msg % (label_namer, func.__name__),\r\n   1811                                   RuntimeWarning, stacklevel=2)\r\n-> 1812             return func(ax, *args, **kwargs)\r\n   1813         pre_doc = inner.__doc__\r\n   1814         if pre_doc is None:\r\n\r\n/home/w2naf/code/matplotlib/lib/matplotlib/axes/_axes.pyc in contour(self, *args, **kwargs)\r\n   5642             self.cla()\r\n   5643         kwargs[\'filled\'] = False\r\n-> 5644         return mcontour.QuadContourSet(self, *args, **kwargs)\r\n   5645     contour.__doc__ = mcontour.QuadContourSet.contour_doc\r\n   5646 \r\n\r\n/home/w2naf/code/matplotlib/lib/matplotlib/contour.pyc in __init__(self, ax, *args, **kwargs)\r\n   1422         are described in QuadContourSet.contour_doc.\r\n   1423         """"""\r\n-> 1424         ContourSet.__init__(self, ax, *args, **kwargs)\r\n   1425 \r\n   1426     def _process_args(self, *args, **kwargs):\r\n\r\n/home/w2naf/code/matplotlib/lib/matplotlib/contour.pyc in __init__(self, ax, *args, **kwargs)\r\n    861         self._transform = kwargs.get(\'transform\', None)\r\n    862 \r\n--> 863         self._process_args(*args, **kwargs)\r\n    864         self._process_levels()\r\n    865 \r\n\r\n/home/w2naf/code/matplotlib/lib/matplotlib/contour.pyc in _process_args(self, *args, **kwargs)\r\n   1443                 self._corner_mask = mpl.rcParams[\'contour.corner_mask\']\r\n   1444 \r\n-> 1445             x, y, z = self._contour_args(args, kwargs)\r\n   1446 \r\n   1447             _mask = ma.getmask(z)\r\n\r\n/home/w2naf/code/matplotlib/lib/matplotlib/contour.pyc in _contour_args(self, args, kwargs)\r\n   1538             warnings.warn(\'Log scale: values of z <= 0 have been masked\')\r\n   1539             self.zmin = z.min()\r\n-> 1540         self._contour_level_args(z, args)\r\n   1541         return (x, y, z)\r\n   1542 \r\n\r\n/home/w2naf/code/matplotlib/lib/matplotlib/contour.pyc in _contour_level_args(self, z, args)\r\n   1167         if self.levels is None:\r\n   1168             if len(args) == 0:\r\n-> 1169                 lev = self._autolev(z, 7)\r\n   1170             else:\r\n   1171                 level_arg = args[0]\r\n\r\n/home/w2naf/code/matplotlib/lib/matplotlib/contour.pyc in _autolev(self, z, N)\r\n   1149         zmax = self.zmax\r\n   1150         zmin = self.zmin\r\n-> 1151         lev = self.locator.tick_values(zmin, zmax)\r\n   1152         self._auto = True\r\n   1153         if self.filled:\r\n\r\n/home/w2naf/code/matplotlib/lib/matplotlib/ticker.pyc in tick_values(self, vmin, vmax)\r\n   1173             vmin, vmax = vmax, vmin\r\n   1174 \r\n-> 1175         if (vmin, vmax) in self.presets:\r\n   1176             return self.presets[(vmin, vmax)]\r\n   1177 \r\n\r\nTypeError: unhashable type: \'MaskedArray\'\r\n```'"
6266,145464804,janschulz,WeatherGod,2016-04-03 07:36:52,2016-04-08 18:09:12,2016-04-08 18:09:08,closed,efiring,2.1 (next point release),3,confirmed bug;Difficulty: Medium,https://api.github.com/repos/matplotlib/matplotlib/issues/6266,b'Better fallback when color is a float',"b'I\'m using matplotlib via the ""new"" data interface and with cartopy (all latest conda env with conda-forge and py3.5).\r\n\r\n```\r\nax.scatter(""lon"", ""lat"", color=""sum_prob"", lw = 0, data=good_data, transform=ll_proj)\r\n```\r\n\r\nI get the following error message:\r\n\r\n```pytb\r\n---------------------------------------------------------------------------\r\nValueError                                Traceback (most recent call last)\r\nC:\\portabel\\miniconda\\envs\\zalando\\lib\\site-packages\\matplotlib\\colors.py in to_rgba(self, arg, alpha)\r\n    367                     raise ValueError(\r\n--> 368                             \'length of rgba sequence should be either 3 or 4\')\r\n    369             else:\r\n\r\nValueError: length of rgba sequence should be either 3 or 4\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\nValueError                                Traceback (most recent call last)\r\nC:\\portabel\\miniconda\\envs\\zalando\\lib\\site-packages\\matplotlib\\colors.py in to_rgba_array(self, c, alpha)\r\n    398             # Single value? Put it in an array with a single row.\r\n--> 399             return np.array([self.to_rgba(c, alpha)], dtype=np.float)\r\n    400         except ValueError:\r\n\r\nC:\\portabel\\miniconda\\envs\\zalando\\lib\\site-packages\\matplotlib\\colors.py in to_rgba(self, arg, alpha)\r\n    375             raise ValueError(\r\n--> 376                 \'to_rgba: Invalid rgba arg ""%s""\\n%s\' % (str(arg), exc))\r\n    377 \r\n\r\nValueError: to_rgba: Invalid rgba arg ""6574    0.000165\r\n6674    0.000167\r\n6774    0.000168\r\n6873    0.000165\r\n6874    0.000170\r\n6973    0.000166\r\n6974    0.000171\r\n7073    0.000167\r\n7074    0.000173\r\n7172    0.000163\r\n7173    0.000168\r\n7174    0.000174\r\n7272    0.000164\r\n7273    0.000169\r\n7274    0.000176\r\n7372    0.000165\r\n7373    0.000170\r\n7374    0.000177\r\n7472    0.000166\r\n7473    0.000172\r\n7474    0.000179\r\n7571    0.000162\r\n7572    0.000167\r\n7573    0.000173\r\n7574    0.000181\r\n7671    0.000163\r\n7672    0.000168\r\n7673    0.000175\r\n7674    0.000183\r\n7771    0.000163\r\n          ...   \r\n9670    0.000193\r\n9671    0.000207\r\n9672    0.000221\r\n9673    0.000236\r\n9765    0.000138\r\n9766    0.000148\r\n9767    0.000158\r\n9768    0.000170\r\n9769    0.000183\r\n9770    0.000196\r\n9771    0.000211\r\n9772    0.000226\r\n9864    0.000130\r\n9865    0.000140\r\n9866    0.000150\r\n9867    0.000161\r\n9868    0.000173\r\n9869    0.000186\r\n9870    0.000200\r\n9871    0.000215\r\n9872    0.000230\r\n9964    0.000131\r\n9965    0.000142\r\n9966    0.000152\r\n9967    0.000163\r\n9968    0.000176\r\n9969    0.000189\r\n9970    0.000204\r\n9971    0.000219\r\n9972    0.000234\r\nName: sum_prob, dtype: float64""\r\nlength of rgba sequence should be either 3 or 4\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\nValueError                                Traceback (most recent call last)\r\nC:\\portabel\\miniconda\\envs\\zalando\\lib\\site-packages\\matplotlib\\colors.py in to_rgb(self, arg)\r\n    321                 raise ValueError(\r\n--> 322                     \'cannot convert argument to rgb sequence\')\r\n    323 \r\n\r\nValueError: cannot convert argument to rgb sequence\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\nValueError                                Traceback (most recent call last)\r\nC:\\portabel\\miniconda\\envs\\zalando\\lib\\site-packages\\matplotlib\\colors.py in to_rgba(self, arg, alpha)\r\n    369             else:\r\n--> 370                 r, g, b = self.to_rgb(arg)\r\n    371             if alpha is None:\r\n\r\nC:\\portabel\\miniconda\\envs\\zalando\\lib\\site-packages\\matplotlib\\colors.py in to_rgb(self, arg)\r\n    327             raise ValueError(\r\n--> 328                 \'to_rgb: Invalid rgb arg ""%s""\\n%s\' % (str(arg), exc))\r\n    329             # Error messages could be improved by handling TypeError\r\n\r\nValueError: to_rgb: Invalid rgb arg ""0.000165462141918""\r\ncannot convert argument to rgb sequence\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\nValueError                                Traceback (most recent call last)\r\n<ipython-input-40-c01684ee4af6> in <module>()\r\n     22 #plt.show()\r\n     23 \r\n---> 24 ax.scatter(""lon"", ""lat"", color=good_data[""sum_prob""], lw = 0, data=good_data, transform=ll_proj)\r\n     25 #ax.scatter(""lon"", ""lat"", color=""sum_prob"", lw = 0, data=best, transform=ll_proj)\r\n\r\nC:\\portabel\\miniconda\\envs\\zalando\\lib\\site-packages\\cartopy\\mpl\\geoaxes.py in scatter(self, *args, **kwargs)\r\n   1179                              \'(PlateCarree or RotatedPole).\')\r\n   1180 \r\n-> 1181         result = matplotlib.axes.Axes.scatter(self, *args, **kwargs)\r\n   1182         self.autoscale_view()\r\n   1183         return result\r\n\r\nC:\\portabel\\miniconda\\envs\\zalando\\lib\\site-packages\\matplotlib\\__init__.py in inner(ax, *args, **kwargs)\r\n   1809                     warnings.warn(msg % (label_namer, func.__name__),\r\n   1810                                   RuntimeWarning, stacklevel=2)\r\n-> 1811             return func(ax, *args, **kwargs)\r\n   1812         pre_doc = inner.__doc__\r\n   1813         if pre_doc is None:\r\n\r\nC:\\portabel\\miniconda\\envs\\zalando\\lib\\site-packages\\matplotlib\\axes\\_axes.py in scatter(self, x, y, s, c, marker, cmap, norm, vmin, vmax, alpha, linewidths, verts, edgecolors, **kwargs)\r\n   3891                 offsets=offsets,\r\n   3892                 transOffset=kwargs.pop(\'transform\', self.transData),\r\n-> 3893                 alpha=alpha\r\n   3894                 )\r\n   3895         collection.set_transform(mtransforms.IdentityTransform())\r\n\r\nC:\\portabel\\miniconda\\envs\\zalando\\lib\\site-packages\\matplotlib\\collections.py in __init__(self, paths, sizes, **kwargs)\r\n    829         """"""\r\n    830 \r\n--> 831         Collection.__init__(self, **kwargs)\r\n    832         self.set_paths(paths)\r\n    833         self.set_sizes(sizes)\r\n\r\nC:\\portabel\\miniconda\\envs\\zalando\\lib\\site-packages\\matplotlib\\collections.py in __init__(self, edgecolors, facecolors, linewidths, linestyles, antialiaseds, offsets, transOffset, norm, cmap, pickradius, hatch, urls, offset_position, zorder, **kwargs)\r\n    114         cm.ScalarMappable.__init__(self, norm, cmap)\r\n    115 \r\n--> 116         self.set_edgecolor(edgecolors)\r\n    117         self.set_facecolor(facecolors)\r\n    118         self.set_linewidth(linewidths)\r\n\r\nC:\\portabel\\miniconda\\envs\\zalando\\lib\\site-packages\\matplotlib\\collections.py in set_edgecolor(self, c)\r\n    658             c = mpl.rcParams[\'patch.edgecolor\']\r\n    659         self._edgecolors_original = c\r\n--> 660         self._edgecolors = mcolors.colorConverter.to_rgba_array(c, self._alpha)\r\n    661         self.stale = True\r\n    662 \r\n\r\nC:\\portabel\\miniconda\\envs\\zalando\\lib\\site-packages\\matplotlib\\colors.py in to_rgba_array(self, c, alpha)\r\n    420             result = np.zeros((nc, 4), dtype=np.float)\r\n    421             for i, cc in enumerate(c):\r\n--> 422                 result[i] = self.to_rgba(cc, alpha)\r\n    423             return result\r\n    424 \r\n\r\nC:\\portabel\\miniconda\\envs\\zalando\\lib\\site-packages\\matplotlib\\colors.py in to_rgba(self, arg, alpha)\r\n    374         except (TypeError, ValueError) as exc:\r\n    375             raise ValueError(\r\n--> 376                 \'to_rgba: Invalid rgba arg ""%s""\\n%s\' % (str(arg), exc))\r\n    377 \r\n    378     def to_rgba_array(self, c, alpha=None):\r\n\r\nValueError: to_rgba: Invalid rgba arg ""0.000165462141918""\r\nto_rgb: Invalid rgb arg ""0.000165462141918""\r\ncannot convert argument to rgb sequence\r\n```\r\n\r\nIMO the default (or at least the fallback) should simple take the float array, get min/max and then convert each value to a rgb value depending on the value in `sum_prob`.\r\n\r\n[current mood: why did I start this notebook in python and tried to do this in pandas, cartopy and matplotlib? ggplot would have so much nice defaults... an hour gone to find a way to display a dataframe with x,y,z values on a image, where x,y are every lat-lon combi on a plot but contour/whatever needs it in a non-pandas.dataframe format... the above scatter is actually the workaround...]'"
6226,143595534,peynmurray,tacaswell,2016-03-25 20:53:44,2016-04-30 04:47:59,2016-04-30 04:47:53,closed,tacaswell,1.5.2 (Critical bug fix release),2,confirmed bug,https://api.github.com/repos/matplotlib/matplotlib/issues/6226,b'Issue saving figure as eps when using gouraud shaded triangulation',"b'I\'m running python 3.4 on Debian 8.3, and am using the Qt5Agg backend. When I call savefig() or use the toolbar widget to save a figure that has a gouraud shaded triangulation, I get the following stacktrace:\r\n\r\n```python\r\nTraceback (most recent call last):\r\n  File ""/home/tps/PyCharmProjects/test/test_PlotWindow.py"", line 323, in saveFigRButtonClicked\r\n    savefig(fname)\r\n  File ""/usr/local/lib/python3.4/dist-packages/matplotlib/pyplot.py"", line 688, in savefig\r\n    res = fig.savefig(*args, **kwargs)\r\n  File ""/usr/local/lib/python3.4/dist-packages/matplotlib/figure.py"", line 1565, in savefig\r\n    self.canvas.print_figure(*args, **kwargs)\r\n  File ""/usr/local/lib/python3.4/dist-packages/matplotlib/backends/backend_qt5agg.py"", line 196, in print_figure\r\n    FigureCanvasAgg.print_figure(self, *args, **kwargs)\r\n  File ""/usr/local/lib/python3.4/dist-packages/matplotlib/backend_bases.py"", line 2232, in print_figure\r\n    **kwargs)\r\n  File ""/usr/local/lib/python3.4/dist-packages/matplotlib/backends/backend_ps.py"", line 995, in print_eps\r\n    return self._print_ps(outfile, \'eps\', *args, **kwargs)\r\n  File ""/usr/local/lib/python3.4/dist-packages/matplotlib/backends/backend_ps.py"", line 1023, in _print_ps\r\n    **kwargs)\r\n  File ""/usr/local/lib/python3.4/dist-packages/matplotlib/backends/backend_ps.py"", line 1113, in _print_figure\r\n    self.figure.draw(renderer)\r\n  File ""/usr/local/lib/python3.4/dist-packages/matplotlib/artist.py"", line 61, in draw_wrapper\r\n    draw(artist, renderer, *args, **kwargs)\r\n  File ""/usr/local/lib/python3.4/dist-packages/matplotlib/figure.py"", line 1159, in draw\r\n    func(*args)\r\n  File ""/usr/local/lib/python3.4/dist-packages/matplotlib/artist.py"", line 61, in draw_wrapper\r\n    draw(artist, renderer, *args, **kwargs)\r\n  File ""/usr/local/lib/python3.4/dist-packages/matplotlib/axes/_base.py"", line 2324, in draw\r\n    a.draw(renderer)\r\n  File ""/usr/local/lib/python3.4/dist-packages/matplotlib/artist.py"", line 61, in draw_wrapper\r\n    draw(artist, renderer, *args, **kwargs)\r\n  File ""/usr/local/lib/python3.4/dist-packages/matplotlib/collections.py"", line 1694, in draw\r\n    renderer.draw_gouraud_triangles(gc, verts, colors, transform.frozen())\r\n  File ""/usr/local/lib/python3.4/dist-packages/matplotlib/backends/backend_ps.py"", line 867, in draw_gouraud_triangles\r\n    stream = quote_ps_string(streamarr.tostring())\r\n  File ""/usr/local/lib/python3.4/dist-packages/matplotlib/backends/backend_ps.py"", line 170, in quote_ps_string\r\n    s=s.replace(""\\\\"", ""\\\\\\\\"")\r\nTypeError: expected bytes, bytearray or buffer compatible object\r\n```'"
6212,142998001,madphysicist,tacaswell,2016-03-23 15:47:42,2016-03-26 13:31:15,2016-03-26 03:56:33,closed,tacaswell,2.1 (next point release),2,confirmed bug;Difficulty: Easy,https://api.github.com/repos/matplotlib/matplotlib/issues/6212,b'ENH? BUG? `pyplot.setp`/`Artist.setp` does not accept non-indexable iterables of handles.',"b'Setup\r\n-----\r\n`matplotlib.__version__` = 1.5.1\r\n`matplotlib.__version__numpy__` = 1.6\r\nPython 3.5.1, IPython 4.1.2  running under anaconda\r\nOS: Red Hat 6.5\r\n\r\nMatplotlib installed with `conda install matplotlib`.\r\n\r\nIssue\r\n-----\r\nSupplying an iterable that is not a list or a tuple (or other indexable sequence) causes an issue with `setp`. This is probably OK with Python 2, but it is counter-intuitive for Python 3. I would expect the following to work, but it does not:\r\n\r\n    >>> import matplotlib.pyplot as plt\r\n    >>> import itertools\r\n    >>> lines1 = plt.plot(range(3), range(3), range(5), range(5))\r\n    >>> lines2 = plt.plot(range(4), range(4), range(6), range(6))\r\n    >>> plt.setp(itertools.chain(lines1, lines2), color=\'red\')\r\n    Traceback (most recent call last):\r\n\r\n      File ""<ipython-input-6-2f274dd0d4c1>"", line 1, in <module>\r\n        plt.setp(itertools.chain(lines1, lines2), color=\'red\')\r\n\r\n      File ""/home/jfoxrabi/miniconda3/lib/python3.5/site-packages/matplotlib/pyplot.py"", line 351, in setp\r\n        return _setp(*args, **kwargs)\r\n\r\n      File ""/home/jfoxrabi/miniconda3/lib/python3.5/site-packages/matplotlib/artist.py"", line 1437, in setp\r\n        insp = ArtistInspector(obj)\r\n\r\n      File ""/home/jfoxrabi/miniconda3/lib/python3.5/site-packages/matplotlib/artist.py"", line 1032, in __init__\r\n        if cbook.iterable(o) and len(o):\r\n\r\n    TypeError: object of type \'itertools.chain\' has no len()\r\n\r\nThe expected behavior would be the same as for\r\n\r\n    >>> plt.setp(lines1 + lines2, color=\'red\')\r\n\r\nThis example is a bit contrived to illustrate the issue, but I have a case where I am doing stuff to a bunch of lines from different places, then trying to set a couple of properties on them. Wrapping the iterator I have in `list()` is not a huge problem, but it is unexpected and probably should not be needed.\r\n\r\nThe docs are trivial to update in this case (I have already started a PR), but I will need to trace through a couple of things before I am sure I am sticking `next(iter(x))` instead of `x[0]` in the right place.'"
6173,141646454,madphysicist,tacaswell,2016-03-17 17:11:13,2016-05-16 20:59:50,2016-05-16 20:59:50,closed,,1.5.2 (Critical bug fix release),13,confirmed bug;Difficulty: Easy,https://api.github.com/repos/matplotlib/matplotlib/issues/6173,"b'`linestyle` parameter does not support default cycler through `None`, crashes instead.'","b""Setup\r\n-----\r\n`matplotlib.__version__` = 1.5.1\r\n`matplotlib.__version__numpy__` = 1.6\r\nPython 3.5.1, IPython 4.1.2  running under anaconda\r\nOS: Red Hat 6.5\r\n\r\nMatplotlib installed with `conda install matplotlib`.\r\n\r\nIssue\r\n-----\r\nSupplying `None` (the object, not the string) `linestyle` parameter to `plot` (and possible others) raises an error instead of going through the default cycler for that property. I would expect the following to work, but it does not:\r\n\r\n    >>> import matplotlib.pyplot as plt\r\n    >>> plt.plot(range(5), range(5), linestyle=None)\r\n    ...\r\n    TypeError: object of type 'NoneType' has no len()\r\n\r\nThe expected behavior would be that all lines are drawn 'solid'.\r\n\r\nIf this is something that is worth fixing, I can take a look in a couple of days and maybe add code similar to what is done for the `color` argument. The docs would need to be updated too."""
6035,135075940,afvincent,QuLogic,2016-02-20 13:49:15,2016-05-30 20:34:17,2016-05-30 20:34:14,closed,,2.0 (style change major release),10,API consistency;confirmed bug;needs_patch,https://api.github.com/repos/matplotlib/matplotlib/issues/6035,b'Issue(?): head size of FancyArrowPatch changes between interactive figure and picture export',"b'### Issue (?)\r\nWhen plotting a arrow (with `FancyArrowPatch` from `matplotlib.patches`), and exporting it to a picture, the size of its head is not consistent with what is displayed in the interactive figure. (The linewidth seems to remain OK between interactive and exported file, whatever format is used.) \r\n\r\nAs far as I understand, it seems to be DPI-related:\r\n- If the DPI value is the same between the interactive figure and the export made with `savefig`, then everything is fine.\r\n- However, if I want to export with DPI 3 times bigger than in the interactive figure (for example 300 DPI instead of 100 DPI), one workaround I found is to use a mutation_scale 3 times bigger than before when plotting the interactive figure. Unfortunately, it is neither really convenient nor satisfying as it affects what is displayed in the interactive figure (the arrow head is 3 times bigger...) \r\n\r\nI don\'t know if it is a bug or the expected behavior, but I find it disturbing to have an export that is (that) different from the interactive display.\r\n\r\n### Environment infos\r\n- Linux, Python 2.7 (from Anaconda2), Matplotlib v1.5.0\r\n- Interactive backend is Qt4Agg\r\n\r\n### Example script\r\nHere is a script that generates a figure with 2 arrows (FancyArrowPatch), and exports it to different formats:\r\n\r\n    import matplotlib.pyplot as plt\r\n    from matplotlib.patches import FancyArrowPatch\r\n    plt.ion() # My interactive backend is Qt4Agg, with default @ 80 DPI\r\n    \r\n    """""" Prepare and plot 2 FancyArrowPatch instances, the 2nd one with a \r\n        mutation_scale parameter 3 times bigger than the 1st one. \r\n    """"""\r\n    common_opts = dict(arrowstyle=u\'->\', lw=3)\r\n    arrow_patch_0 = FancyArrowPatch(posA=(0.2, 0.8), posB=(0.8, 0.65),\r\n                                    mutation_scale=50, **common_opts)\r\n    arrow_patch_1 = FancyArrowPatch(posA=(0.2, 0.2), posB=(0.8, 0.45),\r\n                                    mutation_scale=150, **common_opts)\r\n    \r\n    fig, ax = plt.subplots(figsize=(8, 6), dpi=100)\r\n    ax.text(0.2, 0.85, ""mutation_scale = 50"", ha=\'left\', va=\'bottom\')\r\n    ax.text(0.2, 0.15, ""mutation_scale = 150"", ha=\'left\', va=\'top\')\r\n    for arrow_patch in [arrow_patch_0, arrow_patch_1]:\r\n        ax.add_patch(arrow_patch)\r\n    \r\n    """""" Export to different formats, with different DPI values if rasterized.\r\n    """"""\r\n    common_prefix = \'FancyArrowPatch_testfile\'\r\n    fig.savefig(common_prefix + \'.eps\')\r\n    fig.savefig(common_prefix + \'.pdf\')\r\n    fig.savefig(common_prefix + \'_300dpi.png\', dpi=300)\r\n    fig.savefig(common_prefix + \'_100dpi.png\', dpi=100)\r\n    fig.savefig(common_prefix + \'_300dpi.jpg\', dpi=300)\r\n    fig.savefig(common_prefix + \'_100dpi.jpg\', dpi=100)``\r\n\r\nAnd below is a picture that compares the 6 different output files (2 x 3 bottom panels) with a screenshot of the interactive figure (top center panel).\r\n![fancyarrowpatch_export_issue](https://cloud.githubusercontent.com/assets/17270724/13196822/0c681712-d7da-11e5-9958-9c6e12878f21.png)\r\n\r\n### Observations about the example\r\nOne can see that with the raster formats (PNG and JPG):\r\n- @ 100 DPI (blue labels), the exports are the same as in the screenshot of the interactive display with 100 DPI. \r\n- @ 300 DPI (red labels), the exports differ from the interactive display. Besides, the arrow head with mutation_scale = 150 seems to be as big as the arrow head with mutation_scale = 50 @ 100 DPI.\r\n\r\nConcerning the (at least partially) vector formats that I tested (PDF and EPS, with purple labels), one can observe that the arrow heads do not have exactly the same size as in the interactive display either (they are slightly bigger).'"
5948,130045154,thisch,tacaswell,2016-01-30 22:16:34,2016-02-22 20:31:34,2016-02-22 20:31:27,closed,mdboom,1.5.2 (Critical bug fix release),4,confirmed bug,https://api.github.com/repos/matplotlib/matplotlib/issues/5948,b'tilted line visible in generated pdf file',"b""```py\r\nimport matplotlib.pyplot as plt\r\nfrom matplotlib.patches import Rectangle\r\nimport numpy as np\r\n\r\nxr = np.linspace(-10, 10, 2)\r\nX, Y = np.meshgrid(xr, xr)\r\n\r\n# ncols needs to be >= 3 to trigger the problem\r\nfig, axes = plt.subplots(nrows=1, ncols=3, sharey=True)\r\n\r\nfor iax, ax in enumerate(axes.flatten()):\r\n    ax.set_aspect('equal')\r\n    r = Rectangle((X.min(), Y.min()), X.ptp(), Y.ptp(),\r\n                  color='k', fill=False, ls='--', lw=1)\r\n    ax.add_patch(r)\r\n    ax.set_xlim(X.min()-1, X.max()+1)\r\n    ax.set_ylim(Y.min()-1, Y.max()+1)\r\nplt.savefig('export.pdf')\r\nplt.show()\r\n```\r\n\r\nWhen saving the above figure to a pdf file, an additional (unwanted) tilted dashed line is drawn on the third axis (=axes[2]). Note that this line is only visible in the generated pdf file and not in the interactive window.\r\n![mplpdfbug](https://cloud.githubusercontent.com/assets/206581/12698797/ff2f1e30-c7a6-11e5-81dd-a3b7139e52b1.png)\r\n\r\n"""
5841,126347774,anntzer,tacaswell,2016-01-13 05:59:15,2016-02-09 00:04:54,2016-02-08 23:57:45,closed,tacaswell,1.5.2 (Critical bug fix release),3,confirmed bug,https://api.github.com/repos/matplotlib/matplotlib/issues/5841,b'extra label for non-existent tick',"b'After\r\n```\r\nrcParams[""xtick.direction""] = rcParams[""ytick.direction""] = ""out""\r\nxlim(4.001, 8)\r\n```\r\nThere is an extra label at `x=4.0`, but (correctly) no tick there:\r\n![extralabel](https://cloud.githubusercontent.com/assets/1322974/12286246/58aee1d6-b977-11e5-83d6-e0a38d2e2a25.png)\r\n\r\nProbably a rounding issue, e.g. it doesn\'t appear using `xlim(4.005, 8)`.  I understand that some tolerance in floating point comparison is needed, but at least the same should be used for both ticks and labels (i.e. I wouldn\'t necessarily consider it a bug if both a tick and a label appeared when the lower xlim is e.g. 4+1e-10).\r\n\r\nSadly not solved by #5768.\r\n\r\nPS: I guess this is going to be much more visible now that the default style has ticks pointing outwards...\r\n'"
5692,122801232,goretkin,tacaswell,2015-12-17 19:04:56,2015-12-23 16:15:46,2015-12-23 16:15:42,closed,tacaswell,v1.5.1,1,confirmed bug,https://api.github.com/repos/matplotlib/matplotlib/issues/5692,"b""Can't remove StemContainer""","b""```python\r\nIn [7]: c = ax.stem([1,2],[2,1])\r\n\r\nIn [8]: c.remove()\r\n---------------------------------------------------------------------------\r\nTypeError                                 Traceback (most recent call last)\r\n<ipython-input-8-dbc7beefa92d> in <module>()\r\n----> 1 c.remove()\r\n\r\npython2.7/site-packages/matplotlib/container.pyc in remove(self)\r\n     33     def remove(self):\r\n     34         for c in self:\r\n---> 35             c.remove()\r\n     36 \r\n     37         if self._remove_method:\r\n\r\nTypeError: remove() takes exactly one argument (0 given)\r\n```\r\nThe markers get removed from the plot, however the lines stay. That's because `ax.plot` returns a `list`of `<matplotlib.lines.Line2D>`, and while `list` has a remove method, it's not what is intended. \r\n\r\n```python\r\nIn [9]: matplotlib.__version__\r\nOut[9]: '1.4.3'\r\n```"""
5464,116404074,davidcortesortuno,WeatherGod,2015-11-11 19:26:15,2015-11-18 05:14:01,2015-11-18 05:14:00,closed,WeatherGod,v1.5.1,1,confirmed bug,https://api.github.com/repos/matplotlib/matplotlib/issues/5464,b'figaspect not working with numpy floats',"b'If I try to use a numpy float as the input of the `matplotlib.pyplot.figaspect` function, I get an error.\r\nThis is the code\r\n\r\n    import numpy as np\r\n    import matplotlib.pyplot as plt\r\n    \r\n    aspect = np.float64(2) / np.float64(1)\r\n    # print aspect\r\n    w, h = plt.figaspect(aspect)\r\n    fig = plt.figure(figsize=(w,h))\r\n    ax = fig.add_axes([0.1, 0.1, 0.8, 0.8])\r\n\r\nwith the Error\r\n\r\n```\r\n/usr/local/lib/python2.7/dist-packages/matplotlib/figure.pyc in figaspect(arg)\r\n   1770     # Extract the aspect ratio of the array\r\n   1771     if isarray:\r\n-> 1772         nr, nc = arg.shape[:2]\r\n   1773         arr_ratio = float(nr) / nc\r\n   1774     else:\r\n\r\nValueError: need more than 0 values to unpack\r\n```\r\n\r\nIf I convert `aspect` to a `float`, it works ok'"
5444,115766467,breedlun,zblz,2015-11-08 22:32:06,2015-11-09 15:02:09,2015-11-09 12:46:49,closed,zblz,v1.5.1,4,confirmed bug,https://api.github.com/repos/matplotlib/matplotlib/issues/5444,b'\\overline and subscripts/superscripts in mathtext',"b'The following code works fine in matplotlib 1.4.3, but it fails in matplotlib 1.5.0.\r\n\r\n    import matplotlib.pyplot as plt\r\n    ax = plt.subplot(111)\r\n    ax.plot([0,1],[0,1])\r\n    ax.text(0.5, 0.5, r\'$\\overline{\\omega}$\')\r\n    ax.text(0.5, 0.6, r\'$\\overline{\\omega}^x$\')\r\n    ax.text(0.5, 0.4, r\'$\\overline{\\omega}_x$\')\r\n\r\nThe traceback is super long, but here is the last line.\r\n\r\n    File ""/Users/Ben/Library/Enthought/Canopy_64bit/User/lib/python2.7/site-packages/matplotlib/mathtext.py"", line 2809, in subsuper\r\n      last_char.width = last_char._metrics.advance\r\n    AttributeError: \'Vlist\' object has no attribute \'_metrics\'\r\n'"
5105,107342456,Tillsten,tacaswell,2015-09-19 16:19:38,2015-10-02 21:15:08,2015-10-02 21:15:07,closed,jkseppan,v1.5.0,9,confirmed bug;Release critical,https://api.github.com/repos/matplotlib/matplotlib/issues/5105,b'1.5rc1: Calling figure transform with wrong argument crashs python',"b'Following lead to a interpreter crash:\r\n\r\n    import matplotlib.pyplot as plt\r\n    fig = plt.figure()\r\n    #Just just give an exception\r\n    fig.transFigure.transform(1)\r\n\r\nWindows 10, 64 bit, 2.7'"
5023,104807819,mdboom,tacaswell,2015-09-04 00:36:49,2015-11-10 02:46:39,2015-09-04 05:00:24,closed,,v1.5.0,3,confirmed bug,https://api.github.com/repos/matplotlib/matplotlib/issues/5023,b'Fix Agg clipping',"b'Addresses the slowness mentioned in #5016.\r\n\r\nIn the epic C++ refactor in ba4016014cb4fb4927e36ce8ea429fed47dcb787, the line that determines whether to perform clipping of paths to the figure size in the Agg backend changed from:\r\n\r\n```\r\n    bool clip = !face.first && gc.hatchpath.isNone() && !path.has_curves();\r\n```\r\n\r\nto \r\n\r\n```\r\n    bool clip = !face.first && gc.has_hatchpath() && !path.has_curves();\r\n```\r\n\r\nSpot the problem?  It means we were only clipping when there *was* a hatch, rather than when there *wasn\'t* a hatch -- effectively disabling it for most things.\r\n\r\nThis should have a major impact on panning and zooming performance of large time series.\r\n\r\nI\'m not exactly sure how to write a test for this -- the result, by its nature, isn\'t visible, and this is pretty deep into the C++ code to make a ""unit test"" out of it.  I\'ll think on that some more, but in the meantime I thought it better to just address this very serious regression.'"
5016,104324126,knarrff,jenshnielsen,2015-09-01 18:13:18,2015-09-06 18:22:08,2015-09-06 18:22:08,closed,,v1.5.0,16,confirmed bug,https://api.github.com/repos/matplotlib/matplotlib/issues/5016,b'plot line not shown in some cases involving masked arrays',"b""The following code is a short test of the much longer problem in my code:\r\n```\r\nimport numpy as np\r\nimport matplotlib.pyplot as plt\r\n\r\nfig = plt.figure()\r\nax = fig.add_subplot(111)\r\n\r\na=np.arange(2428, dtype=np.float64)\r\na[0:1553] = 1.96808407167e+243\r\na=np.ma.masked_greater(a, 1.e100)\r\n\r\nax.plot(a[678:], a[678:], linestyle=':', label='works')\r\nax.plot(a, a, label='does not work')\r\nax.plot(a[677:], a[677:], label='also does not work')\r\n\r\nax.legend()\r\nplt.show()\r\n```\r\n\r\nI create an array of dtype float64, and mask part of it (to mimic the data I found this with). I would then expect all plots to show something (and usually just use the second of the three here). Leaving out part of the masked values seems to help (first plot), but that part cannot be too small (third plot). Interestingly, even if plot 1 is commented out, the limits of the axes are correct: plot() itself seems to understand what it is supposed to be doing. It is just the 'line' that does not show up in the final image (neither with show() now savefig()).\r\n\r\nAt this point I am out of ideas, this suggesting somehow strongly to be a bug outside of this script.\r\n\r\nThis happens on a Debian Jessi machine, with both combinations of:\r\n\r\npython 2.7.9 + numpy 1.8.2 + matplotlib 1.4.2\r\npython 3.4.2 + numpy 1.8.2 + matplotlib 1.4.2\r\n"""
4947,101527728,jrevans,WeatherGod,2015-08-17 23:02:18,2015-08-18 13:16:14,2015-08-18 13:16:12,closed,tacaswell,v1.5.0,6,confirmed bug,https://api.github.com/repos/matplotlib/matplotlib/issues/4947,b'animation blitting is no longer working',"b'This is mentioned in #4897.\r\n\r\nI currently do not have a solution for this one, but I do have a script that demonstrates the problem.  I am using the current devel branch and a Qt5Agg backend.\r\n\r\nThe following is in reference to the attached script.\r\n\r\nThe line \'bg = fig.canvas.copy_from_bbox( fig.bbox )\' will in fact save the current Agg buffer state as appropriate.  The later calls to \'fig.canvas.restore_region( bg, fig.bbox )\' however do not seem to actually restore the Agg buffers to the saved state, because in the subsequent call to \'fig.canvas.blit( fig.bbox )\' the Agg buffers are still in the same state as before the call to \'restore_region\'.  The result is the red ellipse gets drawn multiple times to the Agg backend.\r\n\r\nAt the end of the script a new call to the canvas \'draw\' method causes the entire figure to redraw (and the Agg backend), and the plot then is updated to look as expected.\r\n\r\n```python\r\n======================================================================\r\n#   blit.py\r\n======================================================================\r\n#!/bin/env python\r\n\r\nimport pylab as p\r\nfrom matplotlib.patches import Ellipse\r\nimport math, time\r\n\r\np.ion()\r\nfig, ax = p.subplots()\r\nax.set_xlim( [ -3, 3 ] )\r\nax.set_ylim( [ -3, 3 ] )\r\n\r\ne1 = Ellipse( [ 0, 0 ], 1, 2, 0 )\r\nax.add_patch( e1 )\r\n\r\ne2 = Ellipse( [ 2, 0 ], 1, 3, 0 )\r\nax.add_patch( e2 )\r\n\r\nraw_input( ""Press return to start blit"" )\r\n\r\nbg = fig.canvas.copy_from_bbox( fig.bbox )\r\n\r\ne0 = Ellipse( [1,0], 1, 1, 0, facecolor=""red"" )\r\nax.add_patch( e0 )\r\n\r\nt0 = time.time()\r\nnum = 0\r\nwhile True:\r\n   dt = time.time() - t0\r\n   if dt > 1:\r\n      print ""%d frames in %g sec (%g frames/sec)"" % ( num, dt, num/dt )\r\n      break\r\n\r\n   fig.canvas.restore_region( bg, fig.bbox )\r\n\r\n   x = num / 10.0\r\n   e0.center = [ math.cos( x ), math.sin( x ) ]\r\n\r\n   ax.draw_artist( e0 )\r\n   fig.canvas.blit( fig.bbox )\r\n\r\n   num += 1\r\n\r\n\r\nprint ""=================""\r\nprint ""Qt5 bug: red ellipse is not removed each time.""\r\nraw_input( ""Press return to remove red ellipse"" )\r\n\r\ne0.remove()\r\nfig.canvas.restore_region( bg, fig.bbox )\r\nfig.canvas.blit( fig.bbox )\r\n\r\nprint ""=================""\r\nprint ""The red ellipse should be gone - if it\'s still there, try to resize""\r\nprint ""the screen.  In some cases an extra \'draw\' happens here which ""\r\nprint ""causes the entire plot to redraw and look correct.  In Qt5agg, ""\r\nprint ""this shows the bug...""\r\nprint\r\nraw_input( ""Press return to exit"" )\r\n\r\n```'"
4784,97077065,cwebster2,WeatherGod,2015-07-24 15:26:02,2015-07-27 20:33:29,2015-07-27 20:33:28,closed,,,7,confirmed bug;mplot3d,https://api.github.com/repos/matplotlib/matplotlib/issues/4784,b'Incorrect polygon filling of mplot3d filled contouring',"b""I have a dataset with large gradients in a quantity I am plotting.  In many cases, this results in mis-filled contours when I use many contouring levels.  For example:\r\n\r\n[![enter image description here][1]][2]\r\n\r\nThis does *not* occur on 2D axes, even with 2 orders of magnitude more contouring levels.  I can reduce some of the fill errors by reducing the number of contouring levels or zooming in on the domain so the strong gradients aren't as relatively strong in figure space.  If I don't fill the contours, e.g. calling `contour` rather than `contourf` there are no errors.  This is restricted to the filling,\r\n\r\nHere is a script that should reproduce the problem for you.  Tested with matplotlib 1.4.3 and python 3.4.1.\r\n\r\n    #!/usr/bin/env python\r\n    import numpy as np\r\n    import matplotlib.pyplot as plt\r\n    import mpl_toolkits.mplot3d.axes3d as p3\r\n    \r\n    data=np.array([[53.9751,  51.5681,  50.7119,  51.1049,  51.5339,  51.4977,  51.2387,50.761,  50.1732,  49.8218,  49.5442,  48.936,  47.4498,  46.6484, 45.8542,  45.136,  44.5268,  44.071,  43.7665,  43.5928,  43.5269, 43.5385,  43.6053,  45.565,  47.0071,  46.8664,  47.372,  47.8324, 48.295,  48.731,  49.0522,  49.4001,  49.7111,  49.9919,  50.2527, 50.4928,  50.7135,  50.8831,  51.0806,  51.2683 ],\r\n                   [55.6671,  52.53,  50.7764,  50.5632,  51.2095,  51.5659,  51.521,  51.2143,  50.653,  50.2371,  49.989,  49.8089,  49.6058,  47.8355, 47.3124,  46.7346,  46.1616,  45.6498,  45.2462,  44.967,  44.8005, 44.7284,  44.7295,  44.7869,  46.959,  45.0194,  46.73,  48.0766, 48.9395,  49.5325,  49.8498,  50.1887,  50.4798,  50.7406,  50.9808, 51.2003,  51.4074,  51.555,  51.7429,  51.9218 ],\r\n                   [56.6513,  53.5919,  51.2774,  50.3133,  50.7705,  51.533,  51.8287, 51.7083,  51.2816,  50.7933,  50.4806,  50.2671,  50.1009,  50.0096, 49.9052,  49.4698,  47.4655,  47.0717,  46.6849,  46.3583,  46.1122, 45.952,  45.8678,  45.8485,  45.8811,  45.956,  46.0634,  47.2225, 49.4363,  50.2482,  50.527,  50.8558,  51.1358,  51.3809,  51.607, 51.8179,  52.0161,  52.1454,  52.3263,  52.497 ],\r\n                   [57.078,  54.3224,  52.0759,  50.4679,  50.4677,  51.297,  52.0284, 52.1594,  51.9395,  51.5518,  51.1419,  50.8765,  50.6686,  50.5101, 50.4078,  50.3473,  50.3592,  50.3813,  49.7504,  47.55,  47.324, 47.1365,  46.9978,  46.9119,  46.8743,  46.8811,  46.9257,  47.0013, 50.0148,  50.9106,  51.1133,  51.4282,  51.7064,  51.943,  52.1587, 52.3597,  52.4789,  52.6631,  52.8359,  52.9966 ],\r\n                   [57.3835,  54.9025,  52.8571,  50.9842,  50.5197,  51.1494,  52.0599, 52.4732,  52.4716,  52.2656,  51.9535,  51.6068,  51.3466,  51.1513, 50.9708,  50.8321,  50.7639,  50.7944,  50.8817,  49.8122,  48.2038, 48.086,  47.9704,  47.8735,  47.8035,  47.7644,  47.7574,  47.7803, 50.8194,  51.5486,  51.6645,  51.9745,  52.2349,  52.4508,  52.6481, 52.8317,  52.9412,  53.1097,  53.2699,  53.4171 ],\r\n                   [57.9157,  55.6092,  53.6306,  51.8011,  50.9372,  51.2615,  52.1406, 52.7436,  52.8528,  52.7829,  52.6322,  52.403,  52.1149,  51.866, 51.6624,  51.4773,  51.317,  51.2183,  51.2153,  51.1367,  48.5913, 48.6216,  48.6218,  48.5951,  48.5589,  48.527,  48.5081,  50.5185, 51.6998,  51.905,  52.2258,  52.4891,  52.7062,  52.8926,  53.0655, 53.2251,  53.3262,  53.4755,  53.6169,  53.7471 ],\r\n                   [58.6093,  56.432,  54.307,  52.6277,  51.584,  51.6482,  52.3762, 53.0685,  53.2545,  53.217,  53.1356,  53.0351,  52.8481,  52.6154, 52.39,  52.177,  51.9977,  51.843,  51.7172,  51.4587,  48.7481,  48.7984, 48.864,  48.9291,  48.9843,  49.0228,  50.496,  51.8667,  52.3404, 52.4759,  52.6889,  52.8851,  53.0525,  53.2072,  53.354,  53.4576, 53.5925,  53.7217,  53.8432,  53.956 ],\r\n                   [58.9719,  56.9885,  54.8768,  53.3526,  52.3025,  52.2089,  52.7762, 53.4444,  53.6768,  53.6706,  53.5692,  53.5162,  53.4373,  53.2886, 53.1113,  52.9065,  52.6988,  52.5193,  52.3544,  52.0384,  48.9624, 48.9653,  49.0005,  49.0574,  49.1258,  50.692,  51.9726,  52.4309, 52.699,  52.8194,  52.9845,  53.1336,  53.2669,  53.393,  53.5118, 53.6086,  53.7213,  53.8293,  53.9308,  54.026 ],\r\n                  [58.5754,  56.945,  55.068,  53.7798,  52.9469,  52.854,  53.3136,53.8929,  54.1205,  54.1178,  54.0128,  53.9289,  53.8906,  53.8239,53.717,  53.5724,  53.3818,  53.1892,  53.009,  49.3078,  49.2524,49.2165,  49.2032,  49.2187,  50.463,  51.9497,  52.4487,  52.7041,52.8358,  52.9776,  53.1101,  53.2293,  53.3419,  53.4487,  53.5401,53.6365,  53.7301,  53.8205,  53.9062,  53.9869 ],\r\n                  [57.623,  56.547,  55.0117,  54.0512,  53.5372,  53.5246,  53.927,54.3868,  54.5828,  54.5811,  54.4501,  54.3235,  54.2626,  54.2334,54.1802,  54.1137,  53.9897,  53.8202,  49.796,  49.6864,  49.5946,49.5216,  49.4703,  49.4432,  51.8479,  52.5574,  52.8359,  52.9722,53.0827,  53.1826,  53.2747,  53.3597,  53.4405,  53.5138,  53.5944,53.6751,  53.7536,  53.829,  53.9019,  53.9721 ],\r\n                  [56.902,  56.0005,  54.9159,  54.3352,  54.123,  54.2014,  54.5659,54.8917,  55.0307,  55.0139,  54.8838,  54.7044,  54.5863,  54.5548,54.5258,  54.4957,  54.4633,  51.4821,  50.1897,  50.0758,  49.9683,49.8704,  49.7842,  51.5064,  52.7625,  53.0724,  53.1926,  53.2682,53.3404,  53.4119,  53.4831,  53.5517,  53.6169,  53.6763,  53.7383,53.8009,  53.8644,  53.9281,  53.9905,  54.0517 ],\r\n                  [56.3455,  55.5524,  54.9336,  54.6836,  54.703,  54.8657,  55.1749,55.3844,  55.4521,  55.4019,  55.2622,  55.0281,  54.8981,  54.6591,54.7866,  54.7678,  54.7654,  54.0436,  54.2302,  52.2533,  50.3305,50.2276,  50.1268,  52.9617,  53.4395,  53.5504,  53.5481,  53.5524,53.5699,  53.6014,  53.644,  53.6931,  53.7445,  53.7996,  53.8548,53.9097,  53.9655,  54.0229,  54.0813,  54.1393 ],\r\n                  [55.7493,  55.3019,  55.1012,  55.0906,  55.234,  55.4751,  55.7134,55.8462,  55.8461,  55.7425,  55.5725,  55.3535,  55.1612,  54.958,55.0193,  54.9584,  54.9531,  54.8886,  54.8256,  54.2211,  50.6477,50.5564,  53.0546,  53.8592,  54.08,  54.0288,  53.9509,  53.8796,53.8307,  53.8073,  53.8034,  53.8142,  53.8383,  53.8725,  53.9128,53.9558,  54.0013,  54.0497,  54.103,  54.1597 ],\r\n                  [55.2575,  55.1664,  55.3165,  55.5004,  55.7345,  55.9901,  56.1852,56.2599,  56.2027,  56.0454,  55.818,  55.5754,  55.302,  55.2083,55.0224,  55.1415,  55.0656,  55.0446,  55.0263,  54.7728,  50.8924,53.4671,  54.2587,  54.5146,  54.6171,  54.519,  54.3857,  54.2497,54.1355,  54.0509,  53.9932,  53.9584,  53.941,  53.939,  53.9527,53.9798,  54.0111,  54.0465,  54.0868,  54.1339 ],\r\n                  [54.8665,  55.1533,  55.5095,  55.8512,  56.1541,  56.3995,  56.5593,56.6009,  56.5079,  56.3001,  56.0178,  55.7187,  55.448,  55.063,55.2016,  55.2116,  55.1817,  55.112,  55.1099,  55.0299,  54.3358,54.6966,  54.9199,  55.0156,  55.0728,  54.975,  54.8299,  54.6609,54.493,  54.3475,  54.2349,  54.1517,  54.0928,  54.0516,  54.0245,54.013,  54.0206,  54.0404,  54.0667,  54.0989 ],\r\n                  [54.2676,  55.1132,  55.6112,  56.09,  56.428,  56.6661,  56.8056,56.8374,  56.7339,  56.4923,  56.1474,  55.7977,  55.4805,  55.2341,54.8999,  55.2662,  55.2927,  55.185,  55.1237,  55.1268,  54.9772,55.1418,  55.2612,  55.3333,  55.379,  55.3244,  55.2153,  55.0629,54.881,  54.6926,  54.523,  54.3866,  54.2855,  54.2118,  54.1583,54.1191,  54.0935,  54.0834,  54.0885,  54.1057 ],\r\n                  [54.1771,  55.0795,  55.7075,  56.1772,  56.5183,  56.7522,  56.8898,56.9315,  56.8427,  56.6056,  56.2317,  55.8095,  55.4436,  55.183,55.0284,  54.9504,  55.2833,  55.2563,  55.1498,  55.1342,  55.1331,55.259,  55.3705,  55.4452,  55.4955,  55.5087,  55.4697,  55.3766,55.2324,  55.049,  54.8485,  54.6578,  54.4995,  54.3822,  54.3002,54.2427,  54.2022,  54.1749,  54.1598,  54.1561 ],\r\n                  [53.9112,  54.85,  55.6641,  56.0844,  56.4062,  56.6232,  56.757,56.8149,  56.7669,  56.5754,  56.2311,  55.785,  55.366,  55.0104,54.812,  54.8845,  55.1273,  55.2339,  55.1976,  55.1049,  55.0913,55.1843,  55.3048,  55.4076,  55.4709,  55.518,  55.5455,  55.5329,55.4636,  55.3349,  55.1595,  54.9529,  54.7462,  54.5681,  54.4342,54.3439,  54.2848,  54.2446,  54.2222,  54.2135 ],\r\n                  [53.9368,  54.9196,  55.4408,  55.7999,  56.0652,  56.2423,  56.348,56.4106,  56.4114,  56.3028,  56.0519,  55.6779,  55.2493,  54.8836,54.6592,  54.6347,  54.8341,  55.0606,  55.1396,  55.0967,  55.0325,55.0501,  55.1451,  55.2627,  55.3559,  55.4216,  55.4789,  55.5183,55.5245,  55.4779,  55.3701,  55.2072,  55.0029,  54.7876,  54.5915,54.4378,  54.3368,  54.2787,  54.2415,  54.2271 ],\r\n                  [53.9325,  54.6506,  55.0421,  55.2926,  55.4603,  55.5679,  55.6285,55.6792,  55.7234,  55.731,  55.639,  55.3923,  55.043,  54.6845,54.4188,  54.3242,  54.4606,  54.7449,  54.9548,  55.0171,  55.0047,54.9454,  54.9666,  55.0651,  55.1828,  55.2677,  55.3308,  55.3914,55.438,  55.4544,  55.4277,  55.3385,  55.1907,  54.9981,  54.7786,54.5691,  54.4013,  54.2898,  54.233,  54.1994 ] ])\r\n    \r\n    fig = plt.figure()\r\n    ax = fig.add_subplot(111,projection='3d')\r\n    X,Y = np.meshgrid(np.arange(-30.0,-20.0,0.25), np.arange(20.0,25,0.25))\r\n    ax.contourf(X,Y,data,zdir='z',offset=0, levels=np.arange(0,75,1))\r\n    ax.set_zlim(0.0,2.0)\r\n    plt.savefig('testfig.png')\r\n    plt.close()\r\n\r\nwhich produces the image:\r\n\r\n[![enter image description here][3]][3]\r\n\r\nIn this case, reducing the contouring level will fix the mis-fill but for the plots I want to produce this isn't a feasible option.\r\n\r\n  [1]: http://i.stack.imgur.com/UnC1b.png\r\n  [2]: http://i.stack.imgur.com/UnC1b.png\r\n  [3]: http://i.stack.imgur.com/y5vzB.png"""
4751,96388412,chriswl,WeatherGod,2015-07-21 18:43:21,2015-07-22 14:53:51,2015-07-22 14:53:50,closed,tacaswell,v1.5.0,3,confirmed bug;Release critical,https://api.github.com/repos/matplotlib/matplotlib/issues/4751,b'Bar plot seems not to understand numpy.uint8 dtype',"b'When I do \r\n\r\n    from matplotlib import pyplot as plt\r\n    import numpy as np\r\n    plt.bar(np.array([0, 1, 2, 3], dtype=np.uint8), [2, 3, 4, 5])\r\n\r\nI get an unexpected result -- the values for the bar centers are interpreted as `[0, 257, 258, 259]`. Similar things do not happen with `plt.plot` and `plt.scatter`. The environment is matplotlib v. 1.4.3, numpy v. 1.9.2. in an IPython notebook, IPython v. 3.2.\r\n\r\nThis is a screenshot of the above example after doing `plt.gca().set_xlim([250, 260])`.\r\n![screen shot 2015-07-21 at 20 40 22](https://cloud.githubusercontent.com/assets/2842628/8809410/c6290570-2fe8-11e5-84fa-2b16735137dd.png)'"
4470,80678174,tacaswell,tacaswell,2015-05-25 21:41:11,2015-10-26 19:29:55,2015-07-03 15:18:21,closed,tacaswell,2.0 (style change major release),0,backend/pdf;confirmed bug;text/unicode,https://api.github.com/repos/matplotlib/matplotlib/issues/4470,b'Issue encoding type1 fonts with python 3',"b'\r\nInitially reported at https://github.com/ContinuumIO/anaconda-issues/issues/337\r\n\r\n```python\r\nimport numpy as np\r\nimport matplotlib as mpl\r\nimport matplotlib.pylab as plt\r\n\r\nmpl.rcdefaults()\r\n# This doesn\'t work\r\n mpl.rcParams[\'font.serif\'] = ""Times, serif""\r\n# This does\r\n#mpl.rcParams[\'font.serif\'] = ""Bitstream Vera Serif, serif""\r\nmpl.rcParams[\'text.usetex\'] = ""true""\r\n\r\nx = np.random.normal(size=100)\r\ny = np.random.normal(size=100)\r\nplt.scatter(x, y)\r\nplt.xlabel(""$\\gamma$"")\r\nplt.savefig(""foo.png"")\r\nprint(""foo.png saved"")\r\nplt.savefig(""bar.pdf"")\r\nprint(""bar.pdf saved"")\r\n```\r\n\r\ntraceback: \r\n\r\n```python\r\n\r\n---------------------------------------------------------------------------\r\nAttributeError                            Traceback (most recent call last)\r\n<ipython-input-10-3a778cad97aa> in <module>()\r\n----> 1 exec(compile(open(\'/tmp/ipython-56520H0.py\').read(), \'/tmp/ipython-56520H0.py\', \'exec\')) # PYTHON-MODE\r\n\r\n/tmp/ipython-56520H0.py in <module>()\r\n\r\n/home/tcaswell/source/my_source/matplotlib/lib/matplotlib/pyplot.py in savefig(*args, **kwargs)\r\n    577 def savefig(*args, **kwargs):\r\n    578     fig = gcf()\r\n--> 579     res = fig.savefig(*args, **kwargs)\r\n    580     draw()   # need this if \'transparent=True\' to reset colors\r\n    581     return res\r\n\r\n/home/tcaswell/source/my_source/matplotlib/lib/matplotlib/figure.py in savefig(self, *args, **kwargs)\r\n   1507             self.set_frameon(frameon)\r\n   1508 \r\n-> 1509         self.canvas.print_figure(*args, **kwargs)\r\n   1510 \r\n   1511         if frameon:\r\n\r\n/home/tcaswell/source/my_source/matplotlib/lib/matplotlib/backends/backend_qt5agg.py in print_figure(self, *args, **kwargs)\r\n    158 \r\n    159     def print_figure(self, *args, **kwargs):\r\n--> 160         FigureCanvasAgg.print_figure(self, *args, **kwargs)\r\n    161         self.draw()\r\n    162 \r\n\r\n/home/tcaswell/source/my_source/matplotlib/lib/matplotlib/backend_bases.py in print_figure(self, filename, dpi, facecolor, edgecolor, orientation, format, **kwargs)\r\n   2223                 orientation=orientation,\r\n   2224                 bbox_inches_restore=_bbox_inches_restore,\r\n-> 2225                 **kwargs)\r\n   2226         finally:\r\n   2227             if bbox_inches and restore_bbox:\r\n\r\n/home/tcaswell/source/my_source/matplotlib/lib/matplotlib/backends/backend_pdf.py in print_pdf(self, filename, **kwargs)\r\n   2513                 file.endStream()\r\n   2514             else:            # we opened the file above; now finish it off\r\n-> 2515                 file.close()\r\n   2516 \r\n   2517 \r\n\r\n/home/tcaswell/source/my_source/matplotlib/lib/matplotlib/backends/backend_pdf.py in close(self)\r\n    552         self.endStream()\r\n    553         # Write out the various deferred objects\r\n--> 554         self.writeFonts()\r\n    555         self.writeObject(self.alphaStateObject,\r\n    556                          dict([(val[0], val[1])\r\n\r\n/home/tcaswell/source/my_source/matplotlib/lib/matplotlib/backends/backend_pdf.py in writeFonts(self)\r\n    648                 matplotlib.verbose.report(\'Writing Type-1 font\', \'debug\')\r\n    649                 fonts[Fx] = self.embedTeXFont(filename,\r\n--> 650                                               self.dviFontInfo[filename])\r\n    651             else:\r\n    652                 # a normal TrueType font\r\n\r\n/home/tcaswell/source/my_source/matplotlib/lib/matplotlib/backends/backend_pdf.py in embedTeXFont(self, texname, fontinfo)\r\n    713         t1font = type1font.Type1Font(fontinfo.fontfile)\r\n    714         if fontinfo.effects:\r\n--> 715             t1font = t1font.transform(fontinfo.effects)\r\n    716         fontdict[\'BaseFont\'] = Name(t1font.prop[\'FontName\'])\r\n    717 \r\n\r\n/home/tcaswell/source/my_source/matplotlib/lib/matplotlib/type1font.py in transform(self, effects)\r\n    334                 if six.PY3 and isinstance(value, int):\r\n    335                     value = chr(value)\r\n--> 336                 value = value.encode(\'latin-1\')\r\n    337                 buffer.write(value)\r\n    338             result = buffer.getvalue()\r\n\r\nAttributeError: \'bytes\' object has no attribute \'encode\'\r\n\r\n```'"
4447,78503747,rmccampbell,tacaswell,2015-05-20 12:25:45,2015-07-08 01:30:42,2015-07-08 01:30:41,closed,mfitzp,2.1 (next point release),2,confirmed bug;GUI/Qt;widgets/UI;wishlist,https://api.github.com/repos/matplotlib/matplotlib/issues/4447,"b""Qt figure options widget can't undo step linestyle""","b'If you set the ""step"" linestyle using the Qt Figure Options dialog, it can\'t be undone. This seems to be because step is actually a drawstyle, and is treated separately from the other options. The ""default"" drawstyle should be added to the combo box so it can be reset, or the default option could be appended to the other linestyles. '"
4445,78238476,anntzer,tacaswell,2015-05-19 20:25:26,2016-03-26 02:52:57,2016-03-26 02:52:54,closed,,2.1 (next point release),2,confirmed bug,https://api.github.com/repos/matplotlib/matplotlib/issues/4445,b'Two issues with the axes offset indicator',"b'Consider:\r\n```\r\nplt.plot(10001 + np.arange(10), 10001 + np.arange(10))\r\nplt.setp(plt.gca().get_yticklabels(), visible=False)\r\nplt.show()\r\n```\r\n\r\nThe `x` axis is labeled 0..9 + 1.0001e4.  I\'d suggest changing this to 1..10 + 1.0000e4, which is IMO much more legible.\r\n\r\nThe `y` axis doesn\'t show the tick labels, as expected, but the offset indicator (""+1.0001e4"") is still there.  `setp(get_{x,y}ticklabels(), visible=False)` is certainly a commonly used approach (e.g. by `SubplotBase.label_outer()`).\r\nWhat I believe the correct solution, which is also set `offsetText` (which can be obtained by `get_offset_text()`) to invisible, is a bit obscure (and not mentioned in the docs).'"
4437,77343208,divenex,tacaswell,2015-05-17 16:27:18,2015-07-16 02:41:00,2015-07-16 02:40:58,closed,,v1.5.0,2,confirmed bug,https://api.github.com/repos/matplotlib/matplotlib/issues/4437,b'tricontour and tricontourf hang',"b'tricontour and tricontourf can hang and enter an infinite loop in special circumstances. I give below a minimal working example reproducing the problem with Python 3.4.2, Matplotlib 1.4.3 and Numpy 1.9.2. The problem seems to be due to nearly collinear points, in fact it disappear by randomly perturbing the (x, y) coordinates by a minimal amount. In the example below, the problem also disappear by simply changing the rotation angle theta from 25 to 30 degrees.\r\n\r\n    import matplotlib.pyplot as plt\r\n    import numpy as np\r\n\r\n    xi = np.linspace(-2, 2, 100)\r\n    x, y = map(np.ravel, np.meshgrid(xi, xi))\r\n    z = np.exp(-x**2 - y**2)\r\n\r\n    w = x > y - 1\r\n    x, y, z = x[w], y[w], z[w]\r\n\r\n    theta = np.radians(25)\r\n    x1 = x*np.cos(theta) - y*np.sin(theta)\r\n    y1 = x*np.sin(theta) + y*np.cos(theta)\r\n\r\n    plt.tricontour(x1, y1, z, 15, linewidths=0.5)\r\n\r\n\r\n'"
4421,75709300,tritemio,efiring,2015-05-12 19:22:05,2015-05-13 17:56:25,2015-05-13 17:56:24,closed,tacaswell,v1.5.0,7,confirmed bug,https://api.github.com/repos/matplotlib/matplotlib/issues/4421,"b""IPython Notebook: irregular marker edge for 'o'""","b""In the notebook, using `%matplotlib inline`, plotting circle markers (`'o'`) with size of 7 results in a rendering error:\r\n\r\n    plt.plot([1,2,3,4], [3,1,2,4], 'o', ms=7)\r\n\r\n![image](https://cloud.githubusercontent.com/assets/4156237/7596234/0fe02678-f8a1-11e4-9613-583b087a7427.png)\r\n\r\nThe problem is present also in the png produced by `savefig`.\r\n\r\nChanging the marker size to 6 or 8 results in correct rendering.\r\n\r\nThis rendering issue is very annoying also because the `ms=7` happens to be the default marker size in seaborn. In fact, I reported the bug there first (https://github.com/mwaskom/seaborn/issues/557)."""
4323,67626350,anntzer,efiring,2015-04-10 16:00:46,2015-05-13 17:59:05,2015-05-13 17:59:04,closed,tacaswell,v1.5.0,9,confirmed bug;GUI/Qt;widgets/UI,https://api.github.com/repos/matplotlib/matplotlib/issues/4323,"b'seaborn.tsplot and matplotlib\'s ""Curve lines and axes parameters"" editor'","b'Currently, trying to edit curve lines and axes parameters (the checkbox with a green tick on the matplotlib toolbar) for a `seaborn.tsplot` fails with the following traceback:\r\n```\r\n$ ipython --pylab\r\nPython 3.4.3 (default, Mar 25 2015, 17:13:50) \r\nType ""copyright"", ""credits"" or ""license"" for more information.\r\n\r\nIPython 3.0.0 -- An enhanced Interactive Python.\r\n?         -> Introduction and overview of IPython\'s features.\r\n%quickref -> Quick reference.\r\nhelp      -> Python\'s own help system.\r\nobject?   -> Details about \'object\', use \'object??\' for extra details.\r\nromUsing matplotlib backend: Qt5Agg\r\nUsing matplotlib backend: Qt5Agg\r\n se\r\nIn [1]: from seaborn import *; tsplot([1, 2])\r\nOut[1]: <matplotlib.axes._subplots.AxesSubplot at 0x7f0262043d30>\r\n# <------ click on green tick\r\nIn [2]: Traceback (most recent call last):\r\n  File ""/usr/lib/python3.4/site-packages/matplotlib/backends/backend_qt5.py"", line 653, in edit_parameters\r\n    figureoptions.figure_edit(axes, self)\r\n  File ""/usr/lib/python3.4/site-packages/matplotlib/backends/qt_editor/figureoptions.py"", line 146, in figure_edit\r\n    apply=apply_callback)\r\n  File ""/usr/lib/python3.4/site-packages/matplotlib/backends/qt_editor/formlayout.py"", line 510, in fedit\r\n    dialog = FormDialog(data, title, comment, icon, parent, apply)\r\n  File ""/usr/lib/python3.4/site-packages/matplotlib/backends/qt_editor/formlayout.py"", line 416, in __init__\r\n    parent=self)\r\n  File ""/usr/lib/python3.4/site-packages/matplotlib/backends/qt_editor/formlayout.py"", line 389, in __init__\r\n    if len(data[0]) == 3:\r\nIndexError: list index out of range\r\n\r\nIf you suspect this is an IPython bug, please report it at:\r\n    https://github.com/ipython/ipython/issues\r\nor send an email to the mailing list at ipython-dev@scipy.org\r\n\r\nYou can print a more detailed traceback right now with ""%tb"", or use ""%debug""\r\nto interactively debug it.\r\n\r\nExtra-detailed tracebacks for bug-reporting purposes can be enabled via:\r\n    %config Application.verbose_crash=True\r\n```\r\n\r\nIt is not clear to me whether the issue is on matplotlib\'s side or on seaborn\'s side, so this is crossposted as mwaskom/seaborn#508.'"
4318,67015467,jezemine,efiring,2015-04-07 23:49:29,2015-07-17 10:16:51,2015-07-17 00:35:51,closed,efiring,2.1 (next point release),23,confirmed bug,https://api.github.com/repos/matplotlib/matplotlib/issues/4318,b'pyplot.savefig fails with ValueError: cannot convert float NaN to integer',"b'I think this is happening because I am plotting a gaussian that is very narrow compared to the x range.  Still it seems failing here is bad behavior.\r\n\r\nhere is some code that reproduces the problem, taken from IPython notebook:\r\n\r\n```python\r\n    %matplotlib inline\r\n    import matplotlib.pyplot as plt\r\n    from scipy.stats import norm as scipy_stats_norm\r\n    from math import sqrt\r\n    \r\n    plt.clf()\r\n    fig, ax = plt.subplots()\r\n    \r\n    max_x = 1100  # this fails\r\n    #max_x = 1000  # this works\r\n    x = np.linspace(-max_x, max_x, 300) \r\n    \r\n    mean = -0.0938\r\n    stdev = sqrt(0.008812)\r\n    ax.plot(x, scipy_stats_norm.pdf(x, loc=mean, scale=stdev), color=\'red\', linewidth=2)\r\n    \r\n    ax.set_yticklabels([])\r\n    ax.set_xlim(-max_x, max_x)\r\n    \r\n    filename = \'/tmp/fail.png\'\r\n    plt.savefig(filename, bbox_inches=\'tight\')\r\n    plt.show()\r\n```\r\n\r\nHere\'s the result:\r\n\r\n```python\r\n  File ""/opt/datasci-python/lib/python2.7/site-packages/matplotlib/pyplot.py"", line 561, in savefig\r\n    return fig.savefig(*args, **kwargs)\r\n  File ""/opt/datasci-python/lib/python2.7/site-packages/matplotlib/figure.py"", line 1421, in savefig\r\n    self.canvas.print_figure(*args, **kwargs)\r\n  File ""/opt/datasci-python/lib/python2.7/site-packages/matplotlib/backend_bases.py"", line 2167, in print_figure\r\n    **kwargs)\r\n  File ""/opt/datasci-python/lib/python2.7/site-packages/matplotlib/backends/backend_agg.py"", line 505, in print_png\r\n    FigureCanvasAgg.draw(self)\r\n  File ""/opt/datasci-python/lib/python2.7/site-packages/matplotlib/backends/backend_agg.py"", line 451, in draw\r\n    self.figure.draw(self.renderer)\r\n  File ""/opt/datasci-python/lib/python2.7/site-packages/matplotlib/artist.py"", line 55, in draw_wrapper\r\n    draw(artist, renderer, *args, **kwargs)\r\n  File ""/opt/datasci-python/lib/python2.7/site-packages/matplotlib/figure.py"", line 1034, in draw\r\n    func(*args)\r\n  File ""/opt/datasci-python/lib/python2.7/site-packages/matplotlib/artist.py"", line 55, in draw_wrapper\r\n    draw(artist, renderer, *args, **kwargs)\r\n  File ""/opt/datasci-python/lib/python2.7/site-packages/matplotlib/axes.py"", line 2086, in draw\r\n    a.draw(renderer)\r\n  File ""/opt/datasci-python/lib/python2.7/site-packages/matplotlib/artist.py"", line 55, in draw_wrapper\r\n    draw(artist, renderer, *args, **kwargs)\r\n  File ""/opt/datasci-python/lib/python2.7/site-packages/matplotlib/axis.py"", line 1096, in draw\r\n    tick.draw(renderer)\r\n  File ""/opt/datasci-python/lib/python2.7/site-packages/matplotlib/artist.py"", line 55, in draw_wrapper\r\n    draw(artist, renderer, *args, **kwargs)\r\n  File ""/opt/datasci-python/lib/python2.7/site-packages/matplotlib/axis.py"", line 241, in draw\r\n    self.label1.draw(renderer)\r\n  File ""/opt/datasci-python/lib/python2.7/site-packages/matplotlib/artist.py"", line 55, in draw_wrapper\r\n    draw(artist, renderer, *args, **kwargs)\r\n  File ""/opt/datasci-python/lib/python2.7/site-packages/matplotlib/text.py"", line 598, in draw\r\n    ismath=ismath, mtext=self)\r\n  File ""/opt/datasci-python/lib/python2.7/site-packages/matplotlib/backends/backend_agg.py"", line 188, in draw_text\r\n    font.get_image(), np.round(x - xd), np.round(y + yd) + 1, angle, gc)\r\nValueError: cannot convert float NaN to integer\r\n```'"
4309,66223591,ezbc,jenshnielsen,2015-04-03 20:38:50,2015-04-19 17:04:18,2015-04-19 17:04:16,closed,tacaswell,v1.5.0,2,confirmed bug,https://api.github.com/repos/matplotlib/matplotlib/issues/4309,b'Bbox overlaps method returns True for NaN vertices ',"b""Method overlaps(other) from matplotlib.transforms.BboxBase returns True when checked against Bbox with NaN vertices. \r\n\r\n```python\r\n# Take two bboxes with real-valued vertices which do not overlap\r\n# By setting one bbox's vertices to np.nan, the bbox's then overlap.\r\nimport numpy as np\r\nimport matplotlib.pyplot as plt\r\n\r\nplt.close(); plt.clf()\r\nfig, ax = plt.subplots(1)\r\nax.plot(range(10), range(10))\r\nfig.canvas.draw()\r\nbbox1 = ax.get_xticklabels()[0].get_window_extent()\r\nbbox2 = ax.get_xticklabels()[1].get_window_extent()\r\nprint('Overlap before nan values', bbox1.overlaps(bbox2))\r\noverlap = bbox2.set_points(np.array([[np.nan, np.nan], [np.nan, np.nan]]))\r\nprint('Overlap after nan values', bbox1.overlaps(bbox2))\r\n```\r\n\r\n[TAC edit markup]"""
4303,65684342,Acanthostega,tacaswell,2015-04-01 13:28:32,2015-04-03 17:45:29,2015-04-03 17:45:28,closed,,v1.5.0,4,confirmed bug;Difficulty: Easy;GUI/Qt,https://api.github.com/repos/matplotlib/matplotlib/issues/4303,b'Labels become colors in figure options in qt backends',"b'Hi everyone,\r\n\r\nI noticed a small issue in the implementation of the figure options panel inside the navigation tool bar for qt. If a plot as a name of a valid color in matplotlib, the field in the figure options becomes a color field and the label is converted into an hexadecimal color. The name of the curve is then affected by this change, since a later call to legend show that it has the hexadecimal color name. Since it is frequent I think to make plots with one letter name (y vs x), it would be nice to correct it.\r\n\r\nThe problem, looking at the source, is that the formlayout code has been modified to check if the value in a field is a valid matplotlib color, and if it is the case, returns a color field, converting the name of the color into hexadecimal. I think that such things should not be checked inside the formlayout code, but that colors should be explicitly converted into valid text color before submitting them to create a layout, for the field that are colors (here inside matplotlib.backend.qt_editor.figureoptions.py).\r\n\r\nThe problem appears with all fields. Opening the panel, setting the axes title to ""y"", validating and closing, reopening again the panel shows the problem.\r\n\r\nI can make a PR if you want but not now (I must read the guidelines before...)'"
4283,64617533,dryo,mfitzp,2015-03-26 19:45:43,2015-10-26 19:29:55,2015-06-10 15:59:49,closed,,2.0 (style change major release),9,confirmed bug;GUI/Qt;widgets/UI,https://api.github.com/repos/matplotlib/matplotlib/issues/4283,b'Memory hole when using Cursor widget with Qt (PySide) and useblit=True on Windows',"b""I'm using matplotlib with PySide and I managed to crash the program by moving the mouse. ;)\r\n\r\nI made a minimal example (see below) that triggers the problem. Just run it and move your mouse over the canvas keeping the memory consumption under observation. You will see significant increase when moving the mouse.\r\n\r\nThis only happens when setting `useblit=True` in the # MARKed line.\r\n\r\n```python\r\nimport sys\r\nfrom matplotlib.backends.backend_qt4agg import FigureCanvasQTAgg as FigureCanvas\r\nfrom matplotlib.figure import Figure\r\nfrom matplotlib.widgets import Cursor\r\nfrom PySide import QtGui\r\n\r\n\r\nclass MyApp(QtGui.QMainWindow):\r\n\r\n    def __init__(self):\r\n        # Init the object as a QMainWindow\r\n        super().__init__()\r\n\r\n        # create figure and plot something\r\n        fig = Figure()\r\n        ax = fig.add_subplot(111)\r\n        ax.plot([1, 5, 2, 3])\r\n        canvas = FigureCanvas(fig)\r\n        cursor = Cursor(ax, useblit=True)  # MARK\r\n\r\n        # set central widget of main window to the canvas of the figure\r\n        self.setCentralWidget(canvas)\r\n\r\n    def run(self):\r\n        self.show()\r\n        # enter main loop\r\n        myApp.exec_()\r\n\r\n\r\nif __name__ == '__main__':\r\n    myApp = QtGui.QApplication(sys.argv)\r\n    MyApp().run()\r\n```\r\n\r\nSome version info:\r\n* Windows 7 64bit\r\n* Python 3.4.2 64bit\r\n* Matplotlib 1.4.3 64bit\r\n* PySide 1.2.2 (installed via pip)"""
4280,64506065,kushal124,tacaswell,2015-03-26 11:37:00,2016-02-18 02:41:11,2016-02-18 02:36:03,closed,,2.0 (style change major release),8,backend/AGG;confirmed bug,https://api.github.com/repos/matplotlib/matplotlib/issues/4280,b'imsave reduces 1row from the image',"b""Steps to reproduce :\r\n```python\r\nim= np.zeros((481,321))\r\nplt.imsave('./test',im)\r\n\r\nimg = plt.imread('test.png')\r\n\r\nimg.shape[:2] != im.shape\r\n\r\nimg.shape is (480,321)\r\n```\r\n\r\nIt removes one row !"""
4262,63557943,megies,tacaswell,2015-03-22 17:45:03,2015-03-25 12:19:38,2015-03-23 03:16:08,closed,,v1.5.0,6,confirmed bug,https://api.github.com/repos/matplotlib/matplotlib/issues/4262,b'Bug in pyplot.plot() with zorder/solid_capstyle kwarg combinations',"b'There is a strange bug that changes the color used in the plot, happening to me for certain combinations of `zorder` and `solid_capstyle` kwargs. Happens to me on matplotlib 1.4.3 installed through anaconda/conda package (tried it with `TKAGG` and `QT4AGG`).\r\n\r\n```python\r\nimport matplotlib.pyplot as plt\r\n\r\nplt.subplot(321)\r\nplt.plot([0, 1], [0, 1], c=""black"", ls=""-"", lw=20, zorder=None)\r\nplt.title(""zorder=None"")\r\nplt.subplot(322)\r\nplt.plot([0, 1], [0, 1], c=""black"", ls=""-"", lw=20, zorder=None, solid_capstyle=""round"")\r\nplt.title(\'zorder=None, solid_capstyle=""round""\')\r\nplt.subplot(323)\r\nplt.plot([0, 1], [0, 1], c=""black"", ls=""-"", lw=20, zorder=10)\r\nplt.title(\'zorder=10\')\r\nplt.subplot(324)\r\nplt.plot([0, 1], [0, 1], c=""black"", ls=""-"", lw=20, zorder=10, solid_capstyle=""round"")\r\nplt.title(\'zorder=10, solid_capstyle=""round""\')\r\nplt.subplot(325)\r\nplt.plot([0, 1], [0, 1], c=""black"", ls=""-"", lw=20)\r\nplt.title(\'\')\r\nplt.subplot(326)\r\nplt.plot([0, 1], [0, 1], c=""black"", ls=""-"", lw=20, solid_capstyle=""round"")\r\nplt.title(\'solid_capstyle=""round""\')\r\n\r\nplt.tight_layout()\r\nplt.show()\r\n```\r\n![figure_1](https://cloud.githubusercontent.com/assets/1842780/6770551/72304b56-d0c3-11e4-9a63-1d38c99055d6.png)\r\n\r\n'"
4239,62609366,u55,mdboom,2015-03-18 07:00:06,2015-03-18 18:05:41,2015-03-18 18:05:40,closed,mdboom,v1.5.0,1,backend/pdf;confirmed bug,https://api.github.com/repos/matplotlib/matplotlib/issues/4239,b'Errorbar caps missing in master when saving to PDF',"b""Hi matplotlib developers,\r\n\r\nWhile working with master, I discovered that the errorbar caps are sometimes missing when saving a figure to PDF. Here is a minimal working example:\r\n\r\n```python\r\nimport numpy as np\r\nimport matplotlib.pyplot as plt\r\n\r\nN = 6\r\n\r\nplt.figure()\r\n# Caps are drawn\r\nplt.errorbar(np.arange(N),\r\n             np.ones(N),\r\n             np.ones(N),\r\n             )\r\n# Caps are missing\r\nplt.errorbar(np.arange(N+1),\r\n             np.ones(N+1) + 4,\r\n             np.ones(N+1),\r\n             )\r\nplt.xlim(-1,N+1)\r\nplt.ylim(-1,7)\r\nplt.savefig('bug.pdf')\r\n```\r\nTested with python 2.7 in Linux with matplotlib master.  The bug only shows up in master, version 1.4.3 is working correctly.  Strangely, this bug does not show up in other vector backends, such as svg, eps, or ps.  Stranger still, the appearance of the errorbar caps seems to depend on the number of points that are being drawn.  In the above example, 6 points is the magic number to see caps, while the caps are missing if the arrays are extended to 7 points.\r\n\r\nAs always, thanks for the help."""
4227,61963269,u55,efiring,2015-03-16 04:01:07,2015-04-19 19:49:57,2015-04-19 19:49:56,closed,tacaswell,v1.5.0,2,confirmed bug,https://api.github.com/repos/matplotlib/matplotlib/issues/4227,b'pcolorfast fails in master when image is not uniform',"b'Hi matplotlib developers,\r\n\r\nWhen using master with python 2.7 on Linux, I discovered that `pcolorfast` fails if the image grid is not uniformly spaced.  Here is a minimal working example:\r\n\r\n```python\r\nimport numpy as np\r\nimport matplotlib.pyplot as plt\r\n\r\nZ = np.arange(6).reshape((3, 2))\r\nX = np.array([0,1,2,10])  # <-- nonuniform array\r\nY = np.array([0,1,2])\r\n\r\nplt.figure()\r\nax = plt.subplot(111)\r\nax.pcolorfast(X,Y,Z.T)  # <-- fails\r\n# ax.pcolormesh(X,Y,Z.T)  # <-- works\r\n\r\nplt.show()\r\n```\r\n\r\nThis works fine in version 1.4.3, but fails in master with the following traceback:\r\n```python\r\nTraceback (most recent call last):\r\n  File ""/usr/lib/python2.7/site-packages/matplotlib/backends/backend_qt5.py"", line 341, in resizeEvent\r\n    self.draw()\r\n  File ""/usr/lib/python2.7/site-packages/matplotlib/backends/backend_qt5agg.py"", line 143, in draw\r\n    FigureCanvasAgg.draw(self)\r\n  File ""/usr/lib/python2.7/site-packages/matplotlib/backends/backend_agg.py"", line 475, in draw\r\n    self.figure.draw(self.renderer)\r\n  File ""/usr/lib/python2.7/site-packages/matplotlib/artist.py"", line 60, in draw_wrapper\r\n    draw(artist, renderer, *args, **kwargs)\r\n  File ""/usr/lib/python2.7/site-packages/matplotlib/figure.py"", line 1094, in draw\r\n    func(*args)\r\n  File ""/usr/lib/python2.7/site-packages/matplotlib/artist.py"", line 60, in draw_wrapper\r\n    draw(artist, renderer, *args, **kwargs)\r\n  File ""/usr/lib/python2.7/site-packages/matplotlib/axes/_base.py"", line 2096, in draw\r\n    a.draw(renderer)\r\n  File ""/usr/lib/python2.7/site-packages/matplotlib/artist.py"", line 60, in draw_wrapper\r\n    draw(artist, renderer, *args, **kwargs)\r\n  File ""/usr/lib/python2.7/site-packages/matplotlib/image.py"", line 881, in draw\r\n    im = self.make_image(renderer.get_image_magnification())\r\n  File ""/usr/lib/python2.7/site-packages/matplotlib/image.py"", line 869, in make_image\r\n    bg)\r\nTypeError: integer argument expected, got float\r\n```\r\n\r\nThe same failure occurs with all of the backends that I have tried; which are specificially the `wxagg`, `gtkagg`, `tkagg`, and `pdf` backends.\r\n\r\nThanks for the help.'"
4185,59700642,u55,efiring,2015-03-03 20:29:35,2015-03-04 22:48:51,2015-03-04 22:48:51,closed,mdboom,v1.5.0,7,confirmed bug,https://api.github.com/repos/matplotlib/matplotlib/issues/4185,b'Colorbar outline has broken path in vector backends',"b""Hi again,\r\nIn all of the vector graphics backends that I tested (pdf, eps, ps, svg), the colorbar outline is drawn with a broken path at the corner where the path starts and ends.  This does not happen with the raster graphic or interactive backends.  Here is a minimal working example:\r\n```python\r\nimport numpy as np\r\nimport matplotlib as mpl\r\nimport matplotlib.pyplot as plt\r\n\r\nmpl.rcParams.update({'axes.linewidth':10})\r\n\r\nfig = plt.figure(figsize=(8,6))\r\nax1 = fig.add_axes([0.05, 0.85, 0.9, 0.1])\r\nax2 = fig.add_axes([0.05, 0.65, 0.9, 0.1])\r\nax3 = fig.add_axes([0.05, 0.45, 0.9, 0.1])\r\nax4 = fig.add_axes([0.05, 0.25, 0.9, 0.1])\r\nax5 = fig.add_axes([0.05, 0.05, 0.9, 0.1])\r\n\r\ncmap = mpl.cm.jet\r\ncmap.set_under('w')\r\ncmap.set_over('w')\r\n\r\nim = ax1.pcolormesh(np.linspace(0,10,16).reshape((4,4)))\r\n\r\nplt.colorbar(im,cax=ax2,cmap=cmap,orientation='horizontal',\r\n             extend='both',extendfrac=0.5)\r\nplt.colorbar(im,cax=ax3,cmap=cmap,orientation='horizontal',\r\n             extend='both',)\r\nplt.colorbar(im,cax=ax4,cmap=cmap,orientation='horizontal',\r\n             extend='both',extendrect=True)\r\nplt.colorbar(im,cax=ax5,cmap=cmap,orientation='horizontal',\r\n             extend='neither')\r\n\r\nplt.savefig('colorbar_tip.pdf')\r\nplt.savefig('colorbar_tip.eps')\r\nplt.savefig('colorbar_tip.svg')\r\n```\r\nTested with matplotlib 1.4.3, and python 2.7, on Linux and Windows. I have exaggerated the axes linewidth to make the problem more visible.  Here is a screenshot of the PDF output:\r\n\r\n![colorbar_tip](https://cloud.githubusercontent.com/assets/8595627/6471312/c556da04-c1b7-11e4-8711-25ba893eb043.png)\r\n\r\nI have been able to fix this by making the following change to the `ColorbarBase` class in colorbar.py:\r\n```python\r\ndef _config_axes(self, X, Y):\r\n\r\n    ...\r\n\r\n    if self.outline is not None:\r\n        self.outline.remove()\r\n\r\n    xy2 = np.append(xy,xy[1:2,:],axis=0) # <-- added\r\n\r\n    self.outline = mpatches.Polygon(\r\n        xy2, edgecolor=mpl.rcParams['axes.edgecolor'], # <-- modified\r\n        facecolor='none',\r\n        linewidth=mpl.rcParams['axes.linewidth'],\r\n        closed=True,\r\n        zorder=2)\r\n\r\n    ...\r\n```\r\nThis essentially just copies the second point of the path to the end of the path.  However, I don't know if this is the best fix.  I don't know anything about vector graphics drawing directives, but it seems to me that there should be a builtin function to have paths wrap-around enough so that it creates a closed loop, including drawing the correct corner.  Clearly the `closed=True` option of the `mpatches.Polygon` is not doing this.\r\n\r\nAgain, thanks to anyone who looks into this."""
4180,59433031,miaocb,miaocb,2015-03-02 02:53:55,2015-10-26 19:29:54,2015-03-04 02:06:55,closed,,2.0 (style change major release),8,confirmed bug,https://api.github.com/repos/matplotlib/matplotlib/issues/4180,b'UniformTriRefiner gives uncorrect results for transposed arrays',"b""The following code repeats the problem. Array ele1 is same as ele2 except that it is transpose of ele0, but the refined triangles using ele1 is incorrect.\r\n\r\n#!/bin/env python\r\nimport numpy as np\r\nimport matplotlib.tri as tri\r\nimport matplotlib.pyplot as plt\r\n\r\nx = np.array([ 120.39299774,  120.59100342,  120.42900085,  120.31700134])\r\ny = np.array([ 33.99900055,  34.00899887,  34.18799973,  34.18399811])\r\n\r\nele0 = np.array([[2, 2], [0, 1], [3, 0]])\r\nele1 = ele0.transpose()      # ele1 is same as ele2 except that it is transpose of ele0\r\nele2 = np.array([[2, 0, 3], [2, 1, 0]])\r\n\r\ntriang1 = tri.Triangulation(x, y, ele1)\r\ntriang2 = tri.Triangulation(x, y, ele2)\r\n\r\nrefiner1 = tri.UniformTriRefiner(triang1)\r\nrefiner2 = tri.UniformTriRefiner(triang2)\r\n\r\nfine_triang1 = refiner1.refine_triangulation(subdiv=1)\r\nfine_triang2 = refiner2.refine_triangulation(subdiv=1)\r\n\r\nfig = plt.figure()\r\nha1 = fig.add_subplot(121)\r\nha1.set_aspect('equal')\r\nplt.triplot(fine_triang1, color='b', linewidth=0.5)\r\nplt.triplot(triang1, color='k', linewidth=1)\r\nplt.title('refine_triang1 is incorrect')\r\n\r\nha2 = fig.add_subplot(122)\r\nha2.set_aspect('equal')\r\nplt.triplot(fine_triang2, color='b', linewidth=0.5)\r\nplt.triplot(triang2, color='k', linewidth=1)\r\nplt.title('refine_triang2 is correct')\r\n\r\nplt.show()"""
4162,58906433,divenex,efiring,2015-02-25 14:08:58,2015-10-11 01:34:53,2015-03-08 01:08:46,closed,efiring,v1.5.0,11,API consistency;confirmed bug,https://api.github.com/repos/matplotlib/matplotlib/issues/4162,b'c=color not changing line color',"b""In Matplotlib 1.4.3\r\n\r\n```\r\nplt.plot([0,1], c='lime', linewidth=20)\r\n```\r\n\r\nproduces a blue line, while\r\n\r\n```\r\nplt.plot([0,1], color='lime', linewidth=20)\r\n```\r\n\r\nproduces a green one as expected.\r\n"""
4083,56954346,cpitclaudel,tacaswell,2015-02-08 15:03:50,2015-02-19 02:42:07,2015-02-19 02:42:06,closed,efiring,v1.5.0,25,API consistency;confirmed bug;Documentation;Py3k,https://api.github.com/repos/matplotlib/matplotlib/issues/4083,b'Marker edges are randomly missing',"b'The following code, run with version 1.3 or with 1.5.dev1, sometimes produces an entirely blank plot. This happens randomly; rerunning the script multiple times eventually produces the right output. This is on Linux, running python 3.4.0.\r\n\r\nIf the markers have a color, that color always appears. The edge sometimes are there, and sometimes aren\'t.\r\n\r\n```python\r\nfrom matplotlib import pyplot\r\n\r\nxs = [x for x in range(10)] * 10\r\nys = [x % 27 for x in range(10*10)]\r\n\r\npyplot.scatter(xs, ys, s=100, marker=\'o\', color=""none"", edgecolor=""red"")\r\npyplot.savefig(""test.png"")\r\n```\r\n\r\nIs there a workaround? Can I help diagnose this bug? The two pictures below were produced by running the exact same program.\r\n\r\n![dots](https://cloud.githubusercontent.com/assets/8181630/6096982/f4f95404-af78-11e4-850f-c609f7c3efca.png)\r\n![no-dots](https://cloud.githubusercontent.com/assets/8181630/6096981/f4f767b6-af78-11e4-8cb5-d431e5f28a38.png)\r\n\r\n\r\n\r\n\r\n\r\n'"
4076,56919374,MathieuDuponchelle,mdboom,2015-02-07 17:53:09,2015-02-11 19:21:35,2015-02-11 17:01:56,closed,mdboom,2.1 (next point release),8,confirmed bug;widgets/UI,https://api.github.com/repos/matplotlib/matplotlib/issues/4076,"b'contains() is broken with scatter plots with master, works with v1.4.3rc1'","b'```\r\n#!/usr/bin/python3\r\n\r\nfrom gi.repository import Gtk\r\nfrom matplotlib.figure import Figure\r\nfrom matplotlib.backends.backend_gtk3cairo import FigureCanvasGTK3Cairo as FigureCanvas\r\nfrom matplotlib.patches import Rectangle\r\n\r\nimport signal\r\n\r\nclass DrawPoints:\r\n    \'\'\'Creates random points, 2 axis on 1 figure on 1 canvas on init. Allows for drawing and zooming of points.\'\'\'\r\n    def __init__(self):\r\n        self.xs = [0, 500, 1300, 1400, 2000]\r\n        self.ys = [0, 1, 7, 6, 3]\r\n\r\n        self.fig = Figure()\r\n        self.ax = self.fig.add_axes ([0, 0, 1, 1], axisbg=\'None\')\r\n        self.canvas = FigureCanvas(self.fig)\r\n\r\n    def on_pick (self, event):\r\n        print (""got picked"")\r\n\r\n    def on_press(self, event):\r\n        print (self.paths.contains (event))\r\n\r\n    def draw(self):\r\n        \'\'\'Draws the ax-subplot\'\'\'\r\n        self.paths = self.ax.scatter (self.xs, self.ys, picker=True)\r\n        self.canvas.mpl_connect (\'pick_event\', self.on_pick)\r\n        self.cidpress = self.canvas.mpl_connect(\'button_press_event\', self.on_press)\r\n\r\nsignal.signal (signal.SIGINT, signal.SIG_DFL)\r\n\r\nwindow = Gtk.Window()\r\nwindow.connect(""delete-event"", Gtk.main_quit)\r\nwindow.set_default_size(1000, 600)\r\n\r\nbox = Gtk.Box(orientation=Gtk.Orientation.VERTICAL)\r\nwindow.add(box)\r\n\r\nscrolled = Gtk.ScrolledWindow ()\r\n\r\npoints = DrawPoints()\r\npoints.draw()\r\n\r\nscrolled.add (points.canvas)\r\n\r\nbox.pack_start(scrolled, True, True, 0)\r\n\r\nwindow.show_all()\r\nGtk.main()\r\n```'"
4053,55973317,olegarch,tacaswell,2015-01-29 23:28:43,2015-02-02 20:33:55,2015-02-02 02:34:33,closed,tacaswell,v1.4.3,8,confirmed bug,https://api.github.com/repos/matplotlib/matplotlib/issues/4053,"b""PowerNorm().__call__ doesn't work with scalar input value""",b'result[value<0] = 0; #fails if value is scalar'
4050,55928882,mdboom,tacaswell,2015-01-29 17:19:38,2015-03-03 18:43:57,2015-01-30 23:18:44,closed,,2.1 (next point release),0,confirmed bug,https://api.github.com/repos/matplotlib/matplotlib/issues/4050,b'Fix masked array handling',"b'This fixes #4049, and is an alternative to #4008.  Unlike #4008, this fixes the problem directly in `_fast_from_vertices_and_codes` rather than at a number of call sites that call it.  While it does make that function slower, it apparently needs the masked array treatment from all places that call it anyway, so sticking it right inside the function seems fine.\r\n\r\nIn the process of fixing this bug, it was discovered that a fix to handle NaNs in draw_markers (cf43d57) was not brought over from the 1.4.x branch (probably my fault, since merges of C++ code are really hairy right now).  This missing bugfix was papered over by the fact that NaNs were no longer being passed to `draw_markers`.\r\n\r\nLastly, this adds an optimization to the log scaling to use NaNs rather than masked arrays.  The original array is not touched, so this should be effectively the same thing, just without the large time and memory overhead of masked arrays.\r\n\r\nThis includes a test I shamelessly cherry-picked from #4008.'"
4049,55911179,astrofrog,tacaswell,2015-01-29 15:15:09,2015-01-30 23:18:45,2015-01-30 23:18:44,closed,mdboom,2.1 (next point release),7,confirmed bug;Duplicate,https://api.github.com/repos/matplotlib/matplotlib/issues/4049,b'Issue with plotting zeros in log space',"b""The following simple example shows an issues with zero values when calling ``loglog``:\r\n\r\n```\r\nimport matplotlib.pyplot as plt\r\n\r\nnu = [1e2, 1e3, 1e4, 1e5, 1e6, 1e7]\r\nfnu = [1, 1e-30, 1e-45, 0., 0., 0.]\r\n\r\nfig = plt.figure()\r\nax = fig.add_subplot(1,1,1)\r\nax.loglog(nu, fnu, color='blue')\r\nfig.savefig('mpl.png')\r\n```\r\n\r\nThe output is:\r\n\r\n![mpl](https://cloud.githubusercontent.com/assets/314716/5959827/8d0677cc-a7d1-11e4-8cd3-7227dee4a37a.png)\r\n\r\nOf course, zero is undefined in log space, but I don't understand why it defaults to plotting a value of 0.1 instead. Doing:\r\n\r\n```\r\nfnu = [1, 1e-30, 1e-45, np.nan, np.nan, np.nan]\r\n```\r\n\r\nDoes the right thing on the other hand. So maybe the best solution is to replace 0 values by np.nan inside ``loglog``?\r\n\r\nI am using matplotlib 1.5.x with Python 3.4."""
4043,55696104,duncanmmacleod,tacaswell,2015-01-28 00:20:37,2015-02-16 03:12:20,2015-02-16 03:12:19,closed,,v1.5.0,1,confirmed bug,https://api.github.com/repos/matplotlib/matplotlib/issues/4043,"b""tick_right() doesn't move scale factor""","b""The [`YAxis.tick_right()`](http://matplotlib.org/api/axis_api.html#matplotlib.axis.YAxis.tick_right) method doesn't move a scale factor when the formatter introduces one. The following minimal example should demonstrate that:\r\n\r\n```python\r\nimport numpy\r\nfrom matplotlib import pyplot\r\ndata = numpy.random.random(1e4) * 1e-22\r\nfig, axes = pyplot.subplots(2, 1, sharex=True)\r\naxes[0].plot(data)\r\naxes[1].plot(data ** (.5))\r\naxes[1].yaxis.set_label_position('right')\r\naxes[1].yaxis.tick_right()\r\n```\r\n\r\n![tick_right](https://cloud.githubusercontent.com/assets/1618530/5930102/c91db7fc-a650-11e4-931e-ac6013b4abe7.png)\r\n\r\nThe `1e-11` factor should ideally be on the right-hand-side with the tick labels."""
4024,55085086,dkirkby,tacaswell,2015-01-21 22:11:54,2015-10-09 18:33:52,2015-10-09 18:33:51,closed,mdboom,2.1 (next point release),4,confirmed bug;text,https://api.github.com/repos/matplotlib/matplotlib/issues/4024,b'Path effects applied to annotation text containing \\n',"b""I am using the following test program with mathplotlib 1.4.0 (via anaconda) on OS X 10.10.1:\r\n```\r\nimport matplotlib.pyplot as plt\r\nimport matplotlib.patheffects as pe\r\n\r\nplt.subplot(1,1,1)\r\nplt.annotate('line1\\nline2',xy=(0.5,0.5),xycoords='axes fraction',fontsize='x-large',\r\n\tpath_effects=[pe.withStroke(linewidth=1,foreground='r')])\r\nplt.show()\r\n```\r\nThis fails with:\r\n```\r\nAttributeError: GraphicsContextBase instance has no attribute 'draw_path'\r\n```\r\nRemoving the \\n from the text or removing the path_effects option both run as expected.  Any workarounds you can suggest are appreciated."""
3998,54216265,raoulbq,jenshnielsen,2015-01-13 16:44:01,2015-01-31 09:39:46,2015-01-31 09:39:45,closed,,2.1 (next point release),5,confirmed bug;Release critical,https://api.github.com/repos/matplotlib/matplotlib/issues/3998,b'Semilog plots with zero values',"b'Consider the following test code:\r\n```\r\nfrom numpy import *\r\nfrom matplotlib.pyplot import *\r\n\r\n\r\nx = arange(-10,10)\r\ny = (1.0 - 1.0/(x**2+1))**20\r\n\r\nfigure()\r\nsemilogy(x, y, ""-o"")\r\ngrid(True)\r\nsavefig(""test.png"")\r\n```\r\nCorrect Plot (the value y=0 at x=0 is masked out from y-log plot):\r\n![test_good](https://cloud.githubusercontent.com/assets/1503544/5724453/e65db9e4-9b4b-11e4-9766-c9196fc32c42.png)\r\n\r\nWrong Plot (spurious point at x=0 with y=1e-1):\r\n![test_wrong](https://cloud.githubusercontent.com/assets/1503544/5724445/e1b47da6-9b4b-11e4-98da-34fe5cbf778e.png)\r\n\r\nA `git bisect` tells me that:\r\n```\r\n91725d8665975de9a26d631445ab1448b0391e1a is the first bad commit\r\ncommit 91725d8665975de9a26d631445ab1448b0391e1a\r\nAuthor: Joel B. Mohler <joel@kiwistrawberry.us>\r\nDate:   Thu Aug 21 10:43:28 2014 -0400\r\n\r\n    use _fast_from_codes_and_verts in transform code\r\n```\r\n\r\nThe commit diff introduces the use of `_fast_from_codes_and_verts`,\r\nso the issue is probably somewhere deeper inside this function.\r\n'"
3982,53759172,tacaswell,pelson,2015-01-08 15:00:17,2015-07-09 13:54:39,2015-01-09 07:47:13,closed,pwuertz,v1.4.x,14,backend/pgf;confirmed bug,https://api.github.com/repos/matplotlib/matplotlib/issues/3982,b'pgf can not write to `BytesIO` [back port to 1.4.x]',b'Discovered as part of #3981'
3980,53704015,tacaswell,jenshnielsen,2015-01-08 01:22:04,2015-12-09 21:29:50,2015-12-09 21:29:49,closed,,,3,confirmed bug;GUI/wx;OS/Apple,https://api.github.com/repos/matplotlib/matplotlib/issues/3980,b'zoom in wx with retnia behaves badly',b'See screen shots at https://github.com/matplotlib/matplotlib/pull/3905#issuecomment-66932401'
3977,53635028,NelleV,pelson,2015-01-07 14:04:33,2015-01-07 20:08:40,2015-01-07 20:08:38,closed,mdboom,,9,confirmed bug;Release critical,https://api.github.com/repos/matplotlib/matplotlib/issues/3977,"b""Zooming on images doesn't work properly (anymore)""","b'Zooming on matrices and images doesn\'t work properly. The x axis coordinates are not selected properly.\r\n\r\nTo reproduce::\r\n\r\n  from matplotlib import cbook\r\n  import matplotlib.pyplot as plt\r\n\r\n  file =  cbook.get_sample_data(""lena.png"")\r\n  image = plt.imread(image)\r\n  plt.imshow(image)\r\n\r\nThen zoom in around the top left corner: the botton left corner is displayed.'"
3962,53260301,beojan,tacaswell,2015-01-02 16:07:16,2015-01-15 15:49:22,2015-01-15 15:49:22,closed,,v1.4.3,11,confirmed bug;upstream fix required,https://api.github.com/repos/matplotlib/matplotlib/issues/3962,b'No image appears with nbagg',b'See issue https://github.com/ipython/ipython/issues/7351'
3922,52024237,ronaldnie,mdboom,2014-12-15 18:55:00,2015-03-03 18:44:28,2014-12-15 20:08:43,closed,,v1.4.3,1,confirmed bug,https://api.github.com/repos/matplotlib/matplotlib/issues/3922,b'Line 2256 of patches.py should be removed ',"b'This line is probably there for debug purpose. \r\n\r\nprint(len(codes), saw_vertices.shape)'"
3895,51146889,rosenbrockc,tacaswell,2014-12-05 21:16:07,2015-02-19 02:10:29,2015-02-19 02:10:28,closed,,v1.5.0,4,confirmed bug;Documentation,https://api.github.com/repos/matplotlib/matplotlib/issues/3895,b'MarkerStyle Instance not Accepted for scatter',"b'The docstring for `scatter` says that the `marker` keyword argument will accept a `matplotlib.markers.MarkerStyle` instance. However, when I pass one in, it breaks when trying to initialize a new `MarkerStyle` instance using an existing one. We could easily replace https://github.com/matplotlib/matplotlib/blob/master/lib/matplotlib/axes/_axes.py#L3647 with the following to fix it:\r\n\r\n```python\r\n        if not isinstance(marker, mmarkers.MarkerStyle):\r\n            marker_obj = mmarkers.MarkerStyle(marker)\r\n        else:\r\n            marker_obj = marker\r\n```\r\n\r\nor we could just fix the constructor for MarkerStyle to be smarter (a better option).'"
3824,49700284,alimuldal,pelson,2014-11-21 14:13:09,2015-03-03 18:43:31,2014-11-21 16:41:32,closed,mdboom,2.1 (next point release),4,confirmed bug,https://api.github.com/repos/matplotlib/matplotlib/issues/3824,b'Path.contains_points() returns a uint8 array instead of a bool array',"b'According to the docs, `matplotlib.path.Path.contains_points()` ought to return a boolean array, but it currently returns a uint8 array. It looks like this API change was introduced in ba4016014cb4fb4927e36ce8ea429fed47dcb787. It caught me out when I tried to use the result of `contains_points()` as a boolean index to another array.'"
3817,49456010,moghimis,tacaswell,2014-11-19 21:30:41,2015-01-30 16:32:10,2015-01-25 19:50:56,closed,,v1.4.3,9,confirmed bug,https://api.github.com/repos/matplotlib/matplotlib/issues/3817,b'quiver is not plotting only 1 vector',"b""For some reason my old script which was plotting correctly is not reproducing the same figure.\r\nHere is the line of the code:\r\n\r\n```python\r\naxq.quiver([xtexth],[ytexth],[uwnd,],[vwnd,],units=units,scale=scalew,width=0.03,color='b')\r\n```\r\nHowever if I add 1 element to vector it will plot as before:\r\n\r\n```python\r\naxq.quiver([0,xtexth],[0,ytexth],[0,uwnd,],[0,vwnd,],units=units,scale=scalew,width=0.03,color='b')\r\n```\r\nIt seems the first element is ommited.\r\n\r\nSaeed.\r\n\r\n```\r\nIn [178]: import matplotlib as mpl\r\nIn [179]: print mpl.__version__\r\n1.4.2\r\n\r\n```\r\n\r\n[TAC edited to add formatting markup]"""
3816,49394909,breedlun,tacaswell,2014-11-19 14:04:22,2015-01-31 21:59:44,2015-01-31 21:59:44,closed,,v1.4.3,7,confirmed bug;hackathon,https://api.github.com/repos/matplotlib/matplotlib/issues/3816,"b""savefig with bbox_inches='tight' ignores annotation without text""","b""It appears that the bbox_inches='tight' option in savefig ignores annotations without text. Here is my example code\r\n\r\n    import matplotlib.pyplot as plt\r\n\r\n    fig = plt.figure()\r\n    ax = fig.add_axes([0.2, 0.2, 0.6, 0.6])\r\n    arrow1 = ax.annotate('text', xy = [0.5,-0.2], xycoords = 'axes fraction', \\\r\n        xytext = [-72,0], textcoords = 'offset points', \\\r\n        arrowprops = dict(arrowstyle = '-|>', mutation_scale = 10.0, \\\r\n        shrinkA = 0, shrinkB = 0, linewidth = 1))\r\n    arrow2 = ax.annotate('', xy = [0.5,1.2], xycoords = 'axes fraction', \\\r\n        xytext = [-72,0], textcoords = 'offset points', \\\r\n        arrowprops = dict(arrowstyle = '-|>', mutation_scale = 10.0, \\\r\n        shrinkA = 0, shrinkB = 0, linewidth = 1))\r\n    fig.savefig('test.png')\r\n    fig.savefig('test-tight.png', bbox_inches = 'tight')\r\n\r\nHere is test.png, showing that I have two annotations. One annotation, with text, below the axes and one annotation, without text, above the axes.\r\n\r\n![][1]\r\n\r\nHere is test-tight.png, showing only one annotation. The annotation above the axes, without the text, has been ignored.\r\n\r\n![][2]\r\n\r\nLooking in the source code, `bbox_inches='tight'` attempts to find the size and location of artists by calling `artist.get_window_extent()`. When I try `arrow1.get_window_extent()`, I get a bounding box that appears to correspond to the text. When I try `arrow2.get_window_extent()`, I get a bounding box with zero height and zero width. Thus, the root of the problem is `.get_window_extent()` doesn't include the arrow.\r\n\r\nAny ideas for how to get around this, in a reasonably robust manner? If I could somehow get the proper bounding box for the whole annotation, then I would be in business. However, I can't even seem to get the line or patch objects out of arrow2.\r\n\r\nIn case it matters, I am on matplotlib 1.4.0, Python 2.7.6, and Mac OS X 10.8.5\r\n\r\n  [1]: http://i.stack.imgur.com/5DaZl.png\r\n  [2]: http://i.stack.imgur.com/dAR8h.png"""
3809,49020347,dguest,pelson,2014-11-16 23:28:20,2014-12-09 10:49:52,2014-12-09 10:49:52,closed,pelson,v1.4.3,1,confirmed bug;hackathon,https://api.github.com/repos/matplotlib/matplotlib/issues/3809,b'Workaround needed to make example in `Transformations Tutorial` work with log axis',"b""I found some rather weird behavior (maybe a bug) when trying to use `axes.transData.transform((1,1))` with a log axis. The basic code to reproduce the error is below\r\n\r\n~~~\r\n#!/usr/bin/env python3\r\nfrom matplotlib.backends.backend_agg import FigureCanvasAgg as FigureCanvas\r\nfrom matplotlib.figure import Figure\r\nimport numpy as np\r\n\r\nfig = Figure(figsize=(8,6))\r\ncanvas = FigureCanvas(fig)\r\nax = fig.add_subplot(1,1,1)\r\nax.set_yscale('log')          # <--- works fine without this line\r\nax.transData.transform((1,1)) # <--- exception thrown here\r\n~~~\r\n\r\nThe odd thing is that it seems to work fine if I give `transform` a 1x2 shaped array, i.e.\r\n\r\n~~~\r\nax.transData.transform(np.array((1,1)).reshape(1,-1))\r\n~~~\r\n\r\nUnfortunately, this means the examples in the [transformations tutorial][1] don't work with a log axis.\r\n\r\n[1]: http://matplotlib.org/users/transforms_tutorial.html"""
3805,48941384,chebee7i,tacaswell,2014-11-16 03:33:26,2014-11-16 20:59:27,2014-11-16 20:59:27,closed,,v1.4.3,2,confirmed bug,https://api.github.com/repos/matplotlib/matplotlib/issues/3805,b'Cannot initialize ColorbarBase without a norm.',"b""In 1.3.1, the following code used to work:\r\n\r\n```\r\nimport matplotlib\r\nimport matplotlib.pyplot as plt\r\nax = plt.gca()\r\nmatplotlib.colorbar.ColorbarBase(ax, plt.cm.bone)\r\n```\r\n\r\nBut now, I get an error:\r\n\r\n```\r\n/home/me/.virtualenvs/py27/matplotlib/lib/matplotlib/colorbar.py in _process_values(self, b)\r\n    656             self.norm.vmin, self.norm.vmax = mtrans.nonsingular(self.norm.vmin,\r\n    657                                                                 self.norm.vmax,\r\n--> 658                                                                 expander=0.1)\r\n    659             if not self.norm.scaled():\r\n    660                 self.norm.vmin = 0\r\n\r\n/home/me/.virtualenvs/py27/matplotlib/lib/matplotlib/transforms.py in nonsingular(vmin, vmax, expander, tiny, increasing)\r\n   2640     returns -*expander*, *expander*.\r\n   2641     '''\r\n-> 2642     if (not np.isfinite(vmin)) or (not np.isfinite(vmax)):\r\n   2643         return -expander, expander\r\n   2644     swapped = False\r\n\r\nTypeError: ufunc 'isfinite' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''\r\n```\r\nThe issue is that `vmin` and `vmax` are both `None`.\r\n\r\nUsing `git bisect`, I was able to track it down to e9f9e6c which relates to #2642. I'm not familiar enough with the matplotlib internals to know the overall intent here. Is this a regression or the new, preferred behavior? If so, how should I be modifying the code? @efiring, I'm guessing you'll figure this one out with a quick glance."""
3766,48150356,mrclary,tacaswell,2014-11-08 01:33:45,2014-12-31 22:29:03,2014-12-31 22:29:01,closed,,v1.4.3,4,confirmed bug,https://api.github.com/repos/matplotlib/matplotlib/issues/3766,b'Transparency not respected in legendPatch',"b""It seems after Matplotlib 1.3.1 (1.4.1, 1.4.2, not sure about 1.4.0) that setting the transparency of the `facecolor` or `edgecolor` properties of a `legendPatch` is not respected. Both properties can be changed together using `legendPatch.set_alpha(...)`, but they cannot be set independently. Following is a MWE. Here, the legend's `facecolor` is changed, but the alpha specification (0.2) is ignored. A call to `legendPatch.get_facecolor()` confirms this.\r\n```python\r\nimport matplotlib.pyplot as plt\r\n\r\nplt.plot(range(10))\r\nleg = plt.legend(['Line'])\r\nleg.legendPatch.set_facecolor([0.5,1,0.5,0.2])\r\n```"""
3763,48088733,vmarkovtsev,tacaswell,2014-11-07 14:45:11,2015-03-03 18:43:40,2014-11-07 18:09:09,closed,mdboom,2.1 (next point release),5,confirmed bug,https://api.github.com/repos/matplotlib/matplotlib/issues/3763,b'WebAgg: _png.write_png raises TypeError',"b'This looks like a regression after 1.4.x.\r\nTrying to view the plots results in\r\n```python\r\nTraceback (most recent call last):\r\n  File ""/usr/lib/python3/dist-packages/tornado/websocket.py"", line 303, in wrapper\r\n    return callback(*args, **kwargs)\r\n  File ""/usr/lib/python3/dist-packages/matplotlib/backends/backend_webagg.py"", line 229, in on_message\r\n    manager.handle_json(message)\r\n  File ""/usr/lib/python3/dist-packages/matplotlib/backends/backend_webagg_core.py"", line 361, in handle_json\r\n    self.canvas.handle_event(content)\r\n  File ""/usr/lib/python3/dist-packages/matplotlib/backends/backend_webagg_core.py"", line 192, in handle_event\r\n    self.draw()\r\n  File ""/usr/lib/python3/dist-packages/matplotlib/backends/backend_webagg_core.py"", line 90, in draw\r\n    self.manager.refresh_all()\r\n  File ""/usr/lib/python3/dist-packages/matplotlib/backends/backend_webagg_core.py"", line 365, in refresh_all\r\n    diff = self.canvas.get_diff_image()\r\n  File ""/usr/lib/python3/dist-packages/matplotlib/backends/backend_webagg_core.py"", line 147, in get_diff_image\r\n    self._png_buffer)\r\nTypeError: Cannot cast array data from dtype(\'uint32\') to dtype(\'uint8\') according to the rule \'safe\'\r\n```\r\n\r\nlooks like this happened after write_png() API changed.'"
3734,47045625,briantoby,tacaswell,2014-10-28 16:10:00,2015-01-15 17:34:50,2015-01-15 17:34:49,closed,,v1.4.3,6,confirmed bug;GUI/wx;OS/Apple,https://api.github.com/repos/matplotlib/matplotlib/issues/3734,b'Image redraw problem on OSX with wx>2.9 & mpl>1.1',"b'I have seen a problem on more than one Mac running OS X 10.9.x where MPL images are not updated properly. As one example of this, when one zooms a plot, by selecting the zoom widget, the rectangle is never erased and after it is ""released"" the plot is never redrawn with the new limits. This happens when I embed a figure into a wx Panel, as shown in the script below. \r\n\r\nI do not see the problem with EPD (python 2.7.3, wxpython 2.8.10.1, matplotlib 1.1.0), but do with fairly recent Anaconda (python 2.7.8, wxpython 3.0.0.0, matplotlib 1.4.2) and Canopy (python 2.7.6, wxpython 2.9.2.4, matplotlib 1.3.1) dists. \r\n\r\n![mplbug](https://cloud.githubusercontent.com/assets/9433704/4811696/148682b4-5ebc-11e4-87ef-ef8c15c21368.jpg)\r\n\r\n```\r\n# simple demo that fails on Mac (at least on 10.9.5) and later wx/mpl combos\r\n#\r\n# problem is that if one selects the zoom button and drags a region,\r\n# the rectangles never disappear and the image is not updated to\r\n# show the zoomed in region\r\n#\r\n# works (not quite 100%) w/EPD (python 2.7.3, wxpython 2.8.10.1, matplotlib 1.1.0)\r\n# fails w/Anaconda (python 2.7.8, wxpython 3.0.0.0, matplotlib 1.4.2\r\n# fails w/Canopy (python 2.7.6, wxpython 2.9.2.4, matplotlib 1.3.1)\r\n#\r\n\r\nimport sys\r\nimport wx\r\nimport wx.aui\r\nimport matplotlib as mpl\r\nfrom matplotlib.backends.backend_wxagg import FigureCanvasWxAgg as mplCanvas\r\nfrom matplotlib.backends.backend_wxagg import NavigationToolbar2Wx as mplToolbar\r\nprint ""python:     "",sys.version[:5]\r\nprint ""wxpython:   "",wx.__version__\r\nprint ""matplotlib: "",mpl.__version__\r\n\r\napp = wx.PySimpleApp()\r\n\r\n# create frame with notebook\r\nframe = wx.Frame(None, size=(400,400)) \r\nwin = wx.Panel(frame)\r\nwin.nb = wx.aui.AuiNotebook(win)\r\nsizer = wx.BoxSizer(wx.VERTICAL) \r\nsizer.Add(win.nb, 1, wx.EXPAND)\r\nwin.SetSizer(sizer)\r\n\r\n# create a panel for the plot with a plot in it\r\ntab = wx.Panel(win.nb, id=-1)\r\nfigure = mpl.figure.Figure(dpi=None)\r\n# create a quick figure for the plot\r\nax = figure.gca()\r\nax.plot(range(10),range(10),\'o-\')\r\ncanvas = mplCanvas(tab, -1, figure) \r\ntoolbar = mplToolbar(canvas)\r\ntoolbar.Realize()\r\nsizer = wx.BoxSizer(wx.VERTICAL)\r\nsizer.Add(canvas,1,wx.EXPAND)\r\nsizer.Add(toolbar, 0 , wx.LEFT | wx.EXPAND)\r\ntab.SetSizer(sizer)\r\nwin.nb.AddPage(tab,\'plot1\') # add the panel as a notebook tab\r\n\r\nframe.Show()\r\napp.MainLoop()\r\n\r\n```\r\n\r\n'"
3728,46899093,alimuldal,tacaswell,2014-10-27 12:26:25,2014-10-28 16:53:58,2014-10-28 16:52:56,closed,,v1.4.3,1,confirmed bug,https://api.github.com/repos/matplotlib/matplotlib/issues/3728,b'eventplot breaks for default `colors=None` kwarg',"b'To reproduce the bug:\r\n```python\r\nIn [1]: events = np.random.exponential(0.5, size=100)\r\nIn [2]: plt.eventplot(events)\r\n\r\n---------------------------------------------------------------------------\r\nValueError                                Traceback (most recent call last)\r\n<ipython-input-2-51aef4c82a54> in <module>()\r\n----> 1 plt.eventplot(events)\r\n\r\n/usr/lib/pymodules/python2.7/matplotlib/pyplot.pyc in eventplot(positions, orientation, lineoffsets, linelengths, linewidths, colors, linestyles, hold, **kwargs)\r\n   2718                            lineoffsets=lineoffsets, linelengths=linelengths,\r\n   2719                            linewidths=linewidths, colors=colors,\r\n-> 2720                            linestyles=linestyles, **kwargs)\r\n   2721         draw_if_interactive()\r\n   2722     finally:\r\n\r\n/usr/lib/pymodules/python2.7/matplotlib/axes.pyc in eventplot(self, positions, orientation, lineoffsets, linelengths, linewidths, colors, linestyles, **kwargs)\r\n   3981                                          linewidth=linewidth,\r\n   3982                                          color=color,\r\n-> 3983                                          linestyle=linestyle)\r\n   3984             self.add_collection(coll)\r\n   3985             coll.update(kwargs)\r\n\r\n/usr/lib/pymodules/python2.7/matplotlib/collections.pyc in __init__(self, positions, orientation, lineoffset, linelength, linewidth, color, linestyle, antialiased, **kwargs)\r\n   1181                                 antialiaseds=antialiased,\r\n   1182                                 linestyles=linestyle,\r\n-> 1183                                 **kwargs)\r\n   1184 \r\n   1185         self._linelength = linelength\r\n\r\n/usr/lib/pymodules/python2.7/matplotlib/collections.pyc in __init__(self, segments, linewidths, colors, antialiaseds, linestyles, offsets, transOffset, norm, cmap, pickradius, zorder, **kwargs)\r\n    997         self.set_linestyles(linestyles)\r\n    998 \r\n--> 999         colors = mcolors.colorConverter.to_rgba_array(colors)\r\n   1000 \r\n   1001         Collection.__init__(\r\n\r\n/usr/lib/pymodules/python2.7/matplotlib/colors.pyc in to_rgba_array(self, c, alpha)\r\n    390             if isinstance(c, np.ndarray):\r\n    391                 if c.ndim != 2 and c.dtype.kind not in \'SU\':\r\n--> 392                     raise ValueError(""Color array must be two-dimensional"")\r\n    393                 if (c.ndim == 2 and c.shape[1] == 4 and c.dtype.kind == \'f\'):\r\n    394                     if (c.ravel() > 1).any() or (c.ravel() < 0).any():\r\n\r\nValueError: Color array must be two-dimensional\r\n```\r\nIt seems that what\'s happening is that `mcoll.EventCollection()` receives `color=array([None], dtype=object)` and tries to interpret this as a sequence of color values rather than a single value.'"
3722,46841904,marcobardoscia,tacaswell,2014-10-26 12:58:53,2015-03-03 18:43:38,2014-12-31 23:09:56,closed,mdboom,v1.4.3,10,confirmed bug,https://api.github.com/repos/matplotlib/matplotlib/issues/3722,b'semilogx and fill_between produce a segmentation fault',"b'The following code:\r\n``` python\r\nimport numpy as np\r\nimport matplotlib.pyplot as plt\r\n\r\nsteps = 1000\r\ndata = np.arange(steps)\r\nplt.semilogx(data)\r\nplt.fill_between(data, data*0.8, data*1.2)\r\n```\r\nproduces a segfault on matplotlib 1.4.1, while works as expected on 1.3.1. Tested only on MacOSX (Mavericks and Yosemite). Link to the report: http://pastebin.com/8AfSqykw\r\n\r\n'"
3715,46806240,jkseppan,tacaswell,2014-10-25 08:25:05,2015-03-12 23:38:29,2015-03-12 23:38:27,closed,,v1.5.0,1,confirmed bug,https://api.github.com/repos/matplotlib/matplotlib/issues/3715,b'Axis labels only move with spines if there are ticks',"b""The following code plots some random data and moves the spines outward. It works just as expected if it leaves the automatic tick labels alone, but if it disables them the axis labels do not move with the spines. This is on the v1.4.x branch.\r\n\r\n```python\r\nimport numpy as np\r\nfrom matplotlib import pyplot as plt\r\n\r\nfor ticks in True, False:\r\n    fig, ax = plt.subplots(figsize=(10,8), dpi=100)\r\n    plt.subplots_adjust(left=0.3, bottom=0.3)\r\n    data = np.random.uniform(size=100)\r\n    ax.plot(data)\r\n    ax.yaxis.set_ticks_position('left')\r\n    ax.spines['left'].set_position(('outward', 30))\r\n    ax.spines['right'].set_visible(False)\r\n    ax.set_ylabel('random numbers')\r\n    ax.xaxis.set_ticks_position('bottom')\r\n    ax.spines['bottom'].set_position(('outward', 30))\r\n    ax.spines['top'].set_visible(False)\r\n    ax.set_xlabel('sequence')\r\n    if not ticks:\r\n        ax.xaxis.set_ticks([])\r\n        ax.yaxis.set_ticks([])\r\n    plt.savefig('ticks-%s.png' % ticks)\r\n```\r\n\r\nThe output with ticks enabled:\r\n\r\n![ticks-true](https://cloud.githubusercontent.com/assets/92814/4779199/0a975b3c-5c20-11e4-9ce5-a07e61f0b99c.png)\r\n\r\nand with ticks disabled:\r\n\r\n![ticks-false](https://cloud.githubusercontent.com/assets/92814/4779203/162d27ba-5c20-11e4-9838-270df52711ad.png)\r\n\r\n"""
3709,46620288,espdev,efiring,2014-10-23 12:45:36,2015-01-25 19:50:56,2015-01-25 19:50:56,closed,efiring,v1.4.x,8,confirmed bug,https://api.github.com/repos/matplotlib/matplotlib/issues/3709,b'quiver does not consider direction of an axis',"b""I'm trying to plot imshow (**it inverts Y-axis**) and quiver on the same axes and I see the incorrect direction of vectors for Y-axis. In MATLAB the analogous code working correctly.\r\n\r\nMy code for example:\r\n```python\r\nimport numpy as np\r\nimport scipy.ndimage as ndimage\r\nimport matplotlib.pyplot as plt\r\n\r\nh = 100\r\nw = 100\r\n\r\n# test image (white square)\r\nimage = np.zeros((h, w))\r\nimage[20:79, 20:79] = 1\r\n\r\n# compute X, Y gradients\r\ngx = ndimage.convolve1d(image, [1, 0, -1], axis=1)\r\ngy = ndimage.convolve1d(image, [1, 0, -1], axis=0)\r\n\r\n# compute magnitude\r\nmg = np.hypot(gx, gy)\r\n\r\n# grid for quiver\r\nx, y = np.meshgrid(np.arange(0, w), np.arange(0, h))\r\n\r\nfig, ax = plt.subplots(2, 1)\r\nax1, ax2 = ax\r\n\r\nax1.set_title('Gradient mag image and Quiver')\r\nax1.imshow(mg, cmap=plt.cm.gray)\r\nax1.quiver(x, y, gx, gy, color='g')\r\n\r\nax2.set_title('Gradient Quiver')\r\nax2.set_xlim([0, w])\r\nax2.set_ylim([0, h])\r\nax2.set_aspect('equal')\r\nax2.quiver(x, y, gx, gy, color='g')\r\n\r\nplt.show()\r\n```\r\n\r\n![image](http://habrastorage.org/files/492/dba/371/492dba371bc24f29bd45c569027d9ebf.PNG)\r\n"""
3633,45520547,dukecld,tacaswell,2014-10-10 20:27:08,2015-01-27 06:11:09,2015-01-27 06:11:06,closed,,v1.4.3,3,confirmed bug,https://api.github.com/repos/matplotlib/matplotlib/issues/3633,b'twinx clear problem',"b""With matplotlib 1.4.0 the cla() method for the twinx axes also clears the primary axes.  With matplotlib 1.3.1 the method only clears the twinx axes as expected.  I have a much longer program where the twinx axes must be cleared while retaining the primary axis plot.  I would prefer not to replot the entire graph each time the twinx axes change.  You can see this by adding the cla method to the matplotlib web site example, two_scales.py, shown below.\r\n\r\nI have matplotlib installed via the anaconda package. Matplotlib 1.4.0 is from anaconda 2.1.0.  Matplotlib 1.3.1 is from 1.9 versions of the anaconda package.\r\n\r\nLinux version:\r\nLinux gamow 3.2.0-4-amd64 #1 SMP Debian 3.2.60-1+deb7u3 x86_64 GNU/Linux\r\nSame cla() result on osX 10.9.4.\r\n\r\nSame result for backends Qt4Agg and TkAgg;  the cla() method cleared both axes.\r\nI also tried various other options such as setting ax2.hold(False) prior to replotting  ax2.  However, once again ax1 was cleared.  The ax2 clear commands seem to apply to the ax1 axis as well???  These options worked as expected  for the earlier matplotlib version, clearing only the ax2 axis.\r\n\r\nHere\xa1\xafs the code:  if you execute the code, you should see a blank figure with the cla() included and the usual two graphs without the cla() method.\r\n\r\n--------------------------------------------------------------------\r\n```python\r\nimport numpy as np\r\nimport matplotlib.pyplot as plt\r\n\r\nfig, ax1 = plt.subplots()\r\nt = np.arange(0.01, 10.0, 0.01)\r\ns1 = np.exp(t)\r\nax1.plot(t, s1, 'b-')\r\nax1.set_xlabel('time (s)')\r\n# Make the y-axis label and tick labels match the line color.\r\nax1.set_ylabel('exp', color='b')\r\nfor tl in ax1.get_yticklabels():\r\n    tl.set_color('b')\r\n\r\nax2 = ax1.twinx()\r\ns2 = np.sin(2*np.pi*t)\r\nax2.plot(t, s2, 'r.')\r\nax2.set_ylabel('sin', color='r')\r\nfor tl in ax2.get_yticklabels():\r\n    tl.set_color('r')\r\n\r\n# single line addition to the two_scales.py example\r\n# clears both ax2 and ax1 under matplotlib 1.4.0, clears only ax2 under matplotlib 1.3.1\r\n# obviously, same result with ax2.clear() method\r\nax2.cla()\r\n\r\nplt.show()\r\n```\r\n\r\nI would appreciate any help;  this looks like a bug in the latest version of matplotlib.\r\nI could not find any reference to this problem in earlier posts.\r\n\r\nThanks,\r\nCharlie\r\n\r\n\r\n[TAC edited for markup]"""
3626,45331114,nicktimko,mdboom,2014-10-09 06:06:55,2014-12-27 22:51:51,2014-12-27 22:51:50,closed,,v1.4.3,8,confirmed bug;needs_patch,https://api.github.com/repos/matplotlib/matplotlib/issues/3626,"b'Manual xlim log stackplots not showing, linear stackplots segfault'","b""I was trying to make some hacky split axes, things didn't show up, thought it was me, then after trying to make a SSCCE and getting it to segfault I think it's maybe only 90% me.\r\n\r\n    import numpy as np\r\n    import matplotlib.pyplot as plt\r\n\r\n    f, ax = plt.subplots()\r\n    #ax.set_xlim(10**-10, 1) # works\r\n    ax.set_xlim(10**-9.2679, 1) # sometimes broken\r\n    #ax.set_xlim(10**-4, 1) # broken\r\n\r\n    x = np.logspace(-10, 5, 20)\r\n    data = np.random.random((2, 20))\r\n    ax.set_xscale('log') # segfaults instead of just not showing if commented\r\n    ax.stackplot(x, *data)\r\n\r\n    f.show()\r\n\r\nUncomment as commented to reproduce. It randomly doesn't work on the seemingly-arbitrary lower bound (`10**-9.2679`).\r\n\r\nThe real fun seems to be if you comment out `ax.set_xscale('log')`, then Python simply segfaults when attempting to either `f.show()` or `f.savefig('test')` (after any of the provided `set_xlim` calls).\r\n\r\nRepro'd on\r\n* MPL 1.4.0\r\n    * Ubuntu 14.04 64-bit, Python 2.7.8 (64-bit), Numpy 1.8.2, TkAgg\r\n    * Windows 7 64-bit, Python 3.4.1 (64-bit), Numpy 1.9.0, TkAgg and Agg\r\n    * *(with variant, see below)* OS X 10.9.5, Python 3.4.1/2.7.8, Numpy 1.9.0, MacOSX and Agg"""
3622,45167577,mdboom,tacaswell,2014-10-07 21:03:17,2015-03-03 18:43:45,2014-10-10 18:42:18,closed,mdboom,v1.4.1,6,confirmed bug,https://api.github.com/repos/matplotlib/matplotlib/issues/3622,"b'setup.py creates a zombie C extension called ""freetype2""'","b'Since #3067, there has been a useless and unimportable extension created as part of the matplotlib install.  We need to remove it.\r\n\r\nHowever, it reportedly fixes a real bug for some, but it\'s not quite clear how.  I\'ll poke around and see if I can break/fix it in the same way as the original reports and then find a better solution that doesn\'t install a broken `.so` file.\r\n\r\n```\r\n>>> import freetype2\r\nTraceback (most recent call last):\r\n  File ""<stdin>"", line 1, in <module>\r\nImportError: dynamic module does not define init function (initfreetype2)\r\n```\r\n\r\nThe name of matplotlib\'s freetype wrapper is ft2font, not freetype2.'"
3574,44173682,tonysyu,tacaswell,2014-09-27 14:10:09,2015-03-03 18:44:27,2014-09-30 15:26:01,closed,mdboom,v1.4.x,4,confirmed bug,https://api.github.com/repos/matplotlib/matplotlib/issues/3574,b'`rotation` parameter has no effect on `RegularPolyCollection`',"b""It looks like the `rotation` parameter in `RegularPolyCollection` was disconnected in the following commit: https://github.com/matplotlib/matplotlib/commit/b8726d09026ba7507d8501de0fbd921ec2d1243e\r\n\r\nBelow is an example that *should* display squares with different rotations, but doesn't on master or 1.4.0.\r\n\r\n```python\r\nimport matplotlib.pyplot as plt\r\nfrom matplotlib.collections import RegularPolyCollection\r\nimport numpy as np\r\n\r\n\r\nxx, yy = np.mgrid[:10, :10]\r\nxy_points = np.transpose([xx.flatten(), yy.flatten()])\r\nrotations = np.linspace(0, 2*np.pi, len(xy_points))\r\n\r\nfig, ax = plt.subplots()\r\nfor xy, alpha in zip(xy_points, rotations):\r\n    col = RegularPolyCollection(4, sizes=(100,), rotation=alpha,\r\n                                offsets=xy, transOffset=ax.transData)\r\n    ax.add_collection(col, autolim=True)\r\nax.autoscale_view()\r\n\r\nplt.show()\r\n```"""
3557,43589090,nhmc,tacaswell,2014-09-23 04:08:14,2015-01-13 05:08:53,2015-01-13 05:08:47,closed,,v1.4.x,6,confirmed bug;hackathon;needs_patch,https://api.github.com/repos/matplotlib/matplotlib/issues/3557,b'Bug fix for plotting minor ticks',"b""When using `AutoMinorlocator` the rightmost minor tick isn't drawn sometimes (in Matplotlib 1.4).  Changing this line in `class AutoMinorLocator(Locator)` (in `ticker.py`) from:\r\n\r\n```\r\ntmax = np.floor((vmax - t0) / minorstep) * minorstep\r\n```\r\n\r\nto\r\n\r\n```\r\n tmax = np.ceil((vmax - t0) / minorstep) * minorstep\r\n```\r\n\r\nfixes this. I don't completely understand the code though, so this may not be the best fix.\r\n"""
3553,43545731,marcopigg,tacaswell,2014-09-22 20:16:56,2015-01-22 16:20:43,2014-11-21 13:21:19,closed,,v1.4.x,10,confirmed bug,https://api.github.com/repos/matplotlib/matplotlib/issues/3553,b'fill_between disappears on axis limit change',"b'Running the fill_between_demo.py, if I zoom on figure 1 the fill_between shape disappears. Figure 2 and 3 instead zoom in correctly. It looks like this also happens when calling ax.set_xlim() in a python script, after fill_between has been called.\r\n\r\nI am using matplotlib version 1.4.0 on Linux. This affects both python 2.7.8 and 3.4.1, and both Linux 32 bit and 64bit.\r\n\r\nmatplotlib 1.3.1 is not affected by this bug.'"
3522,42882208,Horrifior,tacaswell,2014-09-16 13:35:58,2014-09-27 03:49:50,2014-09-27 03:49:50,closed,,,1,confirmed bug,https://api.github.com/repos/matplotlib/matplotlib/issues/3522,b'Inverting a datetime / plot_date y-axis',"b'Dear all,\r\n\r\nthere have been few mails using the same topic-name on the matplotlib-user mailinglist today, and as suggested by some other users there could be a bug associated with inverting axis using datetime-objects... for brevity, I just attach the short code snippet which should show the problem:\r\n\r\n\r\nThis code is running fine as long as any of the two commands intended to invert the y-axis are commented out. \r\n\r\n```python\r\nimport matplotlib.pyplot; matplotlib.pyplot.rcdefaults()\r\n\r\nimport numpy\r\nimport matplotlib.pyplot\r\nimport datetime\r\n\r\ndef plot_grid(ax):\r\n    grid_x=numpy.arange(17)+0.5\r\n    grid_y=[]\r\n\r\n    for y in range(2013,2019):\r\n        for m in range(1,13,3):\r\n            grid_y+=[matplotlib.dates.date2num(datetime.datetime.strptime(""01.""+str(m)+"".""+str(y)+"" 0:00"", ""%d.%m.%Y %H:%M""))]\r\n    for i in range(len(grid_x)):\r\n        matplotlib.pyplot.plot_date([grid_x[i],grid_x[i]], [grid_y[0],grid_y[-1]],\'k\', xdate=False, ydate=True)\r\n    for i in range(len(grid_y)):\r\n        matplotlib.pyplot.plot_date([grid_x[0],grid_x[-1]],[grid_y[i],grid_y[i]],\'k\', xdate=False, ydate=True)\r\n\r\n\r\nymin=matplotlib.dates.date2num(datetime.datetime.strptime(""01.""+str(1)+"".""+str(2013)+"" 0:00"", ""%d.%m.%Y %H:%M""))\r\nymax=matplotlib.dates.date2num(datetime.datetime.strptime(""01.""+str(12)+"".""+str(2018)+"" 0:00"", ""%d.%m.%Y %H:%M""))\r\nfig, ax = matplotlib.pyplot.subplots()\r\nplot_grid(ax)\r\n\r\n##matplotlib.pyplot.ylim(ymax,ymin)\r\n##ax.invert_yaxis()\r\nmatplotlib.pyplot.savefig(\'test.png\')\r\nmatplotlib.pyplot.show()\r\n```\r\n\r\n[TAC edited to introduce formatting]'"
3514,42721177,astrofrog,tacaswell,2014-09-14 14:02:45,2015-03-03 18:44:05,2014-09-27 18:13:11,closed,mdboom,v1.4.1,8,confirmed bug;needs_review,https://api.github.com/repos/matplotlib/matplotlib/issues/3514,"b""Ticks on top axis disappear if tick size is too large (when using bbox_inches='tight')""","b""This is a bug in Matplotlib 1.4 - the following script:\r\n\r\n```python\r\nimport matplotlib.pyplot as plt\r\n\r\nfig = plt.figure()\r\nax = fig.add_subplot(1,1,1)\r\nax.plot([1,2,3])\r\n\r\nfor line in ax.xaxis.get_ticklines():\r\n    line.set_markersize(17)\r\n\r\nfor line in ax.yaxis.get_ticklines():\r\n    line.set_markersize(17)\r\n\r\nfig.savefig('ticks.png', bbox_inches='tight')\r\n```\r\n\r\nproduces the following output when using ``bbox_inches='tight'``:\r\n\r\n![ticks](https://cloud.githubusercontent.com/assets/314716/4264156/b005ecc4-3c17-11e4-9c2a-c0bdad25f1fe.png)\r\n\r\nWhen not setting ``bbox_inches='tight'``, the ticks are there:\r\n\r\n![ticks](https://cloud.githubusercontent.com/assets/314716/4264157/c2b3a08c-3c17-11e4-820e-7b4970897089.png)\r\n\r\nAddendum:  it turns out I noticed this because some of the image tests in my package were failing - however, this only caused an RMS difference of ~2 or so, so the tolerance has to be quite low to catch this!\r\n"""
3493,42406254,michaelwimmer,tacaswell,2014-09-10 12:16:15,2014-09-13 15:58:44,2014-09-13 15:58:44,closed,,v1.4.x,0,confirmed bug;mplot3d,https://api.github.com/repos/matplotlib/matplotlib/issues/3493,b'Incorrect use of super() in mplot3d?',"b'I have a number of custom collections that derive from matplotlib Collections. Since 1.4, I have the problem that my code breaks when the init function of my code calls the init function of the mplot3d collection:\r\n```\r\n/mplot3d/art3d.py"", line 322, in __init__\r\n    super(self.__class__, self).__init__(*args, **kwargs)\r\nRuntimeError: maximum recursion depth exceeded while calling a Python object\r\n```\r\nI researched the issue, and in general it is discouraged to use `super(self.__class, ...)` as it breaks when classes are derived (see e.g. [Stackoverflow](http://stackoverflow.com/questions/18208683/when-calling-super-in-a-derived-class-can-i-pass-in-self-class) ). Is there a special reason why this is there?'"
3483,42145924,mdepitta,efiring,2014-09-07 16:31:45,2015-02-28 23:58:26,2015-02-28 23:58:26,closed,,unassigned,6,confirmed bug;won't fix,https://api.github.com/repos/matplotlib/matplotlib/issues/3483,b'Cannot properly reload figure that was previously pickled',"b'Dear all,\r\nI just figure out that matplotlib does not have apparently a simple way to save interactive plots as MATLAB ""fig"" figures. I sincerely hope the ""experimental"" pickling will be soon consolidated because it would be of great benefit for users imho.\r\n\r\nBriefly, I followed the simple procedure outlined here in order to pickle and reload figures:\r\nhttp://stackoverflow.com/questions/7290370/store-and-reload-matplotlib-pyplot-object\r\n\r\nIt seems that I am able to pickle the figure indeed, but not to reload it properly.\r\nThis is what I get:\r\n\r\n```\r\nTraceback (most recent call last):\r\n  File ""/usr/lib64/python2.7/site-packages/matplotlib/backends/backend_qt4.py"", line 299, in resizeEvent\r\n    self.draw()\r\n  File ""/usr/lib64/python2.7/site-packages/matplotlib/backends/backend_qt4agg.py"", line 154, in draw\r\n    FigureCanvasAgg.draw(self)\r\n  File ""/usr/lib64/python2.7/site-packages/matplotlib/backends/backend_agg.py"", line 451, in draw\r\n    self.figure.draw(self.renderer)\r\n  File ""/usr/lib64/python2.7/site-packages/matplotlib/artist.py"", line 55, in draw_wrapper\r\n    draw(artist, renderer, *args, **kwargs)\r\n  File ""/usr/lib64/python2.7/site-packages/matplotlib/figure.py"", line 1031, in draw\r\n    dsu = [row for row in dsu if not row[1].get_animated()]\r\n  File ""/usr/lib64/python2.7/site-packages/matplotlib/artist.py"", line 612, in get_animated\r\n    return self._animated\r\nAttributeError: \'AxesSubplot\' object has no attribute \'_animated\'\r\n```\r\n\r\nAny suggestion? Shall I bother about this?\r\nI am using matplotlib 1.3.1 on Fedora 20 with QtAgg backend.\r\n\r\nThanks for your time,\r\n\r\nMaurizio'"
3473,42047613,pgnub,WeatherGod,2014-09-05 13:44:52,2015-07-21 14:46:21,2015-07-21 14:46:19,closed,tacaswell,v1.5.0,1,confirmed bug;Py3k;text,https://api.github.com/repos/matplotlib/matplotlib/issues/3473,b'afm.py error in python3',"b'This code raises a unexpected TypeError in Python 3.\r\n\r\n    import matplotlib.pyplot as plt\r\n\r\n    plt.rcParams[\'ps.useafm\'] = True\r\n    plt.yscale(\'log\')\r\n    plt.plot([1, 2, 3, 4])\r\n    plt.savefig(\'test.eps\')\r\n\r\n...\r\n  File ""/Library/Frameworks/Python.framework/Versions/3.4/lib/python3.4/site-packages/matplotlib/afm.py"", line 101, in _sanity_check\r\n    if not line.startswith(b\'StartFontMetrics\'):\r\nTypeError: startswith first arg must be str or a tuple of str, not bytes\r\n\r\nI think that it should be solved editing the file `afm.py` and forcing the variable `line` to be of type `bytes` (because sometimes -I don\'t know why- it could be `str`), for instance, writing these 2 lines of code _before_ the statements similar to: `if not line.startswith(b\'....Some string....\')` (lines 101, 155 and 198 of `afm.py` --- maybe also in 233, 244 and 277...)\r\n\r\n    if isinstance(line, str):\r\n        line = line.encode()\r\n'"
3444,41589389,JDWarner,jenshnielsen,2014-08-31 15:52:25,2014-11-10 20:20:41,2014-11-10 20:20:41,closed,jenshnielsen,v1.4.x,8,confirmed bug;needs_patch,https://api.github.com/repos/matplotlib/matplotlib/issues/3444,b'Assume backend/optional package checks fail after defined timeout',"b""Over in scikit-image we're having some trouble with our Travis build, and it appears to be due to the matplotlib optional backend package check for Qt4 entering a subprocess and never returning under the Travis system Python (3.2.3). This results in an eventual Travis timeout.\r\n\r\nSee the bottom of this build log: https://travis-ci.org/JDWarner/scikit-image/jobs/34035472\r\n\r\nThe reason this happens is unclear and it would be ideal if this worked (as PyQt4 is present in that 3.2 build), but the real problem is that this can completely tank a CI build or install. Ergo, we recommend a timeout (perhaps ~15 seconds) for checking [optional] build packages."""
3404,41051188,fph,tacaswell,2014-08-25 10:56:37,2014-08-26 12:50:14,2014-08-26 12:50:14,closed,pelson,v1.4.x,3,confirmed bug,https://api.github.com/repos/matplotlib/matplotlib/issues/3404,b'Wrong plot on basemap with `latlon=True` ',"b""There is a bug with point shifting when using `latlon=True` in `Basemap.plot()`, as discussed on http://stackoverflow.com/questions/25471723/plotting-on-a-basemap-unexpected-result/25472915: for instance, see the following code\r\n```\r\nfrom mpl_toolkits.basemap import Basemap\r\nimport numpy as np\r\nimport matplotlib.pyplot as plt\r\n\r\nm = Basemap(projection='merc',llcrnrlat=-80,urcrnrlat=80,\\\r\n            llcrnrlon=-180,urcrnrlon=180,lat_ts=20,resolution='l')\r\nm.drawparallels(np.arange(-90.,91.,30.))\r\nm.drawmeridians(np.arange(-180.,181.,60.))\r\n\r\nlon=[\r\n -44.897539694478894,\r\n -79.56264363246461,\r\n -108.31264586027467,\r\n -129.5832433799378,\r\n -149.11755440233293,\r\n 173.04624586158417,\r\n 57.26114485166647,\r\n 26.06650557322952,\r\n 6.8910540489469785,\r\n -15.059586144625898]\r\n\r\nlat=[\r\n -23.30021206811055,\r\n -22.174848810053106,\r\n -6.169632450760373,\r\n 18.199421172044598,\r\n 45.95724594253466,\r\n 72.89364342463014,\r\n 69.39230460744983,\r\n 41.88542137864501,\r\n 14.50656439517308,\r\n -8.974170076274387]\r\n\r\nm.plot(lon, lat, 'ro', markersize=14, mec='none', latlon=True)\r\nm.plot(lon[:-1], lat[:-1], 'bo', markersize=10, mec='none', latlon=True)\r\nm.plot(lon[1:], lat[1:], 'go', markersize=6, mec='none', latlon=True)\r\n```\r\nOutput:\r\n![2pwkx](https://cloud.githubusercontent.com/assets/979716/4028949/4ef90672-2c46-11e4-9b55-483f2417a1f1.png)\r\n\r\nThe red points should all coincide with the blue and green ones, but they don't.\r\n"""
3392,40810385,kratsg,tacaswell,2014-08-21 14:34:23,2014-10-10 17:01:51,2014-10-10 17:01:51,closed,pelson,v1.4.1,11,confirmed bug,https://api.github.com/repos/matplotlib/matplotlib/issues/3392,b'Cannot pickle `figure` or `axes` (TypeError: instancemethod)',"b'Couple of issues I\'ve found.\r\n\r\n```python\r\ndef latex_float(f, pos=0):\r\n    float_str = ""{0:.2g}"".format(f)\r\n    if ""e"" in float_str:\r\n        base, exponent = float_str.split(""e"")\r\n        return r""${0} \\times 10^{{{1}}}$"".format(base, int(exponent))\r\n    else:\r\n        return r""${}$"".format(float_str)\r\n\r\nformatter = FuncFormatter(latex_float)\r\n\r\ncorr = np.corrcoef(data[\'x\'], data[\'y\'])[0,1]\r\nfig, ax = pl.subplots(figsize=figsize)\r\nhist, _, _, im = ax.hist2d(data[\'x\'], data[\'y\'], norm=LogNorm(), bins=(bins_x, bins_y) , alpha=0.75, cmap = cmap)\r\n\r\ncbar = fig.colorbar(im, ticks=[0., 1., 2., 5., 10., 20., 50., 100., 200., 500., 1000., 2000., 5000.], format=formatter)\r\ncbar.set_label(\'number density\', fontsize=labelsize, labelpad=79)\r\ncbar.ax.tick_params(labelsize=labelsize-6, width=3, length=15)\r\ncbar.ax.minorticks_on()\r\n\r\nax.set_xlabel(label_x, fontsize=labelsize)\r\nax.set_ylabel(label_y, fontsize=labelsize)\r\nax.grid(True, which=\'both\', linewidth=3, linestyle=\'--\', alpha=0.5)\r\nax.text(0.95, 0.05, \'$\\mathrm{{Corr}} = {:0.4f}$\'.format(corr), transform=ax.transAxes, fontsize=labelsize, verticalalignment=\'bottom\', horizontalalignment=\'right\', bbox=textprops)\r\n\r\nax.tick_params(axis=\'both\', which=\'major\', labelsize=labelsize-6)\r\n\r\npickle.dump(ax, file(\'ZH_ax.pkl\', \'w+\'))\r\n\r\nfig.close()\r\n```\r\n\r\nAs it is, the code gives the following error:\r\n```\r\nTraceback (most recent call last):\r\n  File ""make_plots_new.py"", line 124, in <module>\r\n    pickle.dump(fig, file(\'ZH_ax.pkl\', \'w+\'))\r\n  File ""/lib/python2.7/copy_reg.py"", line 70, in _reduce_ex\r\n    raise TypeError, ""can\'t pickle %s objects"" % base.__name__\r\nTypeError: can\'t pickle instancemethod objects\r\n```\r\n\r\nIf I exclude the label formatter function in the `colorbar`, I get an error of\r\n\r\n ```\r\nTraceback (most recent call last):\r\n  File ""make_plots_new.py"", line 124, in <module>\r\n    pickle.dump(fig, file(\'ZH_ax.pkl\', \'w+\'))\r\ncPickle.UnpickleableError: Cannot pickle <type \'Image\'> objects\r\n```\r\n\r\nHow can one pickle?'"
3336,39268229,BrenBarn,tacaswell,2014-08-01 07:44:46,2014-08-07 12:44:38,2014-08-07 12:44:38,closed,tacaswell,v1.4.0,5,confirmed bug;needs_patch,https://api.github.com/repos/matplotlib/matplotlib/issues/3336,b'Boxplot shows wrong color for lower outliers',"b'See this StackOverflow question: http://stackoverflow.com/questions/25075023/matplotlib-boxplot-outlier-color-change-if-keyword-sym-is-used .  Specifying a symbol without color for the ""sym"" argument results in any outliers below the box only (not those above) being shown in a different color.\r\n\r\nRather surprising if this bug is real and hasn\'t been noticed for so long.  Am I missing something?'"
3316,38838945,ibell,mdboom,2014-07-27 13:33:03,2016-04-10 21:22:30,2015-12-09 13:57:22,closed,,2.1 (next point release),34,confirmed bug;GUI/wx;hackathon,https://api.github.com/repos/matplotlib/matplotlib/issues/3316,b'wx crashes on exit if figure not shown and not explicitly closed ',"b'On windows, with the wxagg backend, if the figure is not explicitly closed, python crashes.  This crashes:\r\n``` python\r\npython -c ""import matplotlib.pyplot as plt; plt.plot([0,1],[1,4])""\r\n```\r\nversions:\r\n\r\n```\r\nC:\\Users\\Belli>python\r\nPython 2.7.6 |Continuum Analytics, Inc.| (default, May 27 2014, 15:00:33) [MSC v.1500 64 bit (AMD64)] on win32\r\nType ""help"", ""copyright"", ""credits"" or ""license"" for more information.\r\nAnaconda is brought to you by Continuum Analytics.\r\nPlease check out: http://continuum.io and https://binstar.org\r\n>>> import matplotlib\r\n>>> matplotlib.__version__\r\n\'1.3.1\'\r\n>>> import wx\r\n>>> wx.version()\r\n\'3.0.0.0 msw (classic)\'\r\n```'"
3304,38738439,letmaik,mdboom,2014-07-25 14:51:22,2014-07-31 03:14:41,2014-07-31 03:14:41,closed,mdboom,v1.4.0,25,confirmed bug;needs_patch;Release critical,https://api.github.com/repos/matplotlib/matplotlib/issues/3304,b'1.4.0 RC1+7: *** glibc detected *** python: corrupted double-linked list',"b""I just spent a day figuring out where `*** glibc detected *** .../bin/python: corrupted double-linked list: 0x00000000069a01a0 ***` was coming from. I installed the latest 1.4.x branch version, so I thought that something must have happened there. Bisecting the commits and testing different versions, I found that  7b39e78b0807b8176183a5890b502f0f521b2465 introduced the problem. The errors happen randomly and the stacktraces are different most of the time. Some examples:\r\n\r\n```\r\n*** glibc detected *** .../p27/bin/python: corrupted double-linked list: 0x00000000069a01a0 ***\r\n======= Backtrace: =========\r\n/lib64/libc.so.6(+0x76166)[0x7f95f35c2166]\r\n/lib64/libc.so.6(+0x79f9a)[0x7f95f35c5f9a]\r\n/lib64/libc.so.6(__libc_malloc+0x71)[0x7f95f35c69a1]\r\n/opt/Python2.7/lib/libpython2.7.so.1.0(PyString_FromStringAndSize+0xda)[0x7f95f4224c6a]\r\n/opt/Python2.7/lib/libpython2.7.so.1.0(PyUnicodeUCS2_EncodeUTF8+0x1be)[0x7f95f424860e]\r\n.../p27/lib/python2.7/lib-dynload/_io.so(+0x15111)[0x7f95ec053111]\r\n/opt/Python2.7/lib/libpython2.7.so.1.0(PyEval_EvalFrameEx+0x5910)[0x7f95f427f000]\r\n/opt/Python2.7/lib/libpython2.7.so.1.0(PyEval_EvalCodeEx+0x88e)[0x7f95f4280b7e]\r\n/opt/Python2.7/lib/libpython2.7.so.1.0(+0x76f28)[0x7f95f41fef28]\r\n/opt/Python2.7/lib/libpython2.7.so.1.0(PyObject_Call+0x53)[0x7f95f41cf9a3]\r\n/opt/Python2.7/lib/libpython2.7.so.1.0(PyEval_EvalFrameEx+0x412a)[0x7f95f427d81a]\r\n/opt/Python2.7/lib/libpython2.7.so.1.0(PyEval_EvalCodeEx+0x88e)[0x7f95f4280b7e]\r\n/opt/Python2.7/lib/libpython2.7.so.1.0(PyEval_EvalFrameEx+0x563a)[0x7f95f427ed2a]\r\n/opt/Python2.7/lib/libpython2.7.so.1.0(PyEval_EvalCodeEx+0x88e)[0x7f95f4280b7e]\r\n/opt/Python2.7/lib/libpython2.7.so.1.0(PyEval_EvalFrameEx+0x563a)[0x7f95f427ed2a]\r\n/opt/Python2.7/lib/libpython2.7.so.1.0(PyEval_EvalCodeEx+0x88e)[0x7f95f4280b7e]\r\n/opt/Python2.7/lib/libpython2.7.so.1.0(PyEval_EvalFrameEx+0x563a)[0x7f95f427ed2a]\r\n/opt/Python2.7/lib/libpython2.7.so.1.0(PyEval_EvalCodeEx+0x88e)[0x7f95f4280b7e]\r\n/opt/Python2.7/lib/libpython2.7.so.1.0(PyEval_EvalFrameEx+0x563a)[0x7f95f427ed2a]\r\n/opt/Python2.7/lib/libpython2.7.so.1.0(PyEval_EvalCodeEx+0x88e)[0x7f95f4280b7e]\r\n/opt/Python2.7/lib/libpython2.7.so.1.0(+0x76f28)[0x7f95f41fef28]\r\n/opt/Python2.7/lib/libpython2.7.so.1.0(PyObject_Call+0x53)[0x7f95f41cf9a3]\r\n/opt/Python2.7/lib/libpython2.7.so.1.0(PyEval_EvalFrameEx+0x412a)[0x7f95f427d81a]\r\n/opt/Python2.7/lib/libpython2.7.so.1.0(PyEval_EvalCodeEx+0x88e)[0x7f95f4280b7e]\r\n/opt/Python2.7/lib/libpython2.7.so.1.0(PyEval_EvalFrameEx+0x563a)[0x7f95f427ed2a]\r\n/opt/Python2.7/lib/libpython2.7.so.1.0(PyEval_EvalCodeEx+0x88e)[0x7f95f4280b7e]\r\n/opt/Python2.7/lib/libpython2.7.so.1.0(+0x76f28)[0x7f95f41fef28]\r\n/opt/Python2.7/lib/libpython2.7.so.1.0(PyObject_Call+0x53)[0x7f95f41cf9a3]\r\n/opt/Python2.7/lib/libpython2.7.so.1.0(PyEval_EvalFrameEx+0x412a)[0x7f95f427d81a]\r\n/opt/Python2.7/lib/libpython2.7.so.1.0(PyEval_EvalCodeEx+0x88e)[0x7f95f4280b7e]\r\n/opt/Python2.7/lib/libpython2.7.so.1.0(+0x76e21)[0x7f95f41fee21]\r\n/opt/Python2.7/lib/libpython2.7.so.1.0(PyObject_Call+0x53)[0x7f95f41cf9a3]\r\n/opt/Python2.7/lib/libpython2.7.so.1.0(PyEval_EvalFrameEx+0x412a)[0x7f95f427d81a]\r\n/opt/Python2.7/lib/libpython2.7.so.1.0(PyEval_EvalCodeEx+0x88e)[0x7f95f4280b7e]\r\n/opt/Python2.7/lib/libpython2.7.so.1.0(+0x76f28)[0x7f95f41fef28]\r\n/opt/Python2.7/lib/libpython2.7.so.1.0(PyObject_Call+0x53)[0x7f95f41cf9a3]\r\n/opt/Python2.7/lib/libpython2.7.so.1.0(PyEval_EvalFrameEx+0x412a)[0x7f95f427d81a]\r\n/opt/Python2.7/lib/libpython2.7.so.1.0(PyEval_EvalCodeEx+0x88e)[0x7f95f4280b7e]\r\n/opt/Python2.7/lib/libpython2.7.so.1.0(PyEval_EvalFrameEx+0x563a)[0x7f95f427ed2a]\r\n/opt/Python2.7/lib/libpython2.7.so.1.0(PyEval_EvalCodeEx+0x88e)[0x7f95f4280b7e]\r\n/opt/Python2.7/lib/libpython2.7.so.1.0(+0x76f28)[0x7f95f41fef28]\r\n/opt/Python2.7/lib/libpython2.7.so.1.0(PyObject_Call+0x53)[0x7f95f41cf9a3]\r\n/opt/Python2.7/lib/libpython2.7.so.1.0(PyEval_EvalFrameEx+0x412a)[0x7f95f427d81a]\r\n/opt/Python2.7/lib/libpython2.7.so.1.0(PyEval_EvalCodeEx+0x88e)[0x7f95f4280b7e]\r\n/opt/Python2.7/lib/libpython2.7.so.1.0(+0x76f28)[0x7f95f41fef28]\r\n/opt/Python2.7/lib/libpython2.7.so.1.0(PyObject_Call+0x53)[0x7f95f41cf9a3]\r\n/opt/Python2.7/lib/libpython2.7.so.1.0(PyEval_EvalFrameEx+0x412a)[0x7f95f427d81a]\r\n/opt/Python2.7/lib/libpython2.7.so.1.0(PyEval_EvalCodeEx+0x88e)[0x7f95f4280b7e]\r\n/opt/Python2.7/lib/libpython2.7.so.1.0(+0x76f28)[0x7f95f41fef28]\r\n/opt/Python2.7/lib/libpython2.7.so.1.0(PyObject_Call+0x53)[0x7f95f41cf9a3]\r\n/opt/Python2.7/lib/libpython2.7.so.1.0(PyEval_EvalFrameEx+0x412a)[0x7f95f427d81a]\r\n/opt/Python2.7/lib/libpython2.7.so.1.0(PyEval_EvalCodeEx+0x88e)[0x7f95f4280b7e]\r\n/opt/Python2.7/lib/libpython2.7.so.1.0(PyEval_EvalFrameEx+0x563a)[0x7f95f427ed2a]\r\n/opt/Python2.7/lib/libpython2.7.so.1.0(PyEval_EvalCodeEx+0x88e)[0x7f95f4280b7e]\r\n/opt/Python2.7/lib/libpython2.7.so.1.0(PyEval_EvalFrameEx+0x563a)[0x7f95f427ed2a]\r\n/opt/Python2.7/lib/libpython2.7.so.1.0(PyEval_EvalCodeEx+0x88e)[0x7f95f4280b7e]\r\n/opt/Python2.7/lib/libpython2.7.so.1.0(+0x76f28)[0x7f95f41fef28]\r\n/opt/Python2.7/lib/libpython2.7.so.1.0(PyObject_Call+0x53)[0x7f95f41cf9a3]\r\n/opt/Python2.7/lib/libpython2.7.so.1.0(PyEval_EvalFrameEx+0x412a)[0x7f95f427d81a]\r\n/opt/Python2.7/lib/libpython2.7.so.1.0(PyEval_EvalCodeEx+0x88e)[0x7f95f4280b7e]\r\n/opt/Python2.7/lib/libpython2.7.so.1.0(+0x76f28)[0x7f95f41fef28]\r\n/opt/Python2.7/lib/libpython2.7.so.1.0(PyObject_Call+0x53)[0x7f95f41cf9a3]\r\n.../p27/lib/python2.7/lib-dynload/_functools.so(+0x1764)[0x7f95eba30764]\r\n```\r\n\r\n```\r\n*** glibc detected *** .../p27/bin/python: corrupted double-linked list: 0x000000001771e600 ***\r\n======= Backtrace: =========\r\n/lib64/libc.so.6(+0x76166)[0x7ffd5f3be166]\r\n/lib64/libc.so.6(+0x79f9a)[0x7ffd5f3c1f9a]\r\n/lib64/libc.so.6(__libc_malloc+0x71)[0x7ffd5f3c29a1]\r\n.../p27/lib/python2.7/site-packages/numpy/core/multiarray.so(+0xa5782)[0x7ffd52c8f782]\r\n.../p27/lib/python2.7/site-packages/numpy/core/multiarray.so(+0xe5eb6)[0x7ffd52ccfeb6]\r\n.../p27/lib/python2.7/site-packages/numpy/core/multiarray.so(+0xe64be)[0x7ffd52cd04be]\r\n/opt/Python2.7/lib/libpython2.7.so.1.0(PyEval_EvalFrameEx+0x5910)[0x7ffd6007b000]\r\n/opt/Python2.7/lib/libpython2.7.so.1.0(PyEval_EvalCodeEx+0x88e)[0x7ffd6007cb7e]\r\n/opt/Python2.7/lib/libpython2.7.so.1.0(PyEval_EvalFrameEx+0x563a)[0x7ffd6007ad2a]\r\n/opt/Python2.7/lib/libpython2.7.so.1.0(PyEval_EvalCodeEx+0x88e)[0x7ffd6007cb7e]\r\n/opt/Python2.7/lib/libpython2.7.so.1.0(+0x76e21)[0x7ffd5fffae21]\r\n/opt/Python2.7/lib/libpython2.7.so.1.0(PyObject_Call+0x53)[0x7ffd5ffcb9a3]\r\n/opt/Python2.7/lib/libpython2.7.so.1.0(+0x5a0cf)[0x7ffd5ffde0cf]\r\n/opt/Python2.7/lib/libpython2.7.so.1.0(PyObject_Call+0x53)[0x7ffd5ffcb9a3]\r\n/opt/Python2.7/lib/libpython2.7.so.1.0(_PyObject_CallFunction_SizeT+0xac)[0x7ffd5ffcecbc]\r\n.../p27/lib/python2.7/site-packages/numpy/core/multiarray.so(+0x61909)[0x7ffd52c4b909]\r\n.../p27/lib/python2.7/site-packages/numpy/core/multiarray.so(+0x64a30)[0x7ffd52c4ea30]\r\n.../p27/lib/python2.7/site-packages/numpy/core/multiarray.so(+0x65ab3)[0x7ffd52c4fab3]\r\n.../p27/lib/python2.7/site-packages/matplotlib/_path.so(_Z31py_to_agg_transformation_matrixP7_objectb+0x74)[0x7ffd48ddb994]\r\n.../p27/lib/python2.7/site-packages/matplotlib/_path.so(_ZN12_path_module14convert_to_svgERKN2Py5TupleE+0xb3)[0x7ffd48dc4003]\r\n.../p27/lib/python2.7/site-packages/matplotlib/_path.so(_ZN2Py15ExtensionModuleI12_path_moduleE21invoke_method_varargsEPvRKNS_5TupleE+0x18)[0x7ffd48dcf828]\r\n.../p27/lib/python2.7/site-packages/matplotlib/_path.so(method_varargs_call_handler+0x15d)[0x7ffd48dea20d]\r\n/opt/Python2.7/lib/libpython2.7.so.1.0(PyEval_EvalFrameEx+0x5910)[0x7ffd6007b000]\r\n/opt/Python2.7/lib/libpython2.7.so.1.0(PyEval_EvalCodeEx+0x88e)[0x7ffd6007cb7e]\r\n/opt/Python2.7/lib/libpython2.7.so.1.0(PyEval_EvalFrameEx+0x563a)[0x7ffd6007ad2a]\r\n/opt/Python2.7/lib/libpython2.7.so.1.0(PyEval_EvalCodeEx+0x88e)[0x7ffd6007cb7e]\r\n/opt/Python2.7/lib/libpython2.7.so.1.0(PyEval_EvalFrameEx+0x563a)[0x7ffd6007ad2a]\r\n/opt/Python2.7/lib/libpython2.7.so.1.0(PyEval_EvalCodeEx+0x88e)[0x7ffd6007cb7e]\r\n/opt/Python2.7/lib/libpython2.7.so.1.0(PyEval_EvalFrameEx+0x563a)[0x7ffd6007ad2a]\r\n/opt/Python2.7/lib/libpython2.7.so.1.0(PyEval_EvalCodeEx+0x88e)[0x7ffd6007cb7e]\r\n/opt/Python2.7/lib/libpython2.7.so.1.0(PyEval_EvalFrameEx+0x563a)[0x7ffd6007ad2a]\r\n/opt/Python2.7/lib/libpython2.7.so.1.0(PyEval_EvalCodeEx+0x88e)[0x7ffd6007cb7e]\r\n/opt/Python2.7/lib/libpython2.7.so.1.0(+0x76f28)[0x7ffd5fffaf28]\r\n/opt/Python2.7/lib/libpython2.7.so.1.0(PyObject_Call+0x53)[0x7ffd5ffcb9a3]\r\n/opt/Python2.7/lib/libpython2.7.so.1.0(PyEval_EvalFrameEx+0x412a)[0x7ffd6007981a]\r\n/opt/Python2.7/lib/libpython2.7.so.1.0(PyEval_EvalCodeEx+0x88e)[0x7ffd6007cb7e]\r\n/opt/Python2.7/lib/libpython2.7.so.1.0(PyEval_EvalFrameEx+0x563a)[0x7ffd6007ad2a]\r\n/opt/Python2.7/lib/libpython2.7.so.1.0(PyEval_EvalCodeEx+0x88e)[0x7ffd6007cb7e]\r\n/opt/Python2.7/lib/libpython2.7.so.1.0(+0x76f28)[0x7ffd5fffaf28]\r\n/opt/Python2.7/lib/libpython2.7.so.1.0(PyObject_Call+0x53)[0x7ffd5ffcb9a3]\r\n/opt/Python2.7/lib/libpython2.7.so.1.0(PyEval_EvalFrameEx+0x412a)[0x7ffd6007981a]\r\n/opt/Python2.7/lib/libpython2.7.so.1.0(PyEval_EvalCodeEx+0x88e)[0x7ffd6007cb7e]\r\n/opt/Python2.7/lib/libpython2.7.so.1.0(+0x76e21)[0x7ffd5fffae21]\r\n/opt/Python2.7/lib/libpython2.7.so.1.0(PyObject_Call+0x53)[0x7ffd5ffcb9a3]\r\n/opt/Python2.7/lib/libpython2.7.so.1.0(PyEval_EvalFrameEx+0x412a)[0x7ffd6007981a]\r\n/opt/Python2.7/lib/libpython2.7.so.1.0(PyEval_EvalCodeEx+0x88e)[0x7ffd6007cb7e]\r\n/opt/Python2.7/lib/libpython2.7.so.1.0(+0x76f28)[0x7ffd5fffaf28]\r\n/opt/Python2.7/lib/libpython2.7.so.1.0(PyObject_Call+0x53)[0x7ffd5ffcb9a3]\r\n/opt/Python2.7/lib/libpython2.7.so.1.0(PyEval_EvalFrameEx+0x412a)[0x7ffd6007981a]\r\n/opt/Python2.7/lib/libpython2.7.so.1.0(PyEval_EvalCodeEx+0x88e)[0x7ffd6007cb7e]\r\n/opt/Python2.7/lib/libpython2.7.so.1.0(PyEval_EvalFrameEx+0x563a)[0x7ffd6007ad2a]\r\n/opt/Python2.7/lib/libpython2.7.so.1.0(PyEval_EvalCodeEx+0x88e)[0x7ffd6007cb7e]\r\n/opt/Python2.7/lib/libpython2.7.so.1.0(+0x76f28)[0x7ffd5fffaf28]\r\n/opt/Python2.7/lib/libpython2.7.so.1.0(PyObject_Call+0x53)[0x7ffd5ffcb9a3]\r\n/opt/Python2.7/lib/libpython2.7.so.1.0(PyEval_EvalFrameEx+0x412a)[0x7ffd6007981a]\r\n/opt/Python2.7/lib/libpython2.7.so.1.0(PyEval_EvalCodeEx+0x88e)[0x7ffd6007cb7e]\r\n/opt/Python2.7/lib/libpython2.7.so.1.0(+0x76f28)[0x7ffd5fffaf28]\r\n/opt/Python2.7/lib/libpython2.7.so.1.0(PyObject_Call+0x53)[0x7ffd5ffcb9a3]\r\n/opt/Python2.7/lib/libpython2.7.so.1.0(PyEval_EvalFrameEx+0x412a)[0x7ffd6007981a]\r\n/opt/Python2.7/lib/libpython2.7.so.1.0(PyEval_EvalCodeEx+0x88e)[0x7ffd6007cb7e]\r\n/opt/Python2.7/lib/libpython2.7.so.1.0(+0x76f28)[0x7ffd5fffaf28]\r\n/opt/Python2.7/lib/libpython2.7.so.1.0(PyObject_Call+0x53)[0x7ffd5ffcb9a3]\r\n/opt/Python2.7/lib/libpython2.7.so.1.0(PyEval_EvalFrameEx+0x412a)[0x7ffd6007981a]\r\n```\r\n\r\n```\r\n*** glibc detected *** .../p27/bin/python: corrupted double-linked list: 0x0000000005905b40 ***\r\n======= Backtrace: =========\r\n/lib64/libc.so.6(+0x76166)[0x7ff01fe0c166]\r\n/lib64/libc.so.6(+0x79f9a)[0x7ff01fe0ff9a]\r\n/lib64/libc.so.6(__libc_malloc+0x71)[0x7ff01fe109a1]\r\n.../p27/lib/python2.7/site-packages/matplotlib/_path.so(_ZN12_path_module14convert_to_svgERKN2Py5TupleE+0x92c)[0x7ff00981287c]\r\n.../p27/lib/python2.7/site-packages/matplotlib/_path.so(_ZN2Py15ExtensionModuleI12_path_moduleE21invoke_method_varargsEPvRKNS_5TupleE+0x18)[0x7ff00981d828]\r\n.../p27/lib/python2.7/site-packages/matplotlib/_path.so(method_varargs_call_handler+0x15d)[0x7ff00983820d]\r\n/opt/Python2.7/lib/libpython2.7.so.1.0(PyEval_EvalFrameEx+0x5910)[0x7ff020ac9000]\r\n/opt/Python2.7/lib/libpython2.7.so.1.0(PyEval_EvalCodeEx+0x88e)[0x7ff020acab7e]\r\n/opt/Python2.7/lib/libpython2.7.so.1.0(PyEval_EvalFrameEx+0x563a)[0x7ff020ac8d2a]\r\n/opt/Python2.7/lib/libpython2.7.so.1.0(PyEval_EvalCodeEx+0x88e)[0x7ff020acab7e]\r\n/opt/Python2.7/lib/libpython2.7.so.1.0(PyEval_EvalFrameEx+0x563a)[0x7ff020ac8d2a]\r\n/opt/Python2.7/lib/libpython2.7.so.1.0(PyEval_EvalCodeEx+0x88e)[0x7ff020acab7e]\r\n/opt/Python2.7/lib/libpython2.7.so.1.0(PyEval_EvalFrameEx+0x563a)[0x7ff020ac8d2a]\r\n/opt/Python2.7/lib/libpython2.7.so.1.0(PyEval_EvalCodeEx+0x88e)[0x7ff020acab7e]\r\n/opt/Python2.7/lib/libpython2.7.so.1.0(PyEval_EvalFrameEx+0x563a)[0x7ff020ac8d2a]\r\n/opt/Python2.7/lib/libpython2.7.so.1.0(PyEval_EvalCodeEx+0x88e)[0x7ff020acab7e]\r\n/opt/Python2.7/lib/libpython2.7.so.1.0(+0x76f28)[0x7ff020a48f28]\r\n/opt/Python2.7/lib/libpython2.7.so.1.0(PyObject_Call+0x53)[0x7ff020a199a3]\r\n/opt/Python2.7/lib/libpython2.7.so.1.0(PyEval_EvalFrameEx+0x412a)[0x7ff020ac781a]\r\n/opt/Python2.7/lib/libpython2.7.so.1.0(PyEval_EvalCodeEx+0x88e)[0x7ff020acab7e]\r\n/opt/Python2.7/lib/libpython2.7.so.1.0(PyEval_EvalFrameEx+0x563a)[0x7ff020ac8d2a]\r\n/opt/Python2.7/lib/libpython2.7.so.1.0(PyEval_EvalCodeEx+0x88e)[0x7ff020acab7e]\r\n/opt/Python2.7/lib/libpython2.7.so.1.0(+0x76f28)[0x7ff020a48f28]\r\n/opt/Python2.7/lib/libpython2.7.so.1.0(PyObject_Call+0x53)[0x7ff020a199a3]\r\n/opt/Python2.7/lib/libpython2.7.so.1.0(PyEval_EvalFrameEx+0x412a)[0x7ff020ac781a]\r\n/opt/Python2.7/lib/libpython2.7.so.1.0(PyEval_EvalCodeEx+0x88e)[0x7ff020acab7e]\r\n/opt/Python2.7/lib/libpython2.7.so.1.0(+0x76e21)[0x7ff020a48e21]\r\n/opt/Python2.7/lib/libpython2.7.so.1.0(PyObject_Call+0x53)[0x7ff020a199a3]\r\n/opt/Python2.7/lib/libpython2.7.so.1.0(PyEval_EvalFrameEx+0x412a)[0x7ff020ac781a]\r\n/opt/Python2.7/lib/libpython2.7.so.1.0(PyEval_EvalCodeEx+0x88e)[0x7ff020acab7e]\r\n/opt/Python2.7/lib/libpython2.7.so.1.0(+0x76f28)[0x7ff020a48f28]\r\n/opt/Python2.7/lib/libpython2.7.so.1.0(PyObject_Call+0x53)[0x7ff020a199a3]\r\n/opt/Python2.7/lib/libpython2.7.so.1.0(PyEval_EvalFrameEx+0x412a)[0x7ff020ac781a]\r\n/opt/Python2.7/lib/libpython2.7.so.1.0(PyEval_EvalCodeEx+0x88e)[0x7ff020acab7e]\r\n/opt/Python2.7/lib/libpython2.7.so.1.0(PyEval_EvalFrameEx+0x563a)[0x7ff020ac8d2a]\r\n/opt/Python2.7/lib/libpython2.7.so.1.0(PyEval_EvalCodeEx+0x88e)[0x7ff020acab7e]\r\n/opt/Python2.7/lib/libpython2.7.so.1.0(+0x76f28)[0x7ff020a48f28]\r\n/opt/Python2.7/lib/libpython2.7.so.1.0(PyObject_Call+0x53)[0x7ff020a199a3]\r\n/opt/Python2.7/lib/libpython2.7.so.1.0(PyEval_EvalFrameEx+0x412a)[0x7ff020ac781a]\r\n/opt/Python2.7/lib/libpython2.7.so.1.0(PyEval_EvalCodeEx+0x88e)[0x7ff020acab7e]\r\n/opt/Python2.7/lib/libpython2.7.so.1.0(+0x76f28)[0x7ff020a48f28]\r\n/opt/Python2.7/lib/libpython2.7.so.1.0(PyObject_Call+0x53)[0x7ff020a199a3]\r\n/opt/Python2.7/lib/libpython2.7.so.1.0(PyEval_EvalFrameEx+0x412a)[0x7ff020ac781a]\r\n/opt/Python2.7/lib/libpython2.7.so.1.0(PyEval_EvalCodeEx+0x88e)[0x7ff020acab7e]\r\n/opt/Python2.7/lib/libpython2.7.so.1.0(+0x76f28)[0x7ff020a48f28]\r\n/opt/Python2.7/lib/libpython2.7.so.1.0(PyObject_Call+0x53)[0x7ff020a199a3]\r\n/opt/Python2.7/lib/libpython2.7.so.1.0(PyEval_EvalFrameEx+0x412a)[0x7ff020ac781a]\r\n/opt/Python2.7/lib/libpython2.7.so.1.0(PyEval_EvalCodeEx+0x88e)[0x7ff020acab7e]\r\n/opt/Python2.7/lib/libpython2.7.so.1.0(PyEval_EvalFrameEx+0x563a)[0x7ff020ac8d2a]\r\n/opt/Python2.7/lib/libpython2.7.so.1.0(PyEval_EvalCodeEx+0x88e)[0x7ff020acab7e]\r\n/opt/Python2.7/lib/libpython2.7.so.1.0(PyEval_EvalFrameEx+0x563a)[0x7ff020ac8d2a]\r\n/opt/Python2.7/lib/libpython2.7.so.1.0(PyEval_EvalCodeEx+0x88e)[0x7ff020acab7e]\r\n/opt/Python2.7/lib/libpython2.7.so.1.0(+0x76f28)[0x7ff020a48f28]\r\n/opt/Python2.7/lib/libpython2.7.so.1.0(PyObject_Call+0x53)[0x7ff020a199a3]\r\n/opt/Python2.7/lib/libpython2.7.so.1.0(PyEval_EvalFrameEx+0x412a)[0x7ff020ac781a]\r\n/opt/Python2.7/lib/libpython2.7.so.1.0(PyEval_EvalCodeEx+0x88e)[0x7ff020acab7e]\r\n/opt/Python2.7/lib/libpython2.7.so.1.0(+0x76f28)[0x7ff020a48f28]\r\n/opt/Python2.7/lib/libpython2.7.so.1.0(PyObject_Call+0x53)[0x7ff020a199a3]\r\n.../p27/lib/python2.7/lib-dynload/_functools.so(+0x1764)[0x7ff01827a764]\r\n/opt/Python2.7/lib/libpython2.7.so.1.0(PyObject_Call+0x53)[0x7ff020a199a3]\r\n/opt/Python2.7/lib/libpython2.7.so.1.0(PyEval_EvalFrameEx+0x4ddd)[0x7ff020ac84cd]\r\n/opt/Python2.7/lib/libpython2.7.so.1.0(PyEval_EvalCodeEx+0x88e)[0x7ff020acab7e]\r\n/opt/Python2.7/lib/libpython2.7.so.1.0(PyEval_EvalFrameEx+0x563a)[0x7ff020ac8d2a]\r\n```\r\n\r\n```\r\n*** glibc detected *** .../p27/bin/python: corrupted double-linked list: 0x0000000009e18c50 ***\r\n======= Backtrace: =========\r\n/lib64/libc.so.6(+0x76166)[0x7f6fb6e02166]\r\n/lib64/libc.so.6(+0x79f9a)[0x7f6fb6e05f9a]\r\n/lib64/libc.so.6(__libc_malloc+0x71)[0x7f6fb6e069a1]\r\n.../p27/lib/python2.7/site-packages/matplotlib/_path.so(_ZN12_path_module14convert_to_svgERKN2Py5TupleE+0x92c)[0x7f6fa080887c]\r\n.../p27/lib/python2.7/site-packages/matplotlib/_path.so(_ZN2Py15ExtensionModuleI12_path_moduleE21invoke_method_varargsEPvRKNS_5TupleE+0x18)[0x7f6fa0813828]\r\n.../p27/lib/python2.7/site-packages/matplotlib/_path.so(method_varargs_call_handler+0x15d)[0x7f6fa082e20d]\r\n/opt/Python2.7/lib/libpython2.7.so.1.0(PyEval_EvalFrameEx+0x5910)[0x7f6fb7abf000]\r\n/opt/Python2.7/lib/libpython2.7.so.1.0(PyEval_EvalCodeEx+0x88e)[0x7f6fb7ac0b7e]\r\n/opt/Python2.7/lib/libpython2.7.so.1.0(PyEval_EvalFrameEx+0x563a)[0x7f6fb7abed2a]\r\n/opt/Python2.7/lib/libpython2.7.so.1.0(PyEval_EvalCodeEx+0x88e)[0x7f6fb7ac0b7e]\r\n/opt/Python2.7/lib/libpython2.7.so.1.0(PyEval_EvalFrameEx+0x563a)[0x7f6fb7abed2a]\r\n/opt/Python2.7/lib/libpython2.7.so.1.0(PyEval_EvalCodeEx+0x88e)[0x7f6fb7ac0b7e]\r\n/opt/Python2.7/lib/libpython2.7.so.1.0(PyEval_EvalFrameEx+0x563a)[0x7f6fb7abed2a]\r\n/opt/Python2.7/lib/libpython2.7.so.1.0(PyEval_EvalCodeEx+0x88e)[0x7f6fb7ac0b7e]\r\n/opt/Python2.7/lib/libpython2.7.so.1.0(PyEval_EvalFrameEx+0x563a)[0x7f6fb7abed2a]\r\n/opt/Python2.7/lib/libpython2.7.so.1.0(PyEval_EvalCodeEx+0x88e)[0x7f6fb7ac0b7e]\r\n/opt/Python2.7/lib/libpython2.7.so.1.0(+0x76f28)[0x7f6fb7a3ef28]\r\n/opt/Python2.7/lib/libpython2.7.so.1.0(PyObject_Call+0x53)[0x7f6fb7a0f9a3]\r\n/opt/Python2.7/lib/libpython2.7.so.1.0(PyEval_EvalFrameEx+0x412a)[0x7f6fb7abd81a]\r\n/opt/Python2.7/lib/libpython2.7.so.1.0(PyEval_EvalCodeEx+0x88e)[0x7f6fb7ac0b7e]\r\n/opt/Python2.7/lib/libpython2.7.so.1.0(PyEval_EvalFrameEx+0x563a)[0x7f6fb7abed2a]\r\n/opt/Python2.7/lib/libpython2.7.so.1.0(PyEval_EvalCodeEx+0x88e)[0x7f6fb7ac0b7e]\r\n/opt/Python2.7/lib/libpython2.7.so.1.0(+0x76f28)[0x7f6fb7a3ef28]\r\n/opt/Python2.7/lib/libpython2.7.so.1.0(PyObject_Call+0x53)[0x7f6fb7a0f9a3]\r\n/opt/Python2.7/lib/libpython2.7.so.1.0(PyEval_EvalFrameEx+0x412a)[0x7f6fb7abd81a]\r\n/opt/Python2.7/lib/libpython2.7.so.1.0(PyEval_EvalCodeEx+0x88e)[0x7f6fb7ac0b7e]\r\n/opt/Python2.7/lib/libpython2.7.so.1.0(+0x76e21)[0x7f6fb7a3ee21]\r\n/opt/Python2.7/lib/libpython2.7.so.1.0(PyObject_Call+0x53)[0x7f6fb7a0f9a3]\r\n/opt/Python2.7/lib/libpython2.7.so.1.0(PyEval_EvalFrameEx+0x412a)[0x7f6fb7abd81a]\r\n/opt/Python2.7/lib/libpython2.7.so.1.0(PyEval_EvalCodeEx+0x88e)[0x7f6fb7ac0b7e]\r\n/opt/Python2.7/lib/libpython2.7.so.1.0(+0x76f28)[0x7f6fb7a3ef28]\r\n/opt/Python2.7/lib/libpython2.7.so.1.0(PyObject_Call+0x53)[0x7f6fb7a0f9a3]\r\n/opt/Python2.7/lib/libpython2.7.so.1.0(PyEval_EvalFrameEx+0x412a)[0x7f6fb7abd81a]\r\n/opt/Python2.7/lib/libpython2.7.so.1.0(PyEval_EvalCodeEx+0x88e)[0x7f6fb7ac0b7e]\r\n/opt/Python2.7/lib/libpython2.7.so.1.0(PyEval_EvalFrameEx+0x563a)[0x7f6fb7abed2a]\r\n/opt/Python2.7/lib/libpython2.7.so.1.0(PyEval_EvalCodeEx+0x88e)[0x7f6fb7ac0b7e]\r\n/opt/Python2.7/lib/libpython2.7.so.1.0(+0x76f28)[0x7f6fb7a3ef28]\r\n/opt/Python2.7/lib/libpython2.7.so.1.0(PyObject_Call+0x53)[0x7f6fb7a0f9a3]\r\n/opt/Python2.7/lib/libpython2.7.so.1.0(PyEval_EvalFrameEx+0x412a)[0x7f6fb7abd81a]\r\n/opt/Python2.7/lib/libpython2.7.so.1.0(PyEval_EvalCodeEx+0x88e)[0x7f6fb7ac0b7e]\r\n/opt/Python2.7/lib/libpython2.7.so.1.0(+0x76f28)[0x7f6fb7a3ef28]\r\n/opt/Python2.7/lib/libpython2.7.so.1.0(PyObject_Call+0x53)[0x7f6fb7a0f9a3]\r\n/opt/Python2.7/lib/libpython2.7.so.1.0(PyEval_EvalFrameEx+0x412a)[0x7f6fb7abd81a]\r\n/opt/Python2.7/lib/libpython2.7.so.1.0(PyEval_EvalCodeEx+0x88e)[0x7f6fb7ac0b7e]\r\n/opt/Python2.7/lib/libpython2.7.so.1.0(+0x76f28)[0x7f6fb7a3ef28]\r\n/opt/Python2.7/lib/libpython2.7.so.1.0(PyObject_Call+0x53)[0x7f6fb7a0f9a3]\r\n/opt/Python2.7/lib/libpython2.7.so.1.0(PyEval_EvalFrameEx+0x412a)[0x7f6fb7abd81a]\r\n/opt/Python2.7/lib/libpython2.7.so.1.0(PyEval_EvalCodeEx+0x88e)[0x7f6fb7ac0b7e]\r\n/opt/Python2.7/lib/libpython2.7.so.1.0(PyEval_EvalFrameEx+0x563a)[0x7f6fb7abed2a]\r\n/opt/Python2.7/lib/libpython2.7.so.1.0(PyEval_EvalCodeEx+0x88e)[0x7f6fb7ac0b7e]\r\n/opt/Python2.7/lib/libpython2.7.so.1.0(PyEval_EvalFrameEx+0x563a)[0x7f6fb7abed2a]\r\n/opt/Python2.7/lib/libpython2.7.so.1.0(PyEval_EvalCodeEx+0x88e)[0x7f6fb7ac0b7e]\r\n/opt/Python2.7/lib/libpython2.7.so.1.0(+0x76f28)[0x7f6fb7a3ef28]\r\n/opt/Python2.7/lib/libpython2.7.so.1.0(PyObject_Call+0x53)[0x7f6fb7a0f9a3]\r\n/opt/Python2.7/lib/libpython2.7.so.1.0(PyEval_EvalFrameEx+0x412a)[0x7f6fb7abd81a]\r\n/opt/Python2.7/lib/libpython2.7.so.1.0(PyEval_EvalCodeEx+0x88e)[0x7f6fb7ac0b7e]\r\n/opt/Python2.7/lib/libpython2.7.so.1.0(+0x76f28)[0x7f6fb7a3ef28]\r\n/opt/Python2.7/lib/libpython2.7.so.1.0(PyObject_Call+0x53)[0x7f6fb7a0f9a3]\r\n.../p27/lib/python2.7/lib-dynload/_functools.so(+0x1764)[0x7f6faf270764]\r\n/opt/Python2.7/lib/libpython2.7.so.1.0(PyObject_Call+0x53)[0x7f6fb7a0f9a3]\r\n/opt/Python2.7/lib/libpython2.7.so.1.0(PyEval_EvalFrameEx+0x4ddd)[0x7f6fb7abe4cd]\r\n/opt/Python2.7/lib/libpython2.7.so.1.0(PyEval_EvalCodeEx+0x88e)[0x7f6fb7ac0b7e]\r\n/opt/Python2.7/lib/libpython2.7.so.1.0(PyEval_EvalFrameEx+0x563a)[0x7f6fb7abed2a]\r\n```\r\n\r\nSo, in summary: up until 760b2fc everything is fine, but with the following commit 7b39e78b, my program crashes randomly when drawing things with matplotlib, usually after a few minutes of drawing plots.\r\n\r\nAs the crashes appear randomly I cannot be absolutely sure that up until 760b2fc the problem really is not appearing, but as I let it run for an hour without crashes I'm pretty confident.\r\n\r\nI hope you can find out what's going on, I'm certainly not an expert in these things. One guess of me would be that something writes over the edge of the string array, and this then sometimes happens to be a doubly linked list which gets corrupted."""
3298,38619017,mattieudv,tacaswell,2014-07-24 11:18:17,2015-03-03 18:43:20,2014-10-19 04:27:01,closed,tacaswell,v1.4.x,6,confirmed bug;needs_revision,https://api.github.com/repos/matplotlib/matplotlib/issues/3298,b'Wedge not honouring specified angular range',"b""\r\nThe following code illustrates the issue. The only difference in the two figures is that there is added decimal places to the precision of the angular range. This added precision however results in complete failure to draw the wedge correctly - a disc is drawn instead. It is repeatable, and tested to be faulty in matplotlib.__version__ '1.2.0' as well as '1.3.1'\r\n```\r\nimport matplotlib\r\nimport matplotlib.pyplot as plt\r\n\r\nf1=figure(1)\r\nf1.clf()\r\nf1a=f1.gca()\r\nf1a.add_artist(matplotlib.patches.Wedge((265.69040472128086,268.8466729614438), 100, 52.31386924,232.31386924,color='c'))\r\nplt.title('correct sector')\r\nplt.xlim([-500,500])\r\nplt.ylim([-500,500])\r\nplt.draw()\r\n\r\nf2=figure(2)\r\nf2.clf()\r\nf2a=f2.gca()\r\nf2a.add_artist(matplotlib.patches.Wedge((265.69040472128086,268.8466729614438), 100, 52.313869244286224,232.31386924428622,color='c'))\r\nplt.title('incorrect sector')\r\nplt.xlim([-500,500])\r\nplt.ylim([-500,500])\r\nplt.draw()\r\n\r\n```\r\n\r\n[TAC - edited to fix yelling/formatting"""
3196,37304142,astrofrog,mdboom,2014-07-07 19:54:23,2014-12-03 17:35:38,2014-12-03 16:39:34,closed,mdboom,v1.4.x,18,confirmed bug,https://api.github.com/repos/matplotlib/matplotlib/issues/3196,b'Issue with iterability of axes arguments [backport to 1.4.x]',"b""I have been trying to use the ``_as_mpl_axes`` method to create a custom projection. I am returning an Axes subclass and a dictionary of arguments to pass to the class. One of the arguments is an item of type ``astropy.wcs.WCS``. In ``figure.py``, the following code:\r\n\r\n```\r\n        def fixitems(items):\r\n            #items may have arrays and lists in them, so convert them\r\n            # to tuples for the key\r\n            ret = []\r\n            for k, v in items:\r\n                if iterable(v):\r\n                    v = tuple(v)\r\n                ret.append((k, v))\r\n            return tuple(ret)\r\n```\r\n\r\nresults in an error, specifically when doing ``tuple(v)``. The issue is that ``iterable(wcs)`` returns ``True`` but ``tuple(wcs)`` crashes. As a general issue, ``iter(v)`` working does not guarantee that ``tuple(v)`` will work. One solution is to simply do:\r\n\r\n```\r\nif iterable(v):\r\n    try:\r\n        v = tuple(v)\r\n    except:\r\n        pass\r\n```\r\n\r\nI'm not sure if there is a better way to deal with this kind of issue. Just for the record, ``tuple(wcs)`` gives:\r\n\r\n```\r\nValueError: Cannot downsample a WCS with indexing.  Use wcs.sub or wcs.dropaxis if you want to remove axes.\r\n```\r\n\r\nTo some extent, the issue here is that while ``WCS`` has a ``__getitem__`` method, it is not strictly iterable. So maybe the issue is actually that ``iterable`` should not rely just on ``iter``. Maybe the ``iterable`` function:\r\n\r\n```\r\n\r\ndef iterable(obj):\r\n    'return true if *obj* is iterable'\r\n    try:\r\n        iter(obj)\r\n    except TypeError:\r\n        return False\r\n    return True\r\n```\r\n\r\nin ``cbook.py`` should be using:\r\n\r\n```\r\nnext(iter(wcs))\r\n```\r\n\r\n? (which does raise an error in my case)\r\n\r\ncc @mdboom, since it involves the WCS class.\r\n"""
3166,36750843,twiecki,dopplershift,2014-06-29 17:34:54,2014-07-11 16:28:39,2014-07-11 16:28:39,closed,,v1.4.0,1,confirmed bug,https://api.github.com/repos/matplotlib/matplotlib/issues/3166,"b'subplot(x, x, 0) should raise Exception'","b""I'm sure I'm not the only one who used this idiom:\r\n```python\r\nfor i in range(4):\r\n   plt.subplot(2, 2, i)\r\n```\r\n\r\nAnd got confused that the subplots show up in the wrong order. Understandbly, subplot uses 1-based indexing. But what about throwing an exception if 0 is passed, that would save a lot of wasted hours tracking down this odd behavior."""
3117,35101708,jorgesca,pelson,2014-06-05 21:55:10,2014-06-10 12:44:44,2014-06-10 12:44:44,closed,,v1.4.0,4,confirmed bug;Release critical,https://api.github.com/repos/matplotlib/matplotlib/issues/3117,b'Qt4 backend using unichr() in python3',"b""I get a NameError exception (see backtrace below) when trying to use key\r\nevents in matplotlib (master branch rev:\r\ne322d5f5bb024bbec44d3ba76da1bc16bf52af9c), python 3.4.1, and pyqt 4.10.\r\nThis has been posted to the matplotlib-users ml: http://thread.gmane.org/gmane.comp.python.matplotlib.general/34364\r\n\r\n```python\r\nNameError                                 Traceback (most recent call last)\r\n/home/jscandal/sw/matplotlib/matplotlib/lib/matplotlib/backends/backend_qt4.py\r\nin\r\nkeyReleaseEvent(self=<matplotlib.backends.backend_qt4agg.FigureCanvasQTAgg\r\nobject>, event=<PyQt4.QtGui.QKeyEvent object>)\r\n    308 \r\n    309     def keyReleaseEvent(self, event):\r\n--> 310         key = self._get_key(event)\r\n        key = undefined\r\n        self._get_key = <bound method FigureCanvasQTAgg._get_key of\r\n<matplotlib.backends.backend_qt4agg.FigureCanvasQTAgg object at 0x7f0393412948>>\r\n        event = <PyQt4.QtGui.QKeyEvent object at 0x7f0393507a68>\r\n    311         if key is None:\r\n    312             return\r\n\r\n/home/jscandal/sw/matplotlib/matplotlib/lib/matplotlib/backends/backend_qt4.py\r\nin _get_key(self=<matplotlib.backends.backend_qt4agg.FigureCanvasQTAgg\r\nobject>, event=<PyQt4.QtGui.QKeyEvent object>)\r\n    363                 return None\r\n    364 \r\n--> 365             key = unichr(event_key)\r\n        key = undefined\r\n        global unichr = undefined\r\n        global event_key = undefined\r\n    366             # qt delivers capitalized letters.  fix capitalization\r\n    367             # note that capslock is ignored\r\n\r\nNameError: name 'unichr' is not defined\r\n```"""
3095,34640900,dkillick,tacaswell,2014-05-30 12:27:49,2015-01-31 18:15:46,2015-01-31 18:15:45,closed,pelson,v1.4.3,11,confirmed bug;Release critical,https://api.github.com/repos/matplotlib/matplotlib/issues/3095,b'Memory issue when plotting large arrays with pcolormesh',"b'Plotting large-ish arrays using pcolormesh with current (e2c5918) matplotlib master looks like it might have a memory leak. Running the following code on matplotlib v1.3.1 produces a `QuadMesh` in approximately a second. However running the same code on matplotlib master floods the memory until either the pcolormesh call is aborted or it runs out of memory.\r\n\r\n```python\r\nimport matplotlib.pyplot as plt\r\nimport numpy as np\r\n\r\ndata = np.random.rand(3000*3000).reshape(3000, 3000)\r\nplt.pcolormesh(data)\r\nplt.show()\r\n```'"
3091,34416884,bennettbrowniowa,tacaswell,2014-05-27 21:54:51,2014-06-01 13:18:39,2014-06-01 13:18:39,closed,,v1.4.0,9,confirmed bug,https://api.github.com/repos/matplotlib/matplotlib/issues/3091,"b""set_xlim() crashes kernel if interpolation='none'""","b'Using matplotlib 1.3.1-3, the following code causes my Python kernel to crash. \r\n\r\nimg = plt.imread(""cat.png"")\r\nfig, ax = plt.subplots(1, 3)\r\nax[0].imshow(img, interpolation=\'none\')\r\nax[0].set_xlim(135,165) # larger than image\r\nfig.show()'"
3057,33246844,Phlya,tacaswell,2014-05-10 19:40:21,2016-02-18 02:39:53,2016-02-18 02:36:03,closed,,2.0 (style change major release),15,backend/AGG;confirmed bug,https://api.github.com/repos/matplotlib/matplotlib/issues/3057,b'DPI-connected bug of imshow when using multiple masked arrays',"b""Initial discussion started here: http://stackoverflow.com/questions/23490289/matplotlib-shows-different-figure-than-saves-from-the-show-window\r\n\r\nEssentially I need to combine a few arrays to make a whole image I want to produce using imshow. So that the arrays do not overlay each other I use masking (as in the example at StackOverflow) or I set some data to `None`, so that it is not plotted; I do this:\r\n\r\n    cmap = matplotlib.cm.get_cmap()\r\n    cmap.set_bad('w', 0.0)\r\n\r\nSee the whole working example:\r\n\r\n    import matplotlib\r\n    import matplotlib.pyplot as plt\r\n    import numpy as np\r\n    \r\n    data = np.random.random((3000, 3000))\r\n    data[np.tril_indices_from(data, 1)] = None\r\n    data2 = np.random.random((3000, 3000))\r\n    data2[np.triu_indices_from(data2, -1)] = None\r\n    \r\n    cmap = matplotlib.cm.get_cmap()\r\n    cmap.set_bad('w', 0.0)\r\n    \r\n    plt.imshow(data, interpolation='none', cmap=cmap)\r\n    plt.imshow(data2, interpolation='none', cmap=cmap)\r\n    plt.locator_params(nbins=60)\r\n    plt.show()\r\n\r\nSo the thing is, if I look at such image in an interactive window everything looks perfect (e.g. I zoomed into top-left corner, so that the pixels are visible:\r\n![show_zoom_save](https://cloud.githubusercontent.com/assets/2895034/2936883/ad1ebeb2-d878-11e3-8ff0-2a020eceb90e.png)\r\n\r\nIf I save the whole image to a file from the Save-dialog of the window, the image gets screwed, so that the pixels are much bigger, than they should (it is a printscreen of Inkscape with opened SVG-file, where I zoomed to approximately the same coordinates):\r\n![_046](https://cloud.githubusercontent.com/assets/2895034/2936885/e8004eba-d878-11e3-94c4-2fc7b082979d.png)\r\nSame goes to direct saving the image to disk (SVG):\r\n![_047](https://cloud.githubusercontent.com/assets/2895034/2936891/1ccb50d6-d879-11e3-858c-27cd4d543f87.png)\r\nIf I use only data, but not data2, the image looks good:\r\n![_048](https://cloud.githubusercontent.com/assets/2895034/2936895/583593d4-d879-11e3-91a5-64dc8b24d98a.png)\r\nIf I save both of them, but change the dpi (e.g. to 900), the image changes and the so-to-say resolution gets better, but the image gets really messy:\r\n![_049](https://cloud.githubusercontent.com/assets/2895034/2936901/a86e285c-d879-11e3-91b5-db328f2eebf3.png)\r\nYou can probably see, that some pixels are distorted. If not, here is a closer zoom into this image:\r\n![_050](https://cloud.githubusercontent.com/assets/2895034/2936908/f028d278-d879-11e3-8f3d-833caa72c889.png)\r\nAt the same time you can see, that the white diagonal no more ends and starts in the very corner of the image.\r\n\r\nAs far as I understand, this is a bug, or at least undocumented behaviour, because I haven't found any mentioning of possibility of such weird effects anywhere. Using such plots (though not randomly generated) is crucial to my research, I would really like this fixed or being pointed out to a solution for this problem.\r\n\r\nPlease let me know, if you can reproduce such effects and if you need any further information from me.\r\n\r\nI use matplotlib 1.3.1 on Ubuntu 14.04 with Python 2.7.6 and Spyder 2.2.5."""
3028,32571253,huard,tacaswell,2014-04-30 20:40:55,2014-05-03 23:41:29,2014-05-03 23:41:29,closed,,v1.4.0,1,confirmed bug,https://api.github.com/repos/matplotlib/matplotlib/issues/3028,b'Import error QT4 backend with python3.2.3',"b'On current master, importing matplotlib using QT4Agg backend yields the following error:\r\n```python\r\nFile ""/lib/python3.2/site-packages/matplotlib-1.4.x-py3.2-linux-x86_64.egg/matplotlib/backends/backend_qt4.py"", line 374\r\n    return u\'+\'.join(mods + [key])\r\n              ^\r\nSyntaxError: invalid syntax\r\n```\r\n'"
3026,32555173,palob,tacaswell,2014-04-30 17:15:22,2014-05-03 14:49:05,2014-05-03 14:49:05,closed,,v1.4.0,4,confirmed bug,https://api.github.com/repos/matplotlib/matplotlib/issues/3026,b'Bug in matplotlib.mlab.levypdf',"b'**matplotlib.mlab.levypdf** raises ~~ValueError~~  `TypeError` due to wrong **numpy.arange** input (lines 1571,1573 and 1574 of mlab.py):\r\n\r\ndtype as third input parameter of numpy.arange must be preceded by `dtype=` .\r\n\r\n'"
2980,31525520,breedlun,pelson,2014-04-15 04:26:45,2014-11-30 15:13:13,2014-11-30 15:13:12,closed,,v1.4.x,3,confirmed bug;hackathon,https://api.github.com/repos/matplotlib/matplotlib/issues/2980,b'get_window_extent method for an image object gives all zeros',"b""I am finding that the get_window_extent method for an image object gives all zeros.\r\n\r\nFor example\r\n\r\n    import numpy as np\r\n    import matplotlib.pyplot as plt\r\n\r\n    im = np.array([[0.25, 0.75, 1.0, 0.75], [0.1, 0.65, 0.5, 0.4], \\\r\n        [0.6, 0.3, 0.0, 0.2], [0.7, 0.9, 0.4, 0.6]])\r\n    fig = plt.figure()\r\n    ax = plt.subplot()\r\n    ax.set_xlim(0,1)\r\n    ax.set_ylim(0,1)\r\n    im_obj = ax.imshow(im, extent = [0.25, 0.75, 0.25, 0.75], interpolation = 'nearest')\r\n    \r\nproduces the following plot\r\n\r\n![image](http://s9.postimg.org/dobdiczfj/wtf.png)\r\n\r\nNow I want to get the image size in display coordinates, so I do the following:\r\n\r\n    fig.canvas.draw()\r\n    renderer = fig.canvas.renderer\r\n    im_bbox = im_obj.get_window_extent(renderer)\r\nThe trouble is `print im_bbox` produces `Bbox('array([[ 0.,  0.],\\n       [ 0.,  0.]])')`. The method `.get_window_extent(renderer)` works fine with text, lines, and patches, so I was a bit surprised to see it does not work with images.\r\n\r\nIn case it matters, I am using Matplotlib 1.3.0 with the TkAgg backend."""
2964,31186623,wuxb45,tacaswell,2014-04-09 19:21:25,2014-04-11 00:56:32,2014-04-11 00:55:19,closed,,v1.4.0,1,confirmed bug;low hanging fruit;needs_patch,https://api.github.com/repos/matplotlib/matplotlib/issues/2964,b'line style rendering error',"b'![line-style](https://cloud.githubusercontent.com/assets/564235/2660110/c19b85ac-c01b-11e3-87d4-097eea524b42.png)\r\n\r\n\r\nThe ""markertri_up marker"" and ""markertri_up marker"" randers to each other.\r\n\r\n```python\r\n#!/usr/bin/python\r\n\r\nimport matplotlib.pyplot as plt \r\n\r\ndef x_line_style():\r\n  styles = {    \'-1\' :\'markertri_down marker\'       , \\\r\n    \'-2\' :\'markertri_up marker\'         , \\\r\n    \'-3\' :\'markertri_left marker\'       , \\\r\n    \'-4\' :\'markertri_right marker\'     }\r\n  fig1, ax1 = plt.subplots(1, 1, figsize=(5,5))\r\n  i = 1 \r\n  ax1.set_xlim(0, 10) \r\n  ax1.set_ylim(0, 5)\r\n  for (x,y) in styles.items():\r\n    ax1.plot(range(0,10), [i for j in range(0,10)], (x), label=y, color=\'r\')\r\n    i = i + 1 \r\n  ax1.legend(loc=7)\r\n  fig1.savefig(\'line-style.png\', format=\'png\')\r\n  plt.close(fig1)\r\n\r\nx_line_style()\r\n```'"
2963,31124349,ilogue,tacaswell,2014-04-09 01:58:49,2014-08-18 16:38:31,2014-06-04 17:41:29,closed,,v1.4.0,13,confirmed bug,https://api.github.com/repos/matplotlib/matplotlib/issues/2963,b'Segmentation Fault on adding BBoxImage to matshow',"b""I am trying to add an image to axes with matshow() but getting `Segmentation fault (core dumped)` (no stacktrace). When replacing the matshow with a simple e.g. plot(range(10)), it works as expected.\r\n\r\n```\r\nfrom matplotlib.image import BboxImage,imread\r\nfrom matplotlib.transforms import Bbox\r\nimport matplotlib.pyplot as plt\r\nimport numpy as np\r\n\r\nfig = plt.figure()\r\nax = fig.add_subplot(111)\r\n#ax.plot(range(10))                           # this works\r\nax.matshow(np.array([[1,2],[3,4]]))    #this doesn't\r\nlowerCorner = ax.transData.transform((.8,-.8))\r\nupperCorner = ax.transData.transform((1.2,-.4))\r\nbbox_image = BboxImage(Bbox([lowerCorner[0],\r\n                             lowerCorner[1],\r\n                             upperCorner[0],\r\n                             upperCorner[1],\r\n                             ]),\r\n                       norm = None, origin=None, clip_on=False)\r\npath = '/usr/share/pixmaps/firefox.png' # example image available on ubuntu\r\nimage = imread(path)\r\nbbox_image.set_data(image)\r\nax.add_artist(bbox_image)\r\nplt.show()\r\n```\r\n\r\nThanks for matplotlib!\r\nJasper"""
2941,30453139,mscross,tacaswell,2014-03-29 21:27:02,2014-06-02 12:15:33,2014-06-02 12:15:33,closed,,v1.4.x,6,confirmed bug;needs_patch,https://api.github.com/repos/matplotlib/matplotlib/issues/2941,b'Order of ax.spines[].set_position() and ax.yaxis.set_major_formatter() produces different results',"b'In the first example, `ax.spines[\'right\'].set_position()` is called first, and the negative signs on the right y-axis are smaller hyphen-minus symbols because they were passed through `ax.yaxis.set_major_formatter()`.   in the second example, the order is reversed, and the formatter is not applied or is reset (i.e., the negative signs are the larger unicode character `\\u2212`).\r\n\r\nI was under the impression that matplotlib settings were order-agnostic before `plt.show()`- is this a bug?\r\n\r\n``` python\r\nimport numpy as np\r\nimport matplotlib.pyplot as plt\r\nfrom matplotlib.ticker import FormatStrFormatter, MultipleLocator\r\n\r\nfig, ax1 = plt.subplots()\r\nt = np.arange(0.01, 10.0, 0.01)\r\ns1 = np.exp(t)\r\nax1.plot(t, s1, \'b-\')\r\nax1.set_xlabel(\'time (s)\')\r\n# Make the y-axis label and tick labels match the line color.\r\nax1.set_ylabel(\'exp\', color=\'b\')\r\nfor tl in ax1.get_yticklabels():\r\n    tl.set_color(\'b\')\r\n\r\nymajorFormatter = FormatStrFormatter(""%.1f"")\r\n\r\nax2 = ax1.twinx()\r\ns2 = np.sin(2*np.pi*t)\r\nax2.plot(t, s2, \'r.\')\r\nax2.set_ylabel(\'sin\', color=\'r\')\r\nfor tl in ax2.get_yticklabels():\r\n    tl.set_color(\'r\')\r\n\r\n# ax2.yaxis.set_major_formatter(ymajorFormatter)\r\nax2.spines[\'right\'].set_position((\'axes\', 1.1))\r\nax2.yaxis.set_major_formatter(ymajorFormatter)\r\nplt.show()\r\n```\r\n![spine_thenformat](https://cloud.githubusercontent.com/assets/6813152/2559685/dade2ec2-b786-11e3-93f6-10031b059684.png)\r\n\r\n``` python\r\nfig, ax1 = plt.subplots()\r\nt = np.arange(0.01, 10.0, 0.01)\r\ns1 = np.exp(t)\r\nax1.plot(t, s1, \'b-\')\r\nax1.set_xlabel(\'time (s)\')\r\n# Make the y-axis label and tick labels match the line color.\r\nax1.set_ylabel(\'exp\', color=\'b\')\r\nfor tl in ax1.get_yticklabels():\r\n    tl.set_color(\'b\')\r\n\r\nymajorFormatter = FormatStrFormatter(""%.1f"")\r\n\r\nax2 = ax1.twinx()\r\ns2 = np.sin(2*np.pi*t)\r\nax2.plot(t, s2, \'r.\')\r\nax2.set_ylabel(\'sin\', color=\'r\')\r\nfor tl in ax2.get_yticklabels():\r\n    tl.set_color(\'r\')\r\n\r\nax2.yaxis.set_major_formatter(ymajorFormatter)\r\nax2.spines[\'right\'].set_position((\'axes\', 1.1))\r\n# ax2.yaxis.set_major_formatter(ymajorFormatter)\r\nplt.show()\r\n```\r\n![format_thenspine](https://cloud.githubusercontent.com/assets/6813152/2559697/85913aee-b787-11e3-86fe-8ee94928a1f5.png)'"
2842,28275392,Arfrever,efiring,2014-02-25 19:28:07,2016-05-22 04:55:58,2016-05-22 04:55:58,closed,,2.1 (next point release),2,confirmed bug,https://api.github.com/repos/matplotlib/matplotlib/issues/2842,b'matplotlib.tests.test_basic.test_override_builtins() fails with Python >=3.4',"b'`matplotlib.tests.test_basic.test_override_builtins()` fails with Python >=3.4 due to `__spec__`.\r\nhttp://docs.python.org/3.4/reference/import.html#__spec__\r\n\r\nI use Matplotlib 1.3.1.\r\n\r\n```\r\n======================================================================\r\nFAIL: matplotlib.tests.test_basic.test_override_builtins\r\n----------------------------------------------------------------------\r\nTraceback (most recent call last):\r\n  File ""/usr/lib64/python3.4/site-packages/nose/case.py"", line 198, in runTest\r\n    self.test(*self.arg)\r\n  File ""/tmp/matplotlib-1.3.1-tests/usr/lib64/python3.4/site-packages/matplotlib/tests/test_basic.py"", line 38, in test_override_builtins\r\n    assert not overridden\r\nnose.proxy.AssertionError:\r\n-------------------- >> begin captured stdout << ---------------------\r\n\'__spec__\' was overridden in globals().\r\n\r\n--------------------- >> end captured stdout << ----------------------\r\n```'"
2808,27500582,fperez,tacaswell,2014-02-13 08:04:57,2014-03-08 03:42:16,2014-03-08 03:42:16,closed,,v1.4.0,12,confirmed bug;mplot3d,https://api.github.com/repos/matplotlib/matplotlib/issues/2808,b'BUG: master has broken some 3d plots',"b'[This 3d example](http://matplotlib.org/examples/mplot3d/trisurf3d_demo.html) from the gallery runs fine in 1.3.1, but on master it produces a warning and a completely broken plot:\r\n\r\n![image](https://f.cloud.github.com/assets/57394/2157795/22b3bda4-9485-11e3-98d6-6b51648f5744.png)\r\n\r\nConfirmed on linux by me and OSX by @ellisonbg.'"
2792,26995072,gnsiva,pelson,2014-02-05 20:33:44,2014-02-10 11:49:44,2014-02-10 11:49:44,closed,,,4,confirmed bug,https://api.github.com/repos/matplotlib/matplotlib/issues/2792,b'Disable legend on matplotlib.axes instance',b'Could we please have the functionality to disable the legend once its been instantiated?\r\n\r\ne.g.\r\n``` python\r\n f = plt.figure()\r\n ax = f.add_subplot(111)\r\n\r\n externalfunction(ax)\r\n\r\n # in the function ax.legend() has been called\r\n # would like to turn off the legend here\r\n\r\n plt.show()\r\n```\r\n\r\nFrom my StackOverflow question (http://stackoverflow.com/questions/21587318/matplotlib-cancel-legend-on-axes-object?noredirect=1#comment32612205_21587318) I have been advised to request this feature.\r\n\r\nI also found the problem could be solved with the hack:\r\n``` python\r\nax.get_legend().set_visible(False)\r\n```'
2732,25634914,glyg,mdboom,2014-01-15 09:29:14,2015-03-03 18:43:39,2014-01-29 14:42:54,closed,,v1.4.0,6,confirmed bug;mplot3d,https://api.github.com/repos/matplotlib/matplotlib/issues/2732,"b""AttributeError: 'Patch3DCollection' object has no attribute 'set_sizes'""","b""Hi,\r\n\r\nI'm running into a bug with `scatter3D` in mplot3d when ran from python 3.3\r\n\r\nI'm using the latest build from github (#e6f899338cb311ad80e89968271944fbdc7b7d7b)\r\n\r\nHere is a minimal example:\r\n```python\r\nimport numpy as np\r\nimport matplotlib.pylab as plt\r\nfrom mpl_toolkits.mplot3d import Axes3D\r\n\r\nfig = plt.figure()\r\nax = fig.add_subplot(111, projection='3d')\r\nax.scatter(np.arange(4), np.arange(4), zs=2)\r\nplt.draw()\r\n```\r\n\r\nIt fails with the following error:\r\n```python\r\nAttributeError: 'Patch3DCollection' object has no attribute 'set_sizes'\r\n\r\n> /home/guillaume/python3/lib/python3.3/site-packages/matplotlib-1.4.x-py3.3-linux-x86_64.egg/matplotlib/collections.py(728)draw()\r\n    727     def draw(self, renderer):\r\n--> 728         self.set_sizes(self._sizes, self.figure.dpi)\r\n    729         Collection.draw(self, renderer)\r\n```\r\nLooks like the `Patch3DCollection` instance doesn't inherits properly from `_CollectionWithSizes`\r\n\r\nBest,\r\n\r\nGuillaume\r\n"""
2688,24495225,NHades,efiring,2013-12-18 15:08:16,2014-06-11 16:58:27,2014-06-11 16:58:27,closed,,v1.4.0,7,confirmed bug,https://api.github.com/repos/matplotlib/matplotlib/issues/2688,b'Deleting axis in matplotlib > v1.2.1 does not work similar to v1.1.1',"b'This issue is described in this Stackoverflow question:\r\n\r\nhttp://stackoverflow.com/questions/17052380/deleting-axis-in-matplotlib-v1-2-1-does-not-work-similar-to-v1-1-1\r\n\r\nI am using matplotlib (python win32 v2.7.5) to plot contour plots with color bars that are animated or the contour gets updated. In order to update the plot, I delete the color bar axis while keeping the original plot axis untouched. In version 1.1.1 of matplotlib, the program was working okay, however, when I upgraded to 1.2.1 (and higher) of matplotlib I started to notice my plot is getting squashed to the left.\r\n\r\nThe following code demos the issues.  Run it in version 1.1.1 and then in 1.2.1 to see the differences. \r\n\r\n```python\r\nimport matplotlib.pyplot as plt\r\nimport numpy as np\r\nfrom matplotlib.mlab import bivariate_normal\r\nfrom matplotlib.colors import LogNorm\r\n\r\ndelta = 0.5\r\nx = np.arange(-3.0, 4.001, delta)\r\ny = np.arange(-4.0, 3.001, delta)\r\nX, Y = np.meshgrid(x, y)\r\nZ = bivariate_normal(X, Y, 1.0, 1.0, 0.0, 0.0)\r\nfig  = plt.figure()\r\nfig.subplots_adjust(left=0.1, bottom=0.1, right=0.97, top=0.92)\r\nax   = fig.add_subplot(1,1,1)\r\naxim = ax.imshow(Z,norm = LogNorm())\r\ncb   = fig.colorbar(axim)\r\n\r\n##Note:  These are not replicated, I put them here to show how a refresh of the \r\n##          contour plot multiple times will look like\r\nfig.delaxes(fig.axes[1])\r\nfig.subplots_adjust(left=0.1, bottom=0.1, right=0.97, top=0.92)\r\ncb   = fig.colorbar(axim)\r\n\r\nfig.delaxes(fig.axes[1])\r\nfig.subplots_adjust(left=0.1, bottom=0.1, right=0.97, top=0.92)\r\ncb   = fig.colorbar(axim)\r\n\r\nplt.show()\r\n```\r\n\r\nIf i delete ALL axis and re-create them each time, then it looks ok even in new version, but I am thinking that this is not efficient process with animation. '"
2675,24157811,breedlun,pelson,2013-12-12 04:53:37,2014-08-07 13:50:13,2014-01-28 09:50:34,closed,,v1.4.0,3,confirmed bug,https://api.github.com/repos/matplotlib/matplotlib/issues/2675,b'clip_on = False does not work for x-axis',"b'When I set clip_on = False the curve extends beyond the y-limits, but it does not extend beyond the x-limits. Am I doing something wrong, or is this a bug?\r\n\r\nFor example, the following code:\r\n\r\n    import matplotlib.pyplot as plt\r\n    import numpy as np\r\n    x1 = np.arange(-10, 10, 0.01)\r\n    y1 = x1\r\n    ax = plt.subplot()\r\n    ax.set_xlim(-2,2)\r\n    ax.set_ylim(-1,1)\r\n    ax.plot(x1, y1, clip_on = False)\r\n\r\nproduces the plot I would expect:\r\n\r\n![good](http://s8.postimg.org/tc0csa3p1/wtf1.jpg)\r\n\r\nHowever, all I have to do is change the y-limits,\r\n\r\n    fig = plt.figure()\r\n    ax = plt.subplot()\r\n    ax.set_xlim(-2,2)\r\n    ax.set_ylim(-3,3)\r\n    ax.plot(x1, y1, clip_on = False)\r\n\r\nand I get the following plot:\r\n\r\n![bad](http://s11.postimg.org/g81ef6r2b/wtf2.jpg)\r\n\r\nWhy does the first plot extend beyond the y-limits, while the second one does not extend beyond the x-limits?  In case it matters, I am using matplotlib 1.3.0 with the TkAgg backend, but apparently (http://stackoverflow.com/questions/20523752/matplotlib-clip-on-false-does-not-work-on-x-axis) it also happens with the MacOSX backend.'"
2616,23333602,OceanWolf,tacaswell,2013-11-26 18:06:28,2014-02-25 14:22:49,2014-02-25 14:22:49,closed,,v1.4.0,9,confirmed bug,https://api.github.com/repos/matplotlib/matplotlib/issues/2616,b'Quiver does not _init with animated=True and quiverkey attached',"b'Creating a quiver object with animated=True and adding this to a quiver key, this fails\r\n\r\n```\r\nself.plot = self.ax.quiver(x, y, U, V, scale=10, animated=True)\r\nself.ax.quiverkey(self.plot, 0.9, 0.95, 1, \'1 m/s\')\r\n```\r\n\r\nwith\r\n\r\n```\r\nException in Tkinter callback\r\nTraceback (most recent call last):\r\n  File ""/usr/lib/python2.7/lib-tk/Tkinter.py"", line 1437, in __call__\r\n    return self.func(*args)\r\n  File ""/usr/lib/pymodules/python2.7/matplotlib/backends/backend_tkagg.py"", line 236, in resize\r\n    self.show()\r\n  File ""/usr/lib/pymodules/python2.7/matplotlib/backends/backend_tkagg.py"", line 239, in draw\r\n    FigureCanvasAgg.draw(self)\r\n  File ""/usr/lib/pymodules/python2.7/matplotlib/backends/backend_agg.py"", line 421, in draw\r\n    self.figure.draw(self.renderer)\r\n  File ""/usr/lib/pymodules/python2.7/matplotlib/artist.py"", line 55, in draw_wrapper\r\n    draw(artist, renderer, *args, **kwargs)\r\n  File ""/usr/lib/pymodules/python2.7/matplotlib/figure.py"", line 898, in draw\r\n    func(*args)\r\n  File ""/usr/lib/pymodules/python2.7/matplotlib/artist.py"", line 55, in draw_wrapper\r\n    draw(artist, renderer, *args, **kwargs)\r\n  File ""/usr/lib/pymodules/python2.7/matplotlib/axes.py"", line 1997, in draw\r\n    a.draw(renderer)\r\n  File ""/usr/lib/pymodules/python2.7/matplotlib/artist.py"", line 55, in draw_wrapper\r\n    draw(artist, renderer, *args, **kwargs)\r\n  File ""/usr/lib/pymodules/python2.7/matplotlib/quiver.py"", line 304, in draw\r\n    self._init()\r\n  File ""/usr/lib/pymodules/python2.7/matplotlib/quiver.py"", line 272, in _init\r\n    np.zeros((1,)))\r\n  File ""/usr/lib/pymodules/python2.7/matplotlib/quiver.py"", line 571, in _make_verts\r\n    length = a * (widthu_per_lenu / (self.scale * self.width))\r\nTypeError: unsupported operand type(s) for *: \'float\' and \'NoneType\'\r\n```\r\n\r\nObviously adding the optional width attribute to the quiver call, works as a dodgy workaround, but not the best as it neglects other code in the _init method.  Note, using matplotlib version 1.1.1rc2\r\n\r\nAs a side issue, why can one not call quiverkey from the figure object?  One can add both a colorbar and a legend from the figure object, so quiverkey seems the odd one out.'"
2602,22903797,florian-wagner,efiring,2013-11-19 11:05:55,2014-05-16 19:57:06,2014-05-16 19:57:06,closed,,v1.4.0,2,confirmed bug,https://api.github.com/repos/matplotlib/matplotlib/issues/2602,b'stem function with datetime argument does not work in 1.3.1',"b'Hey everyone,\r\n\r\nI recently updated to MPL 1.3.1 on our group workstation and the stem function does not work anymore with datetime objects as the first argument floating point values on the y axis (same length of course). A similar issue with the same error was reported here two weeks ago: \r\n\r\nhttp://stackoverflow.com/questions/19794225/python-plot-stem-with-datetime-base\r\n\r\nIt used to work prior to the update. Do I have to convert the datetime arguments to floats and set the corresponding xlabels manually or will this feature be re-enabled in future releases?\r\n\r\nThank you and best regards\r\nFlorian'"
2556,21719557,markdbenedict,tacaswell,2013-10-28 20:44:16,2014-01-27 16:39:13,2014-01-27 16:39:13,closed,,v1.3.x,2,confirmed bug,https://api.github.com/repos/matplotlib/matplotlib/issues/2556,b'Quiver leaks memory when called multiple times',"b'I have created quite a nice visualization program using Qt as the interface layer and matplotlib to draw much of the content. I use contour and countourf as well as text and lines and never run into problems with releasing objects. I need to draw many plots to create the input for an animation.\r\n\r\nAs soon as I start calling Axes.quiver I get leaks. With the size of the dataset it adds up quickly. I am unable to use the animation module due to conflicts with other functionality, and the X,Y values and shapes change between frames so quiver.set_UVC() is of no use to me.  \r\n\r\nThe following code demonstrates the problem with the simple for loop replacing the animation code I would use:\r\n```\r\nfrom pylab import *\r\nfrom numpy import ma\r\nimport time\r\n\r\n\r\nX,Y = meshgrid( arange(0,2*pi,.04),arange(0,2*pi,.04) )\r\nU = cos(X)\r\nV = sin(Y)\r\n\r\nfig = figure()\r\nax = fig.add_axes([0.1,0.1,0.8,0.8])\r\nfor i in range(90):\r\n    Q = ax.quiver( U, V)\r\n    time.sleep(0.2)\r\n```\r\nI know this simple snippet isnt drawing to screen (leak becomes worse then).\r\n\r\nQ has a sys.getrefcount of 4 so nothing I am able to do seems to get rid of it. Calls to fig and ax clear only reduce the refcount to 2. Telling Q to remove() itself doesnt help.\r\n\r\nMy code is much more complex than this. I have tried completely replacing the axes objects but that doesnt help. I really am not free to replace the Figure instance.'"
2533,21312847,danieljfarrell,tacaswell,2013-10-21 12:50:12,2014-07-12 21:46:09,2014-07-12 21:46:09,closed,,,3,confirmed bug;mplot3d,https://api.github.com/repos/matplotlib/matplotlib/issues/2533,"b'Bug in mplot3D with PolyCollection: (0, 0) data point is always inserted into the data set.'","b""This a a bug related to stacked xy-plots example,\r\nhttp://matplotlib.org/examples/mplot3d/polys3d_demo.html\r\n\r\nmatplotlib seems to be inserting a vertex at (0,0) into the data set.\r\n\r\n*   Is there a different way to plot stacked xy-plots that avoids this bug?\r\n\r\n*   Maybe the fix is fairly simple, if all that is happening is that an additional vertex is getting inserted?\r\n\r\nThe following example is based on the `poly3d_demo` script linked above. If we change the data set so that the data doesn't include a point at x=0, for example change line 12 from,\r\n\r\n    xs = np.arange(0, 10, 0.4)\r\n\r\n to,\r\n\r\n    xs = np.arange(5, 10, 0.4)\r\n\r\nA erroneous line is drawn from the data set to the (0,0) point.\r\n\r\nThe following script produces the result(s) below, using matplotlib 1.3.0.\r\n\r\n**Example 1**\r\n![figure_1](https://f.cloud.github.com/assets/112847/1372256/00d218de-3a4e-11e3-8166-ad3bc340e51f.png)\r\n\r\nWhen the x-axis is changed to only include the range of the data set the result look even worse,\r\n\r\n**Example 2**\r\n![figure_2](https://f.cloud.github.com/assets/112847/1372257/00d29426-3a4e-11e3-8d03-f6fe53008ea9.png)\r\n\r\n    from mpl_toolkits.mplot3d import Axes3D\r\n    from matplotlib.collections import PolyCollection\r\n    from matplotlib.colors import colorConverter\r\n    import matplotlib.pyplot as plt\r\n    import numpy as np\r\n\r\n    fig = plt.figure()\r\n    ax = fig.gca(projection='3d')\r\n\r\n    cc = lambda arg: colorConverter.to_rgba(arg, alpha=0.6)\r\n\r\n    xs = np.arange(5, 10, 0.4) # The data x-range has been changed to run between 5--10\r\n    verts = []\r\n    zs = [0.0, 1.0, 2.0, 3.0]\r\n    for z in zs:\r\n        ys = np.random.rand(len(xs))\r\n        ys[0], ys[-1] = 0, 0\r\n        verts.append(list(zip(xs, ys)))\r\n\r\n    poly = PolyCollection(verts, facecolors = [cc('r'), cc('g'), cc('b'),\r\n                                               cc('y')])\r\n    poly.set_alpha(0.7)\r\n    ax.add_collection3d(poly, zs=zs, zdir='y')\r\n\r\n    ax.set_xlabel('X')\r\n    ax.set_xlim3d(5, 10) # This has been changed to 5 to adjust the axis range to the data\r\n    ax.set_ylabel('Y')\r\n    ax.set_ylim3d(-1, 4)\r\n    ax.set_zlabel('Z')\r\n    ax.set_zlim3d(0, 1)\r\n\r\n    plt.show()"""
2525,21102413,brorfred,pelson,2013-10-16 19:08:50,2014-01-09 10:47:17,2014-01-09 10:46:57,closed,,,4,confirmed bug,https://api.github.com/repos/matplotlib/matplotlib/issues/2525,"b""cfl() doesn't clear gcf()._suptitle""","b""Issue\r\n--------\r\nsuptitle doesn't replace the text if the figure is cleared with clf. \r\n\r\nWork:\r\n```python\r\nimport pylab as plt\r\nplt.figure()\r\nplt.suptitle('KK')\r\nplt.suptitle('HH')\r\n```\r\n\r\nDoesn't work:\r\n```python\r\nimport pylab as plt\r\nplt.figure()\r\nplt.suptitle('KK')\r\nplt.clf()\r\nplt.suptitle('KK')\r\nplt.suptitle('HH')\r\n```\r\n\r\nSolution?\r\n--------------\r\nadd ```self._suptitle = None ``` to figure.clf()\r\n\r\nThanks!!!\r\n\r\n/Bror Jonsson"""
2517,20943628,mrbump,tacaswell,2013-10-14 07:54:31,2015-07-17 04:00:50,2015-07-17 04:00:49,closed,,v1.5.0,8,confirmed bug;hackathon,https://api.github.com/repos/matplotlib/matplotlib/issues/2517,b'PDF output does not respect zorder when using imshow',"b""I already posted this as a question on [Stack Overflow](http://stackoverflow.com/questions/19312833/matplotlib-pdf-output-does-not-respect-zorder-when-using-imshow).\r\n\r\nMinimal example:\r\n```\r\nimport numpy as np\r\nimport matplotlib.pyplot as plt\r\n\r\nimg = np.arange(100).reshape((10,10))\r\nplt.imshow(img, extent = [0.25, 0.75, 0.25, 0.75], zorder = 10)\r\nplt.imshow(img, extent = [0.1, 0.9, 0.1, 0.9], zorder = 1)\r\nplt.plot([0, 1], [0, 1], color = 'black', zorder = 5)\r\nplt.axis([0, 1, 0, 1])\r\n\r\nplt.savefig('img.png')\r\n```\r\n\r\nWhen exporting to PNG, the output is as expected:\r\n![img](https://f.cloud.github.com/assets/4518755/1324041/aa86df36-34a4-11e3-985e-6c442a4a7403.png)\r\n\r\nHowever, when saving to PDF, the zorder is not respected (the line is plotted over both images):\r\n![img pdf](https://f.cloud.github.com/assets/4518755/1324044/bb529198-34a4-11e3-929c-b1e7001c6654.png)\r\n\r\nIs this a bug?"""
2492,20454908,ohadle,tacaswell,2013-10-03 13:48:01,2014-06-06 12:51:05,2014-06-06 12:50:17,closed,,v1.4.x,4,confirmed bug;needs_patch,https://api.github.com/repos/matplotlib/matplotlib/issues/2492,b'subplots() shared scale is off',"b'As long as all the plots are filled, `subplots(n, m, sharex=True, sharey=True)` works fine.\r\n![figure_2](https://f.cloud.github.com/assets/2196196/1261663/32d7422a-2c32-11e3-9894-777e9eb3a603.png)\r\n\r\nWhen some plots are left blank, though, the shared axis scales according to the empty plots, making it impossible to see the filled ones.\r\n![figure_1](https://f.cloud.github.com/assets/2196196/1261662/32d5fc1c-2c32-11e3-8c69-47d151af2836.png)\r\n\r\n'"
2425,19541520,jarondl,mdboom,2013-09-16 09:46:01,2014-08-07 13:52:56,2013-09-27 14:49:28,closed,,v1.3.x,0,confirmed bug;Documentation,https://api.github.com/repos/matplotlib/matplotlib/issues/2425,b'DOC: `axis_off` wrongfuly appears as a parameter to Figure.add_subplot',"b'`axis_off` and `axis_on` appear as parameters on Figure.add_subplot,\r\nand anywhere %(Axes)s is used. The introspection picks them up\r\nbecause they have setters: `_BaseAxes.set_axis_off()`,\r\nbut they do not accept any argument and therefore cannot be passed as parameters.'"
2423,19479480,mspacek,pelson,2013-09-13 22:22:23,2015-03-03 18:43:31,2014-01-09 13:31:35,closed,mdboom,v1.4.0,6,confirmed bug,https://api.github.com/repos/matplotlib/matplotlib/issues/2423,b'Off-axes markers unnecessarily saved to PDF',"b""Plotting a bunch of markers without lines, then changing the axes limits so none of the points are visible, and then saving the result to a PDF, results in a file just as big as if the markers were all visible within their default axes limits. This doesn't happen for line only plots.\r\n\r\nI guess the PDF backend clips the lines before deciding what to save to file, but it doesn't clip the markers. Not only does this result in an unnecessarily large PDF file (and potentially a security issue, because data is unintentionally leaking out), but rendering that file in a PDF viewer can be a lot slower as well.\r\n\r\nHere's some demo code:\r\n\r\n```python\r\nimport numpy as np\r\nx = np.random.random(20000)\r\ny = np.random.random(20000)\r\n\r\nfigure()\r\nplot(x, y, 'k.') # use markers only\r\npyplot.savefig('dots.pdf')\r\nxlim(2, 3) # move axes away for empty plot\r\npyplot.savefig('dots_empty.pdf')\r\n'''\r\nfile sizes in bytes:\r\ndots.pdf:       327505\r\ndots_empty.pdf: 327921\r\n'''\r\nfigure()\r\nplot(x, y, 'k-') # use lines only\r\npyplot.savefig('lines.pdf')\r\nxlim(2, 3) # move axes away for empty plot\r\npyplot.savefig('lines_empty.pdf')\r\n'''\r\nfile sizes in bytes:\r\nlines.pdf:       310071\r\nlines_empty.pdf:   5905\r\n'''\r\n```"""
2418,19389513,david-zwicker,mdboom,2013-09-12 14:31:44,2014-08-09 03:06:30,2013-09-27 14:50:11,closed,,v1.3.x,1,confirmed bug,https://api.github.com/repos/matplotlib/matplotlib/issues/2418,"b'AssertionError with quiver, quiverkey, and an additional patch.'","b'The following code produces an AssertionError on my system (matplotlib 1.3.0 from macports, python 2.7 on MacOSX 10.8.4 with the MacOSX backend).\r\n\r\n```\r\n#!/usr/bin/env python\r\n\r\nimport numpy as np\r\nimport matplotlib.pyplot as plt\r\n\r\nX,Y = np.meshgrid(np.arange(0, 2*np.pi, .2), np.arange(0, 2*np.pi, .2))\r\nU = np.cos(X)\r\nV = np.sin(Y)\r\n\r\nQ = plt.quiver(U, V)\r\nplt.quiverkey(Q, 0.5, .9, 1., \'Label\')\r\n\r\nplt.gca().add_patch(plt.Circle((10, 10), 1))\r\nplt.savefig(\'test.pdf\')\r\n```\r\nThree parts of this code are required for me to reproduce the error:\r\n\r\n1. The quiver plot has to have a key created with quiver key\r\n2. I have to add an additional patch to the current axes\r\n3. I have to save the figure as a PDF (I can display it just fine)\r\n\r\nThe traceback reads\r\n```\r\nTraceback (most recent call last):\r\n  File ""test.py"", line 14, in <module>\r\n    plt.savefig(\'test.pdf\')\r\n  File ""/opt/local/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/matplotlib/pyplot.py"", line 561, in savefig\r\n    return fig.savefig(*args, **kwargs)\r\n  File ""/opt/local/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/matplotlib/figure.py"", line 1421, in savefig\r\n    self.canvas.print_figure(*args, **kwargs)\r\n  File ""/opt/local/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/matplotlib/backend_bases.py"", line 2220, in print_figure\r\n    **kwargs)\r\n  File ""/opt/local/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/matplotlib/backend_bases.py"", line 1952, in print_pdf\r\n    return pdf.print_pdf(*args, **kwargs)\r\n  File ""/opt/local/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/matplotlib/backends/backend_pdf.py"", line 2340, in print_pdf\r\n    self.figure.draw(renderer)\r\n  File ""/opt/local/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/matplotlib/artist.py"", line 54, in draw_wrapper\r\n    draw(artist, renderer, *args, **kwargs)\r\n  File ""/opt/local/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/matplotlib/figure.py"", line 1034, in draw\r\n    func(*args)\r\n  File ""/opt/local/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/matplotlib/artist.py"", line 54, in draw_wrapper\r\n    draw(artist, renderer, *args, **kwargs)\r\n  File ""/opt/local/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/matplotlib/axes.py"", line 2086, in draw\r\n    a.draw(renderer)\r\n  File ""/opt/local/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/matplotlib/artist.py"", line 54, in draw_wrapper\r\n    draw(artist, renderer, *args, **kwargs)\r\n  File ""/opt/local/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/matplotlib/quiver.py"", line 307, in draw\r\n    self.vector.draw(renderer)\r\n  File ""/opt/local/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/matplotlib/artist.py"", line 54, in draw_wrapper\r\n    draw(artist, renderer, *args, **kwargs)\r\n  File ""/opt/local/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/matplotlib/collections.py"", line 779, in draw\r\n    return Collection.draw(self, renderer)\r\n  File ""/opt/local/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/matplotlib/artist.py"", line 54, in draw_wrapper\r\n    draw(artist, renderer, *args, **kwargs)\r\n  File ""/opt/local/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/matplotlib/collections.py"", line 278, in draw\r\n    self._offset_position)\r\n  File ""/opt/local/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/matplotlib/backends/backend_pdf.py"", line 1589, in draw_path_collection\r\n    output(*self.gc.pop())\r\n  File ""/opt/local/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/matplotlib/backends/backend_pdf.py"", line 2131, in pop\r\n    assert self.parent is not None\r\nAssertionError\r\n```'"
2394,19173286,michaelaye,WeatherGod,2013-09-09 02:33:42,2014-07-06 21:22:38,2014-07-06 21:22:38,closed,,v1.4.x,11,API consistency;confirmed bug;low hanging fruit;text,https://api.github.com/repos/matplotlib/matplotlib/issues/2394,b'AnchoredSizeBar does not respect FontProperties size setting.',"b""The following code should produce very different font sizes in the AnchoredSizeBar text but it just shows the same size:\r\n\r\n````python\r\nfrom mpl_toolkits.axes_grid1.anchored_artists import AnchoredSizeBar\r\nfrom matplotlib.font_manager import FontProperties\r\nfp = FontProperties()\r\nfp.set_size('xx-large')\r\nfig, ax = subplots(2)\r\nax[0].plot(arange(10))\r\nasb = AnchoredSizeBar(ax[0].transData, 5, 'xx-large', loc=8, prop=fp)\r\nax[0].add_artist(asb)\r\nax[1].plot(arange(10))\r\nfp.set_size('xx-small')\r\nasb2 = AnchoredSizeBar(ax[1].transData, 5, 'xx-small', loc=8, prop=fp)\r\nax[1].add_artist(asb2)\r\n````\r\n\r\nThis code produces the following output on my system:\r\n\r\n![figure_1](https://f.cloud.github.com/assets/69774/1104424/e7ab1bac-18f7-11e3-8b5a-891674424561.png)\r\n\r\nEnv:\r\nEPD 7.3 all recent official updates (= MPL 1.3.0),\r\nIPython 1.0 with QT4 backend on MacOSX 10.8.4"""
2355,18737896,p3trus,tacaswell,2013-08-29 15:30:24,2014-08-17 22:03:09,2014-08-17 22:03:09,closed,,,3,confirmed bug;mplot3d,https://api.github.com/repos/matplotlib/matplotlib/issues/2355,b'Type Error in bar3d plot when saved as svg',"b""I'm getting a strange error `TypeError: %x format: a number is required, not numpy.float64`\r\n\r\nThe code doing this is below, a ipynb file with the full traceback is [here](http://nbviewer.ipython.org/6379448)\r\n\r\n    import matplotlib.pyplot as pl\r\n    from mpl_toolkits.mplot3d import Axes3D\r\n\r\n    fig = pl.figure()\r\n    ax = Axes3D(fig)\r\n\r\n    x = y = z  = range(10)\r\n    dz =  [0., 1]*5\r\n    # I guess the problem is the dz value. Using a scalar,\r\n    # even 0. works. A list of 0. works as well but not a combination.\r\n    ax.bar3d(x, y, z, 1, 1, dz)\r\n    fig.savefig('test.svg')\r\n\r\nmatplotlib version: **1.2.0**\r\n"""
2337,18482354,anshbansal,mdboom,2013-08-23 17:31:44,2013-08-26 15:10:43,2013-08-26 15:10:43,closed,,,4,confirmed bug;Documentation;low hanging fruit,https://api.github.com/repos/matplotlib/matplotlib/issues/2337,"b""pylot tutorial's codes are missing statements""",b'I was following the Pyplot tutorial at http://matplotlib.org/users/pyplot_tutorial.html and noticed that except the first code all other codes are missing the plt.show() command at the end. The same problem exists in the pdf version. \r\n\r\nThe mistake is easy to spot and rectify for the users but it is a mistake nonetheless and can bump new users.'
2329,18410170,alefnula,tacaswell,2013-08-22 12:38:19,2013-11-27 08:21:09,2013-11-27 08:21:09,closed,,,3,confirmed bug,https://api.github.com/repos/matplotlib/matplotlib/issues/2329,b'set_position on Annotation is not working',"b""`annotation.set_position(...)` is not working in versions `1.2.1`, `1.3.0` nor on the `master`.\r\n\r\nHere is an example that demonstrates this.\r\n\r\n```python\r\nimport numpy as np\r\nimport matplotlib.pyplot as plt\r\nimport matplotlib.animation as animation\r\n\r\n# Create initial data\r\ndata = np.array([[1,2,3,4,5], [7,4,9,2,3]])\r\n\r\n# Create figure and axes\r\nfig = plt.figure()\r\nax = plt.axes(xlim=(0, 20), ylim=(0, 20))\r\n\r\n# Create initial objects\r\nline, = ax.plot([], [], 'r-')\r\nannotation = ax.annotate('A0', xy=(data[0][0], data[1][0]))\r\nannotation.set_animated(True)\r\n\r\ndef init():\r\n    return line, annotation\r\n\r\ndef update(num):\r\n    newData = np.array([[1 + num, 2 + num / 2, 3, 4 - num / 4, 5 + num],\r\n                        [7, 4, 9 + num / 3, 2, 3]])\r\n    line.set_data(newData)\r\n    # This is not working but in docs it is described as a setter\r\n    # annotation.set_position((newData[0][0], newData[1][0]))\r\n    # This works but this is described in docs as getter\r\n    annotation.xytext = (newData[0][0], newData[1][0])\r\n    return line, annotation\r\n\r\nanim = animation.FuncAnimation(fig, update, frames=25, init_func=init,\r\n                               interval=200, blit=True)\r\nplt.show()\r\n```\r\nSO Question where the bug was discovered: [Animate points with labels with mathplotlib](http://stackoverflow.com/questions/18351932/animate-points-with-labels-with-mathplotlib/18356224)\r\n"""
2299,18116638,lpsinger,WeatherGod,2013-08-15 17:38:24,2013-08-27 14:46:45,2013-08-27 14:46:45,closed,,v1.3.x,2,confirmed bug,https://api.github.com/repos/matplotlib/matplotlib/issues/2299,b'Mollweide projection no longer shows horizontal gridlines',"b'As of Matplotlib 1.3.0, the Mollweide projection no longer show horizontal gridlines.\r\n\r\nWith this test command:\r\n\r\n    python -c ""from matplotlib import pyplot as plt; plt.subplot(111, projection=\'mollweide\'); plt.grid(); plt.savefig(\'moll.png\')""\r\n\r\nwith Matplotlib 1.3.0 on MacPorts on Mac OS X Mountain Lion, you get this:\r\n\r\n![moll](https://f.cloud.github.com/assets/728407/970141/e5352640-05d0-11e3-813a-148247f72433.png)\r\n\r\nwhereas on Matplotlib 1.1.1rc2 on Debian Wheezy, you get:\r\n\r\n![moll_old](https://f.cloud.github.com/assets/728407/970156/205dd5dc-05d1-11e3-93a9-37b8c3b669d3.png)\r\n'"
2296,18074623,eyurtsev,dmcdougall,2013-08-14 20:23:16,2013-08-29 01:42:09,2013-08-29 01:42:09,closed,,,4,confirmed bug,https://api.github.com/repos/matplotlib/matplotlib/issues/2296,b'rc defaults incorrectly interpreted by colorbar',b'There should be no circles around the colorbar.\r\n\r\nSee code here: http://nbviewer.ipython.org/6234558\r\n\r\nLinux twiddles 3.2.0-51-generic-pae #77-Ubuntu SMP Wed Jul 24 20:40:32 UTC 2013 i686 i686 i386 GNU/Linux\r\n1.1.1rc\r\nObtained using apt-get\r\n'
2229,16921877,claria,mdboom,2013-07-18 14:11:09,2014-08-07 13:49:37,2013-09-05 12:29:47,closed,mdboom,v1.3.x,8,confirmed bug,https://api.github.com/repos/matplotlib/matplotlib/issues/2229,b'Matplotlib does not display hatching when rendering to pdf in fill_between',"b""Hi,\r\n\r\nusing fill_between with hatching and specifying a edgecolor and color='none' should result in edge and hatch plotted with edgecolor\r\n\r\nWhile the edge is plotted, the hatch is not plotted at all (or not visible) when output is a pdf.\r\nThis works for png output.\r\n\r\nI assume this is a bug, since it does not occur for the fill() method\r\n\r\nPNG \r\n![test](https://f.cloud.github.com/assets/1030408/819552/e21bf444-efb3-11e2-9050-b82f107b5f1c.png)\r\nPDF\r\n![testpdf](https://f.cloud.github.com/assets/1030408/819571/2725dcc6-efb4-11e2-8e8e-7518053f81d3.png)\r\n\r\nWorking example:\r\n\r\nimport matplotlib.pyplot as plt\r\n\r\nplt.fill_between([1,2,3],[0.5,0.5,0.5],[1.5,1.5,1.5], hatch='/', color='none', edgecolor='blue')\r\n\r\nplt.savefig('test.png')\r\nplt.savefig('test.pdf'')\r\n\r\n\r\n"""
2197,16294094,khyox,efiring,2013-07-02 23:30:35,2014-04-28 17:17:57,2014-04-28 17:17:57,closed,,v1.4.0,2,confirmed bug,https://api.github.com/repos/matplotlib/matplotlib/issues/2197,b'pyplot.errorbar: problem with some shapes of the positional arguments',"b'This is not a major issue indeed, but I lost quite time until I found where the problem was. About _pyplot.errorbar_ (plot _x_ versus _y_ with error deltas in _yerr_ and _xerr_) the doc states this about the first optional argument:\r\n\r\n_xerr/yerr: [ scalar | N, Nx1, or 2xN array-like ] If a scalar number, len(N) array-like\r\nobject, or an Nx1 array-like object, errorbars are drawn at +/-value relative to the data._(...)\r\n\r\nBut in some cases this is not working as expected (or at least, after reading the doc, as I understand it should work). I prepared an example to show where the problems arise (tested with matplotlib 1.4.x, numpy 1.7.1; python 3.3.2):\r\n\r\n```python\r\nimport numpy as np\r\nimport matplotlib.pyplot as plt\r\n\r\nx1=np.array([1.2e-05, 1.3e-05, 1.6e-05, 1.7e-05, 1.7e-05])\r\ny1=np.array([6.6e-05, 7.2e-05, 8.9e-05, 9.3e-05, 9.3e-05])\r\nerr1=np.array([5.0e-06, 5.0e-06, 5.0e-06, 5.0e-06, 5.0e-06])\r\nprint(\'Data set 1 shape (x1,y1,err1): (%s,%s,%s)\' % (x1.shape, y1.shape, err1.shape))\r\n\r\nx2=np.array([[  1.2e-05],\r\n             [  1.3e-05],\r\n             [  1.6e-05],\r\n             [  1.7e-05],\r\n             [  1.7e-05]])\r\ny2=np.array([[  6.6e-05],\r\n             [  7.2e-05],\r\n             [  8.9e-05],\r\n             [  9.3e-05],\r\n             [  9.3e-05]])\r\nerr2=np.array([[  5.0e-06],\r\n                [  5.0e-06],\r\n                [  5.0e-06],\r\n                [  5.0e-06],\r\n                [  5.0e-06]])\r\nprint(\'Data set 2 shape (x2,y2,err2): (%s,%s,%s)\' % (x2.shape, y2.shape, err2.shape))\r\n\r\nax = plt.subplot(141)\r\nax.set_xscale(""log"", nonposx=\'clip\')\r\nax.set_yscale(""log"", nonposy=\'clip\')\r\nplt.errorbar(x1, y1, yerr=err1) # OK!\r\nax.set_ylim(ymin=1e-5)\r\n\r\nax = plt.subplot(142)\r\nax.set_xscale(""log"", nonposx=\'clip\')\r\nax.set_yscale(""log"", nonposy=\'clip\')\r\nplt.errorbar(x2, y2) # Also OK\r\nax.set_ylim(ymin=1e-5)\r\n\r\nax = plt.subplot(143)\r\nax.set_xscale(""log"", nonposx=\'clip\')\r\nax.set_yscale(""log"", nonposy=\'clip\')\r\nplt.errorbar(x2, y2, yerr=err2) # Fails!\r\nax.set_ylim(ymin=1e-5)\r\n\r\nax = plt.subplot(144)\r\nax.set_xscale(""log"", nonposx=\'clip\')\r\nax.set_yscale(""log"", nonposy=\'clip\')\r\nplt.errorbar(x2, y2, yerr=err1) # also fails\r\nax.set_ylim(ymin=1e-5)\r\n\r\nplt.show()\r\n```\r\n\r\nThanks!'"
2187,16215278,mdboom,mdboom,2013-07-01 13:57:12,2014-08-20 18:15:30,2013-07-19 16:20:00,closed,mdboom,v1.3.x blocker,12,confirmed bug,https://api.github.com/repos/matplotlib/matplotlib/issues/2187,b'Building documentation from the tarball fails',"b'As reported by Sandro Tosi on the mailing list in the thread: ""Error building documentation for 1.3.0rc4"".'"
2113,15039499,ndawe,mdboom,2013-06-02 11:45:45,2014-08-07 13:52:44,2013-06-03 18:32:23,closed,,v1.3.x blocker,2,confirmed bug,https://api.github.com/repos/matplotlib/matplotlib/issues/2113,b'hist() bottom line now showing (regression?)',"b""The following:\r\n\r\n```python\r\nimport numpy as np\r\nimport matplotlib.pyplot as plt\r\n\r\nmu, sigma = 100, 15\r\nx = mu + sigma * np.random.randn(10000)\r\nfig = plt.figure()\r\nax = fig.add_subplot(111)\r\nn, bins, patches = ax.hist(x, 50, normed=1, histtype='step')\r\nplt.ylim(-.005, plt.ylim()[1])\r\nplt.show()\r\n```\r\n\r\nproduces this in 1.1.0 (although I manually zoomed in here since 1.1.0 didn't set the upper limit on ylim correctly):\r\n\r\n![mpl_1 1 0](https://f.cloud.github.com/assets/202816/596263/5b18faf4-cb79-11e2-9f22-b638e9e0c021.png)\r\n\r\nbut at the HEAD the path is now closed by a bottom line:\r\n\r\n![mpl_head](https://f.cloud.github.com/assets/202816/596264/6c13a5de-cb79-11e2-9c26-92c91d3f7eee.png)\r\n\r\nWould this be considered as a regression? Could an argument be created to allow the user to decide if the bottom line should be displayed? In most of my plots showing a step histogram (usually overlaid on some filled histograms) the bottom line is not desirable.\r\n\r\nI originally asked how to remove the bottom line on SO (thanks to @tacaswell for the answer!):\r\n\r\nhttp://stackoverflow.com/questions/16862501/draw-a-step-histogram-without-closing-the-polygon-with-the-bottom-line"""
2104,14999275,smontanaro,mdboom,2013-05-31 15:39:23,2014-08-07 13:54:36,2013-06-03 13:45:21,closed,,v1.3.x blocker,9,confirmed bug,https://api.github.com/repos/matplotlib/matplotlib/issues/2104,b'Bug in cbook.exception_to_str() in v 1.2',"b'The exception_to_str() function was changed between mpl 1.1 and 1.2.\r\nIn my installation I show it going from this:\r\n\r\ndef exception_to_str(s = None):\r\n\r\n    sh = StringIO.StringIO()\r\n    if s is not None: print >>sh, s\r\n    traceback.print_exc(file=sh)\r\n    return sh.getvalue()\r\n\r\nto this:\r\n\r\ndef exception_to_str(s=None):\r\n\r\n    sh = io.StringIO()\r\n    if s is not None:\r\n        print(s, file=sh)\r\n    traceback.print_exc(file=sh)\r\n    return sh.getvalue()\r\n\r\nAt first glance, the change seems innocuous enough, but I think it\r\nintroduced an error.  (It appears that mpl 1.2 is supposed to work on\r\nPython 2.7 and 3.x.) From a thread I started on comp.lang.python\r\n(http://thread.gmane.org/gmane.comp.python.general/733938), it appears\r\nthat io.StringIO instances only accept Unicode strings as input.\r\nUnless v 1.2 is only supposed to run on Python 3 (that doesn\'t seem to\r\nbe the case), you need to do something to convert the traceback\r\nmodule\'s output to Unicode before feeding to the io.StringIO object.\r\n\r\nHere\'s a simple demonstration of the problem:\r\n\r\n% python2.7\r\nPython 2.7.5+ (2.7:93eb15779050, May 30 2013, 15:27:39)\r\n[GCC 4.4.6 [TWW]] on linux2\r\nType ""help"", ""copyright"", ""credits"" or ""license"" for more information.\r\n>>> import traceback, StringIO, io\r\n>>> s1 = StringIO.StringIO()\r\n>>> traceback.print_stack(file=s1)\r\n>>> print repr(s1.getvalue())\r\n\'  File ""<stdin>"", line 1, in <module>\\n\'\r\n>>>\r\n>>> s2 = io.StringIO()\r\n>>> traceback.print_stack(file=s2)\r\nTraceback (most recent call last):\r\n  File ""<stdin>"", line 1, in <module>\r\n  File ""/home/skipm/x86_64-linux3.1/lib/python2.7/traceback.py"", line\r\n269, in print_stack\r\n    print_list(extract_stack(f, limit), file)\r\n  File ""/home/skipm/x86_64-linux3.1/lib/python2.7/traceback.py"", line\r\n23, in print_list\r\n    \'  File ""%s"", line %d, in %s\' % (filename,lineno,name))\r\n  File ""/home/skipm/x86_64-linux3.1/lib/python2.7/traceback.py"", line\r\n13, in _print\r\n    file.write(str+terminator)\r\nTypeError: unicode argument expected, got \'str\'\r\n'"
1986,14109578,Nikratio,efiring,2013-05-08 16:25:49,2016-02-15 22:35:25,2016-02-15 22:35:21,closed,,2.0 (style change major release),11,confirmed bug;Documentation,https://api.github.com/repos/matplotlib/matplotlib/issues/1986,b'Importing pyplot messes with command line argument parsing',"b'Consider this:\r\n\r\n```\r\n[0] nelarikon:~/tmp$ cat argparsebug.py\r\n#!/usr/bin/env python\r\n\r\nfrom __future__ import division, print_function, absolute_import\r\nfrom argparse import ArgumentParser\r\nimport matplotlib\r\nimport matplotlib.pyplot as plt\r\n\r\nparser = ArgumentParser()\r\n\r\nparser.add_argument(""--name"", type=str, default=None,\r\n                    help=""Prefix for files to load"")\r\n\r\noptions = parser.parse_args()\r\nprint(\'Name is %s\' % repr(options.name))\r\nprint(\'matplotlib version:\', matplotlib.__version__)\r\n[0] nelarikon:~/tmp$ ./argparsebug.py --name foo\r\nName is None\r\nmatplotlib version: 1.2.0\r\n```\r\n\r\nRemoving the `import matplotlib.pyplot as plt` line gives the correct output,\r\n```\r\n[0] nelarikon:~/tmp$ ./argparsebug.py --name foo\r\nName is \'foo\'\r\nmatplotlib version: 1.2.0\r\n```'"
1980,14025905,vMeijin,tacaswell,2013-05-06 23:13:33,2014-08-26 03:42:02,2014-08-26 03:42:02,closed,,v1.4.x,3,confirmed bug,https://api.github.com/repos/matplotlib/matplotlib/issues/1980,b'Custom marker created from vertex list scales wrong',"b""Hello,\r\nI am new here and I dont know if this is the right place, but I found a slight misbehave, when creating a custom markerstyle. If you plot something, eg:\r\n\r\npyplot.plot([0,0], [1,1], markersize=5, marker=[[0,0], [0,1], [1, 1], [1,0])  # marker is a square with size 1\r\n\r\nThe marker has the same size as marker='s', but is not centered. If you use\r\n\r\npyplot.plot([0,0], [1,1], markersize=5, marker=[[-0.5,-0.5], [-0.5,0.5], [0.5,0.5]], [0.5,-0.5])  # still square of size 1\r\n\r\nthe resulting marker is centered but twice the size. The problem is the the function MarkerStyle._set_custom_marker in markers.py:\r\n\r\n    def _set_custom_marker(self, path):\r\n        verts = path.vertices\r\n        rescale = max(np.max(np.abs(verts[:,0])), np.max(np.abs(verts[:,1])))\r\n        self._transform = Affine2D().scale(1.0 / rescale)\r\n        self._path = path\r\n\r\nIt rescales the given vertices, but considers only the max xy values, which results in twice. the size A solution could be to change the rescale factor to:\r\n\r\nx, y = verts[:,0], verts[:,1]\r\nrescale = max(abs(np.max(x) - np.min(x)), abs(np.max(y) - np.min(y)))\r\n\r\n"""
1962,13801486,dharadave,tacaswell,2013-04-30 11:00:28,2014-02-01 03:56:22,2014-02-01 03:56:22,closed,,v1.4.0,3,confirmed bug,https://api.github.com/repos/matplotlib/matplotlib/issues/1962,"b'When legend is outside the axes, pick events get handled twice'","b'Pick events on legends work perfectly unless the legend is moved out of the axes using bbox_to_anchor. After that, the pick event gets called twice for a single mouse click.\r\n\r\nThe following code demonstrates the error. The bug appears when the legend line is clicked: the line toggles twice on a mouse click instead of once.\r\n\r\n```\r\n\'\'\' \r\nToggle plot line-styles between \':\' and \'-\' when line is clicked or \r\nwhen the corresponding legend line is clicked.\r\n\'\'\'\r\nimport pylab\r\nimport numpy\r\n\r\n# Create data for plotting\r\nt = numpy.linspace(0, 1.0, 100) \r\na = numpy.sin(2*numpy.pi*t)\r\n\r\n# Set up figure\r\nfig = pylab.figure()\r\nax = pylab.subplot(111)\r\n\r\n# Plot figures    \r\nlines = []    \r\nfor i in range(5):\r\n    line = ax.plot(t, (i+1)*a, linestyle=\':\', picker=5, label=\'line%d\'%(i+1)) \r\n    lines.append(line[0]) # Save plot lines\r\n\r\n# Create legend\r\nleg = ax.legend(bbox_to_anchor=(1.01, 1), loc=2) # Does not work as expected\r\n# leg = ax.legend() # Works!!\r\n\r\n# Get legend lines\r\nleglines = leg.get_lines() \r\n# Set event for legend lines\r\nfor line in leglines:\r\n    line.set_picker(5)\r\n\r\n# Create a 2 way mapping between legend lines <-> plot lines    \r\nline2leg = dict(zip(lines+leglines, leglines+lines))\r\n\r\n# Define event function\r\ndef onpick(event):\r\n    thisline = event.artist\r\n\r\n    if thisline.get_linestyle()==\':\':\r\n        print "": -> -"" # For debugging\r\n        thisline.set_linestyle(\'-\')\r\n        line2leg[thisline].set_linestyle(\'-\')\r\n    else:\r\n        print ""- -> :"" # For debugging\r\n        thisline.set_linestyle(\':\')\r\n        line2leg[thisline].set_linestyle(\':\')\r\n    fig.canvas.draw()\r\n\r\n# connect event function    \r\nfig.canvas.mpl_connect(\'pick_event\', onpick)\r\npylab.show()\r\n```\r\n\r\n(See also: http://stackoverflow.com/questions/16278358/double-event-registered-on-mouse-click-if-legend-is-outside-axes)'"
1960,13757336,technobauble,dmcdougall,2013-04-29 12:20:42,2013-06-16 21:13:42,2013-06-16 21:13:42,closed,,,2,confirmed bug,https://api.github.com/repos/matplotlib/matplotlib/issues/1960,"b""Right and top spine placement: set_position(('data', x)) puts the spine at x + 1 instead of x.""","b""Python Version 2.7.4\r\nmatplotlib version: 1.1.1\r\n\r\nSetting the location of the top and right spines to X is locating them at X +1. The left and bottom spines are placed as expected.\r\n\r\nI posted this to the users list and it was verified by Goyo <goyodiaz@gmail.com>.\r\n\r\nThe following code demonstrates the error:\r\n\r\n```python\r\nimport matplotlib.pyplot as plt\r\n\r\nf=plt.figure(1)\r\nf.clf()\r\nax=plt.subplot(111)\r\n\r\n# spine is located at x = -1.5\r\nax.spines['left'].set_position(('data', -1.5)) \r\n\r\n# spine should be located at y = 0.5 but is placed at y = 1.5\r\nax.spines['top'].set_position(('data',0.5)) \r\n\r\n# spine should be located at x = -0.5 but is placed at x = +0.5\r\nax.spines['right'].set_position(('data',-0.5))\r\n\r\n# spine is placed at y = 0.\r\nax.spines['bottom'].set_position('zero')\r\n\r\nax.set_xlim([-2,2])\r\nax.set_ylim([-2,2])\r\n\r\nplt.show()\r\n```"""
1957,13733045,edge-python,leejjoon,2013-04-28 10:59:26,2013-05-04 16:15:31,2013-05-03 23:18:27,closed,,v1.3.x blocker,9,confirmed bug,https://api.github.com/repos/matplotlib/matplotlib/issues/1957,b'matplotlib 1.2 / pylab_examples example code: multiple_yaxis_with_spines.py',"b'Hallo,\r\n\r\nthe pylab_examples example code: multiple_yaxis_with_spines.py \r\n\r\nworks incorrect with matplotlib 1.2\r\n\r\n(with matplotlib 1.1.0 o.k.)\r\n\r\nplease check it\r\n\r\n\r\nThank you\r\n\r\n(i use python 2.7.4)\r\n\r\n\r\n\r\n\r\nwith matplotlib 1.2\r\n![matplotlib 1-2 multiple_yaxis_with_spines](https://f.cloud.github.com/assets/4279914/435668/a828bbee-aff5-11e2-9623-5477b35ffd54.jpg)\r\n\r\n\r\nwith matplotlib 1.1\r\n![matplotlib 1-1 multiple_yaxis_with_spines](https://f.cloud.github.com/assets/4279914/435669/c3854dd0-aff5-11e2-8bbd-365a2015baeb.jpg)\r\n\r\n.\r\n.\r\nand this is the result in my program\r\n.\r\nwith matplotlib 1.2\r\n![matplotlib 1-2 TA](https://f.cloud.github.com/assets/4279914/435687/aba4703a-aff8-11e2-9eee-4696d9f34ef8.jpg)\r\n\r\n\r\nwith matplotlib 1.1\r\n![matplotlib 1-1 TA](https://f.cloud.github.com/assets/4279914/435688/b76c73b8-aff8-11e2-8c28-f15498e10f84.jpg)\r\n'"
1897,13115043,takluyver,pelson,2013-04-12 11:33:38,2014-08-07 13:52:39,2013-04-17 14:17:58,closed,,v1.3.x blocker,11,confirmed bug;Documentation,https://api.github.com/repos/matplotlib/matplotlib/issues/1897,b'Doc build failure - unicode error in generate_example_rst',"b'On Python 2, `io.open()` is called without an encoding argument. The default encoding it uses depends on the locale, so on Launchpad buildbots using the C locale, the default encoding is ASCII, and it chokes on any non-ascii character.\r\n\r\n(This platform-dependent default is really annoying for anything cross platform, but it\'s part of the tension between Python as a serious application language and Python as a quick scripting language)\r\n\r\n```\r\nException occurred:\r\n  File ""/usr/lib/python2.7/dist-packages/sphinx/cmdline.py"", line 188, in main\r\n    warningiserror, tags)\r\n  File ""/usr/lib/python2.7/dist-packages/sphinx/application.py"", line 134, in __init__\r\n    self._init_builder(buildername)\r\n  File ""/usr/lib/python2.7/dist-packages/sphinx/application.py"", line 195, in _init_builder\r\n    self.emit(\'builder-inited\')\r\n  File ""/usr/lib/python2.7/dist-packages/sphinx/application.py"", line 314, in emit\r\n    results.append(callback(self, *args))\r\n  File ""/build/buildd/matplotlib-1.2.0~1+6540+23~raring1/doc/sphinxext/gen_rst.py"", line 44, in generate_example_rst\r\n    contents = io.open(fullpath).read()\r\n  File ""/usr/lib/python2.7/encodings/ascii.py"", line 26, in decode\r\n    return codecs.ascii_decode(input, self.errors)[0]\r\n```\r\n\r\nBuildlog: https://launchpadlibrarian.net/137176232/buildlog_ubuntu-raring-i386.matplotlib_1.2.0~1%2B6540%2B23~raring1_FAILEDTOBUILD.txt.gz'"
1894,12994986,fgb,pelson,2013-04-09 22:11:22,2014-08-07 13:54:43,2013-04-12 14:39:24,closed,,v1.2.x,12,confirmed bug,https://api.github.com/repos/matplotlib/matplotlib/issues/1894,b'Exporting figure as pdf using savefig() messes up axis background in OS X',"b""I'm trying to change the axis background on a plot where several imshow() calls render images in various locations via the extent parameter.\r\n\r\nWhen I save a pdf of the figure using savefig(), I lose the background color if the axis displays more than one image. Note that this doesn't happen when exporting a png of the same figure.\r\n\r\n[Example code and the corresponding output](http://stackoverflow.com/questions/15885763/exporting-figure-as-pdf-using-savefig-messes-up-axis-background-in-matplotlib) [stackoverflow.com].\r\n\r\nCould this be a bug with the MacOSX backend I'm using?\r\n\r\n__Note:__ I'm using matplotlib 1.2.1 installed via `pip` running on Python 2.7.4\r\n"""
1883,12809737,arkottke,tacaswell,2013-04-04 17:02:13,2015-07-17 03:52:20,2015-07-17 03:52:20,closed,,v1.5.0,4,confirmed bug;OS/Microsoft,https://api.github.com/repos/matplotlib/matplotlib/issues/1883,b'Cairo backend reports file closed on writing to SVGZ file format.',"b'With this simple test case:\r\n```python\r\nimport matplotlib\r\nmatplotlib.use(\'Cairo\')\r\nimport matplotlib.pyplot as plt\r\n\r\nimport numpy as np\r\n\r\nx = np.arange(-10, 10)\r\ny = x ** 2\r\n\r\nfig = plt.figure()\r\nax = fig.add_subplot(111)\r\n\r\nax.plot(x, y, \'b-\')\r\n\r\nax.grid()\r\n\r\nfig.savefig(\'test.svgz\')\r\n```\r\nThe following error is reported on Windows 7 with Python 3.3.\r\n```\r\n$ python test.py\r\nTraceback (most recent call last):\r\n  File ""test.py"", line 21, in <module>\r\n    fig.savefig(\'test.svgz\')\r\n  File ""C:\\Python33\\lib\\site-packages\\matplotlib\\figure.py"", line 1364, in savefig\r\n    self.canvas.print_figure(*args, **kwargs)\r\n  File ""C:\\Python33\\lib\\site-packages\\matplotlib\\backend_bases.py"", line 2093, in print_figure\r\n    **kwargs)\r\n  File ""C:\\Python33\\lib\\site-packages\\matplotlib\\backends\\backend_cairo.py"", line 437, in print_svgz\r\n    return self._save(fobj, \'svgz\', *args, **kwargs)\r\n  File ""C:\\Python33\\lib\\site-packages\\matplotlib\\backends\\backend_cairo.py"", line 514, in _save\r\n    surface.finish()\r\n  File ""C:\\Python33\\lib\\gzip.py"", line 325, in write\r\n    self._check_closed()\r\n  File ""C:\\Python33\\lib\\gzip.py"", line 244, in _check_closed\r\n    raise ValueError(\'I/O operation on closed file.\')\r\nValueError: I/O operation on closed file.\r\n```\r\n\r\nThe error has to do with the create of the file object on line 466 of _backend_cairo.py_.\r\n```python\r\n            if format == \'svgz\':\r\n                filename = fo\r\n                if is_string_like(fo):\r\n                    fo = open(fo, \'wb\')\r\n                    close = True\r\n                else:\r\n                    close = False\r\n                try:\r\n                    fo = gzip.GzipFile(None, \'wb\', fileobj=fo)\r\n                finally:\r\n                    if close:\r\n                        fo.close()\r\n```\r\n\r\nIf I am reading the logic right, the file object is closed if a filename is provided. I would propose the following change:\r\n```python\r\n            if format == \'svgz\':\r\n                filename = fo\r\n                if is_string_like(fo):\r\n                    fo = open(fo, \'wb\')\r\n\r\n                fo = gzip.GzipFile(None, \'wb\', fileobj=fo)\r\n```\r\n'"
1810,11700513,jsundram,mdboom,2013-03-06 05:45:18,2014-08-07 13:52:57,2013-04-19 20:16:41,closed,,v1.3.x,16,confirmed bug,https://api.github.com/repos/matplotlib/matplotlib/issues/1810,b'Cairo + plot_date = misaligned x-axis labels',"b""On OSX 10.8.2, using the cairo backend along with plot_date leads to misaligned x-axis labels. No combination I found of setting the verticalalignment of the label (top, bottom, baseline, etc), solved this problem. \r\n\r\nHere's a screenshot of the issue (Notice the vertical alignment of April & May).\r\n\r\n![bug](https://f.cloud.github.com/assets/150536/226195/8789a618-8620-11e2-89c4-7075f6038481.png)\r\n\r\nHere's a gist with minimal code to reproduce the issue. It contains all the info about my matplotlib version, setup, etc. that should be needed.\r\n\r\nhttps://gist.github.com/jsundram/5096973"""
1769,11197588,stefanv,pelson,2013-02-20 13:52:02,2014-01-06 10:10:11,2014-01-06 10:10:11,closed,tacaswell,,0,confirmed bug,https://api.github.com/repos/matplotlib/matplotlib/issues/1769,b'FunctionAnimator tries to take length of iterator',"b'https://github.com/matplotlib/matplotlib/blob/master/lib/matplotlib/animation.py#L981\r\n\r\nFunctionAnimator allows an iterator as the ``frames`` parameter, but then tries to take its length.  This, e.g., does not work on ``iter(range(10))`` or ``itertools.count()``.'"
1758,11117903,fmder,efiring,2013-02-18 14:58:09,2016-05-22 05:45:10,2016-05-22 03:58:20,closed,,2.0 (style change major release),7,confirmed bug;OS/Apple,https://api.github.com/repos/matplotlib/matplotlib/issues/1758,b'y limit with dashed or dotted lines hangs with somewhat big data',"b'When plotting uncontinuous lines and rescaling the y axis to centre the view on some part of the data matplotlib hangs in the show() function forcing me to kill the process.\r\n\r\nHow to reproduce the bug: \r\n\r\n```python\r\n\r\nimport matplotlib.pyplot as plt\r\nimport numpy\r\na = 2**numpy.arange(0, 50)\r\nplt.plot(a, ""--"")\r\nplt.ylim([0, 100])\r\nplt.show()\r\n```\r\n\r\nThis does work perfectly with a continuous line or when the data is smaller and uncontinuous lines.\r\nI use matplotlib 1.2.0 on OSX 10.7.5 and I have Python 2.7.3 installed as a famework (with homebrew).\r\n\r\n'"
1751,11059107,tkanmae,tacaswell,2013-02-16 00:49:26,2015-03-03 18:44:16,2014-10-19 04:52:41,closed,mdboom,v1.4.3,6,confirmed bug;needs_review,https://api.github.com/repos/matplotlib/matplotlib/issues/1751,b'Polygon is corrupted with SVG backend in a certain condition',"b""Hi.\r\n\r\nI found a path of Polygon is somewhat corrupted when save a figure as SVG.  I have an imshow() an image and add a rectangle-like Polygon.  Since I only need the edges of the Polygon, I set 'facecolor' to 'none'.  The height of the Polygon is larger than the height of the image.  When I saved the figure as SVG, the path of the Polygon is corrupted. \r\n\r\nInterestingly, the problem occurs only when height of the figure is smallar then 3.3 (while keeping the width to 6.0), and when 'facecolor' of the Polygon is 'none'.  The code at the bottom reproduces the problem.\r\n\r\nI'm using the current master branch from github, and found the problem was introduced between v1.1.1 and v1.2.0.  After bisecting between them, I found that the problem is introduced in c6cc861f3ac22a4063a52fb46c8d71fc4d7a26b9.\r\n\r\nThanks,\r\n\r\n```python\r\nimport matplotlib.pyplot as plt\r\nimport numpy as np\r\nfrom matplotlib.patches import Polygon\r\n\r\n# Use mpl's default setting.\r\nplt.matplotlib.rcdefaults()\r\n\r\n# Proplem occurs when height is smaller than 3.3.\r\nfig = plt.figure(figsize=(6.0, 3.2))\r\nax = fig.add_subplot(111)\r\n\r\nim = np.zeros((480, 640))\r\nbbox = [0, 140, 640, 260]\r\nax.imshow(\r\n    im[bbox[1]:bbox[1]+bbox[3],bbox[0]:bbox[0]+bbox[2]],\r\n    extent=(bbox[0],bbox[0]+bbox[2],bbox[1],bbox[1]+bbox[3]),\r\n    cmap='gray')\r\n\r\nxy = [(297, 403), (303, 403), (304, 43), (296, 43)]\r\nxy = xy + [xy[0]]\r\n# Problem occurs when facecolor is 'none'.\r\nax.add_patch(Polygon(xy, facecolor='none', edgecolor='yellow'))\r\n\r\nfig.savefig('foo.svg')\r\n```"""
1747,10950900,mameghani,pelson,2013-02-13 12:11:57,2014-01-09 10:48:38,2014-01-09 10:48:38,closed,,,2,confirmed bug,https://api.github.com/repos/matplotlib/matplotlib/issues/1747,b'NotImplementedError: cannot remove artist',"b'Some/many/all(?) artists cannot be removed from a figure:\r\n```\r\nfrom matplotlib.figure import Figure\r\nfig = Figure()\r\ncaption = fig.suptitle(""test"")\r\ncaption.remove()\r\n```\r\n```\r\nTraceback (most recent call last):\r\n  File ""<pyshell#6>"", line 1, in <module>\r\n    caption.remove()\r\n  File ""C:\\Programme\\Python27\\lib\\site-packages\\matplotlib\\artist.py"",\r\nline 134, in remove\r\n    raise NotImplementedError(\'cannot remove artist\')\r\nNotImplementedError: cannot remove artist\r\n````'"
1737,10627187,dougalsutherland,mdboom,2013-02-04 21:45:51,2013-05-20 19:37:21,2013-05-20 19:37:21,closed,dmcdougall,v1.3.x blocker,8,confirmed bug;OS/Apple,https://api.github.com/repos/matplotlib/matplotlib/issues/1737,b'MacOSX backend unicode problems in python 3.3',"b'My matplotlib install on Python 3.3.0 seems to be cutting basically all strings in half in the MacOSX backend. This happens with both matplotlib 1.2.0 and the latest git; it doesn\'t happen on 2.7. I don\'t have a 3.2 install anymore, but I didn\'t see this problem with slightly earlier versions of matplotlib.\r\n\r\nFor example, if I simply run `plt.xlabel(\'xlabel\')`, only `xla` shows up in the xlabel position. This problem also applies to the ticks, so that labels that would normally say eg `0.2` say just `0.`. In general, it seems that the length of displayed strings is half the length of the passed string, rounded up. If I try to save the resulting figure through the backend, I get this exception:\r\n\r\n    Traceback (most recent call last):\r\n      File ""/usr/local/lib/python3.3/site-packages/matplotlib/backends/backend_macosx.py"", line 467, in save_figure\r\n        self.canvas.get_default_filename())\r\n    import matplotlib\r\n    ValueError: character U+55002f is not in range [U+0000; U+10ffff]\r\n\r\nThe Qt4Agg backend seems normal, and `matplotlib.test()` succeeds with only known failures and irrelevant warnings.\r\n\r\nI\'m on OSX 10.8.2 with the most recent Xcode command line tools (`clang --version` says `Apple LLVM version 4.2 (clang-425.0.24) (based on LLVM 3.2svn)`); dependencies are installed via homebrew.\r\n\r\nThe full log of `setup.py build` is [here](https://gist.github.com/274c73fe4504971d6dca), but only this quite suspcious-looking warning stands out:\r\n\r\n    src/_macosx.m:4979:51: warning: incompatible pointer types passing \'unichar *\' (aka \'unsigned short *\') to parameter of type\r\n          \'const Py_UNICODE *\' (aka \'const int *\') [-Wincompatible-pointer-types]\r\n            PyObject* string =  PyUnicode_FromUnicode(buffer, n);\r\n                                                      ^~~~~~\r\n    /usr/local/Cellar/python3/3.3.0/Frameworks/Python.framework/Versions/3.3/include/python3.3m/unicodeobject.h:702:23: note: passing argument to\r\n          parameter \'u\' here\r\n        const Py_UNICODE *u,        /* Unicode buffer */\r\n                          ^\r\n\r\nSince [the referenced line](https://github.com/matplotlib/matplotlib/blob/v1.2.0/src/_macosx.m#L4979) is in the function `choose_save_file`, it seems like that probably explains at least the problem with saving files, and `unichar` being an `unsigned short` vs `Py_UNICODE` being an `int` seems likely to explain the general problem (since a `short` is 2 bytes and an `int` is 4).\r\n\r\nThis presumably broke in 3.3 because of something related to [PEP 393](http://www.python.org/dev/peps/pep-0393/), which notes that ""The `Py_UNICODE` type is still supported but deprecated.""'"
1733,10569383,fkbreitl,tacaswell,2013-02-02 09:00:10,2014-01-23 12:57:53,2014-01-23 12:57:53,closed,,,2,confirmed bug,https://api.github.com/repos/matplotlib/matplotlib/issues/1733,"b""im.set_clip_path(rectangle) doesn't work""","b""I would like to clip a rectangular patch from an image, but my code below doesn't work. If I use a circle instead it works. It looks like a bug. Any help would be appreciated.\r\n(See also http://matplotlib.org/examples/api/clippath_demo.html and http://matplotlib.1069221.n5.nabble.com/Clipping-td19613.html).\r\n\r\n--\r\nimport matplotlib.pyplot as plt, numpy, matplotlib.patches as p\r\n\r\na=numpy.array([[1,2],[3,4]])\r\nim=plt.imshow(a)\r\nrect = p.Rectangle((0,0),1,1, transform=im.axes.transData)\r\ncircle = p.Circle((0,0),1, transform=im.axes.transData)\r\n#im.set_clip_path(circle)                                                      \r\nim.set_clip_path(rect)\r\nplt.show()\r\n"""
1679,10064568,mmokrejs,mdboom,2013-01-17 16:29:00,2013-03-01 17:13:10,2013-03-01 17:13:10,closed,,v1.2.x,9,confirmed bug;low hanging fruit,https://api.github.com/repos/matplotlib/matplotlib/issues/1679,b'matplotlib-1.2.0: regression in histogram with barstacked drawing?',"b'To: Matplotlib-users@lists.sourceforge.net\r\nMessage-ID: <50DF638E.80904@fold.natur.cuni.cz>\r\n\r\nHi,\r\n  I recently updated to matplotlib-1.2.0 from 1.1.1 and my figures have rotated\r\norder of color bars stacked upon each other. Here is a small testcase I sketched\r\nnow and two generated png files are attached, generated by the two different\r\nmatplotlib versions. The colornames are just bad in the legend, just to show that\r\nthe order of input data is same in both cases.\r\n\r\nI would be grateful for any comments on this.\r\nThank you,\r\nMartin\r\n\r\n#! /usr/bin/python\r\n\r\nimport pylab\r\n\r\nF = pylab.gcf()\r\n\r\nF.set_size_inches(11.2, 8.4)\r\n\r\n_e = [[100, 100, 100, 100, 200, 320, 450, 80, 20, 600, 310, 800], [20, 23, 50, 11, 100, 420], [120, 120, 120, 140, 140, 150, 180], [60, 60, 60, 60, 300, 300, 5, 5, 5, 5, 10, 300], [555, 555, 555, 30, 30, 30, 30, 30, 100, 100, 100, 100, 30, 30], [30, 30, 30, 30, 400, 400, 400, 400, 400, 400, 400, 400]]\r\n_ee = [(0.5759849696758961, 1.0, 0.0), (0.0, 1.0, 0.350624650815206), (0.0, 1.0, 0.6549834156005998), (0.0, 0.6569064625276622, 1.0), (0.28302699607823545, 0.0, 1.0), (0.6849123462299822, 0.0, 1.0)]\r\n_eee = [\'green\', \'orange\', \' yellow\', \'magenta\', \'black\']\r\n\r\npylab.hist(_e, bins=10, histtype=\'barstacked\', align=\'mid\', color=_ee, log=False, label=_eee)\r\n\r\npylab.legend(loc=\'upper right\', bbox_to_anchor = (1.0, 1.0), ncol=1)\r\n\r\nF.savefig(""hist_barstacked_bug.png"", dpi=100)'"
1673,10044811,tkanmae,dmcdougall,2013-01-17 03:05:32,2013-01-18 00:58:23,2013-01-18 00:58:23,closed,,1.2.x known bugs,4,confirmed bug,https://api.github.com/repos/matplotlib/matplotlib/issues/1673,b'Images saved as SVG get upside down when `svg.image_noscale` is True.',"b""I created a figure with an image using `imshow()` and saved it as SVG.  I realized that the saved image gets upside down when `svg.image_noscale` is True.\r\n\r\nI'm using matplotlib == 1.2.0 on Mac OS X.\r\n\r\nThe following code reproduces the issue.\r\n```python\r\nimport matplotlib.pyplot as plt\r\nimport numpy as np\r\n\r\n# Use default configuration.\r\nplt.matplotlib.rcdefaults()\r\n\r\n# Create a figure.\r\nfig = plt.figure()\r\nax = fig.add_subplot(111)\r\nX, Y = np.meshgrid(np.arange(-5, 5, 1), np.arange(-5, 5, 1))\r\nZ = np.sin(Y**2)\r\nax.imshow(Z, cmap='gray')\r\n\r\n# These are ok.\r\nfig.savefig('ok.png')\r\nfig.savefig('ok.svg')\r\n\r\n# Set `svg.image_noscale` to True.\r\nplt.rcParams['svg.image_noscale'] = True\r\n# Then, the image is upside down.\r\nfig.savefig('bad.svg')\r\n```\r\n\r\nThanks,"""
1591,9213134,pelson,mdboom,2012-12-12 11:29:13,2015-11-10 02:33:54,2013-03-22 16:08:20,closed,,v1.2.x,10,confirmed bug,https://api.github.com/repos/matplotlib/matplotlib/issues/1591,b'Image being snapped erroneously',"b'Since 1262326c00074fb497816242c9aa0e7787bd5cda implemented by @mdboom the following example results in a figure which has a 1 pixel border around left and bottom edges in the resultant image:\r\n\r\n```\r\nimport matplotlib.pyplot as plt\r\nimport matplotlib\r\n\r\nimport numpy\r\n\r\n\r\nif __name__ == \'__main__\':\r\n    print matplotlib.__version__\r\n\r\n    f = plt.figure(figsize=[1, 1])\r\n    ax = plt.axes([0, 0, 1, 1],\r\n                  frameon=False,\r\n                  )\r\n\r\n    data = numpy.tile(numpy.arange(12), 15).reshape(20, 9)\r\n    \r\n    im = ax.imshow(data, origin=\'upper\',\r\n                   extent=[-10, 10, -10, 10], interpolation=\'none\',\r\n                   cmap=\'gray\'\r\n                   )\r\n\r\n    x = y = 2\r\n    ax.set_xlim([-x, x])\r\n    ax.set_ylim([-y, y])\r\n        \r\n    ax.set_xticks([])\r\n    ax.set_yticks([])\r\n    \r\n    fname = \'test.png\'\r\n    plt.savefig(fname, facecolor=(0, 1, 0))\r\n    plt.close()\r\n    \r\n    im = plt.imread(fname)\r\n    r, g, b, a = sum(im[:, 0])\r\n    print \'Left edge: \', r, g, b, a\r\n    r, g, b, a = sum(im[:, -1])\r\n    \r\n    print \'Right edge:\' , r, g, b, a\r\n    assert g != 100, \'Expected a non-green edge - but sadly, it was.\'\r\n```\r\n![output](https://f.cloud.github.com/assets/810663/7907/0df5563e-444f-11e2-9128-5d91ace95c33.png)\r\n\r\nNotice the green 1px border on the bottom and right of the output.\r\n\r\nThe problem is limited to the Agg backend and the ""none"" image interpolation scheme.\r\n\r\nWith a bit of refinement, this example should be turned into a test once we have a fix for this.\r\n\r\n'"
1541,8774991,ruymanengithub,WeatherGod,2012-11-28 17:51:44,2014-07-11 21:58:14,2014-07-11 21:58:14,closed,WeatherGod,,9,confirmed bug;mplot3d,https://api.github.com/repos/matplotlib/matplotlib/issues/1541,b'Transparecy of figures in 3D plots (mplot3d)',"b""Hi,\n\nI'm trying to do a 3D plot with semi-transparent polyhedrons using mplot3d, but the setting of the alpha value has no effect. Here's the code I'm trying,\n\n\nimport mpl_toolkits.mplot3d as a3\nimport matplotlib.colors as colors\nimport pylab as pl\n\n\nax = a3.Axes3D(pl.figure())\n\ncolor = colors.rgb2hex(sp.rand(3))\n#color = (0.,1.,0.,0.2) # but this works!\n\nside1 = [[0.,0.,0.],[0.,0.,1.],[0.,1.,1.],[0.,1.,0.]]\ntri = a3.art3d.Poly3DCollection([side1])\ntri.set_facecolor(color)\ntri.set_edgecolor('k')\ntri.set_alpha(0.2)  # HAS NO EFFECT\n\nax.add_collection3d(tri)\n\nside2 = [[0.,0.,0.],[1.,0.,0.],[1.,1.,0.],[0.,1.,0.]]\ntri = a3.art3d.Poly3DCollection([side2])\ntri.set_facecolor(color)\ntri.set_edgecolor('k')\ntri.set_alpha(0.2)\n\nax.add_collection3d(tri)\n\npl.show()\n\n\nApparently, the tri.set_alpha sentences have no effect, and the pannels show solid. Changing color for an rgba tupla works, nonetheless (the commented line).\n\nCheers,\n\nRuyman"""
1539,8760997,pelson,mdboom,2012-11-28 11:03:36,2013-05-10 19:31:03,2013-05-10 19:31:03,closed,pelson,v1.3.x blocker,1,confirmed bug,https://api.github.com/repos/matplotlib/matplotlib/issues/1539,b'Pickling of log axes',"b""The following question was asked on stack overflow:\r\n\r\n-------\r\n\r\nPickling doesn't work when one uses logscale, eg:\r\n\r\n```\r\nimport matplotlib.pyplot as plt\r\nimport numpy as np\r\nimport pickle\r\nax = plt.subplot(111)\r\nx = np.linspace(0, 10)\r\ny = np.exp(x)\r\nplt.plot(x, y)\r\nax.set_yscale('log')\r\npickle.dump(ax, file('myplot.pickle', 'w'))\r\n```\r\n\r\nResults in the following:\r\n\r\n```\r\nPicklingError: Can't pickle <class 'matplotlib.scale.Log10Transform'>: attribute lookup matplotlib.scale.Log10Transform failed\r\n```\r\n\r\n------\r\n\r\nAnybody knows any solution/workaround to this?"""
1530,8631771,jfmoulin,efiring,2012-11-24 16:32:20,2013-05-24 19:28:41,2013-05-24 19:28:41,closed,,,14,confirmed bug,https://api.github.com/repos/matplotlib/matplotlib/issues/1530,b'saving a figure triggers (very) excessive IO activity ',"b'Saving a figure from the GUI under GTK triggers a lot of IO activity. Up to 60Mb/sec on my system.\nThe file /.local/share/recently-used.xbel gets written to each time the session history is scrolled through with cursor keys.\n\nI am running matplotlib 1.2.0 but this issue is, I believe, much older than that. \n\nI reported the issue to IPython (see https://github.com/ipython/ipython/issues/2608) first thinking this was a purely IPy problem but I could then reproduce the bug in a normal python session.\n\nAs suggested by rkern there, I posted a dump of strace and lsof at http://filebin.ca/NdspC6wfTV3\n\nAnother user also reported that saving from script triggers the same problem, but I could personnally not observe that with certainty.'"
1501,8389296,TPeter85,tacaswell,2012-11-15 15:05:55,2014-08-18 00:47:29,2014-08-18 00:47:29,closed,,,4,confirmed bug;mpl_toolkit,https://api.github.com/repos/matplotlib/matplotlib/issues/1501,b'Panning and zooming does not work on axes created with twinx (and twiny)',"b'See: http://matplotlib.org/examples/axes_grid/demo_parasite_axes2.html\n\nIf a plot is created like in the example above (using host_subplot for the host axes and twinx for the twin axes), panning or zooming does not work like in the case of the main axes. The twin axes seem to be fixed, i.e. their axis limits are not changed upon zooming or panning. This issue does not appear on the x-axis, only on y-axis (using twinx). This causes problems with interactive plots when zooming or panning is intented to show a part of the plotted lines. \n\nDuring vertical panning only the plots of the host axes are panned but the twin ones do not react. If panned in the horizontal direction everything works fine. \n\nIf zoomed in on an area where only the plots on the host axes should be seen both twin axes are visible. Actually the twin axes are zoomed in but only on the x-axis as if the zoom would be used on their x-axis only. \n\nThe problem seems to appear only with mpl_toolkits.axes_grid1; pyplot.figure and pylab.figure work fine. I have tried both matplotlib 1.1 and 1.2. Both versions have this problem. I am using Python 2.7.2 on a Windows 7 64 bit machine.'"
1499,8371936,phobson,tacaswell,2012-11-14 22:54:22,2014-02-25 02:13:38,2014-02-25 02:13:38,closed,,,3,confirmed bug,https://api.github.com/repos/matplotlib/matplotlib/issues/1499,b'twinx() on an inset axes wrongly acts on the main axes',"b'Seen here:\r\nhttp://stackoverflow.com/questions/13385924/adding-a-second-y-axis-to-an-inset-zoom-axes\r\n\r\nOn version 1.2.0, this is all fine and dandy:\r\n\r\n    import numpy as np\r\n    import matplotlib.pyplot as plt\r\n    from mpl_toolkits.axes_grid1.inset_locator import zoomed_inset_axes\r\n    from mpl_toolkits.axes_grid1.inset_locator import mark_inset\r\n\r\n    # Initializing the curve\r\n    fig = plt.figure()\r\n    main_ax1 = fig.add_subplot(111)\r\n    main_ax2 = main_ax1.twinx()\r\n\r\n    # quantities to plot\r\n    Tension = np.linspace(0,0.08,100)\r\n    Weight = 0.5 * Tension\r\n    Mass = Weight/9.81\r\n\r\n    # Plotting the curve\r\n    main_ax1.plot(Tension, Weight, \'r\', label=\'Fitted line\',lw=2)\r\n    main_ax2.plot(Tension, Mass)\r\n\r\n    # Cosmetic on the Figure\r\n    main_ax1.set_xlabel(""Tension U [$V$]"")\r\n    main_ax1.set_ylabel(""Weight F [$N$]"")\r\n    main_ax2.set_ylabel(""Mass M [$kg$]"")\r\n    main_ax2.set_ylim(main_ax1.axis()[-2]/9.81, main_ax1.axis()[-1]/9.81)\r\n    main_ax1.grid(False)\r\n\r\n    # Zoom on the first measurement\r\n    zoom_ax1 = zoomed_inset_axes(main_ax1, zoom = 7.5, bbox_to_anchor=(0.95,0.5), bbox_transform=main_ax1.transAxes)\r\n    mark_inset(main_ax1, zoom_ax1, loc1=2, loc2=4, fc=""none"", ec=""0.5"")\r\n    zoom_ax1.plot(Tension[:4], Weight[:4], \'r\', lw=2)\r\n    zoom_ax1.set_xticks(zoom_ax1.xaxis.get_majorticklocs()[::2])\r\n    zoom_ax1.set_yticks(zoom_ax1.yaxis.get_majorticklocs()[::2])\r\n\r\nThe unexpected behavior happens here:\r\n\r\n    # this happens to `main_ax2` istead of `zoom_ax1`\r\n    zoom_ax2 = zoom_ax1.axes.twinx()\r\n    zoom_ax2.plot(Tension[:4], Mass[:4],alpha=0)\r\n    zoom_ax2.set_ylim(zoom_ax1.axis()[-2]/9.81,zoom_ax1.axis()[-1]/9.81)\r\n    zoom_ax2.set_ylabel(\'TESTING\')\r\n\r\n    plt.show()'"
1495,8337175,akhmerov,dmcdougall,2012-11-13 21:47:56,2012-11-14 00:07:14,2012-11-14 00:07:14,closed,,,7,confirmed bug;Documentation;low hanging fruit,https://api.github.com/repos/matplotlib/matplotlib/issues/1495,"b'scatter docstring, minor'","b'pyplot.scatter() and axes.scatter() docstrings say that a Collection instance is returned, while it is a PathCollection instead.'"
1490,8330313,akhmerov,efiring,2012-11-13 18:08:11,2013-02-17 20:58:59,2013-02-17 20:58:59,closed,,,3,confirmed bug,https://api.github.com/repos/matplotlib/matplotlib/issues/1490,b'empty scatter messes up the limits',"b""Tested with 1.1.1 (didn't manage 1.2.0 to show anything yet).\r\n\r\nTo reproduce:\r\n\r\nfrom matplotlib import pyplot as plt\r\nplt.scatter([0,1],[0,1])\r\nplt.scatter([], [])  # The lower limit shifts appreciably, compared to not executing this line.\r\nplt.show()\r\n"""
1465,8210806,NelleV,efiring,2012-11-08 16:51:45,2012-12-07 04:14:07,2012-12-07 04:14:07,closed,,v1.2.x,3,confirmed bug,https://api.github.com/repos/matplotlib/matplotlib/issues/1465,b'Undefined elements in axes module',"b""Dixit pyflakes, there are several undefined elements in the axes module:\r\n\r\n- The method ``Axes.__pick`` (line 3240) calls ``test``, which isn't defined\r\n- The method ``Axes.dist`` (line 3221) calls ``Patch`` and ``Text`` which haven't been imported\r\n\r\nThanks,\r\nN"""
1444,8029739,mdboom,mdboom,2012-11-01 13:06:09,2014-07-01 15:58:31,2012-11-01 17:13:41,closed,mdboom,v1.2.x,3,confirmed bug,https://api.github.com/repos/matplotlib/matplotlib/issues/1444,b'Colorbar edges are different in PDF backend',"b""In a message on matplotlib-users from Andrew Dawson:\r\n\r\nHi all,\r\n\r\nI just noticed that colorbar edges are drawn in white when output in PDF and black when output in PNG. A small test script is attached along with the output to show the difference.\r\n\r\nI'd be interested in knowing if others can reproduce this? I'm using mpl-1.3.x (updated 5 minutes ago) on 64-bit Ubuntu 12.04.\r\n\r\nCheers,\r\nAndrew\r\n\r\n```\r\nimport matplotlib.pyplot as plt\r\nimport numpy as np\r\n\r\n# dummy data\r\nx = y = np.linspace(-np.pi, np.pi, 50)\r\nX, Y = np.meshgrid(x, y)\r\nZ = np.sin(X) * np.cos(2.*Y)\r\n\r\n# draw a filled contour plot and add a colorbar with drawedges turned on\r\ncontours = plt.contourf(x, y, Z)\r\ncb = plt.colorbar(orientation='horizontal', drawedges=True)\r\n\r\n# turn off tick marks so the edges can be seen\r\nfor tick in cb.ax.get_xticklines() + cb.ax.get_yticklines():\r\n    tick.set_visible(False)\r\n\r\n# save as a PDF and a PNG\r\nplt.savefig('test.pdf')\r\nplt.savefig('test.png')\r\n```"""
1424,7764634,jornbr,pelson,2012-10-22 12:30:09,2012-10-23 14:02:14,2012-10-23 14:02:14,closed,dmcdougall,v1.2.x,3,confirmed bug,https://api.github.com/repos/matplotlib/matplotlib/issues/1424,b'pcolor fails if edgecolors is not a string',"b'In axes.py, pcolor, line 7350, variable ""ec"" (edgecolors) is treated as a string, since ec.lower() is called and compared to \'none\'. However, the documentation specifies that edgecolors may be also be a color or color sequence (e.g., a tuple with RGB values). In that case, the call to lower() triggers an AttributeError. Moreover, if the edgecolor/edgecolors is not provided, while ""shading"" is ""faceted"", edgecolors defaults to \'k\', Due to the trailing comma this is a tuple, not a string, which again causes an AttributeError to be raised later on.\r\n'"
1371,7546300,andreas-h,tacaswell,2012-10-12 15:45:08,2014-01-16 22:39:32,2014-01-16 22:39:32,closed,,,2,confirmed bug,https://api.github.com/repos/matplotlib/matplotlib/issues/1371,b'vertical alignment of yticklabels fails on `0`',"b""The following code produces a plot where the yticklabels are neatly aligned vertically on the right - except for the one at `y=0`, which is a bit further to the right. I suppose this is a bug?\r\n\r\n    from numpy import random, linspace, arange\r\n    from numpy.ma import masked_invalid\r\n    import matplotlib as mpl\r\n    import matplotlib.pyplot as plt\r\n    \r\n    data = random.randn(12,72)\r\n    \r\n    nxbin, nybin = data.shape\r\n    xbin = linspace(0, 12, nxbin + 1)\r\n    ybin = linspace(-90, 90, nybin + 1)\r\n    pdata = masked_invalid(data)\r\n    \r\n    cmap = mpl.cm.seismic\r\n    cmap.set_bad('#cccccc', 1.)\r\n    \r\n    fig = plt.figure(figsize=(12,2))\r\n    ax = fig.add_subplot(111)\r\n    \r\n    pl = ax.pcolormesh(xbin, ybin, pdata.T,\r\n            cmap=cmap, edgecolors='None',\r\n            vmin=-7,vmax=7,\r\n            )\r\n    ax.axis([0., 12., ybin.min(), ybin.max()])\r\n    ax.set_xticks(xbin)\r\n    ax.set_xticklabels([])\r\n    ax.set_xticks(xbin[1:] - 0.5, minor=True)\r\n    ax.set_xticklabels(['J','F','M','A','M','J','J','A','S','O','N','D'],\r\n            size='medium', minor=True)\r\n    ax.set_xlim([0.,12.])\r\n    ax.set_yticks(linspace(-90., 90., 13))\r\n    ax.set_yticklabels(arange(-90,91,15), size='medium', fontname='Arial')\r\n    for line in ax.xaxis.get_minorticklines():\r\n        line.set_markersize(0)\r\n"""
1343,7427994,dmcdougall,efiring,2012-10-08 18:47:00,2012-10-14 05:09:56,2012-10-14 05:09:56,closed,,v1.2.x,3,confirmed bug,https://api.github.com/repos/matplotlib/matplotlib/issues/1343,b'Date axis formatter problem',"b""Problem: The autodatelocator and autodateformatter don't seem to work properly. One, the formatter doesn't seem to work immediately after being applied to an axis. A manual call to the locator seems necessary. Two, the autodatelocator doesn't seem to be able to handle view intervals less than 1 second, i.e., the tick labels don't show digits beyond second. You can see this by zooming the example figure from the code below to a level shorter than one second.\r\n\r\n1. Operating system: OS X 10.8.2\r\n2. matplotlib version: 1.2.0rc2\r\n3. I installed matplotlib via:\r\n`pip install git+https://github.com/matplotlib/matplotlib.git#egg=matplotlib-dev`\r\n4. Backend: TkAgg, but I don't think the problem depends on the backend.\r\n5. Code:\r\n\r\n```python\r\n#--------------------------------- code -----------------------------------------------------\r\n# Running in ipython --pylab mode.\r\nfig = figure()\r\ntsta = num2epoch(date2num(datetime.datetime.now()))\r\ntarr = tsta + arange(0, 60*30., 0.01) # half hour, dt = 0.01 sec\r\nx = np.array(num2date(epoch2num(tarr)))\r\nnt = len(tarr)\r\ny = randn(nt)\r\n\r\nax = fig.add_subplot(111)\r\nax.plot(x, y)\r\nfig.canvas.draw()  # Show an overall view of the data\r\n\r\nlocator = mpl.dates.AutoDateLocator()\r\nformatter = mpl.dates.AutoDateFormatter(locator)\r\n\r\nformatter.scaled = {\r\n    365.0 : '%Y',\r\n    30. : '%b %Y',\r\n    1.0 : '%b %d',\r\n    1./24. : '%H:%M',\r\n    1./24./60. : '%M:%S',\r\n    1./24./60./60. : '%S',\r\n}\r\nax.get_xaxis().set_major_formatter(formatter)  # Won't work immediately.\r\nlocator.set_axis(ax.xaxis) # Have to manually make this call and the one below.\r\nlocator.refresh()               # Another manual call.\r\nfig.canvas.draw()\r\n```"""
1325,7334977,michaelaye,tacaswell,2012-10-03 21:17:06,2015-07-17 03:50:50,2015-07-17 03:50:44,closed,,v1.5.0,9,confirmed bug;needs_patch,https://api.github.com/repos/matplotlib/matplotlib/issues/1325,b'Auto-scaling of extent not working for subplots when using sharex and sharey',"b'Using MPL 1.1.0 from the 32-bit EPD 7.3-2 on a Macbook Pro Retina.\r\n\r\nThis error only shows when using subplots. When creating your own sublots via add_subplot it does not seem to occur.\r\n\r\n```python\r\nfrom matplotlib.pyplot import show, subplots\r\nfrom numpy import arange, array\r\n\r\narr = arange(10000).reshape(100,100)\r\nl = [arr,arr,arr,arr]\r\nnarr = array(l)\r\n\r\nfig, axes = subplots(2,2,sharex=True,sharey=True)\r\n\r\nfor ax,im in zip(axes.flatten(),narr):\r\n    ax.imshow(im)\r\n\r\nshow()\r\n```\r\n\r\n### Expected vs Seen:\r\nOne can see that all the 4 axes show the image array with an extent of [-10,110, 0, 100] here instead of the expected intent of [0,100, 0, 100].\r\n'"
1318,7240262,efiring,efiring,2012-09-29 19:52:57,2015-07-18 18:56:29,2015-07-18 18:56:28,closed,,v1.5.0,14,confirmed bug;GUI/Qt;not a blocker;OS/Apple,https://api.github.com/repos/matplotlib/matplotlib/issues/1318,b'qt4backend zoom-to-rect box is drawn incorrectly on OSX',"b'Only on OSX:\r\n\r\n```python\r\nimport matplotlib\r\nmatplotlib.use(""qt4agg"")\r\nimport matplotlib.pyplot as plt\r\nplt.plot([1,2,3])\r\nplt.show()\r\n```\r\nNow click zoom-to-rect; instead of a solid rectangle outline, I get a dotted L-shape.\r\n\r\nThis is with mpl v1.2.x, 7f5b00526b92, pyqt 4.9.4 from homebrew, OS X 10.8. '"
1316,7185670,megies,dmcdougall,2012-09-27 14:12:13,2015-03-03 18:44:49,2012-10-01 22:11:41,closed,,,15,confirmed bug,https://api.github.com/repos/matplotlib/matplotlib/issues/1316,b'very high negative zorder breaks vector graphic rendering',"b'I have stumbled over a problem in vector graphic output with the pdf backend in combination with very high negative zorders (high positive values seem to be ok). Using the following example you see that for very high, negative zorder values the object gets visualized as bitmap.\nI have verified this on matplotlib compiled from current master (Debian Squeeze, Python 2.6.6, with additional numpy 1.6.2).\n```python\nimport matplotlib\nmatplotlib.use(""pdf"")\nimport matplotlib.pyplot as plt\nplt.plot([0, 1], [0, 1], zorder=-10000000)\nplt.savefig(""/tmp/zorder_bad.pdf"")\nplt.figure()\nplt.plot([0, 1], [0, 1], zorder=-100)\nplt.savefig(""/tmp/zorder_ok.pdf"")\nplt.figure()\nplt.plot([0, 1], [0, 1], zorder=1000000000000000)\nplt.savefig(""/tmp/zorder_ok2.pdf"")\n```\nWhile this is obviously easy to circumvent (use reasonable zorder values ;)), I nevertheless think this should be fixed.'"
1310,7134935,tacaswell,tacaswell,2012-09-25 21:34:43,2013-07-29 16:33:13,2013-04-09 04:05:35,closed,,,5,confirmed bug,https://api.github.com/repos/matplotlib/matplotlib/issues/1310,b'Drops last tick label for some ranges',"b""For some values (related to multiples of .3 and .7 it seems) drop the last tick label.\n\nexpected: the last tick to be labeled, spacing of .1 between major ticks\nget:  all be last label are correct\n\nThe following demonstration is assumed to be in an interactive shell with pylab imported\n\nfig = figure()\nax = gca()\ndraw()\nax.get_yaxis().set_major_locator(matplotlib.ticker.MultipleLocator(0.1))\nax.set_ylim([0,.2]); draw() # works\nax.set_ylim([0,.3]); draw() # fail\nax.set_ylim([0,.4]); draw() # works\nax.set_ylim([0,.6]); draw() # fail\nax.set_ylim([0,.7]); draw() # fail\nax.set_ylim([0,1.2]); draw() # fail\nax.set_ylim([0,1.4]); draw() # fail\n\ntested against master branch. \n\nIn [17]: matplotlib.__version__\nOut[17]: '1.2.0rc2'\n\nusing QT4Agg with PyQT4"""
1307,7121399,pelson,pelson,2012-09-25 13:30:09,2015-03-03 18:43:26,2012-09-26 10:19:04,closed,,,6,confirmed bug,https://api.github.com/repos/matplotlib/matplotlib/issues/1307,b'Marker not round with markersize=3',"b""On ```1.2.0rc2``` the following example produces one round marker, and one diamond marker:\n\n```\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nplt.xlim([1, 2])\nplt.ylim([1, 2])\nplt.plot(1.1, 1.1, 'ro', markersize=2.5)\nplt.plot(1.5, 1.5, 'bo', markersize=3)\nplt.plot(1.9, 1.9, 'ko', markersize=3.5)\n\nplt.show()\n```\n\nGit bisect will be useful here, but I'm not sure this was even working in 1.1.0."""
1295,7054798,RobinD42,pelson,2012-09-21 22:40:18,2012-09-22 06:25:42,2012-09-22 06:25:42,closed,,,2,confirmed bug,https://api.github.com/repos/matplotlib/matplotlib/issues/1295,b'Exception when using Container.remove',b'For example:\n\n    bars = axes.bar(...)\n    ...\n    bars.remove()\n\nThis results in an exception due to not passing a parameter to self._remove_method in Container.remove.  Also the lambda used in Axes.add_container does not follow the usual pattern and should probably be changed to:\n\n    container.set_remove_method(lambda h: self.containers.remove(h))'
1249,6873257,pelson,mdboom,2012-09-14 11:25:31,2012-09-18 18:55:10,2012-09-18 18:55:10,closed,pelson,v1.2.x,2,confirmed bug,https://api.github.com/repos/matplotlib/matplotlib/issues/1249,"b""transAxes isn't working properly with scale='log'""","b""Easy to reproduce:\n\n```\nimport matplotlib.pyplot as plt\nimport matplotlib.transforms as mtrans\n\nax = plt.subplot(122, xscale='log')\nt = mtrans.BlendedGenericTransform(ax.transData, ax.transAxes)\nplt.plot(50, 0.5, 'ob', transform=t)\nplt.show()\n```\nManually resize the window, the point should stay in the middle of the axes, but stays static, as if the values given were in device coordinates. \n\nLikely to be down to a caching issue. Related to #1247. Almost certainly caused by me."""
1246,6870791,pelson,pelson,2012-09-14 09:00:56,2012-09-18 18:54:58,2012-09-18 18:54:58,closed,pelson,v1.2.x,0,confirmed bug,https://api.github.com/repos/matplotlib/matplotlib/issues/1246,b'axvline fails with log scaling',"b""Code to reproduce:\n\n```\nimport matplotlib.pyplot as plt\n\nax = plt.axes(yscale='log')\nax.axvline(1)\nplt.show()\n```"""
1235,6827978,dmcdougall,tacaswell,2012-09-12 18:45:48,2016-03-07 14:12:01,2016-03-07 14:11:57,closed,,2.1 (next point release),9,confirmed bug,https://api.github.com/repos/matplotlib/matplotlib/issues/1235,b'Legend placement bug',"b""This script produces a legend that covers the red point:\n\n```python\nimport matplotlib.pyplot as plt\n\ncolors = ['b','g','r']\nfor n in range(3):\n    plt.scatter([n,],[n,],color=colors[n])\nplt.legend(['foo','foo','foo'],loc='best')\nplt.gca().set_xlim(-0.5, 2.2)\nplt.gca().set_ylim(-0.5, 2.2)\nplt.show()\n```"""
1211,6711856,eeaston,mdboom,2012-09-07 11:30:12,2015-01-22 15:33:04,2012-09-10 15:28:30,closed,jkseppan,v1.2.x,15,confirmed bug,https://api.github.com/repos/matplotlib/matplotlib/issues/1211,"b""PDF renderer draws strange artifacts on '%' character in 1.1.1""","b'Hi there, \nThe following code: \n\n```python\nfrom matplotlib import use\nuse(""pdf"")\nimport matplotlib.pyplot as plt\nplt.title(""Is there a bug?%%"")\nplt.savefig(""test.pdf"")\nplt.close\n```\n..produces a PDF with strange arrow artiacts overlaying the \'%\' characters.\n\nThis i a regression since 1.1.0. \n\nMatplotlib version: 1.1.1\nBackend: PDF\nArch: x86_64\nPython: 2.6.2\n \nThanks,\nEdward\n'"
1203,6641306,gfunch,tacaswell,2012-09-04 17:51:58,2014-01-22 15:13:30,2014-01-22 15:13:30,closed,,,2,confirmed bug,https://api.github.com/repos/matplotlib/matplotlib/issues/1203,b'multi-subplot animation problem',"b'I am trying to create a multi-subplot animation which is loosely based \non the animation example code, subplots.py, at\nhttp://matplotlib.sourceforge.net/examples/animation/subplots.html\n\nA simplified version of the full code is shown at this gist:\nhttps://gist.github.com/3613113\n\nI am having problems getting the code to function properly. If I run\nit as is, the figure appears, but no animation is done. Apparently\nthe setup code is called, but the code to change the frames is not.\nIf I comment out the call to the setup code, the method to update\nthe frame is called once, and that is it.\n'"
1194,6605142,pelson,pelson,2012-09-02 20:00:14,2012-09-03 13:57:42,2012-09-03 11:21:04,closed,,,3,confirmed bug,https://api.github.com/repos/matplotlib/matplotlib/issues/1194,b'Streamplot result python version dependent',"b""Both are correct, but I get different lines when running the following code on python2.7 vs python3.2:\n\n```\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nx, y = np.arange(8), np.arange(10)\ndata = u = v = np.linspace(0, 10, 80).reshape(10, 8)\nv = np.sin(v * -0.6)\nplt.streamplot(x, y, u, v)\nplt.savefig('sample.png')\n```\n\nObviously this makes testing streamplotting quite tricky and would be *nice* if we could make the results consistent."""
1193,6601454,jenshnielsen,pelson,2012-09-02 09:39:20,2014-08-07 13:49:27,2014-01-28 09:40:07,closed,,v1.4.0,3,confirmed bug,https://api.github.com/repos/matplotlib/matplotlib/issues/1193,b'Cairo backend ignores alpha in imshow. ',"b'As indicated in #1188 there is a problem with rendering images with alpha != 1 in the cairo backend. \nThe following code produces an image with alpha = 1 using the cairo backend\nbut the right alpha on the colorbar.\n\n```python\nimport matplotlib\nmatplotlib.use(\'cairo\')\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nz = np.arange(150)\nz.shape = (10,15)\n\nfig, axs = plt.subplots(1,1)\n\nax = axs\nim = ax.imshow(z, interpolation=\'nearest\', alpha=0.3)\ncbar = fig.colorbar(im, ax=ax)\n\nplt.savefig(""test2.png"")\nplt.savefig(""test2.pdf"")\nplt.savefig(""test2.svg"")\nplt.show()\n```'"
1172,6545110,danielflanigan,tacaswell,2012-08-30 04:45:44,2013-11-30 02:01:46,2013-11-30 02:01:46,closed,,,1,confirmed bug,https://api.github.com/repos/matplotlib/matplotlib/issues/1172,"b""Axes.tick_params() fails with labelsize=<string> and direction='out'""","b""There seems to be a bug in `Tick._apply_params()`. Here's code that reproduces the issue:\r\n\r\n    import matplotlib.pyplot as plt\r\n    fig = plt.figure()\r\n    sub = fig.add_axes((0, 0, 1, 1))\r\n    sub.tick_params(labelsize='small')\r\n    sub.tick_params(direction='out')\r\n\r\nI think this is an easy fix for someone who understands the code, which I don't.\r\n\r\nIn `axis.Tick`,\r\n\r\n    def _apply_params(self, **kw):\r\n        ...\r\n        label_list = [k for k in kw.items()\r\n                                if k[0] in ['labelsize', 'labelcolor']]\r\n        if label_list:\r\n            label_kw = dict([(k[5:], v) for (k, v) in label_list])\r\n            self.label1.set(**label_kw)\r\n            self.label2.set(**label_kw)\r\n            for k, v in label_kw.items():\r\n                setattr(self, '_'+k, v)\r\n\r\nThese last two lines seem to be setting `self._size` and `self._color`. If this method is called with labelsize as a string, such as `labelsize='small'`, then `self._size` will be set to this string. I can't tell whether the intent is to have the tick color and size match the label color. (To split hairs, it seems like it should be `label_list = [kv for kv in kw.items() ...` to match earlier code.) In `axis.XTick` or `axis.YTick`,\r\n\r\n    def apply_tickdir(self, tickdir):\r\n       ...\r\n       if self._tickdir == 'in':\r\n            self._tickmarkers = (mlines.TICKUP, mlines.TICKDOWN)\r\n            self._pad = self._base_pad\r\n        else:\r\n            self._tickmarkers = (mlines.TICKDOWN, mlines.TICKUP)\r\n            self._pad = self._base_pad + self._size\r\n\r\nWhen `self._size` is a string, the last line raises a TypeError."""
1110,6315961,mdboom,WeatherGod,2012-08-19 23:01:15,2012-11-03 16:56:47,2012-09-04 16:54:28,closed,,v1.2.x,1,confirmed bug,https://api.github.com/repos/matplotlib/matplotlib/issues/1110,b'twiny overrides formatter and adds another x-axis',"b'Christopher Graves reported this on the mailing list:\n\n\nI do not think this is the expected behavior. First, run the following:\n\n```\nfrom pylab import *\n\nplot([0,3],[0.2,0.7])\n\nax1 = gca()\n\nax1.set_yscale(\'log\')\n\ngca().yaxis.set_major_formatter(FormatStrFormatter(\'$%g$\'))\n\n#ax2 = ax1.twiny()\n\n#ax2.set_xlim(ax1.get_xlim())\n\nshow()\n```\n\nYou will see that the y-axis is log10rithmic and axis labels are 0.1 and 1 rather than 10^-1 and 10^0, due to the use of set_major_formatter().\n\n\nNow uncomment the 2 commented lines and run it again. It seems that upon applying a twiny(), the set_major_formatter() action is removed and the y-axis is now displayed as 10^-1 and 10^0. Or more likely, the y-axis is ""overwritten"" with a new y-axis present in ax2. One can add another gca().yaxis.set_major_formatter(FormatStrFormatter(\'$%g$\')) before the show() and it works as intended. However, it seems like unexpected behavior to ""lose"" the formatting when twinning the axis to add a secondary x-axis. Any advice or agreement that this could be a bug?\n\nBest,\n\nChris\n'"
1089,6238220,KennethNielsen,jkseppan,2012-08-15 11:13:29,2012-09-22 10:17:35,2012-09-19 17:52:11,closed,jkseppan,,13,confirmed bug;wishlist,https://api.github.com/repos/matplotlib/matplotlib/issues/1089,b'savefig to sys.stdout fails with pdf backend',"b'Matplotlib 0.99.1.1 and 1.1.1rc crahes when I try to save image data to sys.stdout with the pdf backend (but works with the png backend). The error can be reproduced with this code by commenting out the savefig png line and commenting in the savefig pdf line.\n\n    #!/bin/env python\n    \n    import sys\n    import matplotlib\n    matplotlib.use(\'Agg\')\n    import matplotlib.pyplot as plt\n    \n    plt.plot([1,2,3,4])\n    plt.ylabel(\'some numbers\')\n    \n    # This will work\n    plt.savefig(sys.stdout, format=\'png\')\n    \n    # This will fail\n    #plt.savefig(sys.stdout, format=\'pdf\')\n\nIt produces some of the header and then fails with this traceback:\n\n    %PDF-1.4\n    % \n    Traceback (most recent call last):\n      File ""mpl_fail.py"", line 17, in <module>\n        plt.savefig(sys.stdout, format=\'pdf\')\n      File ""/usr/lib/pymodules/python2.7/matplotlib/pyplot.py"", line 471, in savefig\n        return fig.savefig(*args, **kwargs)\n      File ""/usr/lib/pymodules/python2.7/matplotlib/figure.py"", line 1185, in savefig\n        self.canvas.print_figure(*args, **kwargs)\n      File ""/usr/lib/pymodules/python2.7/matplotlib/backend_bases.py"", line 2021, in print_figure\n        **kwargs)\n      File ""/usr/lib/pymodules/python2.7/matplotlib/backend_bases.py"", line 1789, in print_pdf\n        return pdf.print_pdf(*args, **kwargs)\n      File ""/usr/lib/pymodules/python2.7/matplotlib/backends/backend_pdf.py"", line 2180, in print_pdf\n        file = PdfFile(filename)\n      File ""/usr/lib/pymodules/python2.7/matplotlib/backends/backend_pdf.py"", line 399, in __init__\n        self.writeObject(self.rootObject, root)\n      File ""/usr/lib/pymodules/python2.7/matplotlib/backends/backend_pdf.py"", line 1279, in writeObject\n        self.recordXref(object.id)\n      File ""/usr/lib/pymodules/python2.7/matplotlib/backends/backend_pdf.py"", line 1276, in recordXref\n        self.xrefTable[id][0] = self.fh.tell()\n    IOError: [Errno 29] Illegal seek\n\nMy first thought (well technically a colleague of mine) was that it was some sort of a permission problem with the mpl files, i.e. that the one the pdf backend lives in doesn\'t have permission to write to sys.stdout. We checked if this was a packaging problem, so we tested it both on a ubuntu and centos system, with the same result.\n\nIf you need any more information, please let me know.'"
1059,6088983,gujax,efiring,2012-08-07 21:09:35,2012-08-16 18:46:13,2012-08-16 18:46:13,closed,,,4,confirmed bug;Documentation,https://api.github.com/repos/matplotlib/matplotlib/issues/1059,b'Matplotlib figure window freezes during interactive mode',"b'Hi,\nI  work in interactive mode and using pyplot in the IDLE shell.\nI tried this simple code\n\nfrom pylab import *\nion()\n plot([1,2,3])\n\nA window pops up but freezes and nothing shows up except it says at the top - not Responding.\n\nTherefore, I tried the following.\nSet my backend to be Tkagg and then set the interactive mode to True\n\nAgain wrote the above code (without ion())\n...but same thing. Figure window freezes.\n\nI tried other backends but to no effect.\n\nOtherwise plot works when not in interactive mode. However, everytime I have to close the figure window to proceed with my calculations. I really would like to have the plots open when I am calculating.\nPlease advice. Help is appreciated,\nThank you,\ngujax'"
1045,5895074,schwehr,mdboom,2012-07-28 17:39:21,2012-08-19 17:00:08,2012-08-19 17:00:08,closed,,,6,confirmed bug,https://api.github.com/repos/matplotlib/matplotlib/issues/1045,b'1.1.1 not in pypi',"b'some of us use ""yolk -U"" to pick up new versions of python packages (e.g. for packaging in fink).  I noticed that 1.1.0 is still listed as the latest in pypi.  Any chance that you could add a pypi release to the matplotlib release processes?\n\nThanks!\n-kurt'"
1024,5710465,montefra,mdboom,2012-07-19 11:41:39,2015-03-03 18:43:37,2012-08-03 19:44:58,closed,,,4,confirmed bug;Documentation,https://api.github.com/repos/matplotlib/matplotlib/issues/1024,b'broken links in the gallery',b'the following links in the gallery\nhttp://matplotlib.sourceforge.net/examples/pylab_examples/demo_tight_layout_00.html\nhttp://matplotlib.sourceforge.net/examples/pylab_examples/demo_tight_layout_01.html\nhttp://matplotlib.sourceforge.net/examples/axes_grid/demo_axes_divider_01.html\n(and maybe others) do not work\n\nerror:\n1. Server: matplotlib.sourceforge.net\n2. URL path: /examples/pylab_examples/demo_tight_layout_00.html\n3. Error notes: NONE\n4. Error type: 404\n5. Request method: GET\n6. Request query string: NONE\n7. Time: 2012-07-19 09:12:32 UTC (1342689152)\n\nThe corresponding links in the examples (e.g. http://matplotlib.sourceforge.net/examples/pylab_examples/demo_tight_layout.html) are fine\n'
1005,5537076,danielflanigan,pelson,2012-07-10 23:08:31,2012-08-19 19:10:44,2012-08-19 19:10:44,closed,efiring,,6,confirmed bug;Release critical,https://api.github.com/repos/matplotlib/matplotlib/issues/1005,b'imshow with big-endian data types on OS X',"b""When using imshow with an array of type >f, >f2, >f4, or >f8, the pixel(s) with maximum value in the array appears in the color of the minimum value.\n\na = array([[1, 0], [0, -1]])\nimshow(a.astype('>f'))\n\nThis issue appeared on two systems:\nOS X 10.7.4\nnumpy 1.6.2\nmatplotlib 1.1.0 with backend MacOSX\nand\nOS X 10.6.8\nnumpy 1.6.1\nmatplotlib 1.1.1 with backend TkAgg\n\nThis issue did not appear on a linux x86_64 system running\nnumpy 1.6.1\nmatplotlib 1.0.1 with backend GTKAgg\n\n\n"""
966,5297836,bmu,tacaswell,2012-06-27 14:13:20,2014-03-24 14:10:21,2014-03-24 14:10:21,closed,,v1.4.0,5,confirmed bug,https://api.github.com/repos/matplotlib/matplotlib/issues/966,b'axes_grid: indicate the axes for the suplot with append_axes',b'for further description see [this question](http://stackoverflow.com/questions/8020602/matplotlib-when-using-append-axes-how-can-i-indicate-the-axes-i-want-to-add-th) on stackoverflow.\n\nI trtied the example and could not find a solution even with adapting the source.\n\nIs this a bug?'
950,5095757,pelson,pelson,2012-06-15 16:21:27,2012-06-17 07:05:41,2012-06-17 07:03:47,closed,pelson,,7,confirmed bug,https://api.github.com/repos/matplotlib/matplotlib/issues/950,"b""Gridspec example in documentation doesn't run""","b'The following documentation example doesn\'t run on master (nor on v1.1.0). \n\nThis example is refereed to in the user guide: http://matplotlib.sourceforge.net/users/gridspec.html#a-complex-nested-gridspec-using-subplotspec \n\n```\n$ python doc/users/plotting/examples/demo_gridspec06.py \nTraceback (most recent call last):\n  File ""doc/users/plotting/examples/demo_gridspec06.py"", line 35, in <module>\n    f.add_subplot(ax)\n  File ""matplotlib/lib/matplotlib/figure.py"", line 817, in add_subplot\n    self._axstack.add(key, a)\n  File ""lib/matplotlib/figure.py"", line 112, in add\n    Stack.remove(self, (key, a_existing))\n  File ""lib/matplotlib/cbook.py"", line 1261, in remove\n    raise ValueError(\'Unknown element o\')\nValueError: Unknown element o\n```\n'"
854,4312828,tkf,mdboom,2012-04-26 22:30:55,2014-08-07 13:49:25,2013-05-29 16:12:26,closed,mdboom,v1.3.x blocker,11,confirmed bug,https://api.github.com/repos/matplotlib/matplotlib/issues/854,b'Bug in Axes.relim when the first line is y_isdata=False and possible fix',"b'You can reproduce the bug with:\r\n\r\n```python\r\nfrom matplotlib import pyplot\r\nax = pyplot.axes()\r\nax.axvline(0.5)\r\nax.plot([-0.1, 0, 0.2, 0.1])\r\nax.relim()\r\nax.autoscale()\r\n(ymin, ymax) = ax.get_ylim()\r\nprint ymin, ymax\r\npyplot.show()\r\n```\r\n\r\nPrinted ylim is `-0.2 1.0` where the upper bound should be something like 0.25.  You will see that there is big space between data line and the top bound.\r\n\r\nTo workaround this problem, I defined the following functions:\r\n\r\n```python\r\ndef _update_line_limits(self, line, updatex=True, updatey=True):\r\n    p = line.get_path()\r\n    if p.vertices.size > 0:\r\n        self.dataLim.update_from_path(p, self.ignore_existing_data_limits,\r\n                                      updatex=updatex and line.x_isdata,\r\n                                      updatey=updatey and line.y_isdata)\r\n        if (updatex and line.x_isdata) or (updatey and line.y_isdata):\r\n            self.ignore_existing_data_limits = False\r\n\r\n\r\ndef relim(self):\r\n    self.dataLim.ignore(True)\r\n    for (udatex, updatey) in [[True, False], [False, True]]:\r\n        self.ignore_existing_data_limits = True\r\n        for line in self.lines:\r\n            _update_line_limits(self, line, udatex, updatey)\r\n\r\n    for p in self.patches:\r\n        self._update_patch_limits(p)\r\n```\r\n\r\nIf you call `relim(ax)` instead of  `ax.relim()`, printed ylim is `-0.1 0.25`.  I just simply separate the update of the line limits for x and y axis. I think you can simply replace the two functions with Axes.relim and Ax._update_line_limits.\r\n\r\nI have currently have no time for preparing executable development version of matplotlib and its test environment.  I will send a pull request at some point when I am ready, but if somebody can ""pull"" the snippet above and test it, please do that.'"
841,4183116,joshualande,mdboom,2012-04-18 23:20:39,2014-02-21 16:37:11,2014-01-27 18:16:15,closed,,v1.4.0,8,confirmed bug,https://api.github.com/repos/matplotlib/matplotlib/issues/841,"b""Error autoscaling histogram with histtype='step'""","b""I am running into problems where histograms are not autoscaling correctly.\r\n\r\nBelow is a very simple example which reproduces this problem:\r\n\r\n```\r\nimport pylab as P\r\nP.hist([3000,3010, 3012], histtype='step')\r\nP.savefig('test.pdf')\r\n```\r\n\r\nWhen I run this example using matplotlib v1.1.0 or using the absolute latest version of matplotlib, I obtain an axes which varies from 3000<x<3012 and 0<y<3000 with no visible histogram.\r\n\r\nWhen I add (before saving the plot) the line:\r\n```\r\nP.gca().set_ylim(ymax=2.1)\r\n```\r\nI get a reasonable axes range and can see the histogram.\r\n\r\nI also get a reasonable axes range when I remove the command histtype='step' or when I use matplotlib v1.0.0.\r\n\r\nThanks for your help,\r\n\r\nJoshua"""
835,4140523,jdh2358,mdboom,2012-04-16 19:08:34,2015-11-10 02:33:07,2012-09-05 17:11:33,closed,mdboom,v1.2.x,28,confirmed bug,https://api.github.com/repos/matplotlib/matplotlib/issues/835,b'add documentation for figure show method in backend_bases and backend_template',"b""We have support for a figure show method that was added in this commit https://github.com/matplotlib/matplotlib/commit/884a5665367e24c52ce3d2635304926af02667ff\r\n\r\nbut it was never properly documented in backend_bases and backend_template.  This bit the ipython notebook author's inline backend, as described in this issue https://github.com/ipython/ipython/issues/1612"""
808,3908472,diimdeep,pelson,2012-03-31 05:05:14,2014-04-17 16:26:40,2012-06-30 17:17:31,closed,,,13,confirmed bug;OS/Apple,https://api.github.com/repos/matplotlib/matplotlib/issues/808,b'pip install matplotlib fails',"b'latest osx, xcode\r\ninstall python 2.7.2 with brew, then install pip for it\r\n\r\ntrying install matplotlib but no luck\r\n\r\nhttps://gist.github.com/2259487\r\n\r\n```bash\r\n/usr/bin/clang -fno-strict-aliasing -Os -w -pipe -march=native -Qunused-arguments -fwrapv -DNDEBUG -g -O3 -Wall -DPY_ARRAY_UNIQUE_SYMBOL=MPL_ARRAY_API -DPYCXX_ISO_CPP_LIB=1 -I/usr/local/Cellar/python/2.7.2/lib/python2.7/site-packages/numpy/core/include -I. -I/usr/local/Cellar/python/2.7.2/lib/python2.7/site-packages/numpy/core/include -Isrc -Iagg24/include -I. -I/usr/local/Cellar/python/2.7.2/lib/python2.7/site-packages/numpy/core/include -I/usr/X11/include/freetype2 -I/usr/X11/include -I. -I/usr/local/Cellar/python/2.7.2/include/python2.7 -c src/backend_agg.cpp -o build/temp.macosx-10.4-x86_64-2.7/src/backend_agg.o\r\n\r\nIn file included from src/backend_agg.cpp:11:\r\n\r\nIn file included from src/_backend_agg.h:34:\r\n\r\nagg24/include/agg_renderer_outline_aa.h:1368:45: error: binding of reference to type \'agg::line_profile_aa\' to a value of type \'const agg::line_profile_aa\' drops qualifiers\r\n\r\n        line_profile_aa& profile() { return *m_profile; }\r\n\r\n                                            ^~~~~~~~~~\r\n\r\n1 error generated.\r\n\r\nerror: command \'/usr/bin/clang\' failed with exit status 1\r\n\r\n----------------------------------------\r\nCommand /usr/local/Cellar/python/2.7.2/bin/python -c ""import setuptools;__file__=\'/Users/dmitrywolf/build/matplotlib/setup.py\';exec(compile(open(__file__).read().replace(\'\\r\\n\', \'\\n\'), __file__, \'exec\'))"" install --single-version-externally-managed --record /var/folders/z4/vv2s3tc15sb0t8c3f8tr090h0000gn/T/pip-zM6U8D-record/install-record.txt failed with error code 1 in /Users/dmitrywolf/build/matplotlib\r\n```'"
807,3873306,cgra,cgra,2012-03-29 09:44:47,2012-08-06 20:26:36,2012-08-06 20:26:36,closed,mdboom,,2,confirmed bug,https://api.github.com/repos/matplotlib/matplotlib/issues/807,"b'Crash when using zoom tools on a plot: AutoMinorLocator after MultipleLocator gives ""ValueError: Need at least two major ticks to find minor tick locations""'","b'Run the following code and then zoom in with the zoom-box tool or the cross and right-click drag to zoom in.\r\n\r\nfrom pylab import *\r\nfrom matplotlib.ticker import MultipleLocator, AutoMinorLocator\r\nplot([0,3],[0,2.2])\r\nax = gca()\r\nax.xaxis.set_major_locator(MultipleLocator(0.5))\r\nax.xaxis.set_minor_locator(AutoMinorLocator(2))\r\nshow()\r\n\r\nOnce MultipleLocator has been called, the auto-reassigning of tick spacing when zooming (either with the zoom box or the cross and right-click drag) does not happen, and then AutoMinorLocator gives the following error because it has ""majorstep = majorlocs[1] - majorlocs[0]"" and majorlocs has less than 2 elements when zoomed in that far.\r\n""ValueError: Need at least two major ticks to find minor tick locations\r\n( File ""/usr/lib/pymodules/python2.7/matplotlib/ticker.py"", line 1528, in __call__ )""'"
804,3859639,jkseppan,jkseppan,2012-03-28 18:27:08,2012-04-13 20:20:06,2012-04-13 20:20:06,closed,jkseppan,,2,confirmed bug;Release critical,https://api.github.com/repos/matplotlib/matplotlib/issues/804,b'pdf backend bug with logarithmic plots',"b'Reported by ""sanders"" at http://thread.gmane.org/gmane.comp.python.matplotlib.general/30305\r\n\r\nThe second pdf file produced by the following script looks wrong, as if one corner of each histogram bar is shifted to the right. The png file looks correct, and so does the first pdf file (produced with log=False).\r\n\r\n```python\r\nimport matplotlib.pyplot as plt\r\nimport numpy as np\r\n\r\ndata = np.random.normal(size=1000)\r\n\r\n### correct pdf\r\n\r\nfig = plt.figure()\r\nax = fig.add_subplot(111)\r\n\r\nax.hist(data, fill=False, log=False)\r\n\r\nfig.savefig(\'plot1.pdf\', format=\'pdf\')\r\nfig.savefig(\'plot1.png\', format=\'png\')\r\n\r\n### wrong pdf\r\n\r\nfig = plt.figure()\r\nax = fig.add_subplot(111)\r\n\r\nax.hist(data, fill=False, log=True)\r\n\r\nfig.savefig(\'plot2.pdf\', format=\'pdf\')\r\nfig.savefig(\'plot2.png\', format=\'png\')\r\n```'"
796,3790313,jdh2358,efiring,2012-03-24 03:58:26,2015-07-17 02:59:44,2015-07-17 02:59:42,closed,tacaswell,v1.5.0,5,confirmed bug;low hanging fruit;text,https://api.github.com/repos/matplotlib/matplotlib/issues/796,b'im caching in draw_tex',"b'This method is really confusing me (https://github.com/matplotlib/matplotlib/blob/master/lib/matplotlib/backends/backend_agg.py#L199): \r\n\r\n    def draw_tex(self, gc, x, y, s, prop, angle):\r\n        # todo, handle props, angle, origins\r\n        size = prop.get_size_in_points()\r\n\r\n        texmanager = self.get_texmanager()\r\n        key = s, size, self.dpi, angle, texmanager.get_font_config()\r\n        im = self.texd.get(key)\r\n        if im is None:\r\n            Z = texmanager.get_grey(s, size, self.dpi)\r\n            Z = np.array(Z * 255.0, np.uint8)\r\n\r\n        self._renderer.draw_text_image(Z, x, y, angle, gc)\r\n\r\nSpecifically, if ""im"" is not None after the texd.get call, then ""Z"" is not defined in the draw_text_image call.  That we are not seeing failures suggests the im is never getting cached and perhaps we should just remove this logic.'"
775,3716963,wesm,dmcdougall,2012-03-19 19:59:35,2013-01-26 05:44:34,2013-01-26 05:44:34,closed,,,4,confirmed bug,https://api.github.com/repos/matplotlib/matplotlib/issues/775,b'TypeError in Axes.get_legend_handles_labels',"b'I had to hack this method due to a TypeError in master. No time for a pull request or unit test\r\n\r\n```\r\n    def get_legend_handles_labels(self, legend_handler_map=None):\r\n        """"""\r\n        Return handles and labels for legend\r\n\r\n        ``ax.legend()`` is equivalent to ::\r\n\r\n          h, l = ax.get_legend_handles_labels()\r\n          ax.legend(h, l)\r\n\r\n        """"""\r\n\r\n        handles = []\r\n        labels = []\r\n        for handle in self._get_legend_handles(legend_handler_map):\r\n            label = handle.get_label()\r\n            #if (label is not None and label != \'\' and not label.startswith(\'_\')):\r\n            if label and not (isinstance(label, basestring) and label.startswith(\'_\')):\r\n                handles.append(handle)\r\n                labels.append(label)\r\n\r\n        return handles, labels\r\n```'"
769,3689277,WeatherGod,mdboom,2012-03-16 20:59:06,2015-03-03 18:43:48,2012-03-23 01:00:17,closed,,,3,confirmed bug,https://api.github.com/repos/matplotlib/matplotlib/issues/769,b'GTK Warning message emitted when interactively saving figure',"b'Just started noticing this while on the master branch.  I was just simply using the ""save"" button to save my figures from the GTK window.\r\n\r\n```\r\n/home/bvr/Programs/matplotlib/lib/matplotlib/backends/backend_gtk.py:1078: GtkWarning: Unable to retrieve the file info for `file:///home/bvr/Documents/ZigZag/image.png\': Error stating file \'/home/bvr/Documents/ZigZag/image.png\': No such file or directory\r\n  if self.run() != int(gtk.RESPONSE_OK):\r\n```\r\n\r\nThe figure still saves just fine, it just emits this warning message.'"
761,3621325,sb2nov,WeatherGod,2012-03-12 23:33:57,2012-09-20 13:43:29,2012-09-20 13:43:29,closed,WeatherGod,,10,confirmed bug;mplot3d,https://api.github.com/repos/matplotlib/matplotlib/issues/761,"b'mplot3d, addition to losing color on movement of canvas.'",b'As a already known bug that the plot loses color when you move the axis.\r\nIt also tends to lose color when you do a print_figure. \r\n\r\nSo you can never create a png of the colored plot.'
749,3572082,sb2nov,WeatherGod,2012-03-08 21:04:21,2012-09-20 13:49:05,2012-09-20 13:49:05,closed,WeatherGod,,6,confirmed bug;mplot3d,https://api.github.com/repos/matplotlib/matplotlib/issues/749,b'set_xlim in 3D scatter plots?',"b'While plotting a 3D scatter plot, if you set axis limits to be lesser than the the maximum range of the array.\r\nThe array values are plotted outside the axis area.\r\n\r\nIn the 2D equivalent, those values are ignored. \r\n\r\nif x = [1, 2, 3, 4, 5, 6 ,7]\r\nthen ax.set_xlim(2, 6)\r\n\r\nthis still plots the 1 and 7 value.'"
740,3503652,gkuhl,efiring,2012-03-05 09:32:17,2013-05-22 18:24:24,2013-05-22 18:24:24,closed,,1.2.x known bugs,3,confirmed bug,https://api.github.com/repos/matplotlib/matplotlib/issues/740,b'plt.pcolormesh and shape mismatch',"b'The function ""pcolormesh(X,Y,C)"" will raise no ValueError, if the shapes of C and X,Y are not compatible. Instead a wrong plot will be produced. I suggest to raise a ValueError, if C has a shape of (n,m) and the shapes of  X and Y or neither (n,m) nor (n+1,m+1).\r\n\r\n'"
711,3355958,geggo,jdh2358,2012-02-23 13:38:19,2012-03-10 22:20:24,2012-03-10 22:20:24,closed,,,2,confirmed bug;Release critical,https://api.github.com/repos/matplotlib/matplotlib/issues/711,"b""no 'close_event' emitted with Qt4Agg backend""","b""Dear developers,\r\n\r\nit seems no 'close_event' is emitted when a figure is closed when using the qt4 backend. A short program demonstrating the behaviour:\r\n\r\nimport matplotlib\r\n#matplotlib.use('TkAgg')\r\nmatplotlib.use('Qt4Agg')\r\nimport matplotlib.pyplot as plt\r\ndef onclose(event):\r\n   print 'onclose'\r\nf = plt.figure(1)\r\nf.canvas.mpl_connect('close_event', onclose)\r\nplt.show()\r\n\r\nWith other backends (TkAgg, WxAgg) the callback is executed on closing a figure. \r\n\r\nAs a consequence of the missing close_event, timers for animations are not stopped when closing a figure, leading to an continous stream of errors 'underlying C/C++ object has been deleted' when using ipython. \r\n\r\nGregor Thalhammer"""
688,3013127,fperez,jdh2358,2012-01-29 20:19:19,2012-11-03 17:07:16,2012-03-10 22:20:58,closed,pelson,,3,confirmed bug;Release critical,https://api.github.com/repos/matplotlib/matplotlib/issues/688,"b""bbox_inches='tight' clips figure.suptitle""","b""In ipython for the qtconsole and notebook, we send inline figures using\r\n\r\n```\r\nfig.canvas.print_figure(bytes_io, format=fmt, bbox_inches='tight')\r\n```\r\n\r\nas seen [here](https://github.com/ipython/ipython/blob/master/IPython/core/pylabtools.py#L104).\r\n\r\nHowever, this produces truncated figure titles.  Consider this code:\r\n\r\n```python\r\nf, ax = plt.subplots()\r\nax.plot(rand(100))\r\nax.set_title('Axis title')\r\nf.suptitle('Figure title');\r\n```\r\n\r\nwhich produces this in the notebook:\r\n\r\n![](http://img546.imageshack.us/img546/5448/selection001c.png)\r\n\r\nA slightly more complicated example, using basemap, not only truncates the title but also all the x and y labels.  We show it here for reference, but as @jswhit (basemap author) pointed out over email, basemap labels are located at arbitrary positions and so it's harder for matplotlib to take them into consideration.\r\n\r\n```python\r\nfrom mpl_toolkits.basemap import Basemap\r\n\r\nlon0, lat0, lon1, lat1 = (84.38, 26.22, 88.9, 29.8)\r\nresolution = 'i'\r\n\r\nparallels = np.linspace(lat0, lat1, 5)\r\nmeridians = np.linspace(lon0, lon1, 5)\r\n\r\nf, ax = plt.subplots()\r\nm = Basemap(lon0, lat0, lon1, lat1, resolution=resolution, ax=ax)\r\nm.drawcountries(color=(1,1,0))  # country boundaries in pure yellow\r\nm.drawrivers(color=(0,1,1))  # rivers in cyan\r\nm.bluemarble()  # NASA bluemarble image\r\nm.drawmeridians(meridians, labels=[0,0,0,1], fmt='%.2f')\r\nm.drawparallels(parallels, labels=[1,0,0,0], fmt='%.2f')\r\nf.suptitle('The Himalayas');\r\n```\r\n\r\n![](http://img718.imageshack.us/img718/7213/selection003k.png)\r\n\r\nWhile we noticed this in the notebook, the problem will be present for any figure saving operation that supports `bbox_inches='tight'`.  \r\n\r\nAs discussed in the [mailing list thread about this problem](http://sourceforge.net/mailarchive/forum.php?thread_name=CAHAreOqGuUEKXbbRWVxPgkd25WM4GkTdGbUB7x-aK%3DGD%3DAvYHg%40mail.gmail.com&forum_name=matplotlib-devel), mpl should probably use the position of 'official' artists such figure suptitles in the computation of the bounding box."""
676,2855299,UlFie,dmcdougall,2012-01-16 14:46:30,2012-10-19 09:19:27,2012-10-19 09:19:27,closed,dmcdougall,v1.2.x,3,confirmed bug;Documentation;low hanging fruit,https://api.github.com/repos/matplotlib/matplotlib/issues/676,b'Error in documentation of matplotlib.pyplot.ticklabel_format',"b""At http://matplotlib.sourceforge.net/api/pyplot_api.html, the documentation of keyword argument scilimits for matplotlib.pyplot.ticklabel_format is apparently wrong. It claims that for a pair (m, n) numbers outside the range 10^{-m} ... 10^n will be converted to scientific notation (i.e. a factor like `1e2' will be extracted and written at the top or right of the respective axis). Actually, to have small numbers (not) converted correctly, one has to use a negative value for m, so the documentation should state that numbers outside the range 10^m ... 10^n will be converted to scientific notation, where m will be negative in most cases."""
673,2843435,WeatherGod,efiring,2012-01-14 23:16:07,2012-01-15 06:58:07,2012-01-15 06:58:07,closed,,,1,confirmed bug,https://api.github.com/repos/matplotlib/matplotlib/issues/673,b'imread() not working on master',"b'As reported and confirmed on the matplotlib-devel list at http://sourceforge.net/mailarchive/message.php?msg_id=28676039, the imread() on master is not working and raises the following exception for both grayscale and color images:\r\n\r\n```\r\nTraceback (most recent call last):\r\n  File ""<stdin>"", line 1, in <module>\r\n  File ""/home/ben/Programs/matplotlib/lib/matplotlib/pyplot.py"", line 1746,\r\nin imread\r\n    return _imread(*args, **kwargs)\r\n  File ""/home/ben/Programs/matplotlib/lib/matplotlib/image.py"", line 1218,\r\nin imread\r\n    return handler(fd)\r\nTypeError: PyCXX: Error creating object of type N2Py6ObjectE from (nil)\r\n```\r\n\r\nThis is using python 2.7 with the latest numpy and matplotlib on 32-bit Ubuntu Oneric.  Also confirmed on a 64-bit Ubuntu Natty.  The problem does not appear to be caused by the recent commits to src/_png.cpp by @mdboom.  Maybe some sort of change to CXX?'"
621,2531453,kaufman,jkseppan,2011-12-13 01:14:12,2012-01-01 09:15:29,2012-01-01 09:15:29,closed,jkseppan,,4,confirmed bug,https://api.github.com/repos/matplotlib/matplotlib/issues/621,"b""savefig to pdf and ps don't respect mew=0 or mec""","b""for this code:\r\n\r\nclf()\r\nplot(arange(5),arange(5), 'y.', ms=30.0, mew=0, mec='r')\r\ndraw()\r\nsavefig('mew.pdf')\r\nsavefig('mew.ps')\r\n\r\nThe pdf and ps show a marker edge even though the gtkagg window doesn't (neither do the png or svg savefigures).\r\nThe marker edge in the ps is black instead of red.\r\n\r\nI haven't done a git-bisect, but\r\nf1388ee3c3a5c72af00701e5a623545f0df2f426 from April 11 seems to have the pdf problem but the ps doesn't have a marker edge. """
563,2092351,WeatherGod,WeatherGod,2011-10-30 21:44:14,2015-03-03 18:44:03,2012-08-21 13:22:21,closed,,v1.2.x,3,confirmed bug,https://api.github.com/repos/matplotlib/matplotlib/issues/563,b'sankey.add() has mutable defaults',"b'While working to add api docs for sankey module, I noticed that the add() method contains mutable defaults.  This could cause unexpected issues for users and should probably be fixed.'"
560,2072671,bfroehle,mdboom,2011-10-27 21:03:16,2013-07-22 14:26:08,2013-07-22 14:26:08,closed,,,3,confirmed bug,https://api.github.com/repos/matplotlib/matplotlib/issues/560,b'QuadMesh.draw(): convert_xunits broken',"b'In QuadMesh.draw(), I think the following code is broken\r\n\r\n```xs = self.convert_xunits(self._offsets[:0])\r\nys = self.convert_yunits(self._offsets[:1])```\r\n\r\nbecause it is missing a comma between the : and 0 (or : and 1).'"
545,2015380,mdboom,mdboom,2011-10-21 13:30:14,2015-03-03 18:43:19,2011-10-28 17:25:52,closed,mdboom,,6,confirmed bug,https://api.github.com/repos/matplotlib/matplotlib/issues/545,b'Broken alpha handling in images',"b'As reported by Daniel Hyams, matplotlib does not handle alpha blending in images correctly.\r\n\r\n1) Agg expects premultiplied alpha, but we often send it unmultiplied alpha\r\n\r\n2) set_alpha on the Image artist has no effect'"
530,1919924,throwaway,mdboom,2011-10-16 00:43:59,2011-10-21 14:23:26,2011-10-21 14:23:26,closed,mdboom,,2,confirmed bug,https://api.github.com/repos/matplotlib/matplotlib/issues/530,b'patch: font_manager glob problems cause failure to import matplotlib',"b""Some of my fonts are stored in directories that have square brackets in them, which causes problems when matplotlib's font manager navely tries to apply globbing to them."""
525,1910612,jdh2358,jdh2358,2011-10-14 14:01:55,2012-03-10 22:22:38,2012-03-10 22:22:38,closed,,,1,confirmed bug,https://api.github.com/repos/matplotlib/matplotlib/issues/525,b'key press events require window click in qt4agg',"b'On matplotlib 1.1.x, and probably earlier but untested, keypress events are not processed unless canvas is activated with a mouse click, even if the window has the focus.  First reported here:\r\n\r\nhttps://sourceforge.net/mailarchive/forum.php?thread_name=CAGD8yY80rKoJf9_UsWMSNBtotFkjR0z9kOkHUYoWif9O1Nja0w%40mail.gmail.com&forum_name=matplotlib-users'"
520,1896057,cryptogoth,mdboom,2011-10-12 23:58:16,2011-10-19 18:20:16,2011-10-19 18:20:16,closed,mdboom,,1,confirmed bug;Documentation,https://api.github.com/repos/matplotlib/matplotlib/issues/520,b'example source code in website is missing',"b'When I try to click the ""source code"" link for any script example on the matplotlib website documentation, for example:\r\n\r\nhttp://matplotlib.sourceforge.net/mpl_examples/pylab_examples/axes_demo.py\r\n\r\nI get the following error:\r\n\r\n>>\r\nAn error has been encountered in accessing this page.\r\n\r\n1. Server: matplotlib.sourceforge.net \r\n2. URL path: /mpl_examples/pylab_examples/axes_demo.py \r\n3. Error notes: NONE \r\n4. Error type: 404 \r\n5. Request method: GET \r\n6. Request query string: NONE \r\n7. Time: 2011-10-12 23:51:09 UTC (1318463469)\r\n\r\nReporting this problem: The problem you have encountered is with a project web site hosted by SourceForge.net. This issue should be reported to the SourceForge.net-hosted project (not to SourceForge.net).\r\n\r\nIf this is a severe or recurring/persistent problem, please do one of the following, and provide the error text (numbered 1 through 7, above):\r\n\r\nContact the project via their designated support resources.\r\nContact the project administrators of this project via email (see the upper right-hand corner of the Project Summary page for their usernames) at user-name@users.sourceforge.net\r\nIf you are a maintainer of this web content, please refer to the Site Documentation regarding web services for further assistance.\r\n\r\nNOTE: As of 2008-10-23 directory index display has been disabled by default. This option may be re-enabled by the project by placing a file with the name "".htaccess"" with this line:\r\n\r\nOptions +Indexes\r\n\r\n>>\r\nPlease help! Thanks.'"
510,1834592,huard,mdboom,2011-10-06 15:05:16,2011-10-21 18:14:42,2011-10-21 18:14:42,closed,,,8,confirmed bug,https://api.github.com/repos/matplotlib/matplotlib/issues/510,b'Missing font-size units in SVG',"b""The text style attributes in SVG files do not specify units for the font-size. \r\n\r\nChrome interprets the font-size in px,  while FIrefox font-size is in pt.\r\nWhen comparing to the interactive backend, it seems that Chrome does it right. In Firefox, the discrepancy leads to overlap and placement problems (labels are not centered correctly, etc.)\r\n\r\nI don't know if this should be considered as a Firefox bug or as a matplotlib bug, but I thought this was an observation worth sharing because I spent a couple of hours trying to understand why Firefox did not display the figure correctly.\r\n\r\nAlso, the font-family is hard coded in text elements, but if the font is not available, the browser defaulkt replacement is not always a happy choice. For example, the default matplotlib sans-serif font (Bitsream Vera Sans) does not come installed by default on Ubuntu, and Firefox displays text in serif as a fallback mechanism. \r\n\r\nOf course, all these problems occur with rcParams['svg.fonttype'] = 'svgfont'. """
429,1438406,yannpaul,tacaswell,2011-08-19 03:27:34,2015-07-24 22:01:24,2014-01-16 21:37:09,closed,,,6,confirmed bug;wishlist,https://api.github.com/repos/matplotlib/matplotlib/issues/429,b'undefined behavior of figure.add_subplot() once subplot is modified.',"b'Modifying a subplot using ```change_geometry()``` method does not update the corresponding key for the subplot in the figure. So when you call ```add_subplot()```, you need to call it with the original *args and **kwargs not the modified ones, if you want to access the already existing subplot. \r\n\r\nThis was identified in matplotlib version 0.99.1.1, but looking at the current code in github, it appears the same behavior exists. '"
412,1351850,fmder,leejjoon,2011-08-05 15:29:09,2011-08-08 15:05:03,2011-08-08 15:05:03,closed,leejjoon,,3,confirmed bug,https://api.github.com/repos/matplotlib/matplotlib/issues/412,"b""legend's numpoints not working""","b'In the current trunk version, the `numpoints` argument of the legend function does not change the number of points. It currently plot 3 points no matter what.'"
408,1296265,kghose,mdboom,2011-07-27 14:43:09,2015-03-03 18:43:58,2011-11-08 14:39:55,closed,mdboom,,5,confirmed bug,https://api.github.com/repos/matplotlib/matplotlib/issues/408,b'Small issue with hist (probably in mac os x backend)',"b""(Firstly, this is the kind of bugreport that gets the reporter run out of town with pitch-forks, because it is so trivial. But it scared me a little when I first saw it, so I will report it anyway).\r\n\r\nIssue:\r\n-------\r\n\r\nWhen hist is used to plot a histogram with the align='mid' option, the drawing of the histogram on screen is just slightly displaced. A pdf produced with the same plot turns out exactly as expected.\r\n\r\nTo replicate\r\n---------------\r\n```python\r\nimport pylab\r\n\r\npylab.figure(figsize=(3,3))\r\nr = pylab.randn(1000000)\r\npylab.hist(r,bins=100,range=[-3,3],normed=True, align='mid',histtype='stepfilled',color='gray')\r\nx = pylab.linspace(-3,3,100)\r\ny = (1./(2*pylab.pi)**.5)*pylab.exp(-x**2/2)\r\npylab.plot(x,y,'k')\r\npylab.setp(pylab.gca(), xlim=[-3,3])\r\n```\r\n\r\nsystem specs\r\n------------------\r\nmatplotlib 1.0.1\r\nMac OS X \r\n\r\n\r\nThis might be an issue with the mac os x backend since pdfs come out fine.\r\n\r\nThe reason I post this is because I had an analytic derivation for a distribution I was working with and some simulations I was doing. I kept noticing a slight systematic discrepancy between my analytic formula and the monte carlo simulation histogram and started to worry I had missed something in the  derivation. But when I printed to pdf, my problem went away, much to my relief.\r\n\r\n\r\n\r\n\r\n"""
402,1235429,pmarshwx,leejjoon,2011-07-16 16:51:33,2011-07-18 23:57:49,2011-07-18 23:57:49,closed,leejjoon,,3,confirmed bug;ongoing,https://api.github.com/repos/matplotlib/matplotlib/issues/402,b'Colorbar Issues with Axes_Grid',"b'When trying to create an irregularly spaced intervals in a colorbar, generated in Axes_Grid1.ImageGrid, I noticed a problem with the color bar tickmark labels. In essence when using ImageGrid you cannot directly create an uniformly spaced colorbar with irregular levels, however, you can when not using ImageGrid. Below is a self-contained sample script that demonstrates this problem. \r\n\r\nhttps://gist.github.com/1086530\r\n\r\nThis occurs on both Linux (MPL from git) and OS X (MPL V1.0.1)\r\n'"
396,1203989,nbigaouette,dmcdougall,2011-07-11 20:06:38,2012-09-25 10:51:02,2012-09-25 08:47:37,closed,mdboom,,11,confirmed bug;ongoing,https://api.github.com/repos/matplotlib/matplotlib/issues/396,b'Plotting with negative x values on semilogx',"b""I need to plot a semilogx graph but where x values are negative.\r\n\r\nUsing just plot() and a log scale using set_xscale('log'), values less then 0 are ignored. Using set_xscale('symlog', linthreshx = 1.0e-4) gives a weird result.\r\n\r\nHere is a simple example:\r\n\r\n```python\r\nimport numpy\r\nfrom matplotlib import pyplot\r\n\r\n# Enable interactive mode\r\npyplot.ion()\r\n\r\n# Draw the grid lines\r\npyplot.grid(True)\r\n\r\n# Numbers from -50 to 50, with 0.1 as step\r\nxdomain = numpy.arange(-50,50, 0.1)\r\n\r\n# Plots a simple linear function 'f(x) = x'\r\npyplot.plot(xdomain, xdomain)\r\n# Plots 'sin(x)'\r\npyplot.plot(xdomain, numpy.sin(xdomain))\r\n\r\npyplot.xscale('symlog', linthreshx=0.1)\r\n```\r\nIn that example, the curves are ploted with increasing x values, then do a big jump to the left and increase x again...\r\n\r\nI posted a simple example on the mailinglist but without an answer: http://www.mail-archive.com/matplotlib-users@lists.sourceforge.net/msg21189.html\r\n\r\nThanks"""
370,1095776,mspacek,mdboom,2011-06-22 02:00:18,2011-06-23 16:04:52,2011-06-23 16:04:52,closed,mdboom,v1.0.x,1,confirmed bug;ongoing,https://api.github.com/repos/matplotlib/matplotlib/issues/370,b'regression: severe nonlinear slowdown in artist creation',"b'I was running 0.99.3 for the longest time, but recently switched to git master. Among other issues, I\'ve noticed a big slowdown in the creation of Line2D objects in my app, which embeds a mpl figure within a PyQt4 window. After a whole lot of bisecting, I found the offending commit: ca9d6b29595cf556504c457c8879fbc89c32a217 by mdboom on 2010-05-28. The immediately preceding commit 7d7590e077125b4dcd12fdcf0f20d0091ccc97ba on the same day doesn\'t have this issue. It\'s quite a big diff in the `cbook.CallbackRegistry`, none of which I understand. I\'m guessing the problem applies to any artist, not just Line2Ds, but I haven\'t tried any other type. Here\'s a minimal program that demonstrates the slowdown:\r\n\r\n```\r\nimport sys\r\nimport time\r\nfrom PyQt4 import QtGui\r\n\r\nfrom matplotlib.backends.backend_qt4agg import FigureCanvasQTAgg\r\nfrom matplotlib.lines import Line2D\r\nfrom matplotlib.figure import Figure\r\n\r\nclass MyFigureCanvasQTAgg(FigureCanvasQTAgg):\r\n    def __init__(self):\r\n        figure = Figure()\r\n        FigureCanvasQTAgg.__init__(self, figure)\r\n        self.ax = figure.add_axes([0, 0, 1, 1])\r\n        t0 = time.time()\r\n        self.init_lines()\r\n        print(\'init_lines() took %.3f sec\' % (time.time()-t0))\r\n\r\n    def init_lines(self):\r\n        for i in range(3000):\r\n            line = Line2D([], [], visible=False)\r\n            self.ax.add_line(line)\r\n\r\nif __name__ == ""__main__"":\r\n    app = QtGui.QApplication(sys.argv)\r\n    window = MyFigureCanvasQTAgg()\r\n    window.show()\r\n    sys.exit(app.exec_())\r\n```\r\n\r\nThis creates thousands of empty invisible lines. Here are the results on my machine (Ubuntu Maverick, with stock Qt 4.7.0 and PyQt4 4.7.4), before and after the commit, and for git master:\r\n\r\n```\r\n3000 lines:\r\nbefore: 0.9 sec\r\nafter: 11.9 sec\r\nmaster: 11.9 sec\r\n\r\n6000 lines:\r\nbefore: 1.8 sec\r\nafter: 60 sec\r\nmaster: 60 sec\r\n```\r\n\r\nSo, the problem is a nonlinear function of the number of lines created.'"
353,1088095,ddale,mdboom,2011-06-20 21:19:15,2012-08-20 17:32:43,2012-08-20 17:32:43,closed,,,4,confirmed bug;SF;wishlist,https://api.github.com/repos/matplotlib/matplotlib/issues/353,b'Improved output of text in SVG and PDF',"b""[Original report at SourceForge, opened Mon Dec 15 05:08:09 2008](https://sourceforge.net/tracker/?func=detail&aid=2430751&group_id=80706&atid=560723)\n\nText output to SVG is not preserved as pure text, but instead gets output as paths. This makes it very difficult to do adjustments afterwards in e.g. Inkscape. Text should be output as text.\n\nIn PDF-files, text is output as text, which is good. These files can be imported into Inkscape and edited, which makes it possible to go around the problem with SVG files. However, kerning is applied to all text, so there is extra spacing between each letter. This makes the text look bad and should, in my mind, be removed.\n\nAs far as possible, text objects should have sensible alignment. E.g. titles, x- and y-labels should be center-aligned, and when using fig.autofmt_xdate(), tick labels should be right-aligned. Currently, all text appears to be left-aligned.\n\n### SourceForge Comments\n\n#### On Fri Jun  4 17:59:52 2010, leejjoon wrote:\nI believe that this is a feature request rather than a bug in the current stage.\nI'm moving this to a feature requests tracker.\n\n-JJ\n\n\n#### On Fri Dec 19 09:18:02 2008, mdboom wrote:\nText can be output as text only if the correct fonts are available on the machine on which the SVG is viewed/edited.  Since a common use case of SVG is to share in a browser, embedded paths is often the best thing.  The SVG font standard would be a much better way to solve this, but as of a year ago, last time I looked, none of Mozilla, Inkscape, or cairo-rsvg had SVG font support.  Progress has been made in the intervening time, but until a *release* version of software supports it, it's not going to be very practical or useful.  It's a bit of a chicken-and-egg problem.  As John pointed out, though, the svg.embed_char_paths option allows the user to choose, as long as the viewer/editor has access to the same fonts as matplotlib.\n\nAs for your second point about text kerning in PDF files -- I suspect this is an issue in the PDF-to-SVG conversion, as the kerning looks fine in the original PDF, and is in fact required for the text to look correct, since we embed only a subset of the font.  I'm trying to reproduce this, but my Inkscape (0.46) doesn't seem to have PDF import as an option (though it may just be a missing dependency).  Can you file a separate bug for this and attach .pdf and .svg (converted from .pdf) that exhibits this problem?\n\nLastly, as for alignment, I think that's a reasonable goal, but is a reasonably large task.  It will require refactoring all of the backends, which are currently completely ignorant of text alignment.  Unfortunately, in the general case including math text, this is probably impossible -- we may only be able to support this for regular text.\n\nAs you can see, the emphasis has always been on output for display rather than editing (the latter is simply a lot harder to get right, as with any tool that generates code).\n#### On Thu Dec 18 05:19:10 2008, malmjako wrote:\nThanks! Setting 'svg.embed_char_paths' False gave me plain text in the SVG. However, the text is not correctly aligned. Although the texts are qualitatively in the right place, center- and right-aligned texts are somewhat off, as it seems because the width is not correctly calculated for plain text output.\n\nSVG text objects need to have the style attribute(s) 'text-anchor' and possibly 'text-align' correctly set (although changing the latter did not have any effect on how Inkscape rendered text objects), and the reference point set to the left, center or right point of the object, i.e. the position that the text should be aligned to. No width calculation would then be necessary, resulting in correctly aligned text when using plain text output. It would also make editing the text easier, because text would flow correctly without having to realign the text object.\n\nI have matplotlib 0.98.3 from the Enthought Python Distribution for Windows. Please try with plain text output from 0.98.5 as well!\nFile Added: alignment_test_0.98.3_plaintext.svg\n#### On Wed Dec 17 06:15:11 2008, jdh2358 wrote:\nWhen I run the alignement_test, included below, all text appears to be aligned properly in svg.  I am running 0.98.5 (what version are you running?)\n\nYou can control whether matplotlib embeds the character paths or the plain text using the rc paramter 'svg.embed_char_paths'.  See http://matplotlib.sourceforge.net/users/customizing.html for info on how to set the rc paramters.\n\n### SourceForge History\n\n* On Fri Jun  4 17:59:52 2010, by leejjoon: data_type: 560723\n* On Fri Jun  4 17:59:52 2010, by leejjoon: resolution_id: 100\n* On Thu Dec 18 16:30:55 2008, by jdh2358: assigned_to: 395152\n* On Thu Dec 18 05:19:10 2008, by malmjako: File Added: 305825: alignment_test_0.98.3_plaintext.svg\n* On Wed Dec 17 06:16:01 2008, by jdh2358: File Added: 305696: alignment_test.svg\n* On Wed Dec 17 06:15:50 2008, by jdh2358: File Added: 305695: alignment_test.py\n* On Wed Dec 17 06:15:11 2008, by jdh2358: assigned_to: 100"""
350,1088092,ddale,mdboom,2011-06-20 21:19:14,2015-11-04 23:13:53,2011-07-25 19:14:50,closed,,v1.1.0,3,confirmed bug;ongoing;SF;wishlist,https://api.github.com/repos/matplotlib/matplotlib/issues/350,b'Scatter Marker and Plot Symbol Agreement',"b'[Original report at SourceForge, opened Sat Jun 14 14:27:31 2008](https://sourceforge.net/tracker/?func=detail&aid=1994048&group_id=80706&atid=560723)\n\nSome scatter markers are not specified in the same manner as the corresponding plot symbol.  There should be agreement between the specifications.  Here is the list of predefined scatter markers:\n\n        \'s\'     square\n        \'o\'     circle\n        \'^\'     triangle up\n        \'>\'     triangle right\n        \'v\'     triangle down\n        \'<\'     triangle left\n        \'d\'     diamond\n        \'p\'     pentagram\n        \'h\'     hexagon\n        \'8\'     octagon\n        \'+\'     plus\n        \'x\'     cross\n\nAnd the predefined plot symbols:\n\n        .     # points\n        ,     # pixels\n        o     # circle symbols\n        ^     # triangle up symbols\n        v     # triangle down symbols\n        <     # triangle left symbols\n        >     # triangle right symbols\n        s     # square symbols\n        +     # plus symbols\n        x     # cross symbols\n        D     # diamond symbols\n        d     # thin diamond symbols\n        1     # tripod down symbols\n\nNotably, the \'d\' marker for scatter corresponds to the \'D\' symbol for plot.  So for plot, perhaps we should have:\n\n        d     # diamond symbols\n        D     # thin diamond symbols\n\nAlso, it would be nice if we could have the same set of predefined markers/symbols.\n\n\n### SourceForge Comments\n\n#### On Sun May 30 18:50:59 2010, efiring wrote:\nThis is borderline, but I am pushing it over to the ""Feature Requests"" category.\n#### On Sat Jun 14 14:30:01 2008, tjhnson wrote:\nLogged In: YES \nuser_id=2118451\nOriginator: YES\n\nThis disagreement exists in Revision: 5435.\n\n### SourceForge History\n\n* On Sun May 30 18:50:59 2010, by efiring: data_type: 560723'"
347,1088089,ddale,mdboom,2011-06-20 21:19:13,2015-11-05 03:57:57,2015-11-05 03:57:57,closed,mdboom,2.1 (next point release),5,confirmed bug;SF;text;wishlist,https://api.github.com/repos/matplotlib/matplotlib/issues/347,b'Faster Text drawing needed',"b""[Original report at SourceForge, opened Wed Mar 21 08:03:30 2007](https://sourceforge.net/tracker/?func=detail&aid=1685117&group_id=80706&atid=560723)\n\nDrawing of plots with multiple matplotlib.Text instances is so slow as to be unusable for some applications, such as realtime multiple sequence alignment rendering/viewing (see attachment for a pylab example, resize plot window to see effect).\n\nSome layman's thoughts:\n* Would it be possible to speed things up by implementing some kind of Text Collection?\n\n* Is antialiasing involved? An option to turn it off would be nice in that case.\n\n### SourceForge Comments\n\n#### On Thu Sep  6 16:07:54 2007, mdboom wrote:\nLogged In: YES \nuser_id=119312\nOriginator: NO\n\nIt appears that the text is re-rendered to a newly allocated buffer each time the text is drawn.  Perhaps some caching of text elements would help.\n\n(Mostly just making a note of it for someone else to work this through, or until I have the time.)\n\n### SourceForge History\n\n* On Wed Mar 21 08:03:30 2007, by yohell: File Added: 221568: test.py"""
345,1088087,ddale,pelson,2011-06-20 21:19:13,2012-07-22 14:02:28,2012-06-30 17:49:07,closed,,,5,confirmed bug;SF;wishlist,https://api.github.com/repos/matplotlib/matplotlib/issues/345,"b'string symbol markers (""scattertext"" plot)'","b'[Original report at SourceForge, opened Tue Jul  5 11:51:10 2005](https://sourceforge.net/tracker/?func=detail&aid=1232840&group_id=80706&atid=560723)\n\n\nuse the sample/index number, or a tuple of strings, as a plotting symbol\nin a scatter plot, with optional dot marker. text alignment options should\nat least be left,bottom or left,middle (useful with dot marker) and\ncenter-middle (no dot markers). distance between marker and text might\nalso be an option?\n\nan example of this\nhttp://www.tomasoberg.com/qspr/pca.gif\n\n\nAs discussed on the matplotlib-users mailing-list:\nhttp://sourceforge.net/mailarchive/message.php?msg_id=12243982\n\nQuote, John Hunter:\n Yes, you could do this, but it would take a bit of work to get\n everything right.  Basically, you would like to add string symbol\n markers to scatter, and have them colored with colormaps and support\n variable sizeing as well, right?  The right way to do this, I think,\n would be to implement a TextCollection, following the examples in\n collections.py.  Otherwise it would be extremely slow for large\n numbers of markers.  This would be a useful class anyhow to support\n drawing of text with shared property (eg tick labels) since text\n drawing is slow and is a bottleneck in some applications.\n\n'"
332,1088074,ddale,mdboom,2011-06-20 21:19:10,2011-07-25 19:29:15,2011-07-25 19:29:15,closed,mdboom,v1.1.0,4,confirmed bug;SF;wishlist,https://api.github.com/repos/matplotlib/matplotlib/issues/332,b'add axes.labelweight rc option',"b'[Original report at SourceForge, opened Sun Apr  6 02:35:58 2008](https://sourceforge.net/tracker/?func=detail&aid=1935820&group_id=80706&atid=560723)\n\nGiven that one can already control the default size and color of the labels produced by matplotlib by means of the relevant rc options, it would be nice to also be able to control the default label weight.'"
331,1088073,ddale,dmcdougall,2011-06-20 21:19:10,2013-01-26 05:43:01,2013-01-26 05:43:01,closed,,,2,confirmed bug;SF;wishlist,https://api.github.com/repos/matplotlib/matplotlib/issues/331,b'stem function ability to take one argument',"b'[Original report at SourceForge, opened Wed Oct 28 10:29:27 2009](https://sourceforge.net/tracker/?func=detail&aid=2887957&group_id=80706&atid=560723)\n\nin matlab i believe you can pass the stem function a single vector and it  plots it vs an arbitrary index.  i can do this in matplotlib like so:\n     stem(range(len(x)),x)\n(where x is a ndarray)\nit would be nice if stem where overloaded to take one parameter and do this.\n\nmatplotlib is awesome\nthanks\nalex'"
316,1088058,ddale,mdboom,2011-06-20 21:19:06,2011-07-25 19:28:30,2011-07-25 19:28:30,closed,mdboom,v1.1.0,2,confirmed bug;SF,https://api.github.com/repos/matplotlib/matplotlib/issues/316,b'Polar Plot with 0 Degrees=North and Clockwise',"b""[Original report at SourceForge, opened Thu Aug  6 01:39:00 2009](https://sourceforge.net/tracker/?func=detail&aid=2832989&group_id=80706&atid=560723)\n\nActually, it's possible to plot with polar coords only anticlockwise and 0 deg=East. Should be possible to plot clockwise with 0 deg=North. For example to plot a windrose."""
225,1087965,ddale,ivanov,2011-06-20 21:18:42,2012-07-13 13:17:26,2012-07-13 13:17:26,closed,,,2,confirmed bug;SF,https://api.github.com/repos/matplotlib/matplotlib/issues/225,b'Add support for FreeBSD >6.x',"b'[Original report at SourceForge, opened Sat Jul 17 16:37:47 2010](https://sourceforge.net/tracker/?func=detail&aid=3031051&group_id=80706&atid=560722)\n\nmatplotlib setupext.py currently only includes support for FreeBSD up to 6.x.  The attached patch adds support for more recent FreeBSD versions.\n\n### SourceForge History\n\n* On Sat Jul 17 16:37:47 2010, by pjeremy: File Added: 380383: patch-setupext.py'"
203,1087941,ddale,ianthomas23,2011-06-20 21:18:36,2011-07-10 21:36:19,2011-07-10 21:36:19,closed,ianthomas23,,2,confirmed bug;SF,https://api.github.com/repos/matplotlib/matplotlib/issues/203,b'IndexError in tripcolor',"b'[Original report at SourceForge, opened Tue Apr 19 13:02:27 2011](https://sourceforge.net/tracker/?func=detail&aid=3289673&group_id=80706&atid=560720)\n\nThe file attached (minmal example) produces a segmentation error on my machine. The code this snippet is extracted from (an ""toy"" adaptive 2D FEM solver) produces lots of meshes, only this producing a crash.\n\nIf this is user error, I feel that somewhat better input checking + error messages would be nice...\n\nVersion:\n$ rpm -qa | grep matplotlib\npython-matplotlib-1.0.1-11.fc14.x86_64\n\nBacktrace:\n$ python crashTest.py\nShapes:\n(10, 2) (10, 3) (10,)\nCoords:\n[[ 0.5   0.5 ]\n [ 0.25  0.25]\n [ 0.    0.  ]\n [ 0.5   0.  ]\n [ 1.    0.  ]\n [ 0.    0.5 ]\n [ 1.    0.5 ]\n [ 0.    1.  ]\n [ 0.5   1.  ]\n [ 1.    1.  ]]\nCells:\n[[3 4 6]\n [3 6 0]\n [5 0 8]\n [5 8 7]\n [0 6 9]\n [0 9 8]\n [0 3 1]\n [1 3 2]\n [0 5 1]\n [1 5 2]]\nu:\n[ 0.00032582  0.000265    0.          0.          0.          0.          0.\n  0.          0.          0.        ]\nTraceback (most recent call last):\n  File ""crashTest.py"", line 17, in <module>\n    plt.tripcolor(coords[:,0], coords[:,1], cells, u)\n  File ""/usr/lib64/python2.7/site-packages/matplotlib/pyplot.py"", line 2520, in tripcolor\n    ret = ax.tripcolor(*args, **kwargs)\n  File ""/usr/lib64/python2.7/site-packages/matplotlib/axes.py"", line 8318, in tripcolor\n    return mtri.tripcolor(self, *args, **kwargs)\n  File ""/usr/lib64/python2.7/site-packages/matplotlib/tri/tripcolor.py"", line 61, in tripcolor\n    C = np.asarray(args[0])\nIndexError: tuple index out of range\n\n\n### SourceForge History\n\n* On Tue Apr 19 13:26:00 2011, by kyrsjo: File Added: 409267: image.png\n* On Tue Apr 19 13:02:28 2011, by kyrsjo: File Added: 409262: crashTest.py'"
186,1087924,ddale,WeatherGod,2011-06-20 21:18:32,2015-12-01 16:07:02,2015-12-01 16:07:00,closed,WeatherGod,unassigned,2,confirmed bug;mplot3d;SF,https://api.github.com/repos/matplotlib/matplotlib/issues/186,b'Axes3D with PolyCollection broken',"b'[Original report at SourceForge, opened Wed Jan 12 16:21:04 2011](https://sourceforge.net/tracker/?func=detail&aid=3156579&group_id=80706&atid=560720)\n\nThere seems to be a regression within mpl_toolkits.mplot3d.Axes3D: it works flawless to plot a set of polygons in 2D but stacking these in 3D fails for two reasons:\n* the polygons are created wrongfully, with an extra line from the last vertice back to the origin,\n* the stacking is wrong.\n\nSee attached file for demonstration.\n\n### SourceForge History\n\n* On Wed Jan 12 16:21:04 2011, by danielmader: File Added: 398526: mpl3D.py'"
181,1087919,ddale,WeatherGod,2011-06-20 21:18:31,2011-07-11 01:03:57,2011-07-11 01:03:57,closed,WeatherGod,v1.1.0,1,confirmed bug;mplot3d;SF,https://api.github.com/repos/matplotlib/matplotlib/issues/181,b'Lists not supported by Axes3D.plot_surface',"b'[Original report at SourceForge, opened Thu Dec 16 09:18:48 2010](https://sourceforge.net/tracker/?func=detail&aid=3138587&group_id=80706&atid=560720)\n\nLists are not not supported by Axes3D.plot_surface although they are with 2D plots.\n\nThe following doesn\'t work with matplotlib 1.0.0:\n------------------------------------\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\n\nx = [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5]\ny = [1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3]\nz = [3.09765624,  3.09923861,  3.07380428,  3.03930954,  3.01244428,\n     3.04109599,  3.06855951,  3.08104518,  3.01577574,  3.02221153,\n     3.06242075,  3.05325844,  3.03908932,  3.06565395,  3.07982723]\n\nfig = plt.figure()\nax = Axes3D(fig)\n# plot once for the colors, once for the lines\nax.plot_surface(x, y, z, rstride=1, cstride=1)\nax.set_xlabel(u\'X\')\nax.set_ylabel(u\'Y\')\nax.set_zlabel(u\'Z\')\nplt.show()\nplt.close(fig)\n------------------------------------------------------------\nIf you try \nplt.plot(x,y), it works.\n\nTraceback (most recent call last):\n  File ""C:\\Program Files\\eclipse\\plugins\\org.python.pydev.debug_1.6.3.2010100513\\pysrc\\pydevd.py"", line 1145, in <module>\n    debugger.run(setup[\'file\'], None, None)\n  File ""C:\\Program Files\\eclipse\\plugins\\org.python.pydev.debug_1.6.3.2010100513\\pysrc\\pydevd.py"", line 916, in run\n    execfile(file, globals, locals) #execute the script\n  File ""C:\\Users\\user\\Workspace\\general\\bug_list.py"", line 13, in <module>\n    ax.plot_surface(x, y, z, rstride=1, cstride=1)\n  File ""C:\\Python26\\lib\\site-packages\\mpl_toolkits\\mplot3d\\axes3d.py"", line 663, in plot_surface\n    rows, cols = Z.shape\nAttributeError: \'list\' object has no attribute \'shape\'\n\nAxes3D.plot_wireframe also doesn\'t work, but Axes3D.plot works.\n'"
178,1087916,ddale,WeatherGod,2011-06-20 21:18:30,2015-12-01 16:05:09,2015-12-01 16:05:07,closed,WeatherGod,unassigned,7,confirmed bug;mplot3d;SF,https://api.github.com/repos/matplotlib/matplotlib/issues/178,b'Incorrect mplot3d contourf rendering',"b""[Original report at SourceForge, opened Tue Nov 23 03:11:06 2010](https://sourceforge.net/tracker/?func=detail&aid=3116341&group_id=80706&atid=560720)\n\nThere is a bug in mplot3d's rendering of filled contours.  Attached is a simple test script to reproduce the error: the 2D plot on the left shows the desired result, the 3D plot on the right shows the holes in the contour are not rendered correctly.\n\nDigging around in axes3d.py and art3d.py, I think the problem is that mplot3d ignores the 'codes' that are produced by the 2D contourf routine.  I am probably not using the correct terminology, but I understand that these codes allow a polygon to be composed of multiple line loops, some of which may be holes within other line loops.  By ignoring the codes, the 3D routine renders a single polygon by concatenating all the points together regardless of whether they correspond to a hole or not.\n\nIn revision 8806 of lib/mpl_toolkits/mplot3d/art3d.py, lines 136-7:\n\n   for (((x, y), code), z) in zip(pathsegs, zs):\n        seg.append((x, y, z))\n\nThe codes are extracted from the pathsegs (which come from the 2D contourf routine), but then ignored.\n\nI've taken a look at trying to fix this, but it was not obvious to me how to propagate the 'codes' rendering functionality from the 2D to 3D source code.  Perhaps someone more familiar with mplot3d could look at it.\n\n### SourceForge History\n\n* On Tue Nov 23 03:11:07 2010, by ianthomas23: File Added: 394120: bug3d.py"""
166,1087904,ddale,tacaswell,2011-06-20 21:18:27,2014-08-18 01:39:51,2014-08-18 01:39:51,closed,,,5,confirmed bug;OS/Apple,https://api.github.com/repos/matplotlib/matplotlib/issues/166,b'RuntimeError: CGContextRef is NULL with draw_artist',"b'[Original report at SourceForge, opened Mon Oct  4 17:04:36 2010](https://sourceforge.net/tracker/?func=detail&aid=3081133&group_id=80706&atid=560720)\n\ndraw_artist on mac os x gives me  an error with the following script:\n\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nplt.ion()\nplt.figure()\nsubplot = plt.subplot(1,1,1)\naxis = plt.imshow(np.random.random((10,10)))\nplt.draw()\nsubplot.draw_artist(axis)\nplt.show()\n\nThe traceback is:\n\nTraceback (most recent call last):\n File ""matplotlib-bug.py"", line 8, in <module>\n   subplot.draw_artist(axis)\n File ""/Volumes/Data/Local/lib/python2.7/site-packages/matplotlib/axes.py"", line 1946, in draw_artist\n   a.draw(self._cachedRenderer)\n File ""/Volumes/Data/Local/lib/python2.7/site-packages/matplotlib/artist.py"", line 55, in draw_wrapper\n   draw(artist, renderer, *args, **kwargs)\n File ""/Volumes/Data/Local/lib/python2.7/site-packages/matplotlib/image.py"", line 338, in draw\n   gc = renderer.new_gc()\n File ""/Volumes/Data/Local/lib/python2.7/site-packages/matplotlib/backends/backend_macosx.py"", line 105, in new_gc\n   self.gc.save()\nRuntimeError: CGContextRef is NULL\n\n\nmatplotlib version: 1.0.0 (compiled)\npython version 2.7 (binary from python.org)\nmacosx version: 10.6.4\n\n\n### SourceForge Comments\n\n#### On Tue Oct  5 02:39:48 2010, nicolasrougier wrote:\nI got the code from the ""Animating selected plot elements"" from the scipy cookbook page on animation.\nThe reason for this code is that I\'ve several subplots to be drawn while I\'m running the simulation. I could have used a simple call to plt.draw() but this would redraw the whole figure (is that right ?) and thus I tried to restrict the re-drawing to changing elements since the display is quite slow compared to simualtion.\nThe same code seems to be working on linux using the gtk backend but maybe it is not supposed to.\n\n\n#### On Tue Oct  5 01:31:15 2010, mdehoon wrote:\nI think what is happening is that graphics context functions are being called outside of the event loop. This will not work (at least not in the Mac OS X backend), since the graphics context (CGContextRef) is initialized inside the event loop. What exactly are you trying to accomplish? Can you show a full script that you would like to use for your animations? Also, is this script shown in the matplotlib documentation somewhere?\n\n### SourceForge History\n\n* On Tue Oct  5 01:31:15 2010, by mdehoon: assigned_to: 100'"
163,1087901,ddale,dmcdougall,2011-06-20 21:18:27,2013-08-18 01:31:48,2013-08-18 01:31:48,closed,,,5,confirmed bug;needs clarification,https://api.github.com/repos/matplotlib/matplotlib/issues/163,b'Problem with errorbar in log scale',"b""[Original report at SourceForge, opened Wed Sep  1 13:52:54 2010](https://sourceforge.net/tracker/?func=detail&aid=3057653&group_id=80706&atid=560720)\n\nWhen using log scale, if the error is larger than flux, the error bar does not plot at all:\n\nimport matplotlib as mpl\nmpl.use('Agg')\nimport matplotlib.pyplot as plt\n\nfig = plt.figure()\nax = fig.add_subplot(1, 1, 1)\nax.errorbar([1.],[1.],yerr=[2.])\nax.set_yscale('log')\nfig.savefig('test.png')\n\nHowever, I think it would make more correct to plot the line for the errorbar, and to make it go down to -infinity."""
162,1087900,ddale,efiring,2011-06-20 21:18:26,2013-05-25 19:02:55,2013-05-25 19:02:55,closed,,1.2.x known bugs,3,confirmed bug,https://api.github.com/repos/matplotlib/matplotlib/issues/162,b'twinx and plot_date',"b'[Original report at SourceForge, opened Tue Aug 17 02:13:52 2010](https://sourceforge.net/tracker/?func=detail&aid=3046812&group_id=80706&atid=560720)\n\nThis is my first bug submission; Please ask if more information is needed.\n\nI\'m attempting to plot two data sets on a single figure with a common x axis but separate y axes. I want the first set to correspond to the right y-axis.  My strategy is to add a set of axes to the figure, then create a second set of axes using twinx(), then use plot_date() to add data to the second set of axes.  It appears that there is some problem in the order in which things are done that causes this to fail when the figure is drawn.  \n\nI think the problem may have something to do with the default axis limits being (0.0, 1.0).  These limits cannot be converted to dates since the range for dates is >= 1.0.\n\nHere is a simplified example of code that will fail:\n\nimport matplotlib.pyplot as plt\nimport matplotlib.dates\nimport datetime\n\nt = datetime.datetime.now().date()\nleft_varr = range(10)\nright_varr = range(10)\nright_varr.reverse()\n\ntarr = matplotlib.dates.date2num([t + datetime.timedelta(days=i) for i in varr])\n\n# This will fail                                                                                                                      \nfig = plt.figure()\nax1 = fig.add_subplot(1,1,1)                                                                                                         \nax2 = ax1.twinx()                                                                                                                    \n\nax2.plot_date(tarr, varr)                                                                                                            \n\nfig.canvas.draw()    \n\n### SourceForge Comments\n\n#### On Fri Oct 22 10:55:06 2010, leejjoon wrote:\nThis has been a known problem but not fixed yet. There could be a few other workarounds. One is not to use autoscale_view.\n\nax1 = fig.add_subplot(1,1,1)\nax2 = ax1.twinx()\nax1.set_autoscalex_on(False)\nax2.set_autoscalex_on(False)\n\nax2.plot_date(tarr, left_varr)\n\nax2.set_xlim(min(tarr), max(tarr))\n\nor add same data to the other axes but makes it invisible.\n\nax2.plot_date(tarr, left_varr)\nl1, = ax1.plot_date(tarr, left_varr)\nl1.set_visible(False)\n\n\nI think one way to solve this issue is to check if axes have any artist (has_data method), and include only those axes with child artists during the autoscale_view. However, I\'ll let others review it.\n\n\n#### On Tue Aug 17 02:18:10 2010, pzakielarz wrote:\nOops, I hit the add button too soon.\n\nContinuing on:\n\nThe resulting traceback is:\n\nTraceback (most recent call last):\n  File ""/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/matplotlib/artist.py"", line 55, in draw_wrapper\n    draw(artist, renderer, *args, **kwargs)\n  File ""/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/matplotlib/figure.py"", line 798, in draw\n    func(*args)\n  File ""/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/matplotlib/artist.py"", line 55, in draw_wrapper\n    draw(artist, renderer, *args, **kwargs)\n  File ""/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/matplotlib/axes.py"", line 1942, in draw\n    a.draw(renderer)\n  File ""/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/matplotlib/artist.py"", line 55, in draw_wrapper\n    draw(artist, renderer, *args, **kwargs)\n  File ""/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/matplotlib/axis.py"", line 971, in draw\n    tick_tups = [ t for t in self.iter_ticks()]\n  File ""/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/matplotlib/axis.py"", line 904, in iter_ticks\n    majorLocs = self.major.locator()\n  File ""/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/matplotlib/dates.py"", line 743, in __call__\n    self.refresh()\n  File ""/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/matplotlib/dates.py"", line 752, in refresh\n    dmin, dmax = self.viewlim_to_dt()\n  File ""/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/matplotlib/dates.py"", line 524, in viewlim_to_dt\n    return num2date(vmin, self.tz), num2date(vmax, self.tz)\n  File ""/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/matplotlib/dates.py"", line 289, in num2date\n    if not cbook.iterable(x): return _from_ordinalf(x, tz)\n  File ""/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/matplotlib/dates.py"", line 203, in _from_ordinalf\n    dt = datetime.datetime.fromordinal(ix)\nValueError: ordinal must be >= 1\n\n\nI\'ve come up with a work around that somewhat mimics twinx() and allows the rest of my code to work properly.\n\n\nax1 = fig.add_subplot(1,1,1)\n\nax1.plot_date(tarr, right_varr)\n\nax1.yaxis.tick_right()\nax1.yaxis.set_label_position(\'right\')\n\nfig.canvas.draw()\n\nax2 = ax1.figure.add_axes(ax1.get_position(True), sharex=ax1, frameon=False)\nax2.yaxis.tick_left()\nax2.xaxis.set_visible(False)\n\nax2.plot_date(tarr, left_varr)\n\nfig.canvas.draw()\n\nThis workaround sets up my axes as desired and allows the rest of my code to function as intended.'"
128,973766,juliantaylor,mdboom,2011-05-30 11:10:47,2015-03-03 18:43:48,2012-06-13 12:37:17,closed,mdboom,,7,confirmed bug,https://api.github.com/repos/matplotlib/matplotlib/issues/128,b'hexbin_demo.py crashes with gtk backend',"b""the demo:\r\nhttp://matplotlib.sourceforge.net/examples/pylab_examples/hexbin_demo.html\r\ncrashes in matplotlib 1.0.1 when using the gtk backend:\r\n\r\n    $ python hexbin.py -dgtk\r\n    The program 'hexbin.py' received an X Window System error.\r\n    This probably reflects a bug in the program.\r\n    The error was 'BadMatch (invalid parameter attributes)'.\r\n      (Details: serial 56509 error_code 8 request_code 73 minor_code 0)\r\n      (Note to programmers: normally, X errors are reported asynchronously;\r\n       that is, you will receive the error a while after causing it.\r\n       To debug your program, run it with the --sync command line\r\n       option to change this behavior. You can then get a meaningful\r\n       backtrace from your debugger if you break on the gdk_x_error() function.)\r\n\r\nother backends including gtkagg work fine.\r\ndownstream bug, verified with 1.0.1ubuntu1:\r\nhttps://bugs.launchpad.net/ubuntu/+source/matplotlib/+bug/782812"""
125,950179,ivanov,mdboom,2011-05-24 23:14:37,2015-11-04 23:14:09,2011-07-25 19:15:04,closed,,v1.1.0,2,confirmed bug;ongoing;wishlist,https://api.github.com/repos/matplotlib/matplotlib/issues/125,"b""scatter should accept '*' as markerstyle (the way plot does)""","b""Just wanted to make a quick note of this - it would be a good bug for someone who wants to dive into matplotlib in a very defined manner.\n\nAdditionally, it'd be nice to have all of the markerstyle in plot supported by scatter, and vice versa - in case that isn't the case already for everything other than *\n\n\n    In [956]: plt.scatter(0,0,marker='*')\n    ---------------------------------------------------------------------------\n    ValueError                                Traceback (most recent call last)\n    \n    /home/pi/tmp/local/lib/python2.5/site-packages/matplotlib/pyplot.pyc in scatter(x, y, s, c, marker, cmap, norm, vmin, vmax, alpha, linewidths, faceted, verts, hold, **kwargs)\n       2374     if hold is not None:\n       2375         ax.hold(hold)\n    -> 2376     try:\n       2377         ret = ax.quiver(*args, **kw)\n       2378         draw_if_interactive()\n    \n    /home/pi/tmp/local/lib/python2.5/site-packages/matplotlib/axes.pyc in scatter(self, x, y, s, c, marker, cmap, norm, vmin, vmax, alpha, linewidths, faceted, verts, **kwargs)\n       5742 \n       5743         self._process_unit_info(xdata=x, ydata=y, kwargs=kwargs)\n    -> 5744         x = self.convert_xunits(x)\n       5745         y = self.convert_yunits(y)\n       5746 \n    \n    ValueError: Unknown marker symbol to scatter\n    \n    In [957]: plt.clf()\n    \n    In [958]: plt.plot(0,0,'*')\n    Out[958]: [<matplotlib.lines.Line2D object at 0x7f3467c18d10>]\n"""
113,884175,astrofrog,dmcdougall,2011-05-11 15:57:43,2012-11-03 16:56:26,2012-10-01 22:31:46,closed,,v1.2.x,6,confirmed bug,https://api.github.com/repos/matplotlib/matplotlib/issues/113,"b""dpi= doesn't seem to have any effect with MacOS X backend""","b""I am using the MacOS X backend, and when plotting and saving a file, the dpi= option seems to be ignored:\r\n\r\n    fig = plt.figure()\r\n    ax = fig.add_subplot(1,1,1)\r\n    fig.savefig('test.tif', dpi=1000)\r\n\r\nproduces a file that has dpi=72. Is this normal, or is it a bug? If it is normal that dpi doesn't have any effect, it might be worth adding a warning so the user knowns the dpi option will be ignored."""
110,877614,WeatherGod,WeatherGod,2011-05-10 17:44:08,2015-07-17 09:23:47,2011-09-23 20:37:36,closed,WeatherGod,v1.1.0,5,confirmed bug;mplot3d;SF,https://api.github.com/repos/matplotlib/matplotlib/issues/110,b'pan and zoom are broken for mplot3d',"b""Chances are, this will probably fall on me to address, but I am documenting it here in case someone else realizes the issue.\r\n\r\nWhen creating 3d axes in the old manner (ie, ax = Axes3D(fig)), the panning and zooming features are completely useless and often produces incomprehensible results.  Axes created in the newer manner (ie, ax = fig.gca(projection='3d')) has somewhat better behavior, but still quite useless.\r\n\r\nWhile pan and zoom has never really been properly supported in mplot3d, the current behavior is significantly worse than before.  I suspect that there might be some interactions with a variety of changes.  First, there were some changes to figure object itself, which may have not been properly tested with non-subplotted axes (which would explain differences in behavior between the old style and new style).  Second, I suspect that some changes to the clipping logic for Agg might be causing some of the issues with zooming and panning.\r\n\r\nI think I will temporarily address this issue by disabling pan and zoom for Axes3D objects.  I also want to make the Home button capable of returning the figure view back to normal.  It does not appear to do this right now."""
